
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08010a90  08010a90  00020a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011258  08011258  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011258  08011258  00021258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011260  08011260  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011260  08011260  00021260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011264  08011264  00021264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f48  200001dc  08011444  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002124  08011444  00032124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000268ed  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d5b  00000000  00000000  00056b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  0005b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000191b  00000000  00000000  0005d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af6d  00000000  00000000  0005f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f32  00000000  00000000  0008a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116659  00000000  00000000  000b008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fa4  00000000  00000000  001c66e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001d0688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010a74 	.word	0x08010a74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08010a74 	.word	0x08010a74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_mpu>:
vector_t gravitational_acceleration[3] = {0, 0, 0};

float unit_conversion = NO_CONVERSION;


HAL_StatusTypeDef init_mpu(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	hi2c_mpu = i2c_handler;
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <init_mpu+0x110>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
	uart_debug_handler = debug_handler;
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <init_mpu+0x114>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
    // Write power management configuration
	uint8_t data = MPU_PWR_MGMT_1_DEFAULT_CONFIG;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <init_mpu+0x110>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	f003 fbb1 	bl	8004788 <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <init_mpu+0x52>
		DEBUG_PRINT("Failed to initialize power management configuration\r\n");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <init_mpu+0x114>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	2235      	movs	r2, #53	; 0x35
 8001038:	4933      	ldr	r1, [pc, #204]	; (8001108 <init_mpu+0x118>)
 800103a:	f006 fed1 	bl	8007de0 <HAL_UART_Transmit>
		return ret;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e05a      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write filter configuration
	data = MPU_FILTER_DELAY_5_MS;
 8001042:	2303      	movs	r3, #3
 8001044:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_FILTER_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <init_mpu+0x110>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221a      	movs	r2, #26
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f003 fb93 	bl	8004788 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <init_mpu+0x8e>
		DEBUG_PRINT("Failed to initialize DLPF configuration\r\n");
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <init_mpu+0x114>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2229      	movs	r2, #41	; 0x29
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <init_mpu+0x11c>)
 8001076:	f006 feb3 	bl	8007de0 <HAL_UART_Transmit>
		return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	e03c      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write gyroscope configuration
	data = MPU_GYRO_RANGE_500_DPS;
 800107e:	2308      	movs	r3, #8
 8001080:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_mpu+0x110>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	; 0xd0
 800109a:	f003 fb75 	bl	8004788 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <init_mpu+0xca>
		DEBUG_PRINT("Failed to initialize gyroscope configuration\r\n");
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <init_mpu+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	222e      	movs	r2, #46	; 0x2e
 80010b0:	4917      	ldr	r1, [pc, #92]	; (8001110 <init_mpu+0x120>)
 80010b2:	f006 fe95 	bl	8007de0 <HAL_UART_Transmit>
		return ret;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e01e      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write accelerometer configuration
	data = MPU_ACCEL_RANGE_8G;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <init_mpu+0x110>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	221c      	movs	r2, #28
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f003 fb57 	bl	8004788 <HAL_I2C_Mem_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <init_mpu+0x106>
		DEBUG_PRINT("Failed to initialize accelerometer configuration\r\n");
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <init_mpu+0x114>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <init_mpu+0x124>)
 80010ee:	f006 fe77 	bl	8007de0 <HAL_UART_Transmit>
		return ret;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	e000      	b.n	80010f8 <init_mpu+0x108>
	}
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f8 	.word	0x200001f8
 8001104:	200001fc 	.word	0x200001fc
 8001108:	08010a90 	.word	0x08010a90
 800110c:	08010ac8 	.word	0x08010ac8
 8001110:	08010af4 	.word	0x08010af4
 8001114:	08010b24 	.word	0x08010b24

08001118 <calibrate_mpu>:

HAL_StatusTypeDef calibrate_mpu() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	vector_t target_vector[3] = {1, 0, 0};
 800111e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
	vector_t measured_accel[3];
	vector_t preliminary_bias[3];
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001134:	e038      	b.n	80011a8 <calibrate_mpu+0x90>
		ret = get_accel(measured_accel);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f88e 	bl	800125c <get_accel>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret) {
 8001146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <calibrate_mpu+0x4a>
			DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <calibrate_mpu+0x120>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2223      	movs	r2, #35	; 0x23
 8001156:	4939      	ldr	r1, [pc, #228]	; (800123c <calibrate_mpu+0x124>)
 8001158:	f006 fe42 	bl	8007de0 <HAL_UART_Transmit>
			return ret;
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	e066      	b.n	8001230 <calibrate_mpu+0x118>
		}
		for (int j = 0; j < 3; j++) {
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
 8001166:	e019      	b.n	800119c <calibrate_mpu+0x84>
			preliminary_bias[j] += measured_accel[j];
 8001168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	3330      	adds	r3, #48	; 0x30
 800116e:	443b      	add	r3, r7
 8001170:	3b30      	subs	r3, #48	; 0x30
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	3330      	adds	r3, #48	; 0x30
 800117c:	443b      	add	r3, r7
 800117e:	3b24      	subs	r3, #36	; 0x24
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	3330      	adds	r3, #48	; 0x30
 800118e:	443b      	add	r3, r7
 8001190:	3b30      	subs	r3, #48	; 0x30
 8001192:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++) {
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	3301      	adds	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	2b02      	cmp	r3, #2
 80011a0:	dde2      	ble.n	8001168 <calibrate_mpu+0x50>
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	3301      	adds	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	f240 52db 	movw	r2, #1499	; 0x5db
 80011ae:	4293      	cmp	r3, r2
 80011b0:	ddc1      	ble.n	8001136 <calibrate_mpu+0x1e>
		}
	}
	accel_bias_x = target_vector[0] - (preliminary_bias[0] / CALIBRATION_ITERATIONS);
 80011b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b6:	edd7 6a00 	vldr	s13, [r7]
 80011ba:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001240 <calibrate_mpu+0x128>
 80011be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <calibrate_mpu+0x12c>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_y = target_vector[1] - (preliminary_bias[1] / CALIBRATION_ITERATIONS);
 80011cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80011d0:	edd7 6a01 	vldr	s13, [r7, #4]
 80011d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001240 <calibrate_mpu+0x128>
 80011d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <calibrate_mpu+0x130>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_z = target_vector[2] - (preliminary_bias[2] / CALIBRATION_ITERATIONS);
 80011e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80011ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80011ee:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001240 <calibrate_mpu+0x128>
 80011f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <calibrate_mpu+0x134>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	ret = get_accel(gravitational_acceleration);
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <calibrate_mpu+0x138>)
 8001202:	f000 f82b 	bl	800125c <get_accel>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret) {
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <calibrate_mpu+0x110>
		DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <calibrate_mpu+0x120>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	2223      	movs	r2, #35	; 0x23
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <calibrate_mpu+0x124>)
 800121e:	f006 fddf 	bl	8007de0 <HAL_UART_Transmit>
		return ret;
 8001222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001226:	e003      	b.n	8001230 <calibrate_mpu+0x118>
	}
	unit_conversion = GS_TO_MPSPS;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <calibrate_mpu+0x13c>)
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <calibrate_mpu+0x140>)
 800122c:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001fc 	.word	0x200001fc
 800123c:	08010b58 	.word	0x08010b58
 8001240:	44bb8000 	.word	0x44bb8000
 8001244:	20000200 	.word	0x20000200
 8001248:	20000204 	.word	0x20000204
 800124c:	20000208 	.word	0x20000208
 8001250:	2000020c 	.word	0x2000020c
 8001254:	20000000 	.word	0x20000000
 8001258:	411cf5c3 	.word	0x411cf5c3

0800125c <get_accel>:

HAL_StatusTypeDef get_accel(vector_t accel[3]) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af04      	add	r7, sp, #16
 8001262:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t accel_buf[6];
	ret = HAL_I2C_Mem_Read(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACEL_DATA, I2C_MEMADD_SIZE_8BIT, accel_buf, 6, I2C_DELAY);
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <get_accel+0x194>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2306      	movs	r3, #6
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	223b      	movs	r2, #59	; 0x3b
 800127a:	21d0      	movs	r1, #208	; 0xd0
 800127c:	f003 fb98 	bl	80049b0 <HAL_I2C_Mem_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <get_accel+0x40>
		DEBUG_PRINT("Failed to fetch accelerometer value\r\n");
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <get_accel+0x198>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	2225      	movs	r2, #37	; 0x25
 8001292:	4959      	ldr	r1, [pc, #356]	; (80013f8 <get_accel+0x19c>)
 8001294:	f006 fda4 	bl	8007de0 <HAL_UART_Transmit>
		return ret;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	e0a5      	b.n	80013e8 <get_accel+0x18c>
	}
	int16_t accel_raw_x = (accel_buf[0] << 8) | accel_buf[1];
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	82bb      	strh	r3, [r7, #20]
	int16_t accel_raw_y = (accel_buf[2] << 8) | accel_buf[3];
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	827b      	strh	r3, [r7, #18]
	int16_t accel_raw_z = (accel_buf[4] << 8) | accel_buf[5];
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	823b      	strh	r3, [r7, #16]

	accel[0] = (vector_t)accel_raw_x / MPU_ACCEL_RANGE_8G_LSB + accel_bias_x - gravitational_acceleration[0];
 80012c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80013fc <get_accel+0x1a0>
 80012d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <get_accel+0x1a4>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <get_accel+0x1a8>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)accel_raw_y / MPU_ACCEL_RANGE_8G_LSB + accel_bias_y - gravitational_acceleration[1];
 80012f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80013fc <get_accel+0x1a0>
 8001304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <get_accel+0x1ac>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <get_accel+0x1a8>)
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)accel_raw_z / MPU_ACCEL_RANGE_8G_LSB + accel_bias_z - gravitational_acceleration[2];
 8001324:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	eddf 6a32 	vldr	s13, [pc, #200]	; 80013fc <get_accel+0x1a0>
 8001334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <get_accel+0x1b0>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <get_accel+0x1a8>)
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3308      	adds	r3, #8
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	edc3 7a00 	vstr	s15, [r3]

	accel[0] = (vector_t)(int)(accel[0] * 10) / 10 * unit_conversion;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800136e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <get_accel+0x1b4>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)(int)(accel[1] * 10) / 10 * unit_conversion;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800139e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <get_accel+0x1b4>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b0:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)(int)(accel[2] * 10) / 10 * unit_conversion;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3308      	adds	r3, #8
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <get_accel+0x1b4>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3308      	adds	r3, #8
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	edc3 7a00 	vstr	s15, [r3]
	return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	200001fc 	.word	0x200001fc
 80013f8:	08010b7c 	.word	0x08010b7c
 80013fc:	45800000 	.word	0x45800000
 8001400:	20000200 	.word	0x20000200
 8001404:	2000020c 	.word	0x2000020c
 8001408:	20000204 	.word	0x20000204
 800140c:	20000208 	.word	0x20000208
 8001410:	20000000 	.word	0x20000000

08001414 <init_spatial>:

// Internal globals
vector_t accleration_sample_array[ACCEL_SAMPLES][3];
uint8_t accel_sample_index = 0;

HAL_StatusTypeDef init_spatial(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = init_mpu(i2c_handler, debug_handler);
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fde5 	bl	8000ff0 <init_mpu>
 8001426:	4603      	mov	r3, r0
 8001428:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <init_spatial+0x20>
//		DEBUG_PRINT("Failed hardware initialization");
		return ret;
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	e01c      	b.n	800146e <init_spatial+0x5a>
	}
	ret = calibrate_mpu();
 8001434:	f7ff fe70 	bl	8001118 <calibrate_mpu>
 8001438:	4603      	mov	r3, r0
 800143a:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <init_spatial+0x32>
		return ret;
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	e013      	b.n	800146e <init_spatial+0x5a>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e00c      	b.n	8001466 <init_spatial+0x52>
		get_accel(accleration_sample_array[i]);
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <init_spatial+0x64>)
 8001458:	4413      	add	r3, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fefe 	bl	800125c <get_accel>
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b09      	cmp	r3, #9
 800146a:	ddef      	ble.n	800144c <init_spatial+0x38>
	}
	return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000244 	.word	0x20000244

0800147c <update_acceleration_averages>:
	current_position[2] = 0;

	current_distance = 0;
}

HAL_StatusTypeDef update_acceleration_averages() {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e026      	b.n	80014d6 <update_acceleration_averages+0x5a>
		HAL_StatusTypeDef ret;
		ret = get_accel(accleration_sample_array[accel_sample_index]);
 8001488:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <update_acceleration_averages+0x124>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <update_acceleration_averages+0x128>)
 8001498:	4413      	add	r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fede 	bl	800125c <get_accel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
		if (ret)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <update_acceleration_averages+0x32>
			return ret;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	e073      	b.n	8001596 <update_acceleration_averages+0x11a>
		accel_sample_index = (accel_sample_index + 1) % ACCEL_SAMPLES;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <update_acceleration_averages+0x124>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <update_acceleration_averages+0x12c>)
 80014b6:	fb83 1302 	smull	r1, r3, r3, r2
 80014ba:	1099      	asrs	r1, r3, #2
 80014bc:	17d3      	asrs	r3, r2, #31
 80014be:	1ac9      	subs	r1, r1, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1ad1      	subs	r1, r2, r3
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <update_acceleration_averages+0x124>)
 80014ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	ddd5      	ble.n	8001488 <update_acceleration_averages+0xc>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e037      	b.n	8001552 <update_acceleration_averages+0xd6>
		current_acceleration[0] += accleration_sample_array[i][0];
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <update_acceleration_averages+0x130>)
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	492e      	ldr	r1, [pc, #184]	; (80015a4 <update_acceleration_averages+0x128>)
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <update_acceleration_averages+0x130>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
		current_acceleration[1] += accleration_sample_array[i][1];
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <update_acceleration_averages+0x130>)
 8001506:	ed93 7a01 	vldr	s14, [r3, #4]
 800150a:	4926      	ldr	r1, [pc, #152]	; (80015a4 <update_acceleration_averages+0x128>)
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3304      	adds	r3, #4
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <update_acceleration_averages+0x130>)
 8001524:	edc3 7a01 	vstr	s15, [r3, #4]
		current_acceleration[2] += accleration_sample_array[i][2];
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <update_acceleration_averages+0x130>)
 800152a:	ed93 7a02 	vldr	s14, [r3, #8]
 800152e:	491d      	ldr	r1, [pc, #116]	; (80015a4 <update_acceleration_averages+0x128>)
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3308      	adds	r3, #8
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <update_acceleration_averages+0x130>)
 8001548:	edc3 7a02 	vstr	s15, [r3, #8]
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddc4      	ble.n	80014e2 <update_acceleration_averages+0x66>
	}
	current_acceleration[0] /= ACCEL_SAMPLES;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <update_acceleration_averages+0x130>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <update_acceleration_averages+0x130>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
	current_acceleration[1] /= ACCEL_SAMPLES;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <update_acceleration_averages+0x130>)
 800156e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001572:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <update_acceleration_averages+0x130>)
 800157c:	edc3 7a01 	vstr	s15, [r3, #4]
	current_acceleration[2] /= ACCEL_SAMPLES;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <update_acceleration_averages+0x130>)
 8001582:	ed93 7a02 	vldr	s14, [r3, #8]
 8001586:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <update_acceleration_averages+0x130>)
 8001590:	edc3 7a02 	vstr	s15, [r3, #8]
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002bc 	.word	0x200002bc
 80015a4:	20000244 	.word	0x20000244
 80015a8:	66666667 	.word	0x66666667
 80015ac:	20000218 	.word	0x20000218

080015b0 <update_spatial>:

HAL_StatusTypeDef update_spatial(float delta_t) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef ret;
	vector_euler_step(current_acceleration, current_velocity, delta_t);
 80015ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80015be:	4915      	ldr	r1, [pc, #84]	; (8001614 <update_spatial+0x64>)
 80015c0:	4815      	ldr	r0, [pc, #84]	; (8001618 <update_spatial+0x68>)
 80015c2:	f000 f860 	bl	8001686 <vector_euler_step>
	vector_euler_step(current_velocity, current_position, delta_t);
 80015c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <update_spatial+0x6c>)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <update_spatial+0x64>)
 80015ce:	f000 f85a 	bl	8001686 <vector_euler_step>
	current_speed = magnitude(current_velocity);
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <update_spatial+0x64>)
 80015d4:	f000 f828 	bl	8001628 <magnitude>
 80015d8:	eef0 7a40 	vmov.f32	s15, s0
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <update_spatial+0x70>)
 80015de:	edc3 7a00 	vstr	s15, [r3]
	euler_step(current_speed, &current_distance, delta_t);
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <update_spatial+0x70>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	edd7 0a01 	vldr	s1, [r7, #4]
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <update_spatial+0x74>)
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f000 f888 	bl	8001706 <euler_step>
	ret = update_acceleration_averages();
 80015f6:	f7ff ff41 	bl	800147c <update_acceleration_averages>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <update_spatial+0x58>
//		DEBUG_PRINT("Failed to update acceleration");
		return ret;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	e000      	b.n	800160a <update_spatial+0x5a>
	}
	return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000224 	.word	0x20000224
 8001618:	20000218 	.word	0x20000218
 800161c:	20000234 	.word	0x20000234
 8001620:	20000230 	.word	0x20000230
 8001624:	20000240 	.word	0x20000240

08001628 <magnitude>:
#include "vectors.h"
#include <math.h>
#include <stdlib.h>

// Get the magnitude of a given vector
magnitude_t magnitude(vector_t* vec) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    return root_func((vec[x] * vec[x]) + (vec[y] * vec[y]) + (vec[z] * vec[z]));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	edd3 6a00 	vldr	s13, [r3]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3308      	adds	r3, #8
 800165c:	edd3 6a00 	vldr	s13, [r3]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3308      	adds	r3, #8
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f00f f9dc 	bl	8010a30 <sqrtf>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
}
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <vector_euler_step>:

// Eulers method for integration in respect to time in 3 dimensions.
// Example: pass acceleration vector to source and velocity to target to integrate acceleration
void vector_euler_step(vector_t* source_vec, vector_t* target_vec, float delta_t) {
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	ed87 0a01 	vstr	s0, [r7, #4]
    target_vec[x] += source_vec[x] * delta_t;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    target_vec[y] += source_vec[y] * delta_t;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3304      	adds	r3, #4
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	edd3 6a00 	vldr	s13, [r3]
 80016c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3304      	adds	r3, #4
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	edc3 7a00 	vstr	s15, [r3]
    target_vec[z] += source_vec[z] * delta_t;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3308      	adds	r3, #8
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3308      	adds	r3, #8
 80016e2:	edd3 6a00 	vldr	s13, [r3]
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3308      	adds	r3, #8
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	edc3 7a00 	vstr	s15, [r3]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <euler_step>:

// Eulers method for integration in respect to time for scalars.
// This is used for calculating arc length.
void euler_step(magnitude_t source, magnitude_t* destination, float delta_t) {
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001710:	60b8      	str	r0, [r7, #8]
 8001712:	edc7 0a01 	vstr	s1, [r7, #4]
    *destination += source * delta_t;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	edc3 7a00 	vstr	s15, [r3]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09a      	sub	sp, #104	; 0x68
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f001 fa61 	bl	8002c0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f8b3 	bl	80018b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f000 faff 	bl	8001d50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f000 fadf 	bl	8001d14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001756:	f000 faad 	bl	8001cb4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800175a:	f000 fa03 	bl	8001b64 <MX_TIM3_Init>
  MX_ADC1_Init();
 800175e:	f000 f8fb 	bl	8001958 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001762:	f000 f96f 	bl	8001a44 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001766:	f000 f9ad 	bl	8001ac4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800176a:	f000 fa73 	bl	8001c54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start the longboard by initializing the motor throttle to 0
  char StartMsg[100];
  sprintf(StartMsg, "\r\nStarting the LongBoard!\r\n");
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	493b      	ldr	r1, [pc, #236]	; (8001860 <main+0x120>)
 8001772:	4618      	mov	r0, r3
 8001774:	f00b fd80 	bl	800d278 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd78 	bl	8000270 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	1d39      	adds	r1, r7, #4
 8001786:	2332      	movs	r3, #50	; 0x32
 8001788:	4836      	ldr	r0, [pc, #216]	; (8001864 <main+0x124>)
 800178a:	f006 fb29 	bl	8007de0 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800178e:	210c      	movs	r1, #12
 8001790:	4835      	ldr	r0, [pc, #212]	; (8001868 <main+0x128>)
 8001792:	f005 f9f3 	bl	8006b7c <HAL_TIM_PWM_Start>
  TIM3->CCR4 =  Min_PWM;
 8001796:	4b35      	ldr	r3, [pc, #212]	; (800186c <main+0x12c>)
 8001798:	2250      	movs	r2, #80	; 0x50
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(5000);
 800179c:	f241 3088 	movw	r0, #5000	; 0x1388
 80017a0:	f001 fa74 	bl	8002c8c <HAL_Delay>

  init_spatial(&hi2c1, &huart2);
 80017a4:	492f      	ldr	r1, [pc, #188]	; (8001864 <main+0x124>)
 80017a6:	4832      	ldr	r0, [pc, #200]	; (8001870 <main+0x130>)
 80017a8:	f7ff fe34 	bl	8001414 <init_spatial>
  sprintf(StartMsg, "\r\nInitialized Accelerometer!\r\n");
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4931      	ldr	r1, [pc, #196]	; (8001874 <main+0x134>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00b fd61 	bl	800d278 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fd59 	bl	8000270 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	1d39      	adds	r1, r7, #4
 80017c4:	2332      	movs	r3, #50	; 0x32
 80017c6:	4827      	ldr	r0, [pc, #156]	; (8001864 <main+0x124>)
 80017c8:	f006 fb0a 	bl	8007de0 <HAL_UART_Transmit>


  sprintf(StartMsg, "\r\nInitialized Throttle!\r\n");
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	492a      	ldr	r1, [pc, #168]	; (8001878 <main+0x138>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00b fd51 	bl	800d278 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd49 	bl	8000270 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	1d39      	adds	r1, r7, #4
 80017e4:	2332      	movs	r3, #50	; 0x32
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <main+0x124>)
 80017e8:	f006 fafa 	bl	8007de0 <HAL_UART_Transmit>
  throttle = Min_Throttle;
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <main+0x13c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]

  Lora_Init();
 80017f2:	f000 fb13 	bl	8001e1c <Lora_Init>
  sprintf(StartMsg, "\r\nInitialized LORA!\r\n");
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4921      	ldr	r1, [pc, #132]	; (8001880 <main+0x140>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00b fd3c 	bl	800d278 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fd34 	bl	8000270 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	1d39      	adds	r1, r7, #4
 800180e:	2332      	movs	r3, #50	; 0x32
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <main+0x124>)
 8001812:	f006 fae5 	bl	8007de0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001816:	f007 fded 	bl	80093f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800181a:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <main+0x144>)
 800181c:	2100      	movs	r1, #0
 800181e:	481a      	ldr	r0, [pc, #104]	; (8001888 <main+0x148>)
 8001820:	f007 fe32 	bl	8009488 <osThreadNew>
 8001824:	4603      	mov	r3, r0
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <main+0x14c>)
 8001828:	6013      	str	r3, [r2, #0]

  /* creation of readThrottle */
  readThrottleHandle = osThreadNew(ReadThrottle, NULL, &readThrottle_attributes);
 800182a:	4a19      	ldr	r2, [pc, #100]	; (8001890 <main+0x150>)
 800182c:	2100      	movs	r1, #0
 800182e:	4819      	ldr	r0, [pc, #100]	; (8001894 <main+0x154>)
 8001830:	f007 fe2a 	bl	8009488 <osThreadNew>
 8001834:	4603      	mov	r3, r0
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <main+0x158>)
 8001838:	6013      	str	r3, [r2, #0]

  /* creation of sendSpeed */
  sendSpeedHandle = osThreadNew(SendSpeed, NULL, &sendSpeed_attributes);
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <main+0x15c>)
 800183c:	2100      	movs	r1, #0
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <main+0x160>)
 8001840:	f007 fe22 	bl	8009488 <osThreadNew>
 8001844:	4603      	mov	r3, r0
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <main+0x164>)
 8001848:	6013      	str	r3, [r2, #0]

  /* creation of accelUpdateTask */
  accelUpdateTaskHandle = osThreadNew(startAccelUpdateTask, NULL, &accelUpdateTask_attributes);
 800184a:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <main+0x168>)
 800184c:	2100      	movs	r1, #0
 800184e:	4817      	ldr	r0, [pc, #92]	; (80018ac <main+0x16c>)
 8001850:	f007 fe1a 	bl	8009488 <osThreadNew>
 8001854:	4603      	mov	r3, r0
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <main+0x170>)
 8001858:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800185a:	f007 fdef 	bl	800943c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800185e:	e7fe      	b.n	800185e <main+0x11e>
 8001860:	08010bdc 	.word	0x08010bdc
 8001864:	20000498 	.word	0x20000498
 8001868:	200003c4 	.word	0x200003c4
 800186c:	40000400 	.word	0x40000400
 8001870:	20000324 	.word	0x20000324
 8001874:	08010bf8 	.word	0x08010bf8
 8001878:	08010c18 	.word	0x08010c18
 800187c:	200005e0 	.word	0x200005e0
 8001880:	08010c34 	.word	0x08010c34
 8001884:	08010d58 	.word	0x08010d58
 8001888:	08002339 	.word	0x08002339
 800188c:	20000568 	.word	0x20000568
 8001890:	08010d7c 	.word	0x08010d7c
 8001894:	08002349 	.word	0x08002349
 8001898:	2000056c 	.word	0x2000056c
 800189c:	08010da0 	.word	0x08010da0
 80018a0:	08002399 	.word	0x08002399
 80018a4:	20000570 	.word	0x20000570
 80018a8:	08010dc4 	.word	0x08010dc4
 80018ac:	080023d9 	.word	0x080023d9
 80018b0:	20000574 	.word	0x20000574

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b096      	sub	sp, #88	; 0x58
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2244      	movs	r2, #68	; 0x44
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f00b fd3b 	bl	800d33e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018da:	f003 fce1 	bl	80052a0 <HAL_PWREx_ControlVoltageScaling>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018e4:	f000 fd9c 	bl	8002420 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e8:	2302      	movs	r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f2:	2310      	movs	r3, #16
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fa:	2302      	movs	r3, #2
 80018fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001902:	230a      	movs	r3, #10
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001906:	2307      	movs	r3, #7
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fd18 	bl	800534c <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001922:	f000 fd7d 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2303      	movs	r3, #3
 800192c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f004 f8e0 	bl	8005b04 <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800194a:	f000 fd69 	bl	8002420 <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3758      	adds	r7, #88	; 0x58
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800197c:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <MX_ADC1_Init+0xe4>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800199a:	2204      	movs	r2, #4
 800199c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019dc:	f001 fb06 	bl	8002fec <HAL_ADC_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019e6:	f000 fd1b 	bl	8002420 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019f6:	f002 f861 	bl	8003abc <HAL_ADCEx_MultiModeConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a00:	f000 fd0e 	bl	8002420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_ADC1_Init+0xe8>)
 8001a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a10:	237f      	movs	r3, #127	; 0x7f
 8001a12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a14:	2304      	movs	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001a22:	f001 fc33 	bl	800328c <HAL_ADC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a2c:	f000 fcf8 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200002c0 	.word	0x200002c0
 8001a3c:	50040000 	.word	0x50040000
 8001a40:	04300002 	.word	0x04300002

08001a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_I2C1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <MX_I2C1_Init+0x7c>)
 8001a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a7e:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a80:	f002 fde6 	bl	8004650 <HAL_I2C_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a8a:	f000 fcc9 	bl	8002420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001a92:	f003 fb5f 	bl	8005154 <HAL_I2CEx_ConfigAnalogFilter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a9c:	f000 fcc0 	bl	8002420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_I2C1_Init+0x74>)
 8001aa4:	f003 fba1 	bl	80051ea <HAL_I2CEx_ConfigDigitalFilter>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 fcb7 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000324 	.word	0x20000324
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	10909cec 	.word	0x10909cec

08001ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001aec:	f242 720f 	movw	r2, #9999	; 0x270f
 8001af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001afa:	f04f 32ff 	mov.w	r2, #4294967295
 8001afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001b10:	f004 ff0a 	bl	8006928 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b1a:	f000 fc81 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001b2c:	f005 fb42 	bl	80071b4 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b36:	f000 fc73 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_TIM2_Init+0x9c>)
 8001b48:	f006 f856 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b52:	f000 fc65 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000378 	.word	0x20000378

08001b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001b98:	4a2d      	ldr	r2, [pc, #180]	; (8001c50 <MX_TIM3_Init+0xec>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001b9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001bac:	f240 623f 	movw	r2, #1599	; 0x63f
 8001bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bbe:	4823      	ldr	r0, [pc, #140]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001bc0:	f004 feb2 	bl	8006928 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bca:	f000 fc29 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	481c      	ldr	r0, [pc, #112]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001bdc:	f005 faea 	bl	80071b4 <HAL_TIM_ConfigClockSource>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001be6:	f000 fc1b 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001bec:	f004 ff64 	bl	8006ab8 <HAL_TIM_PWM_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001bf6:	f000 fc13 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001c0a:	f005 fff5 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001c14:	f000 fc04 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c18:	2360      	movs	r3, #96	; 0x60
 8001c1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001c30:	f005 f9ac 	bl	8006f8c <HAL_TIM_PWM_ConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001c3a:	f000 fbf1 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM3_Init+0xe8>)
 8001c40:	f000 fd24 	bl	800268c <HAL_TIM_MspPostInit>

}
 8001c44:	bf00      	nop
 8001c46:	3738      	adds	r7, #56	; 0x38
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200003c4 	.word	0x200003c4
 8001c50:	40000400 	.word	0x40000400

08001c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <MX_USART1_UART_Init+0x5c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c98:	f006 f854 	bl	8007d44 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ca2:	f000 fbbd 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000410 	.word	0x20000410
 8001cb0:	40013800 	.word	0x40013800

08001cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_USART2_UART_Init+0x5c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART2_UART_Init+0x58>)
 8001cf8:	f006 f824 	bl	8007d44 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 fb8d 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000498 	.word	0x20000498
 8001d10:	40004400 	.word	0x40004400

08001d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_DMA_Init+0x38>)
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <MX_DMA_Init+0x38>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6493      	str	r3, [r2, #72]	; 0x48
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_DMA_Init+0x38>)
 8001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	200f      	movs	r0, #15
 8001d38:	f002 f828 	bl	8003d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d3c:	200f      	movs	r0, #15
 8001d3e:	f002 f841 	bl	8003dc4 <HAL_NVIC_EnableIRQ>

}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000

08001d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a2a      	ldr	r2, [pc, #168]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <MX_GPIO_Init+0xc4>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2120      	movs	r1, #32
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f002 fc27 	bl	8004620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dd8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <MX_GPIO_Init+0xc8>)
 8001dea:	f002 fa6f 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dee:	2320      	movs	r3, #32
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e08:	f002 fa60 	bl	80042cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000800 	.word	0x48000800

08001e1c <Lora_Init>:

/* USER CODE BEGIN 4 */

void Lora_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09a      	sub	sp, #104	; 0x68
 8001e20:	af00      	add	r7, sp, #0
	// Set LORA Chip To Transmit/Receive Mode
	char msg[100] = "";
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2260      	movs	r2, #96	; 0x60
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00b fa85 	bl	800d33e <memset>
	// Spreading Factor: 7
	// Bandwidth: 500 KHz
	// Coding Rate: 1
	// Programmed Preamble: 10
	// This favors speed over dependabilitySerial2.println("AT+PARAMETER=7,9,1,4");
	sprintf(msg, "AT+PARAMETER=10,8,1,4\r\n");
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4960      	ldr	r1, [pc, #384]	; (8001fb8 <Lora_Init+0x19c>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00b fa1d 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fa15 	bl	8000270 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	1d39      	adds	r1, r7, #4
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	485a      	ldr	r0, [pc, #360]	; (8001fbc <Lora_Init+0x1a0>)
 8001e52:	f005 ffc5 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e5a:	f000 ff17 	bl	8002c8c <HAL_Delay>

	// Sets LORA Chip address to 24
	sprintf(msg, "AT+ADDRESS=24\r\n");
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4957      	ldr	r1, [pc, #348]	; (8001fc0 <Lora_Init+0x1a4>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00b fa08 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fa00 	bl	8000270 <strlen>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	4850      	ldr	r0, [pc, #320]	; (8001fbc <Lora_Init+0x1a0>)
 8001e7c:	f005 ffb0 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e84:	f000 ff02 	bl	8002c8c <HAL_Delay>

	// Reads back address to verify setup
	sprintf(msg, "AT+NETWORKID=3\r\n");
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	494e      	ldr	r1, [pc, #312]	; (8001fc4 <Lora_Init+0x1a8>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00b f9f3 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f9eb 	bl	8000270 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	1d39      	adds	r1, r7, #4
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	4845      	ldr	r0, [pc, #276]	; (8001fbc <Lora_Init+0x1a0>)
 8001ea6:	f005 ff9b 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001eaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eae:	f000 feed 	bl	8002c8c <HAL_Delay>

	sprintf(msg, "AT+CPIN?\r\n");
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4944      	ldr	r1, [pc, #272]	; (8001fc8 <Lora_Init+0x1ac>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00b f9de 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe f9d6 	bl	8000270 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	1d39      	adds	r1, r7, #4
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	483b      	ldr	r0, [pc, #236]	; (8001fbc <Lora_Init+0x1a0>)
 8001ed0:	f005 ff86 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001ed4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed8:	f000 fed8 	bl	8002c8c <HAL_Delay>


	sprintf(msg, "AT+CRFOP?\r\n");
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	493b      	ldr	r1, [pc, #236]	; (8001fcc <Lora_Init+0x1b0>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00b f9c9 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe f9c1 	bl	8000270 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	1d39      	adds	r1, r7, #4
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	4830      	ldr	r0, [pc, #192]	; (8001fbc <Lora_Init+0x1a0>)
 8001efa:	f005 ff71 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f02:	f000 fec3 	bl	8002c8c <HAL_Delay>

	sprintf(msg, "AT+ADDRESS?\r\n");
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4931      	ldr	r1, [pc, #196]	; (8001fd0 <Lora_Init+0x1b4>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00b f9b4 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe f9ac 	bl	8000270 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	1d39      	adds	r1, r7, #4
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	4826      	ldr	r0, [pc, #152]	; (8001fbc <Lora_Init+0x1a0>)
 8001f24:	f005 ff5c 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f2c:	f000 feae 	bl	8002c8c <HAL_Delay>

	sprintf(msg, "AT+NETWORKID?\r\n");
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4928      	ldr	r1, [pc, #160]	; (8001fd4 <Lora_Init+0x1b8>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00b f99f 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe f997 	bl	8000270 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	1d39      	adds	r1, r7, #4
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <Lora_Init+0x1a0>)
 8001f4e:	f005 ff47 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f56:	f000 fe99 	bl	8002c8c <HAL_Delay>

	sprintf(msg, "AT+BAND?\r\n");
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	491e      	ldr	r1, [pc, #120]	; (8001fd8 <Lora_Init+0x1bc>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00b f98a 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe f982 	bl	8000270 <strlen>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	1d39      	adds	r1, r7, #4
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <Lora_Init+0x1a0>)
 8001f78:	f005 ff32 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f80:	f000 fe84 	bl	8002c8c <HAL_Delay>

	sprintf(msg, "AT+MODE=0\r\n");
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4915      	ldr	r1, [pc, #84]	; (8001fdc <Lora_Init+0x1c0>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00b f975 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f96d 	bl	8000270 <strlen>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	1d39      	adds	r1, r7, #4
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <Lora_Init+0x1a0>)
 8001fa2:	f005 ff1d 	bl	8007de0 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001faa:	f000 fe6f 	bl	8002c8c <HAL_Delay>
}
 8001fae:	bf00      	nop
 8001fb0:	3768      	adds	r7, #104	; 0x68
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08010c4c 	.word	0x08010c4c
 8001fbc:	20000410 	.word	0x20000410
 8001fc0:	08010c64 	.word	0x08010c64
 8001fc4:	08010c74 	.word	0x08010c74
 8001fc8:	08010c88 	.word	0x08010c88
 8001fcc:	08010c94 	.word	0x08010c94
 8001fd0:	08010ca0 	.word	0x08010ca0
 8001fd4:	08010cb0 	.word	0x08010cb0
 8001fd8:	08010cc0 	.word	0x08010cc0
 8001fdc:	08010ccc 	.word	0x08010ccc

08001fe0 <Lora_Send_Data>:

void Lora_Send_Data(char data[])
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09e      	sub	sp, #120	; 0x78
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	6078      	str	r0, [r7, #4]
	// Combines message to be sent with the data passed in
	char LoraMsg[100];
	sprintf(LoraMsg, "AT+SEND=%i,%i,%s\r\n", ESP_LORA_ADDRESS, strlen(data), data);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7fe f941 	bl	8000270 <strlen>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	f107 000c 	add.w	r0, r7, #12
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	2219      	movs	r2, #25
 8001ffc:	4910      	ldr	r1, [pc, #64]	; (8002040 <Lora_Send_Data+0x60>)
 8001ffe:	f00b f93b 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart1, LoraMsg, strlen(LoraMsg), 50);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe f932 	bl	8000270 <strlen>
 800200c:	4603      	mov	r3, r0
 800200e:	b29a      	uxth	r2, r3
 8002010:	f107 010c 	add.w	r1, r7, #12
 8002014:	2332      	movs	r3, #50	; 0x32
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <Lora_Send_Data+0x64>)
 8002018:	f005 fee2 	bl	8007de0 <HAL_UART_Transmit>
	osThreadSuspend(readThrottleHandle);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <Lora_Send_Data+0x68>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f007 fac3 	bl	80095ac <osThreadSuspend>
	osDelay(200);
 8002026:	20c8      	movs	r0, #200	; 0xc8
 8002028:	f007 fb02 	bl	8009630 <osDelay>
	osThreadResume(readThrottleHandle);
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <Lora_Send_Data+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f007 fadc 	bl	80095ee <osThreadResume>



}
 8002036:	bf00      	nop
 8002038:	3770      	adds	r7, #112	; 0x70
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	08010cd8 	.word	0x08010cd8
 8002044:	20000410 	.word	0x20000410
 8002048:	2000056c 	.word	0x2000056c

0800204c <Parse_Recieve_Data>:

void Parse_Recieve_Data(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
	// Find the position of "T" in the array
		bool good = true;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]

	    char *start = strstr(UART1_rxBuffer, "T");
 8002056:	2154      	movs	r1, #84	; 0x54
 8002058:	482e      	ldr	r0, [pc, #184]	; (8002114 <Parse_Recieve_Data+0xc8>)
 800205a:	f00b f978 	bl	800d34e <strchr>
 800205e:	6138      	str	r0, [r7, #16]

	    // Check if "T" is found
	    if (start != NULL)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d053      	beq.n	800210e <Parse_Recieve_Data+0xc2>
	    {
	    	buffer_print(start, "str from start of parse");
 8002066:	492c      	ldr	r1, [pc, #176]	; (8002118 <Parse_Recieve_Data+0xcc>)
 8002068:	6938      	ldr	r0, [r7, #16]
 800206a:	f000 f883 	bl	8002174 <buffer_print>
	        // Find the position of the next comma after "S"
	        char *end = strchr(start, ',');
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	6938      	ldr	r0, [r7, #16]
 8002072:	f00b f96c 	bl	800d34e <strchr>
 8002076:	60f8      	str	r0, [r7, #12]

	        // Check if the comma is found
	        if (end != NULL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d047      	beq.n	800210e <Parse_Recieve_Data+0xc2>
	        {

	        	char *error = strchr(receive_data, '-');
 800207e:	212d      	movs	r1, #45	; 0x2d
 8002080:	4826      	ldr	r0, [pc, #152]	; (800211c <Parse_Recieve_Data+0xd0>)
 8002082:	f00b f964 	bl	800d34e <strchr>
 8002086:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <Parse_Recieve_Data+0x46>
	        	{
	        		good = false;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, '+');
 8002092:	212b      	movs	r1, #43	; 0x2b
 8002094:	4821      	ldr	r0, [pc, #132]	; (800211c <Parse_Recieve_Data+0xd0>)
 8002096:	f00b f95a 	bl	800d34e <strchr>
 800209a:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <Parse_Recieve_Data+0x5a>
	        	{
	        		good = false;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, '=');
 80020a6:	213d      	movs	r1, #61	; 0x3d
 80020a8:	481c      	ldr	r0, [pc, #112]	; (800211c <Parse_Recieve_Data+0xd0>)
 80020aa:	f00b f950 	bl	800d34e <strchr>
 80020ae:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <Parse_Recieve_Data+0x6e>
	        	{
	        		good = false;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, ',');
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	4817      	ldr	r0, [pc, #92]	; (800211c <Parse_Recieve_Data+0xd0>)
 80020be:	f00b f946 	bl	800d34e <strchr>
 80020c2:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <Parse_Recieve_Data+0x82>
	        	{
	        		good = false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, ' ');
 80020ce:	2120      	movs	r1, #32
 80020d0:	4812      	ldr	r0, [pc, #72]	; (800211c <Parse_Recieve_Data+0xd0>)
 80020d2:	f00b f93c 	bl	800d34e <strchr>
 80020d6:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <Parse_Recieve_Data+0x96>
	        	{
	        		good = false;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
	        	}

	        	if (good)
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <Parse_Recieve_Data+0xc2>
	        	{
	        		// Calculate the length of the substring
	        		size_t length = end - start;
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	607b      	str	r3, [r7, #4]
	        		if (length > 4)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d80a      	bhi.n	800210c <Parse_Recieve_Data+0xc0>
	        			return;

	        		// Copy the substring to the buffer
	        		strncpy(receive_data, start, length);
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6939      	ldr	r1, [r7, #16]
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <Parse_Recieve_Data+0xd0>)
 80020fc:	f00b f934 	bl	800d368 <strncpy>

	        		// Null-terminate the buffer
	        		receive_data[length] = '\0';
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <Parse_Recieve_Data+0xd0>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e000      	b.n	800210e <Parse_Recieve_Data+0xc2>
	        			return;
 800210c:	bf00      	nop
	        	}

	        }
	    }
}
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000578 	.word	0x20000578
 8002118:	08010cec 	.word	0x08010cec
 800211c:	200005dc 	.word	0x200005dc

08002120 <get_timestep>:

// Get stored time in timer 2 in terms of seconds
double get_timestep() {
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
	long double cur_time = TIM2->CNT;
 8002126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f9e9 	bl	8000504 <__aeabi_ui2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	e9c7 2300 	strd	r2, r3, [r7]
	// Reset timer for next call
	TIM2->CNT = 0;
 800213a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
	// Division to make time in terms of seconds
	cur_time /= 8000;
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <get_timestep+0x50>)
 8002148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800214c:	f7fe fb7e 	bl	800084c <__aeabi_ddiv>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	e9c7 2300 	strd	r2, r3, [r7]
	return (double)cur_time;
 8002158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800215c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002160:	eeb0 0a47 	vmov.f32	s0, s14
 8002164:	eef0 0a67 	vmov.f32	s1, s15
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40bf4000 	.word	0x40bf4000

08002174 <buffer_print>:

void buffer_print(void* buffer, const char* msg) {
 8002174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
 8002180:	466b      	mov	r3, sp
 8002182:	469a      	mov	sl, r3
	uint8_t modded_buffer[strlen(buffer) + strlen(msg)];
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe f873 	bl	8000270 <strlen>
 800218a:	4606      	mov	r6, r0
 800218c:	6838      	ldr	r0, [r7, #0]
 800218e:	f7fe f86f 	bl	8000270 <strlen>
 8002192:	4603      	mov	r3, r0
 8002194:	18f1      	adds	r1, r6, r3
 8002196:	460b      	mov	r3, r1
 8002198:	3b01      	subs	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	2300      	movs	r3, #0
 800219e:	4688      	mov	r8, r1
 80021a0:	4699      	mov	r9, r3
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b6:	2300      	movs	r3, #0
 80021b8:	460c      	mov	r4, r1
 80021ba:	461d      	mov	r5, r3
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	00eb      	lsls	r3, r5, #3
 80021c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ca:	00e2      	lsls	r2, r4, #3
 80021cc:	1dcb      	adds	r3, r1, #7
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	ebad 0d03 	sub.w	sp, sp, r3
 80021d6:	466b      	mov	r3, sp
 80021d8:	3300      	adds	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
	sprintf(modded_buffer, "%s: %s\r\n", msg, buffer);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	490a      	ldr	r1, [pc, #40]	; (800220c <buffer_print+0x98>)
 80021e2:	68b8      	ldr	r0, [r7, #8]
 80021e4:	f00b f848 	bl	800d278 <siprintf>
	HAL_UART_Transmit(&huart2, modded_buffer, strlen(modded_buffer), HAL_MAX_DELAY);
 80021e8:	68b8      	ldr	r0, [r7, #8]
 80021ea:	f7fe f841 	bl	8000270 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <buffer_print+0x9c>)
 80021fa:	f005 fdf1 	bl	8007de0 <HAL_UART_Transmit>
 80021fe:	46d5      	mov	sp, sl
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220a:	bf00      	nop
 800220c:	08010d04 	.word	0x08010d04
 8002210:	20000498 	.word	0x20000498

08002214 <receive_lora_packet>:

HAL_StatusTypeDef receive_lora_packet()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
	bool received_new_packet = false;
 800221a:	2300      	movs	r3, #0
 800221c:	71fb      	strb	r3, [r7, #7]
	while (!received_new_packet) {
 800221e:	e008      	b.n	8002232 <receive_lora_packet+0x1e>
	    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	4915      	ldr	r1, [pc, #84]	; (8002278 <receive_lora_packet+0x64>)
 8002224:	4815      	ldr	r0, [pc, #84]	; (800227c <receive_lora_packet+0x68>)
 8002226:	f005 fe65 	bl	8007ef4 <HAL_UART_Receive_DMA>
	    if (UART1_rxBuffer[0] == '+')
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <receive_lora_packet+0x64>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b2b      	cmp	r3, #43	; 0x2b
 8002230:	d006      	beq.n	8002240 <receive_lora_packet+0x2c>
	while (!received_new_packet) {
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <receive_lora_packet+0xc>
 800223e:	e000      	b.n	8002242 <receive_lora_packet+0x2e>
	    	break;
 8002240:	bf00      	nop
	}
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, LORA_BUFFER_SIZE - 2);
 8002242:	2262      	movs	r2, #98	; 0x62
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <receive_lora_packet+0x64>)
 8002246:	480d      	ldr	r0, [pc, #52]	; (800227c <receive_lora_packet+0x68>)
 8002248:	f005 fe54 	bl	8007ef4 <HAL_UART_Receive_DMA>
//    buffer_print(UART1_rxBuffer, "rcv portion");
    // Packets MUST be from address 25 and have a length of 3 bytes or they will be discarded
    UART1_rxBuffer[LORA_BUFFER_SIZE - 1] = 0;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <receive_lora_packet+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	buffer_print(UART1_rxBuffer, "rxBuffer");
 8002254:	490a      	ldr	r1, [pc, #40]	; (8002280 <receive_lora_packet+0x6c>)
 8002256:	4808      	ldr	r0, [pc, #32]	; (8002278 <receive_lora_packet+0x64>)
 8002258:	f7ff ff8c 	bl	8002174 <buffer_print>
//    if (strncmp(UART1_rxBuffer, "RCV=25,", 7)) {
//    	return HAL_ERROR;
//    }
    Parse_Recieve_Data();
 800225c:	f7ff fef6 	bl	800204c <Parse_Recieve_Data>
    buffer_print(receive_data, "data");
 8002260:	4908      	ldr	r1, [pc, #32]	; (8002284 <receive_lora_packet+0x70>)
 8002262:	4809      	ldr	r0, [pc, #36]	; (8002288 <receive_lora_packet+0x74>)
 8002264:	f7ff ff86 	bl	8002174 <buffer_print>
//    while (UART1_rxBuffer[0] != '\n') {
//    	HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, 1);
////        buffer_print(UART1_rxBuffer, "garbage char");
//    }
    UART1_rxBuffer[0] = 0;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <receive_lora_packet+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000578 	.word	0x20000578
 800227c:	20000410 	.word	0x20000410
 8002280:	08010d10 	.word	0x08010d10
 8002284:	08010d1c 	.word	0x08010d1c
 8002288:	200005dc 	.word	0x200005dc

0800228c <Smooth_Speed>:

void Smooth_Speed(int tempThrottle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	// If the tempThrottle is above or below Max or Min set it to the Max or Min
	if (tempThrottle < Min_Throttle) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da02      	bge.n	80022a0 <Smooth_Speed+0x14>
		tempThrottle = Min_Throttle;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	e004      	b.n	80022aa <Smooth_Speed+0x1e>
	}
	else if (tempThrottle > Max_Throttle) {
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b50      	cmp	r3, #80	; 0x50
 80022a4:	dd01      	ble.n	80022aa <Smooth_Speed+0x1e>
		tempThrottle = Max_Throttle;
 80022a6:	2350      	movs	r3, #80	; 0x50
 80022a8:	607b      	str	r3, [r7, #4]
	}

	// see if the difference is bigger than 1 then smooth the throttle increase or decrease
	int diffThrottle = tempThrottle - throttle;
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <Smooth_Speed+0xa4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
	if (diffThrottle >= -1 && diffThrottle <= 1)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	db02      	blt.n	80022c2 <Smooth_Speed+0x36>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	dd2f      	ble.n	8002322 <Smooth_Speed+0x96>
	{
		return;
	}

	if (diffThrottle > 1)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	dd14      	ble.n	80022f2 <Smooth_Speed+0x66>
	{
		while (throttle < tempThrottle)
 80022c8:	e00d      	b.n	80022e6 <Smooth_Speed+0x5a>
		{
			throttle += 1;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <Smooth_Speed+0xa4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <Smooth_Speed+0xa4>)
 80022d2:	6013      	str	r3, [r2, #0]
			TIM3->CCR4 =  Min_PWM + throttle;
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <Smooth_Speed+0xa4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <Smooth_Speed+0xa8>)
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80022e0:	2064      	movs	r0, #100	; 0x64
 80022e2:	f000 fcd3 	bl	8002c8c <HAL_Delay>
		while (throttle < tempThrottle)
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <Smooth_Speed+0xa4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dcec      	bgt.n	80022ca <Smooth_Speed+0x3e>
			throttle -= 1;
			TIM3->CCR4 =  Min_PWM + throttle;
			HAL_Delay(100);
		}
	}
	return;
 80022f0:	e019      	b.n	8002326 <Smooth_Speed+0x9a>
	else if (diffThrottle < 1)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dc16      	bgt.n	8002326 <Smooth_Speed+0x9a>
		while (throttle > tempThrottle)
 80022f8:	e00d      	b.n	8002316 <Smooth_Speed+0x8a>
			throttle -= 1;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <Smooth_Speed+0xa4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <Smooth_Speed+0xa4>)
 8002302:	6013      	str	r3, [r2, #0]
			TIM3->CCR4 =  Min_PWM + throttle;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <Smooth_Speed+0xa4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <Smooth_Speed+0xa8>)
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 8002310:	2064      	movs	r0, #100	; 0x64
 8002312:	f000 fcbb 	bl	8002c8c <HAL_Delay>
		while (throttle > tempThrottle)
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <Smooth_Speed+0xa4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbec      	blt.n	80022fa <Smooth_Speed+0x6e>
	return;
 8002320:	e001      	b.n	8002326 <Smooth_Speed+0x9a>
		return;
 8002322:	bf00      	nop
 8002324:	e000      	b.n	8002328 <Smooth_Speed+0x9c>
	return;
 8002326:	bf00      	nop

}
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200005e0 	.word	0x200005e0
 8002334:	40000400 	.word	0x40000400

08002338 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f007 f975 	bl	8009630 <osDelay>
 8002346:	e7fb      	b.n	8002340 <StartDefaultTask+0x8>

08002348 <ReadThrottle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadThrottle */
void ReadThrottle(void *argument)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b090      	sub	sp, #64	; 0x40
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  for(;;) {
//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 25);
    
//	Parse_Recieve_Data();
//	HAL_UART_Transmit(&huart2, receive_data, strlen(receive_data), 25);
    receive_lora_packet();
 8002350:	f7ff ff60 	bl	8002214 <receive_lora_packet>

	if (receive_data[0] == 'T') {
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <ReadThrottle+0x40>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b54      	cmp	r3, #84	; 0x54
 800235a:	d1f9      	bne.n	8002350 <ReadThrottle+0x8>
		int tempThrottle = atoi(receive_data + 1);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <ReadThrottle+0x44>)
 800235e:	4618      	mov	r0, r3
 8002360:	f009 ff0c 	bl	800c17c <atoi>
 8002364:	63f8      	str	r0, [r7, #60]	; 0x3c
		Smooth_Speed(tempThrottle);
 8002366:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002368:	f7ff ff90 	bl	800228c <Smooth_Speed>
		sprintf(ThrottleMsg, "Set Throttle to: %i", throttle);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <ReadThrottle+0x48>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <ReadThrottle+0x4c>)
 8002376:	4618      	mov	r0, r3
 8002378:	f00a ff7e 	bl	800d278 <siprintf>
		Lora_Send_Data(ThrottleMsg);
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe2d 	bl	8001fe0 <Lora_Send_Data>
    receive_lora_packet();
 8002386:	e7e3      	b.n	8002350 <ReadThrottle+0x8>
 8002388:	200005dc 	.word	0x200005dc
 800238c:	200005dd 	.word	0x200005dd
 8002390:	200005e0 	.word	0x200005e0
 8002394:	08010d24 	.word	0x08010d24

08002398 <SendSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSpeed */
void SendSpeed(void *argument)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendSpeed */
  /* Infinite loop */
  for(;;)
  {
	// Calculate Speed
	char formatted_speed[4] = "";
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
	sprintf(formatted_speed, "%.1f", current_speed);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <SendSpeed+0x38>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8cd 	bl	8000548 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	f107 000c 	add.w	r0, r7, #12
 80023b6:	4907      	ldr	r1, [pc, #28]	; (80023d4 <SendSpeed+0x3c>)
 80023b8:	f00a ff5e 	bl	800d278 <siprintf>
	Lora_Send_Data(formatted_speed);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe0d 	bl	8001fe0 <Lora_Send_Data>
  osDelay(1000);
 80023c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ca:	f007 f931 	bl	8009630 <osDelay>
  {
 80023ce:	e7e7      	b.n	80023a0 <SendSpeed+0x8>
 80023d0:	20000230 	.word	0x20000230
 80023d4:	08010d38 	.word	0x08010d38

080023d8 <startAccelUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAccelUpdateTask */
void startAccelUpdateTask(void *argument)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAccelUpdateTask */
  /* Infinite loop */
  for(;;) {
    update_spatial(get_timestep());
 80023e0:	f7ff fe9e 	bl	8002120 <get_timestep>
 80023e4:	ec53 2b10 	vmov	r2, r3, d0
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fe fbfc 	bl	8000be8 <__aeabi_d2f>
 80023f0:	4603      	mov	r3, r0
 80023f2:	ee00 3a10 	vmov	s0, r3
 80023f6:	f7ff f8db 	bl	80015b0 <update_spatial>
 80023fa:	e7f1      	b.n	80023e0 <startAccelUpdateTask+0x8>

080023fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800240e:	f000 fc1d 	bl	8002c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001000 	.word	0x40001000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  if (throttle > 0)
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <Error_Handler+0x24>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	ddfb      	ble.n	8002428 <Error_Handler+0x8>
	  {
		  throttle--;
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <Error_Handler+0x24>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3b01      	subs	r3, #1
 8002436:	4a03      	ldr	r2, [pc, #12]	; (8002444 <Error_Handler+0x24>)
 8002438:	6013      	str	r3, [r2, #0]
		  HAL_Delay(50);
 800243a:	2032      	movs	r0, #50	; 0x32
 800243c:	f000 fc26 	bl	8002c8c <HAL_Delay>
	  if (throttle > 0)
 8002440:	e7f2      	b.n	8002428 <Error_Handler+0x8>
 8002442:	bf00      	nop
 8002444:	200005e0 	.word	0x200005e0

08002448 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_MspInit+0x4c>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_MspInit+0x4c>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6613      	str	r3, [r2, #96]	; 0x60
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_MspInit+0x4c>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_MspInit+0x4c>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_MspInit+0x4c>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_MspInit+0x4c>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	210f      	movs	r1, #15
 8002482:	f06f 0001 	mvn.w	r0, #1
 8002486:	f001 fc81 	bl	8003d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0ac      	sub	sp, #176	; 0xb0
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2288      	movs	r2, #136	; 0x88
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00a ff40 	bl	800d33e <memset>
  if(hadc->Instance==ADC1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_ADC_MspInit+0xc8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d146      	bne.n	8002556 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80024ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80024d6:	2302      	movs	r3, #2
 80024d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80024de:	2308      	movs	r3, #8
 80024e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80024e2:	2307      	movs	r3, #7
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80024e6:	2302      	movs	r3, #2
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80024ea:	2302      	movs	r3, #2
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80024ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fd59 	bl	8005fb0 <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002504:	f7ff ff8c 	bl	8002420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_ADC_MspInit+0xcc>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_ADC_MspInit+0xcc>)
 800250e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_ADC_MspInit+0xcc>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_ADC_MspInit+0xcc>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_ADC_MspInit+0xcc>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_ADC_MspInit+0xcc>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002538:	2301      	movs	r3, #1
 800253a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800253e:	230b      	movs	r3, #11
 8002540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800254e:	4619      	mov	r1, r3
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_ADC_MspInit+0xd0>)
 8002552:	f001 febb 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	37b0      	adds	r7, #176	; 0xb0
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	50040000 	.word	0x50040000
 8002564:	40021000 	.word	0x40021000
 8002568:	48000800 	.word	0x48000800

0800256c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0ac      	sub	sp, #176	; 0xb0
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2288      	movs	r2, #136	; 0x88
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f00a fed6 	bl	800d33e <memset>
  if(hi2c->Instance==I2C1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a21      	ldr	r2, [pc, #132]	; (800261c <HAL_I2C_MspInit+0xb0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d13b      	bne.n	8002614 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800259c:	2340      	movs	r3, #64	; 0x40
 800259e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025a0:	2300      	movs	r3, #0
 80025a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fd01 	bl	8005fb0 <HAL_RCCEx_PeriphCLKConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025b4:	f7ff ff34 	bl	8002420 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_I2C_MspInit+0xb4>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_I2C_MspInit+0xb4>)
 80025be:	f043 0302 	orr.w	r3, r3, #2
 80025c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_I2C_MspInit+0xb4>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 80025d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d8:	2312      	movs	r3, #18
 80025da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025ea:	2304      	movs	r3, #4
 80025ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025f4:	4619      	mov	r1, r3
 80025f6:	480b      	ldr	r0, [pc, #44]	; (8002624 <HAL_I2C_MspInit+0xb8>)
 80025f8:	f001 fe68 	bl	80042cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_I2C_MspInit+0xb4>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_I2C_MspInit+0xb4>)
 8002602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002606:	6593      	str	r3, [r2, #88]	; 0x58
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_I2C_MspInit+0xb4>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	37b0      	adds	r7, #176	; 0xb0
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005400 	.word	0x40005400
 8002620:	40021000 	.word	0x40021000
 8002624:	48000400 	.word	0x48000400

08002628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002638:	d10c      	bne.n	8002654 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002652:	e010      	b.n	8002676 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_TIM_Base_MspInit+0x60>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10b      	bne.n	8002676 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a08      	ldr	r2, [pc, #32]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_TIM_Base_MspInit+0x5c>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40000400 	.word	0x40000400

0800268c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <HAL_TIM_MspPostInit+0x64>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11c      	bne.n	80026e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_TIM_MspPostInit+0x68>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d8:	2302      	movs	r3, #2
 80026da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4619      	mov	r1, r3
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <HAL_TIM_MspPostInit+0x6c>)
 80026e4:	f001 fdf2 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48000800 	.word	0x48000800

080026fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ae      	sub	sp, #184	; 0xb8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	2288      	movs	r2, #136	; 0x88
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f00a fe0e 	bl	800d33e <memset>
  if(huart->Instance==USART1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5c      	ldr	r2, [pc, #368]	; (8002898 <HAL_UART_MspInit+0x19c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d16f      	bne.n	800280c <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800272c:	2301      	movs	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002730:	2300      	movs	r3, #0
 8002732:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fc39 	bl	8005fb0 <HAL_RCCEx_PeriphCLKConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002744:	f7ff fe6c 	bl	8002420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002748:	4b54      	ldr	r3, [pc, #336]	; (800289c <HAL_UART_MspInit+0x1a0>)
 800274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274c:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_UART_MspInit+0x1a0>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	6613      	str	r3, [r2, #96]	; 0x60
 8002754:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	4b4e      	ldr	r3, [pc, #312]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276c:	4b4b      	ldr	r3, [pc, #300]	; (800289c <HAL_UART_MspInit+0x1a0>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002778:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800277c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002792:	2307      	movs	r3, #7
 8002794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800279c:	4619      	mov	r1, r3
 800279e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a2:	f001 fd93 	bl	80042cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027a8:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <HAL_UART_MspInit+0x1a8>)
 80027aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80027ac:	4b3c      	ldr	r3, [pc, #240]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c4:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027de:	4830      	ldr	r0, [pc, #192]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027e0:	f001 fafe 	bl	8003de0 <HAL_DMA_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80027ea:	f7ff fe19 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027f2:	675a      	str	r2, [r3, #116]	; 0x74
 80027f4:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_UART_MspInit+0x1a4>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2105      	movs	r1, #5
 80027fe:	2025      	movs	r0, #37	; 0x25
 8002800:	f001 fac4 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002804:	2025      	movs	r0, #37	; 0x25
 8002806:	f001 fadd 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800280a:	e040      	b.n	800288e <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_UART_MspInit+0x1ac>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d13b      	bne.n	800288e <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002816:	2302      	movs	r3, #2
 8002818:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800281a:	2300      	movs	r3, #0
 800281c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fbc4 	bl	8005fb0 <HAL_RCCEx_PeriphCLKConfig>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_UART_MspInit+0x136>
      Error_Handler();
 800282e:	f7ff fdf7 	bl	8002420 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002832:	4b1a      	ldr	r3, [pc, #104]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_UART_MspInit+0x1a0>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_UART_MspInit+0x1a0>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002862:	230c      	movs	r3, #12
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287a:	2307      	movs	r3, #7
 800287c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002884:	4619      	mov	r1, r3
 8002886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288a:	f001 fd1f 	bl	80042cc <HAL_GPIO_Init>
}
 800288e:	bf00      	nop
 8002890:	37b8      	adds	r7, #184	; 0xb8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40013800 	.word	0x40013800
 800289c:	40021000 	.word	0x40021000
 80028a0:	20000520 	.word	0x20000520
 80028a4:	40020058 	.word	0x40020058
 80028a8:	40004400 	.word	0x40004400

080028ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_InitTick+0xe0>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	4a33      	ldr	r2, [pc, #204]	; (800298c <HAL_InitTick+0xe0>)
 80028c0:	f043 0310 	orr.w	r3, r3, #16
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_InitTick+0xe0>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028d2:	f107 0210 	add.w	r2, r7, #16
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fad5 	bl	8005e8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028ec:	f003 faa2 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 80028f0:	6378      	str	r0, [r7, #52]	; 0x34
 80028f2:	e004      	b.n	80028fe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80028f4:	f003 fa9e 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 80028f8:	4603      	mov	r3, r0
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <HAL_InitTick+0xe4>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	3b01      	subs	r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_InitTick+0xe8>)
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_InitTick+0xec>)
 8002910:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_InitTick+0xe8>)
 8002914:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002918:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800291a:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_InitTick+0xe8>)
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_InitTick+0xe8>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <HAL_InitTick+0xe8>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_InitTick+0xe8>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002932:	4818      	ldr	r0, [pc, #96]	; (8002994 <HAL_InitTick+0xe8>)
 8002934:	f003 fff8 	bl	8006928 <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800293e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11b      	bne.n	800297e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002946:	4813      	ldr	r0, [pc, #76]	; (8002994 <HAL_InitTick+0xe8>)
 8002948:	f004 f846 	bl	80069d8 <HAL_TIM_Base_Start_IT>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002952:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002956:	2b00      	cmp	r3, #0
 8002958:	d111      	bne.n	800297e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800295a:	2036      	movs	r0, #54	; 0x36
 800295c:	f001 fa32 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	d808      	bhi.n	8002978 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002966:	2200      	movs	r2, #0
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	2036      	movs	r0, #54	; 0x36
 800296c:	f001 fa0e 	bl	8003d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_InitTick+0xf0>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e002      	b.n	800297e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800297e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002982:	4618      	mov	r0, r3
 8002984:	3738      	adds	r7, #56	; 0x38
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	431bde83 	.word	0x431bde83
 8002994:	200005e4 	.word	0x200005e4
 8002998:	40001000 	.word	0x40001000
 800299c:	20000008 	.word	0x20000008

080029a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <NMI_Handler+0x4>

080029a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029aa:	e7fe      	b.n	80029aa <HardFault_Handler+0x4>

080029ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <MemManage_Handler+0x4>

080029b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <BusFault_Handler+0x4>

080029b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <UsageFault_Handler+0x4>

080029be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA1_Channel5_IRQHandler+0x10>)
 80029d2:	f001 fb9c 	bl	800410e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000520 	.word	0x20000520

080029e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <USART1_IRQHandler+0x10>)
 80029e6:	f005 fad1 	bl	8007f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000410 	.word	0x20000410

080029f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <TIM6_DAC_IRQHandler+0x10>)
 80029fa:	f004 f9c5 	bl	8006d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200005e4 	.word	0x200005e4

08002a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return 1;
 8002a0c:	2301      	movs	r3, #1
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_kill>:

int _kill(int pid, int sig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a22:	f00a fd65 	bl	800d4f0 <__errno>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2216      	movs	r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_exit>:

void _exit (int status)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffe7 	bl	8002a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4a:	e7fe      	b.n	8002a4a <_exit+0x12>

08002a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e00a      	b.n	8002a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a5e:	f3af 8000 	nop.w
 8002a62:	4601      	mov	r1, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	60ba      	str	r2, [r7, #8]
 8002a6a:	b2ca      	uxtb	r2, r1
 8002a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf0      	blt.n	8002a5e <_read+0x12>
  }

  return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e009      	b.n	8002aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbf1      	blt.n	8002a98 <_write+0x12>
  }
  return len;
 8002ab4:	687b      	ldr	r3, [r7, #4]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_close>:

int _close(int file)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_isatty>:

int _isatty(int file)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afe:	2301      	movs	r3, #1
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f00a fcca 	bl	800d4f0 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20018000 	.word	0x20018000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	20000630 	.word	0x20000630
 8002b90:	20002128 	.word	0x20002128

08002b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bbc:	f7ff ffea 	bl	8002b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc0:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bc2:	490d      	ldr	r1, [pc, #52]	; (8002bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	; (8002bfc <LoopForever+0xe>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	; (8002c04 <LoopForever+0x16>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be6:	f00a fc89 	bl	800d4fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bea:	f7fe fda9 	bl	8001740 <main>

08002bee <LoopForever>:

LoopForever:
    b LoopForever
 8002bee:	e7fe      	b.n	8002bee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002bfc:	08011268 	.word	0x08011268
  ldr r2, =_sbss
 8002c00:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c04:	20002124 	.word	0x20002124

08002c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC1_2_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_Init+0x3c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_Init+0x3c>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c22:	2003      	movs	r0, #3
 8002c24:	f001 f8a7 	bl	8003d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c28:	200f      	movs	r0, #15
 8002c2a:	f7ff fe3f 	bl	80028ac <HAL_InitTick>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	71fb      	strb	r3, [r7, #7]
 8002c38:	e001      	b.n	8002c3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c3a:	f7ff fc05 	bl	8002448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40022000 	.word	0x40022000

08002c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_IncTick+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_IncTick+0x24>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_IncTick+0x24>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	20000634 	.word	0x20000634

08002c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_GetTick+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000634 	.word	0x20000634

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ffee 	bl	8002c74 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d005      	beq.n	8002cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_Delay+0x44>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cb2:	bf00      	nop
 8002cb4:	f7ff ffde 	bl	8002c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f7      	bhi.n	8002cb4 <HAL_Delay+0x28>
  {
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <LL_ADC_SetOffset+0x44>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	03fff000 	.word	0x03fff000

08002d84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3360      	adds	r3, #96	; 0x60
 8002d92:	461a      	mov	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3360      	adds	r3, #96	; 0x60
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3330      	adds	r3, #48	; 0x30
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	4413      	add	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	211f      	movs	r1, #31
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	f003 011f 	and.w	r1, r3, #31
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0e5b      	lsrs	r3, r3, #25
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	4413      	add	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	0d1b      	lsrs	r3, r3, #20
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2107      	movs	r1, #7
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	0d1b      	lsrs	r3, r3, #20
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	431a      	orrs	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0318 	and.w	r3, r3, #24
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002eb8:	40d9      	lsrs	r1, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	0007ffff 	.word	0x0007ffff

08002edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6093      	str	r3, [r2, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f14:	d101      	bne.n	8002f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <LL_ADC_IsEnabled+0x18>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <LL_ADC_IsEnabled+0x1a>
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d101      	bne.n	8002fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d101      	bne.n	8002fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e130      	b.n	8003268 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fa3f 	bl	8002498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff67 	bl	8002f00 <LL_ADC_IsDeepPowerDownEnabled>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff4d 	bl	8002edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff82 	bl	8002f50 <LL_ADC_IsInternalRegulatorEnabled>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d115      	bne.n	800307e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff66 	bl	8002f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800305c:	4b84      	ldr	r3, [pc, #528]	; (8003270 <HAL_ADC_Init+0x284>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	4a84      	ldr	r2, [pc, #528]	; (8003274 <HAL_ADC_Init+0x288>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003070:	e002      	b.n	8003078 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3b01      	subs	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f9      	bne.n	8003072 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff64 	bl	8002f50 <LL_ADC_IsInternalRegulatorEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff75 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 80030b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 80c9 	bne.w	8003256 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 80c5 	bne.w	8003256 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030d4:	f043 0202 	orr.w	r2, r3, #2
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff49 	bl	8002f78 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d115      	bne.n	8003118 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	4862      	ldr	r0, [pc, #392]	; (8003278 <HAL_ADC_Init+0x28c>)
 80030ee:	f7ff ff43 	bl	8002f78 <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4861      	ldr	r0, [pc, #388]	; (800327c <HAL_ADC_Init+0x290>)
 80030f6:	f7ff ff3f 	bl	8002f78 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	431c      	orrs	r4, r3
 80030fe:	4860      	ldr	r0, [pc, #384]	; (8003280 <HAL_ADC_Init+0x294>)
 8003100:	f7ff ff3a 	bl	8002f78 <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	4323      	orrs	r3, r4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4619      	mov	r1, r3
 8003112:	485c      	ldr	r0, [pc, #368]	; (8003284 <HAL_ADC_Init+0x298>)
 8003114:	f7ff fdde 	bl	8002cd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7e5b      	ldrb	r3, [r3, #25]
 800311c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003122:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003128:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800312e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003136:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d106      	bne.n	8003154 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	3b01      	subs	r3, #1
 800314c:	045b      	lsls	r3, r3, #17
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b44      	ldr	r3, [pc, #272]	; (8003288 <HAL_ADC_Init+0x29c>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	430b      	orrs	r3, r1
 8003182:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff1b 	bl	8002fc4 <LL_ADC_INJ_IsConversionOngoing>
 800318e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d13d      	bne.n	8003212 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d13a      	bne.n	8003212 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b8:	f023 0302 	bic.w	r3, r3, #2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	430b      	orrs	r3, r1
 80031c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d118      	bne.n	8003202 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031f2:	430a      	orrs	r2, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	611a      	str	r2, [r3, #16]
 8003200:	e007      	b.n	8003212 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10c      	bne.n	8003234 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f023 010f 	bic.w	r1, r3, #15
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
 8003232:	e007      	b.n	8003244 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 020f 	bic.w	r2, r2, #15
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f023 0303 	bic.w	r3, r3, #3
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
 8003254:	e007      	b.n	8003266 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003266:	7ffb      	ldrb	r3, [r7, #31]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3724      	adds	r7, #36	; 0x24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	20000004 	.word	0x20000004
 8003274:	053e2d63 	.word	0x053e2d63
 8003278:	50040000 	.word	0x50040000
 800327c:	50040100 	.word	0x50040100
 8003280:	50040200 	.word	0x50040200
 8003284:	50040300 	.word	0x50040300
 8003288:	fff0c007 	.word	0xfff0c007

0800328c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b0b6      	sub	sp, #216	; 0xd8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x22>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e3c9      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x7b6>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe6f 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 83aa 	bne.w	8003a1c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d824      	bhi.n	8003322 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	3b02      	subs	r3, #2
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d81b      	bhi.n	800331a <HAL_ADC_ConfigChannel+0x8e>
 80032e2:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_ADC_ConfigChannel+0x5c>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	08003301 	.word	0x08003301
 80032f0:	08003309 	.word	0x08003309
 80032f4:	08003311 	.word	0x08003311
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80032f8:	230c      	movs	r3, #12
 80032fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80032fe:	e010      	b.n	8003322 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003300:	2312      	movs	r3, #18
 8003302:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003306:	e00c      	b.n	8003322 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003308:	2318      	movs	r3, #24
 800330a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800330e:	e008      	b.n	8003322 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003318:	e003      	b.n	8003322 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800331a:	2306      	movs	r3, #6
 800331c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003320:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003330:	f7ff fd59 	bl	8002de6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fe30 	bl	8002f9e <LL_ADC_REG_IsConversionOngoing>
 800333e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fe3c 	bl	8002fc4 <LL_ADC_INJ_IsConversionOngoing>
 800334c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 81a4 	bne.w	80036a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800335a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 819f 	bne.w	80036a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	461a      	mov	r2, r3
 8003372:	f7ff fd64 	bl	8002e3e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	08db      	lsrs	r3, r3, #3
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d00a      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6919      	ldr	r1, [r3, #16]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a8:	f7ff fcc8 	bl	8002d3c <LL_ADC_SetOffset>
 80033ac:	e179      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fce5 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <HAL_ADC_ConfigChannel+0x14e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fcda 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	e01e      	b.n	8003418 <HAL_ADC_ConfigChannel+0x18c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fccf 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e004      	b.n	8003416 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800340c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1a4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	e018      	b.n	8003462 <HAL_ADC_ConfigChannel+0x1d6>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800344c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e004      	b.n	8003462 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003462:	429a      	cmp	r2, r3
 8003464:	d106      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fc9e 	bl	8002db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fc82 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x214>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fc77 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 021f 	and.w	r2, r3, #31
 800349e:	e01e      	b.n	80034de <HAL_ADC_ConfigChannel+0x252>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fc6c 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80034be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80034c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e004      	b.n	80034dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80034d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x26a>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	e018      	b.n	8003528 <HAL_ADC_ConfigChannel+0x29c>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800350a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800350e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800351a:	2320      	movs	r3, #32
 800351c:	e004      	b.n	8003528 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800351e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003528:	429a      	cmp	r2, r3
 800352a:	d106      	bne.n	800353a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2200      	movs	r2, #0
 8003532:	2101      	movs	r1, #1
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fc3b 	bl	8002db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2102      	movs	r1, #2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fc1f 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x2da>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2102      	movs	r1, #2
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fc14 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 800355c:	4603      	mov	r3, r0
 800355e:	0e9b      	lsrs	r3, r3, #26
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	e01e      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x318>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fc09 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800358c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e004      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x330>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	e014      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x35a>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80035ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80035d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e004      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80035dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035e0:	fab3 f383 	clz	r3, r3
 80035e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d106      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	2102      	movs	r1, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fbdc 	bl	8002db0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2103      	movs	r1, #3
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff fbc0 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x398>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2103      	movs	r1, #3
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fbb5 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	f003 021f 	and.w	r2, r3, #31
 8003622:	e017      	b.n	8003654 <HAL_ADC_ConfigChannel+0x3c8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2103      	movs	r1, #3
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fbaa 	bl	8002d84 <LL_ADC_GetOffsetChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003646:	2320      	movs	r3, #32
 8003648:	e003      	b.n	8003652 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800364a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_ADC_ConfigChannel+0x3e0>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	e011      	b.n	8003690 <HAL_ADC_ConfigChannel+0x404>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800367e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003690:	429a      	cmp	r2, r3
 8003692:	d106      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	2103      	movs	r1, #3
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fb87 	bl	8002db0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fc66 	bl	8002f78 <LL_ADC_IsEnabled>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 8140 	bne.w	8003934 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6819      	ldr	r1, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f7ff fbe7 	bl	8002e94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a8f      	ldr	r2, [pc, #572]	; (8003908 <HAL_ADC_ConfigChannel+0x67c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	f040 8131 	bne.w	8003934 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10b      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x46e>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	3301      	adds	r3, #1
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	bf94      	ite	ls
 80036f2:	2301      	movls	r3, #1
 80036f4:	2300      	movhi	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e019      	b.n	800372e <HAL_ADC_ConfigChannel+0x4a2>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800370c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003712:	2320      	movs	r3, #32
 8003714:	e003      	b.n	800371e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2b09      	cmp	r3, #9
 8003726:	bf94      	ite	ls
 8003728:	2301      	movls	r3, #1
 800372a:	2300      	movhi	r3, #0
 800372c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800372e:	2b00      	cmp	r3, #0
 8003730:	d079      	beq.n	8003826 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <HAL_ADC_ConfigChannel+0x4c2>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0e9b      	lsrs	r3, r3, #26
 8003744:	3301      	adds	r3, #1
 8003746:	069b      	lsls	r3, r3, #26
 8003748:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800374c:	e015      	b.n	800377a <HAL_ADC_ConfigChannel+0x4ee>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003766:	2320      	movs	r3, #32
 8003768:	e003      	b.n	8003772 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	fab3 f383 	clz	r3, r3
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3301      	adds	r3, #1
 8003774:	069b      	lsls	r3, r3, #26
 8003776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_ADC_ConfigChannel+0x50e>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	3301      	adds	r3, #1
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	e017      	b.n	80037ca <HAL_ADC_ConfigChannel+0x53e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80037b2:	2320      	movs	r3, #32
 80037b4:	e003      	b.n	80037be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	ea42 0103 	orr.w	r1, r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x564>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	3301      	adds	r3, #1
 80037e2:	f003 021f 	and.w	r2, r3, #31
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	051b      	lsls	r3, r3, #20
 80037ee:	e018      	b.n	8003822 <HAL_ADC_ConfigChannel+0x596>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 021f 	and.w	r2, r3, #31
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003822:	430b      	orrs	r3, r1
 8003824:	e081      	b.n	800392a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x5b6>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0e9b      	lsrs	r3, r3, #26
 8003838:	3301      	adds	r3, #1
 800383a:	069b      	lsls	r3, r3, #26
 800383c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003840:	e015      	b.n	800386e <HAL_ADC_ConfigChannel+0x5e2>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e003      	b.n	8003866 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3301      	adds	r3, #1
 8003868:	069b      	lsls	r3, r3, #26
 800386a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_ADC_ConfigChannel+0x602>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0e9b      	lsrs	r3, r3, #26
 8003880:	3301      	adds	r3, #1
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	e017      	b.n	80038be <HAL_ADC_ConfigChannel+0x632>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	61bb      	str	r3, [r7, #24]
  return result;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	ea42 0103 	orr.w	r1, r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10d      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x65e>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	3301      	adds	r3, #1
 80038d6:	f003 021f 	and.w	r2, r3, #31
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	3b1e      	subs	r3, #30
 80038e2:	051b      	lsls	r3, r3, #20
 80038e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038e8:	e01e      	b.n	8003928 <HAL_ADC_ConfigChannel+0x69c>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	60fb      	str	r3, [r7, #12]
  return result;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003902:	2320      	movs	r3, #32
 8003904:	e006      	b.n	8003914 <HAL_ADC_ConfigChannel+0x688>
 8003906:	bf00      	nop
 8003908:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f003 021f 	and.w	r2, r3, #31
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	3b1e      	subs	r3, #30
 8003922:	051b      	lsls	r3, r3, #20
 8003924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003928:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392e:	4619      	mov	r1, r3
 8003930:	f7ff fa85 	bl	8002e3e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <HAL_ADC_ConfigChannel+0x7c0>)
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d07a      	beq.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003940:	4843      	ldr	r0, [pc, #268]	; (8003a50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003942:	f7ff f9ed 	bl	8002d20 <LL_ADC_GetCommonPathInternalCh>
 8003946:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a41      	ldr	r2, [pc, #260]	; (8003a54 <HAL_ADC_ConfigChannel+0x7c8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d12c      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d126      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a3c      	ldr	r2, [pc, #240]	; (8003a58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_ADC_ConfigChannel+0x6e8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_ADC_ConfigChannel+0x7d0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d15d      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800397c:	4619      	mov	r1, r3
 800397e:	4834      	ldr	r0, [pc, #208]	; (8003a50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003980:	f7ff f9bb 	bl	8002cfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_ADC_ConfigChannel+0x7d4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_ADC_ConfigChannel+0x7d8>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800399e:	e002      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f9      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ac:	e040      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2d      	ldr	r2, [pc, #180]	; (8003a68 <HAL_ADC_ConfigChannel+0x7dc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d118      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d112      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <HAL_ADC_ConfigChannel+0x7cc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x74c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_ADC_ConfigChannel+0x7d0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d12d      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e0:	4619      	mov	r1, r3
 80039e2:	481b      	ldr	r0, [pc, #108]	; (8003a50 <HAL_ADC_ConfigChannel+0x7c4>)
 80039e4:	f7ff f989 	bl	8002cfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039e8:	e024      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <HAL_ADC_ConfigChannel+0x7e0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d120      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d11a      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d115      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a12:	4619      	mov	r1, r3
 8003a14:	480e      	ldr	r0, [pc, #56]	; (8003a50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a16:	f7ff f970 	bl	8002cfa <LL_ADC_SetCommonPathInternalCh>
 8003a1a:	e00c      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003a2e:	e002      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	37d8      	adds	r7, #216	; 0xd8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	80080000 	.word	0x80080000
 8003a50:	50040300 	.word	0x50040300
 8003a54:	c7520000 	.word	0xc7520000
 8003a58:	50040000 	.word	0x50040000
 8003a5c:	50040200 	.word	0x50040200
 8003a60:	20000004 	.word	0x20000004
 8003a64:	053e2d63 	.word	0x053e2d63
 8003a68:	cb840000 	.word	0xcb840000
 8003a6c:	80000001 	.word	0x80000001

08003a70 <LL_ADC_IsEnabled>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <LL_ADC_IsEnabled+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_ADC_IsEnabled+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d101      	bne.n	8003aae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b09f      	sub	sp, #124	; 0x7c
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e093      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a47      	ldr	r2, [pc, #284]	; (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d102      	bne.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003af4:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	e001      	b.n	8003afe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e072      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffb9 	bl	8003a96 <LL_ADC_REG_IsConversionOngoing>
 8003b24:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ffb3 	bl	8003a96 <LL_ADC_REG_IsConversionOngoing>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d154      	bne.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d151      	bne.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02c      	beq.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b5a:	035b      	lsls	r3, r3, #13
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b64:	4829      	ldr	r0, [pc, #164]	; (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b66:	f7ff ff83 	bl	8003a70 <LL_ADC_IsEnabled>
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4828      	ldr	r0, [pc, #160]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b6e:	f7ff ff7f 	bl	8003a70 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	431c      	orrs	r4, r3
 8003b76:	4828      	ldr	r0, [pc, #160]	; (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b78:	f7ff ff7a 	bl	8003a70 <LL_ADC_IsEnabled>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4323      	orrs	r3, r4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d137      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b8c:	f023 030f 	bic.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	6811      	ldr	r1, [r2, #0]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba0:	e028      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bae:	4817      	ldr	r0, [pc, #92]	; (8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bb0:	f7ff ff5e 	bl	8003a70 <LL_ADC_IsEnabled>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	4816      	ldr	r0, [pc, #88]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bb8:	f7ff ff5a 	bl	8003a70 <LL_ADC_IsEnabled>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	431c      	orrs	r4, r3
 8003bc0:	4815      	ldr	r0, [pc, #84]	; (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003bc2:	f7ff ff55 	bl	8003a70 <LL_ADC_IsEnabled>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4323      	orrs	r3, r4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d112      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bd6:	f023 030f 	bic.w	r3, r3, #15
 8003bda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bdc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bde:	e009      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003bf2:	e000      	b.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bfe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	377c      	adds	r7, #124	; 0x7c
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	50040000 	.word	0x50040000
 8003c10:	50040100 	.word	0x50040100
 8003c14:	50040300 	.word	0x50040300
 8003c18:	50040200 	.word	0x50040200

08003c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <__NVIC_GetPriorityGrouping+0x18>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 0307 	and.w	r3, r3, #7
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0b      	blt.n	8003caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <__NVIC_EnableIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	; (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	; (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff4c 	bl	8003c1c <__NVIC_SetPriorityGrouping>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9e:	f7ff ff61 	bl	8003c64 <__NVIC_GetPriorityGrouping>
 8003da2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	6978      	ldr	r0, [r7, #20]
 8003daa:	f7ff ffb1 	bl	8003d10 <NVIC_EncodePriority>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff80 	bl	8003cbc <__NVIC_SetPriority>
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff54 	bl	8003c80 <__NVIC_EnableIRQ>
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e098      	b.n	8003f24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b4d      	ldr	r3, [pc, #308]	; (8003f30 <HAL_DMA_Init+0x150>)
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d80f      	bhi.n	8003e1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b4b      	ldr	r3, [pc, #300]	; (8003f34 <HAL_DMA_Init+0x154>)
 8003e06:	4413      	add	r3, r2
 8003e08:	4a4b      	ldr	r2, [pc, #300]	; (8003f38 <HAL_DMA_Init+0x158>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	009a      	lsls	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a48      	ldr	r2, [pc, #288]	; (8003f3c <HAL_DMA_Init+0x15c>)
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e1c:	e00e      	b.n	8003e3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_DMA_Init+0x160>)
 8003e26:	4413      	add	r3, r2
 8003e28:	4a43      	ldr	r2, [pc, #268]	; (8003f38 <HAL_DMA_Init+0x158>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	009a      	lsls	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a42      	ldr	r2, [pc, #264]	; (8003f44 <HAL_DMA_Init+0x164>)
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e96:	d039      	beq.n	8003f0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <HAL_DMA_Init+0x15c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ea2:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_DMA_Init+0x168>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 031c 	and.w	r3, r3, #28
 8003eae:	210f      	movs	r1, #15
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	4924      	ldr	r1, [pc, #144]	; (8003f48 <HAL_DMA_Init+0x168>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ebc:	4b22      	ldr	r3, [pc, #136]	; (8003f48 <HAL_DMA_Init+0x168>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	f003 031c 	and.w	r3, r3, #28
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	491d      	ldr	r1, [pc, #116]	; (8003f48 <HAL_DMA_Init+0x168>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
 8003ed6:	e019      	b.n	8003f0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <HAL_DMA_Init+0x16c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f003 031c 	and.w	r3, r3, #28
 8003ee4:	210f      	movs	r1, #15
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	4917      	ldr	r1, [pc, #92]	; (8003f4c <HAL_DMA_Init+0x16c>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_DMA_Init+0x16c>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f003 031c 	and.w	r3, r3, #28
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	4911      	ldr	r1, [pc, #68]	; (8003f4c <HAL_DMA_Init+0x16c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40020407 	.word	0x40020407
 8003f34:	bffdfff8 	.word	0xbffdfff8
 8003f38:	cccccccd 	.word	0xcccccccd
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	bffdfbf8 	.word	0xbffdfbf8
 8003f44:	40020400 	.word	0x40020400
 8003f48:	400200a8 	.word	0x400200a8
 8003f4c:	400204a8 	.word	0x400204a8

08003f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_DMA_Start_IT+0x20>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e04b      	b.n	8004008 <HAL_DMA_Start_IT+0xb8>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d13a      	bne.n	8003ffa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f95f 	bl	800426c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 020e 	orr.w	r2, r2, #14
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e00f      	b.n	8003fe8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 020a 	orr.w	r2, r2, #10
 8003fe6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e005      	b.n	8004006 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004002:	2302      	movs	r3, #2
 8004004:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d008      	beq.n	800403a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2204      	movs	r2, #4
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e022      	b.n	8004080 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 020e 	bic.w	r2, r2, #14
 8004048:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f003 021c 	and.w	r2, r3, #28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2101      	movs	r1, #1
 8004068:	fa01 f202 	lsl.w	r2, r1, r2
 800406c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d005      	beq.n	80040b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2204      	movs	r2, #4
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
 80040ae:	e029      	b.n	8004104 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 020e 	bic.w	r2, r2, #14
 80040be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f003 021c 	and.w	r2, r3, #28
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
    }
  }
  return status;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f003 031c 	and.w	r3, r3, #28
 800412e:	2204      	movs	r2, #4
 8004130:	409a      	lsls	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d026      	beq.n	8004188 <HAL_DMA_IRQHandler+0x7a>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d021      	beq.n	8004188 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	f003 021c 	and.w	r2, r3, #28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2104      	movs	r1, #4
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	2b00      	cmp	r3, #0
 800417c:	d071      	beq.n	8004262 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004186:	e06c      	b.n	8004262 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f003 031c 	and.w	r3, r3, #28
 8004190:	2202      	movs	r2, #2
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02e      	beq.n	80041fa <HAL_DMA_IRQHandler+0xec>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d029      	beq.n	80041fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 020a 	bic.w	r2, r2, #10
 80041c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	f003 021c 	and.w	r2, r3, #28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2102      	movs	r1, #2
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d038      	beq.n	8004262 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041f8:	e033      	b.n	8004262 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f003 031c 	and.w	r3, r3, #28
 8004202:	2208      	movs	r2, #8
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d02a      	beq.n	8004264 <HAL_DMA_IRQHandler+0x156>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d025      	beq.n	8004264 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 020e 	bic.w	r2, r2, #14
 8004226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f003 021c 	and.w	r2, r3, #28
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004262:	bf00      	nop
 8004264:	bf00      	nop
}
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f003 021c 	and.w	r2, r3, #28
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2101      	movs	r1, #1
 8004288:	fa01 f202 	lsl.w	r2, r1, r2
 800428c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b10      	cmp	r3, #16
 800429c:	d108      	bne.n	80042b0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042ae:	e007      	b.n	80042c0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	60da      	str	r2, [r3, #12]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042da:	e17f      	b.n	80045dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2101      	movs	r1, #1
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8171 	beq.w	80045d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d005      	beq.n	800430c <HAL_GPIO_Init+0x40>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d130      	bne.n	800436e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004342:	2201      	movs	r2, #1
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f003 0201 	and.w	r2, r3, #1
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b03      	cmp	r3, #3
 8004378:	d118      	bne.n	80043ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004380:	2201      	movs	r2, #1
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	08db      	lsrs	r3, r3, #3
 8004396:	f003 0201 	and.w	r2, r3, #1
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d017      	beq.n	80043e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	6939      	ldr	r1, [r7, #16]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4013      	ands	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80ac 	beq.w	80045d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	4b5f      	ldr	r3, [pc, #380]	; (80045fc <HAL_GPIO_Init+0x330>)
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	4a5e      	ldr	r2, [pc, #376]	; (80045fc <HAL_GPIO_Init+0x330>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6613      	str	r3, [r2, #96]	; 0x60
 800448a:	4b5c      	ldr	r3, [pc, #368]	; (80045fc <HAL_GPIO_Init+0x330>)
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004496:	4a5a      	ldr	r2, [pc, #360]	; (8004600 <HAL_GPIO_Init+0x334>)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044c0:	d025      	beq.n	800450e <HAL_GPIO_Init+0x242>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4f      	ldr	r2, [pc, #316]	; (8004604 <HAL_GPIO_Init+0x338>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01f      	beq.n	800450a <HAL_GPIO_Init+0x23e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4e      	ldr	r2, [pc, #312]	; (8004608 <HAL_GPIO_Init+0x33c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d019      	beq.n	8004506 <HAL_GPIO_Init+0x23a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4d      	ldr	r2, [pc, #308]	; (800460c <HAL_GPIO_Init+0x340>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_GPIO_Init+0x236>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4c      	ldr	r2, [pc, #304]	; (8004610 <HAL_GPIO_Init+0x344>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00d      	beq.n	80044fe <HAL_GPIO_Init+0x232>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4b      	ldr	r2, [pc, #300]	; (8004614 <HAL_GPIO_Init+0x348>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x22e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4a      	ldr	r2, [pc, #296]	; (8004618 <HAL_GPIO_Init+0x34c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d101      	bne.n	80044f6 <HAL_GPIO_Init+0x22a>
 80044f2:	2306      	movs	r3, #6
 80044f4:	e00c      	b.n	8004510 <HAL_GPIO_Init+0x244>
 80044f6:	2307      	movs	r3, #7
 80044f8:	e00a      	b.n	8004510 <HAL_GPIO_Init+0x244>
 80044fa:	2305      	movs	r3, #5
 80044fc:	e008      	b.n	8004510 <HAL_GPIO_Init+0x244>
 80044fe:	2304      	movs	r3, #4
 8004500:	e006      	b.n	8004510 <HAL_GPIO_Init+0x244>
 8004502:	2303      	movs	r3, #3
 8004504:	e004      	b.n	8004510 <HAL_GPIO_Init+0x244>
 8004506:	2302      	movs	r3, #2
 8004508:	e002      	b.n	8004510 <HAL_GPIO_Init+0x244>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_GPIO_Init+0x244>
 800450e:	2300      	movs	r3, #0
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	f002 0203 	and.w	r2, r2, #3
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	4093      	lsls	r3, r2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004520:	4937      	ldr	r1, [pc, #220]	; (8004600 <HAL_GPIO_Init+0x334>)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_GPIO_Init+0x350>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <HAL_GPIO_Init+0x350>)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_GPIO_Init+0x350>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	43db      	mvns	r3, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800457c:	4a27      	ldr	r2, [pc, #156]	; (800461c <HAL_GPIO_Init+0x350>)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_GPIO_Init+0x350>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_GPIO_Init+0x350>)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_GPIO_Init+0x350>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <HAL_GPIO_Init+0x350>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f47f ae78 	bne.w	80042dc <HAL_GPIO_Init+0x10>
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	40010000 	.word	0x40010000
 8004604:	48000400 	.word	0x48000400
 8004608:	48000800 	.word	0x48000800
 800460c:	48000c00 	.word	0x48000c00
 8004610:	48001000 	.word	0x48001000
 8004614:	48001400 	.word	0x48001400
 8004618:	48001800 	.word	0x48001800
 800461c:	40010400 	.word	0x40010400

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800463c:	e002      	b.n	8004644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e08d      	b.n	800477e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd ff78 	bl	800256c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	e006      	b.n	80046d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d108      	bne.n	80046f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ee:	605a      	str	r2, [r3, #4]
 80046f0:	e007      	b.n	8004702 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004714:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004724:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69d9      	ldr	r1, [r3, #28]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	4608      	mov	r0, r1
 8004792:	4611      	mov	r1, r2
 8004794:	461a      	mov	r2, r3
 8004796:	4603      	mov	r3, r0
 8004798:	817b      	strh	r3, [r7, #10]
 800479a:	460b      	mov	r3, r1
 800479c:	813b      	strh	r3, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	f040 80f9 	bne.w	80049a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_I2C_Mem_Write+0x34>
 80047b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0ed      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x4e>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0e6      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047de:	f7fe fa49 	bl	8002c74 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2319      	movs	r3, #25
 80047ea:	2201      	movs	r2, #1
 80047ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fac3 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0d1      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2221      	movs	r2, #33	; 0x21
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a3a      	ldr	r2, [r7, #32]
 800481a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004828:	88f8      	ldrh	r0, [r7, #6]
 800482a:	893a      	ldrh	r2, [r7, #8]
 800482c:	8979      	ldrh	r1, [r7, #10]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4603      	mov	r3, r0
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f9d3 	bl	8004be4 <I2C_RequestMemoryWrite>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0a9      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2bff      	cmp	r3, #255	; 0xff
 8004858:	d90e      	bls.n	8004878 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	b2da      	uxtb	r2, r3
 8004866:	8979      	ldrh	r1, [r7, #10]
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fc3d 	bl	80050f0 <I2C_TransferConfig>
 8004876:	e00f      	b.n	8004898 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	b2da      	uxtb	r2, r3
 8004888:	8979      	ldrh	r1, [r7, #10]
 800488a:	2300      	movs	r3, #0
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fc2c 	bl	80050f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fabc 	bl	8004e1a <I2C_WaitOnTXISFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e07b      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	781a      	ldrb	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d034      	beq.n	8004950 <HAL_I2C_Mem_Write+0x1c8>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d130      	bne.n	8004950 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fa3f 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e04d      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2bff      	cmp	r3, #255	; 0xff
 8004910:	d90e      	bls.n	8004930 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	b2da      	uxtb	r2, r3
 800491e:	8979      	ldrh	r1, [r7, #10]
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fbe1 	bl	80050f0 <I2C_TransferConfig>
 800492e:	e00f      	b.n	8004950 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	b2da      	uxtb	r2, r3
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fbd0 	bl	80050f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d19e      	bne.n	8004898 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 faa2 	bl	8004ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e01a      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2220      	movs	r2, #32
 8004974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_I2C_Mem_Write+0x224>)
 8004982:	400b      	ands	r3, r1
 8004984:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	fe00e800 	.word	0xfe00e800

080049b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	817b      	strh	r3, [r7, #10]
 80049c2:	460b      	mov	r3, r1
 80049c4:	813b      	strh	r3, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	f040 80fd 	bne.w	8004bd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_I2C_Mem_Read+0x34>
 80049de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0f1      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Mem_Read+0x4e>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0ea      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a06:	f7fe f935 	bl	8002c74 <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2319      	movs	r3, #25
 8004a12:	2201      	movs	r2, #1
 8004a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f9af 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d5      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2222      	movs	r2, #34	; 0x22
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2240      	movs	r2, #64	; 0x40
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a50:	88f8      	ldrh	r0, [r7, #6]
 8004a52:	893a      	ldrh	r2, [r7, #8]
 8004a54:	8979      	ldrh	r1, [r7, #10]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4603      	mov	r3, r0
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f913 	bl	8004c8c <I2C_RequestMemoryRead>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0ad      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	d90e      	bls.n	8004aa0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	22ff      	movs	r2, #255	; 0xff
 8004a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	8979      	ldrh	r1, [r7, #10]
 8004a90:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <HAL_I2C_Mem_Read+0x22c>)
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fb29 	bl	80050f0 <I2C_TransferConfig>
 8004a9e:	e00f      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	8979      	ldrh	r1, [r7, #10]
 8004ab2:	4b4a      	ldr	r3, [pc, #296]	; (8004bdc <HAL_I2C_Mem_Read+0x22c>)
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fb18 	bl	80050f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2104      	movs	r1, #4
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f956 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e07c      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d034      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x1d0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d130      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	2200      	movs	r2, #0
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f927 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e04d      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2bff      	cmp	r3, #255	; 0xff
 8004b40:	d90e      	bls.n	8004b60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	2300      	movs	r3, #0
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fac9 	bl	80050f0 <I2C_TransferConfig>
 8004b5e:	e00f      	b.n	8004b80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	8979      	ldrh	r1, [r7, #10]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fab8 	bl	80050f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d19a      	bne.n	8004ac0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f98a 	bl	8004ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e01a      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_I2C_Mem_Read+0x230>)
 8004bb2:	400b      	ands	r3, r1
 8004bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	80002400 	.word	0x80002400
 8004be0:	fe00e800 	.word	0xfe00e800

08004be4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	817b      	strh	r3, [r7, #10]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	813b      	strh	r3, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	8979      	ldrh	r1, [r7, #10]
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <I2C_RequestMemoryWrite+0xa4>)
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fa6f 	bl	80050f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f8ff 	bl	8004e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e02c      	b.n	8004c80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d105      	bne.n	8004c38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
 8004c36:	e015      	b.n	8004c64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c38:	893b      	ldrh	r3, [r7, #8]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f8e5 	bl	8004e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e012      	b.n	8004c80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c5a:	893b      	ldrh	r3, [r7, #8]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f884 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	80002000 	.word	0x80002000

08004c8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	8979      	ldrh	r1, [r7, #10]
 8004cac:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <I2C_RequestMemoryRead+0xa4>)
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fa1c 	bl	80050f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	69b9      	ldr	r1, [r7, #24]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f8ac 	bl	8004e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e02c      	b.n	8004d26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d105      	bne.n	8004cde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd2:	893b      	ldrh	r3, [r7, #8]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
 8004cdc:	e015      	b.n	8004d0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cde:	893b      	ldrh	r3, [r7, #8]
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	69b9      	ldr	r1, [r7, #24]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f892 	bl	8004e1a <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e012      	b.n	8004d26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2140      	movs	r1, #64	; 0x40
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f831 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	80002000 	.word	0x80002000

08004d34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d103      	bne.n	8004d52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d007      	beq.n	8004d70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	619a      	str	r2, [r3, #24]
  }
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d8c:	e031      	b.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d02d      	beq.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fd ff6d 	bl	8002c74 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d122      	bne.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d113      	bne.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e00f      	b.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d0be      	beq.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e26:	e033      	b.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f87f 	bl	8004f30 <I2C_IsErrorOccurred>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e031      	b.n	8004ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d025      	beq.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e44:	f7fd ff16 	bl	8002c74 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d302      	bcc.n	8004e5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d11a      	bne.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d013      	beq.n	8004e90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e007      	b.n	8004ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d1c4      	bne.n	8004e28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb4:	e02f      	b.n	8004f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f838 	bl	8004f30 <I2C_IsErrorOccurred>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e02d      	b.n	8004f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fd fed3 	bl	8002c74 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11a      	bne.n	8004f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d013      	beq.n	8004f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e007      	b.n	8004f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d1c8      	bne.n	8004eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d068      	beq.n	800502e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2210      	movs	r2, #16
 8004f62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f64:	e049      	b.n	8004ffa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d045      	beq.n	8004ffa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f6e:	f7fd fe81 	bl	8002c74 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <I2C_IsErrorOccurred+0x54>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d13a      	bne.n	8004ffa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa6:	d121      	bne.n	8004fec <I2C_IsErrorOccurred+0xbc>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fae:	d01d      	beq.n	8004fec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d01a      	beq.n	8004fec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004fc6:	f7fd fe55 	bl	8002c74 <HAL_GetTick>
 8004fca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fcc:	e00e      	b.n	8004fec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fce:	f7fd fe51 	bl	8002c74 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b19      	cmp	r3, #25
 8004fda:	d907      	bls.n	8004fec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f043 0320 	orr.w	r3, r3, #32
 8004fe2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004fea:	e006      	b.n	8004ffa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d1e9      	bne.n	8004fce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d003      	beq.n	8005010 <I2C_IsErrorOccurred+0xe0>
 8005008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0aa      	beq.n	8004f66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2220      	movs	r2, #32
 800501e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	f043 0304 	orr.w	r3, r3, #4
 8005026:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005072:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005094:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800509c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01c      	beq.n	80050de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fe45 	bl	8004d34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <I2C_IsErrorOccurred+0x1bc>)
 80050b6:	400b      	ands	r3, r1
 80050b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80050de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	fe00e800 	.word	0xfe00e800

080050f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	817b      	strh	r3, [r7, #10]
 80050fe:	4613      	mov	r3, r2
 8005100:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005108:	7a7b      	ldrb	r3, [r7, #9]
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005110:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	4313      	orrs	r3, r2
 800511a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	0d5b      	lsrs	r3, r3, #21
 800512a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800512e:	4b08      	ldr	r3, [pc, #32]	; (8005150 <I2C_TransferConfig+0x60>)
 8005130:	430b      	orrs	r3, r1
 8005132:	43db      	mvns	r3, r3
 8005134:	ea02 0103 	and.w	r1, r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	03ff63ff 	.word	0x03ff63ff

08005154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	d138      	bne.n	80051dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005174:	2302      	movs	r3, #2
 8005176:	e032      	b.n	80051de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	; 0x24
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d139      	bne.n	8005274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800520a:	2302      	movs	r3, #2
 800520c:	e033      	b.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2224      	movs	r2, #36	; 0x24
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800523c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <HAL_PWREx_GetVoltageRange+0x18>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40007000 	.word	0x40007000

080052a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ae:	d130      	bne.n	8005312 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80052b0:	4b23      	ldr	r3, [pc, #140]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052bc:	d038      	beq.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2232      	movs	r2, #50	; 0x32
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0c9b      	lsrs	r3, r3, #18
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e4:	e002      	b.n	80052ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ec:	4b14      	ldr	r3, [pc, #80]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f8:	d102      	bne.n	8005300 <HAL_PWREx_ControlVoltageScaling+0x60>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f2      	bne.n	80052e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530c:	d110      	bne.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e00f      	b.n	8005332 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531e:	d007      	beq.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800532a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800532e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40007000 	.word	0x40007000
 8005344:	20000004 	.word	0x20000004
 8005348:	431bde83 	.word	0x431bde83

0800534c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e3ca      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800535e:	4b97      	ldr	r3, [pc, #604]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005368:	4b94      	ldr	r3, [pc, #592]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80e4 	beq.w	8005548 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d007      	beq.n	8005396 <HAL_RCC_OscConfig+0x4a>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b0c      	cmp	r3, #12
 800538a:	f040 808b 	bne.w	80054a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	f040 8087 	bne.w	80054a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005396:	4b89      	ldr	r3, [pc, #548]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e3a2      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	4b82      	ldr	r3, [pc, #520]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <HAL_RCC_OscConfig+0x7c>
 80053be:	4b7f      	ldr	r3, [pc, #508]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c6:	e005      	b.n	80053d4 <HAL_RCC_OscConfig+0x88>
 80053c8:	4b7c      	ldr	r3, [pc, #496]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ce:	091b      	lsrs	r3, r3, #4
 80053d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d223      	bcs.n	8005420 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fd87 	bl	8005ef0 <RCC_SetFlashLatencyFromMSIRange>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e383      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ec:	4b73      	ldr	r3, [pc, #460]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a72      	ldr	r2, [pc, #456]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053f2:	f043 0308 	orr.w	r3, r3, #8
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b70      	ldr	r3, [pc, #448]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	496d      	ldr	r1, [pc, #436]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800540a:	4b6c      	ldr	r3, [pc, #432]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	4968      	ldr	r1, [pc, #416]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
 800541e:	e025      	b.n	800546c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005420:	4b66      	ldr	r3, [pc, #408]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a65      	ldr	r2, [pc, #404]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b63      	ldr	r3, [pc, #396]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	4960      	ldr	r1, [pc, #384]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543e:	4b5f      	ldr	r3, [pc, #380]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	495b      	ldr	r1, [pc, #364]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fd47 	bl	8005ef0 <RCC_SetFlashLatencyFromMSIRange>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e343      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800546c:	f000 fc4a 	bl	8005d04 <HAL_RCC_GetSysClockFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b52      	ldr	r3, [pc, #328]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	4950      	ldr	r1, [pc, #320]	; (80055c0 <HAL_RCC_OscConfig+0x274>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_RCC_OscConfig+0x278>)
 800548a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800548c:	4b4e      	ldr	r3, [pc, #312]	; (80055c8 <HAL_RCC_OscConfig+0x27c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fd fa0b 	bl	80028ac <HAL_InitTick>
 8005496:	4603      	mov	r3, r0
 8005498:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d052      	beq.n	8005546 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	e327      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d032      	beq.n	8005512 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054ac:	4b43      	ldr	r3, [pc, #268]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a42      	ldr	r2, [pc, #264]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054b8:	f7fd fbdc 	bl	8002c74 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054c0:	f7fd fbd8 	bl	8002c74 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e310      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d2:	4b3a      	ldr	r3, [pc, #232]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054de:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a36      	ldr	r2, [pc, #216]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b34      	ldr	r3, [pc, #208]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4931      	ldr	r1, [pc, #196]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054fc:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	492c      	ldr	r1, [pc, #176]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	e01a      	b.n	8005548 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005512:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a29      	ldr	r2, [pc, #164]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800551e:	f7fd fba9 	bl	8002c74 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005526:	f7fd fba5 	bl	8002c74 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e2dd      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f0      	bne.n	8005526 <HAL_RCC_OscConfig+0x1da>
 8005544:	e000      	b.n	8005548 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005546:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d074      	beq.n	800563e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b08      	cmp	r3, #8
 8005558:	d005      	beq.n	8005566 <HAL_RCC_OscConfig+0x21a>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d10e      	bne.n	800557e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b03      	cmp	r3, #3
 8005564:	d10b      	bne.n	800557e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d064      	beq.n	800563c <HAL_RCC_OscConfig+0x2f0>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d160      	bne.n	800563c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e2ba      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005586:	d106      	bne.n	8005596 <HAL_RCC_OscConfig+0x24a>
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 800558e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e026      	b.n	80055e4 <HAL_RCC_OscConfig+0x298>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800559e:	d115      	bne.n	80055cc <HAL_RCC_OscConfig+0x280>
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a05      	ldr	r2, [pc, #20]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80055a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a02      	ldr	r2, [pc, #8]	; (80055bc <HAL_RCC_OscConfig+0x270>)
 80055b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	e014      	b.n	80055e4 <HAL_RCC_OscConfig+0x298>
 80055ba:	bf00      	nop
 80055bc:	40021000 	.word	0x40021000
 80055c0:	08010de8 	.word	0x08010de8
 80055c4:	20000004 	.word	0x20000004
 80055c8:	20000008 	.word	0x20000008
 80055cc:	4ba0      	ldr	r3, [pc, #640]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a9f      	ldr	r2, [pc, #636]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b9d      	ldr	r3, [pc, #628]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a9c      	ldr	r2, [pc, #624]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80055de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fd fb42 	bl	8002c74 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fd fb3e 	bl	8002c74 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e276      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005606:	4b92      	ldr	r3, [pc, #584]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x2a8>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fd fb2e 	bl	8002c74 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800561c:	f7fd fb2a 	bl	8002c74 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e262      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562e:	4b88      	ldr	r3, [pc, #544]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x2d0>
 800563a:	e000      	b.n	800563e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800563c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d060      	beq.n	800570c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b04      	cmp	r3, #4
 800564e:	d005      	beq.n	800565c <HAL_RCC_OscConfig+0x310>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d119      	bne.n	800568a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d116      	bne.n	800568a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800565c:	4b7c      	ldr	r3, [pc, #496]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_OscConfig+0x328>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e23f      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005674:	4b76      	ldr	r3, [pc, #472]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	4973      	ldr	r1, [pc, #460]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005684:	4313      	orrs	r3, r2
 8005686:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005688:	e040      	b.n	800570c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d023      	beq.n	80056da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005692:	4b6f      	ldr	r3, [pc, #444]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6e      	ldr	r2, [pc, #440]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fd fae9 	bl	8002c74 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a6:	f7fd fae5 	bl	8002c74 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e21d      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b8:	4b65      	ldr	r3, [pc, #404]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c4:	4b62      	ldr	r3, [pc, #392]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	495f      	ldr	r1, [pc, #380]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
 80056d8:	e018      	b.n	800570c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056da:	4b5d      	ldr	r3, [pc, #372]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a5c      	ldr	r2, [pc, #368]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80056e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fd fac5 	bl	8002c74 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ee:	f7fd fac1 	bl	8002c74 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e1f9      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005700:	4b53      	ldr	r3, [pc, #332]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d03c      	beq.n	8005792 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005720:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005726:	4a4a      	ldr	r2, [pc, #296]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fd faa0 	bl	8002c74 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005738:	f7fd fa9c 	bl	8002c74 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1d4      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800574a:	4b41      	ldr	r3, [pc, #260]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 800574c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ef      	beq.n	8005738 <HAL_RCC_OscConfig+0x3ec>
 8005758:	e01b      	b.n	8005792 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575a:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 800575c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005760:	4a3b      	ldr	r2, [pc, #236]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576a:	f7fd fa83 	bl	8002c74 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005772:	f7fd fa7f 	bl	8002c74 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e1b7      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005784:	4b32      	ldr	r3, [pc, #200]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ef      	bne.n	8005772 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80a6 	beq.w	80058ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a0:	2300      	movs	r3, #0
 80057a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057a4:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	4a26      	ldr	r2, [pc, #152]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6593      	str	r3, [r2, #88]	; 0x58
 80057bc:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c8:	2301      	movs	r3, #1
 80057ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057cc:	4b21      	ldr	r3, [pc, #132]	; (8005854 <HAL_RCC_OscConfig+0x508>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d118      	bne.n	800580a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <HAL_RCC_OscConfig+0x508>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <HAL_RCC_OscConfig+0x508>)
 80057de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e4:	f7fd fa46 	bl	8002c74 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ec:	f7fd fa42 	bl	8002c74 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e17a      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fe:	4b15      	ldr	r3, [pc, #84]	; (8005854 <HAL_RCC_OscConfig+0x508>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d108      	bne.n	8005824 <HAL_RCC_OscConfig+0x4d8>
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005822:	e029      	b.n	8005878 <HAL_RCC_OscConfig+0x52c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b05      	cmp	r3, #5
 800582a:	d115      	bne.n	8005858 <HAL_RCC_OscConfig+0x50c>
 800582c:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	4a07      	ldr	r2, [pc, #28]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005834:	f043 0304 	orr.w	r3, r3, #4
 8005838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800583c:	4b04      	ldr	r3, [pc, #16]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4a03      	ldr	r2, [pc, #12]	; (8005850 <HAL_RCC_OscConfig+0x504>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800584c:	e014      	b.n	8005878 <HAL_RCC_OscConfig+0x52c>
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	40007000 	.word	0x40007000
 8005858:	4b9c      	ldr	r3, [pc, #624]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	4a9b      	ldr	r2, [pc, #620]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005868:	4b98      	ldr	r3, [pc, #608]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	4a97      	ldr	r2, [pc, #604]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005870:	f023 0304 	bic.w	r3, r3, #4
 8005874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fd f9f8 	bl	8002c74 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	e00a      	b.n	800589e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005888:	f7fd f9f4 	bl	8002c74 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	f241 3288 	movw	r2, #5000	; 0x1388
 8005896:	4293      	cmp	r3, r2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e12a      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589e:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0ed      	beq.n	8005888 <HAL_RCC_OscConfig+0x53c>
 80058ac:	e015      	b.n	80058da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ae:	f7fd f9e1 	bl	8002c74 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058b4:	e00a      	b.n	80058cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b6:	f7fd f9dd 	bl	8002c74 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e113      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058cc:	4b7f      	ldr	r3, [pc, #508]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1ed      	bne.n	80058b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058da:	7ffb      	ldrb	r3, [r7, #31]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d105      	bne.n	80058ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e0:	4b7a      	ldr	r3, [pc, #488]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	4a79      	ldr	r2, [pc, #484]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 80058e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80fe 	beq.w	8005af2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	f040 80d0 	bne.w	8005aa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005900:	4b72      	ldr	r3, [pc, #456]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0203 	and.w	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d130      	bne.n	8005976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	3b01      	subs	r3, #1
 8005920:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d127      	bne.n	8005976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d11f      	bne.n	8005976 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005940:	2a07      	cmp	r2, #7
 8005942:	bf14      	ite	ne
 8005944:	2201      	movne	r2, #1
 8005946:	2200      	moveq	r2, #0
 8005948:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800594a:	4293      	cmp	r3, r2
 800594c:	d113      	bne.n	8005976 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	3b01      	subs	r3, #1
 800595c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800595e:	429a      	cmp	r2, r3
 8005960:	d109      	bne.n	8005976 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	3b01      	subs	r3, #1
 8005970:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d06e      	beq.n	8005a54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	d069      	beq.n	8005a50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800597c:	4b53      	ldr	r3, [pc, #332]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005988:	4b50      	ldr	r3, [pc, #320]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0ad      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005998:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 800599e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059a4:	f7fd f966 	bl	8002c74 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fd f962 	bl	8002c74 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e09a      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059be:	4b43      	ldr	r3, [pc, #268]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ca:	4b40      	ldr	r3, [pc, #256]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <HAL_RCC_OscConfig+0x784>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059da:	3a01      	subs	r2, #1
 80059dc:	0112      	lsls	r2, r2, #4
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059e4:	0212      	lsls	r2, r2, #8
 80059e6:	4311      	orrs	r1, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059ec:	0852      	lsrs	r2, r2, #1
 80059ee:	3a01      	subs	r2, #1
 80059f0:	0552      	lsls	r2, r2, #21
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059f8:	0852      	lsrs	r2, r2, #1
 80059fa:	3a01      	subs	r2, #1
 80059fc:	0652      	lsls	r2, r2, #25
 80059fe:	4311      	orrs	r1, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a04:	0912      	lsrs	r2, r2, #4
 8005a06:	0452      	lsls	r2, r2, #17
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	4930      	ldr	r1, [pc, #192]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a10:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a1c:	4b2b      	ldr	r3, [pc, #172]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a28:	f7fd f924 	bl	8002c74 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fd f920 	bl	8002c74 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e058      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a42:	4b22      	ldr	r3, [pc, #136]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a4e:	e050      	b.n	8005af2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e04f      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a54:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d148      	bne.n	8005af2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a19      	ldr	r2, [pc, #100]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a6c:	4b17      	ldr	r3, [pc, #92]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a16      	ldr	r2, [pc, #88]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a78:	f7fd f8fc 	bl	8002c74 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fd f8f8 	bl	8002c74 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e030      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a92:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0x734>
 8005a9e:	e028      	b.n	8005af2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d023      	beq.n	8005aee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a08      	ldr	r2, [pc, #32]	; (8005acc <HAL_RCC_OscConfig+0x780>)
 8005aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab2:	f7fd f8df 	bl	8002c74 <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab8:	e00c      	b.n	8005ad4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aba:	f7fd f8db 	bl	8002c74 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d905      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e013      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_RCC_OscConfig+0x7b0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1ec      	bne.n	8005aba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCC_OscConfig+0x7b0>)
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	4905      	ldr	r1, [pc, #20]	; (8005afc <HAL_RCC_OscConfig+0x7b0>)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_OscConfig+0x7b4>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60cb      	str	r3, [r1, #12]
 8005aec:	e001      	b.n	8005af2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40021000 	.word	0x40021000
 8005b00:	feeefffc 	.word	0xfeeefffc

08005b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0e7      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b18:	4b75      	ldr	r3, [pc, #468]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d910      	bls.n	8005b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b26:	4b72      	ldr	r3, [pc, #456]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f023 0207 	bic.w	r2, r3, #7
 8005b2e:	4970      	ldr	r1, [pc, #448]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b6e      	ldr	r3, [pc, #440]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0cf      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d010      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	4b66      	ldr	r3, [pc, #408]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d908      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b64:	4b63      	ldr	r3, [pc, #396]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4960      	ldr	r1, [pc, #384]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04c      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d107      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8a:	4b5a      	ldr	r3, [pc, #360]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d121      	bne.n	8005bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0a6      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba2:	4b54      	ldr	r3, [pc, #336]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d115      	bne.n	8005bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e09a      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bba:	4b4e      	ldr	r3, [pc, #312]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e08e      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bca:	4b4a      	ldr	r3, [pc, #296]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e086      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bda:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f023 0203 	bic.w	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	4943      	ldr	r1, [pc, #268]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bec:	f7fd f842 	bl	8002c74 <HAL_GetTick>
 8005bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf4:	f7fd f83e 	bl	8002c74 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e06e      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0a:	4b3a      	ldr	r3, [pc, #232]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 020c 	and.w	r2, r3, #12
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d1eb      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d208      	bcs.n	8005c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c38:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	492b      	ldr	r1, [pc, #172]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4a:	4b29      	ldr	r3, [pc, #164]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d210      	bcs.n	8005c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f023 0207 	bic.w	r2, r3, #7
 8005c60:	4923      	ldr	r1, [pc, #140]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c68:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d001      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e036      	b.n	8005ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c86:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	4918      	ldr	r1, [pc, #96]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4910      	ldr	r1, [pc, #64]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cb8:	f000 f824 	bl	8005d04 <HAL_RCC_GetSysClockFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	490b      	ldr	r1, [pc, #44]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8005cca:	5ccb      	ldrb	r3, [r1, r3]
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd4:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <HAL_RCC_ClockConfig+0x1f8>)
 8005cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_RCC_ClockConfig+0x1fc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fc fde5 	bl	80028ac <HAL_InitTick>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	08010de8 	.word	0x08010de8
 8005cfc:	20000004 	.word	0x20000004
 8005d00:	20000008 	.word	0x20000008

08005d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b089      	sub	sp, #36	; 0x24
 8005d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d12:	4b3e      	ldr	r3, [pc, #248]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x34>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b0c      	cmp	r3, #12
 8005d30:	d121      	bne.n	8005d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d11e      	bne.n	8005d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d38:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d44:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	e005      	b.n	8005d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d54:	4b2d      	ldr	r3, [pc, #180]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d60:	4a2b      	ldr	r2, [pc, #172]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	e004      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d88:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d134      	bne.n	8005dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d92:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d003      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0xa6>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d003      	beq.n	8005db0 <HAL_RCC_GetSysClockFreq+0xac>
 8005da8:	e005      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005daa:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dac:	617b      	str	r3, [r7, #20]
      break;
 8005dae:	e005      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005db0:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8005db2:	617b      	str	r3, [r7, #20]
      break;
 8005db4:	e002      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	617b      	str	r3, [r7, #20]
      break;
 8005dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dbc:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	0a1b      	lsrs	r3, r3, #8
 8005dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	fb03 f202 	mul.w	r2, r3, r2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	0e5b      	lsrs	r3, r3, #25
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	3301      	adds	r3, #1
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3724      	adds	r7, #36	; 0x24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	08010e00 	.word	0x08010e00
 8005e14:	00f42400 	.word	0x00f42400
 8005e18:	007a1200 	.word	0x007a1200

08005e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e20:	4b03      	ldr	r3, [pc, #12]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e22:	681b      	ldr	r3, [r3, #0]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000004 	.word	0x20000004

08005e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e38:	f7ff fff0 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	0a1b      	lsrs	r3, r3, #8
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	4904      	ldr	r1, [pc, #16]	; (8005e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e4a:	5ccb      	ldrb	r3, [r1, r3]
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	08010df8 	.word	0x08010df8

08005e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e64:	f7ff ffda 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	0adb      	lsrs	r3, r3, #11
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e76:	5ccb      	ldrb	r3, [r1, r3]
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000
 8005e88:	08010df8 	.word	0x08010df8

08005e8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	220f      	movs	r2, #15
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005e9c:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0203 	and.w	r2, r3, #3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ea8:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ec0:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HAL_RCC_GetClockConfig+0x60>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0207 	and.w	r2, r3, #7
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40022000 	.word	0x40022000

08005ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005efc:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f08:	f7ff f9bc 	bl	8005284 <HAL_PWREx_GetVoltageRange>
 8005f0c:	6178      	str	r0, [r7, #20]
 8005f0e:	e014      	b.n	8005f3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f10:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f14:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f28:	f7ff f9ac 	bl	8005284 <HAL_PWREx_GetVoltageRange>
 8005f2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f40:	d10b      	bne.n	8005f5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d919      	bls.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2ba0      	cmp	r3, #160	; 0xa0
 8005f4c:	d902      	bls.n	8005f54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f4e:	2302      	movs	r3, #2
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e013      	b.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f54:	2301      	movs	r3, #1
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	e010      	b.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b80      	cmp	r3, #128	; 0x80
 8005f5e:	d902      	bls.n	8005f66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f60:	2303      	movs	r3, #3
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	e00a      	b.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b80      	cmp	r3, #128	; 0x80
 8005f6a:	d102      	bne.n	8005f72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	e004      	b.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d101      	bne.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f78:	2301      	movs	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 0207 	bic.w	r2, r3, #7
 8005f84:	4909      	ldr	r1, [pc, #36]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d001      	beq.n	8005f9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40022000 	.word	0x40022000

08005fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d041      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fd4:	d02a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005fd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fda:	d824      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fe0:	d008      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fe2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fe6:	d81e      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ff0:	d010      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ff2:	e018      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ff4:	4b86      	ldr	r3, [pc, #536]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	4a85      	ldr	r2, [pc, #532]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006000:	e015      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fabb 	bl	8006584 <RCCEx_PLLSAI1_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006012:	e00c      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3320      	adds	r3, #32
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fba6 	bl	800676c <RCCEx_PLLSAI2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	74fb      	strb	r3, [r7, #19]
      break;
 800602a:	e000      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800602c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800602e:	7cfb      	ldrb	r3, [r7, #19]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006034:	4b76      	ldr	r3, [pc, #472]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006042:	4973      	ldr	r1, [pc, #460]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800604a:	e001      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604c:	7cfb      	ldrb	r3, [r7, #19]
 800604e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d041      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006064:	d02a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006066:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800606a:	d824      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800606c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006070:	d008      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006076:	d81e      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800607c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006080:	d010      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006082:	e018      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006084:	4b62      	ldr	r3, [pc, #392]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a61      	ldr	r2, [pc, #388]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006090:	e015      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fa73 	bl	8006584 <RCCEx_PLLSAI1_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060a2:	e00c      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3320      	adds	r3, #32
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fb5e 	bl	800676c <RCCEx_PLLSAI2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	74fb      	strb	r3, [r7, #19]
      break;
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80060bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060be:	7cfb      	ldrb	r3, [r7, #19]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060c4:	4b52      	ldr	r3, [pc, #328]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d2:	494f      	ldr	r1, [pc, #316]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060da:	e001      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80a0 	beq.w	800622e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ee:	2300      	movs	r3, #0
 80060f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006108:	4b41      	ldr	r3, [pc, #260]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610c:	4a40      	ldr	r2, [pc, #256]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	6593      	str	r3, [r2, #88]	; 0x58
 8006114:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006120:	2301      	movs	r3, #1
 8006122:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006124:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800612a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006130:	f7fc fda0 	bl	8002c74 <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006136:	e009      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006138:	f7fc fd9c 	bl	8002c74 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d902      	bls.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	74fb      	strb	r3, [r7, #19]
        break;
 800614a:	e005      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800614c:	4b31      	ldr	r3, [pc, #196]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0ef      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d15c      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800615e:	4b2c      	ldr	r3, [pc, #176]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006168:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01f      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	429a      	cmp	r2, r3
 800617a:	d019      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800617c:	4b24      	ldr	r3, [pc, #144]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006186:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006188:	4b21      	ldr	r3, [pc, #132]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	4a20      	ldr	r2, [pc, #128]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061a8:	4a19      	ldr	r2, [pc, #100]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ba:	f7fc fd5b 	bl	8002c74 <HAL_GetTick>
 80061be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c0:	e00b      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f7fc fd57 	bl	8002c74 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d902      	bls.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	74fb      	strb	r3, [r7, #19]
            break;
 80061d8:	e006      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061da:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0ec      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10c      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ee:	4b08      	ldr	r3, [pc, #32]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fe:	4904      	ldr	r1, [pc, #16]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006206:	e009      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	74bb      	strb	r3, [r7, #18]
 800620c:	e006      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800620e:	bf00      	nop
 8006210:	40021000 	.word	0x40021000
 8006214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	7cfb      	ldrb	r3, [r7, #19]
 800621a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800621c:	7c7b      	ldrb	r3, [r7, #17]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d105      	bne.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006222:	4b9e      	ldr	r3, [pc, #632]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	4a9d      	ldr	r2, [pc, #628]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800622c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800623a:	4b98      	ldr	r3, [pc, #608]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f023 0203 	bic.w	r2, r3, #3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	4994      	ldr	r1, [pc, #592]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800625c:	4b8f      	ldr	r3, [pc, #572]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f023 020c 	bic.w	r2, r3, #12
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	498c      	ldr	r1, [pc, #560]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800627e:	4b87      	ldr	r3, [pc, #540]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	4983      	ldr	r1, [pc, #524]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062a0:	4b7e      	ldr	r3, [pc, #504]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	497b      	ldr	r1, [pc, #492]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062c2:	4b76      	ldr	r3, [pc, #472]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	4972      	ldr	r1, [pc, #456]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062e4:	4b6d      	ldr	r3, [pc, #436]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f2:	496a      	ldr	r1, [pc, #424]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006306:	4b65      	ldr	r3, [pc, #404]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	4961      	ldr	r1, [pc, #388]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006328:	4b5c      	ldr	r3, [pc, #368]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	4959      	ldr	r1, [pc, #356]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800634a:	4b54      	ldr	r3, [pc, #336]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006358:	4950      	ldr	r1, [pc, #320]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800636c:	4b4b      	ldr	r3, [pc, #300]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	4948      	ldr	r1, [pc, #288]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800638e:	4b43      	ldr	r3, [pc, #268]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639c:	493f      	ldr	r1, [pc, #252]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d028      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063b0:	4b3a      	ldr	r3, [pc, #232]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063be:	4937      	ldr	r1, [pc, #220]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ce:	d106      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d0:	4b32      	ldr	r3, [pc, #200]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a31      	ldr	r2, [pc, #196]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063da:	60d3      	str	r3, [r2, #12]
 80063dc:	e011      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e6:	d10c      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f8c8 	bl	8006584 <RCCEx_PLLSAI1_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d028      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800640e:	4b23      	ldr	r3, [pc, #140]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	491f      	ldr	r1, [pc, #124]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642c:	d106      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642e:	4b1b      	ldr	r3, [pc, #108]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	4a1a      	ldr	r2, [pc, #104]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	60d3      	str	r3, [r2, #12]
 800643a:	e011      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006444:	d10c      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f899 	bl	8006584 <RCCEx_PLLSAI1_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d02b      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800646c:	4b0b      	ldr	r3, [pc, #44]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647a:	4908      	ldr	r1, [pc, #32]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800648a:	d109      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4a02      	ldr	r2, [pc, #8]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006496:	60d3      	str	r3, [r2, #12]
 8006498:	e014      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	2101      	movs	r1, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f867 	bl	8006584 <RCCEx_PLLSAI1_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ba:	7cfb      	ldrb	r3, [r7, #19]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80064c0:	7cfb      	ldrb	r3, [r7, #19]
 80064c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02f      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064d0:	4b2b      	ldr	r3, [pc, #172]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064de:	4928      	ldr	r1, [pc, #160]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ee:	d10d      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f844 	bl	8006584 <RCCEx_PLLSAI1_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d014      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006506:	7cfb      	ldrb	r3, [r7, #19]
 8006508:	74bb      	strb	r3, [r7, #18]
 800650a:	e011      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006514:	d10c      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3320      	adds	r3, #32
 800651a:	2102      	movs	r1, #2
 800651c:	4618      	mov	r0, r3
 800651e:	f000 f925 	bl	800676c <RCCEx_PLLSAI2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006526:	7cfb      	ldrb	r3, [r7, #19]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800654a:	490d      	ldr	r1, [pc, #52]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800655e:	4b08      	ldr	r3, [pc, #32]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656e:	4904      	ldr	r1, [pc, #16]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006576:	7cbb      	ldrb	r3, [r7, #18]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40021000 	.word	0x40021000

08006584 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006592:	4b75      	ldr	r3, [pc, #468]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800659e:	4b72      	ldr	r3, [pc, #456]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0203 	and.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d10d      	bne.n	80065ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
       ||
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065b6:	4b6c      	ldr	r3, [pc, #432]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
       ||
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d047      	beq.n	800665a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
 80065ce:	e044      	b.n	800665a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d018      	beq.n	800660a <RCCEx_PLLSAI1_Config+0x86>
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d825      	bhi.n	8006628 <RCCEx_PLLSAI1_Config+0xa4>
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d002      	beq.n	80065e6 <RCCEx_PLLSAI1_Config+0x62>
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d009      	beq.n	80065f8 <RCCEx_PLLSAI1_Config+0x74>
 80065e4:	e020      	b.n	8006628 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065e6:	4b60      	ldr	r3, [pc, #384]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d11d      	bne.n	800662e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065f6:	e01a      	b.n	800662e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065f8:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d116      	bne.n	8006632 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006608:	e013      	b.n	8006632 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800660a:	4b57      	ldr	r3, [pc, #348]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006616:	4b54      	ldr	r3, [pc, #336]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006626:	e006      	b.n	8006636 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e004      	b.n	8006638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006636:	bf00      	nop
    }

    if(status == HAL_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10d      	bne.n	800665a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800663e:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	3b01      	subs	r3, #1
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	430b      	orrs	r3, r1
 8006654:	4944      	ldr	r1, [pc, #272]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006656:	4313      	orrs	r3, r2
 8006658:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d17d      	bne.n	800675c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006660:	4b41      	ldr	r3, [pc, #260]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a40      	ldr	r2, [pc, #256]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800666a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666c:	f7fc fb02 	bl	8002c74 <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006674:	f7fc fafe 	bl	8002c74 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
        break;
 8006686:	e005      	b.n	8006694 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006688:	4b37      	ldr	r3, [pc, #220]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1ef      	bne.n	8006674 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d160      	bne.n	800675c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d111      	bne.n	80066c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066a0:	4b31      	ldr	r3, [pc, #196]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6892      	ldr	r2, [r2, #8]
 80066b0:	0211      	lsls	r1, r2, #8
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	68d2      	ldr	r2, [r2, #12]
 80066b6:	0912      	lsrs	r2, r2, #4
 80066b8:	0452      	lsls	r2, r2, #17
 80066ba:	430a      	orrs	r2, r1
 80066bc:	492a      	ldr	r1, [pc, #168]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	610b      	str	r3, [r1, #16]
 80066c2:	e027      	b.n	8006714 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d112      	bne.n	80066f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80066d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6892      	ldr	r2, [r2, #8]
 80066da:	0211      	lsls	r1, r2, #8
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6912      	ldr	r2, [r2, #16]
 80066e0:	0852      	lsrs	r2, r2, #1
 80066e2:	3a01      	subs	r2, #1
 80066e4:	0552      	lsls	r2, r2, #21
 80066e6:	430a      	orrs	r2, r1
 80066e8:	491f      	ldr	r1, [pc, #124]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	610b      	str	r3, [r1, #16]
 80066ee:	e011      	b.n	8006714 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6892      	ldr	r2, [r2, #8]
 8006700:	0211      	lsls	r1, r2, #8
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6952      	ldr	r2, [r2, #20]
 8006706:	0852      	lsrs	r2, r2, #1
 8006708:	3a01      	subs	r2, #1
 800670a:	0652      	lsls	r2, r2, #25
 800670c:	430a      	orrs	r2, r1
 800670e:	4916      	ldr	r1, [pc, #88]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006714:	4b14      	ldr	r3, [pc, #80]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a13      	ldr	r2, [pc, #76]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800671a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800671e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006720:	f7fc faa8 	bl	8002c74 <HAL_GetTick>
 8006724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006726:	e009      	b.n	800673c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006728:	f7fc faa4 	bl	8002c74 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d902      	bls.n	800673c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
          break;
 800673a:	e005      	b.n	8006748 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0ef      	beq.n	8006728 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	4904      	ldr	r1, [pc, #16]	; (8006768 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006758:	4313      	orrs	r3, r2
 800675a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40021000 	.word	0x40021000

0800676c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800677a:	4b6a      	ldr	r3, [pc, #424]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d018      	beq.n	80067b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006786:	4b67      	ldr	r3, [pc, #412]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0203 	and.w	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d10d      	bne.n	80067b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
       ||
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800679e:	4b61      	ldr	r3, [pc, #388]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
       ||
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d047      	beq.n	8006842 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	73fb      	strb	r3, [r7, #15]
 80067b6:	e044      	b.n	8006842 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d018      	beq.n	80067f2 <RCCEx_PLLSAI2_Config+0x86>
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d825      	bhi.n	8006810 <RCCEx_PLLSAI2_Config+0xa4>
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d002      	beq.n	80067ce <RCCEx_PLLSAI2_Config+0x62>
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d009      	beq.n	80067e0 <RCCEx_PLLSAI2_Config+0x74>
 80067cc:	e020      	b.n	8006810 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067ce:	4b55      	ldr	r3, [pc, #340]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d11d      	bne.n	8006816 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067de:	e01a      	b.n	8006816 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067e0:	4b50      	ldr	r3, [pc, #320]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d116      	bne.n	800681a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f0:	e013      	b.n	800681a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067f2:	4b4c      	ldr	r3, [pc, #304]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10f      	bne.n	800681e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067fe:	4b49      	ldr	r3, [pc, #292]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800680e:	e006      	b.n	800681e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
      break;
 8006814:	e004      	b.n	8006820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006816:	bf00      	nop
 8006818:	e002      	b.n	8006820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800681a:	bf00      	nop
 800681c:	e000      	b.n	8006820 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800681e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10d      	bne.n	8006842 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006826:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6819      	ldr	r1, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	3b01      	subs	r3, #1
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	430b      	orrs	r3, r1
 800683c:	4939      	ldr	r1, [pc, #228]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800683e:	4313      	orrs	r3, r2
 8006840:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d167      	bne.n	8006918 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006848:	4b36      	ldr	r3, [pc, #216]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a35      	ldr	r2, [pc, #212]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800684e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006854:	f7fc fa0e 	bl	8002c74 <HAL_GetTick>
 8006858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800685a:	e009      	b.n	8006870 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800685c:	f7fc fa0a 	bl	8002c74 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d902      	bls.n	8006870 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	73fb      	strb	r3, [r7, #15]
        break;
 800686e:	e005      	b.n	800687c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006870:	4b2c      	ldr	r3, [pc, #176]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1ef      	bne.n	800685c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d14a      	bne.n	8006918 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d111      	bne.n	80068ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006888:	4b26      	ldr	r3, [pc, #152]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6892      	ldr	r2, [r2, #8]
 8006898:	0211      	lsls	r1, r2, #8
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68d2      	ldr	r2, [r2, #12]
 800689e:	0912      	lsrs	r2, r2, #4
 80068a0:	0452      	lsls	r2, r2, #17
 80068a2:	430a      	orrs	r2, r1
 80068a4:	491f      	ldr	r1, [pc, #124]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	614b      	str	r3, [r1, #20]
 80068aa:	e011      	b.n	80068d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068ac:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6892      	ldr	r2, [r2, #8]
 80068bc:	0211      	lsls	r1, r2, #8
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6912      	ldr	r2, [r2, #16]
 80068c2:	0852      	lsrs	r2, r2, #1
 80068c4:	3a01      	subs	r2, #1
 80068c6:	0652      	lsls	r2, r2, #25
 80068c8:	430a      	orrs	r2, r1
 80068ca:	4916      	ldr	r1, [pc, #88]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068d0:	4b14      	ldr	r3, [pc, #80]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fc f9ca 	bl	8002c74 <HAL_GetTick>
 80068e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068e2:	e009      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068e4:	f7fc f9c6 	bl	8002c74 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d902      	bls.n	80068f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	73fb      	strb	r3, [r7, #15]
          break;
 80068f6:	e005      	b.n	8006904 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0ef      	beq.n	80068e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800690a:	4b06      	ldr	r3, [pc, #24]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	4904      	ldr	r1, [pc, #16]	; (8006924 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006914:	4313      	orrs	r3, r2
 8006916:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40021000 	.word	0x40021000

08006928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e049      	b.n	80069ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fb fe6a 	bl	8002628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f000 fd16 	bl	8007398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d001      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e04f      	b.n	8006a90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a23      	ldr	r2, [pc, #140]	; (8006a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0x76>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1a:	d018      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0x76>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0x76>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0x76>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0x76>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <HAL_TIM_Base_Start_IT+0xd4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_TIM_Base_Start_IT+0x76>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d115      	bne.n	8006a7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b06      	cmp	r3, #6
 8006a5e:	d015      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0xb4>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d011      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a78:	e008      	b.n	8006a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0201 	orr.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e000      	b.n	8006a8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	00010007 	.word	0x00010007

08006ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e049      	b.n	8006b5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f841 	bl	8006b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f000 fc4e 	bl	8007398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <HAL_TIM_PWM_Start+0x24>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	e03c      	b.n	8006c1a <HAL_TIM_PWM_Start+0x9e>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d109      	bne.n	8006bba <HAL_TIM_PWM_Start+0x3e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	bf14      	ite	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	2300      	moveq	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	e02f      	b.n	8006c1a <HAL_TIM_PWM_Start+0x9e>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d109      	bne.n	8006bd4 <HAL_TIM_PWM_Start+0x58>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e022      	b.n	8006c1a <HAL_TIM_PWM_Start+0x9e>
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b0c      	cmp	r3, #12
 8006bd8:	d109      	bne.n	8006bee <HAL_TIM_PWM_Start+0x72>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	e015      	b.n	8006c1a <HAL_TIM_PWM_Start+0x9e>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d109      	bne.n	8006c08 <HAL_TIM_PWM_Start+0x8c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	e008      	b.n	8006c1a <HAL_TIM_PWM_Start+0x9e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e09c      	b.n	8006d5c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <HAL_TIM_PWM_Start+0xb6>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c30:	e023      	b.n	8006c7a <HAL_TIM_PWM_Start+0xfe>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d104      	bne.n	8006c42 <HAL_TIM_PWM_Start+0xc6>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c40:	e01b      	b.n	8006c7a <HAL_TIM_PWM_Start+0xfe>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d104      	bne.n	8006c52 <HAL_TIM_PWM_Start+0xd6>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c50:	e013      	b.n	8006c7a <HAL_TIM_PWM_Start+0xfe>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0xe6>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c60:	e00b      	b.n	8006c7a <HAL_TIM_PWM_Start+0xfe>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b10      	cmp	r3, #16
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0xf6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c70:	e003      	b.n	8006c7a <HAL_TIM_PWM_Start+0xfe>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 ff92 	bl	8007bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a35      	ldr	r2, [pc, #212]	; (8006d64 <HAL_TIM_PWM_Start+0x1e8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_TIM_PWM_Start+0x13e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a34      	ldr	r2, [pc, #208]	; (8006d68 <HAL_TIM_PWM_Start+0x1ec>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_TIM_PWM_Start+0x13e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a32      	ldr	r2, [pc, #200]	; (8006d6c <HAL_TIM_PWM_Start+0x1f0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_TIM_PWM_Start+0x13e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a31      	ldr	r2, [pc, #196]	; (8006d70 <HAL_TIM_PWM_Start+0x1f4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_TIM_PWM_Start+0x13e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2f      	ldr	r2, [pc, #188]	; (8006d74 <HAL_TIM_PWM_Start+0x1f8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x142>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <HAL_TIM_PWM_Start+0x144>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <HAL_TIM_PWM_Start+0x1e8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d01d      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x19e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d018      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x19e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <HAL_TIM_PWM_Start+0x1fc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x19e>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <HAL_TIM_PWM_Start+0x200>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00e      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x19e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <HAL_TIM_PWM_Start+0x204>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d009      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x19e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <HAL_TIM_PWM_Start+0x1ec>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_TIM_PWM_Start+0x19e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <HAL_TIM_PWM_Start+0x1f0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d115      	bne.n	8006d46 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <HAL_TIM_PWM_Start+0x208>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b06      	cmp	r3, #6
 8006d2a:	d015      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x1dc>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d32:	d011      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	e008      	b.n	8006d58 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e000      	b.n	8006d5a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40013400 	.word	0x40013400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800
 8006d80:	40000c00 	.word	0x40000c00
 8006d84:	00010007 	.word	0x00010007

08006d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d020      	beq.n	8006dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0202 	mvn.w	r2, #2
 8006dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fac1 	bl	800735a <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fab3 	bl	8007346 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fac4 	bl	800736e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d020      	beq.n	8006e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01b      	beq.n	8006e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0204 	mvn.w	r2, #4
 8006e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa9b 	bl	800735a <HAL_TIM_IC_CaptureCallback>
 8006e24:	e005      	b.n	8006e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa8d 	bl	8007346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fa9e 	bl	800736e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d020      	beq.n	8006e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01b      	beq.n	8006e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f06f 0208 	mvn.w	r2, #8
 8006e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa75 	bl	800735a <HAL_TIM_IC_CaptureCallback>
 8006e70:	e005      	b.n	8006e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa67 	bl	8007346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa78 	bl	800736e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d020      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01b      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0210 	mvn.w	r2, #16
 8006ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa4f 	bl	800735a <HAL_TIM_IC_CaptureCallback>
 8006ebc:	e005      	b.n	8006eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa41 	bl	8007346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa52 	bl	800736e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f06f 0201 	mvn.w	r2, #1
 8006eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fb fa84 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 ff02 	bl	8007d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00c      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fefa 	bl	8007d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa11 	bl	8007382 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0220 	mvn.w	r2, #32
 8006f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fec2 	bl	8007d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e0ff      	b.n	80071aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b14      	cmp	r3, #20
 8006fb6:	f200 80f0 	bhi.w	800719a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006fba:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08007015 	.word	0x08007015
 8006fc4:	0800719b 	.word	0x0800719b
 8006fc8:	0800719b 	.word	0x0800719b
 8006fcc:	0800719b 	.word	0x0800719b
 8006fd0:	08007055 	.word	0x08007055
 8006fd4:	0800719b 	.word	0x0800719b
 8006fd8:	0800719b 	.word	0x0800719b
 8006fdc:	0800719b 	.word	0x0800719b
 8006fe0:	08007097 	.word	0x08007097
 8006fe4:	0800719b 	.word	0x0800719b
 8006fe8:	0800719b 	.word	0x0800719b
 8006fec:	0800719b 	.word	0x0800719b
 8006ff0:	080070d7 	.word	0x080070d7
 8006ff4:	0800719b 	.word	0x0800719b
 8006ff8:	0800719b 	.word	0x0800719b
 8006ffc:	0800719b 	.word	0x0800719b
 8007000:	08007119 	.word	0x08007119
 8007004:	0800719b 	.word	0x0800719b
 8007008:	0800719b 	.word	0x0800719b
 800700c:	0800719b 	.word	0x0800719b
 8007010:	08007159 	.word	0x08007159
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fa56 	bl	80074cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0208 	orr.w	r2, r2, #8
 800702e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0204 	bic.w	r2, r2, #4
 800703e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6999      	ldr	r1, [r3, #24]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	619a      	str	r2, [r3, #24]
      break;
 8007052:	e0a5      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fac6 	bl	80075ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800706e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800707e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6999      	ldr	r1, [r3, #24]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	021a      	lsls	r2, r3, #8
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	619a      	str	r2, [r3, #24]
      break;
 8007094:	e084      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fb2f 	bl	8007700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0208 	orr.w	r2, r2, #8
 80070b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0204 	bic.w	r2, r2, #4
 80070c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69d9      	ldr	r1, [r3, #28]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	61da      	str	r2, [r3, #28]
      break;
 80070d4:	e064      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fb97 	bl	8007810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69d9      	ldr	r1, [r3, #28]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	021a      	lsls	r2, r3, #8
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	61da      	str	r2, [r3, #28]
      break;
 8007116:	e043      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fbe0 	bl	80078e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0208 	orr.w	r2, r2, #8
 8007132:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0204 	bic.w	r2, r2, #4
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007156:	e023      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fc24 	bl	80079ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007172:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	021a      	lsls	r2, r3, #8
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007198:	e002      	b.n	80071a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	75fb      	strb	r3, [r7, #23]
      break;
 800719e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_TIM_ConfigClockSource+0x1c>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e0b6      	b.n	800733e <HAL_TIM_ConfigClockSource+0x18a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720c:	d03e      	beq.n	800728c <HAL_TIM_ConfigClockSource+0xd8>
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	f200 8087 	bhi.w	8007324 <HAL_TIM_ConfigClockSource+0x170>
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	f000 8086 	beq.w	800732a <HAL_TIM_ConfigClockSource+0x176>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d87f      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 8007224:	2b70      	cmp	r3, #112	; 0x70
 8007226:	d01a      	beq.n	800725e <HAL_TIM_ConfigClockSource+0xaa>
 8007228:	2b70      	cmp	r3, #112	; 0x70
 800722a:	d87b      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 800722c:	2b60      	cmp	r3, #96	; 0x60
 800722e:	d050      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x11e>
 8007230:	2b60      	cmp	r3, #96	; 0x60
 8007232:	d877      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 8007234:	2b50      	cmp	r3, #80	; 0x50
 8007236:	d03c      	beq.n	80072b2 <HAL_TIM_ConfigClockSource+0xfe>
 8007238:	2b50      	cmp	r3, #80	; 0x50
 800723a:	d873      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d058      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x13e>
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d86f      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 8007244:	2b30      	cmp	r3, #48	; 0x30
 8007246:	d064      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15e>
 8007248:	2b30      	cmp	r3, #48	; 0x30
 800724a:	d86b      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 800724c:	2b20      	cmp	r3, #32
 800724e:	d060      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15e>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d867      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d05c      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15e>
 8007258:	2b10      	cmp	r3, #16
 800725a:	d05a      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15e>
 800725c:	e062      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800726e:	f000 fc7d 	bl	8007b6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	609a      	str	r2, [r3, #8]
      break;
 800728a:	e04f      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800729c:	f000 fc66 	bl	8007b6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ae:	609a      	str	r2, [r3, #8]
      break;
 80072b0:	e03c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072be:	461a      	mov	r2, r3
 80072c0:	f000 fbda 	bl	8007a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2150      	movs	r1, #80	; 0x50
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fc33 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 80072d0:	e02c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072de:	461a      	mov	r2, r3
 80072e0:	f000 fbf9 	bl	8007ad6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2160      	movs	r1, #96	; 0x60
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fc23 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 80072f0:	e01c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fe:	461a      	mov	r2, r3
 8007300:	f000 fbba 	bl	8007a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2140      	movs	r1, #64	; 0x40
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fc13 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 8007310:	e00c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f000 fc0a 	bl	8007b36 <TIM_ITRx_SetConfig>
      break;
 8007322:	e003      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e000      	b.n	800732c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800732a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a40      	ldr	r2, [pc, #256]	; (80074ac <TIM_Base_SetConfig+0x114>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d013      	beq.n	80073d8 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d00f      	beq.n	80073d8 <TIM_Base_SetConfig+0x40>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a3d      	ldr	r2, [pc, #244]	; (80074b0 <TIM_Base_SetConfig+0x118>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00b      	beq.n	80073d8 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a3c      	ldr	r2, [pc, #240]	; (80074b4 <TIM_Base_SetConfig+0x11c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d007      	beq.n	80073d8 <TIM_Base_SetConfig+0x40>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a3b      	ldr	r2, [pc, #236]	; (80074b8 <TIM_Base_SetConfig+0x120>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a3a      	ldr	r2, [pc, #232]	; (80074bc <TIM_Base_SetConfig+0x124>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d108      	bne.n	80073ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2f      	ldr	r2, [pc, #188]	; (80074ac <TIM_Base_SetConfig+0x114>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01f      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f8:	d01b      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2c      	ldr	r2, [pc, #176]	; (80074b0 <TIM_Base_SetConfig+0x118>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d017      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a2b      	ldr	r2, [pc, #172]	; (80074b4 <TIM_Base_SetConfig+0x11c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <TIM_Base_SetConfig+0x120>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a29      	ldr	r2, [pc, #164]	; (80074bc <TIM_Base_SetConfig+0x124>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a28      	ldr	r2, [pc, #160]	; (80074c0 <TIM_Base_SetConfig+0x128>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a27      	ldr	r2, [pc, #156]	; (80074c4 <TIM_Base_SetConfig+0x12c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_Base_SetConfig+0x9a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <TIM_Base_SetConfig+0x130>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a10      	ldr	r2, [pc, #64]	; (80074ac <TIM_Base_SetConfig+0x114>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00f      	beq.n	8007490 <TIM_Base_SetConfig+0xf8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a12      	ldr	r2, [pc, #72]	; (80074bc <TIM_Base_SetConfig+0x124>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00b      	beq.n	8007490 <TIM_Base_SetConfig+0xf8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a11      	ldr	r2, [pc, #68]	; (80074c0 <TIM_Base_SetConfig+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d007      	beq.n	8007490 <TIM_Base_SetConfig+0xf8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a10      	ldr	r2, [pc, #64]	; (80074c4 <TIM_Base_SetConfig+0x12c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d003      	beq.n	8007490 <TIM_Base_SetConfig+0xf8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a0f      	ldr	r2, [pc, #60]	; (80074c8 <TIM_Base_SetConfig+0x130>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d103      	bne.n	8007498 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	615a      	str	r2, [r3, #20]
}
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40012c00 	.word	0x40012c00
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40013400 	.word	0x40013400
 80074c0:	40014000 	.word	0x40014000
 80074c4:	40014400 	.word	0x40014400
 80074c8:	40014800 	.word	0x40014800

080074cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f023 0201 	bic.w	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0303 	bic.w	r3, r3, #3
 8007506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f023 0302 	bic.w	r3, r3, #2
 8007518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <TIM_OC1_SetConfig+0x10c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00f      	beq.n	800754c <TIM_OC1_SetConfig+0x80>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2b      	ldr	r2, [pc, #172]	; (80075dc <TIM_OC1_SetConfig+0x110>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_OC1_SetConfig+0x80>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a2a      	ldr	r2, [pc, #168]	; (80075e0 <TIM_OC1_SetConfig+0x114>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_OC1_SetConfig+0x80>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a29      	ldr	r2, [pc, #164]	; (80075e4 <TIM_OC1_SetConfig+0x118>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC1_SetConfig+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a28      	ldr	r2, [pc, #160]	; (80075e8 <TIM_OC1_SetConfig+0x11c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10c      	bne.n	8007566 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f023 0308 	bic.w	r3, r3, #8
 8007552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 0304 	bic.w	r3, r3, #4
 8007564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1b      	ldr	r2, [pc, #108]	; (80075d8 <TIM_OC1_SetConfig+0x10c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00f      	beq.n	800758e <TIM_OC1_SetConfig+0xc2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1a      	ldr	r2, [pc, #104]	; (80075dc <TIM_OC1_SetConfig+0x110>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00b      	beq.n	800758e <TIM_OC1_SetConfig+0xc2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <TIM_OC1_SetConfig+0x114>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d007      	beq.n	800758e <TIM_OC1_SetConfig+0xc2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <TIM_OC1_SetConfig+0x118>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d003      	beq.n	800758e <TIM_OC1_SetConfig+0xc2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <TIM_OC1_SetConfig+0x11c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d111      	bne.n	80075b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800759c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40014400 	.word	0x40014400
 80075e8:	40014800 	.word	0x40014800

080075ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	f023 0210 	bic.w	r2, r3, #16
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f023 0320 	bic.w	r3, r3, #32
 800763a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a28      	ldr	r2, [pc, #160]	; (80076ec <TIM_OC2_SetConfig+0x100>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_OC2_SetConfig+0x6c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a27      	ldr	r2, [pc, #156]	; (80076f0 <TIM_OC2_SetConfig+0x104>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d10d      	bne.n	8007674 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800765e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a1d      	ldr	r2, [pc, #116]	; (80076ec <TIM_OC2_SetConfig+0x100>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00f      	beq.n	800769c <TIM_OC2_SetConfig+0xb0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <TIM_OC2_SetConfig+0x104>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00b      	beq.n	800769c <TIM_OC2_SetConfig+0xb0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <TIM_OC2_SetConfig+0x108>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d007      	beq.n	800769c <TIM_OC2_SetConfig+0xb0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <TIM_OC2_SetConfig+0x10c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC2_SetConfig+0xb0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a19      	ldr	r2, [pc, #100]	; (80076fc <TIM_OC2_SetConfig+0x110>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d113      	bne.n	80076c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800774c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <TIM_OC3_SetConfig+0xfc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_OC3_SetConfig+0x6a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a26      	ldr	r2, [pc, #152]	; (8007800 <TIM_OC3_SetConfig+0x100>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10d      	bne.n	8007786 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1c      	ldr	r2, [pc, #112]	; (80077fc <TIM_OC3_SetConfig+0xfc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <TIM_OC3_SetConfig+0xae>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <TIM_OC3_SetConfig+0x100>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_OC3_SetConfig+0xae>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <TIM_OC3_SetConfig+0x104>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_OC3_SetConfig+0xae>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a19      	ldr	r2, [pc, #100]	; (8007808 <TIM_OC3_SetConfig+0x108>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_OC3_SetConfig+0xae>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a18      	ldr	r2, [pc, #96]	; (800780c <TIM_OC3_SetConfig+0x10c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d113      	bne.n	80077d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	621a      	str	r2, [r3, #32]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800

08007810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800785e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	031b      	lsls	r3, r3, #12
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <TIM_OC4_SetConfig+0xc0>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00f      	beq.n	8007894 <TIM_OC4_SetConfig+0x84>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a17      	ldr	r2, [pc, #92]	; (80078d4 <TIM_OC4_SetConfig+0xc4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00b      	beq.n	8007894 <TIM_OC4_SetConfig+0x84>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a16      	ldr	r2, [pc, #88]	; (80078d8 <TIM_OC4_SetConfig+0xc8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <TIM_OC4_SetConfig+0x84>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a15      	ldr	r2, [pc, #84]	; (80078dc <TIM_OC4_SetConfig+0xcc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC4_SetConfig+0x84>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a14      	ldr	r2, [pc, #80]	; (80078e0 <TIM_OC4_SetConfig+0xd0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d109      	bne.n	80078a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800789a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	019b      	lsls	r3, r3, #6
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40012c00 	.word	0x40012c00
 80078d4:	40013400 	.word	0x40013400
 80078d8:	40014000 	.word	0x40014000
 80078dc:	40014400 	.word	0x40014400
 80078e0:	40014800 	.word	0x40014800

080078e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a17      	ldr	r2, [pc, #92]	; (8007998 <TIM_OC5_SetConfig+0xb4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00f      	beq.n	800795e <TIM_OC5_SetConfig+0x7a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a16      	ldr	r2, [pc, #88]	; (800799c <TIM_OC5_SetConfig+0xb8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00b      	beq.n	800795e <TIM_OC5_SetConfig+0x7a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <TIM_OC5_SetConfig+0xbc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d007      	beq.n	800795e <TIM_OC5_SetConfig+0x7a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a14      	ldr	r2, [pc, #80]	; (80079a4 <TIM_OC5_SetConfig+0xc0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d003      	beq.n	800795e <TIM_OC5_SetConfig+0x7a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <TIM_OC5_SetConfig+0xc4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d109      	bne.n	8007972 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40013400 	.word	0x40013400
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800

080079ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	051b      	lsls	r3, r3, #20
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <TIM_OC6_SetConfig+0xb8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00f      	beq.n	8007a28 <TIM_OC6_SetConfig+0x7c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <TIM_OC6_SetConfig+0xbc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00b      	beq.n	8007a28 <TIM_OC6_SetConfig+0x7c>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a16      	ldr	r2, [pc, #88]	; (8007a6c <TIM_OC6_SetConfig+0xc0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d007      	beq.n	8007a28 <TIM_OC6_SetConfig+0x7c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <TIM_OC6_SetConfig+0xc4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC6_SetConfig+0x7c>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a14      	ldr	r2, [pc, #80]	; (8007a74 <TIM_OC6_SetConfig+0xc8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d109      	bne.n	8007a3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	029b      	lsls	r3, r3, #10
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40012c00 	.word	0x40012c00
 8007a68:	40013400 	.word	0x40013400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40014400 	.word	0x40014400
 8007a74:	40014800 	.word	0x40014800

08007a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f023 0201 	bic.w	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 030a 	bic.w	r3, r3, #10
 8007ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b087      	sub	sp, #28
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	f023 0210 	bic.w	r2, r3, #16
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	031b      	lsls	r3, r3, #12
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f043 0307 	orr.w	r3, r3, #7
 8007b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	609a      	str	r2, [r3, #8]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	021a      	lsls	r2, r3, #8
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	609a      	str	r2, [r3, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1a      	ldr	r2, [r3, #32]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	401a      	ands	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1a      	ldr	r2, [r3, #32]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f003 031f 	and.w	r3, r3, #31
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	fa01 f303 	lsl.w	r3, r1, r3
 8007be4:	431a      	orrs	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e068      	b.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2e      	ldr	r2, [pc, #184]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d108      	bne.n	8007c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c82:	d018      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	; (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1a      	ldr	r2, [pc, #104]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	; (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a14      	ldr	r2, [pc, #80]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40013400 	.word	0x40013400
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40014000 	.word	0x40014000

08007d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e040      	b.n	8007dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fa fcc8 	bl	80026fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2224      	movs	r2, #36	; 0x24
 8007d70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0201 	bic.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fed4 	bl	8008b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc19 	bl	80085c8 <UART_SetConfig>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e01b      	b.n	8007dd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f042 0201 	orr.w	r2, r2, #1
 8007dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 ff53 	bl	8008c7c <UART_CheckIdleState>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	4613      	mov	r3, r2
 8007dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d178      	bne.n	8007eea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <HAL_UART_Transmit+0x24>
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e071      	b.n	8007eec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2221      	movs	r2, #33	; 0x21
 8007e14:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e16:	f7fa ff2d 	bl	8002c74 <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	d108      	bne.n	8007e48 <HAL_UART_Transmit+0x68>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	e003      	b.n	8007e50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e50:	e030      	b.n	8007eb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2180      	movs	r1, #128	; 0x80
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 ffb5 	bl	8008dcc <UART_WaitOnFlagUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e03c      	b.n	8007eec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10b      	bne.n	8007e90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	881a      	ldrh	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e84:	b292      	uxth	r2, r2
 8007e86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e008      	b.n	8007ea2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	781a      	ldrb	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1c8      	bne.n	8007e52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2140      	movs	r1, #64	; 0x40
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 ff7e 	bl	8008dcc <UART_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e005      	b.n	8007eec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e000      	b.n	8007eec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007eea:	2302      	movs	r3, #2
  }
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d137      	bne.n	8007f7c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <HAL_UART_Receive_DMA+0x24>
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e030      	b.n	8007f7e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <HAL_UART_Receive_DMA+0x94>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d01f      	beq.n	8007f6c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d018      	beq.n	8007f6c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	613b      	str	r3, [r7, #16]
   return(result);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	623b      	str	r3, [r7, #32]
 8007f5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	69f9      	ldr	r1, [r7, #28]
 8007f5e:	6a3a      	ldr	r2, [r7, #32]
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e6      	bne.n	8007f3a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 ff92 	bl	8008e9c <UART_Start_Receive_DMA>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	e000      	b.n	8007f7e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	40008000 	.word	0x40008000

08007f8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b0ba      	sub	sp, #232	; 0xe8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007fb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007fba:	4013      	ands	r3, r2
 8007fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007fc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d115      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00f      	beq.n	8007ff4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d009      	beq.n	8007ff4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 82ae 	beq.w	8008546 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
      }
      return;
 8007ff2:	e2a8      	b.n	8008546 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 8117 	beq.w	800822c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800800a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800800e:	4b85      	ldr	r3, [pc, #532]	; (8008224 <HAL_UART_IRQHandler+0x298>)
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 810a 	beq.w	800822c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d011      	beq.n	8008048 <HAL_UART_IRQHandler+0xbc>
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2201      	movs	r2, #1
 8008036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803e:	f043 0201 	orr.w	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d011      	beq.n	8008078 <HAL_UART_IRQHandler+0xec>
 8008054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2202      	movs	r2, #2
 8008066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806e:	f043 0204 	orr.w	r2, r3, #4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d011      	beq.n	80080a8 <HAL_UART_IRQHandler+0x11c>
 8008084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2204      	movs	r2, #4
 8008096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809e:	f043 0202 	orr.w	r2, r3, #2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d017      	beq.n	80080e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d105      	bne.n	80080cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2208      	movs	r2, #8
 80080d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080da:	f043 0208 	orr.w	r2, r3, #8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d012      	beq.n	8008116 <HAL_UART_IRQHandler+0x18a>
 80080f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00c      	beq.n	8008116 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 8214 	beq.w	800854a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d005      	beq.n	800816e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008166:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800816a:	2b00      	cmp	r3, #0
 800816c:	d04f      	beq.n	800820e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 ff5a 	bl	8009028 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d141      	bne.n	8008206 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800819c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1d9      	bne.n	8008182 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d013      	beq.n	80081fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081da:	4a13      	ldr	r2, [pc, #76]	; (8008228 <HAL_UART_IRQHandler+0x29c>)
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fb ff52 	bl	800408c <HAL_DMA_Abort_IT>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081fc:	e00f      	b.n	800821e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f9cc 	bl	800859c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	e00b      	b.n	800821e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9c8 	bl	800859c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820c:	e007      	b.n	800821e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f9c4 	bl	800859c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800821c:	e195      	b.n	800854a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821e:	bf00      	nop
    return;
 8008220:	e193      	b.n	800854a <HAL_UART_IRQHandler+0x5be>
 8008222:	bf00      	nop
 8008224:	04000120 	.word	0x04000120
 8008228:	080092d9 	.word	0x080092d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008230:	2b01      	cmp	r3, #1
 8008232:	f040 814e 	bne.w	80084d2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823a:	f003 0310 	and.w	r3, r3, #16
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 8147 	beq.w	80084d2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008248:	f003 0310 	and.w	r3, r3, #16
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8140 	beq.w	80084d2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2210      	movs	r2, #16
 8008258:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	f040 80b8 	bne.w	80083da <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008276:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8167 	beq.w	800854e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800828a:	429a      	cmp	r2, r3
 800828c:	f080 815f 	bcs.w	800854e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008296:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f040 8086 	bne.w	80083b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1da      	bne.n	80082ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800831a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800831e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008322:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800832c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e1      	bne.n	80082f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3308      	adds	r3, #8
 8008338:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008358:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800835c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e3      	bne.n	8008332 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008388:	f023 0310 	bic.w	r3, r3, #16
 800838c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800839a:	65bb      	str	r3, [r7, #88]	; 0x58
 800839c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e4      	bne.n	8008378 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fb fe2c 	bl	8004010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f8ec 	bl	80085b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083d8:	e0b9      	b.n	800854e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 80ab 	beq.w	8008552 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80083fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80a6 	beq.w	8008552 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800841a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008428:	647b      	str	r3, [r7, #68]	; 0x44
 800842a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800842e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e4      	bne.n	8008406 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	623b      	str	r3, [r7, #32]
   return(result);
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008460:	633a      	str	r2, [r7, #48]	; 0x30
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e3      	bne.n	800843c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	60fb      	str	r3, [r7, #12]
   return(result);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f023 0310 	bic.w	r3, r3, #16
 800849c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	69b9      	ldr	r1, [r7, #24]
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	617b      	str	r3, [r7, #20]
   return(result);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e4      	bne.n	8008488 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2202      	movs	r2, #2
 80084c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f870 	bl	80085b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084d0:	e03f      	b.n	8008552 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <HAL_UART_IRQHandler+0x570>
 80084de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 ff2f 	bl	8009358 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084fa:	e02d      	b.n	8008558 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00e      	beq.n	8008526 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01c      	beq.n	8008556 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
    }
    return;
 8008524:	e017      	b.n	8008556 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <HAL_UART_IRQHandler+0x5cc>
 8008532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fee0 	bl	8009304 <UART_EndTransmit_IT>
    return;
 8008544:	e008      	b.n	8008558 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008546:	bf00      	nop
 8008548:	e006      	b.n	8008558 <HAL_UART_IRQHandler+0x5cc>
    return;
 800854a:	bf00      	nop
 800854c:	e004      	b.n	8008558 <HAL_UART_IRQHandler+0x5cc>
      return;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008556:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008558:	37e8      	adds	r7, #232	; 0xe8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop

08008560 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085cc:	b08a      	sub	sp, #40	; 0x28
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4ba4      	ldr	r3, [pc, #656]	; (8008888 <UART_SetConfig+0x2c0>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008600:	430b      	orrs	r3, r1
 8008602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a99      	ldr	r2, [pc, #612]	; (800888c <UART_SetConfig+0x2c4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d004      	beq.n	8008634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	4313      	orrs	r3, r2
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008644:	430a      	orrs	r2, r1
 8008646:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a90      	ldr	r2, [pc, #576]	; (8008890 <UART_SetConfig+0x2c8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d126      	bne.n	80086a0 <UART_SetConfig+0xd8>
 8008652:	4b90      	ldr	r3, [pc, #576]	; (8008894 <UART_SetConfig+0x2cc>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	2b03      	cmp	r3, #3
 800865e:	d81b      	bhi.n	8008698 <UART_SetConfig+0xd0>
 8008660:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <UART_SetConfig+0xa0>)
 8008662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008666:	bf00      	nop
 8008668:	08008679 	.word	0x08008679
 800866c:	08008689 	.word	0x08008689
 8008670:	08008681 	.word	0x08008681
 8008674:	08008691 	.word	0x08008691
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867e:	e116      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008680:	2302      	movs	r3, #2
 8008682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008686:	e112      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008688:	2304      	movs	r3, #4
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868e:	e10e      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008690:	2308      	movs	r3, #8
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008696:	e10a      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800869e:	e106      	b.n	80088ae <UART_SetConfig+0x2e6>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a7c      	ldr	r2, [pc, #496]	; (8008898 <UART_SetConfig+0x2d0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d138      	bne.n	800871c <UART_SetConfig+0x154>
 80086aa:	4b7a      	ldr	r3, [pc, #488]	; (8008894 <UART_SetConfig+0x2cc>)
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b0:	f003 030c 	and.w	r3, r3, #12
 80086b4:	2b0c      	cmp	r3, #12
 80086b6:	d82d      	bhi.n	8008714 <UART_SetConfig+0x14c>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <UART_SetConfig+0xf8>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086f5 	.word	0x080086f5
 80086c4:	08008715 	.word	0x08008715
 80086c8:	08008715 	.word	0x08008715
 80086cc:	08008715 	.word	0x08008715
 80086d0:	08008705 	.word	0x08008705
 80086d4:	08008715 	.word	0x08008715
 80086d8:	08008715 	.word	0x08008715
 80086dc:	08008715 	.word	0x08008715
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	08008715 	.word	0x08008715
 80086e8:	08008715 	.word	0x08008715
 80086ec:	08008715 	.word	0x08008715
 80086f0:	0800870d 	.word	0x0800870d
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fa:	e0d8      	b.n	80088ae <UART_SetConfig+0x2e6>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008702:	e0d4      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800870a:	e0d0      	b.n	80088ae <UART_SetConfig+0x2e6>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008712:	e0cc      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800871a:	e0c8      	b.n	80088ae <UART_SetConfig+0x2e6>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a5e      	ldr	r2, [pc, #376]	; (800889c <UART_SetConfig+0x2d4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d125      	bne.n	8008772 <UART_SetConfig+0x1aa>
 8008726:	4b5b      	ldr	r3, [pc, #364]	; (8008894 <UART_SetConfig+0x2cc>)
 8008728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008730:	2b30      	cmp	r3, #48	; 0x30
 8008732:	d016      	beq.n	8008762 <UART_SetConfig+0x19a>
 8008734:	2b30      	cmp	r3, #48	; 0x30
 8008736:	d818      	bhi.n	800876a <UART_SetConfig+0x1a2>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d00a      	beq.n	8008752 <UART_SetConfig+0x18a>
 800873c:	2b20      	cmp	r3, #32
 800873e:	d814      	bhi.n	800876a <UART_SetConfig+0x1a2>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <UART_SetConfig+0x182>
 8008744:	2b10      	cmp	r3, #16
 8008746:	d008      	beq.n	800875a <UART_SetConfig+0x192>
 8008748:	e00f      	b.n	800876a <UART_SetConfig+0x1a2>
 800874a:	2300      	movs	r3, #0
 800874c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008750:	e0ad      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008752:	2302      	movs	r3, #2
 8008754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008758:	e0a9      	b.n	80088ae <UART_SetConfig+0x2e6>
 800875a:	2304      	movs	r3, #4
 800875c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008760:	e0a5      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008762:	2308      	movs	r3, #8
 8008764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008768:	e0a1      	b.n	80088ae <UART_SetConfig+0x2e6>
 800876a:	2310      	movs	r3, #16
 800876c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008770:	e09d      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a4a      	ldr	r2, [pc, #296]	; (80088a0 <UART_SetConfig+0x2d8>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d125      	bne.n	80087c8 <UART_SetConfig+0x200>
 800877c:	4b45      	ldr	r3, [pc, #276]	; (8008894 <UART_SetConfig+0x2cc>)
 800877e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008782:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008786:	2bc0      	cmp	r3, #192	; 0xc0
 8008788:	d016      	beq.n	80087b8 <UART_SetConfig+0x1f0>
 800878a:	2bc0      	cmp	r3, #192	; 0xc0
 800878c:	d818      	bhi.n	80087c0 <UART_SetConfig+0x1f8>
 800878e:	2b80      	cmp	r3, #128	; 0x80
 8008790:	d00a      	beq.n	80087a8 <UART_SetConfig+0x1e0>
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d814      	bhi.n	80087c0 <UART_SetConfig+0x1f8>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <UART_SetConfig+0x1d8>
 800879a:	2b40      	cmp	r3, #64	; 0x40
 800879c:	d008      	beq.n	80087b0 <UART_SetConfig+0x1e8>
 800879e:	e00f      	b.n	80087c0 <UART_SetConfig+0x1f8>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a6:	e082      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ae:	e07e      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087b0:	2304      	movs	r3, #4
 80087b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b6:	e07a      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087b8:	2308      	movs	r3, #8
 80087ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087be:	e076      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087c0:	2310      	movs	r3, #16
 80087c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087c6:	e072      	b.n	80088ae <UART_SetConfig+0x2e6>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a35      	ldr	r2, [pc, #212]	; (80088a4 <UART_SetConfig+0x2dc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d12a      	bne.n	8008828 <UART_SetConfig+0x260>
 80087d2:	4b30      	ldr	r3, [pc, #192]	; (8008894 <UART_SetConfig+0x2cc>)
 80087d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e0:	d01a      	beq.n	8008818 <UART_SetConfig+0x250>
 80087e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e6:	d81b      	bhi.n	8008820 <UART_SetConfig+0x258>
 80087e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ec:	d00c      	beq.n	8008808 <UART_SetConfig+0x240>
 80087ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f2:	d815      	bhi.n	8008820 <UART_SetConfig+0x258>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <UART_SetConfig+0x238>
 80087f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fc:	d008      	beq.n	8008810 <UART_SetConfig+0x248>
 80087fe:	e00f      	b.n	8008820 <UART_SetConfig+0x258>
 8008800:	2300      	movs	r3, #0
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008806:	e052      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008808:	2302      	movs	r3, #2
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800880e:	e04e      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008810:	2304      	movs	r3, #4
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008816:	e04a      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008818:	2308      	movs	r3, #8
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800881e:	e046      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008826:	e042      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a17      	ldr	r2, [pc, #92]	; (800888c <UART_SetConfig+0x2c4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d13a      	bne.n	80088a8 <UART_SetConfig+0x2e0>
 8008832:	4b18      	ldr	r3, [pc, #96]	; (8008894 <UART_SetConfig+0x2cc>)
 8008834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008838:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800883c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008840:	d01a      	beq.n	8008878 <UART_SetConfig+0x2b0>
 8008842:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008846:	d81b      	bhi.n	8008880 <UART_SetConfig+0x2b8>
 8008848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884c:	d00c      	beq.n	8008868 <UART_SetConfig+0x2a0>
 800884e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008852:	d815      	bhi.n	8008880 <UART_SetConfig+0x2b8>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <UART_SetConfig+0x298>
 8008858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885c:	d008      	beq.n	8008870 <UART_SetConfig+0x2a8>
 800885e:	e00f      	b.n	8008880 <UART_SetConfig+0x2b8>
 8008860:	2300      	movs	r3, #0
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008866:	e022      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008868:	2302      	movs	r3, #2
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e01e      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008870:	2304      	movs	r3, #4
 8008872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008876:	e01a      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008878:	2308      	movs	r3, #8
 800887a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887e:	e016      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008880:	2310      	movs	r3, #16
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008886:	e012      	b.n	80088ae <UART_SetConfig+0x2e6>
 8008888:	efff69f3 	.word	0xefff69f3
 800888c:	40008000 	.word	0x40008000
 8008890:	40013800 	.word	0x40013800
 8008894:	40021000 	.word	0x40021000
 8008898:	40004400 	.word	0x40004400
 800889c:	40004800 	.word	0x40004800
 80088a0:	40004c00 	.word	0x40004c00
 80088a4:	40005000 	.word	0x40005000
 80088a8:	2310      	movs	r3, #16
 80088aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a9f      	ldr	r2, [pc, #636]	; (8008b30 <UART_SetConfig+0x568>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d17a      	bne.n	80089ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d824      	bhi.n	800890a <UART_SetConfig+0x342>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0x300>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	0800890b 	.word	0x0800890b
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	0800890b 	.word	0x0800890b
 80088d8:	080088fb 	.word	0x080088fb
 80088dc:	0800890b 	.word	0x0800890b
 80088e0:	0800890b 	.word	0x0800890b
 80088e4:	0800890b 	.word	0x0800890b
 80088e8:	08008903 	.word	0x08008903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fd faa2 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 80088f0:	61f8      	str	r0, [r7, #28]
        break;
 80088f2:	e010      	b.n	8008916 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f4:	4b8f      	ldr	r3, [pc, #572]	; (8008b34 <UART_SetConfig+0x56c>)
 80088f6:	61fb      	str	r3, [r7, #28]
        break;
 80088f8:	e00d      	b.n	8008916 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fa:	f7fd fa03 	bl	8005d04 <HAL_RCC_GetSysClockFreq>
 80088fe:	61f8      	str	r0, [r7, #28]
        break;
 8008900:	e009      	b.n	8008916 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008906:	61fb      	str	r3, [r7, #28]
        break;
 8008908:	e005      	b.n	8008916 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 80fb 	beq.w	8008b14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4413      	add	r3, r2
 8008928:	69fa      	ldr	r2, [r7, #28]
 800892a:	429a      	cmp	r2, r3
 800892c:	d305      	bcc.n	800893a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008934:	69fa      	ldr	r2, [r7, #28]
 8008936:	429a      	cmp	r2, r3
 8008938:	d903      	bls.n	8008942 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008940:	e0e8      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2200      	movs	r2, #0
 8008946:	461c      	mov	r4, r3
 8008948:	4615      	mov	r5, r2
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	f04f 0300 	mov.w	r3, #0
 8008952:	022b      	lsls	r3, r5, #8
 8008954:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008958:	0222      	lsls	r2, r4, #8
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	6849      	ldr	r1, [r1, #4]
 800895e:	0849      	lsrs	r1, r1, #1
 8008960:	2000      	movs	r0, #0
 8008962:	4688      	mov	r8, r1
 8008964:	4681      	mov	r9, r0
 8008966:	eb12 0a08 	adds.w	sl, r2, r8
 800896a:	eb43 0b09 	adc.w	fp, r3, r9
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	603b      	str	r3, [r7, #0]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800897c:	4650      	mov	r0, sl
 800897e:	4659      	mov	r1, fp
 8008980:	f7f8 f982 	bl	8000c88 <__aeabi_uldivmod>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4613      	mov	r3, r2
 800898a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008992:	d308      	bcc.n	80089a6 <UART_SetConfig+0x3de>
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899a:	d204      	bcs.n	80089a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	60da      	str	r2, [r3, #12]
 80089a4:	e0b6      	b.n	8008b14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089ac:	e0b2      	b.n	8008b14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b6:	d15e      	bne.n	8008a76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80089b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d828      	bhi.n	8008a12 <UART_SetConfig+0x44a>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x400>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	08008a13 	.word	0x08008a13
 80089d8:	08008a03 	.word	0x08008a03
 80089dc:	08008a13 	.word	0x08008a13
 80089e0:	08008a13 	.word	0x08008a13
 80089e4:	08008a13 	.word	0x08008a13
 80089e8:	08008a0b 	.word	0x08008a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ec:	f7fd fa22 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 80089f0:	61f8      	str	r0, [r7, #28]
        break;
 80089f2:	e014      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fd fa34 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 80089f8:	61f8      	str	r0, [r7, #28]
        break;
 80089fa:	e010      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089fc:	4b4d      	ldr	r3, [pc, #308]	; (8008b34 <UART_SetConfig+0x56c>)
 80089fe:	61fb      	str	r3, [r7, #28]
        break;
 8008a00:	e00d      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a02:	f7fd f97f 	bl	8005d04 <HAL_RCC_GetSysClockFreq>
 8008a06:	61f8      	str	r0, [r7, #28]
        break;
 8008a08:	e009      	b.n	8008a1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0e:	61fb      	str	r3, [r7, #28]
        break;
 8008a10:	e005      	b.n	8008a1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d077      	beq.n	8008b14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	005a      	lsls	r2, r3, #1
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	441a      	add	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b0f      	cmp	r3, #15
 8008a3e:	d916      	bls.n	8008a6e <UART_SetConfig+0x4a6>
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a46:	d212      	bcs.n	8008a6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f023 030f 	bic.w	r3, r3, #15
 8008a50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	085b      	lsrs	r3, r3, #1
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	8afb      	ldrh	r3, [r7, #22]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	8afa      	ldrh	r2, [r7, #22]
 8008a6a:	60da      	str	r2, [r3, #12]
 8008a6c:	e052      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a74:	e04e      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d827      	bhi.n	8008ace <UART_SetConfig+0x506>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x4bc>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008acf 	.word	0x08008acf
 8008a94:	08008abf 	.word	0x08008abf
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008acf 	.word	0x08008acf
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008ac7 	.word	0x08008ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa8:	f7fd f9c4 	bl	8005e34 <HAL_RCC_GetPCLK1Freq>
 8008aac:	61f8      	str	r0, [r7, #28]
        break;
 8008aae:	e014      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ab0:	f7fd f9d6 	bl	8005e60 <HAL_RCC_GetPCLK2Freq>
 8008ab4:	61f8      	str	r0, [r7, #28]
        break;
 8008ab6:	e010      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab8:	4b1e      	ldr	r3, [pc, #120]	; (8008b34 <UART_SetConfig+0x56c>)
 8008aba:	61fb      	str	r3, [r7, #28]
        break;
 8008abc:	e00d      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008abe:	f7fd f921 	bl	8005d04 <HAL_RCC_GetSysClockFreq>
 8008ac2:	61f8      	str	r0, [r7, #28]
        break;
 8008ac4:	e009      	b.n	8008ada <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	61fb      	str	r3, [r7, #28]
        break;
 8008acc:	e005      	b.n	8008ada <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d019      	beq.n	8008b14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	085a      	lsrs	r2, r3, #1
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	441a      	add	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	2b0f      	cmp	r3, #15
 8008af8:	d909      	bls.n	8008b0e <UART_SetConfig+0x546>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b00:	d205      	bcs.n	8008b0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60da      	str	r2, [r3, #12]
 8008b0c:	e002      	b.n	8008b14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008b20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3728      	adds	r7, #40	; 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b2e:	bf00      	nop
 8008b30:	40008000 	.word	0x40008000
 8008b34:	00f42400 	.word	0x00f42400

08008b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	f003 0304 	and.w	r3, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01a      	beq.n	8008c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c36:	d10a      	bne.n	8008c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	605a      	str	r2, [r3, #4]
  }
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b098      	sub	sp, #96	; 0x60
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c8c:	f7f9 fff2 	bl	8002c74 <HAL_GetTick>
 8008c90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d12e      	bne.n	8008cfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f88c 	bl	8008dcc <UART_WaitOnFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d021      	beq.n	8008cfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cce:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8008cda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e062      	b.n	8008dc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d149      	bne.n	8008da0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d14:	2200      	movs	r2, #0
 8008d16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f856 	bl	8008dcc <UART_WaitOnFlagUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d03c      	beq.n	8008da0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	623b      	str	r3, [r7, #32]
   return(result);
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d44:	633b      	str	r3, [r7, #48]	; 0x30
 8008d46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e6      	bne.n	8008d26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0301 	bic.w	r3, r3, #1
 8008d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d78:	61fa      	str	r2, [r7, #28]
 8008d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	69b9      	ldr	r1, [r7, #24]
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	617b      	str	r3, [r7, #20]
   return(result);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e5      	bne.n	8008d58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e011      	b.n	8008dc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3758      	adds	r7, #88	; 0x58
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ddc:	e049      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d045      	beq.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de6:	f7f9 ff45 	bl	8002c74 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d302      	bcc.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e048      	b.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d031      	beq.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d110      	bne.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2208      	movs	r2, #8
 8008e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 f8ff 	bl	8009028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e029      	b.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e4c:	d111      	bne.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 f8e5 	bl	8009028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2220      	movs	r2, #32
 8008e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e00f      	b.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	bf0c      	ite	eq
 8008e82:	2301      	moveq	r3, #1
 8008e84:	2300      	movne	r3, #0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d0a6      	beq.n	8008dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b096      	sub	sp, #88	; 0x58
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	88fa      	ldrh	r2, [r7, #6]
 8008eb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2222      	movs	r2, #34	; 0x22
 8008ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d028      	beq.n	8008f22 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed4:	4a3e      	ldr	r2, [pc, #248]	; (8008fd0 <UART_Start_Receive_DMA+0x134>)
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008edc:	4a3d      	ldr	r2, [pc, #244]	; (8008fd4 <UART_Start_Receive_DMA+0x138>)
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ee4:	4a3c      	ldr	r2, [pc, #240]	; (8008fd8 <UART_Start_Receive_DMA+0x13c>)
 8008ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eec:	2200      	movs	r2, #0
 8008eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3324      	adds	r3, #36	; 0x24
 8008efa:	4619      	mov	r1, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f00:	461a      	mov	r2, r3
 8008f02:	88fb      	ldrh	r3, [r7, #6]
 8008f04:	f7fb f824 	bl	8003f50 <HAL_DMA_Start_IT>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2210      	movs	r2, #16
 8008f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e051      	b.n	8008fc6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d018      	beq.n	8008f5c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e6      	bne.n	8008f2a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	f043 0301 	orr.w	r3, r3, #1
 8008f72:	653b      	str	r3, [r7, #80]	; 0x50
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8008f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e5      	bne.n	8008f5c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb0:	623a      	str	r2, [r7, #32]
 8008fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	69f9      	ldr	r1, [r7, #28]
 8008fb6:	6a3a      	ldr	r2, [r7, #32]
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e5      	bne.n	8008f90 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3758      	adds	r7, #88	; 0x58
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	080090f1 	.word	0x080090f1
 8008fd4:	0800921d 	.word	0x0800921d
 8008fd8:	0800925b 	.word	0x0800925b

08008fdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b089      	sub	sp, #36	; 0x24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ff8:	61fb      	str	r3, [r7, #28]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6979      	ldr	r1, [r7, #20]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	613b      	str	r3, [r7, #16]
   return(result);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800901c:	bf00      	nop
 800901e:	3724      	adds	r7, #36	; 0x24
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b095      	sub	sp, #84	; 0x54
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904e:	643b      	str	r3, [r7, #64]	; 0x40
 8009050:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e6      	bne.n	8009030 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	61fb      	str	r3, [r7, #28]
   return(result);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	64bb      	str	r3, [r7, #72]	; 0x48
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909a:	2b01      	cmp	r3, #1
 800909c:	d118      	bne.n	80090d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	647b      	str	r3, [r7, #68]	; 0x44
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80090e4:	bf00      	nop
 80090e6:	3754      	adds	r7, #84	; 0x54
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b09c      	sub	sp, #112	; 0x70
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d171      	bne.n	80091f0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800910c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910e:	2200      	movs	r2, #0
 8009110:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009128:	66bb      	str	r3, [r7, #104]	; 0x68
 800912a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009132:	65bb      	str	r3, [r7, #88]	; 0x58
 8009134:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e6      	bne.n	8009114 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	f023 0301 	bic.w	r3, r3, #1
 800915c:	667b      	str	r3, [r7, #100]	; 0x64
 800915e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009166:	647a      	str	r2, [r7, #68]	; 0x44
 8009168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800916c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e5      	bne.n	8009146 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3308      	adds	r3, #8
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	623b      	str	r3, [r7, #32]
   return(result);
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009190:	663b      	str	r3, [r7, #96]	; 0x60
 8009192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800919a:	633a      	str	r2, [r7, #48]	; 0x30
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a2:	e841 2300 	strex	r3, r2, [r1]
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1e5      	bne.n	800917a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d118      	bne.n	80091f0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0310 	bic.w	r3, r3, #16
 80091d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091dc:	61fb      	str	r3, [r7, #28]
 80091de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	69b9      	ldr	r1, [r7, #24]
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	617b      	str	r3, [r7, #20]
   return(result);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e6      	bne.n	80091be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f2:	2200      	movs	r2, #0
 80091f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d107      	bne.n	800920e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009204:	4619      	mov	r1, r3
 8009206:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009208:	f7ff f9d2 	bl	80085b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800920c:	e002      	b.n	8009214 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800920e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009210:	f7ff f9b0 	bl	8008574 <HAL_UART_RxCpltCallback>
}
 8009214:	bf00      	nop
 8009216:	3770      	adds	r7, #112	; 0x70
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009234:	2b01      	cmp	r3, #1
 8009236:	d109      	bne.n	800924c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	b29b      	uxth	r3, r3
 8009242:	4619      	mov	r1, r3
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f7ff f9b3 	bl	80085b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800924a:	e002      	b.n	8009252 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7ff f99b 	bl	8008588 <HAL_UART_RxHalfCpltCallback>
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009274:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	2b80      	cmp	r3, #128	; 0x80
 8009282:	d109      	bne.n	8009298 <UART_DMAError+0x3e>
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2b21      	cmp	r3, #33	; 0x21
 8009288:	d106      	bne.n	8009298 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2200      	movs	r2, #0
 800928e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009292:	6978      	ldr	r0, [r7, #20]
 8009294:	f7ff fea2 	bl	8008fdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d109      	bne.n	80092ba <UART_DMAError+0x60>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b22      	cmp	r3, #34	; 0x22
 80092aa:	d106      	bne.n	80092ba <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80092b4:	6978      	ldr	r0, [r7, #20]
 80092b6:	f7ff feb7 	bl	8009028 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092c0:	f043 0210 	orr.w	r2, r3, #16
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092ca:	6978      	ldr	r0, [r7, #20]
 80092cc:	f7ff f966 	bl	800859c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d0:	bf00      	nop
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7ff f950 	bl	800859c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	60bb      	str	r3, [r7, #8]
   return(result);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6979      	ldr	r1, [r7, #20]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	613b      	str	r3, [r7, #16]
   return(result);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e6      	bne.n	800930c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff f908 	bl	8008560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009350:	bf00      	nop
 8009352:	3720      	adds	r7, #32
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <__NVIC_SetPriority>:
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937c:	2b00      	cmp	r3, #0
 800937e:	db0a      	blt.n	8009396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	b2da      	uxtb	r2, r3
 8009384:	490c      	ldr	r1, [pc, #48]	; (80093b8 <__NVIC_SetPriority+0x4c>)
 8009386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800938a:	0112      	lsls	r2, r2, #4
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	440b      	add	r3, r1
 8009390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009394:	e00a      	b.n	80093ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	b2da      	uxtb	r2, r3
 800939a:	4908      	ldr	r1, [pc, #32]	; (80093bc <__NVIC_SetPriority+0x50>)
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	3b04      	subs	r3, #4
 80093a4:	0112      	lsls	r2, r2, #4
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	440b      	add	r3, r1
 80093aa:	761a      	strb	r2, [r3, #24]
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	e000e100 	.word	0xe000e100
 80093bc:	e000ed00 	.word	0xe000ed00

080093c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80093c4:	4b05      	ldr	r3, [pc, #20]	; (80093dc <SysTick_Handler+0x1c>)
 80093c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80093c8:	f001 fe70 	bl	800b0ac <xTaskGetSchedulerState>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d001      	beq.n	80093d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80093d2:	f002 fc59 	bl	800bc88 <xPortSysTickHandler>
  }
}
 80093d6:	bf00      	nop
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	e000e010 	.word	0xe000e010

080093e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80093e4:	2100      	movs	r1, #0
 80093e6:	f06f 0004 	mvn.w	r0, #4
 80093ea:	f7ff ffbf 	bl	800936c <__NVIC_SetPriority>
#endif
}
 80093ee:	bf00      	nop
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093fa:	f3ef 8305 	mrs	r3, IPSR
 80093fe:	603b      	str	r3, [r7, #0]
  return(result);
 8009400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009406:	f06f 0305 	mvn.w	r3, #5
 800940a:	607b      	str	r3, [r7, #4]
 800940c:	e00c      	b.n	8009428 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800940e:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <osKernelInitialize+0x44>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d105      	bne.n	8009422 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009416:	4b08      	ldr	r3, [pc, #32]	; (8009438 <osKernelInitialize+0x44>)
 8009418:	2201      	movs	r2, #1
 800941a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800941c:	2300      	movs	r3, #0
 800941e:	607b      	str	r3, [r7, #4]
 8009420:	e002      	b.n	8009428 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009428:	687b      	ldr	r3, [r7, #4]
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000638 	.word	0x20000638

0800943c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009442:	f3ef 8305 	mrs	r3, IPSR
 8009446:	603b      	str	r3, [r7, #0]
  return(result);
 8009448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <osKernelStart+0x1a>
    stat = osErrorISR;
 800944e:	f06f 0305 	mvn.w	r3, #5
 8009452:	607b      	str	r3, [r7, #4]
 8009454:	e010      	b.n	8009478 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <osKernelStart+0x48>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d109      	bne.n	8009472 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800945e:	f7ff ffbf 	bl	80093e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009462:	4b08      	ldr	r3, [pc, #32]	; (8009484 <osKernelStart+0x48>)
 8009464:	2202      	movs	r2, #2
 8009466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009468:	f001 f9c4 	bl	800a7f4 <vTaskStartScheduler>
      stat = osOK;
 800946c:	2300      	movs	r3, #0
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	e002      	b.n	8009478 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009472:	f04f 33ff 	mov.w	r3, #4294967295
 8009476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009478:	687b      	ldr	r3, [r7, #4]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000638 	.word	0x20000638

08009488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b08e      	sub	sp, #56	; 0x38
 800948c:	af04      	add	r7, sp, #16
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009498:	f3ef 8305 	mrs	r3, IPSR
 800949c:	617b      	str	r3, [r7, #20]
  return(result);
 800949e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d17e      	bne.n	80095a2 <osThreadNew+0x11a>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d07b      	beq.n	80095a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80094aa:	2380      	movs	r3, #128	; 0x80
 80094ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80094ae:	2318      	movs	r3, #24
 80094b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80094b6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d045      	beq.n	800954e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <osThreadNew+0x48>
        name = attr->name;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d008      	beq.n	80094f6 <osThreadNew+0x6e>
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b38      	cmp	r3, #56	; 0x38
 80094e8:	d805      	bhi.n	80094f6 <osThreadNew+0x6e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <osThreadNew+0x72>
        return (NULL);
 80094f6:	2300      	movs	r3, #0
 80094f8:	e054      	b.n	80095a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	089b      	lsrs	r3, r3, #2
 8009508:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00e      	beq.n	8009530 <osThreadNew+0xa8>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2ba7      	cmp	r3, #167	; 0xa7
 8009518:	d90a      	bls.n	8009530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800951e:	2b00      	cmp	r3, #0
 8009520:	d006      	beq.n	8009530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <osThreadNew+0xa8>
        mem = 1;
 800952a:	2301      	movs	r3, #1
 800952c:	61bb      	str	r3, [r7, #24]
 800952e:	e010      	b.n	8009552 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10c      	bne.n	8009552 <osThreadNew+0xca>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d108      	bne.n	8009552 <osThreadNew+0xca>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d104      	bne.n	8009552 <osThreadNew+0xca>
          mem = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	e001      	b.n	8009552 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d110      	bne.n	800957a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009560:	9202      	str	r2, [sp, #8]
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6a3a      	ldr	r2, [r7, #32]
 800956c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fe4e 	bl	800a210 <xTaskCreateStatic>
 8009574:	4603      	mov	r3, r0
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	e013      	b.n	80095a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d110      	bne.n	80095a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	b29a      	uxth	r2, r3
 8009584:	f107 0310 	add.w	r3, r7, #16
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fe99 	bl	800a2ca <xTaskCreate>
 8009598:	4603      	mov	r3, r0
 800959a:	2b01      	cmp	r3, #1
 800959c:	d001      	beq.n	80095a2 <osThreadNew+0x11a>
            hTask = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095a2:	693b      	ldr	r3, [r7, #16]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3728      	adds	r7, #40	; 0x28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095b8:	f3ef 8305 	mrs	r3, IPSR
 80095bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80095be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <osThreadSuspend+0x20>
    stat = osErrorISR;
 80095c4:	f06f 0305 	mvn.w	r3, #5
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e00b      	b.n	80095e4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d103      	bne.n	80095da <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80095d2:	f06f 0303 	mvn.w	r3, #3
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e004      	b.n	80095e4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80095de:	6938      	ldr	r0, [r7, #16]
 80095e0:	f001 f802 	bl	800a5e8 <vTaskSuspend>
  }

  return (stat);
 80095e4:	697b      	ldr	r3, [r7, #20]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b086      	sub	sp, #24
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fa:	f3ef 8305 	mrs	r3, IPSR
 80095fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009600:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <osThreadResume+0x20>
    stat = osErrorISR;
 8009606:	f06f 0305 	mvn.w	r3, #5
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	e00b      	b.n	8009626 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8009614:	f06f 0303 	mvn.w	r3, #3
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	e004      	b.n	8009626 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8009620:	6938      	ldr	r0, [r7, #16]
 8009622:	f001 f889 	bl	800a738 <vTaskResume>
  }

  return (stat);
 8009626:	697b      	ldr	r3, [r7, #20]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009638:	f3ef 8305 	mrs	r3, IPSR
 800963c:	60bb      	str	r3, [r7, #8]
  return(result);
 800963e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009640:	2b00      	cmp	r3, #0
 8009642:	d003      	beq.n	800964c <osDelay+0x1c>
    stat = osErrorISR;
 8009644:	f06f 0305 	mvn.w	r3, #5
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e007      	b.n	800965c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 ff92 	bl	800a580 <vTaskDelay>
    }
  }

  return (stat);
 800965c:	68fb      	ldr	r3, [r7, #12]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4a07      	ldr	r2, [pc, #28]	; (8009694 <vApplicationGetIdleTaskMemory+0x2c>)
 8009678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4a06      	ldr	r2, [pc, #24]	; (8009698 <vApplicationGetIdleTaskMemory+0x30>)
 800967e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2280      	movs	r2, #128	; 0x80
 8009684:	601a      	str	r2, [r3, #0]
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	2000063c 	.word	0x2000063c
 8009698:	200006e4 	.word	0x200006e4

0800969c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4a07      	ldr	r2, [pc, #28]	; (80096c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80096ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4a06      	ldr	r2, [pc, #24]	; (80096cc <vApplicationGetTimerTaskMemory+0x30>)
 80096b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ba:	601a      	str	r2, [r3, #0]
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	200008e4 	.word	0x200008e4
 80096cc:	2000098c 	.word	0x2000098c

080096d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f103 0208 	add.w	r2, r3, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f103 0208 	add.w	r2, r3, #8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f103 0208 	add.w	r2, r3, #8
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800972a:	b480      	push	{r7}
 800972c:	b085      	sub	sp, #20
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	601a      	str	r2, [r3, #0]
}
 8009766:	bf00      	nop
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d103      	bne.n	8009792 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	e00c      	b.n	80097ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3308      	adds	r3, #8
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	e002      	b.n	80097a0 <vListInsert+0x2e>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d2f6      	bcs.n	800979a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	601a      	str	r2, [r3, #0]
}
 80097d8:	bf00      	nop
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	6892      	ldr	r2, [r2, #8]
 80097fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6852      	ldr	r2, [r2, #4]
 8009804:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d103      	bne.n	8009818 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	1e5a      	subs	r2, r3, #1
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009862:	f002 f97f 	bl	800bb64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	68f9      	ldr	r1, [r7, #12]
 8009870:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009872:	fb01 f303 	mul.w	r3, r1, r3
 8009876:	441a      	add	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009892:	3b01      	subs	r3, #1
 8009894:	68f9      	ldr	r1, [r7, #12]
 8009896:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009898:	fb01 f303 	mul.w	r3, r1, r3
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	22ff      	movs	r2, #255	; 0xff
 80098a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	22ff      	movs	r2, #255	; 0xff
 80098ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d114      	bne.n	80098e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01a      	beq.n	80098f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3310      	adds	r3, #16
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 fa2f 	bl	800ad28 <xTaskRemoveFromEventList>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d012      	beq.n	80098f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098d0:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <xQueueGenericReset+0xcc>)
 80098d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	e009      	b.n	80098f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3310      	adds	r3, #16
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fef2 	bl	80096d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3324      	adds	r3, #36	; 0x24
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff feed 	bl	80096d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80098f6:	f002 f965 	bl	800bbc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80098fa:	2301      	movs	r3, #1
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08e      	sub	sp, #56	; 0x38
 800990c:	af02      	add	r7, sp, #8
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <xQueueGenericCreateStatic+0x52>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <xQueueGenericCreateStatic+0x56>
 800995a:	2301      	movs	r3, #1
 800995c:	e000      	b.n	8009960 <xQueueGenericCreateStatic+0x58>
 800995e:	2300      	movs	r3, #0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	623b      	str	r3, [r7, #32]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <xQueueGenericCreateStatic+0x7e>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <xQueueGenericCreateStatic+0x82>
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <xQueueGenericCreateStatic+0x84>
 800998a:	2300      	movs	r3, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	61fb      	str	r3, [r7, #28]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099a6:	2350      	movs	r3, #80	; 0x50
 80099a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b50      	cmp	r3, #80	; 0x50
 80099ae:	d00a      	beq.n	80099c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	61bb      	str	r3, [r7, #24]
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00d      	beq.n	80099ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	4613      	mov	r3, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 f805 	bl	80099f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3730      	adds	r7, #48	; 0x30
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d103      	bne.n	8009a14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	601a      	str	r2, [r3, #0]
 8009a12:	e002      	b.n	8009a1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a26:	2101      	movs	r1, #1
 8009a28:	69b8      	ldr	r0, [r7, #24]
 8009a2a:	f7ff ff05 	bl	8009838 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08e      	sub	sp, #56	; 0x38
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericSend+0x32>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <xQueueGenericSend+0x40>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <xQueueGenericSend+0x44>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <xQueueGenericSend+0x46>
 8009a84:	2300      	movs	r3, #0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <xQueueGenericSend+0x60>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a9c:	bf00      	nop
 8009a9e:	e7fe      	b.n	8009a9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d103      	bne.n	8009aae <xQueueGenericSend+0x6e>
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <xQueueGenericSend+0x72>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e000      	b.n	8009ab4 <xQueueGenericSend+0x74>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <xQueueGenericSend+0x8e>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	623b      	str	r3, [r7, #32]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ace:	f001 faed 	bl	800b0ac <xTaskGetSchedulerState>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <xQueueGenericSend+0x9e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <xQueueGenericSend+0xa2>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e000      	b.n	8009ae4 <xQueueGenericSend+0xa4>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xQueueGenericSend+0xbe>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	61fb      	str	r3, [r7, #28]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009afe:	f002 f831 	bl	800bb64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d302      	bcc.n	8009b14 <xQueueGenericSend+0xd4>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d129      	bne.n	8009b68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	68b9      	ldr	r1, [r7, #8]
 8009b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b1a:	f000 fa0b 	bl	8009f34 <prvCopyDataToQueue>
 8009b1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d010      	beq.n	8009b4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	3324      	adds	r3, #36	; 0x24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 f8fb 	bl	800ad28 <xTaskRemoveFromEventList>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d013      	beq.n	8009b60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b38:	4b3f      	ldr	r3, [pc, #252]	; (8009c38 <xQueueGenericSend+0x1f8>)
 8009b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	e00a      	b.n	8009b60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d007      	beq.n	8009b60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b50:	4b39      	ldr	r3, [pc, #228]	; (8009c38 <xQueueGenericSend+0x1f8>)
 8009b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b60:	f002 f830 	bl	800bbc4 <vPortExitCritical>
				return pdPASS;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e063      	b.n	8009c30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b6e:	f002 f829 	bl	800bbc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	e05c      	b.n	8009c30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d106      	bne.n	8009b8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b7c:	f107 0314 	add.w	r3, r7, #20
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 f935 	bl	800adf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b86:	2301      	movs	r3, #1
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b8a:	f002 f81b 	bl	800bbc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b8e:	f000 fea1 	bl	800a8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b92:	f001 ffe7 	bl	800bb64 <vPortEnterCritical>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b9c:	b25b      	sxtb	r3, r3
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba2:	d103      	bne.n	8009bac <xQueueGenericSend+0x16c>
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bb2:	b25b      	sxtb	r3, r3
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d103      	bne.n	8009bc2 <xQueueGenericSend+0x182>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bc2:	f001 ffff 	bl	800bbc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bc6:	1d3a      	adds	r2, r7, #4
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 f924 	bl	800ae1c <xTaskCheckForTimeOut>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d124      	bne.n	8009c24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bdc:	f000 faa2 	bl	800a124 <prvIsQueueFull>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d018      	beq.n	8009c18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	3310      	adds	r3, #16
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	4611      	mov	r1, r2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 f84a 	bl	800ac88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bf6:	f000 fa2d 	bl	800a054 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bfa:	f000 fe79 	bl	800a8f0 <xTaskResumeAll>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f47f af7c 	bne.w	8009afe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <xQueueGenericSend+0x1f8>)
 8009c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	e772      	b.n	8009afe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1a:	f000 fa1b 	bl	800a054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c1e:	f000 fe67 	bl	800a8f0 <xTaskResumeAll>
 8009c22:	e76c      	b.n	8009afe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c26:	f000 fa15 	bl	800a054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c2a:	f000 fe61 	bl	800a8f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3738      	adds	r7, #56	; 0x38
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b090      	sub	sp, #64	; 0x40
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d103      	bne.n	8009c78 <xQueueGenericSendFromISR+0x3c>
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <xQueueGenericSendFromISR+0x40>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e000      	b.n	8009c7e <xQueueGenericSendFromISR+0x42>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d103      	bne.n	8009ca6 <xQueueGenericSendFromISR+0x6a>
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <xQueueGenericSendFromISR+0x6e>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e000      	b.n	8009cac <xQueueGenericSendFromISR+0x70>
 8009caa:	2300      	movs	r3, #0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	623b      	str	r3, [r7, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cc6:	f002 f82f 	bl	800bd28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009cca:	f3ef 8211 	mrs	r2, BASEPRI
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	61fa      	str	r2, [r7, #28]
 8009ce0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ce4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d302      	bcc.n	8009cf8 <xQueueGenericSendFromISR+0xbc>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d12f      	bne.n	8009d58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d0e:	f000 f911 	bl	8009f34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d112      	bne.n	8009d42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d016      	beq.n	8009d52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	3324      	adds	r3, #36	; 0x24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fffd 	bl	800ad28 <xTaskRemoveFromEventList>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	e007      	b.n	8009d52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d46:	3301      	adds	r3, #1
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	b25a      	sxtb	r2, r3
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d52:	2301      	movs	r3, #1
 8009d54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009d56:	e001      	b.n	8009d5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3740      	adds	r7, #64	; 0x40
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08c      	sub	sp, #48	; 0x30
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d80:	2300      	movs	r3, #0
 8009d82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <xQueueReceive+0x30>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	623b      	str	r3, [r7, #32]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <xQueueReceive+0x3e>
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <xQueueReceive+0x42>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <xQueueReceive+0x44>
 8009db6:	2300      	movs	r3, #0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <xQueueReceive+0x5e>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	61fb      	str	r3, [r7, #28]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dd2:	f001 f96b 	bl	800b0ac <xTaskGetSchedulerState>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d102      	bne.n	8009de2 <xQueueReceive+0x6e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <xQueueReceive+0x72>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <xQueueReceive+0x74>
 8009de6:	2300      	movs	r3, #0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10a      	bne.n	8009e02 <xQueueReceive+0x8e>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	61bb      	str	r3, [r7, #24]
}
 8009dfe:	bf00      	nop
 8009e00:	e7fe      	b.n	8009e00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e02:	f001 feaf 	bl	800bb64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01f      	beq.n	8009e52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e12:	68b9      	ldr	r1, [r7, #8]
 8009e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e16:	f000 f8f7 	bl	800a008 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	1e5a      	subs	r2, r3, #1
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00f      	beq.n	8009e4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	3310      	adds	r3, #16
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 ff7a 	bl	800ad28 <xTaskRemoveFromEventList>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e3a:	4b3d      	ldr	r3, [pc, #244]	; (8009f30 <xQueueReceive+0x1bc>)
 8009e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e4a:	f001 febb 	bl	800bbc4 <vPortExitCritical>
				return pdPASS;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e069      	b.n	8009f26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e58:	f001 feb4 	bl	800bbc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e062      	b.n	8009f26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e66:	f107 0310 	add.w	r3, r7, #16
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 ffc0 	bl	800adf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e70:	2301      	movs	r3, #1
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e74:	f001 fea6 	bl	800bbc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e78:	f000 fd2c 	bl	800a8d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e7c:	f001 fe72 	bl	800bb64 <vPortEnterCritical>
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e86:	b25b      	sxtb	r3, r3
 8009e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8c:	d103      	bne.n	8009e96 <xQueueReceive+0x122>
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e9c:	b25b      	sxtb	r3, r3
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea2:	d103      	bne.n	8009eac <xQueueReceive+0x138>
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eac:	f001 fe8a 	bl	800bbc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eb0:	1d3a      	adds	r2, r7, #4
 8009eb2:	f107 0310 	add.w	r3, r7, #16
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 ffaf 	bl	800ae1c <xTaskCheckForTimeOut>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d123      	bne.n	8009f0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ec6:	f000 f917 	bl	800a0f8 <prvIsQueueEmpty>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d017      	beq.n	8009f00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fed5 	bl	800ac88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ee0:	f000 f8b8 	bl	800a054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ee4:	f000 fd04 	bl	800a8f0 <xTaskResumeAll>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d189      	bne.n	8009e02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009eee:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <xQueueReceive+0x1bc>)
 8009ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	e780      	b.n	8009e02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f02:	f000 f8a7 	bl	800a054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f06:	f000 fcf3 	bl	800a8f0 <xTaskResumeAll>
 8009f0a:	e77a      	b.n	8009e02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f0e:	f000 f8a1 	bl	800a054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f12:	f000 fced 	bl	800a8f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f18:	f000 f8ee 	bl	800a0f8 <prvIsQueueEmpty>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f af6f 	beq.w	8009e02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3730      	adds	r7, #48	; 0x30
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10d      	bne.n	8009f6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d14d      	bne.n	8009ff6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 f8c2 	bl	800b0e8 <xTaskPriorityDisinherit>
 8009f64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	609a      	str	r2, [r3, #8]
 8009f6c:	e043      	b.n	8009ff6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d119      	bne.n	8009fa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6858      	ldr	r0, [r3, #4]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	f003 fae3 	bl	800d54a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8c:	441a      	add	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d32b      	bcc.n	8009ff6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]
 8009fa6:	e026      	b.n	8009ff6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68d8      	ldr	r0, [r3, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	f003 fac9 	bl	800d54a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	68da      	ldr	r2, [r3, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc0:	425b      	negs	r3, r3
 8009fc2:	441a      	add	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d207      	bcs.n	8009fe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fdc:	425b      	negs	r3, r3
 8009fde:	441a      	add	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d105      	bne.n	8009ff6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ffe:	697b      	ldr	r3, [r7, #20]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	d018      	beq.n	800a04c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	441a      	add	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	429a      	cmp	r2, r3
 800a032:	d303      	bcc.n	800a03c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68d9      	ldr	r1, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a044:	461a      	mov	r2, r3
 800a046:	6838      	ldr	r0, [r7, #0]
 800a048:	f003 fa7f 	bl	800d54a <memcpy>
	}
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a05c:	f001 fd82 	bl	800bb64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a066:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a068:	e011      	b.n	800a08e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d012      	beq.n	800a098 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3324      	adds	r3, #36	; 0x24
 800a076:	4618      	mov	r0, r3
 800a078:	f000 fe56 	bl	800ad28 <xTaskRemoveFromEventList>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a082:	f000 ff2d 	bl	800aee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	3b01      	subs	r3, #1
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	dce9      	bgt.n	800a06a <prvUnlockQueue+0x16>
 800a096:	e000      	b.n	800a09a <prvUnlockQueue+0x46>
					break;
 800a098:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	22ff      	movs	r2, #255	; 0xff
 800a09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0a2:	f001 fd8f 	bl	800bbc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0a6:	f001 fd5d 	bl	800bb64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0b2:	e011      	b.n	800a0d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d012      	beq.n	800a0e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3310      	adds	r3, #16
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fe31 	bl	800ad28 <xTaskRemoveFromEventList>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0cc:	f000 ff08 	bl	800aee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dce9      	bgt.n	800a0b4 <prvUnlockQueue+0x60>
 800a0e0:	e000      	b.n	800a0e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	22ff      	movs	r2, #255	; 0xff
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0ec:	f001 fd6a 	bl	800bbc4 <vPortExitCritical>
}
 800a0f0:	bf00      	nop
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a100:	f001 fd30 	bl	800bb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	e001      	b.n	800a116 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a116:	f001 fd55 	bl	800bbc4 <vPortExitCritical>

	return xReturn;
 800a11a:	68fb      	ldr	r3, [r7, #12]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a12c:	f001 fd1a 	bl	800bb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a138:	429a      	cmp	r2, r3
 800a13a:	d102      	bne.n	800a142 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	e001      	b.n	800a146 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a142:	2300      	movs	r3, #0
 800a144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a146:	f001 fd3d 	bl	800bbc4 <vPortExitCritical>

	return xReturn;
 800a14a:	68fb      	ldr	r3, [r7, #12]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
 800a162:	e014      	b.n	800a18e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a164:	4a0f      	ldr	r2, [pc, #60]	; (800a1a4 <vQueueAddToRegistry+0x50>)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a170:	490c      	ldr	r1, [pc, #48]	; (800a1a4 <vQueueAddToRegistry+0x50>)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a17a:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <vQueueAddToRegistry+0x50>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4413      	add	r3, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a186:	e006      	b.n	800a196 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b07      	cmp	r3, #7
 800a192:	d9e7      	bls.n	800a164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000d8c 	.word	0x20000d8c

0800a1a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1b8:	f001 fcd4 	bl	800bb64 <vPortEnterCritical>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1c2:	b25b      	sxtb	r3, r3
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c8:	d103      	bne.n	800a1d2 <vQueueWaitForMessageRestricted+0x2a>
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d103      	bne.n	800a1e8 <vQueueWaitForMessageRestricted+0x40>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1e8:	f001 fcec 	bl	800bbc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	3324      	adds	r3, #36	; 0x24
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	68b9      	ldr	r1, [r7, #8]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 fd67 	bl	800acd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff ff26 	bl	800a054 <prvUnlockQueue>
	}
 800a208:	bf00      	nop
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08e      	sub	sp, #56	; 0x38
 800a214:	af04      	add	r7, sp, #16
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	623b      	str	r3, [r7, #32]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10a      	bne.n	800a256 <xTaskCreateStatic+0x46>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61fb      	str	r3, [r7, #28]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a256:	23a8      	movs	r3, #168	; 0xa8
 800a258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2ba8      	cmp	r3, #168	; 0xa8
 800a25e:	d00a      	beq.n	800a276 <xTaskCreateStatic+0x66>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	61bb      	str	r3, [r7, #24]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a276:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d01e      	beq.n	800a2bc <xTaskCreateStatic+0xac>
 800a27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01b      	beq.n	800a2bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a28c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	2202      	movs	r2, #2
 800a292:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a296:	2300      	movs	r3, #0
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	9302      	str	r3, [sp, #8]
 800a29e:	f107 0314 	add.w	r3, r7, #20
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f850 	bl	800a354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2b6:	f000 f8f3 	bl	800a4a0 <prvAddNewTaskToReadyList>
 800a2ba:	e001      	b.n	800a2c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2c0:	697b      	ldr	r3, [r7, #20]
	}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3728      	adds	r7, #40	; 0x28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b08c      	sub	sp, #48	; 0x30
 800a2ce:	af04      	add	r7, sp, #16
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	603b      	str	r3, [r7, #0]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 fd62 	bl	800bda8 <pvPortMalloc>
 800a2e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00e      	beq.n	800a30a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2ec:	20a8      	movs	r0, #168	; 0xa8
 800a2ee:	f001 fd5b 	bl	800bda8 <pvPortMalloc>
 800a2f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a300:	e005      	b.n	800a30e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a302:	6978      	ldr	r0, [r7, #20]
 800a304:	f001 fe1c 	bl	800bf40 <vPortFree>
 800a308:	e001      	b.n	800a30e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d017      	beq.n	800a344 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a31c:	88fa      	ldrh	r2, [r7, #6]
 800a31e:	2300      	movs	r3, #0
 800a320:	9303      	str	r3, [sp, #12]
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	9302      	str	r3, [sp, #8]
 800a326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f80e 	bl	800a354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a338:	69f8      	ldr	r0, [r7, #28]
 800a33a:	f000 f8b1 	bl	800a4a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a33e:	2301      	movs	r3, #1
 800a340:	61bb      	str	r3, [r7, #24]
 800a342:	e002      	b.n	800a34a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a344:	f04f 33ff 	mov.w	r3, #4294967295
 800a348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a34a:	69bb      	ldr	r3, [r7, #24]
	}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	461a      	mov	r2, r3
 800a36c:	21a5      	movs	r1, #165	; 0xa5
 800a36e:	f002 ffe6 	bl	800d33e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a37c:	3b01      	subs	r3, #1
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	f003 0307 	and.w	r3, r3, #7
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00a      	beq.n	800a3ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	617b      	str	r3, [r7, #20]
}
 800a3a8:	bf00      	nop
 800a3aa:	e7fe      	b.n	800a3aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01f      	beq.n	800a3f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	e012      	b.n	800a3de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	4413      	add	r3, r2
 800a3be:	7819      	ldrb	r1, [r3, #0]
 800a3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3334      	adds	r3, #52	; 0x34
 800a3c8:	460a      	mov	r2, r1
 800a3ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d006      	beq.n	800a3e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61fb      	str	r3, [r7, #28]
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	2b0f      	cmp	r3, #15
 800a3e2:	d9e9      	bls.n	800a3b8 <prvInitialiseNewTask+0x64>
 800a3e4:	e000      	b.n	800a3e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a3e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3f0:	e003      	b.n	800a3fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	2b37      	cmp	r3, #55	; 0x37
 800a3fe:	d901      	bls.n	800a404 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a400:	2337      	movs	r3, #55	; 0x37
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a408:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a40e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	2200      	movs	r2, #0
 800a414:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	3304      	adds	r3, #4
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff f978 	bl	8009710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	3318      	adds	r3, #24
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff f973 	bl	8009710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	2200      	movs	r2, #0
 800a444:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	3354      	adds	r3, #84	; 0x54
 800a454:	224c      	movs	r2, #76	; 0x4c
 800a456:	2100      	movs	r1, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f002 ff70 	bl	800d33e <memset>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	4a0c      	ldr	r2, [pc, #48]	; (800a494 <prvInitialiseNewTask+0x140>)
 800a462:	659a      	str	r2, [r3, #88]	; 0x58
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	4a0c      	ldr	r2, [pc, #48]	; (800a498 <prvInitialiseNewTask+0x144>)
 800a468:	65da      	str	r2, [r3, #92]	; 0x5c
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	4a0b      	ldr	r2, [pc, #44]	; (800a49c <prvInitialiseNewTask+0x148>)
 800a46e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	69b8      	ldr	r0, [r7, #24]
 800a476:	f001 fa47 	bl	800b908 <pxPortInitialiseStack>
 800a47a:	4602      	mov	r2, r0
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a48a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a48c:	bf00      	nop
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20001fe0 	.word	0x20001fe0
 800a498:	20002048 	.word	0x20002048
 800a49c:	200020b0 	.word	0x200020b0

0800a4a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4a8:	f001 fb5c 	bl	800bb64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4ac:	4b2d      	ldr	r3, [pc, #180]	; (800a564 <prvAddNewTaskToReadyList+0xc4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	4a2c      	ldr	r2, [pc, #176]	; (800a564 <prvAddNewTaskToReadyList+0xc4>)
 800a4b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4b6:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <prvAddNewTaskToReadyList+0xc8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d109      	bne.n	800a4d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4be:	4a2a      	ldr	r2, [pc, #168]	; (800a568 <prvAddNewTaskToReadyList+0xc8>)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4c4:	4b27      	ldr	r3, [pc, #156]	; (800a564 <prvAddNewTaskToReadyList+0xc4>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d110      	bne.n	800a4ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4cc:	f000 fd2c 	bl	800af28 <prvInitialiseTaskLists>
 800a4d0:	e00d      	b.n	800a4ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4d2:	4b26      	ldr	r3, [pc, #152]	; (800a56c <prvAddNewTaskToReadyList+0xcc>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d109      	bne.n	800a4ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4da:	4b23      	ldr	r3, [pc, #140]	; (800a568 <prvAddNewTaskToReadyList+0xc8>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d802      	bhi.n	800a4ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4e8:	4a1f      	ldr	r2, [pc, #124]	; (800a568 <prvAddNewTaskToReadyList+0xc8>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4ee:	4b20      	ldr	r3, [pc, #128]	; (800a570 <prvAddNewTaskToReadyList+0xd0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	4a1e      	ldr	r2, [pc, #120]	; (800a570 <prvAddNewTaskToReadyList+0xd0>)
 800a4f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a4f8:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <prvAddNewTaskToReadyList+0xd0>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a504:	4b1b      	ldr	r3, [pc, #108]	; (800a574 <prvAddNewTaskToReadyList+0xd4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d903      	bls.n	800a514 <prvAddNewTaskToReadyList+0x74>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	4a18      	ldr	r2, [pc, #96]	; (800a574 <prvAddNewTaskToReadyList+0xd4>)
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4a15      	ldr	r2, [pc, #84]	; (800a578 <prvAddNewTaskToReadyList+0xd8>)
 800a522:	441a      	add	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f7ff f8fd 	bl	800972a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a530:	f001 fb48 	bl	800bbc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a534:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <prvAddNewTaskToReadyList+0xcc>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00e      	beq.n	800a55a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <prvAddNewTaskToReadyList+0xc8>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a546:	429a      	cmp	r2, r3
 800a548:	d207      	bcs.n	800a55a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a54a:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <prvAddNewTaskToReadyList+0xdc>)
 800a54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	200012a0 	.word	0x200012a0
 800a568:	20000dcc 	.word	0x20000dcc
 800a56c:	200012ac 	.word	0x200012ac
 800a570:	200012bc 	.word	0x200012bc
 800a574:	200012a8 	.word	0x200012a8
 800a578:	20000dd0 	.word	0x20000dd0
 800a57c:	e000ed04 	.word	0xe000ed04

0800a580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d017      	beq.n	800a5c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a592:	4b13      	ldr	r3, [pc, #76]	; (800a5e0 <vTaskDelay+0x60>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <vTaskDelay+0x30>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	60bb      	str	r3, [r7, #8]
}
 800a5ac:	bf00      	nop
 800a5ae:	e7fe      	b.n	800a5ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5b0:	f000 f990 	bl	800a8d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fe04 	bl	800b1c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5bc:	f000 f998 	bl	800a8f0 <xTaskResumeAll>
 800a5c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d107      	bne.n	800a5d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a5c8:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <vTaskDelay+0x64>)
 800a5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5d8:	bf00      	nop
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	200012c8 	.word	0x200012c8
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a5f0:	f001 fab8 	bl	800bb64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d102      	bne.n	800a600 <vTaskSuspend+0x18>
 800a5fa:	4b30      	ldr	r3, [pc, #192]	; (800a6bc <vTaskSuspend+0xd4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	e000      	b.n	800a602 <vTaskSuspend+0x1a>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3304      	adds	r3, #4
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff f8eb 	bl	80097e4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3318      	adds	r3, #24
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff f8e2 	bl	80097e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3304      	adds	r3, #4
 800a624:	4619      	mov	r1, r3
 800a626:	4826      	ldr	r0, [pc, #152]	; (800a6c0 <vTaskSuspend+0xd8>)
 800a628:	f7ff f87f 	bl	800972a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b01      	cmp	r3, #1
 800a636:	d103      	bne.n	800a640 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a640:	f001 fac0 	bl	800bbc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a644:	4b1f      	ldr	r3, [pc, #124]	; (800a6c4 <vTaskSuspend+0xdc>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a64c:	f001 fa8a 	bl	800bb64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a650:	f000 fd0c 	bl	800b06c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a654:	f001 fab6 	bl	800bbc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a658:	4b18      	ldr	r3, [pc, #96]	; (800a6bc <vTaskSuspend+0xd4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d127      	bne.n	800a6b2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a662:	4b18      	ldr	r3, [pc, #96]	; (800a6c4 <vTaskSuspend+0xdc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d017      	beq.n	800a69a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a66a:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <vTaskSuspend+0xe0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <vTaskSuspend+0xa0>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	60bb      	str	r3, [r7, #8]
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a688:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <vTaskSuspend+0xe4>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a698:	e00b      	b.n	800a6b2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <vTaskSuspend+0xd8>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <vTaskSuspend+0xe8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d103      	bne.n	800a6ae <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a6a6:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <vTaskSuspend+0xd4>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
	}
 800a6ac:	e001      	b.n	800a6b2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a6ae:	f000 fa87 	bl	800abc0 <vTaskSwitchContext>
	}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000dcc 	.word	0x20000dcc
 800a6c0:	2000128c 	.word	0x2000128c
 800a6c4:	200012ac 	.word	0x200012ac
 800a6c8:	200012c8 	.word	0x200012c8
 800a6cc:	e000ed04 	.word	0xe000ed04
 800a6d0:	200012a0 	.word	0x200012a0

0800a6d4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	60fb      	str	r3, [r7, #12]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	4a0a      	ldr	r2, [pc, #40]	; (800a730 <prvTaskIsTaskSuspended+0x5c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d10a      	bne.n	800a720 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70e:	4a09      	ldr	r2, [pc, #36]	; (800a734 <prvTaskIsTaskSuspended+0x60>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d005      	beq.n	800a720 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a71c:	2301      	movs	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a720:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a722:	4618      	mov	r0, r3
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	2000128c 	.word	0x2000128c
 800a734:	20001260 	.word	0x20001260

0800a738 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <vTaskResume+0x28>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	60bb      	str	r3, [r7, #8]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a760:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <vTaskResume+0xac>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	429a      	cmp	r2, r3
 800a768:	d038      	beq.n	800a7dc <vTaskResume+0xa4>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d035      	beq.n	800a7dc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a770:	f001 f9f8 	bl	800bb64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7ff ffad 	bl	800a6d4 <prvTaskIsTaskSuspended>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d02b      	beq.n	800a7d8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3304      	adds	r3, #4
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff f82d 	bl	80097e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78e:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <vTaskResume+0xb0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	429a      	cmp	r2, r3
 800a794:	d903      	bls.n	800a79e <vTaskResume+0x66>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79a:	4a13      	ldr	r2, [pc, #76]	; (800a7e8 <vTaskResume+0xb0>)
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4a10      	ldr	r2, [pc, #64]	; (800a7ec <vTaskResume+0xb4>)
 800a7ac:	441a      	add	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7fe ffb8 	bl	800972a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <vTaskResume+0xac>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d307      	bcc.n	800a7d8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a7c8:	4b09      	ldr	r3, [pc, #36]	; (800a7f0 <vTaskResume+0xb8>)
 800a7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a7d8:	f001 f9f4 	bl	800bbc4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20000dcc 	.word	0x20000dcc
 800a7e8:	200012a8 	.word	0x200012a8
 800a7ec:	20000dd0 	.word	0x20000dd0
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08a      	sub	sp, #40	; 0x28
 800a7f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a802:	463a      	mov	r2, r7
 800a804:	1d39      	adds	r1, r7, #4
 800a806:	f107 0308 	add.w	r3, r7, #8
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fe ff2c 	bl	8009668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	9202      	str	r2, [sp, #8]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	2300      	movs	r3, #0
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	2300      	movs	r3, #0
 800a820:	460a      	mov	r2, r1
 800a822:	4924      	ldr	r1, [pc, #144]	; (800a8b4 <vTaskStartScheduler+0xc0>)
 800a824:	4824      	ldr	r0, [pc, #144]	; (800a8b8 <vTaskStartScheduler+0xc4>)
 800a826:	f7ff fcf3 	bl	800a210 <xTaskCreateStatic>
 800a82a:	4603      	mov	r3, r0
 800a82c:	4a23      	ldr	r2, [pc, #140]	; (800a8bc <vTaskStartScheduler+0xc8>)
 800a82e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a830:	4b22      	ldr	r3, [pc, #136]	; (800a8bc <vTaskStartScheduler+0xc8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a838:	2301      	movs	r3, #1
 800a83a:	617b      	str	r3, [r7, #20]
 800a83c:	e001      	b.n	800a842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a83e:	2300      	movs	r3, #0
 800a840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d102      	bne.n	800a84e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a848:	f000 fd10 	bl	800b26c <xTimerCreateTimerTask>
 800a84c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d11b      	bne.n	800a88c <vTaskStartScheduler+0x98>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	613b      	str	r3, [r7, #16]
}
 800a866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a868:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <vTaskStartScheduler+0xcc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3354      	adds	r3, #84	; 0x54
 800a86e:	4a15      	ldr	r2, [pc, #84]	; (800a8c4 <vTaskStartScheduler+0xd0>)
 800a870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <vTaskStartScheduler+0xd4>)
 800a874:	f04f 32ff 	mov.w	r2, #4294967295
 800a878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <vTaskStartScheduler+0xd8>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a880:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <vTaskStartScheduler+0xdc>)
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a886:	f001 f8cb 	bl	800ba20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a88a:	e00e      	b.n	800a8aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d10a      	bne.n	800a8aa <vTaskStartScheduler+0xb6>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	60fb      	str	r3, [r7, #12]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <vTaskStartScheduler+0xb4>
}
 800a8aa:	bf00      	nop
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	08010d40 	.word	0x08010d40
 800a8b8:	0800aef9 	.word	0x0800aef9
 800a8bc:	200012c4 	.word	0x200012c4
 800a8c0:	20000dcc 	.word	0x20000dcc
 800a8c4:	2000006c 	.word	0x2000006c
 800a8c8:	200012c0 	.word	0x200012c0
 800a8cc:	200012ac 	.word	0x200012ac
 800a8d0:	200012a4 	.word	0x200012a4

0800a8d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8d8:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <vTaskSuspendAll+0x18>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	4a03      	ldr	r2, [pc, #12]	; (800a8ec <vTaskSuspendAll+0x18>)
 800a8e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	200012c8 	.word	0x200012c8

0800a8f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8fe:	4b42      	ldr	r3, [pc, #264]	; (800aa08 <xTaskResumeAll+0x118>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xTaskResumeAll+0x2c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	603b      	str	r3, [r7, #0]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a91c:	f001 f922 	bl	800bb64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a920:	4b39      	ldr	r3, [pc, #228]	; (800aa08 <xTaskResumeAll+0x118>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3b01      	subs	r3, #1
 800a926:	4a38      	ldr	r2, [pc, #224]	; (800aa08 <xTaskResumeAll+0x118>)
 800a928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a92a:	4b37      	ldr	r3, [pc, #220]	; (800aa08 <xTaskResumeAll+0x118>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d162      	bne.n	800a9f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a932:	4b36      	ldr	r3, [pc, #216]	; (800aa0c <xTaskResumeAll+0x11c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d05e      	beq.n	800a9f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a93a:	e02f      	b.n	800a99c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93c:	4b34      	ldr	r3, [pc, #208]	; (800aa10 <xTaskResumeAll+0x120>)
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3318      	adds	r3, #24
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe ff4b 	bl	80097e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3304      	adds	r3, #4
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe ff46 	bl	80097e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95c:	4b2d      	ldr	r3, [pc, #180]	; (800aa14 <xTaskResumeAll+0x124>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d903      	bls.n	800a96c <xTaskResumeAll+0x7c>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a2a      	ldr	r2, [pc, #168]	; (800aa14 <xTaskResumeAll+0x124>)
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4a27      	ldr	r2, [pc, #156]	; (800aa18 <xTaskResumeAll+0x128>)
 800a97a:	441a      	add	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fe fed1 	bl	800972a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98c:	4b23      	ldr	r3, [pc, #140]	; (800aa1c <xTaskResumeAll+0x12c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	429a      	cmp	r2, r3
 800a994:	d302      	bcc.n	800a99c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a996:	4b22      	ldr	r3, [pc, #136]	; (800aa20 <xTaskResumeAll+0x130>)
 800a998:	2201      	movs	r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a99c:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <xTaskResumeAll+0x120>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1cb      	bne.n	800a93c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9aa:	f000 fb5f 	bl	800b06c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9ae:	4b1d      	ldr	r3, [pc, #116]	; (800aa24 <xTaskResumeAll+0x134>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d010      	beq.n	800a9dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9ba:	f000 f847 	bl	800aa4c <xTaskIncrementTick>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9c4:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <xTaskResumeAll+0x130>)
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f1      	bne.n	800a9ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9d6:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <xTaskResumeAll+0x134>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9dc:	4b10      	ldr	r3, [pc, #64]	; (800aa20 <xTaskResumeAll+0x130>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9e8:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <xTaskResumeAll+0x138>)
 800a9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9f8:	f001 f8e4 	bl	800bbc4 <vPortExitCritical>

	return xAlreadyYielded;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	200012c8 	.word	0x200012c8
 800aa0c:	200012a0 	.word	0x200012a0
 800aa10:	20001260 	.word	0x20001260
 800aa14:	200012a8 	.word	0x200012a8
 800aa18:	20000dd0 	.word	0x20000dd0
 800aa1c:	20000dcc 	.word	0x20000dcc
 800aa20:	200012b4 	.word	0x200012b4
 800aa24:	200012b0 	.word	0x200012b0
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <xTaskGetTickCount+0x1c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa38:	687b      	ldr	r3, [r7, #4]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	200012a4 	.word	0x200012a4

0800aa4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa56:	4b4f      	ldr	r3, [pc, #316]	; (800ab94 <xTaskIncrementTick+0x148>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 808f 	bne.w	800ab7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa60:	4b4d      	ldr	r3, [pc, #308]	; (800ab98 <xTaskIncrementTick+0x14c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa68:	4a4b      	ldr	r2, [pc, #300]	; (800ab98 <xTaskIncrementTick+0x14c>)
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d120      	bne.n	800aab6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa74:	4b49      	ldr	r3, [pc, #292]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <xTaskIncrementTick+0x48>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	603b      	str	r3, [r7, #0]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xTaskIncrementTick+0x46>
 800aa94:	4b41      	ldr	r3, [pc, #260]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	4b41      	ldr	r3, [pc, #260]	; (800aba0 <xTaskIncrementTick+0x154>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a3f      	ldr	r2, [pc, #252]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	4a3f      	ldr	r2, [pc, #252]	; (800aba0 <xTaskIncrementTick+0x154>)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	4b3e      	ldr	r3, [pc, #248]	; (800aba4 <xTaskIncrementTick+0x158>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	4a3d      	ldr	r2, [pc, #244]	; (800aba4 <xTaskIncrementTick+0x158>)
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	f000 fadb 	bl	800b06c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aab6:	4b3c      	ldr	r3, [pc, #240]	; (800aba8 <xTaskIncrementTick+0x15c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d349      	bcc.n	800ab54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac0:	4b36      	ldr	r3, [pc, #216]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaca:	4b37      	ldr	r3, [pc, #220]	; (800aba8 <xTaskIncrementTick+0x15c>)
 800aacc:	f04f 32ff 	mov.w	r2, #4294967295
 800aad0:	601a      	str	r2, [r3, #0]
					break;
 800aad2:	e03f      	b.n	800ab54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad4:	4b31      	ldr	r3, [pc, #196]	; (800ab9c <xTaskIncrementTick+0x150>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d203      	bcs.n	800aaf4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aaec:	4a2e      	ldr	r2, [pc, #184]	; (800aba8 <xTaskIncrementTick+0x15c>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaf2:	e02f      	b.n	800ab54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fe73 	bl	80097e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3318      	adds	r3, #24
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fe6a 	bl	80097e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	4b25      	ldr	r3, [pc, #148]	; (800abac <xTaskIncrementTick+0x160>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d903      	bls.n	800ab24 <xTaskIncrementTick+0xd8>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	4a22      	ldr	r2, [pc, #136]	; (800abac <xTaskIncrementTick+0x160>)
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4a1f      	ldr	r2, [pc, #124]	; (800abb0 <xTaskIncrementTick+0x164>)
 800ab32:	441a      	add	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	3304      	adds	r3, #4
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7fe fdf5 	bl	800972a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab44:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <xTaskIncrementTick+0x168>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d3b8      	bcc.n	800aac0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab52:	e7b5      	b.n	800aac0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab54:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <xTaskIncrementTick+0x168>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	4915      	ldr	r1, [pc, #84]	; (800abb0 <xTaskIncrementTick+0x164>)
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d901      	bls.n	800ab70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab70:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <xTaskIncrementTick+0x16c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]
 800ab7c:	e004      	b.n	800ab88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab7e:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <xTaskIncrementTick+0x170>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	4a0d      	ldr	r2, [pc, #52]	; (800abbc <xTaskIncrementTick+0x170>)
 800ab86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab88:	697b      	ldr	r3, [r7, #20]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	200012c8 	.word	0x200012c8
 800ab98:	200012a4 	.word	0x200012a4
 800ab9c:	20001258 	.word	0x20001258
 800aba0:	2000125c 	.word	0x2000125c
 800aba4:	200012b8 	.word	0x200012b8
 800aba8:	200012c0 	.word	0x200012c0
 800abac:	200012a8 	.word	0x200012a8
 800abb0:	20000dd0 	.word	0x20000dd0
 800abb4:	20000dcc 	.word	0x20000dcc
 800abb8:	200012b4 	.word	0x200012b4
 800abbc:	200012b0 	.word	0x200012b0

0800abc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abc6:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <vTaskSwitchContext+0xb0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abce:	4b29      	ldr	r3, [pc, #164]	; (800ac74 <vTaskSwitchContext+0xb4>)
 800abd0:	2201      	movs	r2, #1
 800abd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abd4:	e046      	b.n	800ac64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800abd6:	4b27      	ldr	r3, [pc, #156]	; (800ac74 <vTaskSwitchContext+0xb4>)
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abdc:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <vTaskSwitchContext+0xb8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	60fb      	str	r3, [r7, #12]
 800abe2:	e010      	b.n	800ac06 <vTaskSwitchContext+0x46>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <vTaskSwitchContext+0x40>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	607b      	str	r3, [r7, #4]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vTaskSwitchContext+0x3e>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	491d      	ldr	r1, [pc, #116]	; (800ac7c <vTaskSwitchContext+0xbc>)
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0e4      	beq.n	800abe4 <vTaskSwitchContext+0x24>
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <vTaskSwitchContext+0xbc>)
 800ac26:	4413      	add	r3, r2
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	605a      	str	r2, [r3, #4]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	3308      	adds	r3, #8
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d104      	bne.n	800ac4a <vTaskSwitchContext+0x8a>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	4a0b      	ldr	r2, [pc, #44]	; (800ac80 <vTaskSwitchContext+0xc0>)
 800ac52:	6013      	str	r3, [r2, #0]
 800ac54:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <vTaskSwitchContext+0xb8>)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <vTaskSwitchContext+0xc0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3354      	adds	r3, #84	; 0x54
 800ac60:	4a08      	ldr	r2, [pc, #32]	; (800ac84 <vTaskSwitchContext+0xc4>)
 800ac62:	6013      	str	r3, [r2, #0]
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	200012c8 	.word	0x200012c8
 800ac74:	200012b4 	.word	0x200012b4
 800ac78:	200012a8 	.word	0x200012a8
 800ac7c:	20000dd0 	.word	0x20000dd0
 800ac80:	20000dcc 	.word	0x20000dcc
 800ac84:	2000006c 	.word	0x2000006c

0800ac88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	f383 8811 	msr	BASEPRI, r3
 800aca0:	f3bf 8f6f 	isb	sy
 800aca4:	f3bf 8f4f 	dsb	sy
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acae:	4b07      	ldr	r3, [pc, #28]	; (800accc <vTaskPlaceOnEventList+0x44>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3318      	adds	r3, #24
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7fe fd5b 	bl	8009772 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acbc:	2101      	movs	r1, #1
 800acbe:	6838      	ldr	r0, [r7, #0]
 800acc0:	f000 fa80 	bl	800b1c4 <prvAddCurrentTaskToDelayedList>
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000dcc 	.word	0x20000dcc

0800acd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	617b      	str	r3, [r7, #20]
}
 800acf4:	bf00      	nop
 800acf6:	e7fe      	b.n	800acf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acf8:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <vTaskPlaceOnEventListRestricted+0x54>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3318      	adds	r3, #24
 800acfe:	4619      	mov	r1, r3
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7fe fd12 	bl	800972a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	68b8      	ldr	r0, [r7, #8]
 800ad16:	f000 fa55 	bl	800b1c4 <prvAddCurrentTaskToDelayedList>
	}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20000dcc 	.word	0x20000dcc

0800ad28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	3318      	adds	r3, #24
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fd43 	bl	80097e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5e:	4b1e      	ldr	r3, [pc, #120]	; (800add8 <xTaskRemoveFromEventList+0xb0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d11d      	bne.n	800ada2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe fd3a 	bl	80097e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad74:	4b19      	ldr	r3, [pc, #100]	; (800addc <xTaskRemoveFromEventList+0xb4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <xTaskRemoveFromEventList+0x5c>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4a16      	ldr	r2, [pc, #88]	; (800addc <xTaskRemoveFromEventList+0xb4>)
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <xTaskRemoveFromEventList+0xb8>)
 800ad92:	441a      	add	r2, r3
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fe fcc5 	bl	800972a <vListInsertEnd>
 800ada0:	e005      	b.n	800adae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3318      	adds	r3, #24
 800ada6:	4619      	mov	r1, r3
 800ada8:	480e      	ldr	r0, [pc, #56]	; (800ade4 <xTaskRemoveFromEventList+0xbc>)
 800adaa:	f7fe fcbe 	bl	800972a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <xTaskRemoveFromEventList+0xc0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb8:	429a      	cmp	r2, r3
 800adba:	d905      	bls.n	800adc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adbc:	2301      	movs	r3, #1
 800adbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <xTaskRemoveFromEventList+0xc4>)
 800adc2:	2201      	movs	r2, #1
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e001      	b.n	800adcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adcc:	697b      	ldr	r3, [r7, #20]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200012c8 	.word	0x200012c8
 800addc:	200012a8 	.word	0x200012a8
 800ade0:	20000dd0 	.word	0x20000dd0
 800ade4:	20001260 	.word	0x20001260
 800ade8:	20000dcc 	.word	0x20000dcc
 800adec:	200012b4 	.word	0x200012b4

0800adf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <vTaskInternalSetTimeOutState+0x24>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <vTaskInternalSetTimeOutState+0x28>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	605a      	str	r2, [r3, #4]
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	200012b8 	.word	0x200012b8
 800ae18:	200012a4 	.word	0x200012a4

0800ae1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10a      	bne.n	800ae42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	613b      	str	r3, [r7, #16]
}
 800ae3e:	bf00      	nop
 800ae40:	e7fe      	b.n	800ae40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	60fb      	str	r3, [r7, #12]
}
 800ae5a:	bf00      	nop
 800ae5c:	e7fe      	b.n	800ae5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae5e:	f000 fe81 	bl	800bb64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <xTaskCheckForTimeOut+0xbc>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	69ba      	ldr	r2, [r7, #24]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d102      	bne.n	800ae82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	e023      	b.n	800aeca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	4b15      	ldr	r3, [pc, #84]	; (800aedc <xTaskCheckForTimeOut+0xc0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d007      	beq.n	800ae9e <xTaskCheckForTimeOut+0x82>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d302      	bcc.n	800ae9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	61fb      	str	r3, [r7, #28]
 800ae9c:	e015      	b.n	800aeca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d20b      	bcs.n	800aec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ff9b 	bl	800adf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeba:	2300      	movs	r3, #0
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	e004      	b.n	800aeca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aeca:	f000 fe7b 	bl	800bbc4 <vPortExitCritical>

	return xReturn;
 800aece:	69fb      	ldr	r3, [r7, #28]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3720      	adds	r7, #32
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	200012a4 	.word	0x200012a4
 800aedc:	200012b8 	.word	0x200012b8

0800aee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aee0:	b480      	push	{r7}
 800aee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aee4:	4b03      	ldr	r3, [pc, #12]	; (800aef4 <vTaskMissedYield+0x14>)
 800aee6:	2201      	movs	r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
}
 800aeea:	bf00      	nop
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	200012b4 	.word	0x200012b4

0800aef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af00:	f000 f852 	bl	800afa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af04:	4b06      	ldr	r3, [pc, #24]	; (800af20 <prvIdleTask+0x28>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d9f9      	bls.n	800af00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af0c:	4b05      	ldr	r3, [pc, #20]	; (800af24 <prvIdleTask+0x2c>)
 800af0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af1c:	e7f0      	b.n	800af00 <prvIdleTask+0x8>
 800af1e:	bf00      	nop
 800af20:	20000dd0 	.word	0x20000dd0
 800af24:	e000ed04 	.word	0xe000ed04

0800af28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
 800af32:	e00c      	b.n	800af4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4a12      	ldr	r2, [pc, #72]	; (800af88 <prvInitialiseTaskLists+0x60>)
 800af40:	4413      	add	r3, r2
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fbc4 	bl	80096d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3301      	adds	r3, #1
 800af4c:	607b      	str	r3, [r7, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b37      	cmp	r3, #55	; 0x37
 800af52:	d9ef      	bls.n	800af34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af54:	480d      	ldr	r0, [pc, #52]	; (800af8c <prvInitialiseTaskLists+0x64>)
 800af56:	f7fe fbbb 	bl	80096d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af5a:	480d      	ldr	r0, [pc, #52]	; (800af90 <prvInitialiseTaskLists+0x68>)
 800af5c:	f7fe fbb8 	bl	80096d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af60:	480c      	ldr	r0, [pc, #48]	; (800af94 <prvInitialiseTaskLists+0x6c>)
 800af62:	f7fe fbb5 	bl	80096d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af66:	480c      	ldr	r0, [pc, #48]	; (800af98 <prvInitialiseTaskLists+0x70>)
 800af68:	f7fe fbb2 	bl	80096d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af6c:	480b      	ldr	r0, [pc, #44]	; (800af9c <prvInitialiseTaskLists+0x74>)
 800af6e:	f7fe fbaf 	bl	80096d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af72:	4b0b      	ldr	r3, [pc, #44]	; (800afa0 <prvInitialiseTaskLists+0x78>)
 800af74:	4a05      	ldr	r2, [pc, #20]	; (800af8c <prvInitialiseTaskLists+0x64>)
 800af76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <prvInitialiseTaskLists+0x7c>)
 800af7a:	4a05      	ldr	r2, [pc, #20]	; (800af90 <prvInitialiseTaskLists+0x68>)
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000dd0 	.word	0x20000dd0
 800af8c:	20001230 	.word	0x20001230
 800af90:	20001244 	.word	0x20001244
 800af94:	20001260 	.word	0x20001260
 800af98:	20001274 	.word	0x20001274
 800af9c:	2000128c 	.word	0x2000128c
 800afa0:	20001258 	.word	0x20001258
 800afa4:	2000125c 	.word	0x2000125c

0800afa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afae:	e019      	b.n	800afe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afb0:	f000 fdd8 	bl	800bb64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afb4:	4b10      	ldr	r3, [pc, #64]	; (800aff8 <prvCheckTasksWaitingTermination+0x50>)
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe fc0f 	bl	80097e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afc6:	4b0d      	ldr	r3, [pc, #52]	; (800affc <prvCheckTasksWaitingTermination+0x54>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3b01      	subs	r3, #1
 800afcc:	4a0b      	ldr	r2, [pc, #44]	; (800affc <prvCheckTasksWaitingTermination+0x54>)
 800afce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <prvCheckTasksWaitingTermination+0x58>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	4a0a      	ldr	r2, [pc, #40]	; (800b000 <prvCheckTasksWaitingTermination+0x58>)
 800afd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afda:	f000 fdf3 	bl	800bbc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f810 	bl	800b004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afe4:	4b06      	ldr	r3, [pc, #24]	; (800b000 <prvCheckTasksWaitingTermination+0x58>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e1      	bne.n	800afb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20001274 	.word	0x20001274
 800affc:	200012a0 	.word	0x200012a0
 800b000:	20001288 	.word	0x20001288

0800b004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3354      	adds	r3, #84	; 0x54
 800b010:	4618      	mov	r0, r3
 800b012:	f002 f9d1 	bl	800d3b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d108      	bne.n	800b032 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	4618      	mov	r0, r3
 800b026:	f000 ff8b 	bl	800bf40 <vPortFree>
				vPortFree( pxTCB );
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 ff88 	bl	800bf40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b030:	e018      	b.n	800b064 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d103      	bne.n	800b044 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 ff7f 	bl	800bf40 <vPortFree>
	}
 800b042:	e00f      	b.n	800b064 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d00a      	beq.n	800b064 <prvDeleteTCB+0x60>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	60fb      	str	r3, [r7, #12]
}
 800b060:	bf00      	nop
 800b062:	e7fe      	b.n	800b062 <prvDeleteTCB+0x5e>
	}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b072:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <prvResetNextTaskUnblockTime+0x38>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b07c:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b084:	e008      	b.n	800b098 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b086:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <prvResetNextTaskUnblockTime+0x38>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	4a04      	ldr	r2, [pc, #16]	; (800b0a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b096:	6013      	str	r3, [r2, #0]
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	20001258 	.word	0x20001258
 800b0a8:	200012c0 	.word	0x200012c0

0800b0ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <xTaskGetSchedulerState+0x34>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d102      	bne.n	800b0c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	607b      	str	r3, [r7, #4]
 800b0be:	e008      	b.n	800b0d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0c0:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <xTaskGetSchedulerState+0x38>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	607b      	str	r3, [r7, #4]
 800b0cc:	e001      	b.n	800b0d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0d2:	687b      	ldr	r3, [r7, #4]
	}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	200012ac 	.word	0x200012ac
 800b0e4:	200012c8 	.word	0x200012c8

0800b0e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d056      	beq.n	800b1ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0fe:	4b2e      	ldr	r3, [pc, #184]	; (800b1b8 <xTaskPriorityDisinherit+0xd0>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	429a      	cmp	r2, r3
 800b106:	d00a      	beq.n	800b11e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	60fb      	str	r3, [r7, #12]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	60bb      	str	r3, [r7, #8]
}
 800b138:	bf00      	nop
 800b13a:	e7fe      	b.n	800b13a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b140:	1e5a      	subs	r2, r3, #1
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14e:	429a      	cmp	r2, r3
 800b150:	d02c      	beq.n	800b1ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b156:	2b00      	cmp	r3, #0
 800b158:	d128      	bne.n	800b1ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fb40 	bl	80097e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <xTaskPriorityDisinherit+0xd4>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d903      	bls.n	800b18c <xTaskPriorityDisinherit+0xa4>
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	4a0c      	ldr	r2, [pc, #48]	; (800b1bc <xTaskPriorityDisinherit+0xd4>)
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <xTaskPriorityDisinherit+0xd8>)
 800b19a:	441a      	add	r2, r3
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f7fe fac1 	bl	800972a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1ac:	697b      	ldr	r3, [r7, #20]
	}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20000dcc 	.word	0x20000dcc
 800b1bc:	200012a8 	.word	0x200012a8
 800b1c0:	20000dd0 	.word	0x20000dd0

0800b1c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1ce:	4b21      	ldr	r3, [pc, #132]	; (800b254 <prvAddCurrentTaskToDelayedList+0x90>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1d4:	4b20      	ldr	r3, [pc, #128]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe fb02 	bl	80097e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d10a      	bne.n	800b1fe <prvAddCurrentTaskToDelayedList+0x3a>
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d007      	beq.n	800b1fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ee:	4b1a      	ldr	r3, [pc, #104]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4819      	ldr	r0, [pc, #100]	; (800b25c <prvAddCurrentTaskToDelayedList+0x98>)
 800b1f8:	f7fe fa97 	bl	800972a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1fc:	e026      	b.n	800b24c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b206:	4b14      	ldr	r3, [pc, #80]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	429a      	cmp	r2, r3
 800b214:	d209      	bcs.n	800b22a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b216:	4b12      	ldr	r3, [pc, #72]	; (800b260 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b0f      	ldr	r3, [pc, #60]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3304      	adds	r3, #4
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f7fe faa5 	bl	8009772 <vListInsert>
}
 800b228:	e010      	b.n	800b24c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b22a:	4b0e      	ldr	r3, [pc, #56]	; (800b264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <prvAddCurrentTaskToDelayedList+0x94>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe fa9b 	bl	8009772 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	429a      	cmp	r2, r3
 800b244:	d202      	bcs.n	800b24c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b246:	4a08      	ldr	r2, [pc, #32]	; (800b268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	6013      	str	r3, [r2, #0]
}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	200012a4 	.word	0x200012a4
 800b258:	20000dcc 	.word	0x20000dcc
 800b25c:	2000128c 	.word	0x2000128c
 800b260:	2000125c 	.word	0x2000125c
 800b264:	20001258 	.word	0x20001258
 800b268:	200012c0 	.word	0x200012c0

0800b26c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08a      	sub	sp, #40	; 0x28
 800b270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b272:	2300      	movs	r3, #0
 800b274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b276:	f000 fb07 	bl	800b888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b27a:	4b1c      	ldr	r3, [pc, #112]	; (800b2ec <xTimerCreateTimerTask+0x80>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d021      	beq.n	800b2c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b28a:	1d3a      	adds	r2, r7, #4
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	f107 030c 	add.w	r3, r7, #12
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe fa01 	bl	800969c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	9202      	str	r2, [sp, #8]
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	460a      	mov	r2, r1
 800b2ac:	4910      	ldr	r1, [pc, #64]	; (800b2f0 <xTimerCreateTimerTask+0x84>)
 800b2ae:	4811      	ldr	r0, [pc, #68]	; (800b2f4 <xTimerCreateTimerTask+0x88>)
 800b2b0:	f7fe ffae 	bl	800a210 <xTaskCreateStatic>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	4a10      	ldr	r2, [pc, #64]	; (800b2f8 <xTimerCreateTimerTask+0x8c>)
 800b2b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <xTimerCreateTimerTask+0x8c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	613b      	str	r3, [r7, #16]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b2e2:	697b      	ldr	r3, [r7, #20]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	200012fc 	.word	0x200012fc
 800b2f0:	08010d48 	.word	0x08010d48
 800b2f4:	0800b431 	.word	0x0800b431
 800b2f8:	20001300 	.word	0x20001300

0800b2fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b32a:	4b1a      	ldr	r3, [pc, #104]	; (800b394 <xTimerGenericCommand+0x98>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d02a      	beq.n	800b388 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b05      	cmp	r3, #5
 800b342:	dc18      	bgt.n	800b376 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b344:	f7ff feb2 	bl	800b0ac <xTaskGetSchedulerState>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d109      	bne.n	800b362 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b34e:	4b11      	ldr	r3, [pc, #68]	; (800b394 <xTimerGenericCommand+0x98>)
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f107 0110 	add.w	r1, r7, #16
 800b356:	2300      	movs	r3, #0
 800b358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35a:	f7fe fb71 	bl	8009a40 <xQueueGenericSend>
 800b35e:	6278      	str	r0, [r7, #36]	; 0x24
 800b360:	e012      	b.n	800b388 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b362:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <xTimerGenericCommand+0x98>)
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	f107 0110 	add.w	r1, r7, #16
 800b36a:	2300      	movs	r3, #0
 800b36c:	2200      	movs	r2, #0
 800b36e:	f7fe fb67 	bl	8009a40 <xQueueGenericSend>
 800b372:	6278      	str	r0, [r7, #36]	; 0x24
 800b374:	e008      	b.n	800b388 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b376:	4b07      	ldr	r3, [pc, #28]	; (800b394 <xTimerGenericCommand+0x98>)
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f107 0110 	add.w	r1, r7, #16
 800b37e:	2300      	movs	r3, #0
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	f7fe fc5b 	bl	8009c3c <xQueueGenericSendFromISR>
 800b386:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3728      	adds	r7, #40	; 0x28
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	200012fc 	.word	0x200012fc

0800b398 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a2:	4b22      	ldr	r3, [pc, #136]	; (800b42c <prvProcessExpiredTimer+0x94>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fa17 	bl	80097e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d022      	beq.n	800b40a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	699a      	ldr	r2, [r3, #24]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	18d1      	adds	r1, r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	6978      	ldr	r0, [r7, #20]
 800b3d2:	f000 f8d1 	bl	800b578 <prvInsertTimerInActiveList>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01f      	beq.n	800b41c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6978      	ldr	r0, [r7, #20]
 800b3e8:	f7ff ff88 	bl	800b2fc <xTimerGenericCommand>
 800b3ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d113      	bne.n	800b41c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	60fb      	str	r3, [r7, #12]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b410:	f023 0301 	bic.w	r3, r3, #1
 800b414:	b2da      	uxtb	r2, r3
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	6978      	ldr	r0, [r7, #20]
 800b422:	4798      	blx	r3
}
 800b424:	bf00      	nop
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	200012f4 	.word	0x200012f4

0800b430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 f857 	bl	800b4f0 <prvGetNextExpireTime>
 800b442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f803 	bl	800b454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b44e:	f000 f8d5 	bl	800b5fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b452:	e7f1      	b.n	800b438 <prvTimerTask+0x8>

0800b454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b45e:	f7ff fa39 	bl	800a8d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f866 	bl	800b538 <prvSampleTimeNow>
 800b46c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d130      	bne.n	800b4d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <prvProcessTimerOrBlockTask+0x3c>
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d806      	bhi.n	800b490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b482:	f7ff fa35 	bl	800a8f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff ff85 	bl	800b398 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b48e:	e024      	b.n	800b4da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d008      	beq.n	800b4a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b496:	4b13      	ldr	r3, [pc, #76]	; (800b4e4 <prvProcessTimerOrBlockTask+0x90>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <prvProcessTimerOrBlockTask+0x50>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e000      	b.n	800b4a6 <prvProcessTimerOrBlockTask+0x52>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <prvProcessTimerOrBlockTask+0x94>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f7fe fe77 	bl	800a1a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b4ba:	f7ff fa19 	bl	800a8f0 <xTaskResumeAll>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <prvProcessTimerOrBlockTask+0x98>)
 800b4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	f3bf 8f6f 	isb	sy
}
 800b4d4:	e001      	b.n	800b4da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b4d6:	f7ff fa0b 	bl	800a8f0 <xTaskResumeAll>
}
 800b4da:	bf00      	nop
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	200012f8 	.word	0x200012f8
 800b4e8:	200012fc 	.word	0x200012fc
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4f8:	4b0e      	ldr	r3, [pc, #56]	; (800b534 <prvGetNextExpireTime+0x44>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <prvGetNextExpireTime+0x16>
 800b502:	2201      	movs	r2, #1
 800b504:	e000      	b.n	800b508 <prvGetNextExpireTime+0x18>
 800b506:	2200      	movs	r2, #0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b514:	4b07      	ldr	r3, [pc, #28]	; (800b534 <prvGetNextExpireTime+0x44>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e001      	b.n	800b524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b524:	68fb      	ldr	r3, [r7, #12]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	200012f4 	.word	0x200012f4

0800b538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b540:	f7ff fa74 	bl	800aa2c <xTaskGetTickCount>
 800b544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <prvSampleTimeNow+0x3c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d205      	bcs.n	800b55c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b550:	f000 f936 	bl	800b7c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b562:	4a04      	ldr	r2, [pc, #16]	; (800b574 <prvSampleTimeNow+0x3c>)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b568:	68fb      	ldr	r3, [r7, #12]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20001304 	.word	0x20001304

0800b578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d812      	bhi.n	800b5c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d302      	bcc.n	800b5b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e01b      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b5b2:	4b10      	ldr	r3, [pc, #64]	; (800b5f4 <prvInsertTimerInActiveList+0x7c>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4610      	mov	r0, r2
 800b5be:	f7fe f8d8 	bl	8009772 <vListInsert>
 800b5c2:	e012      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d206      	bcs.n	800b5da <prvInsertTimerInActiveList+0x62>
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d302      	bcc.n	800b5da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	e007      	b.n	800b5ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5da:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <prvInsertTimerInActiveList+0x80>)
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	f7fe f8c4 	bl	8009772 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b5ea:	697b      	ldr	r3, [r7, #20]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	200012f8 	.word	0x200012f8
 800b5f8:	200012f4 	.word	0x200012f4

0800b5fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08e      	sub	sp, #56	; 0x38
 800b600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b602:	e0ca      	b.n	800b79a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	da18      	bge.n	800b63c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b60a:	1d3b      	adds	r3, r7, #4
 800b60c:	3304      	adds	r3, #4
 800b60e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10a      	bne.n	800b62c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	61fb      	str	r3, [r7, #28]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b632:	6850      	ldr	r0, [r2, #4]
 800b634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b636:	6892      	ldr	r2, [r2, #8]
 800b638:	4611      	mov	r1, r2
 800b63a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f2c0 80ab 	blt.w	800b79a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d004      	beq.n	800b65a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe f8c5 	bl	80097e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b65a:	463b      	mov	r3, r7
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff ff6b 	bl	800b538 <prvSampleTimeNow>
 800b662:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b09      	cmp	r3, #9
 800b668:	f200 8096 	bhi.w	800b798 <prvProcessReceivedCommands+0x19c>
 800b66c:	a201      	add	r2, pc, #4	; (adr r2, 800b674 <prvProcessReceivedCommands+0x78>)
 800b66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b672:	bf00      	nop
 800b674:	0800b69d 	.word	0x0800b69d
 800b678:	0800b69d 	.word	0x0800b69d
 800b67c:	0800b69d 	.word	0x0800b69d
 800b680:	0800b711 	.word	0x0800b711
 800b684:	0800b725 	.word	0x0800b725
 800b688:	0800b76f 	.word	0x0800b76f
 800b68c:	0800b69d 	.word	0x0800b69d
 800b690:	0800b69d 	.word	0x0800b69d
 800b694:	0800b711 	.word	0x0800b711
 800b698:	0800b725 	.word	0x0800b725
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6a2:	f043 0301 	orr.w	r3, r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	18d1      	adds	r1, r2, r3
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6bc:	f7ff ff5c 	bl	800b578 <prvInsertTimerInActiveList>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d069      	beq.n	800b79a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d05e      	beq.n	800b79a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ee:	f7ff fe05 	bl	800b2fc <xTimerGenericCommand>
 800b6f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d14f      	bne.n	800b79a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	61bb      	str	r3, [r7, #24]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b716:	f023 0301 	bic.w	r3, r3, #1
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b722:	e03a      	b.n	800b79a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b72a:	f043 0301 	orr.w	r3, r3, #1
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10a      	bne.n	800b75a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	617b      	str	r3, [r7, #20]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	699a      	ldr	r2, [r3, #24]
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	18d1      	adds	r1, r2, r3
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b768:	f7ff ff06 	bl	800b578 <prvInsertTimerInActiveList>
					break;
 800b76c:	e015      	b.n	800b79a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d103      	bne.n	800b784 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77e:	f000 fbdf 	bl	800bf40 <vPortFree>
 800b782:	e00a      	b.n	800b79a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b78a:	f023 0301 	bic.w	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b796:	e000      	b.n	800b79a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b79a:	4b08      	ldr	r3, [pc, #32]	; (800b7bc <prvProcessReceivedCommands+0x1c0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	1d39      	adds	r1, r7, #4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fae6 	bl	8009d74 <xQueueReceive>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f47f af2a 	bne.w	800b604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	3730      	adds	r7, #48	; 0x30
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	200012fc 	.word	0x200012fc

0800b7c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7c6:	e048      	b.n	800b85a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c8:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d2:	4b2b      	ldr	r3, [pc, #172]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fd ffff 	bl	80097e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d02e      	beq.n	800b85a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4413      	add	r3, r2
 800b804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d90e      	bls.n	800b82c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3304      	adds	r3, #4
 800b822:	4619      	mov	r1, r3
 800b824:	4610      	mov	r0, r2
 800b826:	f7fd ffa4 	bl	8009772 <vListInsert>
 800b82a:	e016      	b.n	800b85a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b82c:	2300      	movs	r3, #0
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	2300      	movs	r3, #0
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	2100      	movs	r1, #0
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f7ff fd60 	bl	800b2fc <xTimerGenericCommand>
 800b83c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	603b      	str	r3, [r7, #0]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b85a:	4b09      	ldr	r3, [pc, #36]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1b1      	bne.n	800b7c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b864:	4b06      	ldr	r3, [pc, #24]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b86a:	4b06      	ldr	r3, [pc, #24]	; (800b884 <prvSwitchTimerLists+0xc4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a04      	ldr	r2, [pc, #16]	; (800b880 <prvSwitchTimerLists+0xc0>)
 800b870:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b872:	4a04      	ldr	r2, [pc, #16]	; (800b884 <prvSwitchTimerLists+0xc4>)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	6013      	str	r3, [r2, #0]
}
 800b878:	bf00      	nop
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	200012f4 	.word	0x200012f4
 800b884:	200012f8 	.word	0x200012f8

0800b888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b88e:	f000 f969 	bl	800bb64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b892:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d120      	bne.n	800b8dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b89a:	4814      	ldr	r0, [pc, #80]	; (800b8ec <prvCheckForValidListAndQueue+0x64>)
 800b89c:	f7fd ff18 	bl	80096d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8a0:	4813      	ldr	r0, [pc, #76]	; (800b8f0 <prvCheckForValidListAndQueue+0x68>)
 800b8a2:	f7fd ff15 	bl	80096d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8a6:	4b13      	ldr	r3, [pc, #76]	; (800b8f4 <prvCheckForValidListAndQueue+0x6c>)
 800b8a8:	4a10      	ldr	r2, [pc, #64]	; (800b8ec <prvCheckForValidListAndQueue+0x64>)
 800b8aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8ac:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <prvCheckForValidListAndQueue+0x70>)
 800b8ae:	4a10      	ldr	r2, [pc, #64]	; (800b8f0 <prvCheckForValidListAndQueue+0x68>)
 800b8b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <prvCheckForValidListAndQueue+0x74>)
 800b8b8:	4a11      	ldr	r2, [pc, #68]	; (800b900 <prvCheckForValidListAndQueue+0x78>)
 800b8ba:	2110      	movs	r1, #16
 800b8bc:	200a      	movs	r0, #10
 800b8be:	f7fe f823 	bl	8009908 <xQueueGenericCreateStatic>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b8c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8c8:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d005      	beq.n	800b8dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <prvCheckForValidListAndQueue+0x60>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	490b      	ldr	r1, [pc, #44]	; (800b904 <prvCheckForValidListAndQueue+0x7c>)
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe fc3c 	bl	800a154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8dc:	f000 f972 	bl	800bbc4 <vPortExitCritical>
}
 800b8e0:	bf00      	nop
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	200012fc 	.word	0x200012fc
 800b8ec:	200012cc 	.word	0x200012cc
 800b8f0:	200012e0 	.word	0x200012e0
 800b8f4:	200012f4 	.word	0x200012f4
 800b8f8:	200012f8 	.word	0x200012f8
 800b8fc:	200013a8 	.word	0x200013a8
 800b900:	20001308 	.word	0x20001308
 800b904:	08010d50 	.word	0x08010d50

0800b908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3b04      	subs	r3, #4
 800b918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3b04      	subs	r3, #4
 800b926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f023 0201 	bic.w	r2, r3, #1
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3b04      	subs	r3, #4
 800b936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b938:	4a0c      	ldr	r2, [pc, #48]	; (800b96c <pxPortInitialiseStack+0x64>)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3b14      	subs	r3, #20
 800b942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3b04      	subs	r3, #4
 800b94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f06f 0202 	mvn.w	r2, #2
 800b956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3b20      	subs	r3, #32
 800b95c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b95e:	68fb      	ldr	r3, [r7, #12]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	0800b971 	.word	0x0800b971

0800b970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b97a:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <prvTaskExitError+0x54>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b982:	d00a      	beq.n	800b99a <prvTaskExitError+0x2a>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	60fb      	str	r3, [r7, #12]
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <prvTaskExitError+0x28>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	60bb      	str	r3, [r7, #8]
}
 800b9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9ae:	bf00      	nop
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0fc      	beq.n	800b9b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	20000010 	.word	0x20000010
	...

0800b9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <pxCurrentTCBConst2>)
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	6808      	ldr	r0, [r1, #0]
 800b9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	f380 8809 	msr	PSP, r0
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f04f 0000 	mov.w	r0, #0
 800b9e6:	f380 8811 	msr	BASEPRI, r0
 800b9ea:	4770      	bx	lr
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst2>:
 800b9f0:	20000dcc 	.word	0x20000dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop

0800b9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b9f8:	4808      	ldr	r0, [pc, #32]	; (800ba1c <prvPortStartFirstTask+0x24>)
 800b9fa:	6800      	ldr	r0, [r0, #0]
 800b9fc:	6800      	ldr	r0, [r0, #0]
 800b9fe:	f380 8808 	msr	MSP, r0
 800ba02:	f04f 0000 	mov.w	r0, #0
 800ba06:	f380 8814 	msr	CONTROL, r0
 800ba0a:	b662      	cpsie	i
 800ba0c:	b661      	cpsie	f
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	df00      	svc	0
 800ba18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba1a:	bf00      	nop
 800ba1c:	e000ed08 	.word	0xe000ed08

0800ba20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba26:	4b46      	ldr	r3, [pc, #280]	; (800bb40 <xPortStartScheduler+0x120>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a46      	ldr	r2, [pc, #280]	; (800bb44 <xPortStartScheduler+0x124>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10a      	bne.n	800ba46 <xPortStartScheduler+0x26>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	613b      	str	r3, [r7, #16]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba46:	4b3e      	ldr	r3, [pc, #248]	; (800bb40 <xPortStartScheduler+0x120>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a3f      	ldr	r2, [pc, #252]	; (800bb48 <xPortStartScheduler+0x128>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d10a      	bne.n	800ba66 <xPortStartScheduler+0x46>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	60fb      	str	r3, [r7, #12]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba66:	4b39      	ldr	r3, [pc, #228]	; (800bb4c <xPortStartScheduler+0x12c>)
 800ba68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	22ff      	movs	r2, #255	; 0xff
 800ba76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	4b31      	ldr	r3, [pc, #196]	; (800bb50 <xPortStartScheduler+0x130>)
 800ba8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba8e:	4b31      	ldr	r3, [pc, #196]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba90:	2207      	movs	r2, #7
 800ba92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba94:	e009      	b.n	800baaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba96:	4b2f      	ldr	r3, [pc, #188]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <xPortStartScheduler+0x134>)
 800ba9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baaa:	78fb      	ldrb	r3, [r7, #3]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab2:	2b80      	cmp	r3, #128	; 0x80
 800bab4:	d0ef      	beq.n	800ba96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <xPortStartScheduler+0x134>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f1c3 0307 	rsb	r3, r3, #7
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d00a      	beq.n	800bad8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	60bb      	str	r3, [r7, #8]
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bad8:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <xPortStartScheduler+0x134>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	4a1d      	ldr	r2, [pc, #116]	; (800bb54 <xPortStartScheduler+0x134>)
 800bae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bae2:	4b1c      	ldr	r3, [pc, #112]	; (800bb54 <xPortStartScheduler+0x134>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800baea:	4a1a      	ldr	r2, [pc, #104]	; (800bb54 <xPortStartScheduler+0x134>)
 800baec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baf6:	4b18      	ldr	r3, [pc, #96]	; (800bb58 <xPortStartScheduler+0x138>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <xPortStartScheduler+0x138>)
 800bafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb02:	4b15      	ldr	r3, [pc, #84]	; (800bb58 <xPortStartScheduler+0x138>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a14      	ldr	r2, [pc, #80]	; (800bb58 <xPortStartScheduler+0x138>)
 800bb08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb0e:	f000 f8dd 	bl	800bccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb12:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <xPortStartScheduler+0x13c>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb18:	f000 f8fc 	bl	800bd14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <xPortStartScheduler+0x140>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a0f      	ldr	r2, [pc, #60]	; (800bb60 <xPortStartScheduler+0x140>)
 800bb22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb28:	f7ff ff66 	bl	800b9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb2c:	f7ff f848 	bl	800abc0 <vTaskSwitchContext>
	prvTaskExitError();
 800bb30:	f7ff ff1e 	bl	800b970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	e000ed00 	.word	0xe000ed00
 800bb44:	410fc271 	.word	0x410fc271
 800bb48:	410fc270 	.word	0x410fc270
 800bb4c:	e000e400 	.word	0xe000e400
 800bb50:	200013f8 	.word	0x200013f8
 800bb54:	200013fc 	.word	0x200013fc
 800bb58:	e000ed20 	.word	0xe000ed20
 800bb5c:	20000010 	.word	0x20000010
 800bb60:	e000ef34 	.word	0xe000ef34

0800bb64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	607b      	str	r3, [r7, #4]
}
 800bb7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb7e:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a0d      	ldr	r2, [pc, #52]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb88:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <vPortEnterCritical+0x58>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d10f      	bne.n	800bbb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <vPortEnterCritical+0x5c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	603b      	str	r3, [r7, #0]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <vPortEnterCritical+0x4a>
	}
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20000010 	.word	0x20000010
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbca:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <vPortExitCritical+0x50>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <vPortExitCritical+0x24>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	607b      	str	r3, [r7, #4]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bbe8:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <vPortExitCritical+0x50>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4a09      	ldr	r2, [pc, #36]	; (800bc14 <vPortExitCritical+0x50>)
 800bbf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bbf2:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <vPortExitCritical+0x50>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <vPortExitCritical+0x42>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f383 8811 	msr	BASEPRI, r3
}
 800bc04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000010 	.word	0x20000010
	...

0800bc20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc20:	f3ef 8009 	mrs	r0, PSP
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	4b15      	ldr	r3, [pc, #84]	; (800bc80 <pxCurrentTCBConst>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	f01e 0f10 	tst.w	lr, #16
 800bc30:	bf08      	it	eq
 800bc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3a:	6010      	str	r0, [r2, #0]
 800bc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc44:	f380 8811 	msr	BASEPRI, r0
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f7fe ffb6 	bl	800abc0 <vTaskSwitchContext>
 800bc54:	f04f 0000 	mov.w	r0, #0
 800bc58:	f380 8811 	msr	BASEPRI, r0
 800bc5c:	bc09      	pop	{r0, r3}
 800bc5e:	6819      	ldr	r1, [r3, #0]
 800bc60:	6808      	ldr	r0, [r1, #0]
 800bc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc66:	f01e 0f10 	tst.w	lr, #16
 800bc6a:	bf08      	it	eq
 800bc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc70:	f380 8809 	msr	PSP, r0
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w

0800bc80 <pxCurrentTCBConst>:
 800bc80:	20000dcc 	.word	0x20000dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop

0800bc88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	607b      	str	r3, [r7, #4]
}
 800bca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bca2:	f7fe fed3 	bl	800aa4c <xTaskIncrementTick>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <xPortSysTickHandler+0x40>)
 800bcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f383 8811 	msr	BASEPRI, r3
}
 800bcbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <vPortSetupTimerInterrupt+0x38>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <vPortSetupTimerInterrupt+0x3c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a0a      	ldr	r2, [pc, #40]	; (800bd0c <vPortSetupTimerInterrupt+0x40>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	099b      	lsrs	r3, r3, #6
 800bce8:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <vPortSetupTimerInterrupt+0x44>)
 800bcea:	3b01      	subs	r3, #1
 800bcec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcee:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <vPortSetupTimerInterrupt+0x34>)
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	601a      	str	r2, [r3, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	e000e010 	.word	0xe000e010
 800bd04:	e000e018 	.word	0xe000e018
 800bd08:	20000004 	.word	0x20000004
 800bd0c:	10624dd3 	.word	0x10624dd3
 800bd10:	e000e014 	.word	0xe000e014

0800bd14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd24 <vPortEnableVFP+0x10>
 800bd18:	6801      	ldr	r1, [r0, #0]
 800bd1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd1e:	6001      	str	r1, [r0, #0]
 800bd20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd22:	bf00      	nop
 800bd24:	e000ed88 	.word	0xe000ed88

0800bd28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd2e:	f3ef 8305 	mrs	r3, IPSR
 800bd32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b0f      	cmp	r3, #15
 800bd38:	d914      	bls.n	800bd64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <vPortValidateInterruptPriority+0x70>)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd44:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <vPortValidateInterruptPriority+0x74>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	7afa      	ldrb	r2, [r7, #11]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d20a      	bcs.n	800bd64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
 800bd62:	e7fe      	b.n	800bd62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd64:	4b0e      	ldr	r3, [pc, #56]	; (800bda0 <vPortValidateInterruptPriority+0x78>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <vPortValidateInterruptPriority+0x7c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d90a      	bls.n	800bd8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	603b      	str	r3, [r7, #0]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <vPortValidateInterruptPriority+0x60>
	}
 800bd8a:	bf00      	nop
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	e000e3f0 	.word	0xe000e3f0
 800bd9c:	200013f8 	.word	0x200013f8
 800bda0:	e000ed0c 	.word	0xe000ed0c
 800bda4:	200013fc 	.word	0x200013fc

0800bda8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08a      	sub	sp, #40	; 0x28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdb4:	f7fe fd8e 	bl	800a8d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdb8:	4b5b      	ldr	r3, [pc, #364]	; (800bf28 <pvPortMalloc+0x180>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdc0:	f000 f920 	bl	800c004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdc4:	4b59      	ldr	r3, [pc, #356]	; (800bf2c <pvPortMalloc+0x184>)
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f040 8093 	bne.w	800bef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d01d      	beq.n	800be14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bdd8:	2208      	movs	r2, #8
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4413      	add	r3, r2
 800bdde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f003 0307 	and.w	r3, r3, #7
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d014      	beq.n	800be14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f023 0307 	bic.w	r3, r3, #7
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f003 0307 	and.w	r3, r3, #7
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <pvPortMalloc+0x6c>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	617b      	str	r3, [r7, #20]
}
 800be10:	bf00      	nop
 800be12:	e7fe      	b.n	800be12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d06e      	beq.n	800bef8 <pvPortMalloc+0x150>
 800be1a:	4b45      	ldr	r3, [pc, #276]	; (800bf30 <pvPortMalloc+0x188>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	429a      	cmp	r2, r3
 800be22:	d869      	bhi.n	800bef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be24:	4b43      	ldr	r3, [pc, #268]	; (800bf34 <pvPortMalloc+0x18c>)
 800be26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be28:	4b42      	ldr	r3, [pc, #264]	; (800bf34 <pvPortMalloc+0x18c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be2e:	e004      	b.n	800be3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <pvPortMalloc+0xa4>
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f1      	bne.n	800be30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be4c:	4b36      	ldr	r3, [pc, #216]	; (800bf28 <pvPortMalloc+0x180>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be52:	429a      	cmp	r2, r3
 800be54:	d050      	beq.n	800bef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2208      	movs	r2, #8
 800be5c:	4413      	add	r3, r2
 800be5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	1ad2      	subs	r2, r2, r3
 800be70:	2308      	movs	r3, #8
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	429a      	cmp	r2, r3
 800be76:	d91f      	bls.n	800beb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <pvPortMalloc+0xf8>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	613b      	str	r3, [r7, #16]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800beb2:	69b8      	ldr	r0, [r7, #24]
 800beb4:	f000 f908 	bl	800c0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800beb8:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <pvPortMalloc+0x188>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	4a1b      	ldr	r2, [pc, #108]	; (800bf30 <pvPortMalloc+0x188>)
 800bec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bec6:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <pvPortMalloc+0x188>)
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	4b1b      	ldr	r3, [pc, #108]	; (800bf38 <pvPortMalloc+0x190>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d203      	bcs.n	800beda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bed2:	4b17      	ldr	r3, [pc, #92]	; (800bf30 <pvPortMalloc+0x188>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a18      	ldr	r2, [pc, #96]	; (800bf38 <pvPortMalloc+0x190>)
 800bed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <pvPortMalloc+0x184>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	431a      	orrs	r2, r3
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800beee:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <pvPortMalloc+0x194>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3301      	adds	r3, #1
 800bef4:	4a11      	ldr	r2, [pc, #68]	; (800bf3c <pvPortMalloc+0x194>)
 800bef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bef8:	f7fe fcfa 	bl	800a8f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <pvPortMalloc+0x174>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	60fb      	str	r3, [r7, #12]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <pvPortMalloc+0x172>
	return pvReturn;
 800bf1c:	69fb      	ldr	r3, [r7, #28]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3728      	adds	r7, #40	; 0x28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20001fc0 	.word	0x20001fc0
 800bf2c:	20001fd4 	.word	0x20001fd4
 800bf30:	20001fc4 	.word	0x20001fc4
 800bf34:	20001fb8 	.word	0x20001fb8
 800bf38:	20001fc8 	.word	0x20001fc8
 800bf3c:	20001fcc 	.word	0x20001fcc

0800bf40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d04d      	beq.n	800bfee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf52:	2308      	movs	r3, #8
 800bf54:	425b      	negs	r3, r3
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	4413      	add	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	4b24      	ldr	r3, [pc, #144]	; (800bff8 <vPortFree+0xb8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d10a      	bne.n	800bf84 <vPortFree+0x44>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	60fb      	str	r3, [r7, #12]
}
 800bf80:	bf00      	nop
 800bf82:	e7fe      	b.n	800bf82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00a      	beq.n	800bfa2 <vPortFree+0x62>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	60bb      	str	r3, [r7, #8]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <vPortFree+0xb8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01e      	beq.n	800bfee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d11a      	bne.n	800bfee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4b0e      	ldr	r3, [pc, #56]	; (800bff8 <vPortFree+0xb8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	43db      	mvns	r3, r3
 800bfc2:	401a      	ands	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfc8:	f7fe fc84 	bl	800a8d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <vPortFree+0xbc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4a09      	ldr	r2, [pc, #36]	; (800bffc <vPortFree+0xbc>)
 800bfd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfda:	6938      	ldr	r0, [r7, #16]
 800bfdc:	f000 f874 	bl	800c0c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bfe0:	4b07      	ldr	r3, [pc, #28]	; (800c000 <vPortFree+0xc0>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	4a06      	ldr	r2, [pc, #24]	; (800c000 <vPortFree+0xc0>)
 800bfe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bfea:	f7fe fc81 	bl	800a8f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfee:	bf00      	nop
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20001fd4 	.word	0x20001fd4
 800bffc:	20001fc4 	.word	0x20001fc4
 800c000:	20001fd0 	.word	0x20001fd0

0800c004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c00a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c010:	4b27      	ldr	r3, [pc, #156]	; (800c0b0 <prvHeapInit+0xac>)
 800c012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f003 0307 	and.w	r3, r3, #7
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00c      	beq.n	800c038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3307      	adds	r3, #7
 800c022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f023 0307 	bic.w	r3, r3, #7
 800c02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	4a1f      	ldr	r2, [pc, #124]	; (800c0b0 <prvHeapInit+0xac>)
 800c034:	4413      	add	r3, r2
 800c036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c03c:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <prvHeapInit+0xb0>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c042:	4b1c      	ldr	r3, [pc, #112]	; (800c0b4 <prvHeapInit+0xb0>)
 800c044:	2200      	movs	r2, #0
 800c046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	4413      	add	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c050:	2208      	movs	r2, #8
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f023 0307 	bic.w	r3, r3, #7
 800c05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4a15      	ldr	r2, [pc, #84]	; (800c0b8 <prvHeapInit+0xb4>)
 800c064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <prvHeapInit+0xb4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2200      	movs	r2, #0
 800c06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c06e:	4b12      	ldr	r3, [pc, #72]	; (800c0b8 <prvHeapInit+0xb4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c084:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <prvHeapInit+0xb4>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	4a0a      	ldr	r2, [pc, #40]	; (800c0bc <prvHeapInit+0xb8>)
 800c092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	4a09      	ldr	r2, [pc, #36]	; (800c0c0 <prvHeapInit+0xbc>)
 800c09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c09c:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <prvHeapInit+0xc0>)
 800c09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0a2:	601a      	str	r2, [r3, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	20001400 	.word	0x20001400
 800c0b4:	20001fb8 	.word	0x20001fb8
 800c0b8:	20001fc0 	.word	0x20001fc0
 800c0bc:	20001fc8 	.word	0x20001fc8
 800c0c0:	20001fc4 	.word	0x20001fc4
 800c0c4:	20001fd4 	.word	0x20001fd4

0800c0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0d0:	4b28      	ldr	r3, [pc, #160]	; (800c174 <prvInsertBlockIntoFreeList+0xac>)
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e002      	b.n	800c0dc <prvInsertBlockIntoFreeList+0x14>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d8f7      	bhi.n	800c0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d108      	bne.n	800c10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	441a      	add	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	441a      	add	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d118      	bne.n	800c150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b15      	ldr	r3, [pc, #84]	; (800c178 <prvInsertBlockIntoFreeList+0xb0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	d00d      	beq.n	800c146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	441a      	add	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	e008      	b.n	800c158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c146:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <prvInsertBlockIntoFreeList+0xb0>)
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	601a      	str	r2, [r3, #0]
 800c14e:	e003      	b.n	800c158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d002      	beq.n	800c166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20001fb8 	.word	0x20001fb8
 800c178:	20001fc0 	.word	0x20001fc0

0800c17c <atoi>:
 800c17c:	220a      	movs	r2, #10
 800c17e:	2100      	movs	r1, #0
 800c180:	f000 b938 	b.w	800c3f4 <strtol>

0800c184 <malloc>:
 800c184:	4b02      	ldr	r3, [pc, #8]	; (800c190 <malloc+0xc>)
 800c186:	4601      	mov	r1, r0
 800c188:	6818      	ldr	r0, [r3, #0]
 800c18a:	f000 b823 	b.w	800c1d4 <_malloc_r>
 800c18e:	bf00      	nop
 800c190:	2000006c 	.word	0x2000006c

0800c194 <sbrk_aligned>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	4e0e      	ldr	r6, [pc, #56]	; (800c1d0 <sbrk_aligned+0x3c>)
 800c198:	460c      	mov	r4, r1
 800c19a:	6831      	ldr	r1, [r6, #0]
 800c19c:	4605      	mov	r5, r0
 800c19e:	b911      	cbnz	r1, 800c1a6 <sbrk_aligned+0x12>
 800c1a0:	f001 f984 	bl	800d4ac <_sbrk_r>
 800c1a4:	6030      	str	r0, [r6, #0]
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	f001 f97f 	bl	800d4ac <_sbrk_r>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	d00a      	beq.n	800c1c8 <sbrk_aligned+0x34>
 800c1b2:	1cc4      	adds	r4, r0, #3
 800c1b4:	f024 0403 	bic.w	r4, r4, #3
 800c1b8:	42a0      	cmp	r0, r4
 800c1ba:	d007      	beq.n	800c1cc <sbrk_aligned+0x38>
 800c1bc:	1a21      	subs	r1, r4, r0
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f001 f974 	bl	800d4ac <_sbrk_r>
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d101      	bne.n	800c1cc <sbrk_aligned+0x38>
 800c1c8:	f04f 34ff 	mov.w	r4, #4294967295
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	20001fdc 	.word	0x20001fdc

0800c1d4 <_malloc_r>:
 800c1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d8:	1ccd      	adds	r5, r1, #3
 800c1da:	f025 0503 	bic.w	r5, r5, #3
 800c1de:	3508      	adds	r5, #8
 800c1e0:	2d0c      	cmp	r5, #12
 800c1e2:	bf38      	it	cc
 800c1e4:	250c      	movcc	r5, #12
 800c1e6:	2d00      	cmp	r5, #0
 800c1e8:	4607      	mov	r7, r0
 800c1ea:	db01      	blt.n	800c1f0 <_malloc_r+0x1c>
 800c1ec:	42a9      	cmp	r1, r5
 800c1ee:	d905      	bls.n	800c1fc <_malloc_r+0x28>
 800c1f0:	230c      	movs	r3, #12
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	2600      	movs	r6, #0
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c2d0 <_malloc_r+0xfc>
 800c200:	f000 f868 	bl	800c2d4 <__malloc_lock>
 800c204:	f8d8 3000 	ldr.w	r3, [r8]
 800c208:	461c      	mov	r4, r3
 800c20a:	bb5c      	cbnz	r4, 800c264 <_malloc_r+0x90>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4638      	mov	r0, r7
 800c210:	f7ff ffc0 	bl	800c194 <sbrk_aligned>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	4604      	mov	r4, r0
 800c218:	d155      	bne.n	800c2c6 <_malloc_r+0xf2>
 800c21a:	f8d8 4000 	ldr.w	r4, [r8]
 800c21e:	4626      	mov	r6, r4
 800c220:	2e00      	cmp	r6, #0
 800c222:	d145      	bne.n	800c2b0 <_malloc_r+0xdc>
 800c224:	2c00      	cmp	r4, #0
 800c226:	d048      	beq.n	800c2ba <_malloc_r+0xe6>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	4631      	mov	r1, r6
 800c22c:	4638      	mov	r0, r7
 800c22e:	eb04 0903 	add.w	r9, r4, r3
 800c232:	f001 f93b 	bl	800d4ac <_sbrk_r>
 800c236:	4581      	cmp	r9, r0
 800c238:	d13f      	bne.n	800c2ba <_malloc_r+0xe6>
 800c23a:	6821      	ldr	r1, [r4, #0]
 800c23c:	1a6d      	subs	r5, r5, r1
 800c23e:	4629      	mov	r1, r5
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff ffa7 	bl	800c194 <sbrk_aligned>
 800c246:	3001      	adds	r0, #1
 800c248:	d037      	beq.n	800c2ba <_malloc_r+0xe6>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	442b      	add	r3, r5
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	f8d8 3000 	ldr.w	r3, [r8]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d038      	beq.n	800c2ca <_malloc_r+0xf6>
 800c258:	685a      	ldr	r2, [r3, #4]
 800c25a:	42a2      	cmp	r2, r4
 800c25c:	d12b      	bne.n	800c2b6 <_malloc_r+0xe2>
 800c25e:	2200      	movs	r2, #0
 800c260:	605a      	str	r2, [r3, #4]
 800c262:	e00f      	b.n	800c284 <_malloc_r+0xb0>
 800c264:	6822      	ldr	r2, [r4, #0]
 800c266:	1b52      	subs	r2, r2, r5
 800c268:	d41f      	bmi.n	800c2aa <_malloc_r+0xd6>
 800c26a:	2a0b      	cmp	r2, #11
 800c26c:	d917      	bls.n	800c29e <_malloc_r+0xca>
 800c26e:	1961      	adds	r1, r4, r5
 800c270:	42a3      	cmp	r3, r4
 800c272:	6025      	str	r5, [r4, #0]
 800c274:	bf18      	it	ne
 800c276:	6059      	strne	r1, [r3, #4]
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	bf08      	it	eq
 800c27c:	f8c8 1000 	streq.w	r1, [r8]
 800c280:	5162      	str	r2, [r4, r5]
 800c282:	604b      	str	r3, [r1, #4]
 800c284:	4638      	mov	r0, r7
 800c286:	f104 060b 	add.w	r6, r4, #11
 800c28a:	f000 f829 	bl	800c2e0 <__malloc_unlock>
 800c28e:	f026 0607 	bic.w	r6, r6, #7
 800c292:	1d23      	adds	r3, r4, #4
 800c294:	1af2      	subs	r2, r6, r3
 800c296:	d0ae      	beq.n	800c1f6 <_malloc_r+0x22>
 800c298:	1b9b      	subs	r3, r3, r6
 800c29a:	50a3      	str	r3, [r4, r2]
 800c29c:	e7ab      	b.n	800c1f6 <_malloc_r+0x22>
 800c29e:	42a3      	cmp	r3, r4
 800c2a0:	6862      	ldr	r2, [r4, #4]
 800c2a2:	d1dd      	bne.n	800c260 <_malloc_r+0x8c>
 800c2a4:	f8c8 2000 	str.w	r2, [r8]
 800c2a8:	e7ec      	b.n	800c284 <_malloc_r+0xb0>
 800c2aa:	4623      	mov	r3, r4
 800c2ac:	6864      	ldr	r4, [r4, #4]
 800c2ae:	e7ac      	b.n	800c20a <_malloc_r+0x36>
 800c2b0:	4634      	mov	r4, r6
 800c2b2:	6876      	ldr	r6, [r6, #4]
 800c2b4:	e7b4      	b.n	800c220 <_malloc_r+0x4c>
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	e7cc      	b.n	800c254 <_malloc_r+0x80>
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	603b      	str	r3, [r7, #0]
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f000 f80e 	bl	800c2e0 <__malloc_unlock>
 800c2c4:	e797      	b.n	800c1f6 <_malloc_r+0x22>
 800c2c6:	6025      	str	r5, [r4, #0]
 800c2c8:	e7dc      	b.n	800c284 <_malloc_r+0xb0>
 800c2ca:	605b      	str	r3, [r3, #4]
 800c2cc:	deff      	udf	#255	; 0xff
 800c2ce:	bf00      	nop
 800c2d0:	20001fd8 	.word	0x20001fd8

0800c2d4 <__malloc_lock>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__malloc_lock+0x8>)
 800c2d6:	f001 b936 	b.w	800d546 <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	20002120 	.word	0x20002120

0800c2e0 <__malloc_unlock>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__malloc_unlock+0x8>)
 800c2e2:	f001 b931 	b.w	800d548 <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	20002120 	.word	0x20002120

0800c2ec <_strtol_l.constprop.0>:
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f2:	d001      	beq.n	800c2f8 <_strtol_l.constprop.0+0xc>
 800c2f4:	2b24      	cmp	r3, #36	; 0x24
 800c2f6:	d906      	bls.n	800c306 <_strtol_l.constprop.0+0x1a>
 800c2f8:	f001 f8fa 	bl	800d4f0 <__errno>
 800c2fc:	2316      	movs	r3, #22
 800c2fe:	6003      	str	r3, [r0, #0]
 800c300:	2000      	movs	r0, #0
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c3ec <_strtol_l.constprop.0+0x100>
 800c30a:	460d      	mov	r5, r1
 800c30c:	462e      	mov	r6, r5
 800c30e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c312:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c316:	f017 0708 	ands.w	r7, r7, #8
 800c31a:	d1f7      	bne.n	800c30c <_strtol_l.constprop.0+0x20>
 800c31c:	2c2d      	cmp	r4, #45	; 0x2d
 800c31e:	d132      	bne.n	800c386 <_strtol_l.constprop.0+0x9a>
 800c320:	782c      	ldrb	r4, [r5, #0]
 800c322:	2701      	movs	r7, #1
 800c324:	1cb5      	adds	r5, r6, #2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d05b      	beq.n	800c3e2 <_strtol_l.constprop.0+0xf6>
 800c32a:	2b10      	cmp	r3, #16
 800c32c:	d109      	bne.n	800c342 <_strtol_l.constprop.0+0x56>
 800c32e:	2c30      	cmp	r4, #48	; 0x30
 800c330:	d107      	bne.n	800c342 <_strtol_l.constprop.0+0x56>
 800c332:	782c      	ldrb	r4, [r5, #0]
 800c334:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c338:	2c58      	cmp	r4, #88	; 0x58
 800c33a:	d14d      	bne.n	800c3d8 <_strtol_l.constprop.0+0xec>
 800c33c:	786c      	ldrb	r4, [r5, #1]
 800c33e:	2310      	movs	r3, #16
 800c340:	3502      	adds	r5, #2
 800c342:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c346:	f108 38ff 	add.w	r8, r8, #4294967295
 800c34a:	f04f 0e00 	mov.w	lr, #0
 800c34e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c352:	4676      	mov	r6, lr
 800c354:	fb03 8a19 	mls	sl, r3, r9, r8
 800c358:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c35c:	f1bc 0f09 	cmp.w	ip, #9
 800c360:	d816      	bhi.n	800c390 <_strtol_l.constprop.0+0xa4>
 800c362:	4664      	mov	r4, ip
 800c364:	42a3      	cmp	r3, r4
 800c366:	dd24      	ble.n	800c3b2 <_strtol_l.constprop.0+0xc6>
 800c368:	f1be 3fff 	cmp.w	lr, #4294967295
 800c36c:	d008      	beq.n	800c380 <_strtol_l.constprop.0+0x94>
 800c36e:	45b1      	cmp	r9, r6
 800c370:	d31c      	bcc.n	800c3ac <_strtol_l.constprop.0+0xc0>
 800c372:	d101      	bne.n	800c378 <_strtol_l.constprop.0+0x8c>
 800c374:	45a2      	cmp	sl, r4
 800c376:	db19      	blt.n	800c3ac <_strtol_l.constprop.0+0xc0>
 800c378:	fb06 4603 	mla	r6, r6, r3, r4
 800c37c:	f04f 0e01 	mov.w	lr, #1
 800c380:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c384:	e7e8      	b.n	800c358 <_strtol_l.constprop.0+0x6c>
 800c386:	2c2b      	cmp	r4, #43	; 0x2b
 800c388:	bf04      	itt	eq
 800c38a:	782c      	ldrbeq	r4, [r5, #0]
 800c38c:	1cb5      	addeq	r5, r6, #2
 800c38e:	e7ca      	b.n	800c326 <_strtol_l.constprop.0+0x3a>
 800c390:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c394:	f1bc 0f19 	cmp.w	ip, #25
 800c398:	d801      	bhi.n	800c39e <_strtol_l.constprop.0+0xb2>
 800c39a:	3c37      	subs	r4, #55	; 0x37
 800c39c:	e7e2      	b.n	800c364 <_strtol_l.constprop.0+0x78>
 800c39e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c3a2:	f1bc 0f19 	cmp.w	ip, #25
 800c3a6:	d804      	bhi.n	800c3b2 <_strtol_l.constprop.0+0xc6>
 800c3a8:	3c57      	subs	r4, #87	; 0x57
 800c3aa:	e7db      	b.n	800c364 <_strtol_l.constprop.0+0x78>
 800c3ac:	f04f 3eff 	mov.w	lr, #4294967295
 800c3b0:	e7e6      	b.n	800c380 <_strtol_l.constprop.0+0x94>
 800c3b2:	f1be 3fff 	cmp.w	lr, #4294967295
 800c3b6:	d105      	bne.n	800c3c4 <_strtol_l.constprop.0+0xd8>
 800c3b8:	2322      	movs	r3, #34	; 0x22
 800c3ba:	6003      	str	r3, [r0, #0]
 800c3bc:	4646      	mov	r6, r8
 800c3be:	b942      	cbnz	r2, 800c3d2 <_strtol_l.constprop.0+0xe6>
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	e79e      	b.n	800c302 <_strtol_l.constprop.0+0x16>
 800c3c4:	b107      	cbz	r7, 800c3c8 <_strtol_l.constprop.0+0xdc>
 800c3c6:	4276      	negs	r6, r6
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	d0f9      	beq.n	800c3c0 <_strtol_l.constprop.0+0xd4>
 800c3cc:	f1be 0f00 	cmp.w	lr, #0
 800c3d0:	d000      	beq.n	800c3d4 <_strtol_l.constprop.0+0xe8>
 800c3d2:	1e69      	subs	r1, r5, #1
 800c3d4:	6011      	str	r1, [r2, #0]
 800c3d6:	e7f3      	b.n	800c3c0 <_strtol_l.constprop.0+0xd4>
 800c3d8:	2430      	movs	r4, #48	; 0x30
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1b1      	bne.n	800c342 <_strtol_l.constprop.0+0x56>
 800c3de:	2308      	movs	r3, #8
 800c3e0:	e7af      	b.n	800c342 <_strtol_l.constprop.0+0x56>
 800c3e2:	2c30      	cmp	r4, #48	; 0x30
 800c3e4:	d0a5      	beq.n	800c332 <_strtol_l.constprop.0+0x46>
 800c3e6:	230a      	movs	r3, #10
 800c3e8:	e7ab      	b.n	800c342 <_strtol_l.constprop.0+0x56>
 800c3ea:	bf00      	nop
 800c3ec:	08010e31 	.word	0x08010e31

0800c3f0 <_strtol_r>:
 800c3f0:	f7ff bf7c 	b.w	800c2ec <_strtol_l.constprop.0>

0800c3f4 <strtol>:
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	460a      	mov	r2, r1
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	4802      	ldr	r0, [pc, #8]	; (800c404 <strtol+0x10>)
 800c3fc:	6800      	ldr	r0, [r0, #0]
 800c3fe:	f7ff bf75 	b.w	800c2ec <_strtol_l.constprop.0>
 800c402:	bf00      	nop
 800c404:	2000006c 	.word	0x2000006c

0800c408 <__cvt>:
 800c408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c40c:	ec55 4b10 	vmov	r4, r5, d0
 800c410:	2d00      	cmp	r5, #0
 800c412:	460e      	mov	r6, r1
 800c414:	4619      	mov	r1, r3
 800c416:	462b      	mov	r3, r5
 800c418:	bfbb      	ittet	lt
 800c41a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c41e:	461d      	movlt	r5, r3
 800c420:	2300      	movge	r3, #0
 800c422:	232d      	movlt	r3, #45	; 0x2d
 800c424:	700b      	strb	r3, [r1, #0]
 800c426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c42c:	4691      	mov	r9, r2
 800c42e:	f023 0820 	bic.w	r8, r3, #32
 800c432:	bfbc      	itt	lt
 800c434:	4622      	movlt	r2, r4
 800c436:	4614      	movlt	r4, r2
 800c438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c43c:	d005      	beq.n	800c44a <__cvt+0x42>
 800c43e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c442:	d100      	bne.n	800c446 <__cvt+0x3e>
 800c444:	3601      	adds	r6, #1
 800c446:	2102      	movs	r1, #2
 800c448:	e000      	b.n	800c44c <__cvt+0x44>
 800c44a:	2103      	movs	r1, #3
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	ab02      	add	r3, sp, #8
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	ec45 4b10 	vmov	d0, r4, r5
 800c458:	4653      	mov	r3, sl
 800c45a:	4632      	mov	r2, r6
 800c45c:	f001 f914 	bl	800d688 <_dtoa_r>
 800c460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c464:	4607      	mov	r7, r0
 800c466:	d102      	bne.n	800c46e <__cvt+0x66>
 800c468:	f019 0f01 	tst.w	r9, #1
 800c46c:	d022      	beq.n	800c4b4 <__cvt+0xac>
 800c46e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c472:	eb07 0906 	add.w	r9, r7, r6
 800c476:	d110      	bne.n	800c49a <__cvt+0x92>
 800c478:	783b      	ldrb	r3, [r7, #0]
 800c47a:	2b30      	cmp	r3, #48	; 0x30
 800c47c:	d10a      	bne.n	800c494 <__cvt+0x8c>
 800c47e:	2200      	movs	r2, #0
 800c480:	2300      	movs	r3, #0
 800c482:	4620      	mov	r0, r4
 800c484:	4629      	mov	r1, r5
 800c486:	f7f4 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c48a:	b918      	cbnz	r0, 800c494 <__cvt+0x8c>
 800c48c:	f1c6 0601 	rsb	r6, r6, #1
 800c490:	f8ca 6000 	str.w	r6, [sl]
 800c494:	f8da 3000 	ldr.w	r3, [sl]
 800c498:	4499      	add	r9, r3
 800c49a:	2200      	movs	r2, #0
 800c49c:	2300      	movs	r3, #0
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7f4 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4a6:	b108      	cbz	r0, 800c4ac <__cvt+0xa4>
 800c4a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4ac:	2230      	movs	r2, #48	; 0x30
 800c4ae:	9b03      	ldr	r3, [sp, #12]
 800c4b0:	454b      	cmp	r3, r9
 800c4b2:	d307      	bcc.n	800c4c4 <__cvt+0xbc>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4b8:	1bdb      	subs	r3, r3, r7
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	b004      	add	sp, #16
 800c4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c4:	1c59      	adds	r1, r3, #1
 800c4c6:	9103      	str	r1, [sp, #12]
 800c4c8:	701a      	strb	r2, [r3, #0]
 800c4ca:	e7f0      	b.n	800c4ae <__cvt+0xa6>

0800c4cc <__exponent>:
 800c4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	bfb8      	it	lt
 800c4d4:	4249      	neglt	r1, r1
 800c4d6:	f803 2b02 	strb.w	r2, [r3], #2
 800c4da:	bfb4      	ite	lt
 800c4dc:	222d      	movlt	r2, #45	; 0x2d
 800c4de:	222b      	movge	r2, #43	; 0x2b
 800c4e0:	2909      	cmp	r1, #9
 800c4e2:	7042      	strb	r2, [r0, #1]
 800c4e4:	dd2a      	ble.n	800c53c <__exponent+0x70>
 800c4e6:	f10d 0207 	add.w	r2, sp, #7
 800c4ea:	4617      	mov	r7, r2
 800c4ec:	260a      	movs	r6, #10
 800c4ee:	4694      	mov	ip, r2
 800c4f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c4f4:	fb06 1415 	mls	r4, r6, r5, r1
 800c4f8:	3430      	adds	r4, #48	; 0x30
 800c4fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c4fe:	460c      	mov	r4, r1
 800c500:	2c63      	cmp	r4, #99	; 0x63
 800c502:	f102 32ff 	add.w	r2, r2, #4294967295
 800c506:	4629      	mov	r1, r5
 800c508:	dcf1      	bgt.n	800c4ee <__exponent+0x22>
 800c50a:	3130      	adds	r1, #48	; 0x30
 800c50c:	f1ac 0402 	sub.w	r4, ip, #2
 800c510:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c514:	1c41      	adds	r1, r0, #1
 800c516:	4622      	mov	r2, r4
 800c518:	42ba      	cmp	r2, r7
 800c51a:	d30a      	bcc.n	800c532 <__exponent+0x66>
 800c51c:	f10d 0209 	add.w	r2, sp, #9
 800c520:	eba2 020c 	sub.w	r2, r2, ip
 800c524:	42bc      	cmp	r4, r7
 800c526:	bf88      	it	hi
 800c528:	2200      	movhi	r2, #0
 800c52a:	4413      	add	r3, r2
 800c52c:	1a18      	subs	r0, r3, r0
 800c52e:	b003      	add	sp, #12
 800c530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c532:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c536:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c53a:	e7ed      	b.n	800c518 <__exponent+0x4c>
 800c53c:	2330      	movs	r3, #48	; 0x30
 800c53e:	3130      	adds	r1, #48	; 0x30
 800c540:	7083      	strb	r3, [r0, #2]
 800c542:	70c1      	strb	r1, [r0, #3]
 800c544:	1d03      	adds	r3, r0, #4
 800c546:	e7f1      	b.n	800c52c <__exponent+0x60>

0800c548 <_printf_float>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	ed2d 8b02 	vpush	{d8}
 800c550:	b08d      	sub	sp, #52	; 0x34
 800c552:	460c      	mov	r4, r1
 800c554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c558:	4616      	mov	r6, r2
 800c55a:	461f      	mov	r7, r3
 800c55c:	4605      	mov	r5, r0
 800c55e:	f000 ff17 	bl	800d390 <_localeconv_r>
 800c562:	f8d0 a000 	ldr.w	sl, [r0]
 800c566:	4650      	mov	r0, sl
 800c568:	f7f3 fe82 	bl	8000270 <strlen>
 800c56c:	2300      	movs	r3, #0
 800c56e:	930a      	str	r3, [sp, #40]	; 0x28
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	9305      	str	r3, [sp, #20]
 800c574:	f8d8 3000 	ldr.w	r3, [r8]
 800c578:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c57c:	3307      	adds	r3, #7
 800c57e:	f023 0307 	bic.w	r3, r3, #7
 800c582:	f103 0208 	add.w	r2, r3, #8
 800c586:	f8c8 2000 	str.w	r2, [r8]
 800c58a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c58e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c592:	9307      	str	r3, [sp, #28]
 800c594:	f8cd 8018 	str.w	r8, [sp, #24]
 800c598:	ee08 0a10 	vmov	s16, r0
 800c59c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c5a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a4:	4b9e      	ldr	r3, [pc, #632]	; (800c820 <_printf_float+0x2d8>)
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5aa:	f7f4 fabf 	bl	8000b2c <__aeabi_dcmpun>
 800c5ae:	bb88      	cbnz	r0, 800c614 <_printf_float+0xcc>
 800c5b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5b4:	4b9a      	ldr	r3, [pc, #616]	; (800c820 <_printf_float+0x2d8>)
 800c5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ba:	f7f4 fa99 	bl	8000af0 <__aeabi_dcmple>
 800c5be:	bb48      	cbnz	r0, 800c614 <_printf_float+0xcc>
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	f7f4 fa88 	bl	8000adc <__aeabi_dcmplt>
 800c5cc:	b110      	cbz	r0, 800c5d4 <_printf_float+0x8c>
 800c5ce:	232d      	movs	r3, #45	; 0x2d
 800c5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d4:	4a93      	ldr	r2, [pc, #588]	; (800c824 <_printf_float+0x2dc>)
 800c5d6:	4b94      	ldr	r3, [pc, #592]	; (800c828 <_printf_float+0x2e0>)
 800c5d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c5dc:	bf94      	ite	ls
 800c5de:	4690      	movls	r8, r2
 800c5e0:	4698      	movhi	r8, r3
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	6123      	str	r3, [r4, #16]
 800c5e6:	9b05      	ldr	r3, [sp, #20]
 800c5e8:	f023 0304 	bic.w	r3, r3, #4
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	f04f 0900 	mov.w	r9, #0
 800c5f2:	9700      	str	r7, [sp, #0]
 800c5f4:	4633      	mov	r3, r6
 800c5f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f000 f9da 	bl	800c9b4 <_printf_common>
 800c600:	3001      	adds	r0, #1
 800c602:	f040 8090 	bne.w	800c726 <_printf_float+0x1de>
 800c606:	f04f 30ff 	mov.w	r0, #4294967295
 800c60a:	b00d      	add	sp, #52	; 0x34
 800c60c:	ecbd 8b02 	vpop	{d8}
 800c610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c614:	4642      	mov	r2, r8
 800c616:	464b      	mov	r3, r9
 800c618:	4640      	mov	r0, r8
 800c61a:	4649      	mov	r1, r9
 800c61c:	f7f4 fa86 	bl	8000b2c <__aeabi_dcmpun>
 800c620:	b140      	cbz	r0, 800c634 <_printf_float+0xec>
 800c622:	464b      	mov	r3, r9
 800c624:	2b00      	cmp	r3, #0
 800c626:	bfbc      	itt	lt
 800c628:	232d      	movlt	r3, #45	; 0x2d
 800c62a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c62e:	4a7f      	ldr	r2, [pc, #508]	; (800c82c <_printf_float+0x2e4>)
 800c630:	4b7f      	ldr	r3, [pc, #508]	; (800c830 <_printf_float+0x2e8>)
 800c632:	e7d1      	b.n	800c5d8 <_printf_float+0x90>
 800c634:	6863      	ldr	r3, [r4, #4]
 800c636:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c63a:	9206      	str	r2, [sp, #24]
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	d13f      	bne.n	800c6c0 <_printf_float+0x178>
 800c640:	2306      	movs	r3, #6
 800c642:	6063      	str	r3, [r4, #4]
 800c644:	9b05      	ldr	r3, [sp, #20]
 800c646:	6861      	ldr	r1, [r4, #4]
 800c648:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c64c:	2300      	movs	r3, #0
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	ab0a      	add	r3, sp, #40	; 0x28
 800c652:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c656:	ab09      	add	r3, sp, #36	; 0x24
 800c658:	ec49 8b10 	vmov	d0, r8, r9
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	6022      	str	r2, [r4, #0]
 800c660:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c664:	4628      	mov	r0, r5
 800c666:	f7ff fecf 	bl	800c408 <__cvt>
 800c66a:	9b06      	ldr	r3, [sp, #24]
 800c66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c66e:	2b47      	cmp	r3, #71	; 0x47
 800c670:	4680      	mov	r8, r0
 800c672:	d108      	bne.n	800c686 <_printf_float+0x13e>
 800c674:	1cc8      	adds	r0, r1, #3
 800c676:	db02      	blt.n	800c67e <_printf_float+0x136>
 800c678:	6863      	ldr	r3, [r4, #4]
 800c67a:	4299      	cmp	r1, r3
 800c67c:	dd41      	ble.n	800c702 <_printf_float+0x1ba>
 800c67e:	f1ab 0302 	sub.w	r3, fp, #2
 800c682:	fa5f fb83 	uxtb.w	fp, r3
 800c686:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c68a:	d820      	bhi.n	800c6ce <_printf_float+0x186>
 800c68c:	3901      	subs	r1, #1
 800c68e:	465a      	mov	r2, fp
 800c690:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c694:	9109      	str	r1, [sp, #36]	; 0x24
 800c696:	f7ff ff19 	bl	800c4cc <__exponent>
 800c69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c69c:	1813      	adds	r3, r2, r0
 800c69e:	2a01      	cmp	r2, #1
 800c6a0:	4681      	mov	r9, r0
 800c6a2:	6123      	str	r3, [r4, #16]
 800c6a4:	dc02      	bgt.n	800c6ac <_printf_float+0x164>
 800c6a6:	6822      	ldr	r2, [r4, #0]
 800c6a8:	07d2      	lsls	r2, r2, #31
 800c6aa:	d501      	bpl.n	800c6b0 <_printf_float+0x168>
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	6123      	str	r3, [r4, #16]
 800c6b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d09c      	beq.n	800c5f2 <_printf_float+0xaa>
 800c6b8:	232d      	movs	r3, #45	; 0x2d
 800c6ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6be:	e798      	b.n	800c5f2 <_printf_float+0xaa>
 800c6c0:	9a06      	ldr	r2, [sp, #24]
 800c6c2:	2a47      	cmp	r2, #71	; 0x47
 800c6c4:	d1be      	bne.n	800c644 <_printf_float+0xfc>
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1bc      	bne.n	800c644 <_printf_float+0xfc>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e7b9      	b.n	800c642 <_printf_float+0xfa>
 800c6ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c6d2:	d118      	bne.n	800c706 <_printf_float+0x1be>
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	6863      	ldr	r3, [r4, #4]
 800c6d8:	dd0b      	ble.n	800c6f2 <_printf_float+0x1aa>
 800c6da:	6121      	str	r1, [r4, #16]
 800c6dc:	b913      	cbnz	r3, 800c6e4 <_printf_float+0x19c>
 800c6de:	6822      	ldr	r2, [r4, #0]
 800c6e0:	07d0      	lsls	r0, r2, #31
 800c6e2:	d502      	bpl.n	800c6ea <_printf_float+0x1a2>
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	440b      	add	r3, r1
 800c6e8:	6123      	str	r3, [r4, #16]
 800c6ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6ec:	f04f 0900 	mov.w	r9, #0
 800c6f0:	e7de      	b.n	800c6b0 <_printf_float+0x168>
 800c6f2:	b913      	cbnz	r3, 800c6fa <_printf_float+0x1b2>
 800c6f4:	6822      	ldr	r2, [r4, #0]
 800c6f6:	07d2      	lsls	r2, r2, #31
 800c6f8:	d501      	bpl.n	800c6fe <_printf_float+0x1b6>
 800c6fa:	3302      	adds	r3, #2
 800c6fc:	e7f4      	b.n	800c6e8 <_printf_float+0x1a0>
 800c6fe:	2301      	movs	r3, #1
 800c700:	e7f2      	b.n	800c6e8 <_printf_float+0x1a0>
 800c702:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c708:	4299      	cmp	r1, r3
 800c70a:	db05      	blt.n	800c718 <_printf_float+0x1d0>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	6121      	str	r1, [r4, #16]
 800c710:	07d8      	lsls	r0, r3, #31
 800c712:	d5ea      	bpl.n	800c6ea <_printf_float+0x1a2>
 800c714:	1c4b      	adds	r3, r1, #1
 800c716:	e7e7      	b.n	800c6e8 <_printf_float+0x1a0>
 800c718:	2900      	cmp	r1, #0
 800c71a:	bfd4      	ite	le
 800c71c:	f1c1 0202 	rsble	r2, r1, #2
 800c720:	2201      	movgt	r2, #1
 800c722:	4413      	add	r3, r2
 800c724:	e7e0      	b.n	800c6e8 <_printf_float+0x1a0>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	055a      	lsls	r2, r3, #21
 800c72a:	d407      	bmi.n	800c73c <_printf_float+0x1f4>
 800c72c:	6923      	ldr	r3, [r4, #16]
 800c72e:	4642      	mov	r2, r8
 800c730:	4631      	mov	r1, r6
 800c732:	4628      	mov	r0, r5
 800c734:	47b8      	blx	r7
 800c736:	3001      	adds	r0, #1
 800c738:	d12c      	bne.n	800c794 <_printf_float+0x24c>
 800c73a:	e764      	b.n	800c606 <_printf_float+0xbe>
 800c73c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c740:	f240 80e0 	bls.w	800c904 <_printf_float+0x3bc>
 800c744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c748:	2200      	movs	r2, #0
 800c74a:	2300      	movs	r3, #0
 800c74c:	f7f4 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c750:	2800      	cmp	r0, #0
 800c752:	d034      	beq.n	800c7be <_printf_float+0x276>
 800c754:	4a37      	ldr	r2, [pc, #220]	; (800c834 <_printf_float+0x2ec>)
 800c756:	2301      	movs	r3, #1
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	f43f af51 	beq.w	800c606 <_printf_float+0xbe>
 800c764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c768:	429a      	cmp	r2, r3
 800c76a:	db02      	blt.n	800c772 <_printf_float+0x22a>
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	07d8      	lsls	r0, r3, #31
 800c770:	d510      	bpl.n	800c794 <_printf_float+0x24c>
 800c772:	ee18 3a10 	vmov	r3, s16
 800c776:	4652      	mov	r2, sl
 800c778:	4631      	mov	r1, r6
 800c77a:	4628      	mov	r0, r5
 800c77c:	47b8      	blx	r7
 800c77e:	3001      	adds	r0, #1
 800c780:	f43f af41 	beq.w	800c606 <_printf_float+0xbe>
 800c784:	f04f 0800 	mov.w	r8, #0
 800c788:	f104 091a 	add.w	r9, r4, #26
 800c78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78e:	3b01      	subs	r3, #1
 800c790:	4543      	cmp	r3, r8
 800c792:	dc09      	bgt.n	800c7a8 <_printf_float+0x260>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	079b      	lsls	r3, r3, #30
 800c798:	f100 8107 	bmi.w	800c9aa <_printf_float+0x462>
 800c79c:	68e0      	ldr	r0, [r4, #12]
 800c79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a0:	4298      	cmp	r0, r3
 800c7a2:	bfb8      	it	lt
 800c7a4:	4618      	movlt	r0, r3
 800c7a6:	e730      	b.n	800c60a <_printf_float+0xc2>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	464a      	mov	r2, r9
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	47b8      	blx	r7
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	f43f af27 	beq.w	800c606 <_printf_float+0xbe>
 800c7b8:	f108 0801 	add.w	r8, r8, #1
 800c7bc:	e7e6      	b.n	800c78c <_printf_float+0x244>
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	dc39      	bgt.n	800c838 <_printf_float+0x2f0>
 800c7c4:	4a1b      	ldr	r2, [pc, #108]	; (800c834 <_printf_float+0x2ec>)
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	47b8      	blx	r7
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	f43f af19 	beq.w	800c606 <_printf_float+0xbe>
 800c7d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	d102      	bne.n	800c7e2 <_printf_float+0x29a>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	07d9      	lsls	r1, r3, #31
 800c7e0:	d5d8      	bpl.n	800c794 <_printf_float+0x24c>
 800c7e2:	ee18 3a10 	vmov	r3, s16
 800c7e6:	4652      	mov	r2, sl
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	47b8      	blx	r7
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	f43f af09 	beq.w	800c606 <_printf_float+0xbe>
 800c7f4:	f04f 0900 	mov.w	r9, #0
 800c7f8:	f104 0a1a 	add.w	sl, r4, #26
 800c7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fe:	425b      	negs	r3, r3
 800c800:	454b      	cmp	r3, r9
 800c802:	dc01      	bgt.n	800c808 <_printf_float+0x2c0>
 800c804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c806:	e792      	b.n	800c72e <_printf_float+0x1e6>
 800c808:	2301      	movs	r3, #1
 800c80a:	4652      	mov	r2, sl
 800c80c:	4631      	mov	r1, r6
 800c80e:	4628      	mov	r0, r5
 800c810:	47b8      	blx	r7
 800c812:	3001      	adds	r0, #1
 800c814:	f43f aef7 	beq.w	800c606 <_printf_float+0xbe>
 800c818:	f109 0901 	add.w	r9, r9, #1
 800c81c:	e7ee      	b.n	800c7fc <_printf_float+0x2b4>
 800c81e:	bf00      	nop
 800c820:	7fefffff 	.word	0x7fefffff
 800c824:	08010f31 	.word	0x08010f31
 800c828:	08010f35 	.word	0x08010f35
 800c82c:	08010f39 	.word	0x08010f39
 800c830:	08010f3d 	.word	0x08010f3d
 800c834:	08010f41 	.word	0x08010f41
 800c838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c83a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c83c:	429a      	cmp	r2, r3
 800c83e:	bfa8      	it	ge
 800c840:	461a      	movge	r2, r3
 800c842:	2a00      	cmp	r2, #0
 800c844:	4691      	mov	r9, r2
 800c846:	dc37      	bgt.n	800c8b8 <_printf_float+0x370>
 800c848:	f04f 0b00 	mov.w	fp, #0
 800c84c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c850:	f104 021a 	add.w	r2, r4, #26
 800c854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c856:	9305      	str	r3, [sp, #20]
 800c858:	eba3 0309 	sub.w	r3, r3, r9
 800c85c:	455b      	cmp	r3, fp
 800c85e:	dc33      	bgt.n	800c8c8 <_printf_float+0x380>
 800c860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c864:	429a      	cmp	r2, r3
 800c866:	db3b      	blt.n	800c8e0 <_printf_float+0x398>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	07da      	lsls	r2, r3, #31
 800c86c:	d438      	bmi.n	800c8e0 <_printf_float+0x398>
 800c86e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c872:	eba2 0903 	sub.w	r9, r2, r3
 800c876:	9b05      	ldr	r3, [sp, #20]
 800c878:	1ad2      	subs	r2, r2, r3
 800c87a:	4591      	cmp	r9, r2
 800c87c:	bfa8      	it	ge
 800c87e:	4691      	movge	r9, r2
 800c880:	f1b9 0f00 	cmp.w	r9, #0
 800c884:	dc35      	bgt.n	800c8f2 <_printf_float+0x3aa>
 800c886:	f04f 0800 	mov.w	r8, #0
 800c88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c88e:	f104 0a1a 	add.w	sl, r4, #26
 800c892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c896:	1a9b      	subs	r3, r3, r2
 800c898:	eba3 0309 	sub.w	r3, r3, r9
 800c89c:	4543      	cmp	r3, r8
 800c89e:	f77f af79 	ble.w	800c794 <_printf_float+0x24c>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	4652      	mov	r2, sl
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	47b8      	blx	r7
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	f43f aeaa 	beq.w	800c606 <_printf_float+0xbe>
 800c8b2:	f108 0801 	add.w	r8, r8, #1
 800c8b6:	e7ec      	b.n	800c892 <_printf_float+0x34a>
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4642      	mov	r2, r8
 800c8be:	4628      	mov	r0, r5
 800c8c0:	47b8      	blx	r7
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d1c0      	bne.n	800c848 <_printf_float+0x300>
 800c8c6:	e69e      	b.n	800c606 <_printf_float+0xbe>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	9205      	str	r2, [sp, #20]
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	f43f ae97 	beq.w	800c606 <_printf_float+0xbe>
 800c8d8:	9a05      	ldr	r2, [sp, #20]
 800c8da:	f10b 0b01 	add.w	fp, fp, #1
 800c8de:	e7b9      	b.n	800c854 <_printf_float+0x30c>
 800c8e0:	ee18 3a10 	vmov	r3, s16
 800c8e4:	4652      	mov	r2, sl
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	47b8      	blx	r7
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	d1be      	bne.n	800c86e <_printf_float+0x326>
 800c8f0:	e689      	b.n	800c606 <_printf_float+0xbe>
 800c8f2:	9a05      	ldr	r2, [sp, #20]
 800c8f4:	464b      	mov	r3, r9
 800c8f6:	4442      	add	r2, r8
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	47b8      	blx	r7
 800c8fe:	3001      	adds	r0, #1
 800c900:	d1c1      	bne.n	800c886 <_printf_float+0x33e>
 800c902:	e680      	b.n	800c606 <_printf_float+0xbe>
 800c904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c906:	2a01      	cmp	r2, #1
 800c908:	dc01      	bgt.n	800c90e <_printf_float+0x3c6>
 800c90a:	07db      	lsls	r3, r3, #31
 800c90c:	d53a      	bpl.n	800c984 <_printf_float+0x43c>
 800c90e:	2301      	movs	r3, #1
 800c910:	4642      	mov	r2, r8
 800c912:	4631      	mov	r1, r6
 800c914:	4628      	mov	r0, r5
 800c916:	47b8      	blx	r7
 800c918:	3001      	adds	r0, #1
 800c91a:	f43f ae74 	beq.w	800c606 <_printf_float+0xbe>
 800c91e:	ee18 3a10 	vmov	r3, s16
 800c922:	4652      	mov	r2, sl
 800c924:	4631      	mov	r1, r6
 800c926:	4628      	mov	r0, r5
 800c928:	47b8      	blx	r7
 800c92a:	3001      	adds	r0, #1
 800c92c:	f43f ae6b 	beq.w	800c606 <_printf_float+0xbe>
 800c930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c934:	2200      	movs	r2, #0
 800c936:	2300      	movs	r3, #0
 800c938:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c93c:	f7f4 f8c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c940:	b9d8      	cbnz	r0, 800c97a <_printf_float+0x432>
 800c942:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c946:	f108 0201 	add.w	r2, r8, #1
 800c94a:	4631      	mov	r1, r6
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	d10e      	bne.n	800c972 <_printf_float+0x42a>
 800c954:	e657      	b.n	800c606 <_printf_float+0xbe>
 800c956:	2301      	movs	r3, #1
 800c958:	4652      	mov	r2, sl
 800c95a:	4631      	mov	r1, r6
 800c95c:	4628      	mov	r0, r5
 800c95e:	47b8      	blx	r7
 800c960:	3001      	adds	r0, #1
 800c962:	f43f ae50 	beq.w	800c606 <_printf_float+0xbe>
 800c966:	f108 0801 	add.w	r8, r8, #1
 800c96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c96c:	3b01      	subs	r3, #1
 800c96e:	4543      	cmp	r3, r8
 800c970:	dcf1      	bgt.n	800c956 <_printf_float+0x40e>
 800c972:	464b      	mov	r3, r9
 800c974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c978:	e6da      	b.n	800c730 <_printf_float+0x1e8>
 800c97a:	f04f 0800 	mov.w	r8, #0
 800c97e:	f104 0a1a 	add.w	sl, r4, #26
 800c982:	e7f2      	b.n	800c96a <_printf_float+0x422>
 800c984:	2301      	movs	r3, #1
 800c986:	4642      	mov	r2, r8
 800c988:	e7df      	b.n	800c94a <_printf_float+0x402>
 800c98a:	2301      	movs	r3, #1
 800c98c:	464a      	mov	r2, r9
 800c98e:	4631      	mov	r1, r6
 800c990:	4628      	mov	r0, r5
 800c992:	47b8      	blx	r7
 800c994:	3001      	adds	r0, #1
 800c996:	f43f ae36 	beq.w	800c606 <_printf_float+0xbe>
 800c99a:	f108 0801 	add.w	r8, r8, #1
 800c99e:	68e3      	ldr	r3, [r4, #12]
 800c9a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9a2:	1a5b      	subs	r3, r3, r1
 800c9a4:	4543      	cmp	r3, r8
 800c9a6:	dcf0      	bgt.n	800c98a <_printf_float+0x442>
 800c9a8:	e6f8      	b.n	800c79c <_printf_float+0x254>
 800c9aa:	f04f 0800 	mov.w	r8, #0
 800c9ae:	f104 0919 	add.w	r9, r4, #25
 800c9b2:	e7f4      	b.n	800c99e <_printf_float+0x456>

0800c9b4 <_printf_common>:
 800c9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	4699      	mov	r9, r3
 800c9bc:	688a      	ldr	r2, [r1, #8]
 800c9be:	690b      	ldr	r3, [r1, #16]
 800c9c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	bfb8      	it	lt
 800c9c8:	4613      	movlt	r3, r2
 800c9ca:	6033      	str	r3, [r6, #0]
 800c9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9d0:	4607      	mov	r7, r0
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	b10a      	cbz	r2, 800c9da <_printf_common+0x26>
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	6033      	str	r3, [r6, #0]
 800c9da:	6823      	ldr	r3, [r4, #0]
 800c9dc:	0699      	lsls	r1, r3, #26
 800c9de:	bf42      	ittt	mi
 800c9e0:	6833      	ldrmi	r3, [r6, #0]
 800c9e2:	3302      	addmi	r3, #2
 800c9e4:	6033      	strmi	r3, [r6, #0]
 800c9e6:	6825      	ldr	r5, [r4, #0]
 800c9e8:	f015 0506 	ands.w	r5, r5, #6
 800c9ec:	d106      	bne.n	800c9fc <_printf_common+0x48>
 800c9ee:	f104 0a19 	add.w	sl, r4, #25
 800c9f2:	68e3      	ldr	r3, [r4, #12]
 800c9f4:	6832      	ldr	r2, [r6, #0]
 800c9f6:	1a9b      	subs	r3, r3, r2
 800c9f8:	42ab      	cmp	r3, r5
 800c9fa:	dc26      	bgt.n	800ca4a <_printf_common+0x96>
 800c9fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca00:	1e13      	subs	r3, r2, #0
 800ca02:	6822      	ldr	r2, [r4, #0]
 800ca04:	bf18      	it	ne
 800ca06:	2301      	movne	r3, #1
 800ca08:	0692      	lsls	r2, r2, #26
 800ca0a:	d42b      	bmi.n	800ca64 <_printf_common+0xb0>
 800ca0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca10:	4649      	mov	r1, r9
 800ca12:	4638      	mov	r0, r7
 800ca14:	47c0      	blx	r8
 800ca16:	3001      	adds	r0, #1
 800ca18:	d01e      	beq.n	800ca58 <_printf_common+0xa4>
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	6922      	ldr	r2, [r4, #16]
 800ca1e:	f003 0306 	and.w	r3, r3, #6
 800ca22:	2b04      	cmp	r3, #4
 800ca24:	bf02      	ittt	eq
 800ca26:	68e5      	ldreq	r5, [r4, #12]
 800ca28:	6833      	ldreq	r3, [r6, #0]
 800ca2a:	1aed      	subeq	r5, r5, r3
 800ca2c:	68a3      	ldr	r3, [r4, #8]
 800ca2e:	bf0c      	ite	eq
 800ca30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca34:	2500      	movne	r5, #0
 800ca36:	4293      	cmp	r3, r2
 800ca38:	bfc4      	itt	gt
 800ca3a:	1a9b      	subgt	r3, r3, r2
 800ca3c:	18ed      	addgt	r5, r5, r3
 800ca3e:	2600      	movs	r6, #0
 800ca40:	341a      	adds	r4, #26
 800ca42:	42b5      	cmp	r5, r6
 800ca44:	d11a      	bne.n	800ca7c <_printf_common+0xc8>
 800ca46:	2000      	movs	r0, #0
 800ca48:	e008      	b.n	800ca5c <_printf_common+0xa8>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	4652      	mov	r2, sl
 800ca4e:	4649      	mov	r1, r9
 800ca50:	4638      	mov	r0, r7
 800ca52:	47c0      	blx	r8
 800ca54:	3001      	adds	r0, #1
 800ca56:	d103      	bne.n	800ca60 <_printf_common+0xac>
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca60:	3501      	adds	r5, #1
 800ca62:	e7c6      	b.n	800c9f2 <_printf_common+0x3e>
 800ca64:	18e1      	adds	r1, r4, r3
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	2030      	movs	r0, #48	; 0x30
 800ca6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca6e:	4422      	add	r2, r4
 800ca70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca78:	3302      	adds	r3, #2
 800ca7a:	e7c7      	b.n	800ca0c <_printf_common+0x58>
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	4622      	mov	r2, r4
 800ca80:	4649      	mov	r1, r9
 800ca82:	4638      	mov	r0, r7
 800ca84:	47c0      	blx	r8
 800ca86:	3001      	adds	r0, #1
 800ca88:	d0e6      	beq.n	800ca58 <_printf_common+0xa4>
 800ca8a:	3601      	adds	r6, #1
 800ca8c:	e7d9      	b.n	800ca42 <_printf_common+0x8e>
	...

0800ca90 <_printf_i>:
 800ca90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca94:	7e0f      	ldrb	r7, [r1, #24]
 800ca96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca98:	2f78      	cmp	r7, #120	; 0x78
 800ca9a:	4691      	mov	r9, r2
 800ca9c:	4680      	mov	r8, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	469a      	mov	sl, r3
 800caa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caa6:	d807      	bhi.n	800cab8 <_printf_i+0x28>
 800caa8:	2f62      	cmp	r7, #98	; 0x62
 800caaa:	d80a      	bhi.n	800cac2 <_printf_i+0x32>
 800caac:	2f00      	cmp	r7, #0
 800caae:	f000 80d4 	beq.w	800cc5a <_printf_i+0x1ca>
 800cab2:	2f58      	cmp	r7, #88	; 0x58
 800cab4:	f000 80c0 	beq.w	800cc38 <_printf_i+0x1a8>
 800cab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cabc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cac0:	e03a      	b.n	800cb38 <_printf_i+0xa8>
 800cac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cac6:	2b15      	cmp	r3, #21
 800cac8:	d8f6      	bhi.n	800cab8 <_printf_i+0x28>
 800caca:	a101      	add	r1, pc, #4	; (adr r1, 800cad0 <_printf_i+0x40>)
 800cacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cad0:	0800cb29 	.word	0x0800cb29
 800cad4:	0800cb3d 	.word	0x0800cb3d
 800cad8:	0800cab9 	.word	0x0800cab9
 800cadc:	0800cab9 	.word	0x0800cab9
 800cae0:	0800cab9 	.word	0x0800cab9
 800cae4:	0800cab9 	.word	0x0800cab9
 800cae8:	0800cb3d 	.word	0x0800cb3d
 800caec:	0800cab9 	.word	0x0800cab9
 800caf0:	0800cab9 	.word	0x0800cab9
 800caf4:	0800cab9 	.word	0x0800cab9
 800caf8:	0800cab9 	.word	0x0800cab9
 800cafc:	0800cc41 	.word	0x0800cc41
 800cb00:	0800cb69 	.word	0x0800cb69
 800cb04:	0800cbfb 	.word	0x0800cbfb
 800cb08:	0800cab9 	.word	0x0800cab9
 800cb0c:	0800cab9 	.word	0x0800cab9
 800cb10:	0800cc63 	.word	0x0800cc63
 800cb14:	0800cab9 	.word	0x0800cab9
 800cb18:	0800cb69 	.word	0x0800cb69
 800cb1c:	0800cab9 	.word	0x0800cab9
 800cb20:	0800cab9 	.word	0x0800cab9
 800cb24:	0800cc03 	.word	0x0800cc03
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	1d1a      	adds	r2, r3, #4
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	602a      	str	r2, [r5, #0]
 800cb30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e09f      	b.n	800cc7c <_printf_i+0x1ec>
 800cb3c:	6820      	ldr	r0, [r4, #0]
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	0607      	lsls	r7, r0, #24
 800cb42:	f103 0104 	add.w	r1, r3, #4
 800cb46:	6029      	str	r1, [r5, #0]
 800cb48:	d501      	bpl.n	800cb4e <_printf_i+0xbe>
 800cb4a:	681e      	ldr	r6, [r3, #0]
 800cb4c:	e003      	b.n	800cb56 <_printf_i+0xc6>
 800cb4e:	0646      	lsls	r6, r0, #25
 800cb50:	d5fb      	bpl.n	800cb4a <_printf_i+0xba>
 800cb52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb56:	2e00      	cmp	r6, #0
 800cb58:	da03      	bge.n	800cb62 <_printf_i+0xd2>
 800cb5a:	232d      	movs	r3, #45	; 0x2d
 800cb5c:	4276      	negs	r6, r6
 800cb5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb62:	485a      	ldr	r0, [pc, #360]	; (800cccc <_printf_i+0x23c>)
 800cb64:	230a      	movs	r3, #10
 800cb66:	e012      	b.n	800cb8e <_printf_i+0xfe>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	6820      	ldr	r0, [r4, #0]
 800cb6c:	1d19      	adds	r1, r3, #4
 800cb6e:	6029      	str	r1, [r5, #0]
 800cb70:	0605      	lsls	r5, r0, #24
 800cb72:	d501      	bpl.n	800cb78 <_printf_i+0xe8>
 800cb74:	681e      	ldr	r6, [r3, #0]
 800cb76:	e002      	b.n	800cb7e <_printf_i+0xee>
 800cb78:	0641      	lsls	r1, r0, #25
 800cb7a:	d5fb      	bpl.n	800cb74 <_printf_i+0xe4>
 800cb7c:	881e      	ldrh	r6, [r3, #0]
 800cb7e:	4853      	ldr	r0, [pc, #332]	; (800cccc <_printf_i+0x23c>)
 800cb80:	2f6f      	cmp	r7, #111	; 0x6f
 800cb82:	bf0c      	ite	eq
 800cb84:	2308      	moveq	r3, #8
 800cb86:	230a      	movne	r3, #10
 800cb88:	2100      	movs	r1, #0
 800cb8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb8e:	6865      	ldr	r5, [r4, #4]
 800cb90:	60a5      	str	r5, [r4, #8]
 800cb92:	2d00      	cmp	r5, #0
 800cb94:	bfa2      	ittt	ge
 800cb96:	6821      	ldrge	r1, [r4, #0]
 800cb98:	f021 0104 	bicge.w	r1, r1, #4
 800cb9c:	6021      	strge	r1, [r4, #0]
 800cb9e:	b90e      	cbnz	r6, 800cba4 <_printf_i+0x114>
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	d04b      	beq.n	800cc3c <_printf_i+0x1ac>
 800cba4:	4615      	mov	r5, r2
 800cba6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbaa:	fb03 6711 	mls	r7, r3, r1, r6
 800cbae:	5dc7      	ldrb	r7, [r0, r7]
 800cbb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbb4:	4637      	mov	r7, r6
 800cbb6:	42bb      	cmp	r3, r7
 800cbb8:	460e      	mov	r6, r1
 800cbba:	d9f4      	bls.n	800cba6 <_printf_i+0x116>
 800cbbc:	2b08      	cmp	r3, #8
 800cbbe:	d10b      	bne.n	800cbd8 <_printf_i+0x148>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	07de      	lsls	r6, r3, #31
 800cbc4:	d508      	bpl.n	800cbd8 <_printf_i+0x148>
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	6861      	ldr	r1, [r4, #4]
 800cbca:	4299      	cmp	r1, r3
 800cbcc:	bfde      	ittt	le
 800cbce:	2330      	movle	r3, #48	; 0x30
 800cbd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbd8:	1b52      	subs	r2, r2, r5
 800cbda:	6122      	str	r2, [r4, #16]
 800cbdc:	f8cd a000 	str.w	sl, [sp]
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	aa03      	add	r2, sp, #12
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	f7ff fee4 	bl	800c9b4 <_printf_common>
 800cbec:	3001      	adds	r0, #1
 800cbee:	d14a      	bne.n	800cc86 <_printf_i+0x1f6>
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	b004      	add	sp, #16
 800cbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	f043 0320 	orr.w	r3, r3, #32
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	4833      	ldr	r0, [pc, #204]	; (800ccd0 <_printf_i+0x240>)
 800cc04:	2778      	movs	r7, #120	; 0x78
 800cc06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	6829      	ldr	r1, [r5, #0]
 800cc0e:	061f      	lsls	r7, r3, #24
 800cc10:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc14:	d402      	bmi.n	800cc1c <_printf_i+0x18c>
 800cc16:	065f      	lsls	r7, r3, #25
 800cc18:	bf48      	it	mi
 800cc1a:	b2b6      	uxthmi	r6, r6
 800cc1c:	07df      	lsls	r7, r3, #31
 800cc1e:	bf48      	it	mi
 800cc20:	f043 0320 	orrmi.w	r3, r3, #32
 800cc24:	6029      	str	r1, [r5, #0]
 800cc26:	bf48      	it	mi
 800cc28:	6023      	strmi	r3, [r4, #0]
 800cc2a:	b91e      	cbnz	r6, 800cc34 <_printf_i+0x1a4>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	f023 0320 	bic.w	r3, r3, #32
 800cc32:	6023      	str	r3, [r4, #0]
 800cc34:	2310      	movs	r3, #16
 800cc36:	e7a7      	b.n	800cb88 <_printf_i+0xf8>
 800cc38:	4824      	ldr	r0, [pc, #144]	; (800cccc <_printf_i+0x23c>)
 800cc3a:	e7e4      	b.n	800cc06 <_printf_i+0x176>
 800cc3c:	4615      	mov	r5, r2
 800cc3e:	e7bd      	b.n	800cbbc <_printf_i+0x12c>
 800cc40:	682b      	ldr	r3, [r5, #0]
 800cc42:	6826      	ldr	r6, [r4, #0]
 800cc44:	6961      	ldr	r1, [r4, #20]
 800cc46:	1d18      	adds	r0, r3, #4
 800cc48:	6028      	str	r0, [r5, #0]
 800cc4a:	0635      	lsls	r5, r6, #24
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	d501      	bpl.n	800cc54 <_printf_i+0x1c4>
 800cc50:	6019      	str	r1, [r3, #0]
 800cc52:	e002      	b.n	800cc5a <_printf_i+0x1ca>
 800cc54:	0670      	lsls	r0, r6, #25
 800cc56:	d5fb      	bpl.n	800cc50 <_printf_i+0x1c0>
 800cc58:	8019      	strh	r1, [r3, #0]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	6123      	str	r3, [r4, #16]
 800cc5e:	4615      	mov	r5, r2
 800cc60:	e7bc      	b.n	800cbdc <_printf_i+0x14c>
 800cc62:	682b      	ldr	r3, [r5, #0]
 800cc64:	1d1a      	adds	r2, r3, #4
 800cc66:	602a      	str	r2, [r5, #0]
 800cc68:	681d      	ldr	r5, [r3, #0]
 800cc6a:	6862      	ldr	r2, [r4, #4]
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f7f3 faae 	bl	80001d0 <memchr>
 800cc74:	b108      	cbz	r0, 800cc7a <_printf_i+0x1ea>
 800cc76:	1b40      	subs	r0, r0, r5
 800cc78:	6060      	str	r0, [r4, #4]
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc84:	e7aa      	b.n	800cbdc <_printf_i+0x14c>
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	462a      	mov	r2, r5
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	47d0      	blx	sl
 800cc90:	3001      	adds	r0, #1
 800cc92:	d0ad      	beq.n	800cbf0 <_printf_i+0x160>
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	079b      	lsls	r3, r3, #30
 800cc98:	d413      	bmi.n	800ccc2 <_printf_i+0x232>
 800cc9a:	68e0      	ldr	r0, [r4, #12]
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	4298      	cmp	r0, r3
 800cca0:	bfb8      	it	lt
 800cca2:	4618      	movlt	r0, r3
 800cca4:	e7a6      	b.n	800cbf4 <_printf_i+0x164>
 800cca6:	2301      	movs	r3, #1
 800cca8:	4632      	mov	r2, r6
 800ccaa:	4649      	mov	r1, r9
 800ccac:	4640      	mov	r0, r8
 800ccae:	47d0      	blx	sl
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	d09d      	beq.n	800cbf0 <_printf_i+0x160>
 800ccb4:	3501      	adds	r5, #1
 800ccb6:	68e3      	ldr	r3, [r4, #12]
 800ccb8:	9903      	ldr	r1, [sp, #12]
 800ccba:	1a5b      	subs	r3, r3, r1
 800ccbc:	42ab      	cmp	r3, r5
 800ccbe:	dcf2      	bgt.n	800cca6 <_printf_i+0x216>
 800ccc0:	e7eb      	b.n	800cc9a <_printf_i+0x20a>
 800ccc2:	2500      	movs	r5, #0
 800ccc4:	f104 0619 	add.w	r6, r4, #25
 800ccc8:	e7f5      	b.n	800ccb6 <_printf_i+0x226>
 800ccca:	bf00      	nop
 800cccc:	08010f43 	.word	0x08010f43
 800ccd0:	08010f54 	.word	0x08010f54

0800ccd4 <_scanf_float>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	b087      	sub	sp, #28
 800ccda:	4617      	mov	r7, r2
 800ccdc:	9303      	str	r3, [sp, #12]
 800ccde:	688b      	ldr	r3, [r1, #8]
 800cce0:	1e5a      	subs	r2, r3, #1
 800cce2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cce6:	bf83      	ittte	hi
 800cce8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ccec:	195b      	addhi	r3, r3, r5
 800ccee:	9302      	strhi	r3, [sp, #8]
 800ccf0:	2300      	movls	r3, #0
 800ccf2:	bf86      	itte	hi
 800ccf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ccf8:	608b      	strhi	r3, [r1, #8]
 800ccfa:	9302      	strls	r3, [sp, #8]
 800ccfc:	680b      	ldr	r3, [r1, #0]
 800ccfe:	468b      	mov	fp, r1
 800cd00:	2500      	movs	r5, #0
 800cd02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cd06:	f84b 3b1c 	str.w	r3, [fp], #28
 800cd0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd0e:	4680      	mov	r8, r0
 800cd10:	460c      	mov	r4, r1
 800cd12:	465e      	mov	r6, fp
 800cd14:	46aa      	mov	sl, r5
 800cd16:	46a9      	mov	r9, r5
 800cd18:	9501      	str	r5, [sp, #4]
 800cd1a:	68a2      	ldr	r2, [r4, #8]
 800cd1c:	b152      	cbz	r2, 800cd34 <_scanf_float+0x60>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b4e      	cmp	r3, #78	; 0x4e
 800cd24:	d864      	bhi.n	800cdf0 <_scanf_float+0x11c>
 800cd26:	2b40      	cmp	r3, #64	; 0x40
 800cd28:	d83c      	bhi.n	800cda4 <_scanf_float+0xd0>
 800cd2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cd2e:	b2c8      	uxtb	r0, r1
 800cd30:	280e      	cmp	r0, #14
 800cd32:	d93a      	bls.n	800cdaa <_scanf_float+0xd6>
 800cd34:	f1b9 0f00 	cmp.w	r9, #0
 800cd38:	d003      	beq.n	800cd42 <_scanf_float+0x6e>
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd46:	f1ba 0f01 	cmp.w	sl, #1
 800cd4a:	f200 8113 	bhi.w	800cf74 <_scanf_float+0x2a0>
 800cd4e:	455e      	cmp	r6, fp
 800cd50:	f200 8105 	bhi.w	800cf5e <_scanf_float+0x28a>
 800cd54:	2501      	movs	r5, #1
 800cd56:	4628      	mov	r0, r5
 800cd58:	b007      	add	sp, #28
 800cd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cd62:	2a0d      	cmp	r2, #13
 800cd64:	d8e6      	bhi.n	800cd34 <_scanf_float+0x60>
 800cd66:	a101      	add	r1, pc, #4	; (adr r1, 800cd6c <_scanf_float+0x98>)
 800cd68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd6c:	0800ceab 	.word	0x0800ceab
 800cd70:	0800cd35 	.word	0x0800cd35
 800cd74:	0800cd35 	.word	0x0800cd35
 800cd78:	0800cd35 	.word	0x0800cd35
 800cd7c:	0800cf0b 	.word	0x0800cf0b
 800cd80:	0800cee3 	.word	0x0800cee3
 800cd84:	0800cd35 	.word	0x0800cd35
 800cd88:	0800cd35 	.word	0x0800cd35
 800cd8c:	0800ceb9 	.word	0x0800ceb9
 800cd90:	0800cd35 	.word	0x0800cd35
 800cd94:	0800cd35 	.word	0x0800cd35
 800cd98:	0800cd35 	.word	0x0800cd35
 800cd9c:	0800cd35 	.word	0x0800cd35
 800cda0:	0800ce71 	.word	0x0800ce71
 800cda4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cda8:	e7db      	b.n	800cd62 <_scanf_float+0x8e>
 800cdaa:	290e      	cmp	r1, #14
 800cdac:	d8c2      	bhi.n	800cd34 <_scanf_float+0x60>
 800cdae:	a001      	add	r0, pc, #4	; (adr r0, 800cdb4 <_scanf_float+0xe0>)
 800cdb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cdb4:	0800ce63 	.word	0x0800ce63
 800cdb8:	0800cd35 	.word	0x0800cd35
 800cdbc:	0800ce63 	.word	0x0800ce63
 800cdc0:	0800cef7 	.word	0x0800cef7
 800cdc4:	0800cd35 	.word	0x0800cd35
 800cdc8:	0800ce11 	.word	0x0800ce11
 800cdcc:	0800ce4d 	.word	0x0800ce4d
 800cdd0:	0800ce4d 	.word	0x0800ce4d
 800cdd4:	0800ce4d 	.word	0x0800ce4d
 800cdd8:	0800ce4d 	.word	0x0800ce4d
 800cddc:	0800ce4d 	.word	0x0800ce4d
 800cde0:	0800ce4d 	.word	0x0800ce4d
 800cde4:	0800ce4d 	.word	0x0800ce4d
 800cde8:	0800ce4d 	.word	0x0800ce4d
 800cdec:	0800ce4d 	.word	0x0800ce4d
 800cdf0:	2b6e      	cmp	r3, #110	; 0x6e
 800cdf2:	d809      	bhi.n	800ce08 <_scanf_float+0x134>
 800cdf4:	2b60      	cmp	r3, #96	; 0x60
 800cdf6:	d8b2      	bhi.n	800cd5e <_scanf_float+0x8a>
 800cdf8:	2b54      	cmp	r3, #84	; 0x54
 800cdfa:	d077      	beq.n	800ceec <_scanf_float+0x218>
 800cdfc:	2b59      	cmp	r3, #89	; 0x59
 800cdfe:	d199      	bne.n	800cd34 <_scanf_float+0x60>
 800ce00:	2d07      	cmp	r5, #7
 800ce02:	d197      	bne.n	800cd34 <_scanf_float+0x60>
 800ce04:	2508      	movs	r5, #8
 800ce06:	e029      	b.n	800ce5c <_scanf_float+0x188>
 800ce08:	2b74      	cmp	r3, #116	; 0x74
 800ce0a:	d06f      	beq.n	800ceec <_scanf_float+0x218>
 800ce0c:	2b79      	cmp	r3, #121	; 0x79
 800ce0e:	e7f6      	b.n	800cdfe <_scanf_float+0x12a>
 800ce10:	6821      	ldr	r1, [r4, #0]
 800ce12:	05c8      	lsls	r0, r1, #23
 800ce14:	d51a      	bpl.n	800ce4c <_scanf_float+0x178>
 800ce16:	9b02      	ldr	r3, [sp, #8]
 800ce18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ce1c:	6021      	str	r1, [r4, #0]
 800ce1e:	f109 0901 	add.w	r9, r9, #1
 800ce22:	b11b      	cbz	r3, 800ce2c <_scanf_float+0x158>
 800ce24:	3b01      	subs	r3, #1
 800ce26:	3201      	adds	r2, #1
 800ce28:	9302      	str	r3, [sp, #8]
 800ce2a:	60a2      	str	r2, [r4, #8]
 800ce2c:	68a3      	ldr	r3, [r4, #8]
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	60a3      	str	r3, [r4, #8]
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	3301      	adds	r3, #1
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	607b      	str	r3, [r7, #4]
 800ce40:	f340 8084 	ble.w	800cf4c <_scanf_float+0x278>
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	603b      	str	r3, [r7, #0]
 800ce4a:	e766      	b.n	800cd1a <_scanf_float+0x46>
 800ce4c:	eb1a 0f05 	cmn.w	sl, r5
 800ce50:	f47f af70 	bne.w	800cd34 <_scanf_float+0x60>
 800ce54:	6822      	ldr	r2, [r4, #0]
 800ce56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ce5a:	6022      	str	r2, [r4, #0]
 800ce5c:	f806 3b01 	strb.w	r3, [r6], #1
 800ce60:	e7e4      	b.n	800ce2c <_scanf_float+0x158>
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	0610      	lsls	r0, r2, #24
 800ce66:	f57f af65 	bpl.w	800cd34 <_scanf_float+0x60>
 800ce6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce6e:	e7f4      	b.n	800ce5a <_scanf_float+0x186>
 800ce70:	f1ba 0f00 	cmp.w	sl, #0
 800ce74:	d10e      	bne.n	800ce94 <_scanf_float+0x1c0>
 800ce76:	f1b9 0f00 	cmp.w	r9, #0
 800ce7a:	d10e      	bne.n	800ce9a <_scanf_float+0x1c6>
 800ce7c:	6822      	ldr	r2, [r4, #0]
 800ce7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ce82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ce86:	d108      	bne.n	800ce9a <_scanf_float+0x1c6>
 800ce88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce8c:	6022      	str	r2, [r4, #0]
 800ce8e:	f04f 0a01 	mov.w	sl, #1
 800ce92:	e7e3      	b.n	800ce5c <_scanf_float+0x188>
 800ce94:	f1ba 0f02 	cmp.w	sl, #2
 800ce98:	d055      	beq.n	800cf46 <_scanf_float+0x272>
 800ce9a:	2d01      	cmp	r5, #1
 800ce9c:	d002      	beq.n	800cea4 <_scanf_float+0x1d0>
 800ce9e:	2d04      	cmp	r5, #4
 800cea0:	f47f af48 	bne.w	800cd34 <_scanf_float+0x60>
 800cea4:	3501      	adds	r5, #1
 800cea6:	b2ed      	uxtb	r5, r5
 800cea8:	e7d8      	b.n	800ce5c <_scanf_float+0x188>
 800ceaa:	f1ba 0f01 	cmp.w	sl, #1
 800ceae:	f47f af41 	bne.w	800cd34 <_scanf_float+0x60>
 800ceb2:	f04f 0a02 	mov.w	sl, #2
 800ceb6:	e7d1      	b.n	800ce5c <_scanf_float+0x188>
 800ceb8:	b97d      	cbnz	r5, 800ceda <_scanf_float+0x206>
 800ceba:	f1b9 0f00 	cmp.w	r9, #0
 800cebe:	f47f af3c 	bne.w	800cd3a <_scanf_float+0x66>
 800cec2:	6822      	ldr	r2, [r4, #0]
 800cec4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cec8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cecc:	f47f af39 	bne.w	800cd42 <_scanf_float+0x6e>
 800ced0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ced4:	6022      	str	r2, [r4, #0]
 800ced6:	2501      	movs	r5, #1
 800ced8:	e7c0      	b.n	800ce5c <_scanf_float+0x188>
 800ceda:	2d03      	cmp	r5, #3
 800cedc:	d0e2      	beq.n	800cea4 <_scanf_float+0x1d0>
 800cede:	2d05      	cmp	r5, #5
 800cee0:	e7de      	b.n	800cea0 <_scanf_float+0x1cc>
 800cee2:	2d02      	cmp	r5, #2
 800cee4:	f47f af26 	bne.w	800cd34 <_scanf_float+0x60>
 800cee8:	2503      	movs	r5, #3
 800ceea:	e7b7      	b.n	800ce5c <_scanf_float+0x188>
 800ceec:	2d06      	cmp	r5, #6
 800ceee:	f47f af21 	bne.w	800cd34 <_scanf_float+0x60>
 800cef2:	2507      	movs	r5, #7
 800cef4:	e7b2      	b.n	800ce5c <_scanf_float+0x188>
 800cef6:	6822      	ldr	r2, [r4, #0]
 800cef8:	0591      	lsls	r1, r2, #22
 800cefa:	f57f af1b 	bpl.w	800cd34 <_scanf_float+0x60>
 800cefe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cf02:	6022      	str	r2, [r4, #0]
 800cf04:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf08:	e7a8      	b.n	800ce5c <_scanf_float+0x188>
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cf10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cf14:	d006      	beq.n	800cf24 <_scanf_float+0x250>
 800cf16:	0550      	lsls	r0, r2, #21
 800cf18:	f57f af0c 	bpl.w	800cd34 <_scanf_float+0x60>
 800cf1c:	f1b9 0f00 	cmp.w	r9, #0
 800cf20:	f43f af0f 	beq.w	800cd42 <_scanf_float+0x6e>
 800cf24:	0591      	lsls	r1, r2, #22
 800cf26:	bf58      	it	pl
 800cf28:	9901      	ldrpl	r1, [sp, #4]
 800cf2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cf2e:	bf58      	it	pl
 800cf30:	eba9 0101 	subpl.w	r1, r9, r1
 800cf34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cf38:	bf58      	it	pl
 800cf3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cf3e:	6022      	str	r2, [r4, #0]
 800cf40:	f04f 0900 	mov.w	r9, #0
 800cf44:	e78a      	b.n	800ce5c <_scanf_float+0x188>
 800cf46:	f04f 0a03 	mov.w	sl, #3
 800cf4a:	e787      	b.n	800ce5c <_scanf_float+0x188>
 800cf4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf50:	4639      	mov	r1, r7
 800cf52:	4640      	mov	r0, r8
 800cf54:	4798      	blx	r3
 800cf56:	2800      	cmp	r0, #0
 800cf58:	f43f aedf 	beq.w	800cd1a <_scanf_float+0x46>
 800cf5c:	e6ea      	b.n	800cd34 <_scanf_float+0x60>
 800cf5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf66:	463a      	mov	r2, r7
 800cf68:	4640      	mov	r0, r8
 800cf6a:	4798      	blx	r3
 800cf6c:	6923      	ldr	r3, [r4, #16]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	e6ec      	b.n	800cd4e <_scanf_float+0x7a>
 800cf74:	1e6b      	subs	r3, r5, #1
 800cf76:	2b06      	cmp	r3, #6
 800cf78:	d825      	bhi.n	800cfc6 <_scanf_float+0x2f2>
 800cf7a:	2d02      	cmp	r5, #2
 800cf7c:	d836      	bhi.n	800cfec <_scanf_float+0x318>
 800cf7e:	455e      	cmp	r6, fp
 800cf80:	f67f aee8 	bls.w	800cd54 <_scanf_float+0x80>
 800cf84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf8c:	463a      	mov	r2, r7
 800cf8e:	4640      	mov	r0, r8
 800cf90:	4798      	blx	r3
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	6123      	str	r3, [r4, #16]
 800cf98:	e7f1      	b.n	800cf7e <_scanf_float+0x2aa>
 800cf9a:	9802      	ldr	r0, [sp, #8]
 800cf9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cfa4:	9002      	str	r0, [sp, #8]
 800cfa6:	463a      	mov	r2, r7
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	4798      	blx	r3
 800cfac:	6923      	ldr	r3, [r4, #16]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	6123      	str	r3, [r4, #16]
 800cfb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfb6:	fa5f fa8a 	uxtb.w	sl, sl
 800cfba:	f1ba 0f02 	cmp.w	sl, #2
 800cfbe:	d1ec      	bne.n	800cf9a <_scanf_float+0x2c6>
 800cfc0:	3d03      	subs	r5, #3
 800cfc2:	b2ed      	uxtb	r5, r5
 800cfc4:	1b76      	subs	r6, r6, r5
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	05da      	lsls	r2, r3, #23
 800cfca:	d52f      	bpl.n	800d02c <_scanf_float+0x358>
 800cfcc:	055b      	lsls	r3, r3, #21
 800cfce:	d510      	bpl.n	800cff2 <_scanf_float+0x31e>
 800cfd0:	455e      	cmp	r6, fp
 800cfd2:	f67f aebf 	bls.w	800cd54 <_scanf_float+0x80>
 800cfd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfde:	463a      	mov	r2, r7
 800cfe0:	4640      	mov	r0, r8
 800cfe2:	4798      	blx	r3
 800cfe4:	6923      	ldr	r3, [r4, #16]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	6123      	str	r3, [r4, #16]
 800cfea:	e7f1      	b.n	800cfd0 <_scanf_float+0x2fc>
 800cfec:	46aa      	mov	sl, r5
 800cfee:	9602      	str	r6, [sp, #8]
 800cff0:	e7df      	b.n	800cfb2 <_scanf_float+0x2de>
 800cff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	2965      	cmp	r1, #101	; 0x65
 800cffa:	f103 33ff 	add.w	r3, r3, #4294967295
 800cffe:	f106 35ff 	add.w	r5, r6, #4294967295
 800d002:	6123      	str	r3, [r4, #16]
 800d004:	d00c      	beq.n	800d020 <_scanf_float+0x34c>
 800d006:	2945      	cmp	r1, #69	; 0x45
 800d008:	d00a      	beq.n	800d020 <_scanf_float+0x34c>
 800d00a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d00e:	463a      	mov	r2, r7
 800d010:	4640      	mov	r0, r8
 800d012:	4798      	blx	r3
 800d014:	6923      	ldr	r3, [r4, #16]
 800d016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	1eb5      	subs	r5, r6, #2
 800d01e:	6123      	str	r3, [r4, #16]
 800d020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d024:	463a      	mov	r2, r7
 800d026:	4640      	mov	r0, r8
 800d028:	4798      	blx	r3
 800d02a:	462e      	mov	r6, r5
 800d02c:	6825      	ldr	r5, [r4, #0]
 800d02e:	f015 0510 	ands.w	r5, r5, #16
 800d032:	d158      	bne.n	800d0e6 <_scanf_float+0x412>
 800d034:	7035      	strb	r5, [r6, #0]
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d040:	d11c      	bne.n	800d07c <_scanf_float+0x3a8>
 800d042:	9b01      	ldr	r3, [sp, #4]
 800d044:	454b      	cmp	r3, r9
 800d046:	eba3 0209 	sub.w	r2, r3, r9
 800d04a:	d124      	bne.n	800d096 <_scanf_float+0x3c2>
 800d04c:	2200      	movs	r2, #0
 800d04e:	4659      	mov	r1, fp
 800d050:	4640      	mov	r0, r8
 800d052:	f002 fc11 	bl	800f878 <_strtod_r>
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	6821      	ldr	r1, [r4, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f011 0f02 	tst.w	r1, #2
 800d060:	ec57 6b10 	vmov	r6, r7, d0
 800d064:	f103 0204 	add.w	r2, r3, #4
 800d068:	d020      	beq.n	800d0ac <_scanf_float+0x3d8>
 800d06a:	9903      	ldr	r1, [sp, #12]
 800d06c:	600a      	str	r2, [r1, #0]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	e9c3 6700 	strd	r6, r7, [r3]
 800d074:	68e3      	ldr	r3, [r4, #12]
 800d076:	3301      	adds	r3, #1
 800d078:	60e3      	str	r3, [r4, #12]
 800d07a:	e66c      	b.n	800cd56 <_scanf_float+0x82>
 800d07c:	9b04      	ldr	r3, [sp, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0e4      	beq.n	800d04c <_scanf_float+0x378>
 800d082:	9905      	ldr	r1, [sp, #20]
 800d084:	230a      	movs	r3, #10
 800d086:	462a      	mov	r2, r5
 800d088:	3101      	adds	r1, #1
 800d08a:	4640      	mov	r0, r8
 800d08c:	f7ff f9b0 	bl	800c3f0 <_strtol_r>
 800d090:	9b04      	ldr	r3, [sp, #16]
 800d092:	9e05      	ldr	r6, [sp, #20]
 800d094:	1ac2      	subs	r2, r0, r3
 800d096:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d09a:	429e      	cmp	r6, r3
 800d09c:	bf28      	it	cs
 800d09e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d0a2:	4912      	ldr	r1, [pc, #72]	; (800d0ec <_scanf_float+0x418>)
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	f000 f8e7 	bl	800d278 <siprintf>
 800d0aa:	e7cf      	b.n	800d04c <_scanf_float+0x378>
 800d0ac:	f011 0f04 	tst.w	r1, #4
 800d0b0:	9903      	ldr	r1, [sp, #12]
 800d0b2:	600a      	str	r2, [r1, #0]
 800d0b4:	d1db      	bne.n	800d06e <_scanf_float+0x39a>
 800d0b6:	f8d3 8000 	ldr.w	r8, [r3]
 800d0ba:	ee10 2a10 	vmov	r2, s0
 800d0be:	ee10 0a10 	vmov	r0, s0
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	4639      	mov	r1, r7
 800d0c6:	f7f3 fd31 	bl	8000b2c <__aeabi_dcmpun>
 800d0ca:	b128      	cbz	r0, 800d0d8 <_scanf_float+0x404>
 800d0cc:	4808      	ldr	r0, [pc, #32]	; (800d0f0 <_scanf_float+0x41c>)
 800d0ce:	f000 fa4b 	bl	800d568 <nanf>
 800d0d2:	ed88 0a00 	vstr	s0, [r8]
 800d0d6:	e7cd      	b.n	800d074 <_scanf_float+0x3a0>
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 fd84 	bl	8000be8 <__aeabi_d2f>
 800d0e0:	f8c8 0000 	str.w	r0, [r8]
 800d0e4:	e7c6      	b.n	800d074 <_scanf_float+0x3a0>
 800d0e6:	2500      	movs	r5, #0
 800d0e8:	e635      	b.n	800cd56 <_scanf_float+0x82>
 800d0ea:	bf00      	nop
 800d0ec:	08010f65 	.word	0x08010f65
 800d0f0:	080111f4 	.word	0x080111f4

0800d0f4 <std>:
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	b510      	push	{r4, lr}
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d0fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d102:	6083      	str	r3, [r0, #8]
 800d104:	8181      	strh	r1, [r0, #12]
 800d106:	6643      	str	r3, [r0, #100]	; 0x64
 800d108:	81c2      	strh	r2, [r0, #14]
 800d10a:	6183      	str	r3, [r0, #24]
 800d10c:	4619      	mov	r1, r3
 800d10e:	2208      	movs	r2, #8
 800d110:	305c      	adds	r0, #92	; 0x5c
 800d112:	f000 f914 	bl	800d33e <memset>
 800d116:	4b0d      	ldr	r3, [pc, #52]	; (800d14c <std+0x58>)
 800d118:	6263      	str	r3, [r4, #36]	; 0x24
 800d11a:	4b0d      	ldr	r3, [pc, #52]	; (800d150 <std+0x5c>)
 800d11c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d11e:	4b0d      	ldr	r3, [pc, #52]	; (800d154 <std+0x60>)
 800d120:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d122:	4b0d      	ldr	r3, [pc, #52]	; (800d158 <std+0x64>)
 800d124:	6323      	str	r3, [r4, #48]	; 0x30
 800d126:	4b0d      	ldr	r3, [pc, #52]	; (800d15c <std+0x68>)
 800d128:	6224      	str	r4, [r4, #32]
 800d12a:	429c      	cmp	r4, r3
 800d12c:	d006      	beq.n	800d13c <std+0x48>
 800d12e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d132:	4294      	cmp	r4, r2
 800d134:	d002      	beq.n	800d13c <std+0x48>
 800d136:	33d0      	adds	r3, #208	; 0xd0
 800d138:	429c      	cmp	r4, r3
 800d13a:	d105      	bne.n	800d148 <std+0x54>
 800d13c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d144:	f000 b9fe 	b.w	800d544 <__retarget_lock_init_recursive>
 800d148:	bd10      	pop	{r4, pc}
 800d14a:	bf00      	nop
 800d14c:	0800d2b9 	.word	0x0800d2b9
 800d150:	0800d2db 	.word	0x0800d2db
 800d154:	0800d313 	.word	0x0800d313
 800d158:	0800d337 	.word	0x0800d337
 800d15c:	20001fe0 	.word	0x20001fe0

0800d160 <stdio_exit_handler>:
 800d160:	4a02      	ldr	r2, [pc, #8]	; (800d16c <stdio_exit_handler+0xc>)
 800d162:	4903      	ldr	r1, [pc, #12]	; (800d170 <stdio_exit_handler+0x10>)
 800d164:	4803      	ldr	r0, [pc, #12]	; (800d174 <stdio_exit_handler+0x14>)
 800d166:	f000 b869 	b.w	800d23c <_fwalk_sglue>
 800d16a:	bf00      	nop
 800d16c:	20000014 	.word	0x20000014
 800d170:	0800fc41 	.word	0x0800fc41
 800d174:	20000020 	.word	0x20000020

0800d178 <cleanup_stdio>:
 800d178:	6841      	ldr	r1, [r0, #4]
 800d17a:	4b0c      	ldr	r3, [pc, #48]	; (800d1ac <cleanup_stdio+0x34>)
 800d17c:	4299      	cmp	r1, r3
 800d17e:	b510      	push	{r4, lr}
 800d180:	4604      	mov	r4, r0
 800d182:	d001      	beq.n	800d188 <cleanup_stdio+0x10>
 800d184:	f002 fd5c 	bl	800fc40 <_fflush_r>
 800d188:	68a1      	ldr	r1, [r4, #8]
 800d18a:	4b09      	ldr	r3, [pc, #36]	; (800d1b0 <cleanup_stdio+0x38>)
 800d18c:	4299      	cmp	r1, r3
 800d18e:	d002      	beq.n	800d196 <cleanup_stdio+0x1e>
 800d190:	4620      	mov	r0, r4
 800d192:	f002 fd55 	bl	800fc40 <_fflush_r>
 800d196:	68e1      	ldr	r1, [r4, #12]
 800d198:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <cleanup_stdio+0x3c>)
 800d19a:	4299      	cmp	r1, r3
 800d19c:	d004      	beq.n	800d1a8 <cleanup_stdio+0x30>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a4:	f002 bd4c 	b.w	800fc40 <_fflush_r>
 800d1a8:	bd10      	pop	{r4, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20001fe0 	.word	0x20001fe0
 800d1b0:	20002048 	.word	0x20002048
 800d1b4:	200020b0 	.word	0x200020b0

0800d1b8 <global_stdio_init.part.0>:
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	; (800d1e8 <global_stdio_init.part.0+0x30>)
 800d1bc:	4c0b      	ldr	r4, [pc, #44]	; (800d1ec <global_stdio_init.part.0+0x34>)
 800d1be:	4a0c      	ldr	r2, [pc, #48]	; (800d1f0 <global_stdio_init.part.0+0x38>)
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2104      	movs	r1, #4
 800d1c8:	f7ff ff94 	bl	800d0f4 <std>
 800d1cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	2109      	movs	r1, #9
 800d1d4:	f7ff ff8e 	bl	800d0f4 <std>
 800d1d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d1dc:	2202      	movs	r2, #2
 800d1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e2:	2112      	movs	r1, #18
 800d1e4:	f7ff bf86 	b.w	800d0f4 <std>
 800d1e8:	20002118 	.word	0x20002118
 800d1ec:	20001fe0 	.word	0x20001fe0
 800d1f0:	0800d161 	.word	0x0800d161

0800d1f4 <__sfp_lock_acquire>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	; (800d1fc <__sfp_lock_acquire+0x8>)
 800d1f6:	f000 b9a6 	b.w	800d546 <__retarget_lock_acquire_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	20002121 	.word	0x20002121

0800d200 <__sfp_lock_release>:
 800d200:	4801      	ldr	r0, [pc, #4]	; (800d208 <__sfp_lock_release+0x8>)
 800d202:	f000 b9a1 	b.w	800d548 <__retarget_lock_release_recursive>
 800d206:	bf00      	nop
 800d208:	20002121 	.word	0x20002121

0800d20c <__sinit>:
 800d20c:	b510      	push	{r4, lr}
 800d20e:	4604      	mov	r4, r0
 800d210:	f7ff fff0 	bl	800d1f4 <__sfp_lock_acquire>
 800d214:	6a23      	ldr	r3, [r4, #32]
 800d216:	b11b      	cbz	r3, 800d220 <__sinit+0x14>
 800d218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d21c:	f7ff bff0 	b.w	800d200 <__sfp_lock_release>
 800d220:	4b04      	ldr	r3, [pc, #16]	; (800d234 <__sinit+0x28>)
 800d222:	6223      	str	r3, [r4, #32]
 800d224:	4b04      	ldr	r3, [pc, #16]	; (800d238 <__sinit+0x2c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1f5      	bne.n	800d218 <__sinit+0xc>
 800d22c:	f7ff ffc4 	bl	800d1b8 <global_stdio_init.part.0>
 800d230:	e7f2      	b.n	800d218 <__sinit+0xc>
 800d232:	bf00      	nop
 800d234:	0800d179 	.word	0x0800d179
 800d238:	20002118 	.word	0x20002118

0800d23c <_fwalk_sglue>:
 800d23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d240:	4607      	mov	r7, r0
 800d242:	4688      	mov	r8, r1
 800d244:	4614      	mov	r4, r2
 800d246:	2600      	movs	r6, #0
 800d248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d24c:	f1b9 0901 	subs.w	r9, r9, #1
 800d250:	d505      	bpl.n	800d25e <_fwalk_sglue+0x22>
 800d252:	6824      	ldr	r4, [r4, #0]
 800d254:	2c00      	cmp	r4, #0
 800d256:	d1f7      	bne.n	800d248 <_fwalk_sglue+0xc>
 800d258:	4630      	mov	r0, r6
 800d25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d25e:	89ab      	ldrh	r3, [r5, #12]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d907      	bls.n	800d274 <_fwalk_sglue+0x38>
 800d264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d268:	3301      	adds	r3, #1
 800d26a:	d003      	beq.n	800d274 <_fwalk_sglue+0x38>
 800d26c:	4629      	mov	r1, r5
 800d26e:	4638      	mov	r0, r7
 800d270:	47c0      	blx	r8
 800d272:	4306      	orrs	r6, r0
 800d274:	3568      	adds	r5, #104	; 0x68
 800d276:	e7e9      	b.n	800d24c <_fwalk_sglue+0x10>

0800d278 <siprintf>:
 800d278:	b40e      	push	{r1, r2, r3}
 800d27a:	b500      	push	{lr}
 800d27c:	b09c      	sub	sp, #112	; 0x70
 800d27e:	ab1d      	add	r3, sp, #116	; 0x74
 800d280:	9002      	str	r0, [sp, #8]
 800d282:	9006      	str	r0, [sp, #24]
 800d284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d288:	4809      	ldr	r0, [pc, #36]	; (800d2b0 <siprintf+0x38>)
 800d28a:	9107      	str	r1, [sp, #28]
 800d28c:	9104      	str	r1, [sp, #16]
 800d28e:	4909      	ldr	r1, [pc, #36]	; (800d2b4 <siprintf+0x3c>)
 800d290:	f853 2b04 	ldr.w	r2, [r3], #4
 800d294:	9105      	str	r1, [sp, #20]
 800d296:	6800      	ldr	r0, [r0, #0]
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	a902      	add	r1, sp, #8
 800d29c:	f002 fb4c 	bl	800f938 <_svfiprintf_r>
 800d2a0:	9b02      	ldr	r3, [sp, #8]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
 800d2a6:	b01c      	add	sp, #112	; 0x70
 800d2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2ac:	b003      	add	sp, #12
 800d2ae:	4770      	bx	lr
 800d2b0:	2000006c 	.word	0x2000006c
 800d2b4:	ffff0208 	.word	0xffff0208

0800d2b8 <__sread>:
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c0:	f000 f8e2 	bl	800d488 <_read_r>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	bfab      	itete	ge
 800d2c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d2cc:	181b      	addge	r3, r3, r0
 800d2ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2d2:	bfac      	ite	ge
 800d2d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2d6:	81a3      	strhlt	r3, [r4, #12]
 800d2d8:	bd10      	pop	{r4, pc}

0800d2da <__swrite>:
 800d2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2de:	461f      	mov	r7, r3
 800d2e0:	898b      	ldrh	r3, [r1, #12]
 800d2e2:	05db      	lsls	r3, r3, #23
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	4616      	mov	r6, r2
 800d2ea:	d505      	bpl.n	800d2f8 <__swrite+0x1e>
 800d2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f000 f8b6 	bl	800d464 <_lseek_r>
 800d2f8:	89a3      	ldrh	r3, [r4, #12]
 800d2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d302:	81a3      	strh	r3, [r4, #12]
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	4628      	mov	r0, r5
 800d30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d30e:	f000 b8dd 	b.w	800d4cc <_write_r>

0800d312 <__sseek>:
 800d312:	b510      	push	{r4, lr}
 800d314:	460c      	mov	r4, r1
 800d316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d31a:	f000 f8a3 	bl	800d464 <_lseek_r>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	bf15      	itete	ne
 800d324:	6560      	strne	r0, [r4, #84]	; 0x54
 800d326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d32a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d32e:	81a3      	strheq	r3, [r4, #12]
 800d330:	bf18      	it	ne
 800d332:	81a3      	strhne	r3, [r4, #12]
 800d334:	bd10      	pop	{r4, pc}

0800d336 <__sclose>:
 800d336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33a:	f000 b82d 	b.w	800d398 <_close_r>

0800d33e <memset>:
 800d33e:	4402      	add	r2, r0
 800d340:	4603      	mov	r3, r0
 800d342:	4293      	cmp	r3, r2
 800d344:	d100      	bne.n	800d348 <memset+0xa>
 800d346:	4770      	bx	lr
 800d348:	f803 1b01 	strb.w	r1, [r3], #1
 800d34c:	e7f9      	b.n	800d342 <memset+0x4>

0800d34e <strchr>:
 800d34e:	b2c9      	uxtb	r1, r1
 800d350:	4603      	mov	r3, r0
 800d352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d356:	b11a      	cbz	r2, 800d360 <strchr+0x12>
 800d358:	428a      	cmp	r2, r1
 800d35a:	d1f9      	bne.n	800d350 <strchr+0x2>
 800d35c:	4618      	mov	r0, r3
 800d35e:	4770      	bx	lr
 800d360:	2900      	cmp	r1, #0
 800d362:	bf18      	it	ne
 800d364:	2300      	movne	r3, #0
 800d366:	e7f9      	b.n	800d35c <strchr+0xe>

0800d368 <strncpy>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	3901      	subs	r1, #1
 800d36c:	4603      	mov	r3, r0
 800d36e:	b132      	cbz	r2, 800d37e <strncpy+0x16>
 800d370:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d374:	f803 4b01 	strb.w	r4, [r3], #1
 800d378:	3a01      	subs	r2, #1
 800d37a:	2c00      	cmp	r4, #0
 800d37c:	d1f7      	bne.n	800d36e <strncpy+0x6>
 800d37e:	441a      	add	r2, r3
 800d380:	2100      	movs	r1, #0
 800d382:	4293      	cmp	r3, r2
 800d384:	d100      	bne.n	800d388 <strncpy+0x20>
 800d386:	bd10      	pop	{r4, pc}
 800d388:	f803 1b01 	strb.w	r1, [r3], #1
 800d38c:	e7f9      	b.n	800d382 <strncpy+0x1a>
	...

0800d390 <_localeconv_r>:
 800d390:	4800      	ldr	r0, [pc, #0]	; (800d394 <_localeconv_r+0x4>)
 800d392:	4770      	bx	lr
 800d394:	20000160 	.word	0x20000160

0800d398 <_close_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	4d06      	ldr	r5, [pc, #24]	; (800d3b4 <_close_r+0x1c>)
 800d39c:	2300      	movs	r3, #0
 800d39e:	4604      	mov	r4, r0
 800d3a0:	4608      	mov	r0, r1
 800d3a2:	602b      	str	r3, [r5, #0]
 800d3a4:	f7f5 fb8b 	bl	8002abe <_close>
 800d3a8:	1c43      	adds	r3, r0, #1
 800d3aa:	d102      	bne.n	800d3b2 <_close_r+0x1a>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	b103      	cbz	r3, 800d3b2 <_close_r+0x1a>
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	2000211c 	.word	0x2000211c

0800d3b8 <_reclaim_reent>:
 800d3b8:	4b29      	ldr	r3, [pc, #164]	; (800d460 <_reclaim_reent+0xa8>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4283      	cmp	r3, r0
 800d3be:	b570      	push	{r4, r5, r6, lr}
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	d04b      	beq.n	800d45c <_reclaim_reent+0xa4>
 800d3c4:	69c3      	ldr	r3, [r0, #28]
 800d3c6:	b143      	cbz	r3, 800d3da <_reclaim_reent+0x22>
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d144      	bne.n	800d458 <_reclaim_reent+0xa0>
 800d3ce:	69e3      	ldr	r3, [r4, #28]
 800d3d0:	6819      	ldr	r1, [r3, #0]
 800d3d2:	b111      	cbz	r1, 800d3da <_reclaim_reent+0x22>
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 ff49 	bl	800e26c <_free_r>
 800d3da:	6961      	ldr	r1, [r4, #20]
 800d3dc:	b111      	cbz	r1, 800d3e4 <_reclaim_reent+0x2c>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 ff44 	bl	800e26c <_free_r>
 800d3e4:	69e1      	ldr	r1, [r4, #28]
 800d3e6:	b111      	cbz	r1, 800d3ee <_reclaim_reent+0x36>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 ff3f 	bl	800e26c <_free_r>
 800d3ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d3f0:	b111      	cbz	r1, 800d3f8 <_reclaim_reent+0x40>
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f000 ff3a 	bl	800e26c <_free_r>
 800d3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3fa:	b111      	cbz	r1, 800d402 <_reclaim_reent+0x4a>
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 ff35 	bl	800e26c <_free_r>
 800d402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d404:	b111      	cbz	r1, 800d40c <_reclaim_reent+0x54>
 800d406:	4620      	mov	r0, r4
 800d408:	f000 ff30 	bl	800e26c <_free_r>
 800d40c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d40e:	b111      	cbz	r1, 800d416 <_reclaim_reent+0x5e>
 800d410:	4620      	mov	r0, r4
 800d412:	f000 ff2b 	bl	800e26c <_free_r>
 800d416:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d418:	b111      	cbz	r1, 800d420 <_reclaim_reent+0x68>
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 ff26 	bl	800e26c <_free_r>
 800d420:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d422:	b111      	cbz	r1, 800d42a <_reclaim_reent+0x72>
 800d424:	4620      	mov	r0, r4
 800d426:	f000 ff21 	bl	800e26c <_free_r>
 800d42a:	6a23      	ldr	r3, [r4, #32]
 800d42c:	b1b3      	cbz	r3, 800d45c <_reclaim_reent+0xa4>
 800d42e:	4620      	mov	r0, r4
 800d430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d434:	4718      	bx	r3
 800d436:	5949      	ldr	r1, [r1, r5]
 800d438:	b941      	cbnz	r1, 800d44c <_reclaim_reent+0x94>
 800d43a:	3504      	adds	r5, #4
 800d43c:	69e3      	ldr	r3, [r4, #28]
 800d43e:	2d80      	cmp	r5, #128	; 0x80
 800d440:	68d9      	ldr	r1, [r3, #12]
 800d442:	d1f8      	bne.n	800d436 <_reclaim_reent+0x7e>
 800d444:	4620      	mov	r0, r4
 800d446:	f000 ff11 	bl	800e26c <_free_r>
 800d44a:	e7c0      	b.n	800d3ce <_reclaim_reent+0x16>
 800d44c:	680e      	ldr	r6, [r1, #0]
 800d44e:	4620      	mov	r0, r4
 800d450:	f000 ff0c 	bl	800e26c <_free_r>
 800d454:	4631      	mov	r1, r6
 800d456:	e7ef      	b.n	800d438 <_reclaim_reent+0x80>
 800d458:	2500      	movs	r5, #0
 800d45a:	e7ef      	b.n	800d43c <_reclaim_reent+0x84>
 800d45c:	bd70      	pop	{r4, r5, r6, pc}
 800d45e:	bf00      	nop
 800d460:	2000006c 	.word	0x2000006c

0800d464 <_lseek_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4d07      	ldr	r5, [pc, #28]	; (800d484 <_lseek_r+0x20>)
 800d468:	4604      	mov	r4, r0
 800d46a:	4608      	mov	r0, r1
 800d46c:	4611      	mov	r1, r2
 800d46e:	2200      	movs	r2, #0
 800d470:	602a      	str	r2, [r5, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	f7f5 fb4a 	bl	8002b0c <_lseek>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d102      	bne.n	800d482 <_lseek_r+0x1e>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	b103      	cbz	r3, 800d482 <_lseek_r+0x1e>
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	2000211c 	.word	0x2000211c

0800d488 <_read_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	4d07      	ldr	r5, [pc, #28]	; (800d4a8 <_read_r+0x20>)
 800d48c:	4604      	mov	r4, r0
 800d48e:	4608      	mov	r0, r1
 800d490:	4611      	mov	r1, r2
 800d492:	2200      	movs	r2, #0
 800d494:	602a      	str	r2, [r5, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	f7f5 fad8 	bl	8002a4c <_read>
 800d49c:	1c43      	adds	r3, r0, #1
 800d49e:	d102      	bne.n	800d4a6 <_read_r+0x1e>
 800d4a0:	682b      	ldr	r3, [r5, #0]
 800d4a2:	b103      	cbz	r3, 800d4a6 <_read_r+0x1e>
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	bd38      	pop	{r3, r4, r5, pc}
 800d4a8:	2000211c 	.word	0x2000211c

0800d4ac <_sbrk_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d06      	ldr	r5, [pc, #24]	; (800d4c8 <_sbrk_r+0x1c>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	602b      	str	r3, [r5, #0]
 800d4b8:	f7f5 fb36 	bl	8002b28 <_sbrk>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_sbrk_r+0x1a>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_sbrk_r+0x1a>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	2000211c 	.word	0x2000211c

0800d4cc <_write_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4d07      	ldr	r5, [pc, #28]	; (800d4ec <_write_r+0x20>)
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	4608      	mov	r0, r1
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	602a      	str	r2, [r5, #0]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	f7f5 fad3 	bl	8002a86 <_write>
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	d102      	bne.n	800d4ea <_write_r+0x1e>
 800d4e4:	682b      	ldr	r3, [r5, #0]
 800d4e6:	b103      	cbz	r3, 800d4ea <_write_r+0x1e>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	2000211c 	.word	0x2000211c

0800d4f0 <__errno>:
 800d4f0:	4b01      	ldr	r3, [pc, #4]	; (800d4f8 <__errno+0x8>)
 800d4f2:	6818      	ldr	r0, [r3, #0]
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	2000006c 	.word	0x2000006c

0800d4fc <__libc_init_array>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4d0d      	ldr	r5, [pc, #52]	; (800d534 <__libc_init_array+0x38>)
 800d500:	4c0d      	ldr	r4, [pc, #52]	; (800d538 <__libc_init_array+0x3c>)
 800d502:	1b64      	subs	r4, r4, r5
 800d504:	10a4      	asrs	r4, r4, #2
 800d506:	2600      	movs	r6, #0
 800d508:	42a6      	cmp	r6, r4
 800d50a:	d109      	bne.n	800d520 <__libc_init_array+0x24>
 800d50c:	4d0b      	ldr	r5, [pc, #44]	; (800d53c <__libc_init_array+0x40>)
 800d50e:	4c0c      	ldr	r4, [pc, #48]	; (800d540 <__libc_init_array+0x44>)
 800d510:	f003 fab0 	bl	8010a74 <_init>
 800d514:	1b64      	subs	r4, r4, r5
 800d516:	10a4      	asrs	r4, r4, #2
 800d518:	2600      	movs	r6, #0
 800d51a:	42a6      	cmp	r6, r4
 800d51c:	d105      	bne.n	800d52a <__libc_init_array+0x2e>
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	f855 3b04 	ldr.w	r3, [r5], #4
 800d524:	4798      	blx	r3
 800d526:	3601      	adds	r6, #1
 800d528:	e7ee      	b.n	800d508 <__libc_init_array+0xc>
 800d52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d52e:	4798      	blx	r3
 800d530:	3601      	adds	r6, #1
 800d532:	e7f2      	b.n	800d51a <__libc_init_array+0x1e>
 800d534:	08011260 	.word	0x08011260
 800d538:	08011260 	.word	0x08011260
 800d53c:	08011260 	.word	0x08011260
 800d540:	08011264 	.word	0x08011264

0800d544 <__retarget_lock_init_recursive>:
 800d544:	4770      	bx	lr

0800d546 <__retarget_lock_acquire_recursive>:
 800d546:	4770      	bx	lr

0800d548 <__retarget_lock_release_recursive>:
 800d548:	4770      	bx	lr

0800d54a <memcpy>:
 800d54a:	440a      	add	r2, r1
 800d54c:	4291      	cmp	r1, r2
 800d54e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d552:	d100      	bne.n	800d556 <memcpy+0xc>
 800d554:	4770      	bx	lr
 800d556:	b510      	push	{r4, lr}
 800d558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d55c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d560:	4291      	cmp	r1, r2
 800d562:	d1f9      	bne.n	800d558 <memcpy+0xe>
 800d564:	bd10      	pop	{r4, pc}
	...

0800d568 <nanf>:
 800d568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d570 <nanf+0x8>
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	7fc00000 	.word	0x7fc00000

0800d574 <quorem>:
 800d574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	6903      	ldr	r3, [r0, #16]
 800d57a:	690c      	ldr	r4, [r1, #16]
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	4607      	mov	r7, r0
 800d580:	db7e      	blt.n	800d680 <quorem+0x10c>
 800d582:	3c01      	subs	r4, #1
 800d584:	f101 0814 	add.w	r8, r1, #20
 800d588:	f100 0514 	add.w	r5, r0, #20
 800d58c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d59a:	3301      	adds	r3, #1
 800d59c:	429a      	cmp	r2, r3
 800d59e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d5a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d5a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d5aa:	d331      	bcc.n	800d610 <quorem+0x9c>
 800d5ac:	f04f 0e00 	mov.w	lr, #0
 800d5b0:	4640      	mov	r0, r8
 800d5b2:	46ac      	mov	ip, r5
 800d5b4:	46f2      	mov	sl, lr
 800d5b6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d5ba:	b293      	uxth	r3, r2
 800d5bc:	fb06 e303 	mla	r3, r6, r3, lr
 800d5c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5c4:	0c1a      	lsrs	r2, r3, #16
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	ebaa 0303 	sub.w	r3, sl, r3
 800d5cc:	f8dc a000 	ldr.w	sl, [ip]
 800d5d0:	fa13 f38a 	uxtah	r3, r3, sl
 800d5d4:	fb06 220e 	mla	r2, r6, lr, r2
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	9b00      	ldr	r3, [sp, #0]
 800d5dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5e0:	b292      	uxth	r2, r2
 800d5e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d5e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800d5ee:	4581      	cmp	r9, r0
 800d5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5f4:	f84c 3b04 	str.w	r3, [ip], #4
 800d5f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5fc:	d2db      	bcs.n	800d5b6 <quorem+0x42>
 800d5fe:	f855 300b 	ldr.w	r3, [r5, fp]
 800d602:	b92b      	cbnz	r3, 800d610 <quorem+0x9c>
 800d604:	9b01      	ldr	r3, [sp, #4]
 800d606:	3b04      	subs	r3, #4
 800d608:	429d      	cmp	r5, r3
 800d60a:	461a      	mov	r2, r3
 800d60c:	d32c      	bcc.n	800d668 <quorem+0xf4>
 800d60e:	613c      	str	r4, [r7, #16]
 800d610:	4638      	mov	r0, r7
 800d612:	f001 f93d 	bl	800e890 <__mcmp>
 800d616:	2800      	cmp	r0, #0
 800d618:	db22      	blt.n	800d660 <quorem+0xec>
 800d61a:	3601      	adds	r6, #1
 800d61c:	4629      	mov	r1, r5
 800d61e:	2000      	movs	r0, #0
 800d620:	f858 2b04 	ldr.w	r2, [r8], #4
 800d624:	f8d1 c000 	ldr.w	ip, [r1]
 800d628:	b293      	uxth	r3, r2
 800d62a:	1ac3      	subs	r3, r0, r3
 800d62c:	0c12      	lsrs	r2, r2, #16
 800d62e:	fa13 f38c 	uxtah	r3, r3, ip
 800d632:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d636:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d640:	45c1      	cmp	r9, r8
 800d642:	f841 3b04 	str.w	r3, [r1], #4
 800d646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d64a:	d2e9      	bcs.n	800d620 <quorem+0xac>
 800d64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d654:	b922      	cbnz	r2, 800d660 <quorem+0xec>
 800d656:	3b04      	subs	r3, #4
 800d658:	429d      	cmp	r5, r3
 800d65a:	461a      	mov	r2, r3
 800d65c:	d30a      	bcc.n	800d674 <quorem+0x100>
 800d65e:	613c      	str	r4, [r7, #16]
 800d660:	4630      	mov	r0, r6
 800d662:	b003      	add	sp, #12
 800d664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d668:	6812      	ldr	r2, [r2, #0]
 800d66a:	3b04      	subs	r3, #4
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	d1ce      	bne.n	800d60e <quorem+0x9a>
 800d670:	3c01      	subs	r4, #1
 800d672:	e7c9      	b.n	800d608 <quorem+0x94>
 800d674:	6812      	ldr	r2, [r2, #0]
 800d676:	3b04      	subs	r3, #4
 800d678:	2a00      	cmp	r2, #0
 800d67a:	d1f0      	bne.n	800d65e <quorem+0xea>
 800d67c:	3c01      	subs	r4, #1
 800d67e:	e7eb      	b.n	800d658 <quorem+0xe4>
 800d680:	2000      	movs	r0, #0
 800d682:	e7ee      	b.n	800d662 <quorem+0xee>
 800d684:	0000      	movs	r0, r0
	...

0800d688 <_dtoa_r>:
 800d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	ed2d 8b04 	vpush	{d8-d9}
 800d690:	69c5      	ldr	r5, [r0, #28]
 800d692:	b093      	sub	sp, #76	; 0x4c
 800d694:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d698:	ec57 6b10 	vmov	r6, r7, d0
 800d69c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d6a0:	9107      	str	r1, [sp, #28]
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	920a      	str	r2, [sp, #40]	; 0x28
 800d6a6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6a8:	b975      	cbnz	r5, 800d6c8 <_dtoa_r+0x40>
 800d6aa:	2010      	movs	r0, #16
 800d6ac:	f7fe fd6a 	bl	800c184 <malloc>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	61e0      	str	r0, [r4, #28]
 800d6b4:	b920      	cbnz	r0, 800d6c0 <_dtoa_r+0x38>
 800d6b6:	4bae      	ldr	r3, [pc, #696]	; (800d970 <_dtoa_r+0x2e8>)
 800d6b8:	21ef      	movs	r1, #239	; 0xef
 800d6ba:	48ae      	ldr	r0, [pc, #696]	; (800d974 <_dtoa_r+0x2ec>)
 800d6bc:	f002 fb1c 	bl	800fcf8 <__assert_func>
 800d6c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d6c4:	6005      	str	r5, [r0, #0]
 800d6c6:	60c5      	str	r5, [r0, #12]
 800d6c8:	69e3      	ldr	r3, [r4, #28]
 800d6ca:	6819      	ldr	r1, [r3, #0]
 800d6cc:	b151      	cbz	r1, 800d6e4 <_dtoa_r+0x5c>
 800d6ce:	685a      	ldr	r2, [r3, #4]
 800d6d0:	604a      	str	r2, [r1, #4]
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4093      	lsls	r3, r2
 800d6d6:	608b      	str	r3, [r1, #8]
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f000 fe53 	bl	800e384 <_Bfree>
 800d6de:	69e3      	ldr	r3, [r4, #28]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	1e3b      	subs	r3, r7, #0
 800d6e6:	bfbb      	ittet	lt
 800d6e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d6ec:	9303      	strlt	r3, [sp, #12]
 800d6ee:	2300      	movge	r3, #0
 800d6f0:	2201      	movlt	r2, #1
 800d6f2:	bfac      	ite	ge
 800d6f4:	f8c8 3000 	strge.w	r3, [r8]
 800d6f8:	f8c8 2000 	strlt.w	r2, [r8]
 800d6fc:	4b9e      	ldr	r3, [pc, #632]	; (800d978 <_dtoa_r+0x2f0>)
 800d6fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d702:	ea33 0308 	bics.w	r3, r3, r8
 800d706:	d11b      	bne.n	800d740 <_dtoa_r+0xb8>
 800d708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d70a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d70e:	6013      	str	r3, [r2, #0]
 800d710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d714:	4333      	orrs	r3, r6
 800d716:	f000 8593 	beq.w	800e240 <_dtoa_r+0xbb8>
 800d71a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d71c:	b963      	cbnz	r3, 800d738 <_dtoa_r+0xb0>
 800d71e:	4b97      	ldr	r3, [pc, #604]	; (800d97c <_dtoa_r+0x2f4>)
 800d720:	e027      	b.n	800d772 <_dtoa_r+0xea>
 800d722:	4b97      	ldr	r3, [pc, #604]	; (800d980 <_dtoa_r+0x2f8>)
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	3308      	adds	r3, #8
 800d728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d72a:	6013      	str	r3, [r2, #0]
 800d72c:	9800      	ldr	r0, [sp, #0]
 800d72e:	b013      	add	sp, #76	; 0x4c
 800d730:	ecbd 8b04 	vpop	{d8-d9}
 800d734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d738:	4b90      	ldr	r3, [pc, #576]	; (800d97c <_dtoa_r+0x2f4>)
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	3303      	adds	r3, #3
 800d73e:	e7f3      	b.n	800d728 <_dtoa_r+0xa0>
 800d740:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d744:	2200      	movs	r2, #0
 800d746:	ec51 0b17 	vmov	r0, r1, d7
 800d74a:	eeb0 8a47 	vmov.f32	s16, s14
 800d74e:	eef0 8a67 	vmov.f32	s17, s15
 800d752:	2300      	movs	r3, #0
 800d754:	f7f3 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d758:	4681      	mov	r9, r0
 800d75a:	b160      	cbz	r0, 800d776 <_dtoa_r+0xee>
 800d75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d75e:	2301      	movs	r3, #1
 800d760:	6013      	str	r3, [r2, #0]
 800d762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 8568 	beq.w	800e23a <_dtoa_r+0xbb2>
 800d76a:	4b86      	ldr	r3, [pc, #536]	; (800d984 <_dtoa_r+0x2fc>)
 800d76c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	3b01      	subs	r3, #1
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	e7da      	b.n	800d72c <_dtoa_r+0xa4>
 800d776:	aa10      	add	r2, sp, #64	; 0x40
 800d778:	a911      	add	r1, sp, #68	; 0x44
 800d77a:	4620      	mov	r0, r4
 800d77c:	eeb0 0a48 	vmov.f32	s0, s16
 800d780:	eef0 0a68 	vmov.f32	s1, s17
 800d784:	f001 f99a 	bl	800eabc <__d2b>
 800d788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d78c:	4682      	mov	sl, r0
 800d78e:	2d00      	cmp	r5, #0
 800d790:	d07f      	beq.n	800d892 <_dtoa_r+0x20a>
 800d792:	ee18 3a90 	vmov	r3, s17
 800d796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d79a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d79e:	ec51 0b18 	vmov	r0, r1, d8
 800d7a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d7a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d7aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	4b75      	ldr	r3, [pc, #468]	; (800d988 <_dtoa_r+0x300>)
 800d7b4:	f7f2 fd68 	bl	8000288 <__aeabi_dsub>
 800d7b8:	a367      	add	r3, pc, #412	; (adr r3, 800d958 <_dtoa_r+0x2d0>)
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	f7f2 ff1b 	bl	80005f8 <__aeabi_dmul>
 800d7c2:	a367      	add	r3, pc, #412	; (adr r3, 800d960 <_dtoa_r+0x2d8>)
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	f7f2 fd60 	bl	800028c <__adddf3>
 800d7cc:	4606      	mov	r6, r0
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	f7f2 fea7 	bl	8000524 <__aeabi_i2d>
 800d7d6:	a364      	add	r3, pc, #400	; (adr r3, 800d968 <_dtoa_r+0x2e0>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	f7f2 ff0c 	bl	80005f8 <__aeabi_dmul>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	f7f2 fd50 	bl	800028c <__adddf3>
 800d7ec:	4606      	mov	r6, r0
 800d7ee:	460f      	mov	r7, r1
 800d7f0:	f7f3 f9b2 	bl	8000b58 <__aeabi_d2iz>
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	4683      	mov	fp, r0
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	f7f3 f96d 	bl	8000adc <__aeabi_dcmplt>
 800d802:	b148      	cbz	r0, 800d818 <_dtoa_r+0x190>
 800d804:	4658      	mov	r0, fp
 800d806:	f7f2 fe8d 	bl	8000524 <__aeabi_i2d>
 800d80a:	4632      	mov	r2, r6
 800d80c:	463b      	mov	r3, r7
 800d80e:	f7f3 f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d812:	b908      	cbnz	r0, 800d818 <_dtoa_r+0x190>
 800d814:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d818:	f1bb 0f16 	cmp.w	fp, #22
 800d81c:	d857      	bhi.n	800d8ce <_dtoa_r+0x246>
 800d81e:	4b5b      	ldr	r3, [pc, #364]	; (800d98c <_dtoa_r+0x304>)
 800d820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	ec51 0b18 	vmov	r0, r1, d8
 800d82c:	f7f3 f956 	bl	8000adc <__aeabi_dcmplt>
 800d830:	2800      	cmp	r0, #0
 800d832:	d04e      	beq.n	800d8d2 <_dtoa_r+0x24a>
 800d834:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d838:	2300      	movs	r3, #0
 800d83a:	930c      	str	r3, [sp, #48]	; 0x30
 800d83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d83e:	1b5b      	subs	r3, r3, r5
 800d840:	1e5a      	subs	r2, r3, #1
 800d842:	bf45      	ittet	mi
 800d844:	f1c3 0301 	rsbmi	r3, r3, #1
 800d848:	9305      	strmi	r3, [sp, #20]
 800d84a:	2300      	movpl	r3, #0
 800d84c:	2300      	movmi	r3, #0
 800d84e:	9206      	str	r2, [sp, #24]
 800d850:	bf54      	ite	pl
 800d852:	9305      	strpl	r3, [sp, #20]
 800d854:	9306      	strmi	r3, [sp, #24]
 800d856:	f1bb 0f00 	cmp.w	fp, #0
 800d85a:	db3c      	blt.n	800d8d6 <_dtoa_r+0x24e>
 800d85c:	9b06      	ldr	r3, [sp, #24]
 800d85e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d862:	445b      	add	r3, fp
 800d864:	9306      	str	r3, [sp, #24]
 800d866:	2300      	movs	r3, #0
 800d868:	9308      	str	r3, [sp, #32]
 800d86a:	9b07      	ldr	r3, [sp, #28]
 800d86c:	2b09      	cmp	r3, #9
 800d86e:	d868      	bhi.n	800d942 <_dtoa_r+0x2ba>
 800d870:	2b05      	cmp	r3, #5
 800d872:	bfc4      	itt	gt
 800d874:	3b04      	subgt	r3, #4
 800d876:	9307      	strgt	r3, [sp, #28]
 800d878:	9b07      	ldr	r3, [sp, #28]
 800d87a:	f1a3 0302 	sub.w	r3, r3, #2
 800d87e:	bfcc      	ite	gt
 800d880:	2500      	movgt	r5, #0
 800d882:	2501      	movle	r5, #1
 800d884:	2b03      	cmp	r3, #3
 800d886:	f200 8085 	bhi.w	800d994 <_dtoa_r+0x30c>
 800d88a:	e8df f003 	tbb	[pc, r3]
 800d88e:	3b2e      	.short	0x3b2e
 800d890:	5839      	.short	0x5839
 800d892:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d896:	441d      	add	r5, r3
 800d898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d89c:	2b20      	cmp	r3, #32
 800d89e:	bfc1      	itttt	gt
 800d8a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d8a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d8a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d8ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d8b0:	bfd6      	itet	le
 800d8b2:	f1c3 0320 	rsble	r3, r3, #32
 800d8b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d8ba:	fa06 f003 	lslle.w	r0, r6, r3
 800d8be:	f7f2 fe21 	bl	8000504 <__aeabi_ui2d>
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d8c8:	3d01      	subs	r5, #1
 800d8ca:	920e      	str	r2, [sp, #56]	; 0x38
 800d8cc:	e76f      	b.n	800d7ae <_dtoa_r+0x126>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e7b3      	b.n	800d83a <_dtoa_r+0x1b2>
 800d8d2:	900c      	str	r0, [sp, #48]	; 0x30
 800d8d4:	e7b2      	b.n	800d83c <_dtoa_r+0x1b4>
 800d8d6:	9b05      	ldr	r3, [sp, #20]
 800d8d8:	eba3 030b 	sub.w	r3, r3, fp
 800d8dc:	9305      	str	r3, [sp, #20]
 800d8de:	f1cb 0300 	rsb	r3, fp, #0
 800d8e2:	9308      	str	r3, [sp, #32]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8e8:	e7bf      	b.n	800d86a <_dtoa_r+0x1e2>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	dc52      	bgt.n	800d99a <_dtoa_r+0x312>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	920a      	str	r2, [sp, #40]	; 0x28
 800d8fe:	e00b      	b.n	800d918 <_dtoa_r+0x290>
 800d900:	2301      	movs	r3, #1
 800d902:	e7f3      	b.n	800d8ec <_dtoa_r+0x264>
 800d904:	2300      	movs	r3, #0
 800d906:	9309      	str	r3, [sp, #36]	; 0x24
 800d908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90a:	445b      	add	r3, fp
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	3301      	adds	r3, #1
 800d910:	2b01      	cmp	r3, #1
 800d912:	9304      	str	r3, [sp, #16]
 800d914:	bfb8      	it	lt
 800d916:	2301      	movlt	r3, #1
 800d918:	69e0      	ldr	r0, [r4, #28]
 800d91a:	2100      	movs	r1, #0
 800d91c:	2204      	movs	r2, #4
 800d91e:	f102 0614 	add.w	r6, r2, #20
 800d922:	429e      	cmp	r6, r3
 800d924:	d93d      	bls.n	800d9a2 <_dtoa_r+0x31a>
 800d926:	6041      	str	r1, [r0, #4]
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 fceb 	bl	800e304 <_Balloc>
 800d92e:	9000      	str	r0, [sp, #0]
 800d930:	2800      	cmp	r0, #0
 800d932:	d139      	bne.n	800d9a8 <_dtoa_r+0x320>
 800d934:	4b16      	ldr	r3, [pc, #88]	; (800d990 <_dtoa_r+0x308>)
 800d936:	4602      	mov	r2, r0
 800d938:	f240 11af 	movw	r1, #431	; 0x1af
 800d93c:	e6bd      	b.n	800d6ba <_dtoa_r+0x32>
 800d93e:	2301      	movs	r3, #1
 800d940:	e7e1      	b.n	800d906 <_dtoa_r+0x27e>
 800d942:	2501      	movs	r5, #1
 800d944:	2300      	movs	r3, #0
 800d946:	9307      	str	r3, [sp, #28]
 800d948:	9509      	str	r5, [sp, #36]	; 0x24
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295
 800d94e:	9301      	str	r3, [sp, #4]
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	2200      	movs	r2, #0
 800d954:	2312      	movs	r3, #18
 800d956:	e7d1      	b.n	800d8fc <_dtoa_r+0x274>
 800d958:	636f4361 	.word	0x636f4361
 800d95c:	3fd287a7 	.word	0x3fd287a7
 800d960:	8b60c8b3 	.word	0x8b60c8b3
 800d964:	3fc68a28 	.word	0x3fc68a28
 800d968:	509f79fb 	.word	0x509f79fb
 800d96c:	3fd34413 	.word	0x3fd34413
 800d970:	08010f77 	.word	0x08010f77
 800d974:	08010f8e 	.word	0x08010f8e
 800d978:	7ff00000 	.word	0x7ff00000
 800d97c:	08010f73 	.word	0x08010f73
 800d980:	08010f6a 	.word	0x08010f6a
 800d984:	08010f42 	.word	0x08010f42
 800d988:	3ff80000 	.word	0x3ff80000
 800d98c:	08011078 	.word	0x08011078
 800d990:	08010fe6 	.word	0x08010fe6
 800d994:	2301      	movs	r3, #1
 800d996:	9309      	str	r3, [sp, #36]	; 0x24
 800d998:	e7d7      	b.n	800d94a <_dtoa_r+0x2c2>
 800d99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	9304      	str	r3, [sp, #16]
 800d9a0:	e7ba      	b.n	800d918 <_dtoa_r+0x290>
 800d9a2:	3101      	adds	r1, #1
 800d9a4:	0052      	lsls	r2, r2, #1
 800d9a6:	e7ba      	b.n	800d91e <_dtoa_r+0x296>
 800d9a8:	69e3      	ldr	r3, [r4, #28]
 800d9aa:	9a00      	ldr	r2, [sp, #0]
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	9b04      	ldr	r3, [sp, #16]
 800d9b0:	2b0e      	cmp	r3, #14
 800d9b2:	f200 80a8 	bhi.w	800db06 <_dtoa_r+0x47e>
 800d9b6:	2d00      	cmp	r5, #0
 800d9b8:	f000 80a5 	beq.w	800db06 <_dtoa_r+0x47e>
 800d9bc:	f1bb 0f00 	cmp.w	fp, #0
 800d9c0:	dd38      	ble.n	800da34 <_dtoa_r+0x3ac>
 800d9c2:	4bc0      	ldr	r3, [pc, #768]	; (800dcc4 <_dtoa_r+0x63c>)
 800d9c4:	f00b 020f 	and.w	r2, fp, #15
 800d9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d9d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d9d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d9d8:	d019      	beq.n	800da0e <_dtoa_r+0x386>
 800d9da:	4bbb      	ldr	r3, [pc, #748]	; (800dcc8 <_dtoa_r+0x640>)
 800d9dc:	ec51 0b18 	vmov	r0, r1, d8
 800d9e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d9e4:	f7f2 ff32 	bl	800084c <__aeabi_ddiv>
 800d9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9ec:	f008 080f 	and.w	r8, r8, #15
 800d9f0:	2503      	movs	r5, #3
 800d9f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dcc8 <_dtoa_r+0x640>
 800d9f6:	f1b8 0f00 	cmp.w	r8, #0
 800d9fa:	d10a      	bne.n	800da12 <_dtoa_r+0x38a>
 800d9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da00:	4632      	mov	r2, r6
 800da02:	463b      	mov	r3, r7
 800da04:	f7f2 ff22 	bl	800084c <__aeabi_ddiv>
 800da08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da0c:	e02b      	b.n	800da66 <_dtoa_r+0x3de>
 800da0e:	2502      	movs	r5, #2
 800da10:	e7ef      	b.n	800d9f2 <_dtoa_r+0x36a>
 800da12:	f018 0f01 	tst.w	r8, #1
 800da16:	d008      	beq.n	800da2a <_dtoa_r+0x3a2>
 800da18:	4630      	mov	r0, r6
 800da1a:	4639      	mov	r1, r7
 800da1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da20:	f7f2 fdea 	bl	80005f8 <__aeabi_dmul>
 800da24:	3501      	adds	r5, #1
 800da26:	4606      	mov	r6, r0
 800da28:	460f      	mov	r7, r1
 800da2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800da2e:	f109 0908 	add.w	r9, r9, #8
 800da32:	e7e0      	b.n	800d9f6 <_dtoa_r+0x36e>
 800da34:	f000 809f 	beq.w	800db76 <_dtoa_r+0x4ee>
 800da38:	f1cb 0600 	rsb	r6, fp, #0
 800da3c:	4ba1      	ldr	r3, [pc, #644]	; (800dcc4 <_dtoa_r+0x63c>)
 800da3e:	4fa2      	ldr	r7, [pc, #648]	; (800dcc8 <_dtoa_r+0x640>)
 800da40:	f006 020f 	and.w	r2, r6, #15
 800da44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	ec51 0b18 	vmov	r0, r1, d8
 800da50:	f7f2 fdd2 	bl	80005f8 <__aeabi_dmul>
 800da54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da58:	1136      	asrs	r6, r6, #4
 800da5a:	2300      	movs	r3, #0
 800da5c:	2502      	movs	r5, #2
 800da5e:	2e00      	cmp	r6, #0
 800da60:	d17e      	bne.n	800db60 <_dtoa_r+0x4d8>
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1d0      	bne.n	800da08 <_dtoa_r+0x380>
 800da66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 8084 	beq.w	800db7a <_dtoa_r+0x4f2>
 800da72:	4b96      	ldr	r3, [pc, #600]	; (800dccc <_dtoa_r+0x644>)
 800da74:	2200      	movs	r2, #0
 800da76:	4640      	mov	r0, r8
 800da78:	4649      	mov	r1, r9
 800da7a:	f7f3 f82f 	bl	8000adc <__aeabi_dcmplt>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d07b      	beq.n	800db7a <_dtoa_r+0x4f2>
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d078      	beq.n	800db7a <_dtoa_r+0x4f2>
 800da88:	9b01      	ldr	r3, [sp, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	dd39      	ble.n	800db02 <_dtoa_r+0x47a>
 800da8e:	4b90      	ldr	r3, [pc, #576]	; (800dcd0 <_dtoa_r+0x648>)
 800da90:	2200      	movs	r2, #0
 800da92:	4640      	mov	r0, r8
 800da94:	4649      	mov	r1, r9
 800da96:	f7f2 fdaf 	bl	80005f8 <__aeabi_dmul>
 800da9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da9e:	9e01      	ldr	r6, [sp, #4]
 800daa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800daa4:	3501      	adds	r5, #1
 800daa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800daaa:	4628      	mov	r0, r5
 800daac:	f7f2 fd3a 	bl	8000524 <__aeabi_i2d>
 800dab0:	4642      	mov	r2, r8
 800dab2:	464b      	mov	r3, r9
 800dab4:	f7f2 fda0 	bl	80005f8 <__aeabi_dmul>
 800dab8:	4b86      	ldr	r3, [pc, #536]	; (800dcd4 <_dtoa_r+0x64c>)
 800daba:	2200      	movs	r2, #0
 800dabc:	f7f2 fbe6 	bl	800028c <__adddf3>
 800dac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dac8:	9303      	str	r3, [sp, #12]
 800daca:	2e00      	cmp	r6, #0
 800dacc:	d158      	bne.n	800db80 <_dtoa_r+0x4f8>
 800dace:	4b82      	ldr	r3, [pc, #520]	; (800dcd8 <_dtoa_r+0x650>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	4640      	mov	r0, r8
 800dad4:	4649      	mov	r1, r9
 800dad6:	f7f2 fbd7 	bl	8000288 <__aeabi_dsub>
 800dada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dade:	4680      	mov	r8, r0
 800dae0:	4689      	mov	r9, r1
 800dae2:	f7f3 f819 	bl	8000b18 <__aeabi_dcmpgt>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f040 8296 	bne.w	800e018 <_dtoa_r+0x990>
 800daec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800daf0:	4640      	mov	r0, r8
 800daf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800daf6:	4649      	mov	r1, r9
 800daf8:	f7f2 fff0 	bl	8000adc <__aeabi_dcmplt>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	f040 8289 	bne.w	800e014 <_dtoa_r+0x98c>
 800db02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800db06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f2c0 814e 	blt.w	800ddaa <_dtoa_r+0x722>
 800db0e:	f1bb 0f0e 	cmp.w	fp, #14
 800db12:	f300 814a 	bgt.w	800ddaa <_dtoa_r+0x722>
 800db16:	4b6b      	ldr	r3, [pc, #428]	; (800dcc4 <_dtoa_r+0x63c>)
 800db18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db22:	2b00      	cmp	r3, #0
 800db24:	f280 80dc 	bge.w	800dce0 <_dtoa_r+0x658>
 800db28:	9b04      	ldr	r3, [sp, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	f300 80d8 	bgt.w	800dce0 <_dtoa_r+0x658>
 800db30:	f040 826f 	bne.w	800e012 <_dtoa_r+0x98a>
 800db34:	4b68      	ldr	r3, [pc, #416]	; (800dcd8 <_dtoa_r+0x650>)
 800db36:	2200      	movs	r2, #0
 800db38:	4640      	mov	r0, r8
 800db3a:	4649      	mov	r1, r9
 800db3c:	f7f2 fd5c 	bl	80005f8 <__aeabi_dmul>
 800db40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db44:	f7f2 ffde 	bl	8000b04 <__aeabi_dcmpge>
 800db48:	9e04      	ldr	r6, [sp, #16]
 800db4a:	4637      	mov	r7, r6
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f040 8245 	bne.w	800dfdc <_dtoa_r+0x954>
 800db52:	9d00      	ldr	r5, [sp, #0]
 800db54:	2331      	movs	r3, #49	; 0x31
 800db56:	f805 3b01 	strb.w	r3, [r5], #1
 800db5a:	f10b 0b01 	add.w	fp, fp, #1
 800db5e:	e241      	b.n	800dfe4 <_dtoa_r+0x95c>
 800db60:	07f2      	lsls	r2, r6, #31
 800db62:	d505      	bpl.n	800db70 <_dtoa_r+0x4e8>
 800db64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db68:	f7f2 fd46 	bl	80005f8 <__aeabi_dmul>
 800db6c:	3501      	adds	r5, #1
 800db6e:	2301      	movs	r3, #1
 800db70:	1076      	asrs	r6, r6, #1
 800db72:	3708      	adds	r7, #8
 800db74:	e773      	b.n	800da5e <_dtoa_r+0x3d6>
 800db76:	2502      	movs	r5, #2
 800db78:	e775      	b.n	800da66 <_dtoa_r+0x3de>
 800db7a:	9e04      	ldr	r6, [sp, #16]
 800db7c:	465f      	mov	r7, fp
 800db7e:	e792      	b.n	800daa6 <_dtoa_r+0x41e>
 800db80:	9900      	ldr	r1, [sp, #0]
 800db82:	4b50      	ldr	r3, [pc, #320]	; (800dcc4 <_dtoa_r+0x63c>)
 800db84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db88:	4431      	add	r1, r6
 800db8a:	9102      	str	r1, [sp, #8]
 800db8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db8e:	eeb0 9a47 	vmov.f32	s18, s14
 800db92:	eef0 9a67 	vmov.f32	s19, s15
 800db96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db9e:	2900      	cmp	r1, #0
 800dba0:	d044      	beq.n	800dc2c <_dtoa_r+0x5a4>
 800dba2:	494e      	ldr	r1, [pc, #312]	; (800dcdc <_dtoa_r+0x654>)
 800dba4:	2000      	movs	r0, #0
 800dba6:	f7f2 fe51 	bl	800084c <__aeabi_ddiv>
 800dbaa:	ec53 2b19 	vmov	r2, r3, d9
 800dbae:	f7f2 fb6b 	bl	8000288 <__aeabi_dsub>
 800dbb2:	9d00      	ldr	r5, [sp, #0]
 800dbb4:	ec41 0b19 	vmov	d9, r0, r1
 800dbb8:	4649      	mov	r1, r9
 800dbba:	4640      	mov	r0, r8
 800dbbc:	f7f2 ffcc 	bl	8000b58 <__aeabi_d2iz>
 800dbc0:	4606      	mov	r6, r0
 800dbc2:	f7f2 fcaf 	bl	8000524 <__aeabi_i2d>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	4640      	mov	r0, r8
 800dbcc:	4649      	mov	r1, r9
 800dbce:	f7f2 fb5b 	bl	8000288 <__aeabi_dsub>
 800dbd2:	3630      	adds	r6, #48	; 0x30
 800dbd4:	f805 6b01 	strb.w	r6, [r5], #1
 800dbd8:	ec53 2b19 	vmov	r2, r3, d9
 800dbdc:	4680      	mov	r8, r0
 800dbde:	4689      	mov	r9, r1
 800dbe0:	f7f2 ff7c 	bl	8000adc <__aeabi_dcmplt>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d164      	bne.n	800dcb2 <_dtoa_r+0x62a>
 800dbe8:	4642      	mov	r2, r8
 800dbea:	464b      	mov	r3, r9
 800dbec:	4937      	ldr	r1, [pc, #220]	; (800dccc <_dtoa_r+0x644>)
 800dbee:	2000      	movs	r0, #0
 800dbf0:	f7f2 fb4a 	bl	8000288 <__aeabi_dsub>
 800dbf4:	ec53 2b19 	vmov	r2, r3, d9
 800dbf8:	f7f2 ff70 	bl	8000adc <__aeabi_dcmplt>
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	f040 80b6 	bne.w	800dd6e <_dtoa_r+0x6e6>
 800dc02:	9b02      	ldr	r3, [sp, #8]
 800dc04:	429d      	cmp	r5, r3
 800dc06:	f43f af7c 	beq.w	800db02 <_dtoa_r+0x47a>
 800dc0a:	4b31      	ldr	r3, [pc, #196]	; (800dcd0 <_dtoa_r+0x648>)
 800dc0c:	ec51 0b19 	vmov	r0, r1, d9
 800dc10:	2200      	movs	r2, #0
 800dc12:	f7f2 fcf1 	bl	80005f8 <__aeabi_dmul>
 800dc16:	4b2e      	ldr	r3, [pc, #184]	; (800dcd0 <_dtoa_r+0x648>)
 800dc18:	ec41 0b19 	vmov	d9, r0, r1
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	4640      	mov	r0, r8
 800dc20:	4649      	mov	r1, r9
 800dc22:	f7f2 fce9 	bl	80005f8 <__aeabi_dmul>
 800dc26:	4680      	mov	r8, r0
 800dc28:	4689      	mov	r9, r1
 800dc2a:	e7c5      	b.n	800dbb8 <_dtoa_r+0x530>
 800dc2c:	ec51 0b17 	vmov	r0, r1, d7
 800dc30:	f7f2 fce2 	bl	80005f8 <__aeabi_dmul>
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	9d00      	ldr	r5, [sp, #0]
 800dc38:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc3a:	ec41 0b19 	vmov	d9, r0, r1
 800dc3e:	4649      	mov	r1, r9
 800dc40:	4640      	mov	r0, r8
 800dc42:	f7f2 ff89 	bl	8000b58 <__aeabi_d2iz>
 800dc46:	4606      	mov	r6, r0
 800dc48:	f7f2 fc6c 	bl	8000524 <__aeabi_i2d>
 800dc4c:	3630      	adds	r6, #48	; 0x30
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4640      	mov	r0, r8
 800dc54:	4649      	mov	r1, r9
 800dc56:	f7f2 fb17 	bl	8000288 <__aeabi_dsub>
 800dc5a:	f805 6b01 	strb.w	r6, [r5], #1
 800dc5e:	9b02      	ldr	r3, [sp, #8]
 800dc60:	429d      	cmp	r5, r3
 800dc62:	4680      	mov	r8, r0
 800dc64:	4689      	mov	r9, r1
 800dc66:	f04f 0200 	mov.w	r2, #0
 800dc6a:	d124      	bne.n	800dcb6 <_dtoa_r+0x62e>
 800dc6c:	4b1b      	ldr	r3, [pc, #108]	; (800dcdc <_dtoa_r+0x654>)
 800dc6e:	ec51 0b19 	vmov	r0, r1, d9
 800dc72:	f7f2 fb0b 	bl	800028c <__adddf3>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	f7f2 ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d173      	bne.n	800dd6e <_dtoa_r+0x6e6>
 800dc86:	ec53 2b19 	vmov	r2, r3, d9
 800dc8a:	4914      	ldr	r1, [pc, #80]	; (800dcdc <_dtoa_r+0x654>)
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	f7f2 fafb 	bl	8000288 <__aeabi_dsub>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	4640      	mov	r0, r8
 800dc98:	4649      	mov	r1, r9
 800dc9a:	f7f2 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f43f af2f 	beq.w	800db02 <_dtoa_r+0x47a>
 800dca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dca6:	1e6b      	subs	r3, r5, #1
 800dca8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcae:	2b30      	cmp	r3, #48	; 0x30
 800dcb0:	d0f8      	beq.n	800dca4 <_dtoa_r+0x61c>
 800dcb2:	46bb      	mov	fp, r7
 800dcb4:	e04a      	b.n	800dd4c <_dtoa_r+0x6c4>
 800dcb6:	4b06      	ldr	r3, [pc, #24]	; (800dcd0 <_dtoa_r+0x648>)
 800dcb8:	f7f2 fc9e 	bl	80005f8 <__aeabi_dmul>
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	e7bd      	b.n	800dc3e <_dtoa_r+0x5b6>
 800dcc2:	bf00      	nop
 800dcc4:	08011078 	.word	0x08011078
 800dcc8:	08011050 	.word	0x08011050
 800dccc:	3ff00000 	.word	0x3ff00000
 800dcd0:	40240000 	.word	0x40240000
 800dcd4:	401c0000 	.word	0x401c0000
 800dcd8:	40140000 	.word	0x40140000
 800dcdc:	3fe00000 	.word	0x3fe00000
 800dce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dce4:	9d00      	ldr	r5, [sp, #0]
 800dce6:	4642      	mov	r2, r8
 800dce8:	464b      	mov	r3, r9
 800dcea:	4630      	mov	r0, r6
 800dcec:	4639      	mov	r1, r7
 800dcee:	f7f2 fdad 	bl	800084c <__aeabi_ddiv>
 800dcf2:	f7f2 ff31 	bl	8000b58 <__aeabi_d2iz>
 800dcf6:	9001      	str	r0, [sp, #4]
 800dcf8:	f7f2 fc14 	bl	8000524 <__aeabi_i2d>
 800dcfc:	4642      	mov	r2, r8
 800dcfe:	464b      	mov	r3, r9
 800dd00:	f7f2 fc7a 	bl	80005f8 <__aeabi_dmul>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4630      	mov	r0, r6
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	f7f2 fabc 	bl	8000288 <__aeabi_dsub>
 800dd10:	9e01      	ldr	r6, [sp, #4]
 800dd12:	9f04      	ldr	r7, [sp, #16]
 800dd14:	3630      	adds	r6, #48	; 0x30
 800dd16:	f805 6b01 	strb.w	r6, [r5], #1
 800dd1a:	9e00      	ldr	r6, [sp, #0]
 800dd1c:	1bae      	subs	r6, r5, r6
 800dd1e:	42b7      	cmp	r7, r6
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	d134      	bne.n	800dd90 <_dtoa_r+0x708>
 800dd26:	f7f2 fab1 	bl	800028c <__adddf3>
 800dd2a:	4642      	mov	r2, r8
 800dd2c:	464b      	mov	r3, r9
 800dd2e:	4606      	mov	r6, r0
 800dd30:	460f      	mov	r7, r1
 800dd32:	f7f2 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 800dd36:	b9c8      	cbnz	r0, 800dd6c <_dtoa_r+0x6e4>
 800dd38:	4642      	mov	r2, r8
 800dd3a:	464b      	mov	r3, r9
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	4639      	mov	r1, r7
 800dd40:	f7f2 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd44:	b110      	cbz	r0, 800dd4c <_dtoa_r+0x6c4>
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	07db      	lsls	r3, r3, #31
 800dd4a:	d40f      	bmi.n	800dd6c <_dtoa_r+0x6e4>
 800dd4c:	4651      	mov	r1, sl
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f000 fb18 	bl	800e384 <_Bfree>
 800dd54:	2300      	movs	r3, #0
 800dd56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd58:	702b      	strb	r3, [r5, #0]
 800dd5a:	f10b 0301 	add.w	r3, fp, #1
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f43f ace2 	beq.w	800d72c <_dtoa_r+0xa4>
 800dd68:	601d      	str	r5, [r3, #0]
 800dd6a:	e4df      	b.n	800d72c <_dtoa_r+0xa4>
 800dd6c:	465f      	mov	r7, fp
 800dd6e:	462b      	mov	r3, r5
 800dd70:	461d      	mov	r5, r3
 800dd72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd76:	2a39      	cmp	r2, #57	; 0x39
 800dd78:	d106      	bne.n	800dd88 <_dtoa_r+0x700>
 800dd7a:	9a00      	ldr	r2, [sp, #0]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d1f7      	bne.n	800dd70 <_dtoa_r+0x6e8>
 800dd80:	9900      	ldr	r1, [sp, #0]
 800dd82:	2230      	movs	r2, #48	; 0x30
 800dd84:	3701      	adds	r7, #1
 800dd86:	700a      	strb	r2, [r1, #0]
 800dd88:	781a      	ldrb	r2, [r3, #0]
 800dd8a:	3201      	adds	r2, #1
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	e790      	b.n	800dcb2 <_dtoa_r+0x62a>
 800dd90:	4ba3      	ldr	r3, [pc, #652]	; (800e020 <_dtoa_r+0x998>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	f7f2 fc30 	bl	80005f8 <__aeabi_dmul>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460f      	mov	r7, r1
 800dda0:	f7f2 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d09e      	beq.n	800dce6 <_dtoa_r+0x65e>
 800dda8:	e7d0      	b.n	800dd4c <_dtoa_r+0x6c4>
 800ddaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddac:	2a00      	cmp	r2, #0
 800ddae:	f000 80ca 	beq.w	800df46 <_dtoa_r+0x8be>
 800ddb2:	9a07      	ldr	r2, [sp, #28]
 800ddb4:	2a01      	cmp	r2, #1
 800ddb6:	f300 80ad 	bgt.w	800df14 <_dtoa_r+0x88c>
 800ddba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddbc:	2a00      	cmp	r2, #0
 800ddbe:	f000 80a5 	beq.w	800df0c <_dtoa_r+0x884>
 800ddc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ddc6:	9e08      	ldr	r6, [sp, #32]
 800ddc8:	9d05      	ldr	r5, [sp, #20]
 800ddca:	9a05      	ldr	r2, [sp, #20]
 800ddcc:	441a      	add	r2, r3
 800ddce:	9205      	str	r2, [sp, #20]
 800ddd0:	9a06      	ldr	r2, [sp, #24]
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	441a      	add	r2, r3
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	9206      	str	r2, [sp, #24]
 800ddda:	f000 fbd3 	bl	800e584 <__i2b>
 800ddde:	4607      	mov	r7, r0
 800dde0:	b165      	cbz	r5, 800ddfc <_dtoa_r+0x774>
 800dde2:	9b06      	ldr	r3, [sp, #24]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd09      	ble.n	800ddfc <_dtoa_r+0x774>
 800dde8:	42ab      	cmp	r3, r5
 800ddea:	9a05      	ldr	r2, [sp, #20]
 800ddec:	bfa8      	it	ge
 800ddee:	462b      	movge	r3, r5
 800ddf0:	1ad2      	subs	r2, r2, r3
 800ddf2:	9205      	str	r2, [sp, #20]
 800ddf4:	9a06      	ldr	r2, [sp, #24]
 800ddf6:	1aed      	subs	r5, r5, r3
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	9306      	str	r3, [sp, #24]
 800ddfc:	9b08      	ldr	r3, [sp, #32]
 800ddfe:	b1f3      	cbz	r3, 800de3e <_dtoa_r+0x7b6>
 800de00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 80a3 	beq.w	800df4e <_dtoa_r+0x8c6>
 800de08:	2e00      	cmp	r6, #0
 800de0a:	dd10      	ble.n	800de2e <_dtoa_r+0x7a6>
 800de0c:	4639      	mov	r1, r7
 800de0e:	4632      	mov	r2, r6
 800de10:	4620      	mov	r0, r4
 800de12:	f000 fc77 	bl	800e704 <__pow5mult>
 800de16:	4652      	mov	r2, sl
 800de18:	4601      	mov	r1, r0
 800de1a:	4607      	mov	r7, r0
 800de1c:	4620      	mov	r0, r4
 800de1e:	f000 fbc7 	bl	800e5b0 <__multiply>
 800de22:	4651      	mov	r1, sl
 800de24:	4680      	mov	r8, r0
 800de26:	4620      	mov	r0, r4
 800de28:	f000 faac 	bl	800e384 <_Bfree>
 800de2c:	46c2      	mov	sl, r8
 800de2e:	9b08      	ldr	r3, [sp, #32]
 800de30:	1b9a      	subs	r2, r3, r6
 800de32:	d004      	beq.n	800de3e <_dtoa_r+0x7b6>
 800de34:	4651      	mov	r1, sl
 800de36:	4620      	mov	r0, r4
 800de38:	f000 fc64 	bl	800e704 <__pow5mult>
 800de3c:	4682      	mov	sl, r0
 800de3e:	2101      	movs	r1, #1
 800de40:	4620      	mov	r0, r4
 800de42:	f000 fb9f 	bl	800e584 <__i2b>
 800de46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	4606      	mov	r6, r0
 800de4c:	f340 8081 	ble.w	800df52 <_dtoa_r+0x8ca>
 800de50:	461a      	mov	r2, r3
 800de52:	4601      	mov	r1, r0
 800de54:	4620      	mov	r0, r4
 800de56:	f000 fc55 	bl	800e704 <__pow5mult>
 800de5a:	9b07      	ldr	r3, [sp, #28]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	4606      	mov	r6, r0
 800de60:	dd7a      	ble.n	800df58 <_dtoa_r+0x8d0>
 800de62:	f04f 0800 	mov.w	r8, #0
 800de66:	6933      	ldr	r3, [r6, #16]
 800de68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800de6c:	6918      	ldr	r0, [r3, #16]
 800de6e:	f000 fb3b 	bl	800e4e8 <__hi0bits>
 800de72:	f1c0 0020 	rsb	r0, r0, #32
 800de76:	9b06      	ldr	r3, [sp, #24]
 800de78:	4418      	add	r0, r3
 800de7a:	f010 001f 	ands.w	r0, r0, #31
 800de7e:	f000 8094 	beq.w	800dfaa <_dtoa_r+0x922>
 800de82:	f1c0 0320 	rsb	r3, r0, #32
 800de86:	2b04      	cmp	r3, #4
 800de88:	f340 8085 	ble.w	800df96 <_dtoa_r+0x90e>
 800de8c:	9b05      	ldr	r3, [sp, #20]
 800de8e:	f1c0 001c 	rsb	r0, r0, #28
 800de92:	4403      	add	r3, r0
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	4403      	add	r3, r0
 800de9a:	4405      	add	r5, r0
 800de9c:	9306      	str	r3, [sp, #24]
 800de9e:	9b05      	ldr	r3, [sp, #20]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	dd05      	ble.n	800deb0 <_dtoa_r+0x828>
 800dea4:	4651      	mov	r1, sl
 800dea6:	461a      	mov	r2, r3
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 fc85 	bl	800e7b8 <__lshift>
 800deae:	4682      	mov	sl, r0
 800deb0:	9b06      	ldr	r3, [sp, #24]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dd05      	ble.n	800dec2 <_dtoa_r+0x83a>
 800deb6:	4631      	mov	r1, r6
 800deb8:	461a      	mov	r2, r3
 800deba:	4620      	mov	r0, r4
 800debc:	f000 fc7c 	bl	800e7b8 <__lshift>
 800dec0:	4606      	mov	r6, r0
 800dec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d072      	beq.n	800dfae <_dtoa_r+0x926>
 800dec8:	4631      	mov	r1, r6
 800deca:	4650      	mov	r0, sl
 800decc:	f000 fce0 	bl	800e890 <__mcmp>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	da6c      	bge.n	800dfae <_dtoa_r+0x926>
 800ded4:	2300      	movs	r3, #0
 800ded6:	4651      	mov	r1, sl
 800ded8:	220a      	movs	r2, #10
 800deda:	4620      	mov	r0, r4
 800dedc:	f000 fa74 	bl	800e3c8 <__multadd>
 800dee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dee6:	4682      	mov	sl, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 81b0 	beq.w	800e24e <_dtoa_r+0xbc6>
 800deee:	2300      	movs	r3, #0
 800def0:	4639      	mov	r1, r7
 800def2:	220a      	movs	r2, #10
 800def4:	4620      	mov	r0, r4
 800def6:	f000 fa67 	bl	800e3c8 <__multadd>
 800defa:	9b01      	ldr	r3, [sp, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	4607      	mov	r7, r0
 800df00:	f300 8096 	bgt.w	800e030 <_dtoa_r+0x9a8>
 800df04:	9b07      	ldr	r3, [sp, #28]
 800df06:	2b02      	cmp	r3, #2
 800df08:	dc59      	bgt.n	800dfbe <_dtoa_r+0x936>
 800df0a:	e091      	b.n	800e030 <_dtoa_r+0x9a8>
 800df0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df12:	e758      	b.n	800ddc6 <_dtoa_r+0x73e>
 800df14:	9b04      	ldr	r3, [sp, #16]
 800df16:	1e5e      	subs	r6, r3, #1
 800df18:	9b08      	ldr	r3, [sp, #32]
 800df1a:	42b3      	cmp	r3, r6
 800df1c:	bfbf      	itttt	lt
 800df1e:	9b08      	ldrlt	r3, [sp, #32]
 800df20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800df22:	9608      	strlt	r6, [sp, #32]
 800df24:	1af3      	sublt	r3, r6, r3
 800df26:	bfb4      	ite	lt
 800df28:	18d2      	addlt	r2, r2, r3
 800df2a:	1b9e      	subge	r6, r3, r6
 800df2c:	9b04      	ldr	r3, [sp, #16]
 800df2e:	bfbc      	itt	lt
 800df30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800df32:	2600      	movlt	r6, #0
 800df34:	2b00      	cmp	r3, #0
 800df36:	bfb7      	itett	lt
 800df38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800df3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800df40:	1a9d      	sublt	r5, r3, r2
 800df42:	2300      	movlt	r3, #0
 800df44:	e741      	b.n	800ddca <_dtoa_r+0x742>
 800df46:	9e08      	ldr	r6, [sp, #32]
 800df48:	9d05      	ldr	r5, [sp, #20]
 800df4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df4c:	e748      	b.n	800dde0 <_dtoa_r+0x758>
 800df4e:	9a08      	ldr	r2, [sp, #32]
 800df50:	e770      	b.n	800de34 <_dtoa_r+0x7ac>
 800df52:	9b07      	ldr	r3, [sp, #28]
 800df54:	2b01      	cmp	r3, #1
 800df56:	dc19      	bgt.n	800df8c <_dtoa_r+0x904>
 800df58:	9b02      	ldr	r3, [sp, #8]
 800df5a:	b9bb      	cbnz	r3, 800df8c <_dtoa_r+0x904>
 800df5c:	9b03      	ldr	r3, [sp, #12]
 800df5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df62:	b99b      	cbnz	r3, 800df8c <_dtoa_r+0x904>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df6a:	0d1b      	lsrs	r3, r3, #20
 800df6c:	051b      	lsls	r3, r3, #20
 800df6e:	b183      	cbz	r3, 800df92 <_dtoa_r+0x90a>
 800df70:	9b05      	ldr	r3, [sp, #20]
 800df72:	3301      	adds	r3, #1
 800df74:	9305      	str	r3, [sp, #20]
 800df76:	9b06      	ldr	r3, [sp, #24]
 800df78:	3301      	adds	r3, #1
 800df7a:	9306      	str	r3, [sp, #24]
 800df7c:	f04f 0801 	mov.w	r8, #1
 800df80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df82:	2b00      	cmp	r3, #0
 800df84:	f47f af6f 	bne.w	800de66 <_dtoa_r+0x7de>
 800df88:	2001      	movs	r0, #1
 800df8a:	e774      	b.n	800de76 <_dtoa_r+0x7ee>
 800df8c:	f04f 0800 	mov.w	r8, #0
 800df90:	e7f6      	b.n	800df80 <_dtoa_r+0x8f8>
 800df92:	4698      	mov	r8, r3
 800df94:	e7f4      	b.n	800df80 <_dtoa_r+0x8f8>
 800df96:	d082      	beq.n	800de9e <_dtoa_r+0x816>
 800df98:	9a05      	ldr	r2, [sp, #20]
 800df9a:	331c      	adds	r3, #28
 800df9c:	441a      	add	r2, r3
 800df9e:	9205      	str	r2, [sp, #20]
 800dfa0:	9a06      	ldr	r2, [sp, #24]
 800dfa2:	441a      	add	r2, r3
 800dfa4:	441d      	add	r5, r3
 800dfa6:	9206      	str	r2, [sp, #24]
 800dfa8:	e779      	b.n	800de9e <_dtoa_r+0x816>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	e7f4      	b.n	800df98 <_dtoa_r+0x910>
 800dfae:	9b04      	ldr	r3, [sp, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dc37      	bgt.n	800e024 <_dtoa_r+0x99c>
 800dfb4:	9b07      	ldr	r3, [sp, #28]
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	dd34      	ble.n	800e024 <_dtoa_r+0x99c>
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	9b01      	ldr	r3, [sp, #4]
 800dfc0:	b963      	cbnz	r3, 800dfdc <_dtoa_r+0x954>
 800dfc2:	4631      	mov	r1, r6
 800dfc4:	2205      	movs	r2, #5
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 f9fe 	bl	800e3c8 <__multadd>
 800dfcc:	4601      	mov	r1, r0
 800dfce:	4606      	mov	r6, r0
 800dfd0:	4650      	mov	r0, sl
 800dfd2:	f000 fc5d 	bl	800e890 <__mcmp>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f73f adbb 	bgt.w	800db52 <_dtoa_r+0x4ca>
 800dfdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfde:	9d00      	ldr	r5, [sp, #0]
 800dfe0:	ea6f 0b03 	mvn.w	fp, r3
 800dfe4:	f04f 0800 	mov.w	r8, #0
 800dfe8:	4631      	mov	r1, r6
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 f9ca 	bl	800e384 <_Bfree>
 800dff0:	2f00      	cmp	r7, #0
 800dff2:	f43f aeab 	beq.w	800dd4c <_dtoa_r+0x6c4>
 800dff6:	f1b8 0f00 	cmp.w	r8, #0
 800dffa:	d005      	beq.n	800e008 <_dtoa_r+0x980>
 800dffc:	45b8      	cmp	r8, r7
 800dffe:	d003      	beq.n	800e008 <_dtoa_r+0x980>
 800e000:	4641      	mov	r1, r8
 800e002:	4620      	mov	r0, r4
 800e004:	f000 f9be 	bl	800e384 <_Bfree>
 800e008:	4639      	mov	r1, r7
 800e00a:	4620      	mov	r0, r4
 800e00c:	f000 f9ba 	bl	800e384 <_Bfree>
 800e010:	e69c      	b.n	800dd4c <_dtoa_r+0x6c4>
 800e012:	2600      	movs	r6, #0
 800e014:	4637      	mov	r7, r6
 800e016:	e7e1      	b.n	800dfdc <_dtoa_r+0x954>
 800e018:	46bb      	mov	fp, r7
 800e01a:	4637      	mov	r7, r6
 800e01c:	e599      	b.n	800db52 <_dtoa_r+0x4ca>
 800e01e:	bf00      	nop
 800e020:	40240000 	.word	0x40240000
 800e024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e026:	2b00      	cmp	r3, #0
 800e028:	f000 80c8 	beq.w	800e1bc <_dtoa_r+0xb34>
 800e02c:	9b04      	ldr	r3, [sp, #16]
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	2d00      	cmp	r5, #0
 800e032:	dd05      	ble.n	800e040 <_dtoa_r+0x9b8>
 800e034:	4639      	mov	r1, r7
 800e036:	462a      	mov	r2, r5
 800e038:	4620      	mov	r0, r4
 800e03a:	f000 fbbd 	bl	800e7b8 <__lshift>
 800e03e:	4607      	mov	r7, r0
 800e040:	f1b8 0f00 	cmp.w	r8, #0
 800e044:	d05b      	beq.n	800e0fe <_dtoa_r+0xa76>
 800e046:	6879      	ldr	r1, [r7, #4]
 800e048:	4620      	mov	r0, r4
 800e04a:	f000 f95b 	bl	800e304 <_Balloc>
 800e04e:	4605      	mov	r5, r0
 800e050:	b928      	cbnz	r0, 800e05e <_dtoa_r+0x9d6>
 800e052:	4b83      	ldr	r3, [pc, #524]	; (800e260 <_dtoa_r+0xbd8>)
 800e054:	4602      	mov	r2, r0
 800e056:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e05a:	f7ff bb2e 	b.w	800d6ba <_dtoa_r+0x32>
 800e05e:	693a      	ldr	r2, [r7, #16]
 800e060:	3202      	adds	r2, #2
 800e062:	0092      	lsls	r2, r2, #2
 800e064:	f107 010c 	add.w	r1, r7, #12
 800e068:	300c      	adds	r0, #12
 800e06a:	f7ff fa6e 	bl	800d54a <memcpy>
 800e06e:	2201      	movs	r2, #1
 800e070:	4629      	mov	r1, r5
 800e072:	4620      	mov	r0, r4
 800e074:	f000 fba0 	bl	800e7b8 <__lshift>
 800e078:	9b00      	ldr	r3, [sp, #0]
 800e07a:	3301      	adds	r3, #1
 800e07c:	9304      	str	r3, [sp, #16]
 800e07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e082:	4413      	add	r3, r2
 800e084:	9308      	str	r3, [sp, #32]
 800e086:	9b02      	ldr	r3, [sp, #8]
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	46b8      	mov	r8, r7
 800e08e:	9306      	str	r3, [sp, #24]
 800e090:	4607      	mov	r7, r0
 800e092:	9b04      	ldr	r3, [sp, #16]
 800e094:	4631      	mov	r1, r6
 800e096:	3b01      	subs	r3, #1
 800e098:	4650      	mov	r0, sl
 800e09a:	9301      	str	r3, [sp, #4]
 800e09c:	f7ff fa6a 	bl	800d574 <quorem>
 800e0a0:	4641      	mov	r1, r8
 800e0a2:	9002      	str	r0, [sp, #8]
 800e0a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e0a8:	4650      	mov	r0, sl
 800e0aa:	f000 fbf1 	bl	800e890 <__mcmp>
 800e0ae:	463a      	mov	r2, r7
 800e0b0:	9005      	str	r0, [sp, #20]
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fc07 	bl	800e8c8 <__mdiff>
 800e0ba:	68c2      	ldr	r2, [r0, #12]
 800e0bc:	4605      	mov	r5, r0
 800e0be:	bb02      	cbnz	r2, 800e102 <_dtoa_r+0xa7a>
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	4650      	mov	r0, sl
 800e0c4:	f000 fbe4 	bl	800e890 <__mcmp>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d0:	f000 f958 	bl	800e384 <_Bfree>
 800e0d4:	9b07      	ldr	r3, [sp, #28]
 800e0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d8:	9d04      	ldr	r5, [sp, #16]
 800e0da:	ea43 0102 	orr.w	r1, r3, r2
 800e0de:	9b06      	ldr	r3, [sp, #24]
 800e0e0:	4319      	orrs	r1, r3
 800e0e2:	d110      	bne.n	800e106 <_dtoa_r+0xa7e>
 800e0e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0e8:	d029      	beq.n	800e13e <_dtoa_r+0xab6>
 800e0ea:	9b05      	ldr	r3, [sp, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	dd02      	ble.n	800e0f6 <_dtoa_r+0xa6e>
 800e0f0:	9b02      	ldr	r3, [sp, #8]
 800e0f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	f883 9000 	strb.w	r9, [r3]
 800e0fc:	e774      	b.n	800dfe8 <_dtoa_r+0x960>
 800e0fe:	4638      	mov	r0, r7
 800e100:	e7ba      	b.n	800e078 <_dtoa_r+0x9f0>
 800e102:	2201      	movs	r2, #1
 800e104:	e7e1      	b.n	800e0ca <_dtoa_r+0xa42>
 800e106:	9b05      	ldr	r3, [sp, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	db04      	blt.n	800e116 <_dtoa_r+0xa8e>
 800e10c:	9907      	ldr	r1, [sp, #28]
 800e10e:	430b      	orrs	r3, r1
 800e110:	9906      	ldr	r1, [sp, #24]
 800e112:	430b      	orrs	r3, r1
 800e114:	d120      	bne.n	800e158 <_dtoa_r+0xad0>
 800e116:	2a00      	cmp	r2, #0
 800e118:	dded      	ble.n	800e0f6 <_dtoa_r+0xa6e>
 800e11a:	4651      	mov	r1, sl
 800e11c:	2201      	movs	r2, #1
 800e11e:	4620      	mov	r0, r4
 800e120:	f000 fb4a 	bl	800e7b8 <__lshift>
 800e124:	4631      	mov	r1, r6
 800e126:	4682      	mov	sl, r0
 800e128:	f000 fbb2 	bl	800e890 <__mcmp>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	dc03      	bgt.n	800e138 <_dtoa_r+0xab0>
 800e130:	d1e1      	bne.n	800e0f6 <_dtoa_r+0xa6e>
 800e132:	f019 0f01 	tst.w	r9, #1
 800e136:	d0de      	beq.n	800e0f6 <_dtoa_r+0xa6e>
 800e138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e13c:	d1d8      	bne.n	800e0f0 <_dtoa_r+0xa68>
 800e13e:	9a01      	ldr	r2, [sp, #4]
 800e140:	2339      	movs	r3, #57	; 0x39
 800e142:	7013      	strb	r3, [r2, #0]
 800e144:	462b      	mov	r3, r5
 800e146:	461d      	mov	r5, r3
 800e148:	3b01      	subs	r3, #1
 800e14a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e14e:	2a39      	cmp	r2, #57	; 0x39
 800e150:	d06c      	beq.n	800e22c <_dtoa_r+0xba4>
 800e152:	3201      	adds	r2, #1
 800e154:	701a      	strb	r2, [r3, #0]
 800e156:	e747      	b.n	800dfe8 <_dtoa_r+0x960>
 800e158:	2a00      	cmp	r2, #0
 800e15a:	dd07      	ble.n	800e16c <_dtoa_r+0xae4>
 800e15c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e160:	d0ed      	beq.n	800e13e <_dtoa_r+0xab6>
 800e162:	9a01      	ldr	r2, [sp, #4]
 800e164:	f109 0301 	add.w	r3, r9, #1
 800e168:	7013      	strb	r3, [r2, #0]
 800e16a:	e73d      	b.n	800dfe8 <_dtoa_r+0x960>
 800e16c:	9b04      	ldr	r3, [sp, #16]
 800e16e:	9a08      	ldr	r2, [sp, #32]
 800e170:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e174:	4293      	cmp	r3, r2
 800e176:	d043      	beq.n	800e200 <_dtoa_r+0xb78>
 800e178:	4651      	mov	r1, sl
 800e17a:	2300      	movs	r3, #0
 800e17c:	220a      	movs	r2, #10
 800e17e:	4620      	mov	r0, r4
 800e180:	f000 f922 	bl	800e3c8 <__multadd>
 800e184:	45b8      	cmp	r8, r7
 800e186:	4682      	mov	sl, r0
 800e188:	f04f 0300 	mov.w	r3, #0
 800e18c:	f04f 020a 	mov.w	r2, #10
 800e190:	4641      	mov	r1, r8
 800e192:	4620      	mov	r0, r4
 800e194:	d107      	bne.n	800e1a6 <_dtoa_r+0xb1e>
 800e196:	f000 f917 	bl	800e3c8 <__multadd>
 800e19a:	4680      	mov	r8, r0
 800e19c:	4607      	mov	r7, r0
 800e19e:	9b04      	ldr	r3, [sp, #16]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	9304      	str	r3, [sp, #16]
 800e1a4:	e775      	b.n	800e092 <_dtoa_r+0xa0a>
 800e1a6:	f000 f90f 	bl	800e3c8 <__multadd>
 800e1aa:	4639      	mov	r1, r7
 800e1ac:	4680      	mov	r8, r0
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	220a      	movs	r2, #10
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 f908 	bl	800e3c8 <__multadd>
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	e7f0      	b.n	800e19e <_dtoa_r+0xb16>
 800e1bc:	9b04      	ldr	r3, [sp, #16]
 800e1be:	9301      	str	r3, [sp, #4]
 800e1c0:	9d00      	ldr	r5, [sp, #0]
 800e1c2:	4631      	mov	r1, r6
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	f7ff f9d5 	bl	800d574 <quorem>
 800e1ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e1ce:	9b00      	ldr	r3, [sp, #0]
 800e1d0:	f805 9b01 	strb.w	r9, [r5], #1
 800e1d4:	1aea      	subs	r2, r5, r3
 800e1d6:	9b01      	ldr	r3, [sp, #4]
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	dd07      	ble.n	800e1ec <_dtoa_r+0xb64>
 800e1dc:	4651      	mov	r1, sl
 800e1de:	2300      	movs	r3, #0
 800e1e0:	220a      	movs	r2, #10
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f000 f8f0 	bl	800e3c8 <__multadd>
 800e1e8:	4682      	mov	sl, r0
 800e1ea:	e7ea      	b.n	800e1c2 <_dtoa_r+0xb3a>
 800e1ec:	9b01      	ldr	r3, [sp, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	bfc8      	it	gt
 800e1f2:	461d      	movgt	r5, r3
 800e1f4:	9b00      	ldr	r3, [sp, #0]
 800e1f6:	bfd8      	it	le
 800e1f8:	2501      	movle	r5, #1
 800e1fa:	441d      	add	r5, r3
 800e1fc:	f04f 0800 	mov.w	r8, #0
 800e200:	4651      	mov	r1, sl
 800e202:	2201      	movs	r2, #1
 800e204:	4620      	mov	r0, r4
 800e206:	f000 fad7 	bl	800e7b8 <__lshift>
 800e20a:	4631      	mov	r1, r6
 800e20c:	4682      	mov	sl, r0
 800e20e:	f000 fb3f 	bl	800e890 <__mcmp>
 800e212:	2800      	cmp	r0, #0
 800e214:	dc96      	bgt.n	800e144 <_dtoa_r+0xabc>
 800e216:	d102      	bne.n	800e21e <_dtoa_r+0xb96>
 800e218:	f019 0f01 	tst.w	r9, #1
 800e21c:	d192      	bne.n	800e144 <_dtoa_r+0xabc>
 800e21e:	462b      	mov	r3, r5
 800e220:	461d      	mov	r5, r3
 800e222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e226:	2a30      	cmp	r2, #48	; 0x30
 800e228:	d0fa      	beq.n	800e220 <_dtoa_r+0xb98>
 800e22a:	e6dd      	b.n	800dfe8 <_dtoa_r+0x960>
 800e22c:	9a00      	ldr	r2, [sp, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d189      	bne.n	800e146 <_dtoa_r+0xabe>
 800e232:	f10b 0b01 	add.w	fp, fp, #1
 800e236:	2331      	movs	r3, #49	; 0x31
 800e238:	e796      	b.n	800e168 <_dtoa_r+0xae0>
 800e23a:	4b0a      	ldr	r3, [pc, #40]	; (800e264 <_dtoa_r+0xbdc>)
 800e23c:	f7ff ba99 	b.w	800d772 <_dtoa_r+0xea>
 800e240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e242:	2b00      	cmp	r3, #0
 800e244:	f47f aa6d 	bne.w	800d722 <_dtoa_r+0x9a>
 800e248:	4b07      	ldr	r3, [pc, #28]	; (800e268 <_dtoa_r+0xbe0>)
 800e24a:	f7ff ba92 	b.w	800d772 <_dtoa_r+0xea>
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	dcb5      	bgt.n	800e1c0 <_dtoa_r+0xb38>
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	2b02      	cmp	r3, #2
 800e258:	f73f aeb1 	bgt.w	800dfbe <_dtoa_r+0x936>
 800e25c:	e7b0      	b.n	800e1c0 <_dtoa_r+0xb38>
 800e25e:	bf00      	nop
 800e260:	08010fe6 	.word	0x08010fe6
 800e264:	08010f41 	.word	0x08010f41
 800e268:	08010f6a 	.word	0x08010f6a

0800e26c <_free_r>:
 800e26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e26e:	2900      	cmp	r1, #0
 800e270:	d044      	beq.n	800e2fc <_free_r+0x90>
 800e272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e276:	9001      	str	r0, [sp, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f1a1 0404 	sub.w	r4, r1, #4
 800e27e:	bfb8      	it	lt
 800e280:	18e4      	addlt	r4, r4, r3
 800e282:	f7fe f827 	bl	800c2d4 <__malloc_lock>
 800e286:	4a1e      	ldr	r2, [pc, #120]	; (800e300 <_free_r+0x94>)
 800e288:	9801      	ldr	r0, [sp, #4]
 800e28a:	6813      	ldr	r3, [r2, #0]
 800e28c:	b933      	cbnz	r3, 800e29c <_free_r+0x30>
 800e28e:	6063      	str	r3, [r4, #4]
 800e290:	6014      	str	r4, [r2, #0]
 800e292:	b003      	add	sp, #12
 800e294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e298:	f7fe b822 	b.w	800c2e0 <__malloc_unlock>
 800e29c:	42a3      	cmp	r3, r4
 800e29e:	d908      	bls.n	800e2b2 <_free_r+0x46>
 800e2a0:	6825      	ldr	r5, [r4, #0]
 800e2a2:	1961      	adds	r1, r4, r5
 800e2a4:	428b      	cmp	r3, r1
 800e2a6:	bf01      	itttt	eq
 800e2a8:	6819      	ldreq	r1, [r3, #0]
 800e2aa:	685b      	ldreq	r3, [r3, #4]
 800e2ac:	1949      	addeq	r1, r1, r5
 800e2ae:	6021      	streq	r1, [r4, #0]
 800e2b0:	e7ed      	b.n	800e28e <_free_r+0x22>
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	b10b      	cbz	r3, 800e2bc <_free_r+0x50>
 800e2b8:	42a3      	cmp	r3, r4
 800e2ba:	d9fa      	bls.n	800e2b2 <_free_r+0x46>
 800e2bc:	6811      	ldr	r1, [r2, #0]
 800e2be:	1855      	adds	r5, r2, r1
 800e2c0:	42a5      	cmp	r5, r4
 800e2c2:	d10b      	bne.n	800e2dc <_free_r+0x70>
 800e2c4:	6824      	ldr	r4, [r4, #0]
 800e2c6:	4421      	add	r1, r4
 800e2c8:	1854      	adds	r4, r2, r1
 800e2ca:	42a3      	cmp	r3, r4
 800e2cc:	6011      	str	r1, [r2, #0]
 800e2ce:	d1e0      	bne.n	800e292 <_free_r+0x26>
 800e2d0:	681c      	ldr	r4, [r3, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	6053      	str	r3, [r2, #4]
 800e2d6:	440c      	add	r4, r1
 800e2d8:	6014      	str	r4, [r2, #0]
 800e2da:	e7da      	b.n	800e292 <_free_r+0x26>
 800e2dc:	d902      	bls.n	800e2e4 <_free_r+0x78>
 800e2de:	230c      	movs	r3, #12
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	e7d6      	b.n	800e292 <_free_r+0x26>
 800e2e4:	6825      	ldr	r5, [r4, #0]
 800e2e6:	1961      	adds	r1, r4, r5
 800e2e8:	428b      	cmp	r3, r1
 800e2ea:	bf04      	itt	eq
 800e2ec:	6819      	ldreq	r1, [r3, #0]
 800e2ee:	685b      	ldreq	r3, [r3, #4]
 800e2f0:	6063      	str	r3, [r4, #4]
 800e2f2:	bf04      	itt	eq
 800e2f4:	1949      	addeq	r1, r1, r5
 800e2f6:	6021      	streq	r1, [r4, #0]
 800e2f8:	6054      	str	r4, [r2, #4]
 800e2fa:	e7ca      	b.n	800e292 <_free_r+0x26>
 800e2fc:	b003      	add	sp, #12
 800e2fe:	bd30      	pop	{r4, r5, pc}
 800e300:	20001fd8 	.word	0x20001fd8

0800e304 <_Balloc>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	69c6      	ldr	r6, [r0, #28]
 800e308:	4604      	mov	r4, r0
 800e30a:	460d      	mov	r5, r1
 800e30c:	b976      	cbnz	r6, 800e32c <_Balloc+0x28>
 800e30e:	2010      	movs	r0, #16
 800e310:	f7fd ff38 	bl	800c184 <malloc>
 800e314:	4602      	mov	r2, r0
 800e316:	61e0      	str	r0, [r4, #28]
 800e318:	b920      	cbnz	r0, 800e324 <_Balloc+0x20>
 800e31a:	4b18      	ldr	r3, [pc, #96]	; (800e37c <_Balloc+0x78>)
 800e31c:	4818      	ldr	r0, [pc, #96]	; (800e380 <_Balloc+0x7c>)
 800e31e:	216b      	movs	r1, #107	; 0x6b
 800e320:	f001 fcea 	bl	800fcf8 <__assert_func>
 800e324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e328:	6006      	str	r6, [r0, #0]
 800e32a:	60c6      	str	r6, [r0, #12]
 800e32c:	69e6      	ldr	r6, [r4, #28]
 800e32e:	68f3      	ldr	r3, [r6, #12]
 800e330:	b183      	cbz	r3, 800e354 <_Balloc+0x50>
 800e332:	69e3      	ldr	r3, [r4, #28]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e33a:	b9b8      	cbnz	r0, 800e36c <_Balloc+0x68>
 800e33c:	2101      	movs	r1, #1
 800e33e:	fa01 f605 	lsl.w	r6, r1, r5
 800e342:	1d72      	adds	r2, r6, #5
 800e344:	0092      	lsls	r2, r2, #2
 800e346:	4620      	mov	r0, r4
 800e348:	f001 fcf4 	bl	800fd34 <_calloc_r>
 800e34c:	b160      	cbz	r0, 800e368 <_Balloc+0x64>
 800e34e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e352:	e00e      	b.n	800e372 <_Balloc+0x6e>
 800e354:	2221      	movs	r2, #33	; 0x21
 800e356:	2104      	movs	r1, #4
 800e358:	4620      	mov	r0, r4
 800e35a:	f001 fceb 	bl	800fd34 <_calloc_r>
 800e35e:	69e3      	ldr	r3, [r4, #28]
 800e360:	60f0      	str	r0, [r6, #12]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1e4      	bne.n	800e332 <_Balloc+0x2e>
 800e368:	2000      	movs	r0, #0
 800e36a:	bd70      	pop	{r4, r5, r6, pc}
 800e36c:	6802      	ldr	r2, [r0, #0]
 800e36e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e372:	2300      	movs	r3, #0
 800e374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e378:	e7f7      	b.n	800e36a <_Balloc+0x66>
 800e37a:	bf00      	nop
 800e37c:	08010f77 	.word	0x08010f77
 800e380:	08010ff7 	.word	0x08010ff7

0800e384 <_Bfree>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	69c6      	ldr	r6, [r0, #28]
 800e388:	4605      	mov	r5, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	b976      	cbnz	r6, 800e3ac <_Bfree+0x28>
 800e38e:	2010      	movs	r0, #16
 800e390:	f7fd fef8 	bl	800c184 <malloc>
 800e394:	4602      	mov	r2, r0
 800e396:	61e8      	str	r0, [r5, #28]
 800e398:	b920      	cbnz	r0, 800e3a4 <_Bfree+0x20>
 800e39a:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <_Bfree+0x3c>)
 800e39c:	4809      	ldr	r0, [pc, #36]	; (800e3c4 <_Bfree+0x40>)
 800e39e:	218f      	movs	r1, #143	; 0x8f
 800e3a0:	f001 fcaa 	bl	800fcf8 <__assert_func>
 800e3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3a8:	6006      	str	r6, [r0, #0]
 800e3aa:	60c6      	str	r6, [r0, #12]
 800e3ac:	b13c      	cbz	r4, 800e3be <_Bfree+0x3a>
 800e3ae:	69eb      	ldr	r3, [r5, #28]
 800e3b0:	6862      	ldr	r2, [r4, #4]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3b8:	6021      	str	r1, [r4, #0]
 800e3ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3be:	bd70      	pop	{r4, r5, r6, pc}
 800e3c0:	08010f77 	.word	0x08010f77
 800e3c4:	08010ff7 	.word	0x08010ff7

0800e3c8 <__multadd>:
 800e3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3cc:	690d      	ldr	r5, [r1, #16]
 800e3ce:	4607      	mov	r7, r0
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	461e      	mov	r6, r3
 800e3d4:	f101 0c14 	add.w	ip, r1, #20
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f8dc 3000 	ldr.w	r3, [ip]
 800e3de:	b299      	uxth	r1, r3
 800e3e0:	fb02 6101 	mla	r1, r2, r1, r6
 800e3e4:	0c1e      	lsrs	r6, r3, #16
 800e3e6:	0c0b      	lsrs	r3, r1, #16
 800e3e8:	fb02 3306 	mla	r3, r2, r6, r3
 800e3ec:	b289      	uxth	r1, r1
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3f4:	4285      	cmp	r5, r0
 800e3f6:	f84c 1b04 	str.w	r1, [ip], #4
 800e3fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3fe:	dcec      	bgt.n	800e3da <__multadd+0x12>
 800e400:	b30e      	cbz	r6, 800e446 <__multadd+0x7e>
 800e402:	68a3      	ldr	r3, [r4, #8]
 800e404:	42ab      	cmp	r3, r5
 800e406:	dc19      	bgt.n	800e43c <__multadd+0x74>
 800e408:	6861      	ldr	r1, [r4, #4]
 800e40a:	4638      	mov	r0, r7
 800e40c:	3101      	adds	r1, #1
 800e40e:	f7ff ff79 	bl	800e304 <_Balloc>
 800e412:	4680      	mov	r8, r0
 800e414:	b928      	cbnz	r0, 800e422 <__multadd+0x5a>
 800e416:	4602      	mov	r2, r0
 800e418:	4b0c      	ldr	r3, [pc, #48]	; (800e44c <__multadd+0x84>)
 800e41a:	480d      	ldr	r0, [pc, #52]	; (800e450 <__multadd+0x88>)
 800e41c:	21ba      	movs	r1, #186	; 0xba
 800e41e:	f001 fc6b 	bl	800fcf8 <__assert_func>
 800e422:	6922      	ldr	r2, [r4, #16]
 800e424:	3202      	adds	r2, #2
 800e426:	f104 010c 	add.w	r1, r4, #12
 800e42a:	0092      	lsls	r2, r2, #2
 800e42c:	300c      	adds	r0, #12
 800e42e:	f7ff f88c 	bl	800d54a <memcpy>
 800e432:	4621      	mov	r1, r4
 800e434:	4638      	mov	r0, r7
 800e436:	f7ff ffa5 	bl	800e384 <_Bfree>
 800e43a:	4644      	mov	r4, r8
 800e43c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e440:	3501      	adds	r5, #1
 800e442:	615e      	str	r6, [r3, #20]
 800e444:	6125      	str	r5, [r4, #16]
 800e446:	4620      	mov	r0, r4
 800e448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e44c:	08010fe6 	.word	0x08010fe6
 800e450:	08010ff7 	.word	0x08010ff7

0800e454 <__s2b>:
 800e454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e458:	460c      	mov	r4, r1
 800e45a:	4615      	mov	r5, r2
 800e45c:	461f      	mov	r7, r3
 800e45e:	2209      	movs	r2, #9
 800e460:	3308      	adds	r3, #8
 800e462:	4606      	mov	r6, r0
 800e464:	fb93 f3f2 	sdiv	r3, r3, r2
 800e468:	2100      	movs	r1, #0
 800e46a:	2201      	movs	r2, #1
 800e46c:	429a      	cmp	r2, r3
 800e46e:	db09      	blt.n	800e484 <__s2b+0x30>
 800e470:	4630      	mov	r0, r6
 800e472:	f7ff ff47 	bl	800e304 <_Balloc>
 800e476:	b940      	cbnz	r0, 800e48a <__s2b+0x36>
 800e478:	4602      	mov	r2, r0
 800e47a:	4b19      	ldr	r3, [pc, #100]	; (800e4e0 <__s2b+0x8c>)
 800e47c:	4819      	ldr	r0, [pc, #100]	; (800e4e4 <__s2b+0x90>)
 800e47e:	21d3      	movs	r1, #211	; 0xd3
 800e480:	f001 fc3a 	bl	800fcf8 <__assert_func>
 800e484:	0052      	lsls	r2, r2, #1
 800e486:	3101      	adds	r1, #1
 800e488:	e7f0      	b.n	800e46c <__s2b+0x18>
 800e48a:	9b08      	ldr	r3, [sp, #32]
 800e48c:	6143      	str	r3, [r0, #20]
 800e48e:	2d09      	cmp	r5, #9
 800e490:	f04f 0301 	mov.w	r3, #1
 800e494:	6103      	str	r3, [r0, #16]
 800e496:	dd16      	ble.n	800e4c6 <__s2b+0x72>
 800e498:	f104 0909 	add.w	r9, r4, #9
 800e49c:	46c8      	mov	r8, r9
 800e49e:	442c      	add	r4, r5
 800e4a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e4a4:	4601      	mov	r1, r0
 800e4a6:	3b30      	subs	r3, #48	; 0x30
 800e4a8:	220a      	movs	r2, #10
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f7ff ff8c 	bl	800e3c8 <__multadd>
 800e4b0:	45a0      	cmp	r8, r4
 800e4b2:	d1f5      	bne.n	800e4a0 <__s2b+0x4c>
 800e4b4:	f1a5 0408 	sub.w	r4, r5, #8
 800e4b8:	444c      	add	r4, r9
 800e4ba:	1b2d      	subs	r5, r5, r4
 800e4bc:	1963      	adds	r3, r4, r5
 800e4be:	42bb      	cmp	r3, r7
 800e4c0:	db04      	blt.n	800e4cc <__s2b+0x78>
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	340a      	adds	r4, #10
 800e4c8:	2509      	movs	r5, #9
 800e4ca:	e7f6      	b.n	800e4ba <__s2b+0x66>
 800e4cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	3b30      	subs	r3, #48	; 0x30
 800e4d4:	220a      	movs	r2, #10
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f7ff ff76 	bl	800e3c8 <__multadd>
 800e4dc:	e7ee      	b.n	800e4bc <__s2b+0x68>
 800e4de:	bf00      	nop
 800e4e0:	08010fe6 	.word	0x08010fe6
 800e4e4:	08010ff7 	.word	0x08010ff7

0800e4e8 <__hi0bits>:
 800e4e8:	0c03      	lsrs	r3, r0, #16
 800e4ea:	041b      	lsls	r3, r3, #16
 800e4ec:	b9d3      	cbnz	r3, 800e524 <__hi0bits+0x3c>
 800e4ee:	0400      	lsls	r0, r0, #16
 800e4f0:	2310      	movs	r3, #16
 800e4f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e4f6:	bf04      	itt	eq
 800e4f8:	0200      	lsleq	r0, r0, #8
 800e4fa:	3308      	addeq	r3, #8
 800e4fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e500:	bf04      	itt	eq
 800e502:	0100      	lsleq	r0, r0, #4
 800e504:	3304      	addeq	r3, #4
 800e506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e50a:	bf04      	itt	eq
 800e50c:	0080      	lsleq	r0, r0, #2
 800e50e:	3302      	addeq	r3, #2
 800e510:	2800      	cmp	r0, #0
 800e512:	db05      	blt.n	800e520 <__hi0bits+0x38>
 800e514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e518:	f103 0301 	add.w	r3, r3, #1
 800e51c:	bf08      	it	eq
 800e51e:	2320      	moveq	r3, #32
 800e520:	4618      	mov	r0, r3
 800e522:	4770      	bx	lr
 800e524:	2300      	movs	r3, #0
 800e526:	e7e4      	b.n	800e4f2 <__hi0bits+0xa>

0800e528 <__lo0bits>:
 800e528:	6803      	ldr	r3, [r0, #0]
 800e52a:	f013 0207 	ands.w	r2, r3, #7
 800e52e:	d00c      	beq.n	800e54a <__lo0bits+0x22>
 800e530:	07d9      	lsls	r1, r3, #31
 800e532:	d422      	bmi.n	800e57a <__lo0bits+0x52>
 800e534:	079a      	lsls	r2, r3, #30
 800e536:	bf49      	itett	mi
 800e538:	085b      	lsrmi	r3, r3, #1
 800e53a:	089b      	lsrpl	r3, r3, #2
 800e53c:	6003      	strmi	r3, [r0, #0]
 800e53e:	2201      	movmi	r2, #1
 800e540:	bf5c      	itt	pl
 800e542:	6003      	strpl	r3, [r0, #0]
 800e544:	2202      	movpl	r2, #2
 800e546:	4610      	mov	r0, r2
 800e548:	4770      	bx	lr
 800e54a:	b299      	uxth	r1, r3
 800e54c:	b909      	cbnz	r1, 800e552 <__lo0bits+0x2a>
 800e54e:	0c1b      	lsrs	r3, r3, #16
 800e550:	2210      	movs	r2, #16
 800e552:	b2d9      	uxtb	r1, r3
 800e554:	b909      	cbnz	r1, 800e55a <__lo0bits+0x32>
 800e556:	3208      	adds	r2, #8
 800e558:	0a1b      	lsrs	r3, r3, #8
 800e55a:	0719      	lsls	r1, r3, #28
 800e55c:	bf04      	itt	eq
 800e55e:	091b      	lsreq	r3, r3, #4
 800e560:	3204      	addeq	r2, #4
 800e562:	0799      	lsls	r1, r3, #30
 800e564:	bf04      	itt	eq
 800e566:	089b      	lsreq	r3, r3, #2
 800e568:	3202      	addeq	r2, #2
 800e56a:	07d9      	lsls	r1, r3, #31
 800e56c:	d403      	bmi.n	800e576 <__lo0bits+0x4e>
 800e56e:	085b      	lsrs	r3, r3, #1
 800e570:	f102 0201 	add.w	r2, r2, #1
 800e574:	d003      	beq.n	800e57e <__lo0bits+0x56>
 800e576:	6003      	str	r3, [r0, #0]
 800e578:	e7e5      	b.n	800e546 <__lo0bits+0x1e>
 800e57a:	2200      	movs	r2, #0
 800e57c:	e7e3      	b.n	800e546 <__lo0bits+0x1e>
 800e57e:	2220      	movs	r2, #32
 800e580:	e7e1      	b.n	800e546 <__lo0bits+0x1e>
	...

0800e584 <__i2b>:
 800e584:	b510      	push	{r4, lr}
 800e586:	460c      	mov	r4, r1
 800e588:	2101      	movs	r1, #1
 800e58a:	f7ff febb 	bl	800e304 <_Balloc>
 800e58e:	4602      	mov	r2, r0
 800e590:	b928      	cbnz	r0, 800e59e <__i2b+0x1a>
 800e592:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <__i2b+0x24>)
 800e594:	4805      	ldr	r0, [pc, #20]	; (800e5ac <__i2b+0x28>)
 800e596:	f240 1145 	movw	r1, #325	; 0x145
 800e59a:	f001 fbad 	bl	800fcf8 <__assert_func>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	6144      	str	r4, [r0, #20]
 800e5a2:	6103      	str	r3, [r0, #16]
 800e5a4:	bd10      	pop	{r4, pc}
 800e5a6:	bf00      	nop
 800e5a8:	08010fe6 	.word	0x08010fe6
 800e5ac:	08010ff7 	.word	0x08010ff7

0800e5b0 <__multiply>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	4691      	mov	r9, r2
 800e5b6:	690a      	ldr	r2, [r1, #16]
 800e5b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	bfb8      	it	lt
 800e5c0:	460b      	movlt	r3, r1
 800e5c2:	460c      	mov	r4, r1
 800e5c4:	bfbc      	itt	lt
 800e5c6:	464c      	movlt	r4, r9
 800e5c8:	4699      	movlt	r9, r3
 800e5ca:	6927      	ldr	r7, [r4, #16]
 800e5cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5d0:	68a3      	ldr	r3, [r4, #8]
 800e5d2:	6861      	ldr	r1, [r4, #4]
 800e5d4:	eb07 060a 	add.w	r6, r7, sl
 800e5d8:	42b3      	cmp	r3, r6
 800e5da:	b085      	sub	sp, #20
 800e5dc:	bfb8      	it	lt
 800e5de:	3101      	addlt	r1, #1
 800e5e0:	f7ff fe90 	bl	800e304 <_Balloc>
 800e5e4:	b930      	cbnz	r0, 800e5f4 <__multiply+0x44>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	4b44      	ldr	r3, [pc, #272]	; (800e6fc <__multiply+0x14c>)
 800e5ea:	4845      	ldr	r0, [pc, #276]	; (800e700 <__multiply+0x150>)
 800e5ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e5f0:	f001 fb82 	bl	800fcf8 <__assert_func>
 800e5f4:	f100 0514 	add.w	r5, r0, #20
 800e5f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	2200      	movs	r2, #0
 800e600:	4543      	cmp	r3, r8
 800e602:	d321      	bcc.n	800e648 <__multiply+0x98>
 800e604:	f104 0314 	add.w	r3, r4, #20
 800e608:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e60c:	f109 0314 	add.w	r3, r9, #20
 800e610:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e614:	9202      	str	r2, [sp, #8]
 800e616:	1b3a      	subs	r2, r7, r4
 800e618:	3a15      	subs	r2, #21
 800e61a:	f022 0203 	bic.w	r2, r2, #3
 800e61e:	3204      	adds	r2, #4
 800e620:	f104 0115 	add.w	r1, r4, #21
 800e624:	428f      	cmp	r7, r1
 800e626:	bf38      	it	cc
 800e628:	2204      	movcc	r2, #4
 800e62a:	9201      	str	r2, [sp, #4]
 800e62c:	9a02      	ldr	r2, [sp, #8]
 800e62e:	9303      	str	r3, [sp, #12]
 800e630:	429a      	cmp	r2, r3
 800e632:	d80c      	bhi.n	800e64e <__multiply+0x9e>
 800e634:	2e00      	cmp	r6, #0
 800e636:	dd03      	ble.n	800e640 <__multiply+0x90>
 800e638:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d05b      	beq.n	800e6f8 <__multiply+0x148>
 800e640:	6106      	str	r6, [r0, #16]
 800e642:	b005      	add	sp, #20
 800e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e648:	f843 2b04 	str.w	r2, [r3], #4
 800e64c:	e7d8      	b.n	800e600 <__multiply+0x50>
 800e64e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e652:	f1ba 0f00 	cmp.w	sl, #0
 800e656:	d024      	beq.n	800e6a2 <__multiply+0xf2>
 800e658:	f104 0e14 	add.w	lr, r4, #20
 800e65c:	46a9      	mov	r9, r5
 800e65e:	f04f 0c00 	mov.w	ip, #0
 800e662:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e666:	f8d9 1000 	ldr.w	r1, [r9]
 800e66a:	fa1f fb82 	uxth.w	fp, r2
 800e66e:	b289      	uxth	r1, r1
 800e670:	fb0a 110b 	mla	r1, sl, fp, r1
 800e674:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e678:	f8d9 2000 	ldr.w	r2, [r9]
 800e67c:	4461      	add	r1, ip
 800e67e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e682:	fb0a c20b 	mla	r2, sl, fp, ip
 800e686:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e68a:	b289      	uxth	r1, r1
 800e68c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e690:	4577      	cmp	r7, lr
 800e692:	f849 1b04 	str.w	r1, [r9], #4
 800e696:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e69a:	d8e2      	bhi.n	800e662 <__multiply+0xb2>
 800e69c:	9a01      	ldr	r2, [sp, #4]
 800e69e:	f845 c002 	str.w	ip, [r5, r2]
 800e6a2:	9a03      	ldr	r2, [sp, #12]
 800e6a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	f1b9 0f00 	cmp.w	r9, #0
 800e6ae:	d021      	beq.n	800e6f4 <__multiply+0x144>
 800e6b0:	6829      	ldr	r1, [r5, #0]
 800e6b2:	f104 0c14 	add.w	ip, r4, #20
 800e6b6:	46ae      	mov	lr, r5
 800e6b8:	f04f 0a00 	mov.w	sl, #0
 800e6bc:	f8bc b000 	ldrh.w	fp, [ip]
 800e6c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e6c4:	fb09 220b 	mla	r2, r9, fp, r2
 800e6c8:	4452      	add	r2, sl
 800e6ca:	b289      	uxth	r1, r1
 800e6cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6d0:	f84e 1b04 	str.w	r1, [lr], #4
 800e6d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e6d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e6dc:	f8be 1000 	ldrh.w	r1, [lr]
 800e6e0:	fb09 110a 	mla	r1, r9, sl, r1
 800e6e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e6e8:	4567      	cmp	r7, ip
 800e6ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e6ee:	d8e5      	bhi.n	800e6bc <__multiply+0x10c>
 800e6f0:	9a01      	ldr	r2, [sp, #4]
 800e6f2:	50a9      	str	r1, [r5, r2]
 800e6f4:	3504      	adds	r5, #4
 800e6f6:	e799      	b.n	800e62c <__multiply+0x7c>
 800e6f8:	3e01      	subs	r6, #1
 800e6fa:	e79b      	b.n	800e634 <__multiply+0x84>
 800e6fc:	08010fe6 	.word	0x08010fe6
 800e700:	08010ff7 	.word	0x08010ff7

0800e704 <__pow5mult>:
 800e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e708:	4615      	mov	r5, r2
 800e70a:	f012 0203 	ands.w	r2, r2, #3
 800e70e:	4606      	mov	r6, r0
 800e710:	460f      	mov	r7, r1
 800e712:	d007      	beq.n	800e724 <__pow5mult+0x20>
 800e714:	4c25      	ldr	r4, [pc, #148]	; (800e7ac <__pow5mult+0xa8>)
 800e716:	3a01      	subs	r2, #1
 800e718:	2300      	movs	r3, #0
 800e71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e71e:	f7ff fe53 	bl	800e3c8 <__multadd>
 800e722:	4607      	mov	r7, r0
 800e724:	10ad      	asrs	r5, r5, #2
 800e726:	d03d      	beq.n	800e7a4 <__pow5mult+0xa0>
 800e728:	69f4      	ldr	r4, [r6, #28]
 800e72a:	b97c      	cbnz	r4, 800e74c <__pow5mult+0x48>
 800e72c:	2010      	movs	r0, #16
 800e72e:	f7fd fd29 	bl	800c184 <malloc>
 800e732:	4602      	mov	r2, r0
 800e734:	61f0      	str	r0, [r6, #28]
 800e736:	b928      	cbnz	r0, 800e744 <__pow5mult+0x40>
 800e738:	4b1d      	ldr	r3, [pc, #116]	; (800e7b0 <__pow5mult+0xac>)
 800e73a:	481e      	ldr	r0, [pc, #120]	; (800e7b4 <__pow5mult+0xb0>)
 800e73c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e740:	f001 fada 	bl	800fcf8 <__assert_func>
 800e744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e748:	6004      	str	r4, [r0, #0]
 800e74a:	60c4      	str	r4, [r0, #12]
 800e74c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e754:	b94c      	cbnz	r4, 800e76a <__pow5mult+0x66>
 800e756:	f240 2171 	movw	r1, #625	; 0x271
 800e75a:	4630      	mov	r0, r6
 800e75c:	f7ff ff12 	bl	800e584 <__i2b>
 800e760:	2300      	movs	r3, #0
 800e762:	f8c8 0008 	str.w	r0, [r8, #8]
 800e766:	4604      	mov	r4, r0
 800e768:	6003      	str	r3, [r0, #0]
 800e76a:	f04f 0900 	mov.w	r9, #0
 800e76e:	07eb      	lsls	r3, r5, #31
 800e770:	d50a      	bpl.n	800e788 <__pow5mult+0x84>
 800e772:	4639      	mov	r1, r7
 800e774:	4622      	mov	r2, r4
 800e776:	4630      	mov	r0, r6
 800e778:	f7ff ff1a 	bl	800e5b0 <__multiply>
 800e77c:	4639      	mov	r1, r7
 800e77e:	4680      	mov	r8, r0
 800e780:	4630      	mov	r0, r6
 800e782:	f7ff fdff 	bl	800e384 <_Bfree>
 800e786:	4647      	mov	r7, r8
 800e788:	106d      	asrs	r5, r5, #1
 800e78a:	d00b      	beq.n	800e7a4 <__pow5mult+0xa0>
 800e78c:	6820      	ldr	r0, [r4, #0]
 800e78e:	b938      	cbnz	r0, 800e7a0 <__pow5mult+0x9c>
 800e790:	4622      	mov	r2, r4
 800e792:	4621      	mov	r1, r4
 800e794:	4630      	mov	r0, r6
 800e796:	f7ff ff0b 	bl	800e5b0 <__multiply>
 800e79a:	6020      	str	r0, [r4, #0]
 800e79c:	f8c0 9000 	str.w	r9, [r0]
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	e7e4      	b.n	800e76e <__pow5mult+0x6a>
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7aa:	bf00      	nop
 800e7ac:	08011140 	.word	0x08011140
 800e7b0:	08010f77 	.word	0x08010f77
 800e7b4:	08010ff7 	.word	0x08010ff7

0800e7b8 <__lshift>:
 800e7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7bc:	460c      	mov	r4, r1
 800e7be:	6849      	ldr	r1, [r1, #4]
 800e7c0:	6923      	ldr	r3, [r4, #16]
 800e7c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	4691      	mov	r9, r2
 800e7cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7d0:	f108 0601 	add.w	r6, r8, #1
 800e7d4:	42b3      	cmp	r3, r6
 800e7d6:	db0b      	blt.n	800e7f0 <__lshift+0x38>
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f7ff fd93 	bl	800e304 <_Balloc>
 800e7de:	4605      	mov	r5, r0
 800e7e0:	b948      	cbnz	r0, 800e7f6 <__lshift+0x3e>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	4b28      	ldr	r3, [pc, #160]	; (800e888 <__lshift+0xd0>)
 800e7e6:	4829      	ldr	r0, [pc, #164]	; (800e88c <__lshift+0xd4>)
 800e7e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e7ec:	f001 fa84 	bl	800fcf8 <__assert_func>
 800e7f0:	3101      	adds	r1, #1
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	e7ee      	b.n	800e7d4 <__lshift+0x1c>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f100 0114 	add.w	r1, r0, #20
 800e7fc:	f100 0210 	add.w	r2, r0, #16
 800e800:	4618      	mov	r0, r3
 800e802:	4553      	cmp	r3, sl
 800e804:	db33      	blt.n	800e86e <__lshift+0xb6>
 800e806:	6920      	ldr	r0, [r4, #16]
 800e808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e80c:	f104 0314 	add.w	r3, r4, #20
 800e810:	f019 091f 	ands.w	r9, r9, #31
 800e814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e818:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e81c:	d02b      	beq.n	800e876 <__lshift+0xbe>
 800e81e:	f1c9 0e20 	rsb	lr, r9, #32
 800e822:	468a      	mov	sl, r1
 800e824:	2200      	movs	r2, #0
 800e826:	6818      	ldr	r0, [r3, #0]
 800e828:	fa00 f009 	lsl.w	r0, r0, r9
 800e82c:	4310      	orrs	r0, r2
 800e82e:	f84a 0b04 	str.w	r0, [sl], #4
 800e832:	f853 2b04 	ldr.w	r2, [r3], #4
 800e836:	459c      	cmp	ip, r3
 800e838:	fa22 f20e 	lsr.w	r2, r2, lr
 800e83c:	d8f3      	bhi.n	800e826 <__lshift+0x6e>
 800e83e:	ebac 0304 	sub.w	r3, ip, r4
 800e842:	3b15      	subs	r3, #21
 800e844:	f023 0303 	bic.w	r3, r3, #3
 800e848:	3304      	adds	r3, #4
 800e84a:	f104 0015 	add.w	r0, r4, #21
 800e84e:	4584      	cmp	ip, r0
 800e850:	bf38      	it	cc
 800e852:	2304      	movcc	r3, #4
 800e854:	50ca      	str	r2, [r1, r3]
 800e856:	b10a      	cbz	r2, 800e85c <__lshift+0xa4>
 800e858:	f108 0602 	add.w	r6, r8, #2
 800e85c:	3e01      	subs	r6, #1
 800e85e:	4638      	mov	r0, r7
 800e860:	612e      	str	r6, [r5, #16]
 800e862:	4621      	mov	r1, r4
 800e864:	f7ff fd8e 	bl	800e384 <_Bfree>
 800e868:	4628      	mov	r0, r5
 800e86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e872:	3301      	adds	r3, #1
 800e874:	e7c5      	b.n	800e802 <__lshift+0x4a>
 800e876:	3904      	subs	r1, #4
 800e878:	f853 2b04 	ldr.w	r2, [r3], #4
 800e87c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e880:	459c      	cmp	ip, r3
 800e882:	d8f9      	bhi.n	800e878 <__lshift+0xc0>
 800e884:	e7ea      	b.n	800e85c <__lshift+0xa4>
 800e886:	bf00      	nop
 800e888:	08010fe6 	.word	0x08010fe6
 800e88c:	08010ff7 	.word	0x08010ff7

0800e890 <__mcmp>:
 800e890:	b530      	push	{r4, r5, lr}
 800e892:	6902      	ldr	r2, [r0, #16]
 800e894:	690c      	ldr	r4, [r1, #16]
 800e896:	1b12      	subs	r2, r2, r4
 800e898:	d10e      	bne.n	800e8b8 <__mcmp+0x28>
 800e89a:	f100 0314 	add.w	r3, r0, #20
 800e89e:	3114      	adds	r1, #20
 800e8a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e8a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e8ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e8b0:	42a5      	cmp	r5, r4
 800e8b2:	d003      	beq.n	800e8bc <__mcmp+0x2c>
 800e8b4:	d305      	bcc.n	800e8c2 <__mcmp+0x32>
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	bd30      	pop	{r4, r5, pc}
 800e8bc:	4283      	cmp	r3, r0
 800e8be:	d3f3      	bcc.n	800e8a8 <__mcmp+0x18>
 800e8c0:	e7fa      	b.n	800e8b8 <__mcmp+0x28>
 800e8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c6:	e7f7      	b.n	800e8b8 <__mcmp+0x28>

0800e8c8 <__mdiff>:
 800e8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	4690      	mov	r8, r2
 800e8d6:	f7ff ffdb 	bl	800e890 <__mcmp>
 800e8da:	1e05      	subs	r5, r0, #0
 800e8dc:	d110      	bne.n	800e900 <__mdiff+0x38>
 800e8de:	4629      	mov	r1, r5
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f7ff fd0f 	bl	800e304 <_Balloc>
 800e8e6:	b930      	cbnz	r0, 800e8f6 <__mdiff+0x2e>
 800e8e8:	4b3a      	ldr	r3, [pc, #232]	; (800e9d4 <__mdiff+0x10c>)
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	f240 2137 	movw	r1, #567	; 0x237
 800e8f0:	4839      	ldr	r0, [pc, #228]	; (800e9d8 <__mdiff+0x110>)
 800e8f2:	f001 fa01 	bl	800fcf8 <__assert_func>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e900:	bfa4      	itt	ge
 800e902:	4643      	movge	r3, r8
 800e904:	46a0      	movge	r8, r4
 800e906:	4630      	mov	r0, r6
 800e908:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e90c:	bfa6      	itte	ge
 800e90e:	461c      	movge	r4, r3
 800e910:	2500      	movge	r5, #0
 800e912:	2501      	movlt	r5, #1
 800e914:	f7ff fcf6 	bl	800e304 <_Balloc>
 800e918:	b920      	cbnz	r0, 800e924 <__mdiff+0x5c>
 800e91a:	4b2e      	ldr	r3, [pc, #184]	; (800e9d4 <__mdiff+0x10c>)
 800e91c:	4602      	mov	r2, r0
 800e91e:	f240 2145 	movw	r1, #581	; 0x245
 800e922:	e7e5      	b.n	800e8f0 <__mdiff+0x28>
 800e924:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e928:	6926      	ldr	r6, [r4, #16]
 800e92a:	60c5      	str	r5, [r0, #12]
 800e92c:	f104 0914 	add.w	r9, r4, #20
 800e930:	f108 0514 	add.w	r5, r8, #20
 800e934:	f100 0e14 	add.w	lr, r0, #20
 800e938:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e93c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e940:	f108 0210 	add.w	r2, r8, #16
 800e944:	46f2      	mov	sl, lr
 800e946:	2100      	movs	r1, #0
 800e948:	f859 3b04 	ldr.w	r3, [r9], #4
 800e94c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e950:	fa11 f88b 	uxtah	r8, r1, fp
 800e954:	b299      	uxth	r1, r3
 800e956:	0c1b      	lsrs	r3, r3, #16
 800e958:	eba8 0801 	sub.w	r8, r8, r1
 800e95c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e960:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e964:	fa1f f888 	uxth.w	r8, r8
 800e968:	1419      	asrs	r1, r3, #16
 800e96a:	454e      	cmp	r6, r9
 800e96c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e970:	f84a 3b04 	str.w	r3, [sl], #4
 800e974:	d8e8      	bhi.n	800e948 <__mdiff+0x80>
 800e976:	1b33      	subs	r3, r6, r4
 800e978:	3b15      	subs	r3, #21
 800e97a:	f023 0303 	bic.w	r3, r3, #3
 800e97e:	3304      	adds	r3, #4
 800e980:	3415      	adds	r4, #21
 800e982:	42a6      	cmp	r6, r4
 800e984:	bf38      	it	cc
 800e986:	2304      	movcc	r3, #4
 800e988:	441d      	add	r5, r3
 800e98a:	4473      	add	r3, lr
 800e98c:	469e      	mov	lr, r3
 800e98e:	462e      	mov	r6, r5
 800e990:	4566      	cmp	r6, ip
 800e992:	d30e      	bcc.n	800e9b2 <__mdiff+0xea>
 800e994:	f10c 0203 	add.w	r2, ip, #3
 800e998:	1b52      	subs	r2, r2, r5
 800e99a:	f022 0203 	bic.w	r2, r2, #3
 800e99e:	3d03      	subs	r5, #3
 800e9a0:	45ac      	cmp	ip, r5
 800e9a2:	bf38      	it	cc
 800e9a4:	2200      	movcc	r2, #0
 800e9a6:	4413      	add	r3, r2
 800e9a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9ac:	b17a      	cbz	r2, 800e9ce <__mdiff+0x106>
 800e9ae:	6107      	str	r7, [r0, #16]
 800e9b0:	e7a4      	b.n	800e8fc <__mdiff+0x34>
 800e9b2:	f856 8b04 	ldr.w	r8, [r6], #4
 800e9b6:	fa11 f288 	uxtah	r2, r1, r8
 800e9ba:	1414      	asrs	r4, r2, #16
 800e9bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e9c0:	b292      	uxth	r2, r2
 800e9c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e9c6:	f84e 2b04 	str.w	r2, [lr], #4
 800e9ca:	1421      	asrs	r1, r4, #16
 800e9cc:	e7e0      	b.n	800e990 <__mdiff+0xc8>
 800e9ce:	3f01      	subs	r7, #1
 800e9d0:	e7ea      	b.n	800e9a8 <__mdiff+0xe0>
 800e9d2:	bf00      	nop
 800e9d4:	08010fe6 	.word	0x08010fe6
 800e9d8:	08010ff7 	.word	0x08010ff7

0800e9dc <__ulp>:
 800e9dc:	b082      	sub	sp, #8
 800e9de:	ed8d 0b00 	vstr	d0, [sp]
 800e9e2:	9a01      	ldr	r2, [sp, #4]
 800e9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ea24 <__ulp+0x48>)
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dc08      	bgt.n	800ea02 <__ulp+0x26>
 800e9f0:	425b      	negs	r3, r3
 800e9f2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e9f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e9fa:	da04      	bge.n	800ea06 <__ulp+0x2a>
 800e9fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea00:	4113      	asrs	r3, r2
 800ea02:	2200      	movs	r2, #0
 800ea04:	e008      	b.n	800ea18 <__ulp+0x3c>
 800ea06:	f1a2 0314 	sub.w	r3, r2, #20
 800ea0a:	2b1e      	cmp	r3, #30
 800ea0c:	bfda      	itte	le
 800ea0e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ea12:	40da      	lsrle	r2, r3
 800ea14:	2201      	movgt	r2, #1
 800ea16:	2300      	movs	r3, #0
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	ec41 0b10 	vmov	d0, r0, r1
 800ea20:	b002      	add	sp, #8
 800ea22:	4770      	bx	lr
 800ea24:	7ff00000 	.word	0x7ff00000

0800ea28 <__b2d>:
 800ea28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea2c:	6906      	ldr	r6, [r0, #16]
 800ea2e:	f100 0814 	add.w	r8, r0, #20
 800ea32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ea36:	1f37      	subs	r7, r6, #4
 800ea38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f7ff fd53 	bl	800e4e8 <__hi0bits>
 800ea42:	f1c0 0320 	rsb	r3, r0, #32
 800ea46:	280a      	cmp	r0, #10
 800ea48:	600b      	str	r3, [r1, #0]
 800ea4a:	491b      	ldr	r1, [pc, #108]	; (800eab8 <__b2d+0x90>)
 800ea4c:	dc15      	bgt.n	800ea7a <__b2d+0x52>
 800ea4e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ea52:	fa22 f30c 	lsr.w	r3, r2, ip
 800ea56:	45b8      	cmp	r8, r7
 800ea58:	ea43 0501 	orr.w	r5, r3, r1
 800ea5c:	bf34      	ite	cc
 800ea5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea62:	2300      	movcs	r3, #0
 800ea64:	3015      	adds	r0, #21
 800ea66:	fa02 f000 	lsl.w	r0, r2, r0
 800ea6a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ea6e:	4303      	orrs	r3, r0
 800ea70:	461c      	mov	r4, r3
 800ea72:	ec45 4b10 	vmov	d0, r4, r5
 800ea76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea7a:	45b8      	cmp	r8, r7
 800ea7c:	bf3a      	itte	cc
 800ea7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea82:	f1a6 0708 	subcc.w	r7, r6, #8
 800ea86:	2300      	movcs	r3, #0
 800ea88:	380b      	subs	r0, #11
 800ea8a:	d012      	beq.n	800eab2 <__b2d+0x8a>
 800ea8c:	f1c0 0120 	rsb	r1, r0, #32
 800ea90:	fa23 f401 	lsr.w	r4, r3, r1
 800ea94:	4082      	lsls	r2, r0
 800ea96:	4322      	orrs	r2, r4
 800ea98:	4547      	cmp	r7, r8
 800ea9a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ea9e:	bf8c      	ite	hi
 800eaa0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eaa4:	2200      	movls	r2, #0
 800eaa6:	4083      	lsls	r3, r0
 800eaa8:	40ca      	lsrs	r2, r1
 800eaaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eaae:	4313      	orrs	r3, r2
 800eab0:	e7de      	b.n	800ea70 <__b2d+0x48>
 800eab2:	ea42 0501 	orr.w	r5, r2, r1
 800eab6:	e7db      	b.n	800ea70 <__b2d+0x48>
 800eab8:	3ff00000 	.word	0x3ff00000

0800eabc <__d2b>:
 800eabc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eac0:	460f      	mov	r7, r1
 800eac2:	2101      	movs	r1, #1
 800eac4:	ec59 8b10 	vmov	r8, r9, d0
 800eac8:	4616      	mov	r6, r2
 800eaca:	f7ff fc1b 	bl	800e304 <_Balloc>
 800eace:	4604      	mov	r4, r0
 800ead0:	b930      	cbnz	r0, 800eae0 <__d2b+0x24>
 800ead2:	4602      	mov	r2, r0
 800ead4:	4b24      	ldr	r3, [pc, #144]	; (800eb68 <__d2b+0xac>)
 800ead6:	4825      	ldr	r0, [pc, #148]	; (800eb6c <__d2b+0xb0>)
 800ead8:	f240 310f 	movw	r1, #783	; 0x30f
 800eadc:	f001 f90c 	bl	800fcf8 <__assert_func>
 800eae0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eae8:	bb2d      	cbnz	r5, 800eb36 <__d2b+0x7a>
 800eaea:	9301      	str	r3, [sp, #4]
 800eaec:	f1b8 0300 	subs.w	r3, r8, #0
 800eaf0:	d026      	beq.n	800eb40 <__d2b+0x84>
 800eaf2:	4668      	mov	r0, sp
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	f7ff fd17 	bl	800e528 <__lo0bits>
 800eafa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eafe:	b1e8      	cbz	r0, 800eb3c <__d2b+0x80>
 800eb00:	f1c0 0320 	rsb	r3, r0, #32
 800eb04:	fa02 f303 	lsl.w	r3, r2, r3
 800eb08:	430b      	orrs	r3, r1
 800eb0a:	40c2      	lsrs	r2, r0
 800eb0c:	6163      	str	r3, [r4, #20]
 800eb0e:	9201      	str	r2, [sp, #4]
 800eb10:	9b01      	ldr	r3, [sp, #4]
 800eb12:	61a3      	str	r3, [r4, #24]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bf14      	ite	ne
 800eb18:	2202      	movne	r2, #2
 800eb1a:	2201      	moveq	r2, #1
 800eb1c:	6122      	str	r2, [r4, #16]
 800eb1e:	b1bd      	cbz	r5, 800eb50 <__d2b+0x94>
 800eb20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb24:	4405      	add	r5, r0
 800eb26:	603d      	str	r5, [r7, #0]
 800eb28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb2c:	6030      	str	r0, [r6, #0]
 800eb2e:	4620      	mov	r0, r4
 800eb30:	b003      	add	sp, #12
 800eb32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb3a:	e7d6      	b.n	800eaea <__d2b+0x2e>
 800eb3c:	6161      	str	r1, [r4, #20]
 800eb3e:	e7e7      	b.n	800eb10 <__d2b+0x54>
 800eb40:	a801      	add	r0, sp, #4
 800eb42:	f7ff fcf1 	bl	800e528 <__lo0bits>
 800eb46:	9b01      	ldr	r3, [sp, #4]
 800eb48:	6163      	str	r3, [r4, #20]
 800eb4a:	3020      	adds	r0, #32
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	e7e5      	b.n	800eb1c <__d2b+0x60>
 800eb50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb58:	6038      	str	r0, [r7, #0]
 800eb5a:	6918      	ldr	r0, [r3, #16]
 800eb5c:	f7ff fcc4 	bl	800e4e8 <__hi0bits>
 800eb60:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb64:	e7e2      	b.n	800eb2c <__d2b+0x70>
 800eb66:	bf00      	nop
 800eb68:	08010fe6 	.word	0x08010fe6
 800eb6c:	08010ff7 	.word	0x08010ff7

0800eb70 <__ratio>:
 800eb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	4688      	mov	r8, r1
 800eb76:	4669      	mov	r1, sp
 800eb78:	4681      	mov	r9, r0
 800eb7a:	f7ff ff55 	bl	800ea28 <__b2d>
 800eb7e:	a901      	add	r1, sp, #4
 800eb80:	4640      	mov	r0, r8
 800eb82:	ec55 4b10 	vmov	r4, r5, d0
 800eb86:	f7ff ff4f 	bl	800ea28 <__b2d>
 800eb8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb92:	eba3 0c02 	sub.w	ip, r3, r2
 800eb96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb9a:	1a9b      	subs	r3, r3, r2
 800eb9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eba0:	ec51 0b10 	vmov	r0, r1, d0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bfd6      	itet	le
 800eba8:	460a      	movle	r2, r1
 800ebaa:	462a      	movgt	r2, r5
 800ebac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ebb0:	468b      	mov	fp, r1
 800ebb2:	462f      	mov	r7, r5
 800ebb4:	bfd4      	ite	le
 800ebb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ebba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	ee10 2a10 	vmov	r2, s0
 800ebc4:	465b      	mov	r3, fp
 800ebc6:	4639      	mov	r1, r7
 800ebc8:	f7f1 fe40 	bl	800084c <__aeabi_ddiv>
 800ebcc:	ec41 0b10 	vmov	d0, r0, r1
 800ebd0:	b003      	add	sp, #12
 800ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebd6 <__copybits>:
 800ebd6:	3901      	subs	r1, #1
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	1149      	asrs	r1, r1, #5
 800ebdc:	6914      	ldr	r4, [r2, #16]
 800ebde:	3101      	adds	r1, #1
 800ebe0:	f102 0314 	add.w	r3, r2, #20
 800ebe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ebe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ebec:	1f05      	subs	r5, r0, #4
 800ebee:	42a3      	cmp	r3, r4
 800ebf0:	d30c      	bcc.n	800ec0c <__copybits+0x36>
 800ebf2:	1aa3      	subs	r3, r4, r2
 800ebf4:	3b11      	subs	r3, #17
 800ebf6:	f023 0303 	bic.w	r3, r3, #3
 800ebfa:	3211      	adds	r2, #17
 800ebfc:	42a2      	cmp	r2, r4
 800ebfe:	bf88      	it	hi
 800ec00:	2300      	movhi	r3, #0
 800ec02:	4418      	add	r0, r3
 800ec04:	2300      	movs	r3, #0
 800ec06:	4288      	cmp	r0, r1
 800ec08:	d305      	bcc.n	800ec16 <__copybits+0x40>
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}
 800ec0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ec10:	f845 6f04 	str.w	r6, [r5, #4]!
 800ec14:	e7eb      	b.n	800ebee <__copybits+0x18>
 800ec16:	f840 3b04 	str.w	r3, [r0], #4
 800ec1a:	e7f4      	b.n	800ec06 <__copybits+0x30>

0800ec1c <__any_on>:
 800ec1c:	f100 0214 	add.w	r2, r0, #20
 800ec20:	6900      	ldr	r0, [r0, #16]
 800ec22:	114b      	asrs	r3, r1, #5
 800ec24:	4298      	cmp	r0, r3
 800ec26:	b510      	push	{r4, lr}
 800ec28:	db11      	blt.n	800ec4e <__any_on+0x32>
 800ec2a:	dd0a      	ble.n	800ec42 <__any_on+0x26>
 800ec2c:	f011 011f 	ands.w	r1, r1, #31
 800ec30:	d007      	beq.n	800ec42 <__any_on+0x26>
 800ec32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ec36:	fa24 f001 	lsr.w	r0, r4, r1
 800ec3a:	fa00 f101 	lsl.w	r1, r0, r1
 800ec3e:	428c      	cmp	r4, r1
 800ec40:	d10b      	bne.n	800ec5a <__any_on+0x3e>
 800ec42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d803      	bhi.n	800ec52 <__any_on+0x36>
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	bd10      	pop	{r4, pc}
 800ec4e:	4603      	mov	r3, r0
 800ec50:	e7f7      	b.n	800ec42 <__any_on+0x26>
 800ec52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec56:	2900      	cmp	r1, #0
 800ec58:	d0f5      	beq.n	800ec46 <__any_on+0x2a>
 800ec5a:	2001      	movs	r0, #1
 800ec5c:	e7f6      	b.n	800ec4c <__any_on+0x30>

0800ec5e <sulp>:
 800ec5e:	b570      	push	{r4, r5, r6, lr}
 800ec60:	4604      	mov	r4, r0
 800ec62:	460d      	mov	r5, r1
 800ec64:	ec45 4b10 	vmov	d0, r4, r5
 800ec68:	4616      	mov	r6, r2
 800ec6a:	f7ff feb7 	bl	800e9dc <__ulp>
 800ec6e:	ec51 0b10 	vmov	r0, r1, d0
 800ec72:	b17e      	cbz	r6, 800ec94 <sulp+0x36>
 800ec74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dd09      	ble.n	800ec94 <sulp+0x36>
 800ec80:	051b      	lsls	r3, r3, #20
 800ec82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec86:	2400      	movs	r4, #0
 800ec88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec8c:	4622      	mov	r2, r4
 800ec8e:	462b      	mov	r3, r5
 800ec90:	f7f1 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ec94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec98 <_strtod_l>:
 800ec98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec9c:	ed2d 8b02 	vpush	{d8}
 800eca0:	b09b      	sub	sp, #108	; 0x6c
 800eca2:	4604      	mov	r4, r0
 800eca4:	9213      	str	r2, [sp, #76]	; 0x4c
 800eca6:	2200      	movs	r2, #0
 800eca8:	9216      	str	r2, [sp, #88]	; 0x58
 800ecaa:	460d      	mov	r5, r1
 800ecac:	f04f 0800 	mov.w	r8, #0
 800ecb0:	f04f 0900 	mov.w	r9, #0
 800ecb4:	460a      	mov	r2, r1
 800ecb6:	9215      	str	r2, [sp, #84]	; 0x54
 800ecb8:	7811      	ldrb	r1, [r2, #0]
 800ecba:	292b      	cmp	r1, #43	; 0x2b
 800ecbc:	d04c      	beq.n	800ed58 <_strtod_l+0xc0>
 800ecbe:	d83a      	bhi.n	800ed36 <_strtod_l+0x9e>
 800ecc0:	290d      	cmp	r1, #13
 800ecc2:	d834      	bhi.n	800ed2e <_strtod_l+0x96>
 800ecc4:	2908      	cmp	r1, #8
 800ecc6:	d834      	bhi.n	800ed32 <_strtod_l+0x9a>
 800ecc8:	2900      	cmp	r1, #0
 800ecca:	d03d      	beq.n	800ed48 <_strtod_l+0xb0>
 800eccc:	2200      	movs	r2, #0
 800ecce:	920a      	str	r2, [sp, #40]	; 0x28
 800ecd0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ecd2:	7832      	ldrb	r2, [r6, #0]
 800ecd4:	2a30      	cmp	r2, #48	; 0x30
 800ecd6:	f040 80b4 	bne.w	800ee42 <_strtod_l+0x1aa>
 800ecda:	7872      	ldrb	r2, [r6, #1]
 800ecdc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ece0:	2a58      	cmp	r2, #88	; 0x58
 800ece2:	d170      	bne.n	800edc6 <_strtod_l+0x12e>
 800ece4:	9302      	str	r3, [sp, #8]
 800ece6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece8:	9301      	str	r3, [sp, #4]
 800ecea:	ab16      	add	r3, sp, #88	; 0x58
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	4a8e      	ldr	r2, [pc, #568]	; (800ef28 <_strtod_l+0x290>)
 800ecf0:	ab17      	add	r3, sp, #92	; 0x5c
 800ecf2:	a915      	add	r1, sp, #84	; 0x54
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f001 f89b 	bl	800fe30 <__gethex>
 800ecfa:	f010 070f 	ands.w	r7, r0, #15
 800ecfe:	4605      	mov	r5, r0
 800ed00:	d005      	beq.n	800ed0e <_strtod_l+0x76>
 800ed02:	2f06      	cmp	r7, #6
 800ed04:	d12a      	bne.n	800ed5c <_strtod_l+0xc4>
 800ed06:	3601      	adds	r6, #1
 800ed08:	2300      	movs	r3, #0
 800ed0a:	9615      	str	r6, [sp, #84]	; 0x54
 800ed0c:	930a      	str	r3, [sp, #40]	; 0x28
 800ed0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f040 857f 	bne.w	800f814 <_strtod_l+0xb7c>
 800ed16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed18:	b1db      	cbz	r3, 800ed52 <_strtod_l+0xba>
 800ed1a:	4642      	mov	r2, r8
 800ed1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ed20:	ec43 2b10 	vmov	d0, r2, r3
 800ed24:	b01b      	add	sp, #108	; 0x6c
 800ed26:	ecbd 8b02 	vpop	{d8}
 800ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2e:	2920      	cmp	r1, #32
 800ed30:	d1cc      	bne.n	800eccc <_strtod_l+0x34>
 800ed32:	3201      	adds	r2, #1
 800ed34:	e7bf      	b.n	800ecb6 <_strtod_l+0x1e>
 800ed36:	292d      	cmp	r1, #45	; 0x2d
 800ed38:	d1c8      	bne.n	800eccc <_strtod_l+0x34>
 800ed3a:	2101      	movs	r1, #1
 800ed3c:	910a      	str	r1, [sp, #40]	; 0x28
 800ed3e:	1c51      	adds	r1, r2, #1
 800ed40:	9115      	str	r1, [sp, #84]	; 0x54
 800ed42:	7852      	ldrb	r2, [r2, #1]
 800ed44:	2a00      	cmp	r2, #0
 800ed46:	d1c3      	bne.n	800ecd0 <_strtod_l+0x38>
 800ed48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed4a:	9515      	str	r5, [sp, #84]	; 0x54
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f040 855f 	bne.w	800f810 <_strtod_l+0xb78>
 800ed52:	4642      	mov	r2, r8
 800ed54:	464b      	mov	r3, r9
 800ed56:	e7e3      	b.n	800ed20 <_strtod_l+0x88>
 800ed58:	2100      	movs	r1, #0
 800ed5a:	e7ef      	b.n	800ed3c <_strtod_l+0xa4>
 800ed5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed5e:	b13a      	cbz	r2, 800ed70 <_strtod_l+0xd8>
 800ed60:	2135      	movs	r1, #53	; 0x35
 800ed62:	a818      	add	r0, sp, #96	; 0x60
 800ed64:	f7ff ff37 	bl	800ebd6 <__copybits>
 800ed68:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f7ff fb0a 	bl	800e384 <_Bfree>
 800ed70:	3f01      	subs	r7, #1
 800ed72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ed74:	2f04      	cmp	r7, #4
 800ed76:	d806      	bhi.n	800ed86 <_strtod_l+0xee>
 800ed78:	e8df f007 	tbb	[pc, r7]
 800ed7c:	201d0314 	.word	0x201d0314
 800ed80:	14          	.byte	0x14
 800ed81:	00          	.byte	0x00
 800ed82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ed86:	05e9      	lsls	r1, r5, #23
 800ed88:	bf48      	it	mi
 800ed8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ed8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed92:	0d1b      	lsrs	r3, r3, #20
 800ed94:	051b      	lsls	r3, r3, #20
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d1b9      	bne.n	800ed0e <_strtod_l+0x76>
 800ed9a:	f7fe fba9 	bl	800d4f0 <__errno>
 800ed9e:	2322      	movs	r3, #34	; 0x22
 800eda0:	6003      	str	r3, [r0, #0]
 800eda2:	e7b4      	b.n	800ed0e <_strtod_l+0x76>
 800eda4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800eda8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800edac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800edb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800edb4:	e7e7      	b.n	800ed86 <_strtod_l+0xee>
 800edb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ef30 <_strtod_l+0x298>
 800edba:	e7e4      	b.n	800ed86 <_strtod_l+0xee>
 800edbc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800edc0:	f04f 38ff 	mov.w	r8, #4294967295
 800edc4:	e7df      	b.n	800ed86 <_strtod_l+0xee>
 800edc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	9215      	str	r2, [sp, #84]	; 0x54
 800edcc:	785b      	ldrb	r3, [r3, #1]
 800edce:	2b30      	cmp	r3, #48	; 0x30
 800edd0:	d0f9      	beq.n	800edc6 <_strtod_l+0x12e>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d09b      	beq.n	800ed0e <_strtod_l+0x76>
 800edd6:	2301      	movs	r3, #1
 800edd8:	f04f 0a00 	mov.w	sl, #0
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ede0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ede2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ede6:	46d3      	mov	fp, sl
 800ede8:	220a      	movs	r2, #10
 800edea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800edec:	7806      	ldrb	r6, [r0, #0]
 800edee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800edf2:	b2d9      	uxtb	r1, r3
 800edf4:	2909      	cmp	r1, #9
 800edf6:	d926      	bls.n	800ee46 <_strtod_l+0x1ae>
 800edf8:	494c      	ldr	r1, [pc, #304]	; (800ef2c <_strtod_l+0x294>)
 800edfa:	2201      	movs	r2, #1
 800edfc:	f000 ff62 	bl	800fcc4 <strncmp>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d030      	beq.n	800ee66 <_strtod_l+0x1ce>
 800ee04:	2000      	movs	r0, #0
 800ee06:	4632      	mov	r2, r6
 800ee08:	9005      	str	r0, [sp, #20]
 800ee0a:	465e      	mov	r6, fp
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2a65      	cmp	r2, #101	; 0x65
 800ee10:	d001      	beq.n	800ee16 <_strtod_l+0x17e>
 800ee12:	2a45      	cmp	r2, #69	; 0x45
 800ee14:	d113      	bne.n	800ee3e <_strtod_l+0x1a6>
 800ee16:	b91e      	cbnz	r6, 800ee20 <_strtod_l+0x188>
 800ee18:	9a04      	ldr	r2, [sp, #16]
 800ee1a:	4302      	orrs	r2, r0
 800ee1c:	d094      	beq.n	800ed48 <_strtod_l+0xb0>
 800ee1e:	2600      	movs	r6, #0
 800ee20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ee22:	1c6a      	adds	r2, r5, #1
 800ee24:	9215      	str	r2, [sp, #84]	; 0x54
 800ee26:	786a      	ldrb	r2, [r5, #1]
 800ee28:	2a2b      	cmp	r2, #43	; 0x2b
 800ee2a:	d074      	beq.n	800ef16 <_strtod_l+0x27e>
 800ee2c:	2a2d      	cmp	r2, #45	; 0x2d
 800ee2e:	d078      	beq.n	800ef22 <_strtod_l+0x28a>
 800ee30:	f04f 0c00 	mov.w	ip, #0
 800ee34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ee38:	2909      	cmp	r1, #9
 800ee3a:	d97f      	bls.n	800ef3c <_strtod_l+0x2a4>
 800ee3c:	9515      	str	r5, [sp, #84]	; 0x54
 800ee3e:	2700      	movs	r7, #0
 800ee40:	e09e      	b.n	800ef80 <_strtod_l+0x2e8>
 800ee42:	2300      	movs	r3, #0
 800ee44:	e7c8      	b.n	800edd8 <_strtod_l+0x140>
 800ee46:	f1bb 0f08 	cmp.w	fp, #8
 800ee4a:	bfd8      	it	le
 800ee4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ee4e:	f100 0001 	add.w	r0, r0, #1
 800ee52:	bfda      	itte	le
 800ee54:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee58:	9309      	strle	r3, [sp, #36]	; 0x24
 800ee5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ee5e:	f10b 0b01 	add.w	fp, fp, #1
 800ee62:	9015      	str	r0, [sp, #84]	; 0x54
 800ee64:	e7c1      	b.n	800edea <_strtod_l+0x152>
 800ee66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	9215      	str	r2, [sp, #84]	; 0x54
 800ee6c:	785a      	ldrb	r2, [r3, #1]
 800ee6e:	f1bb 0f00 	cmp.w	fp, #0
 800ee72:	d037      	beq.n	800eee4 <_strtod_l+0x24c>
 800ee74:	9005      	str	r0, [sp, #20]
 800ee76:	465e      	mov	r6, fp
 800ee78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ee7c:	2b09      	cmp	r3, #9
 800ee7e:	d912      	bls.n	800eea6 <_strtod_l+0x20e>
 800ee80:	2301      	movs	r3, #1
 800ee82:	e7c4      	b.n	800ee0e <_strtod_l+0x176>
 800ee84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	9215      	str	r2, [sp, #84]	; 0x54
 800ee8a:	785a      	ldrb	r2, [r3, #1]
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	2a30      	cmp	r2, #48	; 0x30
 800ee90:	d0f8      	beq.n	800ee84 <_strtod_l+0x1ec>
 800ee92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ee96:	2b08      	cmp	r3, #8
 800ee98:	f200 84c1 	bhi.w	800f81e <_strtod_l+0xb86>
 800ee9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee9e:	9005      	str	r0, [sp, #20]
 800eea0:	2000      	movs	r0, #0
 800eea2:	930b      	str	r3, [sp, #44]	; 0x2c
 800eea4:	4606      	mov	r6, r0
 800eea6:	3a30      	subs	r2, #48	; 0x30
 800eea8:	f100 0301 	add.w	r3, r0, #1
 800eeac:	d014      	beq.n	800eed8 <_strtod_l+0x240>
 800eeae:	9905      	ldr	r1, [sp, #20]
 800eeb0:	4419      	add	r1, r3
 800eeb2:	9105      	str	r1, [sp, #20]
 800eeb4:	4633      	mov	r3, r6
 800eeb6:	eb00 0c06 	add.w	ip, r0, r6
 800eeba:	210a      	movs	r1, #10
 800eebc:	4563      	cmp	r3, ip
 800eebe:	d113      	bne.n	800eee8 <_strtod_l+0x250>
 800eec0:	1833      	adds	r3, r6, r0
 800eec2:	2b08      	cmp	r3, #8
 800eec4:	f106 0601 	add.w	r6, r6, #1
 800eec8:	4406      	add	r6, r0
 800eeca:	dc1a      	bgt.n	800ef02 <_strtod_l+0x26a>
 800eecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eece:	230a      	movs	r3, #10
 800eed0:	fb03 2301 	mla	r3, r3, r1, r2
 800eed4:	9309      	str	r3, [sp, #36]	; 0x24
 800eed6:	2300      	movs	r3, #0
 800eed8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eeda:	1c51      	adds	r1, r2, #1
 800eedc:	9115      	str	r1, [sp, #84]	; 0x54
 800eede:	7852      	ldrb	r2, [r2, #1]
 800eee0:	4618      	mov	r0, r3
 800eee2:	e7c9      	b.n	800ee78 <_strtod_l+0x1e0>
 800eee4:	4658      	mov	r0, fp
 800eee6:	e7d2      	b.n	800ee8e <_strtod_l+0x1f6>
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	f103 0301 	add.w	r3, r3, #1
 800eeee:	dc03      	bgt.n	800eef8 <_strtod_l+0x260>
 800eef0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eef2:	434f      	muls	r7, r1
 800eef4:	9709      	str	r7, [sp, #36]	; 0x24
 800eef6:	e7e1      	b.n	800eebc <_strtod_l+0x224>
 800eef8:	2b10      	cmp	r3, #16
 800eefa:	bfd8      	it	le
 800eefc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ef00:	e7dc      	b.n	800eebc <_strtod_l+0x224>
 800ef02:	2e10      	cmp	r6, #16
 800ef04:	bfdc      	itt	le
 800ef06:	230a      	movle	r3, #10
 800ef08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ef0c:	e7e3      	b.n	800eed6 <_strtod_l+0x23e>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	9305      	str	r3, [sp, #20]
 800ef12:	2301      	movs	r3, #1
 800ef14:	e780      	b.n	800ee18 <_strtod_l+0x180>
 800ef16:	f04f 0c00 	mov.w	ip, #0
 800ef1a:	1caa      	adds	r2, r5, #2
 800ef1c:	9215      	str	r2, [sp, #84]	; 0x54
 800ef1e:	78aa      	ldrb	r2, [r5, #2]
 800ef20:	e788      	b.n	800ee34 <_strtod_l+0x19c>
 800ef22:	f04f 0c01 	mov.w	ip, #1
 800ef26:	e7f8      	b.n	800ef1a <_strtod_l+0x282>
 800ef28:	08011150 	.word	0x08011150
 800ef2c:	0801114c 	.word	0x0801114c
 800ef30:	7ff00000 	.word	0x7ff00000
 800ef34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef36:	1c51      	adds	r1, r2, #1
 800ef38:	9115      	str	r1, [sp, #84]	; 0x54
 800ef3a:	7852      	ldrb	r2, [r2, #1]
 800ef3c:	2a30      	cmp	r2, #48	; 0x30
 800ef3e:	d0f9      	beq.n	800ef34 <_strtod_l+0x29c>
 800ef40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ef44:	2908      	cmp	r1, #8
 800ef46:	f63f af7a 	bhi.w	800ee3e <_strtod_l+0x1a6>
 800ef4a:	3a30      	subs	r2, #48	; 0x30
 800ef4c:	9208      	str	r2, [sp, #32]
 800ef4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef50:	920c      	str	r2, [sp, #48]	; 0x30
 800ef52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef54:	1c57      	adds	r7, r2, #1
 800ef56:	9715      	str	r7, [sp, #84]	; 0x54
 800ef58:	7852      	ldrb	r2, [r2, #1]
 800ef5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ef5e:	f1be 0f09 	cmp.w	lr, #9
 800ef62:	d938      	bls.n	800efd6 <_strtod_l+0x33e>
 800ef64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef66:	1a7f      	subs	r7, r7, r1
 800ef68:	2f08      	cmp	r7, #8
 800ef6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ef6e:	dc03      	bgt.n	800ef78 <_strtod_l+0x2e0>
 800ef70:	9908      	ldr	r1, [sp, #32]
 800ef72:	428f      	cmp	r7, r1
 800ef74:	bfa8      	it	ge
 800ef76:	460f      	movge	r7, r1
 800ef78:	f1bc 0f00 	cmp.w	ip, #0
 800ef7c:	d000      	beq.n	800ef80 <_strtod_l+0x2e8>
 800ef7e:	427f      	negs	r7, r7
 800ef80:	2e00      	cmp	r6, #0
 800ef82:	d14f      	bne.n	800f024 <_strtod_l+0x38c>
 800ef84:	9904      	ldr	r1, [sp, #16]
 800ef86:	4301      	orrs	r1, r0
 800ef88:	f47f aec1 	bne.w	800ed0e <_strtod_l+0x76>
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f47f aedb 	bne.w	800ed48 <_strtod_l+0xb0>
 800ef92:	2a69      	cmp	r2, #105	; 0x69
 800ef94:	d029      	beq.n	800efea <_strtod_l+0x352>
 800ef96:	dc26      	bgt.n	800efe6 <_strtod_l+0x34e>
 800ef98:	2a49      	cmp	r2, #73	; 0x49
 800ef9a:	d026      	beq.n	800efea <_strtod_l+0x352>
 800ef9c:	2a4e      	cmp	r2, #78	; 0x4e
 800ef9e:	f47f aed3 	bne.w	800ed48 <_strtod_l+0xb0>
 800efa2:	499b      	ldr	r1, [pc, #620]	; (800f210 <_strtod_l+0x578>)
 800efa4:	a815      	add	r0, sp, #84	; 0x54
 800efa6:	f001 f983 	bl	80102b0 <__match>
 800efaa:	2800      	cmp	r0, #0
 800efac:	f43f aecc 	beq.w	800ed48 <_strtod_l+0xb0>
 800efb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	2b28      	cmp	r3, #40	; 0x28
 800efb6:	d12f      	bne.n	800f018 <_strtod_l+0x380>
 800efb8:	4996      	ldr	r1, [pc, #600]	; (800f214 <_strtod_l+0x57c>)
 800efba:	aa18      	add	r2, sp, #96	; 0x60
 800efbc:	a815      	add	r0, sp, #84	; 0x54
 800efbe:	f001 f98b 	bl	80102d8 <__hexnan>
 800efc2:	2805      	cmp	r0, #5
 800efc4:	d128      	bne.n	800f018 <_strtod_l+0x380>
 800efc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800efc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800efcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800efd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800efd4:	e69b      	b.n	800ed0e <_strtod_l+0x76>
 800efd6:	9f08      	ldr	r7, [sp, #32]
 800efd8:	210a      	movs	r1, #10
 800efda:	fb01 2107 	mla	r1, r1, r7, r2
 800efde:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800efe2:	9208      	str	r2, [sp, #32]
 800efe4:	e7b5      	b.n	800ef52 <_strtod_l+0x2ba>
 800efe6:	2a6e      	cmp	r2, #110	; 0x6e
 800efe8:	e7d9      	b.n	800ef9e <_strtod_l+0x306>
 800efea:	498b      	ldr	r1, [pc, #556]	; (800f218 <_strtod_l+0x580>)
 800efec:	a815      	add	r0, sp, #84	; 0x54
 800efee:	f001 f95f 	bl	80102b0 <__match>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	f43f aea8 	beq.w	800ed48 <_strtod_l+0xb0>
 800eff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800effa:	4988      	ldr	r1, [pc, #544]	; (800f21c <_strtod_l+0x584>)
 800effc:	3b01      	subs	r3, #1
 800effe:	a815      	add	r0, sp, #84	; 0x54
 800f000:	9315      	str	r3, [sp, #84]	; 0x54
 800f002:	f001 f955 	bl	80102b0 <__match>
 800f006:	b910      	cbnz	r0, 800f00e <_strtod_l+0x376>
 800f008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f00a:	3301      	adds	r3, #1
 800f00c:	9315      	str	r3, [sp, #84]	; 0x54
 800f00e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f22c <_strtod_l+0x594>
 800f012:	f04f 0800 	mov.w	r8, #0
 800f016:	e67a      	b.n	800ed0e <_strtod_l+0x76>
 800f018:	4881      	ldr	r0, [pc, #516]	; (800f220 <_strtod_l+0x588>)
 800f01a:	f000 fe65 	bl	800fce8 <nan>
 800f01e:	ec59 8b10 	vmov	r8, r9, d0
 800f022:	e674      	b.n	800ed0e <_strtod_l+0x76>
 800f024:	9b05      	ldr	r3, [sp, #20]
 800f026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f028:	1afb      	subs	r3, r7, r3
 800f02a:	f1bb 0f00 	cmp.w	fp, #0
 800f02e:	bf08      	it	eq
 800f030:	46b3      	moveq	fp, r6
 800f032:	2e10      	cmp	r6, #16
 800f034:	9308      	str	r3, [sp, #32]
 800f036:	4635      	mov	r5, r6
 800f038:	bfa8      	it	ge
 800f03a:	2510      	movge	r5, #16
 800f03c:	f7f1 fa62 	bl	8000504 <__aeabi_ui2d>
 800f040:	2e09      	cmp	r6, #9
 800f042:	4680      	mov	r8, r0
 800f044:	4689      	mov	r9, r1
 800f046:	dd13      	ble.n	800f070 <_strtod_l+0x3d8>
 800f048:	4b76      	ldr	r3, [pc, #472]	; (800f224 <_strtod_l+0x58c>)
 800f04a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f04e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f052:	f7f1 fad1 	bl	80005f8 <__aeabi_dmul>
 800f056:	4680      	mov	r8, r0
 800f058:	4650      	mov	r0, sl
 800f05a:	4689      	mov	r9, r1
 800f05c:	f7f1 fa52 	bl	8000504 <__aeabi_ui2d>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	4640      	mov	r0, r8
 800f066:	4649      	mov	r1, r9
 800f068:	f7f1 f910 	bl	800028c <__adddf3>
 800f06c:	4680      	mov	r8, r0
 800f06e:	4689      	mov	r9, r1
 800f070:	2e0f      	cmp	r6, #15
 800f072:	dc38      	bgt.n	800f0e6 <_strtod_l+0x44e>
 800f074:	9b08      	ldr	r3, [sp, #32]
 800f076:	2b00      	cmp	r3, #0
 800f078:	f43f ae49 	beq.w	800ed0e <_strtod_l+0x76>
 800f07c:	dd24      	ble.n	800f0c8 <_strtod_l+0x430>
 800f07e:	2b16      	cmp	r3, #22
 800f080:	dc0b      	bgt.n	800f09a <_strtod_l+0x402>
 800f082:	4968      	ldr	r1, [pc, #416]	; (800f224 <_strtod_l+0x58c>)
 800f084:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f08c:	4642      	mov	r2, r8
 800f08e:	464b      	mov	r3, r9
 800f090:	f7f1 fab2 	bl	80005f8 <__aeabi_dmul>
 800f094:	4680      	mov	r8, r0
 800f096:	4689      	mov	r9, r1
 800f098:	e639      	b.n	800ed0e <_strtod_l+0x76>
 800f09a:	9a08      	ldr	r2, [sp, #32]
 800f09c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	db20      	blt.n	800f0e6 <_strtod_l+0x44e>
 800f0a4:	4c5f      	ldr	r4, [pc, #380]	; (800f224 <_strtod_l+0x58c>)
 800f0a6:	f1c6 060f 	rsb	r6, r6, #15
 800f0aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f0ae:	4642      	mov	r2, r8
 800f0b0:	464b      	mov	r3, r9
 800f0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0b6:	f7f1 fa9f 	bl	80005f8 <__aeabi_dmul>
 800f0ba:	9b08      	ldr	r3, [sp, #32]
 800f0bc:	1b9e      	subs	r6, r3, r6
 800f0be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f0c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0c6:	e7e3      	b.n	800f090 <_strtod_l+0x3f8>
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	3316      	adds	r3, #22
 800f0cc:	db0b      	blt.n	800f0e6 <_strtod_l+0x44e>
 800f0ce:	9b05      	ldr	r3, [sp, #20]
 800f0d0:	1bdf      	subs	r7, r3, r7
 800f0d2:	4b54      	ldr	r3, [pc, #336]	; (800f224 <_strtod_l+0x58c>)
 800f0d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0dc:	4640      	mov	r0, r8
 800f0de:	4649      	mov	r1, r9
 800f0e0:	f7f1 fbb4 	bl	800084c <__aeabi_ddiv>
 800f0e4:	e7d6      	b.n	800f094 <_strtod_l+0x3fc>
 800f0e6:	9b08      	ldr	r3, [sp, #32]
 800f0e8:	1b75      	subs	r5, r6, r5
 800f0ea:	441d      	add	r5, r3
 800f0ec:	2d00      	cmp	r5, #0
 800f0ee:	dd70      	ble.n	800f1d2 <_strtod_l+0x53a>
 800f0f0:	f015 030f 	ands.w	r3, r5, #15
 800f0f4:	d00a      	beq.n	800f10c <_strtod_l+0x474>
 800f0f6:	494b      	ldr	r1, [pc, #300]	; (800f224 <_strtod_l+0x58c>)
 800f0f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0fc:	4642      	mov	r2, r8
 800f0fe:	464b      	mov	r3, r9
 800f100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f104:	f7f1 fa78 	bl	80005f8 <__aeabi_dmul>
 800f108:	4680      	mov	r8, r0
 800f10a:	4689      	mov	r9, r1
 800f10c:	f035 050f 	bics.w	r5, r5, #15
 800f110:	d04d      	beq.n	800f1ae <_strtod_l+0x516>
 800f112:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f116:	dd22      	ble.n	800f15e <_strtod_l+0x4c6>
 800f118:	2500      	movs	r5, #0
 800f11a:	46ab      	mov	fp, r5
 800f11c:	9509      	str	r5, [sp, #36]	; 0x24
 800f11e:	9505      	str	r5, [sp, #20]
 800f120:	2322      	movs	r3, #34	; 0x22
 800f122:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f22c <_strtod_l+0x594>
 800f126:	6023      	str	r3, [r4, #0]
 800f128:	f04f 0800 	mov.w	r8, #0
 800f12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f43f aded 	beq.w	800ed0e <_strtod_l+0x76>
 800f134:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f136:	4620      	mov	r0, r4
 800f138:	f7ff f924 	bl	800e384 <_Bfree>
 800f13c:	9905      	ldr	r1, [sp, #20]
 800f13e:	4620      	mov	r0, r4
 800f140:	f7ff f920 	bl	800e384 <_Bfree>
 800f144:	4659      	mov	r1, fp
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff f91c 	bl	800e384 <_Bfree>
 800f14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f14e:	4620      	mov	r0, r4
 800f150:	f7ff f918 	bl	800e384 <_Bfree>
 800f154:	4629      	mov	r1, r5
 800f156:	4620      	mov	r0, r4
 800f158:	f7ff f914 	bl	800e384 <_Bfree>
 800f15c:	e5d7      	b.n	800ed0e <_strtod_l+0x76>
 800f15e:	4b32      	ldr	r3, [pc, #200]	; (800f228 <_strtod_l+0x590>)
 800f160:	9304      	str	r3, [sp, #16]
 800f162:	2300      	movs	r3, #0
 800f164:	112d      	asrs	r5, r5, #4
 800f166:	4640      	mov	r0, r8
 800f168:	4649      	mov	r1, r9
 800f16a:	469a      	mov	sl, r3
 800f16c:	2d01      	cmp	r5, #1
 800f16e:	dc21      	bgt.n	800f1b4 <_strtod_l+0x51c>
 800f170:	b10b      	cbz	r3, 800f176 <_strtod_l+0x4de>
 800f172:	4680      	mov	r8, r0
 800f174:	4689      	mov	r9, r1
 800f176:	492c      	ldr	r1, [pc, #176]	; (800f228 <_strtod_l+0x590>)
 800f178:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f17c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f180:	4642      	mov	r2, r8
 800f182:	464b      	mov	r3, r9
 800f184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	4b27      	ldr	r3, [pc, #156]	; (800f22c <_strtod_l+0x594>)
 800f18e:	460a      	mov	r2, r1
 800f190:	400b      	ands	r3, r1
 800f192:	4927      	ldr	r1, [pc, #156]	; (800f230 <_strtod_l+0x598>)
 800f194:	428b      	cmp	r3, r1
 800f196:	4680      	mov	r8, r0
 800f198:	d8be      	bhi.n	800f118 <_strtod_l+0x480>
 800f19a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f19e:	428b      	cmp	r3, r1
 800f1a0:	bf86      	itte	hi
 800f1a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f234 <_strtod_l+0x59c>
 800f1a6:	f04f 38ff 	movhi.w	r8, #4294967295
 800f1aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	e07b      	b.n	800f2ac <_strtod_l+0x614>
 800f1b4:	07ea      	lsls	r2, r5, #31
 800f1b6:	d505      	bpl.n	800f1c4 <_strtod_l+0x52c>
 800f1b8:	9b04      	ldr	r3, [sp, #16]
 800f1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1be:	f7f1 fa1b 	bl	80005f8 <__aeabi_dmul>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	9a04      	ldr	r2, [sp, #16]
 800f1c6:	3208      	adds	r2, #8
 800f1c8:	f10a 0a01 	add.w	sl, sl, #1
 800f1cc:	106d      	asrs	r5, r5, #1
 800f1ce:	9204      	str	r2, [sp, #16]
 800f1d0:	e7cc      	b.n	800f16c <_strtod_l+0x4d4>
 800f1d2:	d0ec      	beq.n	800f1ae <_strtod_l+0x516>
 800f1d4:	426d      	negs	r5, r5
 800f1d6:	f015 020f 	ands.w	r2, r5, #15
 800f1da:	d00a      	beq.n	800f1f2 <_strtod_l+0x55a>
 800f1dc:	4b11      	ldr	r3, [pc, #68]	; (800f224 <_strtod_l+0x58c>)
 800f1de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	4649      	mov	r1, r9
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	f7f1 fb2f 	bl	800084c <__aeabi_ddiv>
 800f1ee:	4680      	mov	r8, r0
 800f1f0:	4689      	mov	r9, r1
 800f1f2:	112d      	asrs	r5, r5, #4
 800f1f4:	d0db      	beq.n	800f1ae <_strtod_l+0x516>
 800f1f6:	2d1f      	cmp	r5, #31
 800f1f8:	dd1e      	ble.n	800f238 <_strtod_l+0x5a0>
 800f1fa:	2500      	movs	r5, #0
 800f1fc:	46ab      	mov	fp, r5
 800f1fe:	9509      	str	r5, [sp, #36]	; 0x24
 800f200:	9505      	str	r5, [sp, #20]
 800f202:	2322      	movs	r3, #34	; 0x22
 800f204:	f04f 0800 	mov.w	r8, #0
 800f208:	f04f 0900 	mov.w	r9, #0
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	e78d      	b.n	800f12c <_strtod_l+0x494>
 800f210:	08010f3e 	.word	0x08010f3e
 800f214:	08011164 	.word	0x08011164
 800f218:	08010f36 	.word	0x08010f36
 800f21c:	08010f6d 	.word	0x08010f6d
 800f220:	080111f4 	.word	0x080111f4
 800f224:	08011078 	.word	0x08011078
 800f228:	08011050 	.word	0x08011050
 800f22c:	7ff00000 	.word	0x7ff00000
 800f230:	7ca00000 	.word	0x7ca00000
 800f234:	7fefffff 	.word	0x7fefffff
 800f238:	f015 0310 	ands.w	r3, r5, #16
 800f23c:	bf18      	it	ne
 800f23e:	236a      	movne	r3, #106	; 0x6a
 800f240:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f5e4 <_strtod_l+0x94c>
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	4640      	mov	r0, r8
 800f248:	4649      	mov	r1, r9
 800f24a:	2300      	movs	r3, #0
 800f24c:	07ea      	lsls	r2, r5, #31
 800f24e:	d504      	bpl.n	800f25a <_strtod_l+0x5c2>
 800f250:	e9da 2300 	ldrd	r2, r3, [sl]
 800f254:	f7f1 f9d0 	bl	80005f8 <__aeabi_dmul>
 800f258:	2301      	movs	r3, #1
 800f25a:	106d      	asrs	r5, r5, #1
 800f25c:	f10a 0a08 	add.w	sl, sl, #8
 800f260:	d1f4      	bne.n	800f24c <_strtod_l+0x5b4>
 800f262:	b10b      	cbz	r3, 800f268 <_strtod_l+0x5d0>
 800f264:	4680      	mov	r8, r0
 800f266:	4689      	mov	r9, r1
 800f268:	9b04      	ldr	r3, [sp, #16]
 800f26a:	b1bb      	cbz	r3, 800f29c <_strtod_l+0x604>
 800f26c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f270:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f274:	2b00      	cmp	r3, #0
 800f276:	4649      	mov	r1, r9
 800f278:	dd10      	ble.n	800f29c <_strtod_l+0x604>
 800f27a:	2b1f      	cmp	r3, #31
 800f27c:	f340 811e 	ble.w	800f4bc <_strtod_l+0x824>
 800f280:	2b34      	cmp	r3, #52	; 0x34
 800f282:	bfde      	ittt	le
 800f284:	f04f 33ff 	movle.w	r3, #4294967295
 800f288:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f28c:	4093      	lslle	r3, r2
 800f28e:	f04f 0800 	mov.w	r8, #0
 800f292:	bfcc      	ite	gt
 800f294:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f298:	ea03 0901 	andle.w	r9, r3, r1
 800f29c:	2200      	movs	r2, #0
 800f29e:	2300      	movs	r3, #0
 800f2a0:	4640      	mov	r0, r8
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	f7f1 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d1a6      	bne.n	800f1fa <_strtod_l+0x562>
 800f2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2b2:	4633      	mov	r3, r6
 800f2b4:	465a      	mov	r2, fp
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f7ff f8cc 	bl	800e454 <__s2b>
 800f2bc:	9009      	str	r0, [sp, #36]	; 0x24
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f43f af2a 	beq.w	800f118 <_strtod_l+0x480>
 800f2c4:	9a08      	ldr	r2, [sp, #32]
 800f2c6:	9b05      	ldr	r3, [sp, #20]
 800f2c8:	2a00      	cmp	r2, #0
 800f2ca:	eba3 0307 	sub.w	r3, r3, r7
 800f2ce:	bfa8      	it	ge
 800f2d0:	2300      	movge	r3, #0
 800f2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f2d4:	2500      	movs	r5, #0
 800f2d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f2da:	9312      	str	r3, [sp, #72]	; 0x48
 800f2dc:	46ab      	mov	fp, r5
 800f2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	6859      	ldr	r1, [r3, #4]
 800f2e4:	f7ff f80e 	bl	800e304 <_Balloc>
 800f2e8:	9005      	str	r0, [sp, #20]
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	f43f af18 	beq.w	800f120 <_strtod_l+0x488>
 800f2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2f2:	691a      	ldr	r2, [r3, #16]
 800f2f4:	3202      	adds	r2, #2
 800f2f6:	f103 010c 	add.w	r1, r3, #12
 800f2fa:	0092      	lsls	r2, r2, #2
 800f2fc:	300c      	adds	r0, #12
 800f2fe:	f7fe f924 	bl	800d54a <memcpy>
 800f302:	ec49 8b10 	vmov	d0, r8, r9
 800f306:	aa18      	add	r2, sp, #96	; 0x60
 800f308:	a917      	add	r1, sp, #92	; 0x5c
 800f30a:	4620      	mov	r0, r4
 800f30c:	f7ff fbd6 	bl	800eabc <__d2b>
 800f310:	ec49 8b18 	vmov	d8, r8, r9
 800f314:	9016      	str	r0, [sp, #88]	; 0x58
 800f316:	2800      	cmp	r0, #0
 800f318:	f43f af02 	beq.w	800f120 <_strtod_l+0x488>
 800f31c:	2101      	movs	r1, #1
 800f31e:	4620      	mov	r0, r4
 800f320:	f7ff f930 	bl	800e584 <__i2b>
 800f324:	4683      	mov	fp, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	f43f aefa 	beq.w	800f120 <_strtod_l+0x488>
 800f32c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f32e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f330:	2e00      	cmp	r6, #0
 800f332:	bfab      	itete	ge
 800f334:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f336:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f338:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f33a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f33e:	bfac      	ite	ge
 800f340:	eb06 0a03 	addge.w	sl, r6, r3
 800f344:	1b9f      	sublt	r7, r3, r6
 800f346:	9b04      	ldr	r3, [sp, #16]
 800f348:	1af6      	subs	r6, r6, r3
 800f34a:	4416      	add	r6, r2
 800f34c:	4ba0      	ldr	r3, [pc, #640]	; (800f5d0 <_strtod_l+0x938>)
 800f34e:	3e01      	subs	r6, #1
 800f350:	429e      	cmp	r6, r3
 800f352:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f356:	f280 80c4 	bge.w	800f4e2 <_strtod_l+0x84a>
 800f35a:	1b9b      	subs	r3, r3, r6
 800f35c:	2b1f      	cmp	r3, #31
 800f35e:	eba2 0203 	sub.w	r2, r2, r3
 800f362:	f04f 0101 	mov.w	r1, #1
 800f366:	f300 80b0 	bgt.w	800f4ca <_strtod_l+0x832>
 800f36a:	fa01 f303 	lsl.w	r3, r1, r3
 800f36e:	930e      	str	r3, [sp, #56]	; 0x38
 800f370:	2300      	movs	r3, #0
 800f372:	930d      	str	r3, [sp, #52]	; 0x34
 800f374:	eb0a 0602 	add.w	r6, sl, r2
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	45b2      	cmp	sl, r6
 800f37c:	4417      	add	r7, r2
 800f37e:	441f      	add	r7, r3
 800f380:	4653      	mov	r3, sl
 800f382:	bfa8      	it	ge
 800f384:	4633      	movge	r3, r6
 800f386:	42bb      	cmp	r3, r7
 800f388:	bfa8      	it	ge
 800f38a:	463b      	movge	r3, r7
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	bfc2      	ittt	gt
 800f390:	1af6      	subgt	r6, r6, r3
 800f392:	1aff      	subgt	r7, r7, r3
 800f394:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	dd17      	ble.n	800f3ce <_strtod_l+0x736>
 800f39e:	4659      	mov	r1, fp
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f7ff f9ae 	bl	800e704 <__pow5mult>
 800f3a8:	4683      	mov	fp, r0
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	f43f aeb8 	beq.w	800f120 <_strtod_l+0x488>
 800f3b0:	4601      	mov	r1, r0
 800f3b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7ff f8fb 	bl	800e5b0 <__multiply>
 800f3ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	f43f aeaf 	beq.w	800f120 <_strtod_l+0x488>
 800f3c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f7fe ffdd 	bl	800e384 <_Bfree>
 800f3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3cc:	9316      	str	r3, [sp, #88]	; 0x58
 800f3ce:	2e00      	cmp	r6, #0
 800f3d0:	f300 808c 	bgt.w	800f4ec <_strtod_l+0x854>
 800f3d4:	9b08      	ldr	r3, [sp, #32]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	dd08      	ble.n	800f3ec <_strtod_l+0x754>
 800f3da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3dc:	9905      	ldr	r1, [sp, #20]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f7ff f990 	bl	800e704 <__pow5mult>
 800f3e4:	9005      	str	r0, [sp, #20]
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f43f ae9a 	beq.w	800f120 <_strtod_l+0x488>
 800f3ec:	2f00      	cmp	r7, #0
 800f3ee:	dd08      	ble.n	800f402 <_strtod_l+0x76a>
 800f3f0:	9905      	ldr	r1, [sp, #20]
 800f3f2:	463a      	mov	r2, r7
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f7ff f9df 	bl	800e7b8 <__lshift>
 800f3fa:	9005      	str	r0, [sp, #20]
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f43f ae8f 	beq.w	800f120 <_strtod_l+0x488>
 800f402:	f1ba 0f00 	cmp.w	sl, #0
 800f406:	dd08      	ble.n	800f41a <_strtod_l+0x782>
 800f408:	4659      	mov	r1, fp
 800f40a:	4652      	mov	r2, sl
 800f40c:	4620      	mov	r0, r4
 800f40e:	f7ff f9d3 	bl	800e7b8 <__lshift>
 800f412:	4683      	mov	fp, r0
 800f414:	2800      	cmp	r0, #0
 800f416:	f43f ae83 	beq.w	800f120 <_strtod_l+0x488>
 800f41a:	9a05      	ldr	r2, [sp, #20]
 800f41c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f41e:	4620      	mov	r0, r4
 800f420:	f7ff fa52 	bl	800e8c8 <__mdiff>
 800f424:	4605      	mov	r5, r0
 800f426:	2800      	cmp	r0, #0
 800f428:	f43f ae7a 	beq.w	800f120 <_strtod_l+0x488>
 800f42c:	68c3      	ldr	r3, [r0, #12]
 800f42e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f430:	2300      	movs	r3, #0
 800f432:	60c3      	str	r3, [r0, #12]
 800f434:	4659      	mov	r1, fp
 800f436:	f7ff fa2b 	bl	800e890 <__mcmp>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	da60      	bge.n	800f500 <_strtod_l+0x868>
 800f43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f440:	ea53 0308 	orrs.w	r3, r3, r8
 800f444:	f040 8084 	bne.w	800f550 <_strtod_l+0x8b8>
 800f448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d17f      	bne.n	800f550 <_strtod_l+0x8b8>
 800f450:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f454:	0d1b      	lsrs	r3, r3, #20
 800f456:	051b      	lsls	r3, r3, #20
 800f458:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f45c:	d978      	bls.n	800f550 <_strtod_l+0x8b8>
 800f45e:	696b      	ldr	r3, [r5, #20]
 800f460:	b913      	cbnz	r3, 800f468 <_strtod_l+0x7d0>
 800f462:	692b      	ldr	r3, [r5, #16]
 800f464:	2b01      	cmp	r3, #1
 800f466:	dd73      	ble.n	800f550 <_strtod_l+0x8b8>
 800f468:	4629      	mov	r1, r5
 800f46a:	2201      	movs	r2, #1
 800f46c:	4620      	mov	r0, r4
 800f46e:	f7ff f9a3 	bl	800e7b8 <__lshift>
 800f472:	4659      	mov	r1, fp
 800f474:	4605      	mov	r5, r0
 800f476:	f7ff fa0b 	bl	800e890 <__mcmp>
 800f47a:	2800      	cmp	r0, #0
 800f47c:	dd68      	ble.n	800f550 <_strtod_l+0x8b8>
 800f47e:	9904      	ldr	r1, [sp, #16]
 800f480:	4a54      	ldr	r2, [pc, #336]	; (800f5d4 <_strtod_l+0x93c>)
 800f482:	464b      	mov	r3, r9
 800f484:	2900      	cmp	r1, #0
 800f486:	f000 8084 	beq.w	800f592 <_strtod_l+0x8fa>
 800f48a:	ea02 0109 	and.w	r1, r2, r9
 800f48e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f492:	dc7e      	bgt.n	800f592 <_strtod_l+0x8fa>
 800f494:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f498:	f77f aeb3 	ble.w	800f202 <_strtod_l+0x56a>
 800f49c:	4b4e      	ldr	r3, [pc, #312]	; (800f5d8 <_strtod_l+0x940>)
 800f49e:	4640      	mov	r0, r8
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f7f1 f8a8 	bl	80005f8 <__aeabi_dmul>
 800f4a8:	4b4a      	ldr	r3, [pc, #296]	; (800f5d4 <_strtod_l+0x93c>)
 800f4aa:	400b      	ands	r3, r1
 800f4ac:	4680      	mov	r8, r0
 800f4ae:	4689      	mov	r9, r1
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f47f ae3f 	bne.w	800f134 <_strtod_l+0x49c>
 800f4b6:	2322      	movs	r3, #34	; 0x22
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	e63b      	b.n	800f134 <_strtod_l+0x49c>
 800f4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c4:	ea03 0808 	and.w	r8, r3, r8
 800f4c8:	e6e8      	b.n	800f29c <_strtod_l+0x604>
 800f4ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f4ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f4d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f4d6:	36e2      	adds	r6, #226	; 0xe2
 800f4d8:	fa01 f306 	lsl.w	r3, r1, r6
 800f4dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f4e0:	e748      	b.n	800f374 <_strtod_l+0x6dc>
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f4ea:	e743      	b.n	800f374 <_strtod_l+0x6dc>
 800f4ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f4ee:	4632      	mov	r2, r6
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f7ff f961 	bl	800e7b8 <__lshift>
 800f4f6:	9016      	str	r0, [sp, #88]	; 0x58
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	f47f af6b 	bne.w	800f3d4 <_strtod_l+0x73c>
 800f4fe:	e60f      	b.n	800f120 <_strtod_l+0x488>
 800f500:	46ca      	mov	sl, r9
 800f502:	d171      	bne.n	800f5e8 <_strtod_l+0x950>
 800f504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f506:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f50a:	b352      	cbz	r2, 800f562 <_strtod_l+0x8ca>
 800f50c:	4a33      	ldr	r2, [pc, #204]	; (800f5dc <_strtod_l+0x944>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d12a      	bne.n	800f568 <_strtod_l+0x8d0>
 800f512:	9b04      	ldr	r3, [sp, #16]
 800f514:	4641      	mov	r1, r8
 800f516:	b1fb      	cbz	r3, 800f558 <_strtod_l+0x8c0>
 800f518:	4b2e      	ldr	r3, [pc, #184]	; (800f5d4 <_strtod_l+0x93c>)
 800f51a:	ea09 0303 	and.w	r3, r9, r3
 800f51e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f522:	f04f 32ff 	mov.w	r2, #4294967295
 800f526:	d81a      	bhi.n	800f55e <_strtod_l+0x8c6>
 800f528:	0d1b      	lsrs	r3, r3, #20
 800f52a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f52e:	fa02 f303 	lsl.w	r3, r2, r3
 800f532:	4299      	cmp	r1, r3
 800f534:	d118      	bne.n	800f568 <_strtod_l+0x8d0>
 800f536:	4b2a      	ldr	r3, [pc, #168]	; (800f5e0 <_strtod_l+0x948>)
 800f538:	459a      	cmp	sl, r3
 800f53a:	d102      	bne.n	800f542 <_strtod_l+0x8aa>
 800f53c:	3101      	adds	r1, #1
 800f53e:	f43f adef 	beq.w	800f120 <_strtod_l+0x488>
 800f542:	4b24      	ldr	r3, [pc, #144]	; (800f5d4 <_strtod_l+0x93c>)
 800f544:	ea0a 0303 	and.w	r3, sl, r3
 800f548:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f54c:	f04f 0800 	mov.w	r8, #0
 800f550:	9b04      	ldr	r3, [sp, #16]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1a2      	bne.n	800f49c <_strtod_l+0x804>
 800f556:	e5ed      	b.n	800f134 <_strtod_l+0x49c>
 800f558:	f04f 33ff 	mov.w	r3, #4294967295
 800f55c:	e7e9      	b.n	800f532 <_strtod_l+0x89a>
 800f55e:	4613      	mov	r3, r2
 800f560:	e7e7      	b.n	800f532 <_strtod_l+0x89a>
 800f562:	ea53 0308 	orrs.w	r3, r3, r8
 800f566:	d08a      	beq.n	800f47e <_strtod_l+0x7e6>
 800f568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f56a:	b1e3      	cbz	r3, 800f5a6 <_strtod_l+0x90e>
 800f56c:	ea13 0f0a 	tst.w	r3, sl
 800f570:	d0ee      	beq.n	800f550 <_strtod_l+0x8b8>
 800f572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f574:	9a04      	ldr	r2, [sp, #16]
 800f576:	4640      	mov	r0, r8
 800f578:	4649      	mov	r1, r9
 800f57a:	b1c3      	cbz	r3, 800f5ae <_strtod_l+0x916>
 800f57c:	f7ff fb6f 	bl	800ec5e <sulp>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	ec51 0b18 	vmov	r0, r1, d8
 800f588:	f7f0 fe80 	bl	800028c <__adddf3>
 800f58c:	4680      	mov	r8, r0
 800f58e:	4689      	mov	r9, r1
 800f590:	e7de      	b.n	800f550 <_strtod_l+0x8b8>
 800f592:	4013      	ands	r3, r2
 800f594:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f598:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f59c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f5a0:	f04f 38ff 	mov.w	r8, #4294967295
 800f5a4:	e7d4      	b.n	800f550 <_strtod_l+0x8b8>
 800f5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5a8:	ea13 0f08 	tst.w	r3, r8
 800f5ac:	e7e0      	b.n	800f570 <_strtod_l+0x8d8>
 800f5ae:	f7ff fb56 	bl	800ec5e <sulp>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	ec51 0b18 	vmov	r0, r1, d8
 800f5ba:	f7f0 fe65 	bl	8000288 <__aeabi_dsub>
 800f5be:	2200      	movs	r2, #0
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	4680      	mov	r8, r0
 800f5c4:	4689      	mov	r9, r1
 800f5c6:	f7f1 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d0c0      	beq.n	800f550 <_strtod_l+0x8b8>
 800f5ce:	e618      	b.n	800f202 <_strtod_l+0x56a>
 800f5d0:	fffffc02 	.word	0xfffffc02
 800f5d4:	7ff00000 	.word	0x7ff00000
 800f5d8:	39500000 	.word	0x39500000
 800f5dc:	000fffff 	.word	0x000fffff
 800f5e0:	7fefffff 	.word	0x7fefffff
 800f5e4:	08011178 	.word	0x08011178
 800f5e8:	4659      	mov	r1, fp
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f7ff fac0 	bl	800eb70 <__ratio>
 800f5f0:	ec57 6b10 	vmov	r6, r7, d0
 800f5f4:	ee10 0a10 	vmov	r0, s0
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f1 fa76 	bl	8000af0 <__aeabi_dcmple>
 800f604:	2800      	cmp	r0, #0
 800f606:	d071      	beq.n	800f6ec <_strtod_l+0xa54>
 800f608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d17c      	bne.n	800f708 <_strtod_l+0xa70>
 800f60e:	f1b8 0f00 	cmp.w	r8, #0
 800f612:	d15a      	bne.n	800f6ca <_strtod_l+0xa32>
 800f614:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d15d      	bne.n	800f6d8 <_strtod_l+0xa40>
 800f61c:	4b90      	ldr	r3, [pc, #576]	; (800f860 <_strtod_l+0xbc8>)
 800f61e:	2200      	movs	r2, #0
 800f620:	4630      	mov	r0, r6
 800f622:	4639      	mov	r1, r7
 800f624:	f7f1 fa5a 	bl	8000adc <__aeabi_dcmplt>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d15c      	bne.n	800f6e6 <_strtod_l+0xa4e>
 800f62c:	4630      	mov	r0, r6
 800f62e:	4639      	mov	r1, r7
 800f630:	4b8c      	ldr	r3, [pc, #560]	; (800f864 <_strtod_l+0xbcc>)
 800f632:	2200      	movs	r2, #0
 800f634:	f7f0 ffe0 	bl	80005f8 <__aeabi_dmul>
 800f638:	4606      	mov	r6, r0
 800f63a:	460f      	mov	r7, r1
 800f63c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f640:	9606      	str	r6, [sp, #24]
 800f642:	9307      	str	r3, [sp, #28]
 800f644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f648:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f64c:	4b86      	ldr	r3, [pc, #536]	; (800f868 <_strtod_l+0xbd0>)
 800f64e:	ea0a 0303 	and.w	r3, sl, r3
 800f652:	930d      	str	r3, [sp, #52]	; 0x34
 800f654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f656:	4b85      	ldr	r3, [pc, #532]	; (800f86c <_strtod_l+0xbd4>)
 800f658:	429a      	cmp	r2, r3
 800f65a:	f040 8090 	bne.w	800f77e <_strtod_l+0xae6>
 800f65e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f662:	ec49 8b10 	vmov	d0, r8, r9
 800f666:	f7ff f9b9 	bl	800e9dc <__ulp>
 800f66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f66e:	ec51 0b10 	vmov	r0, r1, d0
 800f672:	f7f0 ffc1 	bl	80005f8 <__aeabi_dmul>
 800f676:	4642      	mov	r2, r8
 800f678:	464b      	mov	r3, r9
 800f67a:	f7f0 fe07 	bl	800028c <__adddf3>
 800f67e:	460b      	mov	r3, r1
 800f680:	4979      	ldr	r1, [pc, #484]	; (800f868 <_strtod_l+0xbd0>)
 800f682:	4a7b      	ldr	r2, [pc, #492]	; (800f870 <_strtod_l+0xbd8>)
 800f684:	4019      	ands	r1, r3
 800f686:	4291      	cmp	r1, r2
 800f688:	4680      	mov	r8, r0
 800f68a:	d944      	bls.n	800f716 <_strtod_l+0xa7e>
 800f68c:	ee18 2a90 	vmov	r2, s17
 800f690:	4b78      	ldr	r3, [pc, #480]	; (800f874 <_strtod_l+0xbdc>)
 800f692:	429a      	cmp	r2, r3
 800f694:	d104      	bne.n	800f6a0 <_strtod_l+0xa08>
 800f696:	ee18 3a10 	vmov	r3, s16
 800f69a:	3301      	adds	r3, #1
 800f69c:	f43f ad40 	beq.w	800f120 <_strtod_l+0x488>
 800f6a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800f874 <_strtod_l+0xbdc>
 800f6a4:	f04f 38ff 	mov.w	r8, #4294967295
 800f6a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f7fe fe6a 	bl	800e384 <_Bfree>
 800f6b0:	9905      	ldr	r1, [sp, #20]
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f7fe fe66 	bl	800e384 <_Bfree>
 800f6b8:	4659      	mov	r1, fp
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f7fe fe62 	bl	800e384 <_Bfree>
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f7fe fe5e 	bl	800e384 <_Bfree>
 800f6c8:	e609      	b.n	800f2de <_strtod_l+0x646>
 800f6ca:	f1b8 0f01 	cmp.w	r8, #1
 800f6ce:	d103      	bne.n	800f6d8 <_strtod_l+0xa40>
 800f6d0:	f1b9 0f00 	cmp.w	r9, #0
 800f6d4:	f43f ad95 	beq.w	800f202 <_strtod_l+0x56a>
 800f6d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800f830 <_strtod_l+0xb98>
 800f6dc:	4f60      	ldr	r7, [pc, #384]	; (800f860 <_strtod_l+0xbc8>)
 800f6de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f6e2:	2600      	movs	r6, #0
 800f6e4:	e7ae      	b.n	800f644 <_strtod_l+0x9ac>
 800f6e6:	4f5f      	ldr	r7, [pc, #380]	; (800f864 <_strtod_l+0xbcc>)
 800f6e8:	2600      	movs	r6, #0
 800f6ea:	e7a7      	b.n	800f63c <_strtod_l+0x9a4>
 800f6ec:	4b5d      	ldr	r3, [pc, #372]	; (800f864 <_strtod_l+0xbcc>)
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f7f0 ff80 	bl	80005f8 <__aeabi_dmul>
 800f6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d09c      	beq.n	800f63c <_strtod_l+0x9a4>
 800f702:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f706:	e79d      	b.n	800f644 <_strtod_l+0x9ac>
 800f708:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f838 <_strtod_l+0xba0>
 800f70c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f710:	ec57 6b17 	vmov	r6, r7, d7
 800f714:	e796      	b.n	800f644 <_strtod_l+0x9ac>
 800f716:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	46ca      	mov	sl, r9
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1c2      	bne.n	800f6a8 <_strtod_l+0xa10>
 800f722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f728:	0d1b      	lsrs	r3, r3, #20
 800f72a:	051b      	lsls	r3, r3, #20
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d1bb      	bne.n	800f6a8 <_strtod_l+0xa10>
 800f730:	4630      	mov	r0, r6
 800f732:	4639      	mov	r1, r7
 800f734:	f7f1 fac0 	bl	8000cb8 <__aeabi_d2lz>
 800f738:	f7f0 ff30 	bl	800059c <__aeabi_l2d>
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	4630      	mov	r0, r6
 800f742:	4639      	mov	r1, r7
 800f744:	f7f0 fda0 	bl	8000288 <__aeabi_dsub>
 800f748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f74a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f74e:	ea43 0308 	orr.w	r3, r3, r8
 800f752:	4313      	orrs	r3, r2
 800f754:	4606      	mov	r6, r0
 800f756:	460f      	mov	r7, r1
 800f758:	d054      	beq.n	800f804 <_strtod_l+0xb6c>
 800f75a:	a339      	add	r3, pc, #228	; (adr r3, 800f840 <_strtod_l+0xba8>)
 800f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f760:	f7f1 f9bc 	bl	8000adc <__aeabi_dcmplt>
 800f764:	2800      	cmp	r0, #0
 800f766:	f47f ace5 	bne.w	800f134 <_strtod_l+0x49c>
 800f76a:	a337      	add	r3, pc, #220	; (adr r3, 800f848 <_strtod_l+0xbb0>)
 800f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f770:	4630      	mov	r0, r6
 800f772:	4639      	mov	r1, r7
 800f774:	f7f1 f9d0 	bl	8000b18 <__aeabi_dcmpgt>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d095      	beq.n	800f6a8 <_strtod_l+0xa10>
 800f77c:	e4da      	b.n	800f134 <_strtod_l+0x49c>
 800f77e:	9b04      	ldr	r3, [sp, #16]
 800f780:	b333      	cbz	r3, 800f7d0 <_strtod_l+0xb38>
 800f782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f784:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f788:	d822      	bhi.n	800f7d0 <_strtod_l+0xb38>
 800f78a:	a331      	add	r3, pc, #196	; (adr r3, 800f850 <_strtod_l+0xbb8>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	4630      	mov	r0, r6
 800f792:	4639      	mov	r1, r7
 800f794:	f7f1 f9ac 	bl	8000af0 <__aeabi_dcmple>
 800f798:	b1a0      	cbz	r0, 800f7c4 <_strtod_l+0xb2c>
 800f79a:	4639      	mov	r1, r7
 800f79c:	4630      	mov	r0, r6
 800f79e:	f7f1 fa03 	bl	8000ba8 <__aeabi_d2uiz>
 800f7a2:	2801      	cmp	r0, #1
 800f7a4:	bf38      	it	cc
 800f7a6:	2001      	movcc	r0, #1
 800f7a8:	f7f0 feac 	bl	8000504 <__aeabi_ui2d>
 800f7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460f      	mov	r7, r1
 800f7b2:	bb23      	cbnz	r3, 800f7fe <_strtod_l+0xb66>
 800f7b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7b8:	9010      	str	r0, [sp, #64]	; 0x40
 800f7ba:	9311      	str	r3, [sp, #68]	; 0x44
 800f7bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f7c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f7c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f7cc:	1a9b      	subs	r3, r3, r2
 800f7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800f7d8:	eef0 0a68 	vmov.f32	s1, s17
 800f7dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f7e0:	f7ff f8fc 	bl	800e9dc <__ulp>
 800f7e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f7e8:	ec53 2b10 	vmov	r2, r3, d0
 800f7ec:	f7f0 ff04 	bl	80005f8 <__aeabi_dmul>
 800f7f0:	ec53 2b18 	vmov	r2, r3, d8
 800f7f4:	f7f0 fd4a 	bl	800028c <__adddf3>
 800f7f8:	4680      	mov	r8, r0
 800f7fa:	4689      	mov	r9, r1
 800f7fc:	e78d      	b.n	800f71a <_strtod_l+0xa82>
 800f7fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f802:	e7db      	b.n	800f7bc <_strtod_l+0xb24>
 800f804:	a314      	add	r3, pc, #80	; (adr r3, 800f858 <_strtod_l+0xbc0>)
 800f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80a:	f7f1 f967 	bl	8000adc <__aeabi_dcmplt>
 800f80e:	e7b3      	b.n	800f778 <_strtod_l+0xae0>
 800f810:	2300      	movs	r3, #0
 800f812:	930a      	str	r3, [sp, #40]	; 0x28
 800f814:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	f7ff ba7c 	b.w	800ed16 <_strtod_l+0x7e>
 800f81e:	2a65      	cmp	r2, #101	; 0x65
 800f820:	f43f ab75 	beq.w	800ef0e <_strtod_l+0x276>
 800f824:	2a45      	cmp	r2, #69	; 0x45
 800f826:	f43f ab72 	beq.w	800ef0e <_strtod_l+0x276>
 800f82a:	2301      	movs	r3, #1
 800f82c:	f7ff bbaa 	b.w	800ef84 <_strtod_l+0x2ec>
 800f830:	00000000 	.word	0x00000000
 800f834:	bff00000 	.word	0xbff00000
 800f838:	00000000 	.word	0x00000000
 800f83c:	3ff00000 	.word	0x3ff00000
 800f840:	94a03595 	.word	0x94a03595
 800f844:	3fdfffff 	.word	0x3fdfffff
 800f848:	35afe535 	.word	0x35afe535
 800f84c:	3fe00000 	.word	0x3fe00000
 800f850:	ffc00000 	.word	0xffc00000
 800f854:	41dfffff 	.word	0x41dfffff
 800f858:	94a03595 	.word	0x94a03595
 800f85c:	3fcfffff 	.word	0x3fcfffff
 800f860:	3ff00000 	.word	0x3ff00000
 800f864:	3fe00000 	.word	0x3fe00000
 800f868:	7ff00000 	.word	0x7ff00000
 800f86c:	7fe00000 	.word	0x7fe00000
 800f870:	7c9fffff 	.word	0x7c9fffff
 800f874:	7fefffff 	.word	0x7fefffff

0800f878 <_strtod_r>:
 800f878:	4b01      	ldr	r3, [pc, #4]	; (800f880 <_strtod_r+0x8>)
 800f87a:	f7ff ba0d 	b.w	800ec98 <_strtod_l>
 800f87e:	bf00      	nop
 800f880:	20000070 	.word	0x20000070

0800f884 <__ssputs_r>:
 800f884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f888:	688e      	ldr	r6, [r1, #8]
 800f88a:	461f      	mov	r7, r3
 800f88c:	42be      	cmp	r6, r7
 800f88e:	680b      	ldr	r3, [r1, #0]
 800f890:	4682      	mov	sl, r0
 800f892:	460c      	mov	r4, r1
 800f894:	4690      	mov	r8, r2
 800f896:	d82c      	bhi.n	800f8f2 <__ssputs_r+0x6e>
 800f898:	898a      	ldrh	r2, [r1, #12]
 800f89a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f89e:	d026      	beq.n	800f8ee <__ssputs_r+0x6a>
 800f8a0:	6965      	ldr	r5, [r4, #20]
 800f8a2:	6909      	ldr	r1, [r1, #16]
 800f8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8a8:	eba3 0901 	sub.w	r9, r3, r1
 800f8ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8b0:	1c7b      	adds	r3, r7, #1
 800f8b2:	444b      	add	r3, r9
 800f8b4:	106d      	asrs	r5, r5, #1
 800f8b6:	429d      	cmp	r5, r3
 800f8b8:	bf38      	it	cc
 800f8ba:	461d      	movcc	r5, r3
 800f8bc:	0553      	lsls	r3, r2, #21
 800f8be:	d527      	bpl.n	800f910 <__ssputs_r+0x8c>
 800f8c0:	4629      	mov	r1, r5
 800f8c2:	f7fc fc87 	bl	800c1d4 <_malloc_r>
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	b360      	cbz	r0, 800f924 <__ssputs_r+0xa0>
 800f8ca:	6921      	ldr	r1, [r4, #16]
 800f8cc:	464a      	mov	r2, r9
 800f8ce:	f7fd fe3c 	bl	800d54a <memcpy>
 800f8d2:	89a3      	ldrh	r3, [r4, #12]
 800f8d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8dc:	81a3      	strh	r3, [r4, #12]
 800f8de:	6126      	str	r6, [r4, #16]
 800f8e0:	6165      	str	r5, [r4, #20]
 800f8e2:	444e      	add	r6, r9
 800f8e4:	eba5 0509 	sub.w	r5, r5, r9
 800f8e8:	6026      	str	r6, [r4, #0]
 800f8ea:	60a5      	str	r5, [r4, #8]
 800f8ec:	463e      	mov	r6, r7
 800f8ee:	42be      	cmp	r6, r7
 800f8f0:	d900      	bls.n	800f8f4 <__ssputs_r+0x70>
 800f8f2:	463e      	mov	r6, r7
 800f8f4:	6820      	ldr	r0, [r4, #0]
 800f8f6:	4632      	mov	r2, r6
 800f8f8:	4641      	mov	r1, r8
 800f8fa:	f000 f9c9 	bl	800fc90 <memmove>
 800f8fe:	68a3      	ldr	r3, [r4, #8]
 800f900:	1b9b      	subs	r3, r3, r6
 800f902:	60a3      	str	r3, [r4, #8]
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	4433      	add	r3, r6
 800f908:	6023      	str	r3, [r4, #0]
 800f90a:	2000      	movs	r0, #0
 800f90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f910:	462a      	mov	r2, r5
 800f912:	f000 fd8e 	bl	8010432 <_realloc_r>
 800f916:	4606      	mov	r6, r0
 800f918:	2800      	cmp	r0, #0
 800f91a:	d1e0      	bne.n	800f8de <__ssputs_r+0x5a>
 800f91c:	6921      	ldr	r1, [r4, #16]
 800f91e:	4650      	mov	r0, sl
 800f920:	f7fe fca4 	bl	800e26c <_free_r>
 800f924:	230c      	movs	r3, #12
 800f926:	f8ca 3000 	str.w	r3, [sl]
 800f92a:	89a3      	ldrh	r3, [r4, #12]
 800f92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f930:	81a3      	strh	r3, [r4, #12]
 800f932:	f04f 30ff 	mov.w	r0, #4294967295
 800f936:	e7e9      	b.n	800f90c <__ssputs_r+0x88>

0800f938 <_svfiprintf_r>:
 800f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	4698      	mov	r8, r3
 800f93e:	898b      	ldrh	r3, [r1, #12]
 800f940:	061b      	lsls	r3, r3, #24
 800f942:	b09d      	sub	sp, #116	; 0x74
 800f944:	4607      	mov	r7, r0
 800f946:	460d      	mov	r5, r1
 800f948:	4614      	mov	r4, r2
 800f94a:	d50e      	bpl.n	800f96a <_svfiprintf_r+0x32>
 800f94c:	690b      	ldr	r3, [r1, #16]
 800f94e:	b963      	cbnz	r3, 800f96a <_svfiprintf_r+0x32>
 800f950:	2140      	movs	r1, #64	; 0x40
 800f952:	f7fc fc3f 	bl	800c1d4 <_malloc_r>
 800f956:	6028      	str	r0, [r5, #0]
 800f958:	6128      	str	r0, [r5, #16]
 800f95a:	b920      	cbnz	r0, 800f966 <_svfiprintf_r+0x2e>
 800f95c:	230c      	movs	r3, #12
 800f95e:	603b      	str	r3, [r7, #0]
 800f960:	f04f 30ff 	mov.w	r0, #4294967295
 800f964:	e0d0      	b.n	800fb08 <_svfiprintf_r+0x1d0>
 800f966:	2340      	movs	r3, #64	; 0x40
 800f968:	616b      	str	r3, [r5, #20]
 800f96a:	2300      	movs	r3, #0
 800f96c:	9309      	str	r3, [sp, #36]	; 0x24
 800f96e:	2320      	movs	r3, #32
 800f970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f974:	f8cd 800c 	str.w	r8, [sp, #12]
 800f978:	2330      	movs	r3, #48	; 0x30
 800f97a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb20 <_svfiprintf_r+0x1e8>
 800f97e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f982:	f04f 0901 	mov.w	r9, #1
 800f986:	4623      	mov	r3, r4
 800f988:	469a      	mov	sl, r3
 800f98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f98e:	b10a      	cbz	r2, 800f994 <_svfiprintf_r+0x5c>
 800f990:	2a25      	cmp	r2, #37	; 0x25
 800f992:	d1f9      	bne.n	800f988 <_svfiprintf_r+0x50>
 800f994:	ebba 0b04 	subs.w	fp, sl, r4
 800f998:	d00b      	beq.n	800f9b2 <_svfiprintf_r+0x7a>
 800f99a:	465b      	mov	r3, fp
 800f99c:	4622      	mov	r2, r4
 800f99e:	4629      	mov	r1, r5
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff ff6f 	bl	800f884 <__ssputs_r>
 800f9a6:	3001      	adds	r0, #1
 800f9a8:	f000 80a9 	beq.w	800fafe <_svfiprintf_r+0x1c6>
 800f9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ae:	445a      	add	r2, fp
 800f9b0:	9209      	str	r2, [sp, #36]	; 0x24
 800f9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f000 80a1 	beq.w	800fafe <_svfiprintf_r+0x1c6>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9c6:	f10a 0a01 	add.w	sl, sl, #1
 800f9ca:	9304      	str	r3, [sp, #16]
 800f9cc:	9307      	str	r3, [sp, #28]
 800f9ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9d2:	931a      	str	r3, [sp, #104]	; 0x68
 800f9d4:	4654      	mov	r4, sl
 800f9d6:	2205      	movs	r2, #5
 800f9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9dc:	4850      	ldr	r0, [pc, #320]	; (800fb20 <_svfiprintf_r+0x1e8>)
 800f9de:	f7f0 fbf7 	bl	80001d0 <memchr>
 800f9e2:	9a04      	ldr	r2, [sp, #16]
 800f9e4:	b9d8      	cbnz	r0, 800fa1e <_svfiprintf_r+0xe6>
 800f9e6:	06d0      	lsls	r0, r2, #27
 800f9e8:	bf44      	itt	mi
 800f9ea:	2320      	movmi	r3, #32
 800f9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9f0:	0711      	lsls	r1, r2, #28
 800f9f2:	bf44      	itt	mi
 800f9f4:	232b      	movmi	r3, #43	; 0x2b
 800f9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800fa00:	d015      	beq.n	800fa2e <_svfiprintf_r+0xf6>
 800fa02:	9a07      	ldr	r2, [sp, #28]
 800fa04:	4654      	mov	r4, sl
 800fa06:	2000      	movs	r0, #0
 800fa08:	f04f 0c0a 	mov.w	ip, #10
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa12:	3b30      	subs	r3, #48	; 0x30
 800fa14:	2b09      	cmp	r3, #9
 800fa16:	d94d      	bls.n	800fab4 <_svfiprintf_r+0x17c>
 800fa18:	b1b0      	cbz	r0, 800fa48 <_svfiprintf_r+0x110>
 800fa1a:	9207      	str	r2, [sp, #28]
 800fa1c:	e014      	b.n	800fa48 <_svfiprintf_r+0x110>
 800fa1e:	eba0 0308 	sub.w	r3, r0, r8
 800fa22:	fa09 f303 	lsl.w	r3, r9, r3
 800fa26:	4313      	orrs	r3, r2
 800fa28:	9304      	str	r3, [sp, #16]
 800fa2a:	46a2      	mov	sl, r4
 800fa2c:	e7d2      	b.n	800f9d4 <_svfiprintf_r+0x9c>
 800fa2e:	9b03      	ldr	r3, [sp, #12]
 800fa30:	1d19      	adds	r1, r3, #4
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	9103      	str	r1, [sp, #12]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	bfbb      	ittet	lt
 800fa3a:	425b      	neglt	r3, r3
 800fa3c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa40:	9307      	strge	r3, [sp, #28]
 800fa42:	9307      	strlt	r3, [sp, #28]
 800fa44:	bfb8      	it	lt
 800fa46:	9204      	strlt	r2, [sp, #16]
 800fa48:	7823      	ldrb	r3, [r4, #0]
 800fa4a:	2b2e      	cmp	r3, #46	; 0x2e
 800fa4c:	d10c      	bne.n	800fa68 <_svfiprintf_r+0x130>
 800fa4e:	7863      	ldrb	r3, [r4, #1]
 800fa50:	2b2a      	cmp	r3, #42	; 0x2a
 800fa52:	d134      	bne.n	800fabe <_svfiprintf_r+0x186>
 800fa54:	9b03      	ldr	r3, [sp, #12]
 800fa56:	1d1a      	adds	r2, r3, #4
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	9203      	str	r2, [sp, #12]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	bfb8      	it	lt
 800fa60:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa64:	3402      	adds	r4, #2
 800fa66:	9305      	str	r3, [sp, #20]
 800fa68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fb30 <_svfiprintf_r+0x1f8>
 800fa6c:	7821      	ldrb	r1, [r4, #0]
 800fa6e:	2203      	movs	r2, #3
 800fa70:	4650      	mov	r0, sl
 800fa72:	f7f0 fbad 	bl	80001d0 <memchr>
 800fa76:	b138      	cbz	r0, 800fa88 <_svfiprintf_r+0x150>
 800fa78:	9b04      	ldr	r3, [sp, #16]
 800fa7a:	eba0 000a 	sub.w	r0, r0, sl
 800fa7e:	2240      	movs	r2, #64	; 0x40
 800fa80:	4082      	lsls	r2, r0
 800fa82:	4313      	orrs	r3, r2
 800fa84:	3401      	adds	r4, #1
 800fa86:	9304      	str	r3, [sp, #16]
 800fa88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa8c:	4825      	ldr	r0, [pc, #148]	; (800fb24 <_svfiprintf_r+0x1ec>)
 800fa8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa92:	2206      	movs	r2, #6
 800fa94:	f7f0 fb9c 	bl	80001d0 <memchr>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d038      	beq.n	800fb0e <_svfiprintf_r+0x1d6>
 800fa9c:	4b22      	ldr	r3, [pc, #136]	; (800fb28 <_svfiprintf_r+0x1f0>)
 800fa9e:	bb1b      	cbnz	r3, 800fae8 <_svfiprintf_r+0x1b0>
 800faa0:	9b03      	ldr	r3, [sp, #12]
 800faa2:	3307      	adds	r3, #7
 800faa4:	f023 0307 	bic.w	r3, r3, #7
 800faa8:	3308      	adds	r3, #8
 800faaa:	9303      	str	r3, [sp, #12]
 800faac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faae:	4433      	add	r3, r6
 800fab0:	9309      	str	r3, [sp, #36]	; 0x24
 800fab2:	e768      	b.n	800f986 <_svfiprintf_r+0x4e>
 800fab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fab8:	460c      	mov	r4, r1
 800faba:	2001      	movs	r0, #1
 800fabc:	e7a6      	b.n	800fa0c <_svfiprintf_r+0xd4>
 800fabe:	2300      	movs	r3, #0
 800fac0:	3401      	adds	r4, #1
 800fac2:	9305      	str	r3, [sp, #20]
 800fac4:	4619      	mov	r1, r3
 800fac6:	f04f 0c0a 	mov.w	ip, #10
 800faca:	4620      	mov	r0, r4
 800facc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fad0:	3a30      	subs	r2, #48	; 0x30
 800fad2:	2a09      	cmp	r2, #9
 800fad4:	d903      	bls.n	800fade <_svfiprintf_r+0x1a6>
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d0c6      	beq.n	800fa68 <_svfiprintf_r+0x130>
 800fada:	9105      	str	r1, [sp, #20]
 800fadc:	e7c4      	b.n	800fa68 <_svfiprintf_r+0x130>
 800fade:	fb0c 2101 	mla	r1, ip, r1, r2
 800fae2:	4604      	mov	r4, r0
 800fae4:	2301      	movs	r3, #1
 800fae6:	e7f0      	b.n	800faca <_svfiprintf_r+0x192>
 800fae8:	ab03      	add	r3, sp, #12
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	462a      	mov	r2, r5
 800faee:	4b0f      	ldr	r3, [pc, #60]	; (800fb2c <_svfiprintf_r+0x1f4>)
 800faf0:	a904      	add	r1, sp, #16
 800faf2:	4638      	mov	r0, r7
 800faf4:	f7fc fd28 	bl	800c548 <_printf_float>
 800faf8:	1c42      	adds	r2, r0, #1
 800fafa:	4606      	mov	r6, r0
 800fafc:	d1d6      	bne.n	800faac <_svfiprintf_r+0x174>
 800fafe:	89ab      	ldrh	r3, [r5, #12]
 800fb00:	065b      	lsls	r3, r3, #25
 800fb02:	f53f af2d 	bmi.w	800f960 <_svfiprintf_r+0x28>
 800fb06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb08:	b01d      	add	sp, #116	; 0x74
 800fb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0e:	ab03      	add	r3, sp, #12
 800fb10:	9300      	str	r3, [sp, #0]
 800fb12:	462a      	mov	r2, r5
 800fb14:	4b05      	ldr	r3, [pc, #20]	; (800fb2c <_svfiprintf_r+0x1f4>)
 800fb16:	a904      	add	r1, sp, #16
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f7fc ffb9 	bl	800ca90 <_printf_i>
 800fb1e:	e7eb      	b.n	800faf8 <_svfiprintf_r+0x1c0>
 800fb20:	080111a0 	.word	0x080111a0
 800fb24:	080111aa 	.word	0x080111aa
 800fb28:	0800c549 	.word	0x0800c549
 800fb2c:	0800f885 	.word	0x0800f885
 800fb30:	080111a6 	.word	0x080111a6

0800fb34 <__sflush_r>:
 800fb34:	898a      	ldrh	r2, [r1, #12]
 800fb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	0710      	lsls	r0, r2, #28
 800fb3e:	460c      	mov	r4, r1
 800fb40:	d458      	bmi.n	800fbf4 <__sflush_r+0xc0>
 800fb42:	684b      	ldr	r3, [r1, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dc05      	bgt.n	800fb54 <__sflush_r+0x20>
 800fb48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	dc02      	bgt.n	800fb54 <__sflush_r+0x20>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb56:	2e00      	cmp	r6, #0
 800fb58:	d0f9      	beq.n	800fb4e <__sflush_r+0x1a>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb60:	682f      	ldr	r7, [r5, #0]
 800fb62:	6a21      	ldr	r1, [r4, #32]
 800fb64:	602b      	str	r3, [r5, #0]
 800fb66:	d032      	beq.n	800fbce <__sflush_r+0x9a>
 800fb68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb6a:	89a3      	ldrh	r3, [r4, #12]
 800fb6c:	075a      	lsls	r2, r3, #29
 800fb6e:	d505      	bpl.n	800fb7c <__sflush_r+0x48>
 800fb70:	6863      	ldr	r3, [r4, #4]
 800fb72:	1ac0      	subs	r0, r0, r3
 800fb74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb76:	b10b      	cbz	r3, 800fb7c <__sflush_r+0x48>
 800fb78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb7a:	1ac0      	subs	r0, r0, r3
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	4602      	mov	r2, r0
 800fb80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb82:	6a21      	ldr	r1, [r4, #32]
 800fb84:	4628      	mov	r0, r5
 800fb86:	47b0      	blx	r6
 800fb88:	1c43      	adds	r3, r0, #1
 800fb8a:	89a3      	ldrh	r3, [r4, #12]
 800fb8c:	d106      	bne.n	800fb9c <__sflush_r+0x68>
 800fb8e:	6829      	ldr	r1, [r5, #0]
 800fb90:	291d      	cmp	r1, #29
 800fb92:	d82b      	bhi.n	800fbec <__sflush_r+0xb8>
 800fb94:	4a29      	ldr	r2, [pc, #164]	; (800fc3c <__sflush_r+0x108>)
 800fb96:	410a      	asrs	r2, r1
 800fb98:	07d6      	lsls	r6, r2, #31
 800fb9a:	d427      	bmi.n	800fbec <__sflush_r+0xb8>
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	6062      	str	r2, [r4, #4]
 800fba0:	04d9      	lsls	r1, r3, #19
 800fba2:	6922      	ldr	r2, [r4, #16]
 800fba4:	6022      	str	r2, [r4, #0]
 800fba6:	d504      	bpl.n	800fbb2 <__sflush_r+0x7e>
 800fba8:	1c42      	adds	r2, r0, #1
 800fbaa:	d101      	bne.n	800fbb0 <__sflush_r+0x7c>
 800fbac:	682b      	ldr	r3, [r5, #0]
 800fbae:	b903      	cbnz	r3, 800fbb2 <__sflush_r+0x7e>
 800fbb0:	6560      	str	r0, [r4, #84]	; 0x54
 800fbb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbb4:	602f      	str	r7, [r5, #0]
 800fbb6:	2900      	cmp	r1, #0
 800fbb8:	d0c9      	beq.n	800fb4e <__sflush_r+0x1a>
 800fbba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbbe:	4299      	cmp	r1, r3
 800fbc0:	d002      	beq.n	800fbc8 <__sflush_r+0x94>
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7fe fb52 	bl	800e26c <_free_r>
 800fbc8:	2000      	movs	r0, #0
 800fbca:	6360      	str	r0, [r4, #52]	; 0x34
 800fbcc:	e7c0      	b.n	800fb50 <__sflush_r+0x1c>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	47b0      	blx	r6
 800fbd4:	1c41      	adds	r1, r0, #1
 800fbd6:	d1c8      	bne.n	800fb6a <__sflush_r+0x36>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0c5      	beq.n	800fb6a <__sflush_r+0x36>
 800fbde:	2b1d      	cmp	r3, #29
 800fbe0:	d001      	beq.n	800fbe6 <__sflush_r+0xb2>
 800fbe2:	2b16      	cmp	r3, #22
 800fbe4:	d101      	bne.n	800fbea <__sflush_r+0xb6>
 800fbe6:	602f      	str	r7, [r5, #0]
 800fbe8:	e7b1      	b.n	800fb4e <__sflush_r+0x1a>
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf0:	81a3      	strh	r3, [r4, #12]
 800fbf2:	e7ad      	b.n	800fb50 <__sflush_r+0x1c>
 800fbf4:	690f      	ldr	r7, [r1, #16]
 800fbf6:	2f00      	cmp	r7, #0
 800fbf8:	d0a9      	beq.n	800fb4e <__sflush_r+0x1a>
 800fbfa:	0793      	lsls	r3, r2, #30
 800fbfc:	680e      	ldr	r6, [r1, #0]
 800fbfe:	bf08      	it	eq
 800fc00:	694b      	ldreq	r3, [r1, #20]
 800fc02:	600f      	str	r7, [r1, #0]
 800fc04:	bf18      	it	ne
 800fc06:	2300      	movne	r3, #0
 800fc08:	eba6 0807 	sub.w	r8, r6, r7
 800fc0c:	608b      	str	r3, [r1, #8]
 800fc0e:	f1b8 0f00 	cmp.w	r8, #0
 800fc12:	dd9c      	ble.n	800fb4e <__sflush_r+0x1a>
 800fc14:	6a21      	ldr	r1, [r4, #32]
 800fc16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc18:	4643      	mov	r3, r8
 800fc1a:	463a      	mov	r2, r7
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b0      	blx	r6
 800fc20:	2800      	cmp	r0, #0
 800fc22:	dc06      	bgt.n	800fc32 <__sflush_r+0xfe>
 800fc24:	89a3      	ldrh	r3, [r4, #12]
 800fc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc2a:	81a3      	strh	r3, [r4, #12]
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc30:	e78e      	b.n	800fb50 <__sflush_r+0x1c>
 800fc32:	4407      	add	r7, r0
 800fc34:	eba8 0800 	sub.w	r8, r8, r0
 800fc38:	e7e9      	b.n	800fc0e <__sflush_r+0xda>
 800fc3a:	bf00      	nop
 800fc3c:	dfbffffe 	.word	0xdfbffffe

0800fc40 <_fflush_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	690b      	ldr	r3, [r1, #16]
 800fc44:	4605      	mov	r5, r0
 800fc46:	460c      	mov	r4, r1
 800fc48:	b913      	cbnz	r3, 800fc50 <_fflush_r+0x10>
 800fc4a:	2500      	movs	r5, #0
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	b118      	cbz	r0, 800fc5a <_fflush_r+0x1a>
 800fc52:	6a03      	ldr	r3, [r0, #32]
 800fc54:	b90b      	cbnz	r3, 800fc5a <_fflush_r+0x1a>
 800fc56:	f7fd fad9 	bl	800d20c <__sinit>
 800fc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d0f3      	beq.n	800fc4a <_fflush_r+0xa>
 800fc62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc64:	07d0      	lsls	r0, r2, #31
 800fc66:	d404      	bmi.n	800fc72 <_fflush_r+0x32>
 800fc68:	0599      	lsls	r1, r3, #22
 800fc6a:	d402      	bmi.n	800fc72 <_fflush_r+0x32>
 800fc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc6e:	f7fd fc6a 	bl	800d546 <__retarget_lock_acquire_recursive>
 800fc72:	4628      	mov	r0, r5
 800fc74:	4621      	mov	r1, r4
 800fc76:	f7ff ff5d 	bl	800fb34 <__sflush_r>
 800fc7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc7c:	07da      	lsls	r2, r3, #31
 800fc7e:	4605      	mov	r5, r0
 800fc80:	d4e4      	bmi.n	800fc4c <_fflush_r+0xc>
 800fc82:	89a3      	ldrh	r3, [r4, #12]
 800fc84:	059b      	lsls	r3, r3, #22
 800fc86:	d4e1      	bmi.n	800fc4c <_fflush_r+0xc>
 800fc88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc8a:	f7fd fc5d 	bl	800d548 <__retarget_lock_release_recursive>
 800fc8e:	e7dd      	b.n	800fc4c <_fflush_r+0xc>

0800fc90 <memmove>:
 800fc90:	4288      	cmp	r0, r1
 800fc92:	b510      	push	{r4, lr}
 800fc94:	eb01 0402 	add.w	r4, r1, r2
 800fc98:	d902      	bls.n	800fca0 <memmove+0x10>
 800fc9a:	4284      	cmp	r4, r0
 800fc9c:	4623      	mov	r3, r4
 800fc9e:	d807      	bhi.n	800fcb0 <memmove+0x20>
 800fca0:	1e43      	subs	r3, r0, #1
 800fca2:	42a1      	cmp	r1, r4
 800fca4:	d008      	beq.n	800fcb8 <memmove+0x28>
 800fca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcae:	e7f8      	b.n	800fca2 <memmove+0x12>
 800fcb0:	4402      	add	r2, r0
 800fcb2:	4601      	mov	r1, r0
 800fcb4:	428a      	cmp	r2, r1
 800fcb6:	d100      	bne.n	800fcba <memmove+0x2a>
 800fcb8:	bd10      	pop	{r4, pc}
 800fcba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcc2:	e7f7      	b.n	800fcb4 <memmove+0x24>

0800fcc4 <strncmp>:
 800fcc4:	b510      	push	{r4, lr}
 800fcc6:	b16a      	cbz	r2, 800fce4 <strncmp+0x20>
 800fcc8:	3901      	subs	r1, #1
 800fcca:	1884      	adds	r4, r0, r2
 800fccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d103      	bne.n	800fce0 <strncmp+0x1c>
 800fcd8:	42a0      	cmp	r0, r4
 800fcda:	d001      	beq.n	800fce0 <strncmp+0x1c>
 800fcdc:	2a00      	cmp	r2, #0
 800fcde:	d1f5      	bne.n	800fccc <strncmp+0x8>
 800fce0:	1ad0      	subs	r0, r2, r3
 800fce2:	bd10      	pop	{r4, pc}
 800fce4:	4610      	mov	r0, r2
 800fce6:	e7fc      	b.n	800fce2 <strncmp+0x1e>

0800fce8 <nan>:
 800fce8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fcf0 <nan+0x8>
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	00000000 	.word	0x00000000
 800fcf4:	7ff80000 	.word	0x7ff80000

0800fcf8 <__assert_func>:
 800fcf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcfa:	4614      	mov	r4, r2
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <__assert_func+0x2c>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4605      	mov	r5, r0
 800fd04:	68d8      	ldr	r0, [r3, #12]
 800fd06:	b14c      	cbz	r4, 800fd1c <__assert_func+0x24>
 800fd08:	4b07      	ldr	r3, [pc, #28]	; (800fd28 <__assert_func+0x30>)
 800fd0a:	9100      	str	r1, [sp, #0]
 800fd0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd10:	4906      	ldr	r1, [pc, #24]	; (800fd2c <__assert_func+0x34>)
 800fd12:	462b      	mov	r3, r5
 800fd14:	f000 fbca 	bl	80104ac <fiprintf>
 800fd18:	f000 fbda 	bl	80104d0 <abort>
 800fd1c:	4b04      	ldr	r3, [pc, #16]	; (800fd30 <__assert_func+0x38>)
 800fd1e:	461c      	mov	r4, r3
 800fd20:	e7f3      	b.n	800fd0a <__assert_func+0x12>
 800fd22:	bf00      	nop
 800fd24:	2000006c 	.word	0x2000006c
 800fd28:	080111b9 	.word	0x080111b9
 800fd2c:	080111c6 	.word	0x080111c6
 800fd30:	080111f4 	.word	0x080111f4

0800fd34 <_calloc_r>:
 800fd34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd36:	fba1 2402 	umull	r2, r4, r1, r2
 800fd3a:	b94c      	cbnz	r4, 800fd50 <_calloc_r+0x1c>
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	9201      	str	r2, [sp, #4]
 800fd40:	f7fc fa48 	bl	800c1d4 <_malloc_r>
 800fd44:	9a01      	ldr	r2, [sp, #4]
 800fd46:	4605      	mov	r5, r0
 800fd48:	b930      	cbnz	r0, 800fd58 <_calloc_r+0x24>
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	b003      	add	sp, #12
 800fd4e:	bd30      	pop	{r4, r5, pc}
 800fd50:	220c      	movs	r2, #12
 800fd52:	6002      	str	r2, [r0, #0]
 800fd54:	2500      	movs	r5, #0
 800fd56:	e7f8      	b.n	800fd4a <_calloc_r+0x16>
 800fd58:	4621      	mov	r1, r4
 800fd5a:	f7fd faf0 	bl	800d33e <memset>
 800fd5e:	e7f4      	b.n	800fd4a <_calloc_r+0x16>

0800fd60 <rshift>:
 800fd60:	6903      	ldr	r3, [r0, #16]
 800fd62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fd66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fd6e:	f100 0414 	add.w	r4, r0, #20
 800fd72:	dd45      	ble.n	800fe00 <rshift+0xa0>
 800fd74:	f011 011f 	ands.w	r1, r1, #31
 800fd78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd80:	d10c      	bne.n	800fd9c <rshift+0x3c>
 800fd82:	f100 0710 	add.w	r7, r0, #16
 800fd86:	4629      	mov	r1, r5
 800fd88:	42b1      	cmp	r1, r6
 800fd8a:	d334      	bcc.n	800fdf6 <rshift+0x96>
 800fd8c:	1a9b      	subs	r3, r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	1eea      	subs	r2, r5, #3
 800fd92:	4296      	cmp	r6, r2
 800fd94:	bf38      	it	cc
 800fd96:	2300      	movcc	r3, #0
 800fd98:	4423      	add	r3, r4
 800fd9a:	e015      	b.n	800fdc8 <rshift+0x68>
 800fd9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fda0:	f1c1 0820 	rsb	r8, r1, #32
 800fda4:	40cf      	lsrs	r7, r1
 800fda6:	f105 0e04 	add.w	lr, r5, #4
 800fdaa:	46a1      	mov	r9, r4
 800fdac:	4576      	cmp	r6, lr
 800fdae:	46f4      	mov	ip, lr
 800fdb0:	d815      	bhi.n	800fdde <rshift+0x7e>
 800fdb2:	1a9a      	subs	r2, r3, r2
 800fdb4:	0092      	lsls	r2, r2, #2
 800fdb6:	3a04      	subs	r2, #4
 800fdb8:	3501      	adds	r5, #1
 800fdba:	42ae      	cmp	r6, r5
 800fdbc:	bf38      	it	cc
 800fdbe:	2200      	movcc	r2, #0
 800fdc0:	18a3      	adds	r3, r4, r2
 800fdc2:	50a7      	str	r7, [r4, r2]
 800fdc4:	b107      	cbz	r7, 800fdc8 <rshift+0x68>
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	1b1a      	subs	r2, r3, r4
 800fdca:	42a3      	cmp	r3, r4
 800fdcc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fdd0:	bf08      	it	eq
 800fdd2:	2300      	moveq	r3, #0
 800fdd4:	6102      	str	r2, [r0, #16]
 800fdd6:	bf08      	it	eq
 800fdd8:	6143      	streq	r3, [r0, #20]
 800fdda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdde:	f8dc c000 	ldr.w	ip, [ip]
 800fde2:	fa0c fc08 	lsl.w	ip, ip, r8
 800fde6:	ea4c 0707 	orr.w	r7, ip, r7
 800fdea:	f849 7b04 	str.w	r7, [r9], #4
 800fdee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fdf2:	40cf      	lsrs	r7, r1
 800fdf4:	e7da      	b.n	800fdac <rshift+0x4c>
 800fdf6:	f851 cb04 	ldr.w	ip, [r1], #4
 800fdfa:	f847 cf04 	str.w	ip, [r7, #4]!
 800fdfe:	e7c3      	b.n	800fd88 <rshift+0x28>
 800fe00:	4623      	mov	r3, r4
 800fe02:	e7e1      	b.n	800fdc8 <rshift+0x68>

0800fe04 <__hexdig_fun>:
 800fe04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fe08:	2b09      	cmp	r3, #9
 800fe0a:	d802      	bhi.n	800fe12 <__hexdig_fun+0xe>
 800fe0c:	3820      	subs	r0, #32
 800fe0e:	b2c0      	uxtb	r0, r0
 800fe10:	4770      	bx	lr
 800fe12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fe16:	2b05      	cmp	r3, #5
 800fe18:	d801      	bhi.n	800fe1e <__hexdig_fun+0x1a>
 800fe1a:	3847      	subs	r0, #71	; 0x47
 800fe1c:	e7f7      	b.n	800fe0e <__hexdig_fun+0xa>
 800fe1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fe22:	2b05      	cmp	r3, #5
 800fe24:	d801      	bhi.n	800fe2a <__hexdig_fun+0x26>
 800fe26:	3827      	subs	r0, #39	; 0x27
 800fe28:	e7f1      	b.n	800fe0e <__hexdig_fun+0xa>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	4770      	bx	lr
	...

0800fe30 <__gethex>:
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	4617      	mov	r7, r2
 800fe36:	680a      	ldr	r2, [r1, #0]
 800fe38:	b085      	sub	sp, #20
 800fe3a:	f102 0b02 	add.w	fp, r2, #2
 800fe3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fe42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fe46:	4681      	mov	r9, r0
 800fe48:	468a      	mov	sl, r1
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	32fe      	adds	r2, #254	; 0xfe
 800fe4e:	eb02 030b 	add.w	r3, r2, fp
 800fe52:	46d8      	mov	r8, fp
 800fe54:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	2830      	cmp	r0, #48	; 0x30
 800fe5c:	d0f7      	beq.n	800fe4e <__gethex+0x1e>
 800fe5e:	f7ff ffd1 	bl	800fe04 <__hexdig_fun>
 800fe62:	4604      	mov	r4, r0
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d138      	bne.n	800feda <__gethex+0xaa>
 800fe68:	49a7      	ldr	r1, [pc, #668]	; (8010108 <__gethex+0x2d8>)
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	4640      	mov	r0, r8
 800fe6e:	f7ff ff29 	bl	800fcc4 <strncmp>
 800fe72:	4606      	mov	r6, r0
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d169      	bne.n	800ff4c <__gethex+0x11c>
 800fe78:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fe7c:	465d      	mov	r5, fp
 800fe7e:	f7ff ffc1 	bl	800fe04 <__hexdig_fun>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d064      	beq.n	800ff50 <__gethex+0x120>
 800fe86:	465a      	mov	r2, fp
 800fe88:	7810      	ldrb	r0, [r2, #0]
 800fe8a:	2830      	cmp	r0, #48	; 0x30
 800fe8c:	4690      	mov	r8, r2
 800fe8e:	f102 0201 	add.w	r2, r2, #1
 800fe92:	d0f9      	beq.n	800fe88 <__gethex+0x58>
 800fe94:	f7ff ffb6 	bl	800fe04 <__hexdig_fun>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	fab0 f480 	clz	r4, r0
 800fe9e:	0964      	lsrs	r4, r4, #5
 800fea0:	465e      	mov	r6, fp
 800fea2:	9301      	str	r3, [sp, #4]
 800fea4:	4642      	mov	r2, r8
 800fea6:	4615      	mov	r5, r2
 800fea8:	3201      	adds	r2, #1
 800feaa:	7828      	ldrb	r0, [r5, #0]
 800feac:	f7ff ffaa 	bl	800fe04 <__hexdig_fun>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d1f8      	bne.n	800fea6 <__gethex+0x76>
 800feb4:	4994      	ldr	r1, [pc, #592]	; (8010108 <__gethex+0x2d8>)
 800feb6:	2201      	movs	r2, #1
 800feb8:	4628      	mov	r0, r5
 800feba:	f7ff ff03 	bl	800fcc4 <strncmp>
 800febe:	b978      	cbnz	r0, 800fee0 <__gethex+0xb0>
 800fec0:	b946      	cbnz	r6, 800fed4 <__gethex+0xa4>
 800fec2:	1c6e      	adds	r6, r5, #1
 800fec4:	4632      	mov	r2, r6
 800fec6:	4615      	mov	r5, r2
 800fec8:	3201      	adds	r2, #1
 800feca:	7828      	ldrb	r0, [r5, #0]
 800fecc:	f7ff ff9a 	bl	800fe04 <__hexdig_fun>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d1f8      	bne.n	800fec6 <__gethex+0x96>
 800fed4:	1b73      	subs	r3, r6, r5
 800fed6:	009e      	lsls	r6, r3, #2
 800fed8:	e004      	b.n	800fee4 <__gethex+0xb4>
 800feda:	2400      	movs	r4, #0
 800fedc:	4626      	mov	r6, r4
 800fede:	e7e1      	b.n	800fea4 <__gethex+0x74>
 800fee0:	2e00      	cmp	r6, #0
 800fee2:	d1f7      	bne.n	800fed4 <__gethex+0xa4>
 800fee4:	782b      	ldrb	r3, [r5, #0]
 800fee6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800feea:	2b50      	cmp	r3, #80	; 0x50
 800feec:	d13d      	bne.n	800ff6a <__gethex+0x13a>
 800feee:	786b      	ldrb	r3, [r5, #1]
 800fef0:	2b2b      	cmp	r3, #43	; 0x2b
 800fef2:	d02f      	beq.n	800ff54 <__gethex+0x124>
 800fef4:	2b2d      	cmp	r3, #45	; 0x2d
 800fef6:	d031      	beq.n	800ff5c <__gethex+0x12c>
 800fef8:	1c69      	adds	r1, r5, #1
 800fefa:	f04f 0b00 	mov.w	fp, #0
 800fefe:	7808      	ldrb	r0, [r1, #0]
 800ff00:	f7ff ff80 	bl	800fe04 <__hexdig_fun>
 800ff04:	1e42      	subs	r2, r0, #1
 800ff06:	b2d2      	uxtb	r2, r2
 800ff08:	2a18      	cmp	r2, #24
 800ff0a:	d82e      	bhi.n	800ff6a <__gethex+0x13a>
 800ff0c:	f1a0 0210 	sub.w	r2, r0, #16
 800ff10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff14:	f7ff ff76 	bl	800fe04 <__hexdig_fun>
 800ff18:	f100 3cff 	add.w	ip, r0, #4294967295
 800ff1c:	fa5f fc8c 	uxtb.w	ip, ip
 800ff20:	f1bc 0f18 	cmp.w	ip, #24
 800ff24:	d91d      	bls.n	800ff62 <__gethex+0x132>
 800ff26:	f1bb 0f00 	cmp.w	fp, #0
 800ff2a:	d000      	beq.n	800ff2e <__gethex+0xfe>
 800ff2c:	4252      	negs	r2, r2
 800ff2e:	4416      	add	r6, r2
 800ff30:	f8ca 1000 	str.w	r1, [sl]
 800ff34:	b1dc      	cbz	r4, 800ff6e <__gethex+0x13e>
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	bf14      	ite	ne
 800ff3c:	f04f 0800 	movne.w	r8, #0
 800ff40:	f04f 0806 	moveq.w	r8, #6
 800ff44:	4640      	mov	r0, r8
 800ff46:	b005      	add	sp, #20
 800ff48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff4c:	4645      	mov	r5, r8
 800ff4e:	4626      	mov	r6, r4
 800ff50:	2401      	movs	r4, #1
 800ff52:	e7c7      	b.n	800fee4 <__gethex+0xb4>
 800ff54:	f04f 0b00 	mov.w	fp, #0
 800ff58:	1ca9      	adds	r1, r5, #2
 800ff5a:	e7d0      	b.n	800fefe <__gethex+0xce>
 800ff5c:	f04f 0b01 	mov.w	fp, #1
 800ff60:	e7fa      	b.n	800ff58 <__gethex+0x128>
 800ff62:	230a      	movs	r3, #10
 800ff64:	fb03 0002 	mla	r0, r3, r2, r0
 800ff68:	e7d0      	b.n	800ff0c <__gethex+0xdc>
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	e7e0      	b.n	800ff30 <__gethex+0x100>
 800ff6e:	eba5 0308 	sub.w	r3, r5, r8
 800ff72:	3b01      	subs	r3, #1
 800ff74:	4621      	mov	r1, r4
 800ff76:	2b07      	cmp	r3, #7
 800ff78:	dc0a      	bgt.n	800ff90 <__gethex+0x160>
 800ff7a:	4648      	mov	r0, r9
 800ff7c:	f7fe f9c2 	bl	800e304 <_Balloc>
 800ff80:	4604      	mov	r4, r0
 800ff82:	b940      	cbnz	r0, 800ff96 <__gethex+0x166>
 800ff84:	4b61      	ldr	r3, [pc, #388]	; (801010c <__gethex+0x2dc>)
 800ff86:	4602      	mov	r2, r0
 800ff88:	21e4      	movs	r1, #228	; 0xe4
 800ff8a:	4861      	ldr	r0, [pc, #388]	; (8010110 <__gethex+0x2e0>)
 800ff8c:	f7ff feb4 	bl	800fcf8 <__assert_func>
 800ff90:	3101      	adds	r1, #1
 800ff92:	105b      	asrs	r3, r3, #1
 800ff94:	e7ef      	b.n	800ff76 <__gethex+0x146>
 800ff96:	f100 0a14 	add.w	sl, r0, #20
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	495a      	ldr	r1, [pc, #360]	; (8010108 <__gethex+0x2d8>)
 800ff9e:	f8cd a004 	str.w	sl, [sp, #4]
 800ffa2:	469b      	mov	fp, r3
 800ffa4:	45a8      	cmp	r8, r5
 800ffa6:	d342      	bcc.n	801002e <__gethex+0x1fe>
 800ffa8:	9801      	ldr	r0, [sp, #4]
 800ffaa:	f840 bb04 	str.w	fp, [r0], #4
 800ffae:	eba0 000a 	sub.w	r0, r0, sl
 800ffb2:	1080      	asrs	r0, r0, #2
 800ffb4:	6120      	str	r0, [r4, #16]
 800ffb6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ffba:	4658      	mov	r0, fp
 800ffbc:	f7fe fa94 	bl	800e4e8 <__hi0bits>
 800ffc0:	683d      	ldr	r5, [r7, #0]
 800ffc2:	eba8 0000 	sub.w	r0, r8, r0
 800ffc6:	42a8      	cmp	r0, r5
 800ffc8:	dd59      	ble.n	801007e <__gethex+0x24e>
 800ffca:	eba0 0805 	sub.w	r8, r0, r5
 800ffce:	4641      	mov	r1, r8
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f7fe fe23 	bl	800ec1c <__any_on>
 800ffd6:	4683      	mov	fp, r0
 800ffd8:	b1b8      	cbz	r0, 801000a <__gethex+0x1da>
 800ffda:	f108 33ff 	add.w	r3, r8, #4294967295
 800ffde:	1159      	asrs	r1, r3, #5
 800ffe0:	f003 021f 	and.w	r2, r3, #31
 800ffe4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ffe8:	f04f 0b01 	mov.w	fp, #1
 800ffec:	fa0b f202 	lsl.w	r2, fp, r2
 800fff0:	420a      	tst	r2, r1
 800fff2:	d00a      	beq.n	801000a <__gethex+0x1da>
 800fff4:	455b      	cmp	r3, fp
 800fff6:	dd06      	ble.n	8010006 <__gethex+0x1d6>
 800fff8:	f1a8 0102 	sub.w	r1, r8, #2
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7fe fe0d 	bl	800ec1c <__any_on>
 8010002:	2800      	cmp	r0, #0
 8010004:	d138      	bne.n	8010078 <__gethex+0x248>
 8010006:	f04f 0b02 	mov.w	fp, #2
 801000a:	4641      	mov	r1, r8
 801000c:	4620      	mov	r0, r4
 801000e:	f7ff fea7 	bl	800fd60 <rshift>
 8010012:	4446      	add	r6, r8
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	42b3      	cmp	r3, r6
 8010018:	da41      	bge.n	801009e <__gethex+0x26e>
 801001a:	4621      	mov	r1, r4
 801001c:	4648      	mov	r0, r9
 801001e:	f7fe f9b1 	bl	800e384 <_Bfree>
 8010022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010024:	2300      	movs	r3, #0
 8010026:	6013      	str	r3, [r2, #0]
 8010028:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801002c:	e78a      	b.n	800ff44 <__gethex+0x114>
 801002e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010032:	2a2e      	cmp	r2, #46	; 0x2e
 8010034:	d014      	beq.n	8010060 <__gethex+0x230>
 8010036:	2b20      	cmp	r3, #32
 8010038:	d106      	bne.n	8010048 <__gethex+0x218>
 801003a:	9b01      	ldr	r3, [sp, #4]
 801003c:	f843 bb04 	str.w	fp, [r3], #4
 8010040:	f04f 0b00 	mov.w	fp, #0
 8010044:	9301      	str	r3, [sp, #4]
 8010046:	465b      	mov	r3, fp
 8010048:	7828      	ldrb	r0, [r5, #0]
 801004a:	9303      	str	r3, [sp, #12]
 801004c:	f7ff feda 	bl	800fe04 <__hexdig_fun>
 8010050:	9b03      	ldr	r3, [sp, #12]
 8010052:	f000 000f 	and.w	r0, r0, #15
 8010056:	4098      	lsls	r0, r3
 8010058:	ea4b 0b00 	orr.w	fp, fp, r0
 801005c:	3304      	adds	r3, #4
 801005e:	e7a1      	b.n	800ffa4 <__gethex+0x174>
 8010060:	45a8      	cmp	r8, r5
 8010062:	d8e8      	bhi.n	8010036 <__gethex+0x206>
 8010064:	2201      	movs	r2, #1
 8010066:	4628      	mov	r0, r5
 8010068:	9303      	str	r3, [sp, #12]
 801006a:	f7ff fe2b 	bl	800fcc4 <strncmp>
 801006e:	4926      	ldr	r1, [pc, #152]	; (8010108 <__gethex+0x2d8>)
 8010070:	9b03      	ldr	r3, [sp, #12]
 8010072:	2800      	cmp	r0, #0
 8010074:	d1df      	bne.n	8010036 <__gethex+0x206>
 8010076:	e795      	b.n	800ffa4 <__gethex+0x174>
 8010078:	f04f 0b03 	mov.w	fp, #3
 801007c:	e7c5      	b.n	801000a <__gethex+0x1da>
 801007e:	da0b      	bge.n	8010098 <__gethex+0x268>
 8010080:	eba5 0800 	sub.w	r8, r5, r0
 8010084:	4621      	mov	r1, r4
 8010086:	4642      	mov	r2, r8
 8010088:	4648      	mov	r0, r9
 801008a:	f7fe fb95 	bl	800e7b8 <__lshift>
 801008e:	eba6 0608 	sub.w	r6, r6, r8
 8010092:	4604      	mov	r4, r0
 8010094:	f100 0a14 	add.w	sl, r0, #20
 8010098:	f04f 0b00 	mov.w	fp, #0
 801009c:	e7ba      	b.n	8010014 <__gethex+0x1e4>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	42b3      	cmp	r3, r6
 80100a2:	dd73      	ble.n	801018c <__gethex+0x35c>
 80100a4:	1b9e      	subs	r6, r3, r6
 80100a6:	42b5      	cmp	r5, r6
 80100a8:	dc34      	bgt.n	8010114 <__gethex+0x2e4>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d023      	beq.n	80100f8 <__gethex+0x2c8>
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d025      	beq.n	8010100 <__gethex+0x2d0>
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d115      	bne.n	80100e4 <__gethex+0x2b4>
 80100b8:	42b5      	cmp	r5, r6
 80100ba:	d113      	bne.n	80100e4 <__gethex+0x2b4>
 80100bc:	2d01      	cmp	r5, #1
 80100be:	d10b      	bne.n	80100d8 <__gethex+0x2a8>
 80100c0:	9a02      	ldr	r2, [sp, #8]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6013      	str	r3, [r2, #0]
 80100c6:	2301      	movs	r3, #1
 80100c8:	6123      	str	r3, [r4, #16]
 80100ca:	f8ca 3000 	str.w	r3, [sl]
 80100ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80100d4:	601c      	str	r4, [r3, #0]
 80100d6:	e735      	b.n	800ff44 <__gethex+0x114>
 80100d8:	1e69      	subs	r1, r5, #1
 80100da:	4620      	mov	r0, r4
 80100dc:	f7fe fd9e 	bl	800ec1c <__any_on>
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d1ed      	bne.n	80100c0 <__gethex+0x290>
 80100e4:	4621      	mov	r1, r4
 80100e6:	4648      	mov	r0, r9
 80100e8:	f7fe f94c 	bl	800e384 <_Bfree>
 80100ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100ee:	2300      	movs	r3, #0
 80100f0:	6013      	str	r3, [r2, #0]
 80100f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80100f6:	e725      	b.n	800ff44 <__gethex+0x114>
 80100f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d1f2      	bne.n	80100e4 <__gethex+0x2b4>
 80100fe:	e7df      	b.n	80100c0 <__gethex+0x290>
 8010100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1dc      	bne.n	80100c0 <__gethex+0x290>
 8010106:	e7ed      	b.n	80100e4 <__gethex+0x2b4>
 8010108:	0801114c 	.word	0x0801114c
 801010c:	08010fe6 	.word	0x08010fe6
 8010110:	080111f5 	.word	0x080111f5
 8010114:	f106 38ff 	add.w	r8, r6, #4294967295
 8010118:	f1bb 0f00 	cmp.w	fp, #0
 801011c:	d133      	bne.n	8010186 <__gethex+0x356>
 801011e:	f1b8 0f00 	cmp.w	r8, #0
 8010122:	d004      	beq.n	801012e <__gethex+0x2fe>
 8010124:	4641      	mov	r1, r8
 8010126:	4620      	mov	r0, r4
 8010128:	f7fe fd78 	bl	800ec1c <__any_on>
 801012c:	4683      	mov	fp, r0
 801012e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010132:	2301      	movs	r3, #1
 8010134:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010138:	f008 081f 	and.w	r8, r8, #31
 801013c:	fa03 f308 	lsl.w	r3, r3, r8
 8010140:	4213      	tst	r3, r2
 8010142:	4631      	mov	r1, r6
 8010144:	4620      	mov	r0, r4
 8010146:	bf18      	it	ne
 8010148:	f04b 0b02 	orrne.w	fp, fp, #2
 801014c:	1bad      	subs	r5, r5, r6
 801014e:	f7ff fe07 	bl	800fd60 <rshift>
 8010152:	687e      	ldr	r6, [r7, #4]
 8010154:	f04f 0802 	mov.w	r8, #2
 8010158:	f1bb 0f00 	cmp.w	fp, #0
 801015c:	d04a      	beq.n	80101f4 <__gethex+0x3c4>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2b02      	cmp	r3, #2
 8010162:	d016      	beq.n	8010192 <__gethex+0x362>
 8010164:	2b03      	cmp	r3, #3
 8010166:	d018      	beq.n	801019a <__gethex+0x36a>
 8010168:	2b01      	cmp	r3, #1
 801016a:	d109      	bne.n	8010180 <__gethex+0x350>
 801016c:	f01b 0f02 	tst.w	fp, #2
 8010170:	d006      	beq.n	8010180 <__gethex+0x350>
 8010172:	f8da 3000 	ldr.w	r3, [sl]
 8010176:	ea4b 0b03 	orr.w	fp, fp, r3
 801017a:	f01b 0f01 	tst.w	fp, #1
 801017e:	d10f      	bne.n	80101a0 <__gethex+0x370>
 8010180:	f048 0810 	orr.w	r8, r8, #16
 8010184:	e036      	b.n	80101f4 <__gethex+0x3c4>
 8010186:	f04f 0b01 	mov.w	fp, #1
 801018a:	e7d0      	b.n	801012e <__gethex+0x2fe>
 801018c:	f04f 0801 	mov.w	r8, #1
 8010190:	e7e2      	b.n	8010158 <__gethex+0x328>
 8010192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010194:	f1c3 0301 	rsb	r3, r3, #1
 8010198:	930f      	str	r3, [sp, #60]	; 0x3c
 801019a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801019c:	2b00      	cmp	r3, #0
 801019e:	d0ef      	beq.n	8010180 <__gethex+0x350>
 80101a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80101a4:	f104 0214 	add.w	r2, r4, #20
 80101a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80101b2:	2300      	movs	r3, #0
 80101b4:	4694      	mov	ip, r2
 80101b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80101ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80101be:	d01e      	beq.n	80101fe <__gethex+0x3ce>
 80101c0:	3101      	adds	r1, #1
 80101c2:	f8cc 1000 	str.w	r1, [ip]
 80101c6:	f1b8 0f02 	cmp.w	r8, #2
 80101ca:	f104 0214 	add.w	r2, r4, #20
 80101ce:	d13d      	bne.n	801024c <__gethex+0x41c>
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	3b01      	subs	r3, #1
 80101d4:	42ab      	cmp	r3, r5
 80101d6:	d10b      	bne.n	80101f0 <__gethex+0x3c0>
 80101d8:	1169      	asrs	r1, r5, #5
 80101da:	2301      	movs	r3, #1
 80101dc:	f005 051f 	and.w	r5, r5, #31
 80101e0:	fa03 f505 	lsl.w	r5, r3, r5
 80101e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101e8:	421d      	tst	r5, r3
 80101ea:	bf18      	it	ne
 80101ec:	f04f 0801 	movne.w	r8, #1
 80101f0:	f048 0820 	orr.w	r8, r8, #32
 80101f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101f6:	601c      	str	r4, [r3, #0]
 80101f8:	9b02      	ldr	r3, [sp, #8]
 80101fa:	601e      	str	r6, [r3, #0]
 80101fc:	e6a2      	b.n	800ff44 <__gethex+0x114>
 80101fe:	4290      	cmp	r0, r2
 8010200:	f842 3c04 	str.w	r3, [r2, #-4]
 8010204:	d8d6      	bhi.n	80101b4 <__gethex+0x384>
 8010206:	68a2      	ldr	r2, [r4, #8]
 8010208:	4593      	cmp	fp, r2
 801020a:	db17      	blt.n	801023c <__gethex+0x40c>
 801020c:	6861      	ldr	r1, [r4, #4]
 801020e:	4648      	mov	r0, r9
 8010210:	3101      	adds	r1, #1
 8010212:	f7fe f877 	bl	800e304 <_Balloc>
 8010216:	4682      	mov	sl, r0
 8010218:	b918      	cbnz	r0, 8010222 <__gethex+0x3f2>
 801021a:	4b1b      	ldr	r3, [pc, #108]	; (8010288 <__gethex+0x458>)
 801021c:	4602      	mov	r2, r0
 801021e:	2184      	movs	r1, #132	; 0x84
 8010220:	e6b3      	b.n	800ff8a <__gethex+0x15a>
 8010222:	6922      	ldr	r2, [r4, #16]
 8010224:	3202      	adds	r2, #2
 8010226:	f104 010c 	add.w	r1, r4, #12
 801022a:	0092      	lsls	r2, r2, #2
 801022c:	300c      	adds	r0, #12
 801022e:	f7fd f98c 	bl	800d54a <memcpy>
 8010232:	4621      	mov	r1, r4
 8010234:	4648      	mov	r0, r9
 8010236:	f7fe f8a5 	bl	800e384 <_Bfree>
 801023a:	4654      	mov	r4, sl
 801023c:	6922      	ldr	r2, [r4, #16]
 801023e:	1c51      	adds	r1, r2, #1
 8010240:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010244:	6121      	str	r1, [r4, #16]
 8010246:	2101      	movs	r1, #1
 8010248:	6151      	str	r1, [r2, #20]
 801024a:	e7bc      	b.n	80101c6 <__gethex+0x396>
 801024c:	6921      	ldr	r1, [r4, #16]
 801024e:	4559      	cmp	r1, fp
 8010250:	dd0b      	ble.n	801026a <__gethex+0x43a>
 8010252:	2101      	movs	r1, #1
 8010254:	4620      	mov	r0, r4
 8010256:	f7ff fd83 	bl	800fd60 <rshift>
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	3601      	adds	r6, #1
 801025e:	42b3      	cmp	r3, r6
 8010260:	f6ff aedb 	blt.w	801001a <__gethex+0x1ea>
 8010264:	f04f 0801 	mov.w	r8, #1
 8010268:	e7c2      	b.n	80101f0 <__gethex+0x3c0>
 801026a:	f015 051f 	ands.w	r5, r5, #31
 801026e:	d0f9      	beq.n	8010264 <__gethex+0x434>
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	441a      	add	r2, r3
 8010274:	f1c5 0520 	rsb	r5, r5, #32
 8010278:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801027c:	f7fe f934 	bl	800e4e8 <__hi0bits>
 8010280:	42a8      	cmp	r0, r5
 8010282:	dbe6      	blt.n	8010252 <__gethex+0x422>
 8010284:	e7ee      	b.n	8010264 <__gethex+0x434>
 8010286:	bf00      	nop
 8010288:	08010fe6 	.word	0x08010fe6

0801028c <L_shift>:
 801028c:	f1c2 0208 	rsb	r2, r2, #8
 8010290:	0092      	lsls	r2, r2, #2
 8010292:	b570      	push	{r4, r5, r6, lr}
 8010294:	f1c2 0620 	rsb	r6, r2, #32
 8010298:	6843      	ldr	r3, [r0, #4]
 801029a:	6804      	ldr	r4, [r0, #0]
 801029c:	fa03 f506 	lsl.w	r5, r3, r6
 80102a0:	432c      	orrs	r4, r5
 80102a2:	40d3      	lsrs	r3, r2
 80102a4:	6004      	str	r4, [r0, #0]
 80102a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80102aa:	4288      	cmp	r0, r1
 80102ac:	d3f4      	bcc.n	8010298 <L_shift+0xc>
 80102ae:	bd70      	pop	{r4, r5, r6, pc}

080102b0 <__match>:
 80102b0:	b530      	push	{r4, r5, lr}
 80102b2:	6803      	ldr	r3, [r0, #0]
 80102b4:	3301      	adds	r3, #1
 80102b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102ba:	b914      	cbnz	r4, 80102c2 <__match+0x12>
 80102bc:	6003      	str	r3, [r0, #0]
 80102be:	2001      	movs	r0, #1
 80102c0:	bd30      	pop	{r4, r5, pc}
 80102c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80102ca:	2d19      	cmp	r5, #25
 80102cc:	bf98      	it	ls
 80102ce:	3220      	addls	r2, #32
 80102d0:	42a2      	cmp	r2, r4
 80102d2:	d0f0      	beq.n	80102b6 <__match+0x6>
 80102d4:	2000      	movs	r0, #0
 80102d6:	e7f3      	b.n	80102c0 <__match+0x10>

080102d8 <__hexnan>:
 80102d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102dc:	680b      	ldr	r3, [r1, #0]
 80102de:	6801      	ldr	r1, [r0, #0]
 80102e0:	115e      	asrs	r6, r3, #5
 80102e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80102e6:	f013 031f 	ands.w	r3, r3, #31
 80102ea:	b087      	sub	sp, #28
 80102ec:	bf18      	it	ne
 80102ee:	3604      	addne	r6, #4
 80102f0:	2500      	movs	r5, #0
 80102f2:	1f37      	subs	r7, r6, #4
 80102f4:	4682      	mov	sl, r0
 80102f6:	4690      	mov	r8, r2
 80102f8:	9301      	str	r3, [sp, #4]
 80102fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80102fe:	46b9      	mov	r9, r7
 8010300:	463c      	mov	r4, r7
 8010302:	9502      	str	r5, [sp, #8]
 8010304:	46ab      	mov	fp, r5
 8010306:	784a      	ldrb	r2, [r1, #1]
 8010308:	1c4b      	adds	r3, r1, #1
 801030a:	9303      	str	r3, [sp, #12]
 801030c:	b342      	cbz	r2, 8010360 <__hexnan+0x88>
 801030e:	4610      	mov	r0, r2
 8010310:	9105      	str	r1, [sp, #20]
 8010312:	9204      	str	r2, [sp, #16]
 8010314:	f7ff fd76 	bl	800fe04 <__hexdig_fun>
 8010318:	2800      	cmp	r0, #0
 801031a:	d14f      	bne.n	80103bc <__hexnan+0xe4>
 801031c:	9a04      	ldr	r2, [sp, #16]
 801031e:	9905      	ldr	r1, [sp, #20]
 8010320:	2a20      	cmp	r2, #32
 8010322:	d818      	bhi.n	8010356 <__hexnan+0x7e>
 8010324:	9b02      	ldr	r3, [sp, #8]
 8010326:	459b      	cmp	fp, r3
 8010328:	dd13      	ble.n	8010352 <__hexnan+0x7a>
 801032a:	454c      	cmp	r4, r9
 801032c:	d206      	bcs.n	801033c <__hexnan+0x64>
 801032e:	2d07      	cmp	r5, #7
 8010330:	dc04      	bgt.n	801033c <__hexnan+0x64>
 8010332:	462a      	mov	r2, r5
 8010334:	4649      	mov	r1, r9
 8010336:	4620      	mov	r0, r4
 8010338:	f7ff ffa8 	bl	801028c <L_shift>
 801033c:	4544      	cmp	r4, r8
 801033e:	d950      	bls.n	80103e2 <__hexnan+0x10a>
 8010340:	2300      	movs	r3, #0
 8010342:	f1a4 0904 	sub.w	r9, r4, #4
 8010346:	f844 3c04 	str.w	r3, [r4, #-4]
 801034a:	f8cd b008 	str.w	fp, [sp, #8]
 801034e:	464c      	mov	r4, r9
 8010350:	461d      	mov	r5, r3
 8010352:	9903      	ldr	r1, [sp, #12]
 8010354:	e7d7      	b.n	8010306 <__hexnan+0x2e>
 8010356:	2a29      	cmp	r2, #41	; 0x29
 8010358:	d155      	bne.n	8010406 <__hexnan+0x12e>
 801035a:	3102      	adds	r1, #2
 801035c:	f8ca 1000 	str.w	r1, [sl]
 8010360:	f1bb 0f00 	cmp.w	fp, #0
 8010364:	d04f      	beq.n	8010406 <__hexnan+0x12e>
 8010366:	454c      	cmp	r4, r9
 8010368:	d206      	bcs.n	8010378 <__hexnan+0xa0>
 801036a:	2d07      	cmp	r5, #7
 801036c:	dc04      	bgt.n	8010378 <__hexnan+0xa0>
 801036e:	462a      	mov	r2, r5
 8010370:	4649      	mov	r1, r9
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff ff8a 	bl	801028c <L_shift>
 8010378:	4544      	cmp	r4, r8
 801037a:	d934      	bls.n	80103e6 <__hexnan+0x10e>
 801037c:	f1a8 0204 	sub.w	r2, r8, #4
 8010380:	4623      	mov	r3, r4
 8010382:	f853 1b04 	ldr.w	r1, [r3], #4
 8010386:	f842 1f04 	str.w	r1, [r2, #4]!
 801038a:	429f      	cmp	r7, r3
 801038c:	d2f9      	bcs.n	8010382 <__hexnan+0xaa>
 801038e:	1b3b      	subs	r3, r7, r4
 8010390:	f023 0303 	bic.w	r3, r3, #3
 8010394:	3304      	adds	r3, #4
 8010396:	3e03      	subs	r6, #3
 8010398:	3401      	adds	r4, #1
 801039a:	42a6      	cmp	r6, r4
 801039c:	bf38      	it	cc
 801039e:	2304      	movcc	r3, #4
 80103a0:	4443      	add	r3, r8
 80103a2:	2200      	movs	r2, #0
 80103a4:	f843 2b04 	str.w	r2, [r3], #4
 80103a8:	429f      	cmp	r7, r3
 80103aa:	d2fb      	bcs.n	80103a4 <__hexnan+0xcc>
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	b91b      	cbnz	r3, 80103b8 <__hexnan+0xe0>
 80103b0:	4547      	cmp	r7, r8
 80103b2:	d126      	bne.n	8010402 <__hexnan+0x12a>
 80103b4:	2301      	movs	r3, #1
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	2005      	movs	r0, #5
 80103ba:	e025      	b.n	8010408 <__hexnan+0x130>
 80103bc:	3501      	adds	r5, #1
 80103be:	2d08      	cmp	r5, #8
 80103c0:	f10b 0b01 	add.w	fp, fp, #1
 80103c4:	dd06      	ble.n	80103d4 <__hexnan+0xfc>
 80103c6:	4544      	cmp	r4, r8
 80103c8:	d9c3      	bls.n	8010352 <__hexnan+0x7a>
 80103ca:	2300      	movs	r3, #0
 80103cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80103d0:	2501      	movs	r5, #1
 80103d2:	3c04      	subs	r4, #4
 80103d4:	6822      	ldr	r2, [r4, #0]
 80103d6:	f000 000f 	and.w	r0, r0, #15
 80103da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80103de:	6020      	str	r0, [r4, #0]
 80103e0:	e7b7      	b.n	8010352 <__hexnan+0x7a>
 80103e2:	2508      	movs	r5, #8
 80103e4:	e7b5      	b.n	8010352 <__hexnan+0x7a>
 80103e6:	9b01      	ldr	r3, [sp, #4]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d0df      	beq.n	80103ac <__hexnan+0xd4>
 80103ec:	f1c3 0320 	rsb	r3, r3, #32
 80103f0:	f04f 32ff 	mov.w	r2, #4294967295
 80103f4:	40da      	lsrs	r2, r3
 80103f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80103fa:	4013      	ands	r3, r2
 80103fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8010400:	e7d4      	b.n	80103ac <__hexnan+0xd4>
 8010402:	3f04      	subs	r7, #4
 8010404:	e7d2      	b.n	80103ac <__hexnan+0xd4>
 8010406:	2004      	movs	r0, #4
 8010408:	b007      	add	sp, #28
 801040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801040e <__ascii_mbtowc>:
 801040e:	b082      	sub	sp, #8
 8010410:	b901      	cbnz	r1, 8010414 <__ascii_mbtowc+0x6>
 8010412:	a901      	add	r1, sp, #4
 8010414:	b142      	cbz	r2, 8010428 <__ascii_mbtowc+0x1a>
 8010416:	b14b      	cbz	r3, 801042c <__ascii_mbtowc+0x1e>
 8010418:	7813      	ldrb	r3, [r2, #0]
 801041a:	600b      	str	r3, [r1, #0]
 801041c:	7812      	ldrb	r2, [r2, #0]
 801041e:	1e10      	subs	r0, r2, #0
 8010420:	bf18      	it	ne
 8010422:	2001      	movne	r0, #1
 8010424:	b002      	add	sp, #8
 8010426:	4770      	bx	lr
 8010428:	4610      	mov	r0, r2
 801042a:	e7fb      	b.n	8010424 <__ascii_mbtowc+0x16>
 801042c:	f06f 0001 	mvn.w	r0, #1
 8010430:	e7f8      	b.n	8010424 <__ascii_mbtowc+0x16>

08010432 <_realloc_r>:
 8010432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010436:	4680      	mov	r8, r0
 8010438:	4614      	mov	r4, r2
 801043a:	460e      	mov	r6, r1
 801043c:	b921      	cbnz	r1, 8010448 <_realloc_r+0x16>
 801043e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010442:	4611      	mov	r1, r2
 8010444:	f7fb bec6 	b.w	800c1d4 <_malloc_r>
 8010448:	b92a      	cbnz	r2, 8010456 <_realloc_r+0x24>
 801044a:	f7fd ff0f 	bl	800e26c <_free_r>
 801044e:	4625      	mov	r5, r4
 8010450:	4628      	mov	r0, r5
 8010452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010456:	f000 f842 	bl	80104de <_malloc_usable_size_r>
 801045a:	4284      	cmp	r4, r0
 801045c:	4607      	mov	r7, r0
 801045e:	d802      	bhi.n	8010466 <_realloc_r+0x34>
 8010460:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010464:	d812      	bhi.n	801048c <_realloc_r+0x5a>
 8010466:	4621      	mov	r1, r4
 8010468:	4640      	mov	r0, r8
 801046a:	f7fb feb3 	bl	800c1d4 <_malloc_r>
 801046e:	4605      	mov	r5, r0
 8010470:	2800      	cmp	r0, #0
 8010472:	d0ed      	beq.n	8010450 <_realloc_r+0x1e>
 8010474:	42bc      	cmp	r4, r7
 8010476:	4622      	mov	r2, r4
 8010478:	4631      	mov	r1, r6
 801047a:	bf28      	it	cs
 801047c:	463a      	movcs	r2, r7
 801047e:	f7fd f864 	bl	800d54a <memcpy>
 8010482:	4631      	mov	r1, r6
 8010484:	4640      	mov	r0, r8
 8010486:	f7fd fef1 	bl	800e26c <_free_r>
 801048a:	e7e1      	b.n	8010450 <_realloc_r+0x1e>
 801048c:	4635      	mov	r5, r6
 801048e:	e7df      	b.n	8010450 <_realloc_r+0x1e>

08010490 <__ascii_wctomb>:
 8010490:	b149      	cbz	r1, 80104a6 <__ascii_wctomb+0x16>
 8010492:	2aff      	cmp	r2, #255	; 0xff
 8010494:	bf85      	ittet	hi
 8010496:	238a      	movhi	r3, #138	; 0x8a
 8010498:	6003      	strhi	r3, [r0, #0]
 801049a:	700a      	strbls	r2, [r1, #0]
 801049c:	f04f 30ff 	movhi.w	r0, #4294967295
 80104a0:	bf98      	it	ls
 80104a2:	2001      	movls	r0, #1
 80104a4:	4770      	bx	lr
 80104a6:	4608      	mov	r0, r1
 80104a8:	4770      	bx	lr
	...

080104ac <fiprintf>:
 80104ac:	b40e      	push	{r1, r2, r3}
 80104ae:	b503      	push	{r0, r1, lr}
 80104b0:	4601      	mov	r1, r0
 80104b2:	ab03      	add	r3, sp, #12
 80104b4:	4805      	ldr	r0, [pc, #20]	; (80104cc <fiprintf+0x20>)
 80104b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ba:	6800      	ldr	r0, [r0, #0]
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	f000 f83f 	bl	8010540 <_vfiprintf_r>
 80104c2:	b002      	add	sp, #8
 80104c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80104c8:	b003      	add	sp, #12
 80104ca:	4770      	bx	lr
 80104cc:	2000006c 	.word	0x2000006c

080104d0 <abort>:
 80104d0:	b508      	push	{r3, lr}
 80104d2:	2006      	movs	r0, #6
 80104d4:	f000 fa0c 	bl	80108f0 <raise>
 80104d8:	2001      	movs	r0, #1
 80104da:	f7f2 faad 	bl	8002a38 <_exit>

080104de <_malloc_usable_size_r>:
 80104de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104e2:	1f18      	subs	r0, r3, #4
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bfbc      	itt	lt
 80104e8:	580b      	ldrlt	r3, [r1, r0]
 80104ea:	18c0      	addlt	r0, r0, r3
 80104ec:	4770      	bx	lr

080104ee <__sfputc_r>:
 80104ee:	6893      	ldr	r3, [r2, #8]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	b410      	push	{r4}
 80104f6:	6093      	str	r3, [r2, #8]
 80104f8:	da08      	bge.n	801050c <__sfputc_r+0x1e>
 80104fa:	6994      	ldr	r4, [r2, #24]
 80104fc:	42a3      	cmp	r3, r4
 80104fe:	db01      	blt.n	8010504 <__sfputc_r+0x16>
 8010500:	290a      	cmp	r1, #10
 8010502:	d103      	bne.n	801050c <__sfputc_r+0x1e>
 8010504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010508:	f000 b934 	b.w	8010774 <__swbuf_r>
 801050c:	6813      	ldr	r3, [r2, #0]
 801050e:	1c58      	adds	r0, r3, #1
 8010510:	6010      	str	r0, [r2, #0]
 8010512:	7019      	strb	r1, [r3, #0]
 8010514:	4608      	mov	r0, r1
 8010516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801051a:	4770      	bx	lr

0801051c <__sfputs_r>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	4606      	mov	r6, r0
 8010520:	460f      	mov	r7, r1
 8010522:	4614      	mov	r4, r2
 8010524:	18d5      	adds	r5, r2, r3
 8010526:	42ac      	cmp	r4, r5
 8010528:	d101      	bne.n	801052e <__sfputs_r+0x12>
 801052a:	2000      	movs	r0, #0
 801052c:	e007      	b.n	801053e <__sfputs_r+0x22>
 801052e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010532:	463a      	mov	r2, r7
 8010534:	4630      	mov	r0, r6
 8010536:	f7ff ffda 	bl	80104ee <__sfputc_r>
 801053a:	1c43      	adds	r3, r0, #1
 801053c:	d1f3      	bne.n	8010526 <__sfputs_r+0xa>
 801053e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010540 <_vfiprintf_r>:
 8010540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010544:	460d      	mov	r5, r1
 8010546:	b09d      	sub	sp, #116	; 0x74
 8010548:	4614      	mov	r4, r2
 801054a:	4698      	mov	r8, r3
 801054c:	4606      	mov	r6, r0
 801054e:	b118      	cbz	r0, 8010558 <_vfiprintf_r+0x18>
 8010550:	6a03      	ldr	r3, [r0, #32]
 8010552:	b90b      	cbnz	r3, 8010558 <_vfiprintf_r+0x18>
 8010554:	f7fc fe5a 	bl	800d20c <__sinit>
 8010558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801055a:	07d9      	lsls	r1, r3, #31
 801055c:	d405      	bmi.n	801056a <_vfiprintf_r+0x2a>
 801055e:	89ab      	ldrh	r3, [r5, #12]
 8010560:	059a      	lsls	r2, r3, #22
 8010562:	d402      	bmi.n	801056a <_vfiprintf_r+0x2a>
 8010564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010566:	f7fc ffee 	bl	800d546 <__retarget_lock_acquire_recursive>
 801056a:	89ab      	ldrh	r3, [r5, #12]
 801056c:	071b      	lsls	r3, r3, #28
 801056e:	d501      	bpl.n	8010574 <_vfiprintf_r+0x34>
 8010570:	692b      	ldr	r3, [r5, #16]
 8010572:	b99b      	cbnz	r3, 801059c <_vfiprintf_r+0x5c>
 8010574:	4629      	mov	r1, r5
 8010576:	4630      	mov	r0, r6
 8010578:	f000 f93a 	bl	80107f0 <__swsetup_r>
 801057c:	b170      	cbz	r0, 801059c <_vfiprintf_r+0x5c>
 801057e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010580:	07dc      	lsls	r4, r3, #31
 8010582:	d504      	bpl.n	801058e <_vfiprintf_r+0x4e>
 8010584:	f04f 30ff 	mov.w	r0, #4294967295
 8010588:	b01d      	add	sp, #116	; 0x74
 801058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058e:	89ab      	ldrh	r3, [r5, #12]
 8010590:	0598      	lsls	r0, r3, #22
 8010592:	d4f7      	bmi.n	8010584 <_vfiprintf_r+0x44>
 8010594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010596:	f7fc ffd7 	bl	800d548 <__retarget_lock_release_recursive>
 801059a:	e7f3      	b.n	8010584 <_vfiprintf_r+0x44>
 801059c:	2300      	movs	r3, #0
 801059e:	9309      	str	r3, [sp, #36]	; 0x24
 80105a0:	2320      	movs	r3, #32
 80105a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80105aa:	2330      	movs	r3, #48	; 0x30
 80105ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010760 <_vfiprintf_r+0x220>
 80105b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105b4:	f04f 0901 	mov.w	r9, #1
 80105b8:	4623      	mov	r3, r4
 80105ba:	469a      	mov	sl, r3
 80105bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105c0:	b10a      	cbz	r2, 80105c6 <_vfiprintf_r+0x86>
 80105c2:	2a25      	cmp	r2, #37	; 0x25
 80105c4:	d1f9      	bne.n	80105ba <_vfiprintf_r+0x7a>
 80105c6:	ebba 0b04 	subs.w	fp, sl, r4
 80105ca:	d00b      	beq.n	80105e4 <_vfiprintf_r+0xa4>
 80105cc:	465b      	mov	r3, fp
 80105ce:	4622      	mov	r2, r4
 80105d0:	4629      	mov	r1, r5
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7ff ffa2 	bl	801051c <__sfputs_r>
 80105d8:	3001      	adds	r0, #1
 80105da:	f000 80a9 	beq.w	8010730 <_vfiprintf_r+0x1f0>
 80105de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105e0:	445a      	add	r2, fp
 80105e2:	9209      	str	r2, [sp, #36]	; 0x24
 80105e4:	f89a 3000 	ldrb.w	r3, [sl]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	f000 80a1 	beq.w	8010730 <_vfiprintf_r+0x1f0>
 80105ee:	2300      	movs	r3, #0
 80105f0:	f04f 32ff 	mov.w	r2, #4294967295
 80105f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f8:	f10a 0a01 	add.w	sl, sl, #1
 80105fc:	9304      	str	r3, [sp, #16]
 80105fe:	9307      	str	r3, [sp, #28]
 8010600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010604:	931a      	str	r3, [sp, #104]	; 0x68
 8010606:	4654      	mov	r4, sl
 8010608:	2205      	movs	r2, #5
 801060a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060e:	4854      	ldr	r0, [pc, #336]	; (8010760 <_vfiprintf_r+0x220>)
 8010610:	f7ef fdde 	bl	80001d0 <memchr>
 8010614:	9a04      	ldr	r2, [sp, #16]
 8010616:	b9d8      	cbnz	r0, 8010650 <_vfiprintf_r+0x110>
 8010618:	06d1      	lsls	r1, r2, #27
 801061a:	bf44      	itt	mi
 801061c:	2320      	movmi	r3, #32
 801061e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010622:	0713      	lsls	r3, r2, #28
 8010624:	bf44      	itt	mi
 8010626:	232b      	movmi	r3, #43	; 0x2b
 8010628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801062c:	f89a 3000 	ldrb.w	r3, [sl]
 8010630:	2b2a      	cmp	r3, #42	; 0x2a
 8010632:	d015      	beq.n	8010660 <_vfiprintf_r+0x120>
 8010634:	9a07      	ldr	r2, [sp, #28]
 8010636:	4654      	mov	r4, sl
 8010638:	2000      	movs	r0, #0
 801063a:	f04f 0c0a 	mov.w	ip, #10
 801063e:	4621      	mov	r1, r4
 8010640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010644:	3b30      	subs	r3, #48	; 0x30
 8010646:	2b09      	cmp	r3, #9
 8010648:	d94d      	bls.n	80106e6 <_vfiprintf_r+0x1a6>
 801064a:	b1b0      	cbz	r0, 801067a <_vfiprintf_r+0x13a>
 801064c:	9207      	str	r2, [sp, #28]
 801064e:	e014      	b.n	801067a <_vfiprintf_r+0x13a>
 8010650:	eba0 0308 	sub.w	r3, r0, r8
 8010654:	fa09 f303 	lsl.w	r3, r9, r3
 8010658:	4313      	orrs	r3, r2
 801065a:	9304      	str	r3, [sp, #16]
 801065c:	46a2      	mov	sl, r4
 801065e:	e7d2      	b.n	8010606 <_vfiprintf_r+0xc6>
 8010660:	9b03      	ldr	r3, [sp, #12]
 8010662:	1d19      	adds	r1, r3, #4
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	9103      	str	r1, [sp, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	bfbb      	ittet	lt
 801066c:	425b      	neglt	r3, r3
 801066e:	f042 0202 	orrlt.w	r2, r2, #2
 8010672:	9307      	strge	r3, [sp, #28]
 8010674:	9307      	strlt	r3, [sp, #28]
 8010676:	bfb8      	it	lt
 8010678:	9204      	strlt	r2, [sp, #16]
 801067a:	7823      	ldrb	r3, [r4, #0]
 801067c:	2b2e      	cmp	r3, #46	; 0x2e
 801067e:	d10c      	bne.n	801069a <_vfiprintf_r+0x15a>
 8010680:	7863      	ldrb	r3, [r4, #1]
 8010682:	2b2a      	cmp	r3, #42	; 0x2a
 8010684:	d134      	bne.n	80106f0 <_vfiprintf_r+0x1b0>
 8010686:	9b03      	ldr	r3, [sp, #12]
 8010688:	1d1a      	adds	r2, r3, #4
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	9203      	str	r2, [sp, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	bfb8      	it	lt
 8010692:	f04f 33ff 	movlt.w	r3, #4294967295
 8010696:	3402      	adds	r4, #2
 8010698:	9305      	str	r3, [sp, #20]
 801069a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010770 <_vfiprintf_r+0x230>
 801069e:	7821      	ldrb	r1, [r4, #0]
 80106a0:	2203      	movs	r2, #3
 80106a2:	4650      	mov	r0, sl
 80106a4:	f7ef fd94 	bl	80001d0 <memchr>
 80106a8:	b138      	cbz	r0, 80106ba <_vfiprintf_r+0x17a>
 80106aa:	9b04      	ldr	r3, [sp, #16]
 80106ac:	eba0 000a 	sub.w	r0, r0, sl
 80106b0:	2240      	movs	r2, #64	; 0x40
 80106b2:	4082      	lsls	r2, r0
 80106b4:	4313      	orrs	r3, r2
 80106b6:	3401      	adds	r4, #1
 80106b8:	9304      	str	r3, [sp, #16]
 80106ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106be:	4829      	ldr	r0, [pc, #164]	; (8010764 <_vfiprintf_r+0x224>)
 80106c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106c4:	2206      	movs	r2, #6
 80106c6:	f7ef fd83 	bl	80001d0 <memchr>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	d03f      	beq.n	801074e <_vfiprintf_r+0x20e>
 80106ce:	4b26      	ldr	r3, [pc, #152]	; (8010768 <_vfiprintf_r+0x228>)
 80106d0:	bb1b      	cbnz	r3, 801071a <_vfiprintf_r+0x1da>
 80106d2:	9b03      	ldr	r3, [sp, #12]
 80106d4:	3307      	adds	r3, #7
 80106d6:	f023 0307 	bic.w	r3, r3, #7
 80106da:	3308      	adds	r3, #8
 80106dc:	9303      	str	r3, [sp, #12]
 80106de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106e0:	443b      	add	r3, r7
 80106e2:	9309      	str	r3, [sp, #36]	; 0x24
 80106e4:	e768      	b.n	80105b8 <_vfiprintf_r+0x78>
 80106e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80106ea:	460c      	mov	r4, r1
 80106ec:	2001      	movs	r0, #1
 80106ee:	e7a6      	b.n	801063e <_vfiprintf_r+0xfe>
 80106f0:	2300      	movs	r3, #0
 80106f2:	3401      	adds	r4, #1
 80106f4:	9305      	str	r3, [sp, #20]
 80106f6:	4619      	mov	r1, r3
 80106f8:	f04f 0c0a 	mov.w	ip, #10
 80106fc:	4620      	mov	r0, r4
 80106fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010702:	3a30      	subs	r2, #48	; 0x30
 8010704:	2a09      	cmp	r2, #9
 8010706:	d903      	bls.n	8010710 <_vfiprintf_r+0x1d0>
 8010708:	2b00      	cmp	r3, #0
 801070a:	d0c6      	beq.n	801069a <_vfiprintf_r+0x15a>
 801070c:	9105      	str	r1, [sp, #20]
 801070e:	e7c4      	b.n	801069a <_vfiprintf_r+0x15a>
 8010710:	fb0c 2101 	mla	r1, ip, r1, r2
 8010714:	4604      	mov	r4, r0
 8010716:	2301      	movs	r3, #1
 8010718:	e7f0      	b.n	80106fc <_vfiprintf_r+0x1bc>
 801071a:	ab03      	add	r3, sp, #12
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	462a      	mov	r2, r5
 8010720:	4b12      	ldr	r3, [pc, #72]	; (801076c <_vfiprintf_r+0x22c>)
 8010722:	a904      	add	r1, sp, #16
 8010724:	4630      	mov	r0, r6
 8010726:	f7fb ff0f 	bl	800c548 <_printf_float>
 801072a:	4607      	mov	r7, r0
 801072c:	1c78      	adds	r0, r7, #1
 801072e:	d1d6      	bne.n	80106de <_vfiprintf_r+0x19e>
 8010730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010732:	07d9      	lsls	r1, r3, #31
 8010734:	d405      	bmi.n	8010742 <_vfiprintf_r+0x202>
 8010736:	89ab      	ldrh	r3, [r5, #12]
 8010738:	059a      	lsls	r2, r3, #22
 801073a:	d402      	bmi.n	8010742 <_vfiprintf_r+0x202>
 801073c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801073e:	f7fc ff03 	bl	800d548 <__retarget_lock_release_recursive>
 8010742:	89ab      	ldrh	r3, [r5, #12]
 8010744:	065b      	lsls	r3, r3, #25
 8010746:	f53f af1d 	bmi.w	8010584 <_vfiprintf_r+0x44>
 801074a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801074c:	e71c      	b.n	8010588 <_vfiprintf_r+0x48>
 801074e:	ab03      	add	r3, sp, #12
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	462a      	mov	r2, r5
 8010754:	4b05      	ldr	r3, [pc, #20]	; (801076c <_vfiprintf_r+0x22c>)
 8010756:	a904      	add	r1, sp, #16
 8010758:	4630      	mov	r0, r6
 801075a:	f7fc f999 	bl	800ca90 <_printf_i>
 801075e:	e7e4      	b.n	801072a <_vfiprintf_r+0x1ea>
 8010760:	080111a0 	.word	0x080111a0
 8010764:	080111aa 	.word	0x080111aa
 8010768:	0800c549 	.word	0x0800c549
 801076c:	0801051d 	.word	0x0801051d
 8010770:	080111a6 	.word	0x080111a6

08010774 <__swbuf_r>:
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	460e      	mov	r6, r1
 8010778:	4614      	mov	r4, r2
 801077a:	4605      	mov	r5, r0
 801077c:	b118      	cbz	r0, 8010786 <__swbuf_r+0x12>
 801077e:	6a03      	ldr	r3, [r0, #32]
 8010780:	b90b      	cbnz	r3, 8010786 <__swbuf_r+0x12>
 8010782:	f7fc fd43 	bl	800d20c <__sinit>
 8010786:	69a3      	ldr	r3, [r4, #24]
 8010788:	60a3      	str	r3, [r4, #8]
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	071a      	lsls	r2, r3, #28
 801078e:	d525      	bpl.n	80107dc <__swbuf_r+0x68>
 8010790:	6923      	ldr	r3, [r4, #16]
 8010792:	b31b      	cbz	r3, 80107dc <__swbuf_r+0x68>
 8010794:	6823      	ldr	r3, [r4, #0]
 8010796:	6922      	ldr	r2, [r4, #16]
 8010798:	1a98      	subs	r0, r3, r2
 801079a:	6963      	ldr	r3, [r4, #20]
 801079c:	b2f6      	uxtb	r6, r6
 801079e:	4283      	cmp	r3, r0
 80107a0:	4637      	mov	r7, r6
 80107a2:	dc04      	bgt.n	80107ae <__swbuf_r+0x3a>
 80107a4:	4621      	mov	r1, r4
 80107a6:	4628      	mov	r0, r5
 80107a8:	f7ff fa4a 	bl	800fc40 <_fflush_r>
 80107ac:	b9e0      	cbnz	r0, 80107e8 <__swbuf_r+0x74>
 80107ae:	68a3      	ldr	r3, [r4, #8]
 80107b0:	3b01      	subs	r3, #1
 80107b2:	60a3      	str	r3, [r4, #8]
 80107b4:	6823      	ldr	r3, [r4, #0]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	6022      	str	r2, [r4, #0]
 80107ba:	701e      	strb	r6, [r3, #0]
 80107bc:	6962      	ldr	r2, [r4, #20]
 80107be:	1c43      	adds	r3, r0, #1
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d004      	beq.n	80107ce <__swbuf_r+0x5a>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	07db      	lsls	r3, r3, #31
 80107c8:	d506      	bpl.n	80107d8 <__swbuf_r+0x64>
 80107ca:	2e0a      	cmp	r6, #10
 80107cc:	d104      	bne.n	80107d8 <__swbuf_r+0x64>
 80107ce:	4621      	mov	r1, r4
 80107d0:	4628      	mov	r0, r5
 80107d2:	f7ff fa35 	bl	800fc40 <_fflush_r>
 80107d6:	b938      	cbnz	r0, 80107e8 <__swbuf_r+0x74>
 80107d8:	4638      	mov	r0, r7
 80107da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107dc:	4621      	mov	r1, r4
 80107de:	4628      	mov	r0, r5
 80107e0:	f000 f806 	bl	80107f0 <__swsetup_r>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d0d5      	beq.n	8010794 <__swbuf_r+0x20>
 80107e8:	f04f 37ff 	mov.w	r7, #4294967295
 80107ec:	e7f4      	b.n	80107d8 <__swbuf_r+0x64>
	...

080107f0 <__swsetup_r>:
 80107f0:	b538      	push	{r3, r4, r5, lr}
 80107f2:	4b2a      	ldr	r3, [pc, #168]	; (801089c <__swsetup_r+0xac>)
 80107f4:	4605      	mov	r5, r0
 80107f6:	6818      	ldr	r0, [r3, #0]
 80107f8:	460c      	mov	r4, r1
 80107fa:	b118      	cbz	r0, 8010804 <__swsetup_r+0x14>
 80107fc:	6a03      	ldr	r3, [r0, #32]
 80107fe:	b90b      	cbnz	r3, 8010804 <__swsetup_r+0x14>
 8010800:	f7fc fd04 	bl	800d20c <__sinit>
 8010804:	89a3      	ldrh	r3, [r4, #12]
 8010806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801080a:	0718      	lsls	r0, r3, #28
 801080c:	d422      	bmi.n	8010854 <__swsetup_r+0x64>
 801080e:	06d9      	lsls	r1, r3, #27
 8010810:	d407      	bmi.n	8010822 <__swsetup_r+0x32>
 8010812:	2309      	movs	r3, #9
 8010814:	602b      	str	r3, [r5, #0]
 8010816:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801081a:	81a3      	strh	r3, [r4, #12]
 801081c:	f04f 30ff 	mov.w	r0, #4294967295
 8010820:	e034      	b.n	801088c <__swsetup_r+0x9c>
 8010822:	0758      	lsls	r0, r3, #29
 8010824:	d512      	bpl.n	801084c <__swsetup_r+0x5c>
 8010826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010828:	b141      	cbz	r1, 801083c <__swsetup_r+0x4c>
 801082a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801082e:	4299      	cmp	r1, r3
 8010830:	d002      	beq.n	8010838 <__swsetup_r+0x48>
 8010832:	4628      	mov	r0, r5
 8010834:	f7fd fd1a 	bl	800e26c <_free_r>
 8010838:	2300      	movs	r3, #0
 801083a:	6363      	str	r3, [r4, #52]	; 0x34
 801083c:	89a3      	ldrh	r3, [r4, #12]
 801083e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010842:	81a3      	strh	r3, [r4, #12]
 8010844:	2300      	movs	r3, #0
 8010846:	6063      	str	r3, [r4, #4]
 8010848:	6923      	ldr	r3, [r4, #16]
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	f043 0308 	orr.w	r3, r3, #8
 8010852:	81a3      	strh	r3, [r4, #12]
 8010854:	6923      	ldr	r3, [r4, #16]
 8010856:	b94b      	cbnz	r3, 801086c <__swsetup_r+0x7c>
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801085e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010862:	d003      	beq.n	801086c <__swsetup_r+0x7c>
 8010864:	4621      	mov	r1, r4
 8010866:	4628      	mov	r0, r5
 8010868:	f000 f884 	bl	8010974 <__smakebuf_r>
 801086c:	89a0      	ldrh	r0, [r4, #12]
 801086e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010872:	f010 0301 	ands.w	r3, r0, #1
 8010876:	d00a      	beq.n	801088e <__swsetup_r+0x9e>
 8010878:	2300      	movs	r3, #0
 801087a:	60a3      	str	r3, [r4, #8]
 801087c:	6963      	ldr	r3, [r4, #20]
 801087e:	425b      	negs	r3, r3
 8010880:	61a3      	str	r3, [r4, #24]
 8010882:	6923      	ldr	r3, [r4, #16]
 8010884:	b943      	cbnz	r3, 8010898 <__swsetup_r+0xa8>
 8010886:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801088a:	d1c4      	bne.n	8010816 <__swsetup_r+0x26>
 801088c:	bd38      	pop	{r3, r4, r5, pc}
 801088e:	0781      	lsls	r1, r0, #30
 8010890:	bf58      	it	pl
 8010892:	6963      	ldrpl	r3, [r4, #20]
 8010894:	60a3      	str	r3, [r4, #8]
 8010896:	e7f4      	b.n	8010882 <__swsetup_r+0x92>
 8010898:	2000      	movs	r0, #0
 801089a:	e7f7      	b.n	801088c <__swsetup_r+0x9c>
 801089c:	2000006c 	.word	0x2000006c

080108a0 <_raise_r>:
 80108a0:	291f      	cmp	r1, #31
 80108a2:	b538      	push	{r3, r4, r5, lr}
 80108a4:	4604      	mov	r4, r0
 80108a6:	460d      	mov	r5, r1
 80108a8:	d904      	bls.n	80108b4 <_raise_r+0x14>
 80108aa:	2316      	movs	r3, #22
 80108ac:	6003      	str	r3, [r0, #0]
 80108ae:	f04f 30ff 	mov.w	r0, #4294967295
 80108b2:	bd38      	pop	{r3, r4, r5, pc}
 80108b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80108b6:	b112      	cbz	r2, 80108be <_raise_r+0x1e>
 80108b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108bc:	b94b      	cbnz	r3, 80108d2 <_raise_r+0x32>
 80108be:	4620      	mov	r0, r4
 80108c0:	f000 f830 	bl	8010924 <_getpid_r>
 80108c4:	462a      	mov	r2, r5
 80108c6:	4601      	mov	r1, r0
 80108c8:	4620      	mov	r0, r4
 80108ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ce:	f000 b817 	b.w	8010900 <_kill_r>
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d00a      	beq.n	80108ec <_raise_r+0x4c>
 80108d6:	1c59      	adds	r1, r3, #1
 80108d8:	d103      	bne.n	80108e2 <_raise_r+0x42>
 80108da:	2316      	movs	r3, #22
 80108dc:	6003      	str	r3, [r0, #0]
 80108de:	2001      	movs	r0, #1
 80108e0:	e7e7      	b.n	80108b2 <_raise_r+0x12>
 80108e2:	2400      	movs	r4, #0
 80108e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108e8:	4628      	mov	r0, r5
 80108ea:	4798      	blx	r3
 80108ec:	2000      	movs	r0, #0
 80108ee:	e7e0      	b.n	80108b2 <_raise_r+0x12>

080108f0 <raise>:
 80108f0:	4b02      	ldr	r3, [pc, #8]	; (80108fc <raise+0xc>)
 80108f2:	4601      	mov	r1, r0
 80108f4:	6818      	ldr	r0, [r3, #0]
 80108f6:	f7ff bfd3 	b.w	80108a0 <_raise_r>
 80108fa:	bf00      	nop
 80108fc:	2000006c 	.word	0x2000006c

08010900 <_kill_r>:
 8010900:	b538      	push	{r3, r4, r5, lr}
 8010902:	4d07      	ldr	r5, [pc, #28]	; (8010920 <_kill_r+0x20>)
 8010904:	2300      	movs	r3, #0
 8010906:	4604      	mov	r4, r0
 8010908:	4608      	mov	r0, r1
 801090a:	4611      	mov	r1, r2
 801090c:	602b      	str	r3, [r5, #0]
 801090e:	f7f2 f883 	bl	8002a18 <_kill>
 8010912:	1c43      	adds	r3, r0, #1
 8010914:	d102      	bne.n	801091c <_kill_r+0x1c>
 8010916:	682b      	ldr	r3, [r5, #0]
 8010918:	b103      	cbz	r3, 801091c <_kill_r+0x1c>
 801091a:	6023      	str	r3, [r4, #0]
 801091c:	bd38      	pop	{r3, r4, r5, pc}
 801091e:	bf00      	nop
 8010920:	2000211c 	.word	0x2000211c

08010924 <_getpid_r>:
 8010924:	f7f2 b870 	b.w	8002a08 <_getpid>

08010928 <__swhatbuf_r>:
 8010928:	b570      	push	{r4, r5, r6, lr}
 801092a:	460c      	mov	r4, r1
 801092c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010930:	2900      	cmp	r1, #0
 8010932:	b096      	sub	sp, #88	; 0x58
 8010934:	4615      	mov	r5, r2
 8010936:	461e      	mov	r6, r3
 8010938:	da0d      	bge.n	8010956 <__swhatbuf_r+0x2e>
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010940:	f04f 0100 	mov.w	r1, #0
 8010944:	bf0c      	ite	eq
 8010946:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801094a:	2340      	movne	r3, #64	; 0x40
 801094c:	2000      	movs	r0, #0
 801094e:	6031      	str	r1, [r6, #0]
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	b016      	add	sp, #88	; 0x58
 8010954:	bd70      	pop	{r4, r5, r6, pc}
 8010956:	466a      	mov	r2, sp
 8010958:	f000 f848 	bl	80109ec <_fstat_r>
 801095c:	2800      	cmp	r0, #0
 801095e:	dbec      	blt.n	801093a <__swhatbuf_r+0x12>
 8010960:	9901      	ldr	r1, [sp, #4]
 8010962:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010966:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801096a:	4259      	negs	r1, r3
 801096c:	4159      	adcs	r1, r3
 801096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010972:	e7eb      	b.n	801094c <__swhatbuf_r+0x24>

08010974 <__smakebuf_r>:
 8010974:	898b      	ldrh	r3, [r1, #12]
 8010976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010978:	079d      	lsls	r5, r3, #30
 801097a:	4606      	mov	r6, r0
 801097c:	460c      	mov	r4, r1
 801097e:	d507      	bpl.n	8010990 <__smakebuf_r+0x1c>
 8010980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	6123      	str	r3, [r4, #16]
 8010988:	2301      	movs	r3, #1
 801098a:	6163      	str	r3, [r4, #20]
 801098c:	b002      	add	sp, #8
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	ab01      	add	r3, sp, #4
 8010992:	466a      	mov	r2, sp
 8010994:	f7ff ffc8 	bl	8010928 <__swhatbuf_r>
 8010998:	9900      	ldr	r1, [sp, #0]
 801099a:	4605      	mov	r5, r0
 801099c:	4630      	mov	r0, r6
 801099e:	f7fb fc19 	bl	800c1d4 <_malloc_r>
 80109a2:	b948      	cbnz	r0, 80109b8 <__smakebuf_r+0x44>
 80109a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109a8:	059a      	lsls	r2, r3, #22
 80109aa:	d4ef      	bmi.n	801098c <__smakebuf_r+0x18>
 80109ac:	f023 0303 	bic.w	r3, r3, #3
 80109b0:	f043 0302 	orr.w	r3, r3, #2
 80109b4:	81a3      	strh	r3, [r4, #12]
 80109b6:	e7e3      	b.n	8010980 <__smakebuf_r+0xc>
 80109b8:	89a3      	ldrh	r3, [r4, #12]
 80109ba:	6020      	str	r0, [r4, #0]
 80109bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109c0:	81a3      	strh	r3, [r4, #12]
 80109c2:	9b00      	ldr	r3, [sp, #0]
 80109c4:	6163      	str	r3, [r4, #20]
 80109c6:	9b01      	ldr	r3, [sp, #4]
 80109c8:	6120      	str	r0, [r4, #16]
 80109ca:	b15b      	cbz	r3, 80109e4 <__smakebuf_r+0x70>
 80109cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109d0:	4630      	mov	r0, r6
 80109d2:	f000 f81d 	bl	8010a10 <_isatty_r>
 80109d6:	b128      	cbz	r0, 80109e4 <__smakebuf_r+0x70>
 80109d8:	89a3      	ldrh	r3, [r4, #12]
 80109da:	f023 0303 	bic.w	r3, r3, #3
 80109de:	f043 0301 	orr.w	r3, r3, #1
 80109e2:	81a3      	strh	r3, [r4, #12]
 80109e4:	89a3      	ldrh	r3, [r4, #12]
 80109e6:	431d      	orrs	r5, r3
 80109e8:	81a5      	strh	r5, [r4, #12]
 80109ea:	e7cf      	b.n	801098c <__smakebuf_r+0x18>

080109ec <_fstat_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4d07      	ldr	r5, [pc, #28]	; (8010a0c <_fstat_r+0x20>)
 80109f0:	2300      	movs	r3, #0
 80109f2:	4604      	mov	r4, r0
 80109f4:	4608      	mov	r0, r1
 80109f6:	4611      	mov	r1, r2
 80109f8:	602b      	str	r3, [r5, #0]
 80109fa:	f7f2 f86c 	bl	8002ad6 <_fstat>
 80109fe:	1c43      	adds	r3, r0, #1
 8010a00:	d102      	bne.n	8010a08 <_fstat_r+0x1c>
 8010a02:	682b      	ldr	r3, [r5, #0]
 8010a04:	b103      	cbz	r3, 8010a08 <_fstat_r+0x1c>
 8010a06:	6023      	str	r3, [r4, #0]
 8010a08:	bd38      	pop	{r3, r4, r5, pc}
 8010a0a:	bf00      	nop
 8010a0c:	2000211c 	.word	0x2000211c

08010a10 <_isatty_r>:
 8010a10:	b538      	push	{r3, r4, r5, lr}
 8010a12:	4d06      	ldr	r5, [pc, #24]	; (8010a2c <_isatty_r+0x1c>)
 8010a14:	2300      	movs	r3, #0
 8010a16:	4604      	mov	r4, r0
 8010a18:	4608      	mov	r0, r1
 8010a1a:	602b      	str	r3, [r5, #0]
 8010a1c:	f7f2 f86b 	bl	8002af6 <_isatty>
 8010a20:	1c43      	adds	r3, r0, #1
 8010a22:	d102      	bne.n	8010a2a <_isatty_r+0x1a>
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	b103      	cbz	r3, 8010a2a <_isatty_r+0x1a>
 8010a28:	6023      	str	r3, [r4, #0]
 8010a2a:	bd38      	pop	{r3, r4, r5, pc}
 8010a2c:	2000211c 	.word	0x2000211c

08010a30 <sqrtf>:
 8010a30:	b508      	push	{r3, lr}
 8010a32:	ed2d 8b02 	vpush	{d8}
 8010a36:	eeb0 8a40 	vmov.f32	s16, s0
 8010a3a:	f000 f817 	bl	8010a6c <__ieee754_sqrtf>
 8010a3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a46:	d60c      	bvs.n	8010a62 <sqrtf+0x32>
 8010a48:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010a68 <sqrtf+0x38>
 8010a4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a54:	d505      	bpl.n	8010a62 <sqrtf+0x32>
 8010a56:	f7fc fd4b 	bl	800d4f0 <__errno>
 8010a5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010a5e:	2321      	movs	r3, #33	; 0x21
 8010a60:	6003      	str	r3, [r0, #0]
 8010a62:	ecbd 8b02 	vpop	{d8}
 8010a66:	bd08      	pop	{r3, pc}
 8010a68:	00000000 	.word	0x00000000

08010a6c <__ieee754_sqrtf>:
 8010a6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010a70:	4770      	bx	lr
	...

08010a74 <_init>:
 8010a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a76:	bf00      	nop
 8010a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a7a:	bc08      	pop	{r3}
 8010a7c:	469e      	mov	lr, r3
 8010a7e:	4770      	bx	lr

08010a80 <_fini>:
 8010a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a82:	bf00      	nop
 8010a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a86:	bc08      	pop	{r3}
 8010a88:	469e      	mov	lr, r3
 8010a8a:	4770      	bx	lr
