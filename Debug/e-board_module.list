
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800ef50  0800ef50  0001ef50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f528  0800f528  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f528  0800f528  0001f528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f530  0800f530  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f534  0800f534  0001f534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  200001d8  0800f710  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fbc  0800f710  00021fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024953  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000478b  00000000  00000000  00044b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  00049330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000186d  00000000  00000000  0004b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005a63  00000000  00000000  0004cae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240f2  00000000  00000000  00052548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115a48  00000000  00000000  0007663a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009bac  00000000  00000000  0018c084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00195c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef38 	.word	0x0800ef38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ef38 	.word	0x0800ef38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f001 f812 	bl	800201c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f846 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 fa72 	bl	80014e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001000:	f000 fa40 	bl	8001484 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001004:	f000 f996 	bl	8001334 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001008:	f000 f890 	bl	800112c <MX_ADC1_Init>
  MX_I2C1_Init();
 800100c:	f000 f904 	bl	8001218 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001010:	f000 f942 	bl	8001298 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001014:	f000 fa06 	bl	8001424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001018:	210c      	movs	r1, #12
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <main+0x70>)
 800101c:	f004 f8d8 	bl	80051d0 <HAL_TIM_PWM_Start>
  Lora_Init();
 8001020:	f000 fac6 	bl	80015b0 <Lora_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001024:	f006 fdce 	bl	8007bc4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <main+0x74>)
 800102a:	2100      	movs	r1, #0
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <main+0x78>)
 800102e:	f006 fe13 	bl	8007c58 <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <main+0x7c>)
 8001036:	6013      	str	r3, [r2, #0]

  /* creation of readThrottle */
  readThrottleHandle = osThreadNew(ReadThrottle, NULL, &readThrottle_attributes);
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <main+0x80>)
 800103a:	2100      	movs	r1, #0
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <main+0x84>)
 800103e:	f006 fe0b 	bl	8007c58 <osThreadNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <main+0x88>)
 8001046:	6013      	str	r3, [r2, #0]

  /* creation of sendSpeed */
  sendSpeedHandle = osThreadNew(SendSpeed, NULL, &sendSpeed_attributes);
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <main+0x8c>)
 800104a:	2100      	movs	r1, #0
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <main+0x90>)
 800104e:	f006 fe03 	bl	8007c58 <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <main+0x94>)
 8001056:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001058:	f006 fdd8 	bl	8007c0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105c:	e7fe      	b.n	800105c <main+0x6c>
 800105e:	bf00      	nop
 8001060:	200002f8 	.word	0x200002f8
 8001064:	0800f048 	.word	0x0800f048
 8001068:	080017d5 	.word	0x080017d5
 800106c:	20000454 	.word	0x20000454
 8001070:	0800f06c 	.word	0x0800f06c
 8001074:	080017e5 	.word	0x080017e5
 8001078:	20000458 	.word	0x20000458
 800107c:	0800f090 	.word	0x0800f090
 8001080:	08001875 	.word	0x08001875
 8001084:	2000045c 	.word	0x2000045c

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b096      	sub	sp, #88	; 0x58
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2244      	movs	r2, #68	; 0x44
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00a faab 	bl	800b5f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ae:	f002 fc21 	bl	80038f4 <HAL_PWREx_ControlVoltageScaling>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b8:	f000 fc00 	bl	80018bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c6:	2310      	movs	r3, #16
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ce:	2302      	movs	r3, #2
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010da:	2307      	movs	r3, #7
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fc58 	bl	80039a0 <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010f6:	f000 fbe1 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2303      	movs	r3, #3
 8001100:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	2104      	movs	r1, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f003 f820 	bl	8004158 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800111e:	f000 fbcd 	bl	80018bc <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3758      	adds	r7, #88	; 0x58
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <MX_ADC1_Init+0xe0>)
 8001150:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <MX_ADC1_Init+0xe4>)
 8001152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_ADC1_Init+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_ADC1_Init+0xe0>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_ADC1_Init+0xe0>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_ADC1_Init+0xe0>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <MX_ADC1_Init+0xe0>)
 800116e:	2204      	movs	r2, #4
 8001170:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_ADC1_Init+0xe0>)
 8001174:	2200      	movs	r2, #0
 8001176:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_ADC1_Init+0xe0>)
 800117a:	2200      	movs	r2, #0
 800117c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_ADC1_Init+0xe0>)
 8001180:	2201      	movs	r2, #1
 8001182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_ADC1_Init+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_ADC1_Init+0xe0>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_ADC1_Init+0xe0>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_ADC1_Init+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_ADC1_Init+0xe0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_ADC1_Init+0xe0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ae:	4817      	ldr	r0, [pc, #92]	; (800120c <MX_ADC1_Init+0xe0>)
 80011b0:	f001 f924 	bl	80023fc <HAL_ADC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011ba:	f000 fb7f 	bl	80018bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <MX_ADC1_Init+0xe0>)
 80011ca:	f001 fe7f 	bl	8002ecc <HAL_ADCEx_MultiModeConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011d4:	f000 fb72 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_ADC1_Init+0xe8>)
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011dc:	2306      	movs	r3, #6
 80011de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e4:	237f      	movs	r3, #127	; 0x7f
 80011e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e8:	2304      	movs	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_ADC1_Init+0xe0>)
 80011f6:	f001 fa51 	bl	800269c <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001200:	f000 fb5c 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001f4 	.word	0x200001f4
 8001210:	50040000 	.word	0x50040000
 8001214:	04300002 	.word	0x04300002

08001218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_I2C1_Init+0x74>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <MX_I2C1_Init+0x78>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_I2C1_Init+0x74>)
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <MX_I2C1_Init+0x7c>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_I2C1_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_I2C1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <MX_I2C1_Init+0x74>)
 8001254:	f002 fa0e 	bl	8003674 <HAL_I2C_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800125e:	f000 fb2d 	bl	80018bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <MX_I2C1_Init+0x74>)
 8001266:	f002 faa0 	bl	80037aa <HAL_I2CEx_ConfigAnalogFilter>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001270:	f000 fb24 	bl	80018bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_I2C1_Init+0x74>)
 8001278:	f002 fae2 	bl	8003840 <HAL_I2CEx_ConfigDigitalFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001282:	f000 fb1b 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000258 	.word	0x20000258
 8001290:	40005400 	.word	0x40005400
 8001294:	10909cec 	.word	0x10909cec

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM2_Init+0x98>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_TIM2_Init+0x98>)
 80012c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM2_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM2_Init+0x98>)
 80012ce:	f240 623f 	movw	r2, #1599	; 0x63f
 80012d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_TIM2_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM2_Init+0x98>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_TIM2_Init+0x98>)
 80012e2:	f003 fe4b 	bl	8004f7c <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012ec:	f000 fae6 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM2_Init+0x98>)
 80012fe:	f004 fa83 	bl	8005808 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001308:	f000 fad8 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM2_Init+0x98>)
 800131a:	f004 ff97 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001324:	f000 faca 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200002ac 	.word	0x200002ac

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_TIM3_Init+0xe8>)
 8001368:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <MX_TIM3_Init+0xec>)
 800136a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_TIM3_Init+0xe8>)
 800136e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_TIM3_Init+0xe8>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 800137a:	4b28      	ldr	r3, [pc, #160]	; (800141c <MX_TIM3_Init+0xe8>)
 800137c:	f240 623f 	movw	r2, #1599	; 0x63f
 8001380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_TIM3_Init+0xe8>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_TIM3_Init+0xe8>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <MX_TIM3_Init+0xe8>)
 8001390:	f003 fdf4 	bl	8004f7c <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800139a:	f000 fa8f 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a8:	4619      	mov	r1, r3
 80013aa:	481c      	ldr	r0, [pc, #112]	; (800141c <MX_TIM3_Init+0xe8>)
 80013ac:	f004 fa2c 	bl	8005808 <HAL_TIM_ConfigClockSource>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013b6:	f000 fa81 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ba:	4818      	ldr	r0, [pc, #96]	; (800141c <MX_TIM3_Init+0xe8>)
 80013bc:	f003 fea6 	bl	800510c <HAL_TIM_PWM_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013c6:	f000 fa79 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4810      	ldr	r0, [pc, #64]	; (800141c <MX_TIM3_Init+0xe8>)
 80013da:	f004 ff37 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80013e4:	f000 fa6a 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	220c      	movs	r2, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <MX_TIM3_Init+0xe8>)
 8001400:	f004 f8ee 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800140a:	f000 fa57 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <MX_TIM3_Init+0xe8>)
 8001410:	f000 fb7c 	bl	8001b0c <HAL_TIM_MspPostInit>

}
 8001414:	bf00      	nop
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002f8 	.word	0x200002f8
 8001420:	40000400 	.word	0x40000400

08001424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USART1_UART_Init+0x58>)
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <MX_USART1_UART_Init+0x5c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USART1_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART1_UART_Init+0x58>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART1_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART1_UART_Init+0x58>)
 8001468:	f004 ff96 	bl	8006398 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 fa23 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000344 	.word	0x20000344
 8001480:	40013800 	.word	0x40013800

08001484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_USART2_UART_Init+0x58>)
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MX_USART2_UART_Init+0x5c>)
 800148c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_USART2_UART_Init+0x58>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_USART2_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_USART2_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_USART2_UART_Init+0x58>)
 80014c8:	f004 ff66 	bl	8006398 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014d2:	f000 f9f3 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200003cc 	.word	0x200003cc
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_GPIO_Init+0xc4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_GPIO_Init+0xc4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2120      	movs	r1, #32
 800155e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001562:	f002 f86f 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <MX_GPIO_Init+0xc8>)
 800157e:	f001 feb7 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001582:	2320      	movs	r3, #32
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f001 fea8 	bl	80032f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000800 	.word	0x48000800

080015b0 <Lora_Init>:

/* USER CODE BEGIN 4 */

void Lora_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b09a      	sub	sp, #104	; 0x68
 80015b4:	af00      	add	r7, sp, #0
	// Set LORA Chip To Transmit/Receive Mode
	char msg[100] = "";
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2260      	movs	r2, #96	; 0x60
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00a f815 	bl	800b5f2 <memset>
	// Spreading Factor: 7
	// Bandwidth: 500 KHz
	// Coding Rate: 1
	// Programmed Preamble: 10
	// This favors speed over dependabilitySerial2.println("AT+PARAMETER=7,9,1,4");
	sprintf(msg, "AT+PARAMETER=10,8,1,4\r\n");
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4960      	ldr	r1, [pc, #384]	; (800174c <Lora_Init+0x19c>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f009 ffad 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fe4b 	bl	8000270 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	b29a      	uxth	r2, r3
 80015de:	1d39      	adds	r1, r7, #4
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	485a      	ldr	r0, [pc, #360]	; (8001750 <Lora_Init+0x1a0>)
 80015e6:	f004 ff25 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80015ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ee:	f000 fd55 	bl	800209c <HAL_Delay>

	// Sets LORA Chip address to 24
	sprintf(msg, "AT+ADDRESS=24\r\n");
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4957      	ldr	r1, [pc, #348]	; (8001754 <Lora_Init+0x1a4>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f009 ff98 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fe36 	bl	8000270 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	b29a      	uxth	r2, r3
 8001608:	1d39      	adds	r1, r7, #4
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	4850      	ldr	r0, [pc, #320]	; (8001750 <Lora_Init+0x1a0>)
 8001610:	f004 ff10 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001614:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001618:	f000 fd40 	bl	800209c <HAL_Delay>

	// Reads back address to verify setup
	sprintf(msg, "AT+NETWORKID=3\r\n");
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	494e      	ldr	r1, [pc, #312]	; (8001758 <Lora_Init+0x1a8>)
 8001620:	4618      	mov	r0, r3
 8001622:	f009 ff83 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fe21 	bl	8000270 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	1d39      	adds	r1, r7, #4
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	4845      	ldr	r0, [pc, #276]	; (8001750 <Lora_Init+0x1a0>)
 800163a:	f004 fefb 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 800163e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001642:	f000 fd2b 	bl	800209c <HAL_Delay>

	sprintf(msg, "AT+CPIN?\r\n");
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4944      	ldr	r1, [pc, #272]	; (800175c <Lora_Init+0x1ac>)
 800164a:	4618      	mov	r0, r3
 800164c:	f009 ff6e 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe0c 	bl	8000270 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	483b      	ldr	r0, [pc, #236]	; (8001750 <Lora_Init+0x1a0>)
 8001664:	f004 fee6 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166c:	f000 fd16 	bl	800209c <HAL_Delay>


	sprintf(msg, "AT+CRFOP?\r\n");
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	493b      	ldr	r1, [pc, #236]	; (8001760 <Lora_Init+0x1b0>)
 8001674:	4618      	mov	r0, r3
 8001676:	f009 ff59 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fdf7 	bl	8000270 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	b29a      	uxth	r2, r3
 8001686:	1d39      	adds	r1, r7, #4
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	4830      	ldr	r0, [pc, #192]	; (8001750 <Lora_Init+0x1a0>)
 800168e:	f004 fed1 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001696:	f000 fd01 	bl	800209c <HAL_Delay>

	sprintf(msg, "AT+ADDRESS?\r\n");
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4931      	ldr	r1, [pc, #196]	; (8001764 <Lora_Init+0x1b4>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f009 ff44 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fde2 	bl	8000270 <strlen>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	1d39      	adds	r1, r7, #4
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	4826      	ldr	r0, [pc, #152]	; (8001750 <Lora_Init+0x1a0>)
 80016b8:	f004 febc 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 80016bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c0:	f000 fcec 	bl	800209c <HAL_Delay>

	sprintf(msg, "AT+NETWORKID?\r\n");
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4928      	ldr	r1, [pc, #160]	; (8001768 <Lora_Init+0x1b8>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 ff2f 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fdcd 	bl	8000270 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	1d39      	adds	r1, r7, #4
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	481b      	ldr	r0, [pc, #108]	; (8001750 <Lora_Init+0x1a0>)
 80016e2:	f004 fea7 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 80016e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ea:	f000 fcd7 	bl	800209c <HAL_Delay>

	sprintf(msg, "AT+BAND?\r\n");
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	491e      	ldr	r1, [pc, #120]	; (800176c <Lora_Init+0x1bc>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f009 ff1a 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fdb8 	bl	8000270 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	1d39      	adds	r1, r7, #4
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <Lora_Init+0x1a0>)
 800170c:	f004 fe92 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001714:	f000 fcc2 	bl	800209c <HAL_Delay>

	sprintf(msg, "AT+MODE=0\r\n");
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4915      	ldr	r1, [pc, #84]	; (8001770 <Lora_Init+0x1c0>)
 800171c:	4618      	mov	r0, r3
 800171e:	f009 ff05 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fda3 	bl	8000270 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	1d39      	adds	r1, r7, #4
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <Lora_Init+0x1a0>)
 8001736:	f004 fe7d 	bl	8006434 <HAL_UART_Transmit>
	HAL_Delay(500);
 800173a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173e:	f000 fcad 	bl	800209c <HAL_Delay>
}
 8001742:	bf00      	nop
 8001744:	3768      	adds	r7, #104	; 0x68
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	0800ef78 	.word	0x0800ef78
 8001750:	20000344 	.word	0x20000344
 8001754:	0800ef90 	.word	0x0800ef90
 8001758:	0800efa0 	.word	0x0800efa0
 800175c:	0800efb4 	.word	0x0800efb4
 8001760:	0800efc0 	.word	0x0800efc0
 8001764:	0800efcc 	.word	0x0800efcc
 8001768:	0800efdc 	.word	0x0800efdc
 800176c:	0800efec 	.word	0x0800efec
 8001770:	0800eff8 	.word	0x0800eff8

08001774 <Lora_Send_Data>:

void Lora_Send_Data(char data[])
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b09e      	sub	sp, #120	; 0x78
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
	// Combines message to be sent with the data passed in
	char msg[100] = "";
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2260      	movs	r2, #96	; 0x60
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f009 ff32 	bl	800b5f2 <memset>
	sprintf(msg, "AT+SEND=%i,%i,%s\r\n", ESP_LORA_ADDRESS, strlen(data), data);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe fd6e 	bl	8000270 <strlen>
 8001794:	4602      	mov	r2, r0
 8001796:	f107 000c 	add.w	r0, r7, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	2219      	movs	r2, #25
 80017a2:	490a      	ldr	r1, [pc, #40]	; (80017cc <Lora_Send_Data+0x58>)
 80017a4:	f009 fec2 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd5f 	bl	8000270 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f107 010c 	add.w	r1, r7, #12
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <Lora_Send_Data+0x5c>)
 80017c0:	f004 fe38 	bl	8006434 <HAL_UART_Transmit>
}
 80017c4:	bf00      	nop
 80017c6:	3770      	adds	r7, #112	; 0x70
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800f004 	.word	0x0800f004
 80017d0:	20000344 	.word	0x20000344

080017d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f006 facd 	bl	8007d7c <osDelay>
 80017e2:	e7fb      	b.n	80017dc <StartDefaultTask+0x8>

080017e4 <ReadThrottle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadThrottle */
void ReadThrottle(void *argument)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0a4      	sub	sp, #144	; 0x90
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  {
	char msg[50];
	char Rx_data[100];
	int Throttle;
	char oldMSG[25];
	strncpy(oldMSG, UART1_rxBuffer, 25);
 80017ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f0:	2219      	movs	r2, #25
 80017f2:	491b      	ldr	r1, [pc, #108]	; (8001860 <ReadThrottle+0x7c>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f009 ff04 	bl	800b602 <strncpy>
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 25);
 80017fa:	2219      	movs	r2, #25
 80017fc:	4918      	ldr	r1, [pc, #96]	; (8001860 <ReadThrottle+0x7c>)
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <ReadThrottle+0x80>)
 8001800:	f004 fea2 	bl	8006548 <HAL_UART_Receive_IT>
	if (UART1_rxBuffer != oldMSG)
	{
		HAL_UART_Transmit(&huart2, UART1_rxBuffer, 25, 100);
 8001804:	2364      	movs	r3, #100	; 0x64
 8001806:	2219      	movs	r2, #25
 8001808:	4915      	ldr	r1, [pc, #84]	; (8001860 <ReadThrottle+0x7c>)
 800180a:	4817      	ldr	r0, [pc, #92]	; (8001868 <ReadThrottle+0x84>)
 800180c:	f004 fe12 	bl	8006434 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, oldMSG, 25, 100);
 8001810:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	2219      	movs	r2, #25
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <ReadThrottle+0x84>)
 800181a:	f004 fe0b 	bl	8006434 <HAL_UART_Transmit>
	}
	Throttle = 80;
 800181e:	2350      	movs	r3, #80	; 0x50
 8001820:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	TIM3->CCR4 = Throttle;
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <ReadThrottle+0x88>)
 8001826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
	sprintf(msg, "Set Throttle to : %i\r\n", Throttle);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001834:	490e      	ldr	r1, [pc, #56]	; (8001870 <ReadThrottle+0x8c>)
 8001836:	4618      	mov	r0, r3
 8001838:	f009 fe78 	bl	800b52c <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), I2C_DELAY);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fd15 	bl	8000270 <strlen>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	f107 010c 	add.w	r1, r7, #12
 800184e:	2332      	movs	r3, #50	; 0x32
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <ReadThrottle+0x84>)
 8001852:	f004 fdef 	bl	8006434 <HAL_UART_Transmit>
    osDelay(1);
 8001856:	2001      	movs	r0, #1
 8001858:	f006 fa90 	bl	8007d7c <osDelay>
  {
 800185c:	e7c6      	b.n	80017ec <ReadThrottle+0x8>
 800185e:	bf00      	nop
 8001860:	20000460 	.word	0x20000460
 8001864:	20000344 	.word	0x20000344
 8001868:	200003cc 	.word	0x200003cc
 800186c:	40000400 	.word	0x40000400
 8001870:	0800f018 	.word	0x0800f018

08001874 <SendSpeed>:
* @retval None
*/
/* USER CODE END Header_SendSpeed */
void SendSpeed(void *argument)

{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendSpeed */
  /* Infinite loop */
  for(;;)
  {
	// Calculate Speed
	char Speed[2] = "20";
 800187c:	f243 0332 	movw	r3, #12338	; 0x3032
 8001880:	81bb      	strh	r3, [r7, #12]
	Lora_Send_Data(Speed);
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff74 	bl	8001774 <Lora_Send_Data>
    osDelay(20000);
 800188c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001890:	f006 fa74 	bl	8007d7c <osDelay>
  {
 8001894:	e7f2      	b.n	800187c <SendSpeed+0x8>
	...

08001898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018aa:	f000 fbd7 	bl	800205c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40001000 	.word	0x40001000

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_MspInit+0x4c>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_MspInit+0x4c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6613      	str	r3, [r2, #96]	; 0x60
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_MspInit+0x4c>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_MspInit+0x4c>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_MspInit+0x4c>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f001 fc49 	bl	800319c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ac      	sub	sp, #176	; 0xb0
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2288      	movs	r2, #136	; 0x88
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f009 fe5a 	bl	800b5f2 <memset>
  if(hadc->Instance==ADC1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <HAL_ADC_MspInit+0xc8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d146      	bne.n	80019d6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800194e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800195e:	2308      	movs	r3, #8
 8001960:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001962:	2307      	movs	r3, #7
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001966:	2302      	movs	r3, #2
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800196a:	2302      	movs	r3, #2
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800196e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4618      	mov	r0, r3
 800197a:	f002 fe43 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001984:	f7ff ff9a 	bl	80018bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_ADC_MspInit+0xcc>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <HAL_ADC_MspInit+0xcc>)
 800198e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_ADC_MspInit+0xcc>)
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_ADC_MspInit+0xcc>)
 80019a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a4:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_ADC_MspInit+0xcc>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_ADC_MspInit+0xcc>)
 80019ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019be:	230b      	movs	r3, #11
 80019c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <HAL_ADC_MspInit+0xd0>)
 80019d2:	f001 fc8d 	bl	80032f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	37b0      	adds	r7, #176	; 0xb0
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	50040000 	.word	0x50040000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000800 	.word	0x48000800

080019ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0ac      	sub	sp, #176	; 0xb0
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2288      	movs	r2, #136	; 0x88
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f009 fdf0 	bl	800b5f2 <memset>
  if(hi2c->Instance==I2C1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <HAL_I2C_MspInit+0xb0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d13b      	bne.n	8001a94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fdeb 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a34:	f7ff ff42 	bl	80018bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_I2C_MspInit+0xb4>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	4a18      	ldr	r2, [pc, #96]	; (8001aa0 <HAL_I2C_MspInit+0xb4>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_I2C_MspInit+0xb4>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a74:	4619      	mov	r1, r3
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <HAL_I2C_MspInit+0xb8>)
 8001a78:	f001 fc3a 	bl	80032f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_I2C_MspInit+0xb4>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_I2C_MspInit+0xb4>)
 8001a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a86:	6593      	str	r3, [r2, #88]	; 0x58
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_I2C_MspInit+0xb4>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	37b0      	adds	r7, #176	; 0xb0
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000400 	.word	0x48000400

08001aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_TIM_Base_MspInit+0x5c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ad2:	e010      	b.n	8001af6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <HAL_TIM_Base_MspInit+0x60>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10b      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_TIM_Base_MspInit+0x5c>)
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40000400 	.word	0x40000400

08001b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_TIM_MspPostInit+0x64>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d11c      	bne.n	8001b68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_TIM_MspPostInit+0x68>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_TIM_MspPostInit+0x68>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	f001 fbc4 	bl	80032f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000800 	.word	0x48000800

08001b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0ae      	sub	sp, #184	; 0xb8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	2288      	movs	r2, #136	; 0x88
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f009 fd28 	bl	800b5f2 <memset>
  if(huart->Instance==USART1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a47      	ldr	r2, [pc, #284]	; (8001cc4 <HAL_UART_MspInit+0x148>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d145      	bne.n	8001c38 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fd23 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc4:	f7ff fe7a 	bl	80018bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	4a38      	ldr	r2, [pc, #224]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bf8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c12:	2307      	movs	r3, #7
 8001c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f001 fb65 	bl	80032f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2105      	movs	r1, #5
 8001c2a:	2025      	movs	r0, #37	; 0x25
 8001c2c:	f001 fab6 	bl	800319c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c30:	2025      	movs	r0, #37	; 0x25
 8001c32:	f001 facf 	bl	80031d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c36:	e040      	b.n	8001cba <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_UART_MspInit+0x150>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d13b      	bne.n	8001cba <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fcd8 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c5a:	f7ff fe2f 	bl	80018bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_UART_MspInit+0x14c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f001 fb1b 	bl	80032f0 <HAL_GPIO_Init>
}
 8001cba:	bf00      	nop
 8001cbc:	37b8      	adds	r7, #184	; 0xb8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_InitTick+0xe0>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <HAL_InitTick+0xe0>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_InitTick+0xe0>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cf6:	f107 0210 	add.w	r2, r7, #16
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fbed 	bl	80044e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d10:	f002 fbba 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8001d14:	6378      	str	r0, [r7, #52]	; 0x34
 8001d16:	e004      	b.n	8001d22 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d18:	f002 fbb6 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d24:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_InitTick+0xe4>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_InitTick+0xec>)
 8001d34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d56:	4818      	ldr	r0, [pc, #96]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d58:	f003 f910 	bl	8004f7c <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11b      	bne.n	8001da2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d6a:	4813      	ldr	r0, [pc, #76]	; (8001db8 <HAL_InitTick+0xe8>)
 8001d6c:	f003 f95e 	bl	800502c <HAL_TIM_Base_Start_IT>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d111      	bne.n	8001da2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d7e:	2036      	movs	r0, #54	; 0x36
 8001d80:	f001 fa28 	bl	80031d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	d808      	bhi.n	8001d9c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	2036      	movs	r0, #54	; 0x36
 8001d90:	f001 fa04 	bl	800319c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_InitTick+0xf0>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e002      	b.n	8001da2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001da2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3738      	adds	r7, #56	; 0x38
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	2000047c 	.word	0x2000047c
 8001dbc:	40001000 	.word	0x40001000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler+0x4>

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <USART1_IRQHandler+0x10>)
 8001df6:	f004 fbf3 	bl	80065e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000344 	.word	0x20000344

08001e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM6_DAC_IRQHandler+0x10>)
 8001e0a:	f003 fae7 	bl	80053dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000047c 	.word	0x2000047c

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e32:	f009 fc99 	bl	800b768 <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
  }

  return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
  }
  return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f009 fbfe 	bl	800b768 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20018000 	.word	0x20018000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	200004c8 	.word	0x200004c8
 8001fa0:	20001fc0 	.word	0x20001fc0

08001fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002000 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fcc:	f7ff ffea 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	; (8002008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <LoopForever+0xe>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	; (8002014 <LoopForever+0x16>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f009 fbbd 	bl	800b774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ffa:	f7fe fff9 	bl	8000ff0 <main>

08001ffe <LoopForever>:

LoopForever:
    b LoopForever
 8001ffe:	e7fe      	b.n	8001ffe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002000:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800200c:	0800f538 	.word	0x0800f538
  ldr r2, =_sbss
 8002010:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002014:	20001fbc 	.word	0x20001fbc

08002018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_2_IRQHandler>
	...

0800201c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_Init+0x3c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_Init+0x3c>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002032:	2003      	movs	r0, #3
 8002034:	f001 f8a7 	bl	8003186 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002038:	200f      	movs	r0, #15
 800203a:	f7ff fe49 	bl	8001cd0 <HAL_InitTick>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	e001      	b.n	800204e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800204a:	f7ff fc3d 	bl	80018c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204e:	79fb      	ldrb	r3, [r7, #7]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000008 	.word	0x20000008
 8002080:	200004cc 	.word	0x200004cc

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200004cc 	.word	0x200004cc

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008

080020e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3360      	adds	r3, #96	; 0x60
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <LL_ADC_SetOffset+0x44>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	4313      	orrs	r3, r2
 800217c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	03fff000 	.word	0x03fff000

08002194 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3360      	adds	r3, #96	; 0x60
 80021a2:	461a      	mov	r2, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3360      	adds	r3, #96	; 0x60
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3330      	adds	r3, #48	; 0x30
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	211f      	movs	r1, #31
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	401a      	ands	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 011f 	and.w	r1, r3, #31
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800224e:	b480      	push	{r7}
 8002250:	b087      	sub	sp, #28
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3314      	adds	r3, #20
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0e5b      	lsrs	r3, r3, #25
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	4413      	add	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	0d1b      	lsrs	r3, r3, #20
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2107      	movs	r1, #7
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	401a      	ands	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0d1b      	lsrs	r3, r3, #20
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	431a      	orrs	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0318 	and.w	r3, r3, #24
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c8:	40d9      	lsrs	r1, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	400b      	ands	r3, r1
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	431a      	orrs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	0007ffff 	.word	0x0007ffff

080022ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6093      	str	r3, [r2, #8]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002324:	d101      	bne.n	800232a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002374:	d101      	bne.n	800237a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <LL_ADC_IsEnabled+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_IsEnabled+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d101      	bne.n	80023ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e130      	b.n	8002678 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fa77 	bl	8001918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff67 	bl	8002310 <LL_ADC_IsDeepPowerDownEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff4d 	bl	80022ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff82 	bl	8002360 <LL_ADC_IsInternalRegulatorEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff66 	bl	8002338 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_ADC_Init+0x284>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	4a84      	ldr	r2, [pc, #528]	; (8002684 <HAL_ADC_Init+0x288>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002480:	e002      	b.n	8002488 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3b01      	subs	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff64 	bl	8002360 <LL_ADC_IsInternalRegulatorEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f043 0210 	orr.w	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff75 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 80024c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80c9 	bne.w	8002666 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 80c5 	bne.w	8002666 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff49 	bl	8002388 <LL_ADC_IsEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d115      	bne.n	8002528 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fc:	4862      	ldr	r0, [pc, #392]	; (8002688 <HAL_ADC_Init+0x28c>)
 80024fe:	f7ff ff43 	bl	8002388 <LL_ADC_IsEnabled>
 8002502:	4604      	mov	r4, r0
 8002504:	4861      	ldr	r0, [pc, #388]	; (800268c <HAL_ADC_Init+0x290>)
 8002506:	f7ff ff3f 	bl	8002388 <LL_ADC_IsEnabled>
 800250a:	4603      	mov	r3, r0
 800250c:	431c      	orrs	r4, r3
 800250e:	4860      	ldr	r0, [pc, #384]	; (8002690 <HAL_ADC_Init+0x294>)
 8002510:	f7ff ff3a 	bl	8002388 <LL_ADC_IsEnabled>
 8002514:	4603      	mov	r3, r0
 8002516:	4323      	orrs	r3, r4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4619      	mov	r1, r3
 8002522:	485c      	ldr	r0, [pc, #368]	; (8002694 <HAL_ADC_Init+0x298>)
 8002524:	f7ff fdde 	bl	80020e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e5b      	ldrb	r3, [r3, #25]
 800252c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002532:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002538:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800253e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002546:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d106      	bne.n	8002564 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	3b01      	subs	r3, #1
 800255c:	045b      	lsls	r3, r3, #17
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_ADC_Init+0x29c>)
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	430b      	orrs	r3, r1
 8002592:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff1b 	bl	80023d4 <LL_ADC_INJ_IsConversionOngoing>
 800259e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13d      	bne.n	8002622 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13a      	bne.n	8002622 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025b8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c8:	f023 0302 	bic.w	r3, r3, #2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	430b      	orrs	r3, r1
 80025d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d118      	bne.n	8002612 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002602:	430a      	orrs	r2, r1
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	e007      	b.n	8002622 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10c      	bne.n	8002644 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f023 010f 	bic.w	r1, r3, #15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020f 	bic.w	r2, r2, #15
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f023 0303 	bic.w	r3, r3, #3
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
 8002664:	e007      	b.n	8002676 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002676:	7ffb      	ldrb	r3, [r7, #31]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3724      	adds	r7, #36	; 0x24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	20000000 	.word	0x20000000
 8002684:	053e2d63 	.word	0x053e2d63
 8002688:	50040000 	.word	0x50040000
 800268c:	50040100 	.word	0x50040100
 8002690:	50040200 	.word	0x50040200
 8002694:	50040300 	.word	0x50040300
 8002698:	fff0c007 	.word	0xfff0c007

0800269c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0b6      	sub	sp, #216	; 0xd8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x22>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e3c9      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x7b6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fe6f 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 83aa 	bne.w	8002e2c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d824      	bhi.n	8002732 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	3b02      	subs	r3, #2
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d81b      	bhi.n	800272a <HAL_ADC_ConfigChannel+0x8e>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_ADC_ConfigChannel+0x5c>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002709 	.word	0x08002709
 80026fc:	08002711 	.word	0x08002711
 8002700:	08002719 	.word	0x08002719
 8002704:	08002721 	.word	0x08002721
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002708:	230c      	movs	r3, #12
 800270a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800270e:	e010      	b.n	8002732 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002710:	2312      	movs	r3, #18
 8002712:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002716:	e00c      	b.n	8002732 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002718:	2318      	movs	r3, #24
 800271a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800271e:	e008      	b.n	8002732 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002728:	e003      	b.n	8002732 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800272a:	2306      	movs	r3, #6
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002730:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002740:	f7ff fd59 	bl	80021f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fe30 	bl	80023ae <LL_ADC_REG_IsConversionOngoing>
 800274e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fe3c 	bl	80023d4 <LL_ADC_INJ_IsConversionOngoing>
 800275c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 81a4 	bne.w	8002ab2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800276a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 819f 	bne.w	8002ab2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	461a      	mov	r2, r3
 8002782:	f7ff fd64 	bl	800224e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	08db      	lsrs	r3, r3, #3
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d00a      	beq.n	80027be <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6919      	ldr	r1, [r3, #16]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b8:	f7ff fcc8 	bl	800214c <LL_ADC_SetOffset>
 80027bc:	e179      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fce5 	bl	8002194 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x14e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fcda 	bl	8002194 <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	e01e      	b.n	8002828 <HAL_ADC_ConfigChannel+0x18c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fccf 	bl	8002194 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800280c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e004      	b.n	8002826 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800281c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1a4>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	e018      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1d6>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800285c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e004      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fc9e 	bl	80021c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fc82 	bl	8002194 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x214>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc77 	bl	8002194 <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	e01e      	b.n	80028ee <HAL_ADC_ConfigChannel+0x252>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fc6c 	bl	8002194 <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80028ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80028d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e004      	b.n	80028ec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80028e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x26a>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	e018      	b.n	8002938 <HAL_ADC_ConfigChannel+0x29c>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800291a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800291e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002922:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e004      	b.n	8002938 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800292e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002938:	429a      	cmp	r2, r3
 800293a:	d106      	bne.n	800294a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fc3b 	bl	80021c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fc1f 	bl	8002194 <LL_ADC_GetOffsetChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x2da>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2102      	movs	r1, #2
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fc14 	bl	8002194 <LL_ADC_GetOffsetChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	e01e      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x318>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fc09 	bl	8002194 <LL_ADC_GetOffsetChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800299c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e004      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80029a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x330>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	e014      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x35a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80029da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80029e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e004      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80029ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d106      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fbdc 	bl	80021c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fbc0 	bl	8002194 <LL_ADC_GetOffsetChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x398>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2103      	movs	r1, #3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fbb5 	bl	8002194 <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	e017      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x3c8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2103      	movs	r1, #3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fbaa 	bl	8002194 <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x3e0>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	e011      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x404>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a8c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2103      	movs	r1, #3
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fb87 	bl	80021c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fc66 	bl	8002388 <LL_ADC_IsEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 8140 	bne.w	8002d44 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6819      	ldr	r1, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f7ff fbe7 	bl	80022a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a8f      	ldr	r2, [pc, #572]	; (8002d18 <HAL_ADC_ConfigChannel+0x67c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	f040 8131 	bne.w	8002d44 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10b      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x46e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	bf94      	ite	ls
 8002b02:	2301      	movls	r3, #1
 8002b04:	2300      	movhi	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e019      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x4a2>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	bf94      	ite	ls
 8002b38:	2301      	movls	r3, #1
 8002b3a:	2300      	movhi	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d079      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x4c2>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	3301      	adds	r3, #1
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5c:	e015      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4ee>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	069b      	lsls	r3, r3, #26
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x50e>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	e017      	b.n	8002bda <HAL_ADC_ConfigChannel+0x53e>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x564>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 021f 	and.w	r2, r3, #31
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	051b      	lsls	r3, r3, #20
 8002bfe:	e018      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x596>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c32:	430b      	orrs	r3, r1
 8002c34:	e081      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x5b6>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	3301      	adds	r3, #1
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c50:	e015      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x5e2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x602>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	e017      	b.n	8002cce <HAL_ADC_ConfigChannel+0x632>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	61bb      	str	r3, [r7, #24]
  return result;
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	ea42 0103 	orr.w	r1, r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x65e>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b1e      	subs	r3, #30
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	e01e      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x69c>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	60fb      	str	r3, [r7, #12]
  return result;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e006      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x688>
 8002d16:	bf00      	nop
 8002d18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b1e      	subs	r3, #30
 8002d32:	051b      	lsls	r3, r3, #20
 8002d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7ff fa85 	bl	800224e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d07a      	beq.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d50:	4843      	ldr	r0, [pc, #268]	; (8002e60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d52:	f7ff f9ed 	bl	8002130 <LL_ADC_GetCommonPathInternalCh>
 8002d56:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a41      	ldr	r2, [pc, #260]	; (8002e64 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d12c      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d126      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0x6e8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <HAL_ADC_ConfigChannel+0x7d0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d15d      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4834      	ldr	r0, [pc, #208]	; (8002e60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d90:	f7ff f9bb 	bl	800210a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f9      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbc:	e040      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d118      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d112      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x74c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <HAL_ADC_ConfigChannel+0x7d0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d12d      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df0:	4619      	mov	r1, r3
 8002df2:	481b      	ldr	r0, [pc, #108]	; (8002e60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002df4:	f7ff f989 	bl	800210a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df8:	e024      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_ADC_ConfigChannel+0x7e0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d120      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11a      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d115      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e22:	4619      	mov	r1, r3
 8002e24:	480e      	ldr	r0, [pc, #56]	; (8002e60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e26:	f7ff f970 	bl	800210a <LL_ADC_SetCommonPathInternalCh>
 8002e2a:	e00c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e3e:	e002      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	37d8      	adds	r7, #216	; 0xd8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	80080000 	.word	0x80080000
 8002e60:	50040300 	.word	0x50040300
 8002e64:	c7520000 	.word	0xc7520000
 8002e68:	50040000 	.word	0x50040000
 8002e6c:	50040200 	.word	0x50040200
 8002e70:	20000000 	.word	0x20000000
 8002e74:	053e2d63 	.word	0x053e2d63
 8002e78:	cb840000 	.word	0xcb840000
 8002e7c:	80000001 	.word	0x80000001

08002e80 <LL_ADC_IsEnabled>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_IsEnabled+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_IsEnabled+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d101      	bne.n	8002ebe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b09f      	sub	sp, #124	; 0x7c
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e093      	b.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a47      	ldr	r2, [pc, #284]	; (800301c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d102      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f04:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	e001      	b.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e072      	b.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ffb9 	bl	8002ea6 <LL_ADC_REG_IsConversionOngoing>
 8002f34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ffb3 	bl	8002ea6 <LL_ADC_REG_IsConversionOngoing>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d154      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d151      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f4c:	4b35      	ldr	r3, [pc, #212]	; (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f4e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d02c      	beq.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f6a:	035b      	lsls	r3, r3, #13
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f74:	4829      	ldr	r0, [pc, #164]	; (800301c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f76:	f7ff ff83 	bl	8002e80 <LL_ADC_IsEnabled>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4828      	ldr	r0, [pc, #160]	; (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f7e:	f7ff ff7f 	bl	8002e80 <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	431c      	orrs	r4, r3
 8002f86:	4828      	ldr	r0, [pc, #160]	; (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f88:	f7ff ff7a 	bl	8002e80 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d137      	bne.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f9c:	f023 030f 	bic.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb0:	e028      	b.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbe:	4817      	ldr	r0, [pc, #92]	; (800301c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fc0:	f7ff ff5e 	bl	8002e80 <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	4816      	ldr	r0, [pc, #88]	; (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fc8:	f7ff ff5a 	bl	8002e80 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	431c      	orrs	r4, r3
 8002fd0:	4815      	ldr	r0, [pc, #84]	; (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fd2:	f7ff ff55 	bl	8002e80 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4323      	orrs	r3, r4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d112      	bne.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fe6:	f023 030f 	bic.w	r3, r3, #15
 8002fea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fee:	e009      	b.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003002:	e000      	b.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003004:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800300e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003012:	4618      	mov	r0, r3
 8003014:	377c      	adds	r7, #124	; 0x7c
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	50040000 	.word	0x50040000
 8003020:	50040100 	.word	0x50040100
 8003024:	50040300 	.word	0x50040300
 8003028:	50040200 	.word	0x50040200

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff4c 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ae:	f7ff ff61 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	6978      	ldr	r0, [r7, #20]
 80031ba:	f7ff ffb1 	bl	8003120 <NVIC_EncodePriority>
 80031be:	4602      	mov	r2, r0
 80031c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff80 	bl	80030cc <__NVIC_SetPriority>
}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff54 	bl	8003090 <__NVIC_EnableIRQ>
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d008      	beq.n	800321a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e022      	b.n	8003260 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020e 	bic.w	r2, r2, #14
 8003228:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f003 021c 	and.w	r2, r3, #28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d005      	beq.n	8003290 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2204      	movs	r2, #4
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	e029      	b.n	80032e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020e 	bic.w	r2, r2, #14
 800329e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f003 021c 	and.w	r2, r3, #28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f202 	lsl.w	r2, r1, r2
 80032c2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
    }
  }
  return status;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fe:	e17f      	b.n	8003600 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8171 	beq.w	80035fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d005      	beq.n	8003330 <HAL_GPIO_Init+0x40>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d130      	bne.n	8003392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003366:	2201      	movs	r2, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0201 	and.w	r2, r3, #1
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b03      	cmp	r3, #3
 800339c:	d118      	bne.n	80033d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033a4:	2201      	movs	r2, #1
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0201 	and.w	r2, r3, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d017      	beq.n	800340c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d123      	bne.n	8003460 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	08da      	lsrs	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3208      	adds	r2, #8
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80ac 	beq.w	80035fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	4b5f      	ldr	r3, [pc, #380]	; (8003620 <HAL_GPIO_Init+0x330>)
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	4a5e      	ldr	r2, [pc, #376]	; (8003620 <HAL_GPIO_Init+0x330>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6613      	str	r3, [r2, #96]	; 0x60
 80034ae:	4b5c      	ldr	r3, [pc, #368]	; (8003620 <HAL_GPIO_Init+0x330>)
 80034b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034ba:	4a5a      	ldr	r2, [pc, #360]	; (8003624 <HAL_GPIO_Init+0x334>)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	3302      	adds	r3, #2
 80034c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	220f      	movs	r2, #15
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034e4:	d025      	beq.n	8003532 <HAL_GPIO_Init+0x242>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_GPIO_Init+0x338>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01f      	beq.n	800352e <HAL_GPIO_Init+0x23e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_GPIO_Init+0x33c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d019      	beq.n	800352a <HAL_GPIO_Init+0x23a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_GPIO_Init+0x340>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_GPIO_Init+0x236>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4c      	ldr	r2, [pc, #304]	; (8003634 <HAL_GPIO_Init+0x344>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00d      	beq.n	8003522 <HAL_GPIO_Init+0x232>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <HAL_GPIO_Init+0x348>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <HAL_GPIO_Init+0x22e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4a      	ldr	r2, [pc, #296]	; (800363c <HAL_GPIO_Init+0x34c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_GPIO_Init+0x22a>
 8003516:	2306      	movs	r3, #6
 8003518:	e00c      	b.n	8003534 <HAL_GPIO_Init+0x244>
 800351a:	2307      	movs	r3, #7
 800351c:	e00a      	b.n	8003534 <HAL_GPIO_Init+0x244>
 800351e:	2305      	movs	r3, #5
 8003520:	e008      	b.n	8003534 <HAL_GPIO_Init+0x244>
 8003522:	2304      	movs	r3, #4
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x244>
 8003526:	2303      	movs	r3, #3
 8003528:	e004      	b.n	8003534 <HAL_GPIO_Init+0x244>
 800352a:	2302      	movs	r3, #2
 800352c:	e002      	b.n	8003534 <HAL_GPIO_Init+0x244>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_GPIO_Init+0x244>
 8003532:	2300      	movs	r3, #0
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	f002 0203 	and.w	r2, r2, #3
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	4093      	lsls	r3, r2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003544:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_GPIO_Init+0x334>)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	3302      	adds	r3, #2
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_GPIO_Init+0x350>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003576:	4a32      	ldr	r2, [pc, #200]	; (8003640 <HAL_GPIO_Init+0x350>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800357c:	4b30      	ldr	r3, [pc, #192]	; (8003640 <HAL_GPIO_Init+0x350>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a0:	4a27      	ldr	r2, [pc, #156]	; (8003640 <HAL_GPIO_Init+0x350>)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <HAL_GPIO_Init+0x350>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035ca:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_GPIO_Init+0x350>)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_GPIO_Init+0x350>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f4:	4a12      	ldr	r2, [pc, #72]	; (8003640 <HAL_GPIO_Init+0x350>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	f47f ae78 	bne.w	8003300 <HAL_GPIO_Init+0x10>
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	48001000 	.word	0x48001000
 8003638:	48001400 	.word	0x48001400
 800363c:	48001800 	.word	0x48001800
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
 8003650:	4613      	mov	r3, r2
 8003652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003654:	787b      	ldrb	r3, [r7, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003660:	e002      	b.n	8003668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08d      	b.n	80037a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe f9a6 	bl	80019ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e006      	b.n	80036fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d108      	bne.n	8003716 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	e007      	b.n	8003726 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d138      	bne.n	8003832 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e032      	b.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2224      	movs	r2, #36	; 0x24
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	d139      	bne.n	80038ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003860:	2302      	movs	r3, #2
 8003862:	e033      	b.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003892:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000

080038f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003902:	d130      	bne.n	8003966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d038      	beq.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800391a:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2232      	movs	r2, #50	; 0x32
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	3301      	adds	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003938:	e002      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b01      	subs	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d102      	bne.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f2      	bne.n	800393a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d110      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e00f      	b.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d007      	beq.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800397c:	4a05      	ldr	r2, [pc, #20]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40007000 	.word	0x40007000
 8003998:	20000000 	.word	0x20000000
 800399c:	431bde83 	.word	0x431bde83

080039a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e3ca      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b2:	4b97      	ldr	r3, [pc, #604]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039bc:	4b94      	ldr	r3, [pc, #592]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80e4 	beq.w	8003b9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_RCC_OscConfig+0x4a>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	f040 808b 	bne.w	8003af8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 8087 	bne.w	8003af8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e3a2      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	4b82      	ldr	r3, [pc, #520]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCC_OscConfig+0x7c>
 8003a12:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_OscConfig+0x88>
 8003a1c:	4b7c      	ldr	r3, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d223      	bcs.n	8003a74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd87 	bl	8004544 <RCC_SetFlashLatencyFromMSIRange>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e383      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a40:	4b73      	ldr	r3, [pc, #460]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a72      	ldr	r2, [pc, #456]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b70      	ldr	r3, [pc, #448]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	496d      	ldr	r1, [pc, #436]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	4968      	ldr	r1, [pc, #416]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e025      	b.n	8003ac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4960      	ldr	r1, [pc, #384]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a92:	4b5f      	ldr	r3, [pc, #380]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	495b      	ldr	r1, [pc, #364]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd47 	bl	8004544 <RCC_SetFlashLatencyFromMSIRange>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e343      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac0:	f000 fc4a 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b52      	ldr	r3, [pc, #328]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	4950      	ldr	r1, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_RCC_OscConfig+0x278>)
 8003ade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	; (8003c1c <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe f8f3 	bl	8001cd0 <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d052      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	e327      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d032      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b00:	4b43      	ldr	r3, [pc, #268]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe faba 	bl	8002084 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b14:	f7fe fab6 	bl	8002084 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e310      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b26:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a36      	ldr	r2, [pc, #216]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4931      	ldr	r1, [pc, #196]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	492c      	ldr	r1, [pc, #176]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
 8003b64:	e01a      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fa87 	bl	8002084 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fa83 	bl	8002084 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2dd      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x1da>
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d074      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x21a>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d064      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2f0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d160      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e2ba      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x24a>
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e026      	b.n	8003c38 <HAL_RCC_OscConfig+0x298>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCC_OscConfig+0x280>
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a02      	ldr	r2, [pc, #8]	; (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x298>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	0800f0b4 	.word	0x0800f0b4
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	20000004 	.word	0x20000004
 8003c20:	4ba0      	ldr	r3, [pc, #640]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a9f      	ldr	r2, [pc, #636]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b9d      	ldr	r3, [pc, #628]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9c      	ldr	r2, [pc, #624]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fa20 	bl	8002084 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fa1c 	bl	8002084 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e276      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	4b92      	ldr	r3, [pc, #584]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x2a8>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe fa0c 	bl	8002084 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fa08 	bl	8002084 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e262      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c82:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2d0>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d060      	beq.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x310>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d119      	bne.n	8003cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d116      	bne.n	8003cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x328>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e23f      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	4973      	ldr	r1, [pc, #460]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	e040      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d023      	beq.n	8003d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce6:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fe f9c7 	bl	8002084 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fe f9c3 	bl	8002084 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e21d      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	495f      	ldr	r1, [pc, #380]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
 8003d2c:	e018      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5c      	ldr	r2, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe f9a3 	bl	8002084 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe f99f 	bl	8002084 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1f9      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d74:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fe f97e 	bl	8002084 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fe f97a 	bl	8002084 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1d4      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <HAL_RCC_OscConfig+0x3ec>
 8003dac:	e01b      	b.n	8003de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f961 	bl	8002084 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fe f95d 	bl	8002084 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1b7      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd8:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ef      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a6 	beq.w	8003f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df4:	2300      	movs	r3, #0
 8003df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e20:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d118      	bne.n	8003e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e38:	f7fe f924 	bl	8002084 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fe f920 	bl	8002084 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e17a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4d8>
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e76:	e029      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d115      	bne.n	8003eac <HAL_RCC_OscConfig+0x50c>
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea0:	e014      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	4b9c      	ldr	r3, [pc, #624]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	4a9b      	ldr	r2, [pc, #620]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ebc:	4b98      	ldr	r3, [pc, #608]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	4a97      	ldr	r2, [pc, #604]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d016      	beq.n	8003f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fe f8d6 	bl	8002084 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fe f8d2 	bl	8002084 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e12a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ed      	beq.n	8003edc <HAL_RCC_OscConfig+0x53c>
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fe f8bf 	bl	8002084 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe f8bb 	bl	8002084 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e113      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f20:	4b7f      	ldr	r3, [pc, #508]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ed      	bne.n	8003f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f34:	4b7a      	ldr	r3, [pc, #488]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f38:	4a79      	ldr	r2, [pc, #484]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80fe 	beq.w	8004146 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	f040 80d0 	bne.w	80040f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f54:	4b72      	ldr	r3, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d130      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	3b01      	subs	r3, #1
 8003f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d127      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11f      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f94:	2a07      	cmp	r2, #7
 8003f96:	bf14      	ite	ne
 8003f98:	2201      	movne	r2, #1
 8003f9a:	2200      	moveq	r2, #0
 8003f9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d06e      	beq.n	80040a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d069      	beq.n	80040a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fd0:	4b53      	ldr	r3, [pc, #332]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fdc:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0ad      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fec:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ff8:	f7fe f844 	bl	8002084 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe f840 	bl	8002084 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e09a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004012:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800401e:	4b40      	ldr	r3, [pc, #256]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x784>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800402e:	3a01      	subs	r2, #1
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004038:	0212      	lsls	r2, r2, #8
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004040:	0852      	lsrs	r2, r2, #1
 8004042:	3a01      	subs	r2, #1
 8004044:	0552      	lsls	r2, r2, #21
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800404c:	0852      	lsrs	r2, r2, #1
 800404e:	3a01      	subs	r2, #1
 8004050:	0652      	lsls	r2, r2, #25
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004058:	0912      	lsrs	r2, r2, #4
 800405a:	0452      	lsls	r2, r2, #17
 800405c:	430a      	orrs	r2, r1
 800405e:	4930      	ldr	r1, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004060:	4313      	orrs	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004064:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407c:	f7fe f802 	bl	8002084 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd fffe 	bl	8002084 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e058      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a2:	e050      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e04f      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d148      	bne.n	8004146 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040cc:	f7fd ffda 	bl	8002084 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd ffd6 	bl	8002084 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e030      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x734>
 80040f2:	e028      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d023      	beq.n	8004142 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_RCC_OscConfig+0x780>)
 8004100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fd ffbd 	bl	8002084 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	e00c      	b.n	8004128 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7fd ffb9 	bl	8002084 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d905      	bls.n	8004128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e013      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
 8004120:	40021000 	.word	0x40021000
 8004124:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_OscConfig+0x7b0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ec      	bne.n	800410e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_OscConfig+0x7b0>)
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4905      	ldr	r1, [pc, #20]	; (8004150 <HAL_RCC_OscConfig+0x7b0>)
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_OscConfig+0x7b4>)
 800413c:	4013      	ands	r3, r2
 800413e:	60cb      	str	r3, [r1, #12]
 8004140:	e001      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	feeefffc 	.word	0xfeeefffc

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0e7      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b75      	ldr	r3, [pc, #468]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b72      	ldr	r3, [pc, #456]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4970      	ldr	r1, [pc, #448]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b6e      	ldr	r3, [pc, #440]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cf      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b66      	ldr	r3, [pc, #408]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4960      	ldr	r1, [pc, #384]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d04c      	beq.n	8004270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	4b5a      	ldr	r3, [pc, #360]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0a6      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b54      	ldr	r3, [pc, #336]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d115      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e09a      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420e:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421e:	4b4a      	ldr	r3, [pc, #296]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e086      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4943      	ldr	r1, [pc, #268]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fd ff20 	bl	8002084 <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fd ff1c 	bl	8002084 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e06e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b3a      	ldr	r3, [pc, #232]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004288:	429a      	cmp	r2, r3
 800428a:	d208      	bcs.n	800429e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	492b      	ldr	r1, [pc, #172]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800429e:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d210      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	4923      	ldr	r1, [pc, #140]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4918      	ldr	r1, [pc, #96]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4910      	ldr	r1, [pc, #64]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800430c:	f000 f824 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	490b      	ldr	r1, [pc, #44]	; (800434c <HAL_RCC_ClockConfig+0x1f4>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800432a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800432c:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1fc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fccd 	bl	8001cd0 <HAL_InitTick>
 8004336:	4603      	mov	r3, r0
 8004338:	72fb      	strb	r3, [r7, #11]

  return status;
 800433a:	7afb      	ldrb	r3, [r7, #11]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000
 8004348:	40021000 	.word	0x40021000
 800434c:	0800f0b4 	.word	0x0800f0b4
 8004350:	20000000 	.word	0x20000000
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b3e      	ldr	r3, [pc, #248]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d121      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d11e      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d102      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e004      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043dc:	4b23      	ldr	r3, [pc, #140]	; (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 80043de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d134      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0xa6>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d003      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0xac>
 80043fc:	e005      	b.n	800440a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 8004400:	617b      	str	r3, [r7, #20]
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 8004406:	617b      	str	r3, [r7, #20]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	617b      	str	r3, [r7, #20]
      break;
 800440e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004410:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	3301      	adds	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	fb03 f202 	mul.w	r2, r3, r2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0e5b      	lsrs	r3, r3, #25
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	3301      	adds	r3, #1
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004450:	69bb      	ldr	r3, [r7, #24]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	0800f0cc 	.word	0x0800f0cc
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4904      	ldr	r1, [pc, #16]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	0800f0c4 	.word	0x0800f0c4

080044b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044b8:	f7ff ffda 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0adb      	lsrs	r3, r3, #11
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800f0c4 	.word	0x0800f0c4

080044e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	220f      	movs	r2, #15
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0203 	and.w	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004522:	4b07      	ldr	r3, [pc, #28]	; (8004540 <HAL_RCC_GetClockConfig+0x60>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0207 	and.w	r2, r3, #7
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	40022000 	.word	0x40022000

08004544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004550:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800455c:	f7ff f9bc 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 8004560:	6178      	str	r0, [r7, #20]
 8004562:	e014      	b.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456e:	6593      	str	r3, [r2, #88]	; 0x58
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800457c:	f7ff f9ac 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 8004580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d10b      	bne.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d919      	bls.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2ba0      	cmp	r3, #160	; 0xa0
 80045a0:	d902      	bls.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a2:	2302      	movs	r3, #2
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	e013      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a8:	2301      	movs	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e010      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b80      	cmp	r3, #128	; 0x80
 80045b2:	d902      	bls.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045b4:	2303      	movs	r3, #3
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e00a      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d102      	bne.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c0:	2302      	movs	r3, #2
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e004      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b70      	cmp	r3, #112	; 0x70
 80045ca:	d101      	bne.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045cc:	2301      	movs	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 0207 	bic.w	r2, r3, #7
 80045d8:	4909      	ldr	r1, [pc, #36]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d001      	beq.n	80045f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000
 8004600:	40022000 	.word	0x40022000

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004610:	2300      	movs	r3, #0
 8004612:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461c:	2b00      	cmp	r3, #0
 800461e:	d041      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004624:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004628:	d02a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800462a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800462e:	d824      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004630:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004634:	d008      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800463a:	d81e      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004644:	d010      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004646:	e018      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004648:	4b86      	ldr	r3, [pc, #536]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a85      	ldr	r2, [pc, #532]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004652:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004654:	e015      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fabb 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004666:	e00c      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3320      	adds	r3, #32
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fba6 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	74fb      	strb	r3, [r7, #19]
      break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004688:	4b76      	ldr	r3, [pc, #472]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004696:	4973      	ldr	r1, [pc, #460]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d041      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046b8:	d02a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046be:	d824      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c4:	d008      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ca:	d81e      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d4:	d010      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046d6:	e018      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046d8:	4b62      	ldr	r3, [pc, #392]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a61      	ldr	r2, [pc, #388]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e4:	e015      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fa73 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046f6:	e00c      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3320      	adds	r3, #32
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fb5e 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	74fb      	strb	r3, [r7, #19]
      break;
 800470e:	e000      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004718:	4b52      	ldr	r3, [pc, #328]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004726:	494f      	ldr	r1, [pc, #316]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800472e:	e001      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a0 	beq.w	8004882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004756:	2300      	movs	r3, #0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	4a40      	ldr	r2, [pc, #256]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	6593      	str	r3, [r2, #88]	; 0x58
 8004768:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004774:	2301      	movs	r3, #1
 8004776:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004778:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3a      	ldr	r2, [pc, #232]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004784:	f7fd fc7e 	bl	8002084 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800478a:	e009      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fd fc7a 	bl	8002084 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	74fb      	strb	r3, [r7, #19]
        break;
 800479e:	e005      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ef      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d15c      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b2:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d019      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f2:	4a1c      	ldr	r2, [pc, #112]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd fc39 	bl	8002084 <HAL_GetTick>
 8004812:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004814:	e00b      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fd fc35 	bl	8002084 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d902      	bls.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	74fb      	strb	r3, [r7, #19]
            break;
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ec      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10c      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004852:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800485a:	e009      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
 8004860:	e006      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004870:	7c7b      	ldrb	r3, [r7, #17]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b9e      	ldr	r3, [pc, #632]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	4a9d      	ldr	r2, [pc, #628]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800488e:	4b98      	ldr	r3, [pc, #608]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f023 0203 	bic.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	4994      	ldr	r1, [pc, #592]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b0:	4b8f      	ldr	r3, [pc, #572]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 020c 	bic.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	498c      	ldr	r1, [pc, #560]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d2:	4b87      	ldr	r3, [pc, #540]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	4983      	ldr	r1, [pc, #524]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f4:	4b7e      	ldr	r3, [pc, #504]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	497b      	ldr	r1, [pc, #492]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004916:	4b76      	ldr	r3, [pc, #472]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	4972      	ldr	r1, [pc, #456]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004938:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	496a      	ldr	r1, [pc, #424]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4b65      	ldr	r3, [pc, #404]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	4961      	ldr	r1, [pc, #388]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800497c:	4b5c      	ldr	r3, [pc, #368]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498a:	4959      	ldr	r1, [pc, #356]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800499e:	4b54      	ldr	r3, [pc, #336]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ac:	4950      	ldr	r1, [pc, #320]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c0:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	4948      	ldr	r1, [pc, #288]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049e2:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	493f      	ldr	r1, [pc, #252]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d028      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a04:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a12:	4937      	ldr	r1, [pc, #220]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	e011      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f8c8 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d028      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a62:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	491f      	ldr	r1, [pc, #124]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8c:	60d3      	str	r3, [r2, #12]
 8004a8e:	e011      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f899 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02b      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ace:	4908      	ldr	r1, [pc, #32]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ade:	d109      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a02      	ldr	r2, [pc, #8]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aea:	60d3      	str	r3, [r2, #12]
 8004aec:	e014      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2101      	movs	r1, #1
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f867 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02f      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b24:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b32:	4928      	ldr	r1, [pc, #160]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	2102      	movs	r1, #2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f844 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d014      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	74bb      	strb	r3, [r7, #18]
 8004b5e:	e011      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 f925 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9e:	490d      	ldr	r1, [pc, #52]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bca:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004be6:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bf2:	4b72      	ldr	r3, [pc, #456]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0203 	and.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d10d      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
       ||
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c0a:	4b6c      	ldr	r3, [pc, #432]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
       ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d047      	beq.n	8004cae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	e044      	b.n	8004cae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d018      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0x86>
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d825      	bhi.n	8004c7c <RCCEx_PLLSAI1_Config+0xa4>
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <RCCEx_PLLSAI1_Config+0x62>
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d009      	beq.n	8004c4c <RCCEx_PLLSAI1_Config+0x74>
 8004c38:	e020      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c3a:	4b60      	ldr	r3, [pc, #384]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d11d      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4a:	e01a      	b.n	8004c82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c4c:	4b5b      	ldr	r3, [pc, #364]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5c:	e013      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c5e:	4b57      	ldr	r3, [pc, #348]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c6a:	4b54      	ldr	r3, [pc, #336]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c7a:	e006      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e004      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10d      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c92:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	4944      	ldr	r1, [pc, #272]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d17d      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cb4:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a40      	ldr	r2, [pc, #256]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fd f9e0 	bl	8002084 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc6:	e009      	b.n	8004cdc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cc8:	f7fd f9dc 	bl	8002084 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cda:	e005      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cdc:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d160      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d111      	bne.n	8004d18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	0912      	lsrs	r2, r2, #4
 8004d0c:	0452      	lsls	r2, r2, #17
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	492a      	ldr	r1, [pc, #168]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
 8004d16:	e027      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d112      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1e:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6892      	ldr	r2, [r2, #8]
 8004d2e:	0211      	lsls	r1, r2, #8
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6912      	ldr	r2, [r2, #16]
 8004d34:	0852      	lsrs	r2, r2, #1
 8004d36:	3a01      	subs	r2, #1
 8004d38:	0552      	lsls	r2, r2, #21
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	491f      	ldr	r1, [pc, #124]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	610b      	str	r3, [r1, #16]
 8004d42:	e011      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d44:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
 8004d54:	0211      	lsls	r1, r2, #8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6952      	ldr	r2, [r2, #20]
 8004d5a:	0852      	lsrs	r2, r2, #1
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	0652      	lsls	r2, r2, #25
 8004d60:	430a      	orrs	r2, r1
 8004d62:	4916      	ldr	r1, [pc, #88]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d68:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fd f986 	bl	8002084 <HAL_GetTick>
 8004d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d7a:	e009      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d7c:	f7fd f982 	bl	8002084 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d902      	bls.n	8004d90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d8e:	e005      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ef      	beq.n	8004d7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	4904      	ldr	r1, [pc, #16]	; (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000

08004dc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dce:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dda:	4b67      	ldr	r3, [pc, #412]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0203 	and.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10d      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
       ||
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004df2:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
       ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d047      	beq.n	8004e96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e044      	b.n	8004e96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d018      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0x86>
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d825      	bhi.n	8004e64 <RCCEx_PLLSAI2_Config+0xa4>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d002      	beq.n	8004e22 <RCCEx_PLLSAI2_Config+0x62>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d009      	beq.n	8004e34 <RCCEx_PLLSAI2_Config+0x74>
 8004e20:	e020      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e22:	4b55      	ldr	r3, [pc, #340]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11d      	bne.n	8004e6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e32:	e01a      	b.n	8004e6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e013      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e46:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e52:	4b49      	ldr	r3, [pc, #292]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e62:	e006      	b.n	8004e72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e004      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6819      	ldr	r1, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	4939      	ldr	r1, [pc, #228]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d167      	bne.n	8004f6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fd f8ec 	bl	8002084 <HAL_GetTick>
 8004eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eae:	e009      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eb0:	f7fd f8e8 	bl	8002084 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec2:	e005      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ef      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d14a      	bne.n	8004f6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004edc:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	0211      	lsls	r1, r2, #8
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68d2      	ldr	r2, [r2, #12]
 8004ef2:	0912      	lsrs	r2, r2, #4
 8004ef4:	0452      	lsls	r2, r2, #17
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	491f      	ldr	r1, [pc, #124]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	614b      	str	r3, [r1, #20]
 8004efe:	e011      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6892      	ldr	r2, [r2, #8]
 8004f10:	0211      	lsls	r1, r2, #8
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6912      	ldr	r2, [r2, #16]
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0652      	lsls	r2, r2, #25
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	4916      	ldr	r1, [pc, #88]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd f8a8 	bl	8002084 <HAL_GetTick>
 8004f34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f36:	e009      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f38:	f7fd f8a4 	bl	8002084 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	73fb      	strb	r3, [r7, #15]
          break;
 8004f4a:	e005      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ef      	beq.n	8004f38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4904      	ldr	r1, [pc, #16]	; (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e049      	b.n	8005022 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc fd80 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 fd16 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d001      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e04f      	b.n	80050e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a23      	ldr	r2, [pc, #140]	; (80050f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01d      	beq.n	80050a2 <HAL_TIM_Base_Start_IT+0x76>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506e:	d018      	beq.n	80050a2 <HAL_TIM_Base_Start_IT+0x76>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d013      	beq.n	80050a2 <HAL_TIM_Base_Start_IT+0x76>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_TIM_Base_Start_IT+0x76>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <HAL_TIM_Base_Start_IT+0xd0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d009      	beq.n	80050a2 <HAL_TIM_Base_Start_IT+0x76>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <HAL_TIM_Base_Start_IT+0xd4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d004      	beq.n	80050a2 <HAL_TIM_Base_Start_IT+0x76>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a19      	ldr	r2, [pc, #100]	; (8005104 <HAL_TIM_Base_Start_IT+0xd8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d115      	bne.n	80050ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <HAL_TIM_Base_Start_IT+0xdc>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d015      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0xb4>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ba:	d011      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	e008      	b.n	80050e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e000      	b.n	80050e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	00010007 	.word	0x00010007

0800510c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e049      	b.n	80051b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f841 	bl	80051ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 fc4e 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x24>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e03c      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d109      	bne.n	800520e <HAL_TIM_PWM_Start+0x3e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e02f      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x58>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e022      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d109      	bne.n	8005242 <HAL_TIM_PWM_Start+0x72>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e015      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b10      	cmp	r3, #16
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x8c>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e008      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e09c      	b.n	80053b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0xb6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005284:	e023      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xc6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	e01b      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0xd6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a4:	e013      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xe6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b4:	e00b      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_PWM_Start+0xf6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c4:	e003      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 ff92 	bl	8006200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a35      	ldr	r2, [pc, #212]	; (80053b8 <HAL_TIM_PWM_Start+0x1e8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a34      	ldr	r2, [pc, #208]	; (80053bc <HAL_TIM_PWM_Start+0x1ec>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a32      	ldr	r2, [pc, #200]	; (80053c0 <HAL_TIM_PWM_Start+0x1f0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a31      	ldr	r2, [pc, #196]	; (80053c4 <HAL_TIM_PWM_Start+0x1f4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <HAL_TIM_PWM_Start+0x1f8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_Start+0x142>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_TIM_PWM_Start+0x144>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a22      	ldr	r2, [pc, #136]	; (80053b8 <HAL_TIM_PWM_Start+0x1e8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533a:	d018      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_TIM_PWM_Start+0x1fc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <HAL_TIM_PWM_Start+0x200>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <HAL_TIM_PWM_Start+0x204>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <HAL_TIM_PWM_Start+0x1ec>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <HAL_TIM_PWM_Start+0x1f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d115      	bne.n	800539a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <HAL_TIM_PWM_Start+0x208>)
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d015      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1dc>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005386:	d011      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	e008      	b.n	80053ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e000      	b.n	80053ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	00010007 	.word	0x00010007

080053dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d020      	beq.n	8005440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0202 	mvn.w	r2, #2
 8005410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fac1 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fab3 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fac4 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d020      	beq.n	800548c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0204 	mvn.w	r2, #4
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa9b 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa8d 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa9e 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d020      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0208 	mvn.w	r2, #8
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2204      	movs	r2, #4
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa75 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa67 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fa78 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0210 	mvn.w	r2, #16
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2208      	movs	r2, #8
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa4f 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa41 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fa52 	bl	80059c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0201 	mvn.w	r2, #1
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7fc f9a8 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 ff02 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fefa 	bl	8006384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa11 	bl	80059d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fec2 	bl	800635c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ff      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b14      	cmp	r3, #20
 800560a:	f200 80f0 	bhi.w	80057ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005669 	.word	0x08005669
 8005618:	080057ef 	.word	0x080057ef
 800561c:	080057ef 	.word	0x080057ef
 8005620:	080057ef 	.word	0x080057ef
 8005624:	080056a9 	.word	0x080056a9
 8005628:	080057ef 	.word	0x080057ef
 800562c:	080057ef 	.word	0x080057ef
 8005630:	080057ef 	.word	0x080057ef
 8005634:	080056eb 	.word	0x080056eb
 8005638:	080057ef 	.word	0x080057ef
 800563c:	080057ef 	.word	0x080057ef
 8005640:	080057ef 	.word	0x080057ef
 8005644:	0800572b 	.word	0x0800572b
 8005648:	080057ef 	.word	0x080057ef
 800564c:	080057ef 	.word	0x080057ef
 8005650:	080057ef 	.word	0x080057ef
 8005654:	0800576d 	.word	0x0800576d
 8005658:	080057ef 	.word	0x080057ef
 800565c:	080057ef 	.word	0x080057ef
 8005660:	080057ef 	.word	0x080057ef
 8005664:	080057ad 	.word	0x080057ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa56 	bl	8005b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]
      break;
 80056a6:	e0a5      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fac6 	bl	8005c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
      break;
 80056e8:	e084      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb2f 	bl	8005d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0204 	bic.w	r2, r2, #4
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
      break;
 8005728:	e064      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fb97 	bl	8005e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	021a      	lsls	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	61da      	str	r2, [r3, #28]
      break;
 800576a:	e043      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fbe0 	bl	8005f38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0208 	orr.w	r2, r2, #8
 8005786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057aa:	e023      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fc24 	bl	8006000 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop

08005808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIM_ConfigClockSource+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e0b6      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x18a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005860:	d03e      	beq.n	80058e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	f200 8087 	bhi.w	8005978 <HAL_TIM_ConfigClockSource+0x170>
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586e:	f000 8086 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x176>
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d87f      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 8005878:	2b70      	cmp	r3, #112	; 0x70
 800587a:	d01a      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0xaa>
 800587c:	2b70      	cmp	r3, #112	; 0x70
 800587e:	d87b      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 8005880:	2b60      	cmp	r3, #96	; 0x60
 8005882:	d050      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x11e>
 8005884:	2b60      	cmp	r3, #96	; 0x60
 8005886:	d877      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d03c      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0xfe>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d873      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d058      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x13e>
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d86f      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d064      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15e>
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d86b      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d060      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15e>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d867      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d05c      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15e>
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d05a      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15e>
 80058b0:	e062      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058c2:	f000 fc7d 	bl	80061c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	609a      	str	r2, [r3, #8]
      break;
 80058de:	e04f      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058f0:	f000 fc66 	bl	80061c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005902:	609a      	str	r2, [r3, #8]
      break;
 8005904:	e03c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	461a      	mov	r2, r3
 8005914:	f000 fbda 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2150      	movs	r1, #80	; 0x50
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fc33 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005924:	e02c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	461a      	mov	r2, r3
 8005934:	f000 fbf9 	bl	800612a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2160      	movs	r1, #96	; 0x60
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fc23 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005944:	e01c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fbba 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2140      	movs	r1, #64	; 0x40
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fc13 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005964:	e00c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f000 fc0a 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005976:	e003      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e000      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800597e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a40      	ldr	r2, [pc, #256]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d00f      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3d      	ldr	r2, [pc, #244]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3c      	ldr	r2, [pc, #240]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3b      	ldr	r2, [pc, #236]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a3a      	ldr	r2, [pc, #232]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <TIM_Base_SetConfig+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <TIM_Base_SetConfig+0x130>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <TIM_Base_SetConfig+0x128>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a0f      	ldr	r2, [pc, #60]	; (8005b1c <TIM_Base_SetConfig+0x130>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f023 0201 	bic.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 0302 	bic.w	r3, r3, #2
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <TIM_OC1_SetConfig+0x10c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_OC1_SetConfig+0x80>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <TIM_OC1_SetConfig+0x110>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_OC1_SetConfig+0x80>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <TIM_OC1_SetConfig+0x114>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_OC1_SetConfig+0x80>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <TIM_OC1_SetConfig+0x118>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC1_SetConfig+0x80>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <TIM_OC1_SetConfig+0x11c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10c      	bne.n	8005bba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0308 	bic.w	r3, r3, #8
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 0304 	bic.w	r3, r3, #4
 8005bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <TIM_OC1_SetConfig+0x10c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_OC1_SetConfig+0xc2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <TIM_OC1_SetConfig+0x110>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_OC1_SetConfig+0xc2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a19      	ldr	r2, [pc, #100]	; (8005c34 <TIM_OC1_SetConfig+0x114>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_OC1_SetConfig+0xc2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <TIM_OC1_SetConfig+0x118>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC1_SetConfig+0xc2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <TIM_OC1_SetConfig+0x11c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d111      	bne.n	8005c06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800

08005c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f023 0210 	bic.w	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0320 	bic.w	r3, r3, #32
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <TIM_OC2_SetConfig+0x100>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC2_SetConfig+0x6c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a27      	ldr	r2, [pc, #156]	; (8005d44 <TIM_OC2_SetConfig+0x104>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d10d      	bne.n	8005cc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <TIM_OC2_SetConfig+0x100>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00f      	beq.n	8005cf0 <TIM_OC2_SetConfig+0xb0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <TIM_OC2_SetConfig+0x104>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00b      	beq.n	8005cf0 <TIM_OC2_SetConfig+0xb0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <TIM_OC2_SetConfig+0x108>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <TIM_OC2_SetConfig+0xb0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	; (8005d4c <TIM_OC2_SetConfig+0x10c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_OC2_SetConfig+0xb0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <TIM_OC2_SetConfig+0x110>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d113      	bne.n	8005d18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a27      	ldr	r2, [pc, #156]	; (8005e50 <TIM_OC3_SetConfig+0xfc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC3_SetConfig+0x6a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <TIM_OC3_SetConfig+0x100>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10d      	bne.n	8005dda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <TIM_OC3_SetConfig+0xfc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <TIM_OC3_SetConfig+0xae>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <TIM_OC3_SetConfig+0x100>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_OC3_SetConfig+0xae>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <TIM_OC3_SetConfig+0x104>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_OC3_SetConfig+0xae>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <TIM_OC3_SetConfig+0x108>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_OC3_SetConfig+0xae>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <TIM_OC3_SetConfig+0x10c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d113      	bne.n	8005e2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800

08005e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <TIM_OC4_SetConfig+0xc0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00f      	beq.n	8005ee8 <TIM_OC4_SetConfig+0x84>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <TIM_OC4_SetConfig+0xc4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00b      	beq.n	8005ee8 <TIM_OC4_SetConfig+0x84>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <TIM_OC4_SetConfig+0xc8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d007      	beq.n	8005ee8 <TIM_OC4_SetConfig+0x84>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a15      	ldr	r2, [pc, #84]	; (8005f30 <TIM_OC4_SetConfig+0xcc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC4_SetConfig+0x84>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a14      	ldr	r2, [pc, #80]	; (8005f34 <TIM_OC4_SetConfig+0xd0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d109      	bne.n	8005efc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	019b      	lsls	r3, r3, #6
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800

08005f38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a17      	ldr	r2, [pc, #92]	; (8005fec <TIM_OC5_SetConfig+0xb4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00f      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x7a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a16      	ldr	r2, [pc, #88]	; (8005ff0 <TIM_OC5_SetConfig+0xb8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x7a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <TIM_OC5_SetConfig+0xbc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x7a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <TIM_OC5_SetConfig+0xc0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC5_SetConfig+0x7a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <TIM_OC5_SetConfig+0xc4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d109      	bne.n	8005fc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	621a      	str	r2, [r3, #32]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40013400 	.word	0x40013400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800

08006000 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800602e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	051b      	lsls	r3, r3, #20
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <TIM_OC6_SetConfig+0xb8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00f      	beq.n	800607c <TIM_OC6_SetConfig+0x7c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <TIM_OC6_SetConfig+0xbc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_OC6_SetConfig+0x7c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <TIM_OC6_SetConfig+0xc0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_OC6_SetConfig+0x7c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <TIM_OC6_SetConfig+0xc4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC6_SetConfig+0x7c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <TIM_OC6_SetConfig+0xc8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d109      	bne.n	8006090 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006082:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40013400 	.word	0x40013400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f023 0210 	bic.w	r2, r3, #16
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006166:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f043 0307 	orr.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2201      	movs	r2, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	43db      	mvns	r3, r3
 8006222:	401a      	ands	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e068      	b.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2e      	ldr	r2, [pc, #184]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800629e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01d      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d6:	d018      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1a      	ldr	r2, [pc, #104]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a13      	ldr	r2, [pc, #76]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a14      	ldr	r2, [pc, #80]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d10c      	bne.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4313      	orrs	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	40014000 	.word	0x40014000

0800635c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e040      	b.n	800642c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb fbde 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	; 0x24
 80063c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 feca 	bl	8007178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fc0f 	bl	8006c08 <UART_SetConfig>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e01b      	b.n	800642c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 ff49 	bl	80072bc <UART_CheckIdleState>
 800642a:	4603      	mov	r3, r0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006448:	2b20      	cmp	r3, #32
 800644a:	d178      	bne.n	800653e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Transmit+0x24>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e071      	b.n	8006540 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2221      	movs	r2, #33	; 0x21
 8006468:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646a:	f7fb fe0b 	bl	8002084 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d108      	bne.n	800649c <HAL_UART_Transmit+0x68>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	e003      	b.n	80064a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064a4:	e030      	b.n	8006508 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2200      	movs	r2, #0
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 ffab 	bl	800740c <UART_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e03c      	b.n	8006540 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	881a      	ldrh	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d8:	b292      	uxth	r2, r2
 80064da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	3302      	adds	r3, #2
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e008      	b.n	80064f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	b292      	uxth	r2, r2
 80064ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1c8      	bne.n	80064a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2200      	movs	r2, #0
 800651c:	2140      	movs	r1, #64	; 0x40
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 ff74 	bl	800740c <UART_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d004      	beq.n	8006534 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e005      	b.n	8006540 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655c:	2b20      	cmp	r3, #32
 800655e:	d137      	bne.n	80065d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_UART_Receive_IT+0x24>
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e030      	b.n	80065d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a18      	ldr	r2, [pc, #96]	; (80065dc <HAL_UART_Receive_IT+0x94>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d01f      	beq.n	80065c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	613b      	str	r3, [r7, #16]
   return(result);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	623b      	str	r3, [r7, #32]
 80065ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	69f9      	ldr	r1, [r7, #28]
 80065b2:	6a3a      	ldr	r2, [r7, #32]
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065c0:	88fb      	ldrh	r3, [r7, #6]
 80065c2:	461a      	mov	r2, r3
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 ff88 	bl	80074dc <UART_Start_Receive_IT>
 80065cc:	4603      	mov	r3, r0
 80065ce:	e000      	b.n	80065d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3728      	adds	r7, #40	; 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40008000 	.word	0x40008000

080065e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b0ba      	sub	sp, #232	; 0xe8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006606:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800660a:	f640 030f 	movw	r3, #2063	; 0x80f
 800660e:	4013      	ands	r3, r2
 8006610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006618:	2b00      	cmp	r3, #0
 800661a:	d115      	bne.n	8006648 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00f      	beq.n	8006648 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 82ae 	beq.w	8006b9a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
      }
      return;
 8006646:	e2a8      	b.n	8006b9a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8117 	beq.w	8006880 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800665e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006662:	4b85      	ldr	r3, [pc, #532]	; (8006878 <HAL_UART_IRQHandler+0x298>)
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 810a 	beq.w	8006880 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d011      	beq.n	800669c <HAL_UART_IRQHandler+0xbc>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2201      	movs	r2, #1
 800668a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d011      	beq.n	80066cc <HAL_UART_IRQHandler+0xec>
 80066a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2202      	movs	r2, #2
 80066ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c2:	f043 0204 	orr.w	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d011      	beq.n	80066fc <HAL_UART_IRQHandler+0x11c>
 80066d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2204      	movs	r2, #4
 80066ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f2:	f043 0202 	orr.w	r2, r3, #2
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d017      	beq.n	8006738 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006718:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672e:	f043 0208 	orr.w	r2, r3, #8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006740:	2b00      	cmp	r3, #0
 8006742:	d012      	beq.n	800676a <HAL_UART_IRQHandler+0x18a>
 8006744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00c      	beq.n	800676a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8214 	beq.w	8006b9e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d005      	beq.n	80067c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d04f      	beq.n	8006862 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 ff50 	bl	8007668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d141      	bne.n	800685a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3308      	adds	r3, #8
 80067fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800680e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800681a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d9      	bne.n	80067d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682e:	4a13      	ldr	r2, [pc, #76]	; (800687c <HAL_UART_IRQHandler+0x29c>)
 8006830:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006836:	4618      	mov	r0, r3
 8006838:	f7fc fd18 	bl	800326c <HAL_DMA_Abort_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	e00f      	b.n	8006872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9c2 	bl	8006bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	e00b      	b.n	8006872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9be 	bl	8006bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e007      	b.n	8006872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9ba 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006870:	e195      	b.n	8006b9e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006872:	bf00      	nop
    return;
 8006874:	e193      	b.n	8006b9e <HAL_UART_IRQHandler+0x5be>
 8006876:	bf00      	nop
 8006878:	04000120 	.word	0x04000120
 800687c:	08007731 	.word	0x08007731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 814e 	bne.w	8006b26 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8147 	beq.w	8006b26 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8140 	beq.w	8006b26 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2210      	movs	r2, #16
 80068ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	f040 80b8 	bne.w	8006a2e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8167 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068de:	429a      	cmp	r2, r3
 80068e0:	f080 815f 	bcs.w	8006ba2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 8086 	bne.w	8006a0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800691c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800692a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800692e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1da      	bne.n	8006900 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800695a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800696e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e1      	bne.n	800694a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e3      	bne.n	8006986 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069dc:	f023 0310 	bic.w	r3, r3, #16
 80069e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80069f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e4      	bne.n	80069cc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fc fbf2 	bl	80031f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8e2 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a2c:	e0b9      	b.n	8006ba2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80ab 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80a6 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e4      	bne.n	8006a5a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ab4:	633a      	str	r2, [r7, #48]	; 0x30
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e3      	bne.n	8006a90 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f023 0310 	bic.w	r3, r3, #16
 8006af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e4      	bne.n	8006adc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f866 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b24:	e03f      	b.n	8006ba6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00e      	beq.n	8006b50 <HAL_UART_IRQHandler+0x570>
 8006b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 ffed 	bl	8007b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b4e:	e02d      	b.n	8006bac <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00e      	beq.n	8006b7a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d008      	beq.n	8006b7a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01c      	beq.n	8006baa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
    }
    return;
 8006b78:	e017      	b.n	8006baa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d012      	beq.n	8006bac <HAL_UART_IRQHandler+0x5cc>
 8006b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fde2 	bl	800775c <UART_EndTransmit_IT>
    return;
 8006b98:	e008      	b.n	8006bac <HAL_UART_IRQHandler+0x5cc>
      return;
 8006b9a:	bf00      	nop
 8006b9c:	e006      	b.n	8006bac <HAL_UART_IRQHandler+0x5cc>
    return;
 8006b9e:	bf00      	nop
 8006ba0:	e004      	b.n	8006bac <HAL_UART_IRQHandler+0x5cc>
      return;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <HAL_UART_IRQHandler+0x5cc>
      return;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <HAL_UART_IRQHandler+0x5cc>
    return;
 8006baa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006bac:	37e8      	adds	r7, #232	; 0xe8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c0c:	b08a      	sub	sp, #40	; 0x28
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4ba4      	ldr	r3, [pc, #656]	; (8006ec8 <UART_SetConfig+0x2c0>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a99      	ldr	r2, [pc, #612]	; (8006ecc <UART_SetConfig+0x2c4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	4313      	orrs	r3, r2
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a90      	ldr	r2, [pc, #576]	; (8006ed0 <UART_SetConfig+0x2c8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d126      	bne.n	8006ce0 <UART_SetConfig+0xd8>
 8006c92:	4b90      	ldr	r3, [pc, #576]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c98:	f003 0303 	and.w	r3, r3, #3
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d81b      	bhi.n	8006cd8 <UART_SetConfig+0xd0>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0xa0>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cbe:	e116      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc6:	e112      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e10e      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e10a      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e106      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a7c      	ldr	r2, [pc, #496]	; (8006ed8 <UART_SetConfig+0x2d0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d138      	bne.n	8006d5c <UART_SetConfig+0x154>
 8006cea:	4b7a      	ldr	r3, [pc, #488]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf0:	f003 030c 	and.w	r3, r3, #12
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	d82d      	bhi.n	8006d54 <UART_SetConfig+0x14c>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0xf8>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d55 	.word	0x08006d55
 8006d08:	08006d55 	.word	0x08006d55
 8006d0c:	08006d55 	.word	0x08006d55
 8006d10:	08006d45 	.word	0x08006d45
 8006d14:	08006d55 	.word	0x08006d55
 8006d18:	08006d55 	.word	0x08006d55
 8006d1c:	08006d55 	.word	0x08006d55
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d55 	.word	0x08006d55
 8006d2c:	08006d55 	.word	0x08006d55
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e0d8      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e0d4      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d44:	2304      	movs	r3, #4
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4a:	e0d0      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d52:	e0cc      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d54:	2310      	movs	r3, #16
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5a:	e0c8      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a5e      	ldr	r2, [pc, #376]	; (8006edc <UART_SetConfig+0x2d4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d125      	bne.n	8006db2 <UART_SetConfig+0x1aa>
 8006d66:	4b5b      	ldr	r3, [pc, #364]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d70:	2b30      	cmp	r3, #48	; 0x30
 8006d72:	d016      	beq.n	8006da2 <UART_SetConfig+0x19a>
 8006d74:	2b30      	cmp	r3, #48	; 0x30
 8006d76:	d818      	bhi.n	8006daa <UART_SetConfig+0x1a2>
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d00a      	beq.n	8006d92 <UART_SetConfig+0x18a>
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d814      	bhi.n	8006daa <UART_SetConfig+0x1a2>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <UART_SetConfig+0x182>
 8006d84:	2b10      	cmp	r3, #16
 8006d86:	d008      	beq.n	8006d9a <UART_SetConfig+0x192>
 8006d88:	e00f      	b.n	8006daa <UART_SetConfig+0x1a2>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d90:	e0ad      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d92:	2302      	movs	r3, #2
 8006d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d98:	e0a9      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006d9a:	2304      	movs	r3, #4
 8006d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da0:	e0a5      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006da2:	2308      	movs	r3, #8
 8006da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da8:	e0a1      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006daa:	2310      	movs	r3, #16
 8006dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db0:	e09d      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <UART_SetConfig+0x2d8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d125      	bne.n	8006e08 <UART_SetConfig+0x200>
 8006dbc:	4b45      	ldr	r3, [pc, #276]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006dc8:	d016      	beq.n	8006df8 <UART_SetConfig+0x1f0>
 8006dca:	2bc0      	cmp	r3, #192	; 0xc0
 8006dcc:	d818      	bhi.n	8006e00 <UART_SetConfig+0x1f8>
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d00a      	beq.n	8006de8 <UART_SetConfig+0x1e0>
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d814      	bhi.n	8006e00 <UART_SetConfig+0x1f8>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <UART_SetConfig+0x1d8>
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d008      	beq.n	8006df0 <UART_SetConfig+0x1e8>
 8006dde:	e00f      	b.n	8006e00 <UART_SetConfig+0x1f8>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e082      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006de8:	2302      	movs	r3, #2
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dee:	e07e      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df6:	e07a      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfe:	e076      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e06:	e072      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a35      	ldr	r2, [pc, #212]	; (8006ee4 <UART_SetConfig+0x2dc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d12a      	bne.n	8006e68 <UART_SetConfig+0x260>
 8006e12:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e20:	d01a      	beq.n	8006e58 <UART_SetConfig+0x250>
 8006e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e26:	d81b      	bhi.n	8006e60 <UART_SetConfig+0x258>
 8006e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2c:	d00c      	beq.n	8006e48 <UART_SetConfig+0x240>
 8006e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e32:	d815      	bhi.n	8006e60 <UART_SetConfig+0x258>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <UART_SetConfig+0x238>
 8006e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3c:	d008      	beq.n	8006e50 <UART_SetConfig+0x248>
 8006e3e:	e00f      	b.n	8006e60 <UART_SetConfig+0x258>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e052      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4e:	e04e      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e50:	2304      	movs	r3, #4
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e56:	e04a      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e58:	2308      	movs	r3, #8
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5e:	e046      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e60:	2310      	movs	r3, #16
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e66:	e042      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <UART_SetConfig+0x2c4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d13a      	bne.n	8006ee8 <UART_SetConfig+0x2e0>
 8006e72:	4b18      	ldr	r3, [pc, #96]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e80:	d01a      	beq.n	8006eb8 <UART_SetConfig+0x2b0>
 8006e82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e86:	d81b      	bhi.n	8006ec0 <UART_SetConfig+0x2b8>
 8006e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e8c:	d00c      	beq.n	8006ea8 <UART_SetConfig+0x2a0>
 8006e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e92:	d815      	bhi.n	8006ec0 <UART_SetConfig+0x2b8>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <UART_SetConfig+0x298>
 8006e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9c:	d008      	beq.n	8006eb0 <UART_SetConfig+0x2a8>
 8006e9e:	e00f      	b.n	8006ec0 <UART_SetConfig+0x2b8>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea6:	e022      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eae:	e01e      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb6:	e01a      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e016      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e012      	b.n	8006eee <UART_SetConfig+0x2e6>
 8006ec8:	efff69f3 	.word	0xefff69f3
 8006ecc:	40008000 	.word	0x40008000
 8006ed0:	40013800 	.word	0x40013800
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	40004400 	.word	0x40004400
 8006edc:	40004800 	.word	0x40004800
 8006ee0:	40004c00 	.word	0x40004c00
 8006ee4:	40005000 	.word	0x40005000
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a9f      	ldr	r2, [pc, #636]	; (8007170 <UART_SetConfig+0x568>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d17a      	bne.n	8006fee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d824      	bhi.n	8006f4a <UART_SetConfig+0x342>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x300>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f4b 	.word	0x08006f4b
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f4b 	.word	0x08006f4b
 8006f18:	08006f3b 	.word	0x08006f3b
 8006f1c:	08006f4b 	.word	0x08006f4b
 8006f20:	08006f4b 	.word	0x08006f4b
 8006f24:	08006f4b 	.word	0x08006f4b
 8006f28:	08006f43 	.word	0x08006f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2c:	f7fd faac 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8006f30:	61f8      	str	r0, [r7, #28]
        break;
 8006f32:	e010      	b.n	8006f56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f34:	4b8f      	ldr	r3, [pc, #572]	; (8007174 <UART_SetConfig+0x56c>)
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e00d      	b.n	8006f56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fd fa0d 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61f8      	str	r0, [r7, #28]
        break;
 8006f40:	e009      	b.n	8006f56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f46:	61fb      	str	r3, [r7, #28]
        break;
 8006f48:	e005      	b.n	8006f56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80fb 	beq.w	8007154 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d305      	bcc.n	8006f7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d903      	bls.n	8006f82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f80:	e0e8      	b.n	8007154 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2200      	movs	r2, #0
 8006f86:	461c      	mov	r4, r3
 8006f88:	4615      	mov	r5, r2
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	022b      	lsls	r3, r5, #8
 8006f94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f98:	0222      	lsls	r2, r4, #8
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	6849      	ldr	r1, [r1, #4]
 8006f9e:	0849      	lsrs	r1, r1, #1
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	4681      	mov	r9, r0
 8006fa6:	eb12 0a08 	adds.w	sl, r2, r8
 8006faa:	eb43 0b09 	adc.w	fp, r3, r9
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	603b      	str	r3, [r7, #0]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	4659      	mov	r1, fp
 8006fc0:	f7f9 fe62 	bl	8000c88 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4613      	mov	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd2:	d308      	bcc.n	8006fe6 <UART_SetConfig+0x3de>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fda:	d204      	bcs.n	8006fe6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	60da      	str	r2, [r3, #12]
 8006fe4:	e0b6      	b.n	8007154 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fec:	e0b2      	b.n	8007154 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d15e      	bne.n	80070b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d828      	bhi.n	8007052 <UART_SetConfig+0x44a>
 8007000:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <UART_SetConfig+0x400>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	0800702d 	.word	0x0800702d
 800700c:	08007035 	.word	0x08007035
 8007010:	0800703d 	.word	0x0800703d
 8007014:	08007053 	.word	0x08007053
 8007018:	08007043 	.word	0x08007043
 800701c:	08007053 	.word	0x08007053
 8007020:	08007053 	.word	0x08007053
 8007024:	08007053 	.word	0x08007053
 8007028:	0800704b 	.word	0x0800704b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fd fa2c 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8007030:	61f8      	str	r0, [r7, #28]
        break;
 8007032:	e014      	b.n	800705e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007034:	f7fd fa3e 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 8007038:	61f8      	str	r0, [r7, #28]
        break;
 800703a:	e010      	b.n	800705e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800703c:	4b4d      	ldr	r3, [pc, #308]	; (8007174 <UART_SetConfig+0x56c>)
 800703e:	61fb      	str	r3, [r7, #28]
        break;
 8007040:	e00d      	b.n	800705e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007042:	f7fd f989 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8007046:	61f8      	str	r0, [r7, #28]
        break;
 8007048:	e009      	b.n	800705e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	61fb      	str	r3, [r7, #28]
        break;
 8007050:	e005      	b.n	800705e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800705c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d077      	beq.n	8007154 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	005a      	lsls	r2, r3, #1
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	441a      	add	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d916      	bls.n	80070ae <UART_SetConfig+0x4a6>
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007086:	d212      	bcs.n	80070ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f023 030f 	bic.w	r3, r3, #15
 8007090:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	b29a      	uxth	r2, r3
 800709e:	8afb      	ldrh	r3, [r7, #22]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	8afa      	ldrh	r2, [r7, #22]
 80070aa:	60da      	str	r2, [r3, #12]
 80070ac:	e052      	b.n	8007154 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070b4:	e04e      	b.n	8007154 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d827      	bhi.n	800710e <UART_SetConfig+0x506>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0x4bc>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070f1 	.word	0x080070f1
 80070cc:	080070f9 	.word	0x080070f9
 80070d0:	0800710f 	.word	0x0800710f
 80070d4:	080070ff 	.word	0x080070ff
 80070d8:	0800710f 	.word	0x0800710f
 80070dc:	0800710f 	.word	0x0800710f
 80070e0:	0800710f 	.word	0x0800710f
 80070e4:	08007107 	.word	0x08007107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e8:	f7fd f9ce 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80070ec:	61f8      	str	r0, [r7, #28]
        break;
 80070ee:	e014      	b.n	800711a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070f0:	f7fd f9e0 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 80070f4:	61f8      	str	r0, [r7, #28]
        break;
 80070f6:	e010      	b.n	800711a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <UART_SetConfig+0x56c>)
 80070fa:	61fb      	str	r3, [r7, #28]
        break;
 80070fc:	e00d      	b.n	800711a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fe:	f7fd f92b 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8007102:	61f8      	str	r0, [r7, #28]
        break;
 8007104:	e009      	b.n	800711a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800710a:	61fb      	str	r3, [r7, #28]
        break;
 800710c:	e005      	b.n	800711a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007118:	bf00      	nop
    }

    if (pclk != 0U)
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d019      	beq.n	8007154 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	085a      	lsrs	r2, r3, #1
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	441a      	add	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007132:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	d909      	bls.n	800714e <UART_SetConfig+0x546>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007140:	d205      	bcs.n	800714e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60da      	str	r2, [r3, #12]
 800714c:	e002      	b.n	8007154 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007160:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007164:	4618      	mov	r0, r3
 8007166:	3728      	adds	r7, #40	; 0x28
 8007168:	46bd      	mov	sp, r7
 800716a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800716e:	bf00      	nop
 8007170:	40008000 	.word	0x40008000
 8007174:	00f42400 	.word	0x00f42400

08007178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01a      	beq.n	800728e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007276:	d10a      	bne.n	800728e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  }
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b098      	sub	sp, #96	; 0x60
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072cc:	f7fa feda 	bl	8002084 <HAL_GetTick>
 80072d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d12e      	bne.n	800733e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e8:	2200      	movs	r2, #0
 80072ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f88c 	bl	800740c <UART_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d021      	beq.n	800733e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800730e:	653b      	str	r3, [r7, #80]	; 0x50
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007318:	647b      	str	r3, [r7, #68]	; 0x44
 800731a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800731e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e6      	bne.n	80072fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e062      	b.n	8007404 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d149      	bne.n	80073e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800734c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007354:	2200      	movs	r2, #0
 8007356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f856 	bl	800740c <UART_WaitOnFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d03c      	beq.n	80073e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	623b      	str	r3, [r7, #32]
   return(result);
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800737a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
 8007386:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800738a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b8:	61fa      	str	r2, [r7, #28]
 80073ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	69b9      	ldr	r1, [r7, #24]
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	617b      	str	r3, [r7, #20]
   return(result);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e5      	bne.n	8007398 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e011      	b.n	8007404 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3758      	adds	r7, #88	; 0x58
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	4613      	mov	r3, r2
 800741a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741c:	e049      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d045      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007426:	f7fa fe2d 	bl	8002084 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	429a      	cmp	r2, r3
 8007434:	d302      	bcc.n	800743c <UART_WaitOnFlagUntilTimeout+0x30>
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e048      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d031      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b08      	cmp	r3, #8
 800745a:	d110      	bne.n	800747e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2208      	movs	r2, #8
 8007462:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f8ff 	bl	8007668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2208      	movs	r2, #8
 800746e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e029      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748c:	d111      	bne.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f8e5 	bl	8007668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e00f      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4013      	ands	r3, r2
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	429a      	cmp	r2, r3
 80074c0:	bf0c      	ite	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	2300      	movne	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d0a6      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074dc:	b480      	push	{r7}
 80074de:	b097      	sub	sp, #92	; 0x5c
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750e:	d10e      	bne.n	800752e <UART_Start_Receive_IT+0x52>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <UART_Start_Receive_IT+0x48>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800751e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007522:	e02d      	b.n	8007580 <UART_Start_Receive_IT+0xa4>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	22ff      	movs	r2, #255	; 0xff
 8007528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800752c:	e028      	b.n	8007580 <UART_Start_Receive_IT+0xa4>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10d      	bne.n	8007552 <UART_Start_Receive_IT+0x76>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <UART_Start_Receive_IT+0x6c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007546:	e01b      	b.n	8007580 <UART_Start_Receive_IT+0xa4>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	227f      	movs	r2, #127	; 0x7f
 800754c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007550:	e016      	b.n	8007580 <UART_Start_Receive_IT+0xa4>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755a:	d10d      	bne.n	8007578 <UART_Start_Receive_IT+0x9c>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <UART_Start_Receive_IT+0x92>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	227f      	movs	r2, #127	; 0x7f
 8007568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800756c:	e008      	b.n	8007580 <UART_Start_Receive_IT+0xa4>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	223f      	movs	r2, #63	; 0x3f
 8007572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007576:	e003      	b.n	8007580 <UART_Start_Receive_IT+0xa4>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2222      	movs	r2, #34	; 0x22
 800758c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	657b      	str	r3, [r7, #84]	; 0x54
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80075b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075cc:	d107      	bne.n	80075de <UART_Start_Receive_IT+0x102>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a21      	ldr	r2, [pc, #132]	; (8007660 <UART_Start_Receive_IT+0x184>)
 80075da:	669a      	str	r2, [r3, #104]	; 0x68
 80075dc:	e002      	b.n	80075e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4a20      	ldr	r2, [pc, #128]	; (8007664 <UART_Start_Receive_IT+0x188>)
 80075e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d019      	beq.n	8007620 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760a:	637b      	str	r3, [r7, #52]	; 0x34
 800760c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e6      	bne.n	80075ec <UART_Start_Receive_IT+0x110>
 800761e:	e018      	b.n	8007652 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	613b      	str	r3, [r7, #16]
   return(result);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f043 0320 	orr.w	r3, r3, #32
 8007634:	653b      	str	r3, [r7, #80]	; 0x50
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	69f9      	ldr	r1, [r7, #28]
 8007644:	6a3a      	ldr	r2, [r7, #32]
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	61bb      	str	r3, [r7, #24]
   return(result);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	375c      	adds	r7, #92	; 0x5c
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	0800796d 	.word	0x0800796d
 8007664:	080077b1 	.word	0x080077b1

08007668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b095      	sub	sp, #84	; 0x54
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
 8007690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d118      	bne.n	8007710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6979      	ldr	r1, [r7, #20]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007724:	bf00      	nop
 8007726:	3754      	adds	r7, #84	; 0x54
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff fa44 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	60bb      	str	r3, [r7, #8]
   return(result);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007778:	61fb      	str	r3, [r7, #28]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6979      	ldr	r1, [r7, #20]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	613b      	str	r3, [r7, #16]
   return(result);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e6      	bne.n	8007764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff fa06 	bl	8006bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a8:	bf00      	nop
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b09c      	sub	sp, #112	; 0x70
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c8:	2b22      	cmp	r3, #34	; 0x22
 80077ca:	f040 80be 	bne.w	800794a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80077dc:	b2d9      	uxtb	r1, r3
 80077de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e8:	400a      	ands	r2, r1
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 80a3 	bne.w	800795e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782c:	66bb      	str	r3, [r7, #104]	; 0x68
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007836:	65bb      	str	r3, [r7, #88]	; 0x58
 8007838:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800783c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	667b      	str	r3, [r7, #100]	; 0x64
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800786a:	647a      	str	r2, [r7, #68]	; 0x44
 800786c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a34      	ldr	r2, [pc, #208]	; (8007968 <UART_RxISR_8BIT+0x1b8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d01f      	beq.n	80078dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d018      	beq.n	80078dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	623b      	str	r3, [r7, #32]
   return(result);
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078be:	663b      	str	r3, [r7, #96]	; 0x60
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078c8:	633b      	str	r3, [r7, #48]	; 0x30
 80078ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d12e      	bne.n	8007942 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0310 	bic.w	r3, r3, #16
 80078fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007908:	61fb      	str	r3, [r7, #28]
 800790a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	617b      	str	r3, [r7, #20]
   return(result);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e6      	bne.n	80078ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f003 0310 	and.w	r3, r3, #16
 8007926:	2b10      	cmp	r3, #16
 8007928:	d103      	bne.n	8007932 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2210      	movs	r2, #16
 8007930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff f958 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007940:	e00d      	b.n	800795e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff f940 	bl	8006bc8 <HAL_UART_RxCpltCallback>
}
 8007948:	e009      	b.n	800795e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	8b1b      	ldrh	r3, [r3, #24]
 8007950:	b29a      	uxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0208 	orr.w	r2, r2, #8
 800795a:	b292      	uxth	r2, r2
 800795c:	831a      	strh	r2, [r3, #24]
}
 800795e:	bf00      	nop
 8007960:	3770      	adds	r7, #112	; 0x70
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40008000 	.word	0x40008000

0800796c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b09c      	sub	sp, #112	; 0x70
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800797a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007984:	2b22      	cmp	r3, #34	; 0x22
 8007986:	f040 80be 	bne.w	8007b06 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007990:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800799a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800799e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80079a2:	4013      	ands	r3, r2
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	1c9a      	adds	r2, r3, #2
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 80a3 	bne.w	8007b1a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e8:	667b      	str	r3, [r7, #100]	; 0x64
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f2:	657b      	str	r3, [r7, #84]	; 0x54
 80079f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e6      	bne.n	80079d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a26:	643a      	str	r2, [r7, #64]	; 0x40
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e5      	bne.n	8007a06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a34      	ldr	r2, [pc, #208]	; (8007b24 <UART_RxISR_16BIT+0x1b8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d01f      	beq.n	8007a98 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d018      	beq.n	8007a98 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a86:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d12e      	bne.n	8007afe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f023 0310 	bic.w	r3, r3, #16
 8007aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6979      	ldr	r1, [r7, #20]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d103      	bne.n	8007aee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2210      	movs	r2, #16
 8007aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff f87a 	bl	8006bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007afc:	e00d      	b.n	8007b1a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff f862 	bl	8006bc8 <HAL_UART_RxCpltCallback>
}
 8007b04:	e009      	b.n	8007b1a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	8b1b      	ldrh	r3, [r3, #24]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	b292      	uxth	r2, r2
 8007b18:	831a      	strh	r2, [r3, #24]
}
 8007b1a:	bf00      	nop
 8007b1c:	3770      	adds	r7, #112	; 0x70
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40008000 	.word	0x40008000

08007b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <__NVIC_SetPriority>:
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db0a      	blt.n	8007b66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	490c      	ldr	r1, [pc, #48]	; (8007b88 <__NVIC_SetPriority+0x4c>)
 8007b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5a:	0112      	lsls	r2, r2, #4
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	440b      	add	r3, r1
 8007b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b64:	e00a      	b.n	8007b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4908      	ldr	r1, [pc, #32]	; (8007b8c <__NVIC_SetPriority+0x50>)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	3b04      	subs	r3, #4
 8007b74:	0112      	lsls	r2, r2, #4
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	440b      	add	r3, r1
 8007b7a:	761a      	strb	r2, [r3, #24]
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	e000e100 	.word	0xe000e100
 8007b8c:	e000ed00 	.word	0xe000ed00

08007b90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <SysTick_Handler+0x1c>)
 8007b96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b98:	f001 fd28 	bl	80095ec <xTaskGetSchedulerState>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d001      	beq.n	8007ba6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ba2:	f002 fb11 	bl	800a1c8 <xPortSysTickHandler>
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	e000e010 	.word	0xe000e010

08007bb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	f06f 0004 	mvn.w	r0, #4
 8007bba:	f7ff ffbf 	bl	8007b3c <__NVIC_SetPriority>
#endif
}
 8007bbe:	bf00      	nop
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bca:	f3ef 8305 	mrs	r3, IPSR
 8007bce:	603b      	str	r3, [r7, #0]
  return(result);
 8007bd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007bd6:	f06f 0305 	mvn.w	r3, #5
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	e00c      	b.n	8007bf8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <osKernelInitialize+0x44>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d105      	bne.n	8007bf2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <osKernelInitialize+0x44>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	e002      	b.n	8007bf8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bf8:	687b      	ldr	r3, [r7, #4]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200004d0 	.word	0x200004d0

08007c0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c12:	f3ef 8305 	mrs	r3, IPSR
 8007c16:	603b      	str	r3, [r7, #0]
  return(result);
 8007c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c1e:	f06f 0305 	mvn.w	r3, #5
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	e010      	b.n	8007c48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c26:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <osKernelStart+0x48>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d109      	bne.n	8007c42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c2e:	f7ff ffbf 	bl	8007bb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <osKernelStart+0x48>)
 8007c34:	2202      	movs	r2, #2
 8007c36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c38:	f001 f87c 	bl	8008d34 <vTaskStartScheduler>
      stat = osOK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	e002      	b.n	8007c48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c48:	687b      	ldr	r3, [r7, #4]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200004d0 	.word	0x200004d0

08007c58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	; 0x38
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c68:	f3ef 8305 	mrs	r3, IPSR
 8007c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d17e      	bne.n	8007d72 <osThreadNew+0x11a>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d07b      	beq.n	8007d72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c7a:	2380      	movs	r3, #128	; 0x80
 8007c7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c7e:	2318      	movs	r3, #24
 8007c80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007c86:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d045      	beq.n	8007d1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <osThreadNew+0x48>
        name = attr->name;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <osThreadNew+0x6e>
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b38      	cmp	r3, #56	; 0x38
 8007cb8:	d805      	bhi.n	8007cc6 <osThreadNew+0x6e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <osThreadNew+0x72>
        return (NULL);
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e054      	b.n	8007d74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	089b      	lsrs	r3, r3, #2
 8007cd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <osThreadNew+0xa8>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2ba7      	cmp	r3, #167	; 0xa7
 8007ce8:	d90a      	bls.n	8007d00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d006      	beq.n	8007d00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <osThreadNew+0xa8>
        mem = 1;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	e010      	b.n	8007d22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10c      	bne.n	8007d22 <osThreadNew+0xca>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d108      	bne.n	8007d22 <osThreadNew+0xca>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <osThreadNew+0xca>
          mem = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61bb      	str	r3, [r7, #24]
 8007d1c:	e001      	b.n	8007d22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d110      	bne.n	8007d4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d30:	9202      	str	r2, [sp, #8]
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6a3a      	ldr	r2, [r7, #32]
 8007d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fe0c 	bl	800895c <xTaskCreateStatic>
 8007d44:	4603      	mov	r3, r0
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	e013      	b.n	8007d72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d110      	bne.n	8007d72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	f107 0310 	add.w	r3, r7, #16
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fe57 	bl	8008a16 <xTaskCreate>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d001      	beq.n	8007d72 <osThreadNew+0x11a>
            hTask = NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d72:	693b      	ldr	r3, [r7, #16]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3728      	adds	r7, #40	; 0x28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d84:	f3ef 8305 	mrs	r3, IPSR
 8007d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <osDelay+0x1c>
    stat = osErrorISR;
 8007d90:	f06f 0305 	mvn.w	r3, #5
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e007      	b.n	8007da8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 ff92 	bl	8008ccc <vTaskDelay>
    }
  }

  return (stat);
 8007da8:	68fb      	ldr	r3, [r7, #12]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4a07      	ldr	r2, [pc, #28]	; (8007de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4a06      	ldr	r2, [pc, #24]	; (8007de4 <vApplicationGetIdleTaskMemory+0x30>)
 8007dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2280      	movs	r2, #128	; 0x80
 8007dd0:	601a      	str	r2, [r3, #0]
}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	200004d4 	.word	0x200004d4
 8007de4:	2000057c 	.word	0x2000057c

08007de8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4a07      	ldr	r2, [pc, #28]	; (8007e14 <vApplicationGetTimerTaskMemory+0x2c>)
 8007df8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4a06      	ldr	r2, [pc, #24]	; (8007e18 <vApplicationGetTimerTaskMemory+0x30>)
 8007dfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e06:	601a      	str	r2, [r3, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	2000077c 	.word	0x2000077c
 8007e18:	20000824 	.word	0x20000824

08007e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f103 0208 	add.w	r2, r3, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f103 0208 	add.w	r2, r3, #8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f103 0208 	add.w	r2, r3, #8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d103      	bne.n	8007ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	e00c      	b.n	8007ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e002      	b.n	8007eec <vListInsert+0x2e>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d2f6      	bcs.n	8007ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6892      	ldr	r2, [r2, #8]
 8007f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6852      	ldr	r2, [r2, #4]
 8007f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d103      	bne.n	8007f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	1e5a      	subs	r2, r3, #1
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fae:	f002 f879 	bl	800a0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	441a      	add	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	68f9      	ldr	r1, [r7, #12]
 8007fe2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	441a      	add	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	22ff      	movs	r2, #255	; 0xff
 8007ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	22ff      	movs	r2, #255	; 0xff
 8007ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d114      	bne.n	800802e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01a      	beq.n	8008042 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3310      	adds	r3, #16
 8008010:	4618      	mov	r0, r3
 8008012:	f001 f929 	bl	8009268 <xTaskRemoveFromEventList>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d012      	beq.n	8008042 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800801c:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <xQueueGenericReset+0xcc>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	e009      	b.n	8008042 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3310      	adds	r3, #16
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff fef2 	bl	8007e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3324      	adds	r3, #36	; 0x24
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff feed 	bl	8007e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008042:	f002 f85f 	bl	800a104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008046:	2301      	movs	r3, #1
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	e000ed04 	.word	0xe000ed04

08008054 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08e      	sub	sp, #56	; 0x38
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <xQueueGenericCreateStatic+0x52>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <xQueueGenericCreateStatic+0x56>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericCreateStatic+0x58>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	623b      	str	r3, [r7, #32]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <xQueueGenericCreateStatic+0x7e>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <xQueueGenericCreateStatic+0x82>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <xQueueGenericCreateStatic+0x84>
 80080d6:	2300      	movs	r3, #0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	61fb      	str	r3, [r7, #28]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080f2:	2350      	movs	r3, #80	; 0x50
 80080f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b50      	cmp	r3, #80	; 0x50
 80080fa:	d00a      	beq.n	8008112 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	61bb      	str	r3, [r7, #24]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008112:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008126:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f805 	bl	8008144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800813c:	4618      	mov	r0, r3
 800813e:	3730      	adds	r7, #48	; 0x30
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e002      	b.n	8008166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008172:	2101      	movs	r1, #1
 8008174:	69b8      	ldr	r0, [r7, #24]
 8008176:	f7ff ff05 	bl	8007f84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08e      	sub	sp, #56	; 0x38
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xQueueGenericSend+0x32>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <xQueueGenericSend+0x40>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <xQueueGenericSend+0x44>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <xQueueGenericSend+0x46>
 80081d0:	2300      	movs	r3, #0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <xQueueGenericSend+0x60>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d103      	bne.n	80081fa <xQueueGenericSend+0x6e>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <xQueueGenericSend+0x72>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueGenericSend+0x74>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericSend+0x8e>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	623b      	str	r3, [r7, #32]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800821a:	f001 f9e7 	bl	80095ec <xTaskGetSchedulerState>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <xQueueGenericSend+0x9e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <xQueueGenericSend+0xa2>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <xQueueGenericSend+0xa4>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xQueueGenericSend+0xbe>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	61fb      	str	r3, [r7, #28]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800824a:	f001 ff2b 	bl	800a0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008256:	429a      	cmp	r2, r3
 8008258:	d302      	bcc.n	8008260 <xQueueGenericSend+0xd4>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d129      	bne.n	80082b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008266:	f000 fa0b 	bl	8008680 <prvCopyDataToQueue>
 800826a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	3324      	adds	r3, #36	; 0x24
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fff5 	bl	8009268 <xTaskRemoveFromEventList>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d013      	beq.n	80082ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008284:	4b3f      	ldr	r3, [pc, #252]	; (8008384 <xQueueGenericSend+0x1f8>)
 8008286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	e00a      	b.n	80082ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800829c:	4b39      	ldr	r3, [pc, #228]	; (8008384 <xQueueGenericSend+0x1f8>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082ac:	f001 ff2a 	bl	800a104 <vPortExitCritical>
				return pdPASS;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e063      	b.n	800837c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ba:	f001 ff23 	bl	800a104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	e05c      	b.n	800837c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082c8:	f107 0314 	add.w	r3, r7, #20
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f82f 	bl	8009330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082d2:	2301      	movs	r3, #1
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082d6:	f001 ff15 	bl	800a104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082da:	f000 fd9b 	bl	8008e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082de:	f001 fee1 	bl	800a0a4 <vPortEnterCritical>
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e8:	b25b      	sxtb	r3, r3
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ee:	d103      	bne.n	80082f8 <xQueueGenericSend+0x16c>
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082fe:	b25b      	sxtb	r3, r3
 8008300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008304:	d103      	bne.n	800830e <xQueueGenericSend+0x182>
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830e:	f001 fef9 	bl	800a104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008312:	1d3a      	adds	r2, r7, #4
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f001 f81e 	bl	800935c <xTaskCheckForTimeOut>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d124      	bne.n	8008370 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008328:	f000 faa2 	bl	8008870 <prvIsQueueFull>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d018      	beq.n	8008364 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	3310      	adds	r3, #16
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f000 ff44 	bl	80091c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008342:	f000 fa2d 	bl	80087a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008346:	f000 fd73 	bl	8008e30 <xTaskResumeAll>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	f47f af7c 	bne.w	800824a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008352:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <xQueueGenericSend+0x1f8>)
 8008354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	e772      	b.n	800824a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008366:	f000 fa1b 	bl	80087a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800836a:	f000 fd61 	bl	8008e30 <xTaskResumeAll>
 800836e:	e76c      	b.n	800824a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008372:	f000 fa15 	bl	80087a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008376:	f000 fd5b 	bl	8008e30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800837a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800837c:	4618      	mov	r0, r3
 800837e:	3738      	adds	r7, #56	; 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b090      	sub	sp, #64	; 0x40
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <xQueueGenericSendFromISR+0x3c>
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <xQueueGenericSendFromISR+0x40>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <xQueueGenericSendFromISR+0x42>
 80083c8:	2300      	movs	r3, #0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d103      	bne.n	80083f2 <xQueueGenericSendFromISR+0x6a>
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d101      	bne.n	80083f6 <xQueueGenericSendFromISR+0x6e>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <xQueueGenericSendFromISR+0x70>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	623b      	str	r3, [r7, #32]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008412:	f001 ff29 	bl	800a268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008416:	f3ef 8211 	mrs	r2, BASEPRI
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61fa      	str	r2, [r7, #28]
 800842c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800842e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008430:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843a:	429a      	cmp	r2, r3
 800843c:	d302      	bcc.n	8008444 <xQueueGenericSendFromISR+0xbc>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d12f      	bne.n	80084a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800845a:	f000 f911 	bl	8008680 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800845e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d112      	bne.n	800848e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	d016      	beq.n	800849e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	3324      	adds	r3, #36	; 0x24
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fef7 	bl	8009268 <xTaskRemoveFromEventList>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00e      	beq.n	800849e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00b      	beq.n	800849e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e007      	b.n	800849e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800848e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008492:	3301      	adds	r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	b25a      	sxtb	r2, r3
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800849e:	2301      	movs	r3, #1
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084a2:	e001      	b.n	80084a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3740      	adds	r7, #64	; 0x40
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	; 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084cc:	2300      	movs	r3, #0
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <xQueueReceive+0x30>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	623b      	str	r3, [r7, #32]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <xQueueReceive+0x3e>
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <xQueueReceive+0x42>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <xQueueReceive+0x44>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <xQueueReceive+0x5e>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	61fb      	str	r3, [r7, #28]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800851e:	f001 f865 	bl	80095ec <xTaskGetSchedulerState>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <xQueueReceive+0x6e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <xQueueReceive+0x72>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <xQueueReceive+0x74>
 8008532:	2300      	movs	r3, #0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <xQueueReceive+0x8e>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	61bb      	str	r3, [r7, #24]
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800854e:	f001 fda9 	bl	800a0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01f      	beq.n	800859e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008562:	f000 f8f7 	bl	8008754 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	1e5a      	subs	r2, r3, #1
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00f      	beq.n	8008596 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	3310      	adds	r3, #16
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fe74 	bl	8009268 <xTaskRemoveFromEventList>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d007      	beq.n	8008596 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008586:	4b3d      	ldr	r3, [pc, #244]	; (800867c <xQueueReceive+0x1bc>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008596:	f001 fdb5 	bl	800a104 <vPortExitCritical>
				return pdPASS;
 800859a:	2301      	movs	r3, #1
 800859c:	e069      	b.n	8008672 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085a4:	f001 fdae 	bl	800a104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e062      	b.n	8008672 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085b2:	f107 0310 	add.w	r3, r7, #16
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 feba 	bl	8009330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085c0:	f001 fda0 	bl	800a104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085c4:	f000 fc26 	bl	8008e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085c8:	f001 fd6c 	bl	800a0a4 <vPortEnterCritical>
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d103      	bne.n	80085e2 <xQueueReceive+0x122>
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d103      	bne.n	80085f8 <xQueueReceive+0x138>
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f8:	f001 fd84 	bl	800a104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085fc:	1d3a      	adds	r2, r7, #4
 80085fe:	f107 0310 	add.w	r3, r7, #16
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fea9 	bl	800935c <xTaskCheckForTimeOut>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d123      	bne.n	8008658 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008612:	f000 f917 	bl	8008844 <prvIsQueueEmpty>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d017      	beq.n	800864c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	3324      	adds	r3, #36	; 0x24
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fdcf 	bl	80091c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800862a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800862c:	f000 f8b8 	bl	80087a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008630:	f000 fbfe 	bl	8008e30 <xTaskResumeAll>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d189      	bne.n	800854e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800863a:	4b10      	ldr	r3, [pc, #64]	; (800867c <xQueueReceive+0x1bc>)
 800863c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	e780      	b.n	800854e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	f000 f8a7 	bl	80087a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008652:	f000 fbed 	bl	8008e30 <xTaskResumeAll>
 8008656:	e77a      	b.n	800854e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865a:	f000 f8a1 	bl	80087a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800865e:	f000 fbe7 	bl	8008e30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008664:	f000 f8ee 	bl	8008844 <prvIsQueueEmpty>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	f43f af6f 	beq.w	800854e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008672:	4618      	mov	r0, r3
 8008674:	3730      	adds	r7, #48	; 0x30
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	e000ed04 	.word	0xe000ed04

08008680 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10d      	bne.n	80086ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d14d      	bne.n	8008742 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 ffbc 	bl	8009628 <xTaskPriorityDisinherit>
 80086b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	e043      	b.n	8008742 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d119      	bne.n	80086f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6858      	ldr	r0, [r3, #4]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	461a      	mov	r2, r3
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	f003 f879 	bl	800b7c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	441a      	add	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d32b      	bcc.n	8008742 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	e026      	b.n	8008742 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	68d8      	ldr	r0, [r3, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	461a      	mov	r2, r3
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	f003 f85f 	bl	800b7c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	425b      	negs	r3, r3
 800870e:	441a      	add	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d207      	bcs.n	8008730 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	425b      	negs	r3, r3
 800872a:	441a      	add	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d105      	bne.n	8008742 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	3b01      	subs	r3, #1
 8008740:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800874a:	697b      	ldr	r3, [r7, #20]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d018      	beq.n	8008798 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	441a      	add	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	d303      	bcc.n	8008788 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68d9      	ldr	r1, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008790:	461a      	mov	r2, r3
 8008792:	6838      	ldr	r0, [r7, #0]
 8008794:	f003 f815 	bl	800b7c2 <memcpy>
	}
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087a8:	f001 fc7c 	bl	800a0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087b4:	e011      	b.n	80087da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d012      	beq.n	80087e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3324      	adds	r3, #36	; 0x24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fd50 	bl	8009268 <xTaskRemoveFromEventList>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087ce:	f000 fe27 	bl	8009420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dce9      	bgt.n	80087b6 <prvUnlockQueue+0x16>
 80087e2:	e000      	b.n	80087e6 <prvUnlockQueue+0x46>
					break;
 80087e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	22ff      	movs	r2, #255	; 0xff
 80087ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087ee:	f001 fc89 	bl	800a104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087f2:	f001 fc57 	bl	800a0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087fe:	e011      	b.n	8008824 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3310      	adds	r3, #16
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fd2b 	bl	8009268 <xTaskRemoveFromEventList>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008818:	f000 fe02 	bl	8009420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	3b01      	subs	r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dce9      	bgt.n	8008800 <prvUnlockQueue+0x60>
 800882c:	e000      	b.n	8008830 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800882e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	22ff      	movs	r2, #255	; 0xff
 8008834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008838:	f001 fc64 	bl	800a104 <vPortExitCritical>
}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800884c:	f001 fc2a 	bl	800a0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e001      	b.n	8008862 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008862:	f001 fc4f 	bl	800a104 <vPortExitCritical>

	return xReturn;
 8008866:	68fb      	ldr	r3, [r7, #12]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008878:	f001 fc14 	bl	800a0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008884:	429a      	cmp	r2, r3
 8008886:	d102      	bne.n	800888e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e001      	b.n	8008892 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008892:	f001 fc37 	bl	800a104 <vPortExitCritical>

	return xReturn;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	e014      	b.n	80088da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088b0:	4a0f      	ldr	r2, [pc, #60]	; (80088f0 <vQueueAddToRegistry+0x50>)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088bc:	490c      	ldr	r1, [pc, #48]	; (80088f0 <vQueueAddToRegistry+0x50>)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088c6:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <vQueueAddToRegistry+0x50>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4413      	add	r3, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088d2:	e006      	b.n	80088e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b07      	cmp	r3, #7
 80088de:	d9e7      	bls.n	80088b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000c24 	.word	0x20000c24

080088f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008904:	f001 fbce 	bl	800a0a4 <vPortEnterCritical>
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800890e:	b25b      	sxtb	r3, r3
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d103      	bne.n	800891e <vQueueWaitForMessageRestricted+0x2a>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008924:	b25b      	sxtb	r3, r3
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d103      	bne.n	8008934 <vQueueWaitForMessageRestricted+0x40>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008934:	f001 fbe6 	bl	800a104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3324      	adds	r3, #36	; 0x24
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fc61 	bl	8009210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800894e:	6978      	ldr	r0, [r7, #20]
 8008950:	f7ff ff26 	bl	80087a0 <prvUnlockQueue>
	}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08e      	sub	sp, #56	; 0x38
 8008960:	af04      	add	r7, sp, #16
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	61fb      	str	r3, [r7, #28]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089a2:	23a8      	movs	r3, #168	; 0xa8
 80089a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2ba8      	cmp	r3, #168	; 0xa8
 80089aa:	d00a      	beq.n	80089c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	61bb      	str	r3, [r7, #24]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01e      	beq.n	8008a08 <xTaskCreateStatic+0xac>
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01b      	beq.n	8008a08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089e2:	2300      	movs	r3, #0
 80089e4:	9303      	str	r3, [sp, #12]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	9302      	str	r3, [sp, #8]
 80089ea:	f107 0314 	add.w	r3, r7, #20
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f850 	bl	8008aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a02:	f000 f8f3 	bl	8008bec <prvAddNewTaskToReadyList>
 8008a06:	e001      	b.n	8008a0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a0c:	697b      	ldr	r3, [r7, #20]
	}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3728      	adds	r7, #40	; 0x28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b08c      	sub	sp, #48	; 0x30
 8008a1a:	af04      	add	r7, sp, #16
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	603b      	str	r3, [r7, #0]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 fc5c 	bl	800a2e8 <pvPortMalloc>
 8008a30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00e      	beq.n	8008a56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a38:	20a8      	movs	r0, #168	; 0xa8
 8008a3a:	f001 fc55 	bl	800a2e8 <pvPortMalloc>
 8008a3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a4c:	e005      	b.n	8008a5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a4e:	6978      	ldr	r0, [r7, #20]
 8008a50:	f001 fd16 	bl	800a480 <vPortFree>
 8008a54:	e001      	b.n	8008a5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d017      	beq.n	8008a90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	9302      	str	r3, [sp, #8]
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 f80e 	bl	8008aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a84:	69f8      	ldr	r0, [r7, #28]
 8008a86:	f000 f8b1 	bl	8008bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	e002      	b.n	8008a96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a90:	f04f 33ff 	mov.w	r3, #4294967295
 8008a94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a96:	69bb      	ldr	r3, [r7, #24]
	}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3720      	adds	r7, #32
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	21a5      	movs	r1, #165	; 0xa5
 8008aba:	f002 fd9a 	bl	800b5f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	617b      	str	r3, [r7, #20]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01f      	beq.n	8008b3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
 8008b02:	e012      	b.n	8008b2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4413      	add	r3, r2
 8008b0a:	7819      	ldrb	r1, [r3, #0]
 8008b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	3334      	adds	r3, #52	; 0x34
 8008b14:	460a      	mov	r2, r1
 8008b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	3301      	adds	r3, #1
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	2b0f      	cmp	r3, #15
 8008b2e:	d9e9      	bls.n	8008b04 <prvInitialiseNewTask+0x64>
 8008b30:	e000      	b.n	8008b34 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b3c:	e003      	b.n	8008b46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	2b37      	cmp	r3, #55	; 0x37
 8008b4a:	d901      	bls.n	8008b50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b4c:	2337      	movs	r3, #55	; 0x37
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2200      	movs	r2, #0
 8008b60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff f978 	bl	8007e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	3318      	adds	r3, #24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff f973 	bl	8007e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	3354      	adds	r3, #84	; 0x54
 8008ba0:	224c      	movs	r2, #76	; 0x4c
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f002 fd24 	bl	800b5f2 <memset>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <prvInitialiseNewTask+0x140>)
 8008bae:	659a      	str	r2, [r3, #88]	; 0x58
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <prvInitialiseNewTask+0x144>)
 8008bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	4a0b      	ldr	r2, [pc, #44]	; (8008be8 <prvInitialiseNewTask+0x148>)
 8008bba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	69b8      	ldr	r0, [r7, #24]
 8008bc2:	f001 f941 	bl	8009e48 <pxPortInitialiseStack>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd8:	bf00      	nop
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20001e70 	.word	0x20001e70
 8008be4:	20001ed8 	.word	0x20001ed8
 8008be8:	20001f40 	.word	0x20001f40

08008bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bf4:	f001 fa56 	bl	800a0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bf8:	4b2d      	ldr	r3, [pc, #180]	; (8008cb0 <prvAddNewTaskToReadyList+0xc4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	4a2c      	ldr	r2, [pc, #176]	; (8008cb0 <prvAddNewTaskToReadyList+0xc4>)
 8008c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c02:	4b2c      	ldr	r3, [pc, #176]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c0a:	4a2a      	ldr	r2, [pc, #168]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <prvAddNewTaskToReadyList+0xc4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d110      	bne.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c18:	f000 fc26 	bl	8009468 <prvInitialiseTaskLists>
 8008c1c:	e00d      	b.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c1e:	4b26      	ldr	r3, [pc, #152]	; (8008cb8 <prvAddNewTaskToReadyList+0xcc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c26:	4b23      	ldr	r3, [pc, #140]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d802      	bhi.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c34:	4a1f      	ldr	r2, [pc, #124]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c3a:	4b20      	ldr	r3, [pc, #128]	; (8008cbc <prvAddNewTaskToReadyList+0xd0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	4a1e      	ldr	r2, [pc, #120]	; (8008cbc <prvAddNewTaskToReadyList+0xd0>)
 8008c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c44:	4b1d      	ldr	r3, [pc, #116]	; (8008cbc <prvAddNewTaskToReadyList+0xd0>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <prvAddNewTaskToReadyList+0xd4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d903      	bls.n	8008c60 <prvAddNewTaskToReadyList+0x74>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a18      	ldr	r2, [pc, #96]	; (8008cc0 <prvAddNewTaskToReadyList+0xd4>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a15      	ldr	r2, [pc, #84]	; (8008cc4 <prvAddNewTaskToReadyList+0xd8>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7ff f8fd 	bl	8007e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c7c:	f001 fa42 	bl	800a104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <prvAddNewTaskToReadyList+0xcc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c88:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d207      	bcs.n	8008ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvAddNewTaskToReadyList+0xdc>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20001138 	.word	0x20001138
 8008cb4:	20000c64 	.word	0x20000c64
 8008cb8:	20001144 	.word	0x20001144
 8008cbc:	20001154 	.word	0x20001154
 8008cc0:	20001140 	.word	0x20001140
 8008cc4:	20000c68 	.word	0x20000c68
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d017      	beq.n	8008d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cde:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <vTaskDelay+0x60>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <vTaskDelay+0x30>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	60bb      	str	r3, [r7, #8]
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cfc:	f000 f88a 	bl	8008e14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fcfe 	bl	8009704 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d08:	f000 f892 	bl	8008e30 <xTaskResumeAll>
 8008d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d107      	bne.n	8008d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <vTaskDelay+0x64>)
 8008d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d24:	bf00      	nop
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20001160 	.word	0x20001160
 8008d30:	e000ed04 	.word	0xe000ed04

08008d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	; 0x28
 8008d38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d42:	463a      	mov	r2, r7
 8008d44:	1d39      	adds	r1, r7, #4
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f832 	bl	8007db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	9202      	str	r2, [sp, #8]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	460a      	mov	r2, r1
 8008d62:	4924      	ldr	r1, [pc, #144]	; (8008df4 <vTaskStartScheduler+0xc0>)
 8008d64:	4824      	ldr	r0, [pc, #144]	; (8008df8 <vTaskStartScheduler+0xc4>)
 8008d66:	f7ff fdf9 	bl	800895c <xTaskCreateStatic>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4a23      	ldr	r2, [pc, #140]	; (8008dfc <vTaskStartScheduler+0xc8>)
 8008d6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d70:	4b22      	ldr	r3, [pc, #136]	; (8008dfc <vTaskStartScheduler+0xc8>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e001      	b.n	8008d82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d102      	bne.n	8008d8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d88:	f000 fd10 	bl	80097ac <xTimerCreateTimerTask>
 8008d8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d11b      	bne.n	8008dcc <vTaskStartScheduler+0x98>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	613b      	str	r3, [r7, #16]
}
 8008da6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008da8:	4b15      	ldr	r3, [pc, #84]	; (8008e00 <vTaskStartScheduler+0xcc>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3354      	adds	r3, #84	; 0x54
 8008dae:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <vTaskStartScheduler+0xd0>)
 8008db0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <vTaskStartScheduler+0xd4>)
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dba:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <vTaskStartScheduler+0xd8>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dc0:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <vTaskStartScheduler+0xdc>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dc6:	f001 f8cb 	bl	8009f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dca:	e00e      	b.n	8008dea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	d10a      	bne.n	8008dea <vTaskStartScheduler+0xb6>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60fb      	str	r3, [r7, #12]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vTaskStartScheduler+0xb4>
}
 8008dea:	bf00      	nop
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	0800f030 	.word	0x0800f030
 8008df8:	08009439 	.word	0x08009439
 8008dfc:	2000115c 	.word	0x2000115c
 8008e00:	20000c64 	.word	0x20000c64
 8008e04:	20000068 	.word	0x20000068
 8008e08:	20001158 	.word	0x20001158
 8008e0c:	20001144 	.word	0x20001144
 8008e10:	2000113c 	.word	0x2000113c

08008e14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <vTaskSuspendAll+0x18>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	4a03      	ldr	r2, [pc, #12]	; (8008e2c <vTaskSuspendAll+0x18>)
 8008e20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e22:	bf00      	nop
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20001160 	.word	0x20001160

08008e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e3e:	4b42      	ldr	r3, [pc, #264]	; (8008f48 <xTaskResumeAll+0x118>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <xTaskResumeAll+0x2c>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	603b      	str	r3, [r7, #0]
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e5c:	f001 f922 	bl	800a0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e60:	4b39      	ldr	r3, [pc, #228]	; (8008f48 <xTaskResumeAll+0x118>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	4a38      	ldr	r2, [pc, #224]	; (8008f48 <xTaskResumeAll+0x118>)
 8008e68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e6a:	4b37      	ldr	r3, [pc, #220]	; (8008f48 <xTaskResumeAll+0x118>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d162      	bne.n	8008f38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e72:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <xTaskResumeAll+0x11c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d05e      	beq.n	8008f38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e7a:	e02f      	b.n	8008edc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7c:	4b34      	ldr	r3, [pc, #208]	; (8008f50 <xTaskResumeAll+0x120>)
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3318      	adds	r3, #24
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff f851 	bl	8007f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff f84c 	bl	8007f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	4b2d      	ldr	r3, [pc, #180]	; (8008f54 <xTaskResumeAll+0x124>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <xTaskResumeAll+0x7c>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	4a2a      	ldr	r2, [pc, #168]	; (8008f54 <xTaskResumeAll+0x124>)
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a27      	ldr	r2, [pc, #156]	; (8008f58 <xTaskResumeAll+0x128>)
 8008eba:	441a      	add	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fe ffd7 	bl	8007e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	4b23      	ldr	r3, [pc, #140]	; (8008f5c <xTaskResumeAll+0x12c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d302      	bcc.n	8008edc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ed6:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <xTaskResumeAll+0x130>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008edc:	4b1c      	ldr	r3, [pc, #112]	; (8008f50 <xTaskResumeAll+0x120>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1cb      	bne.n	8008e7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008eea:	f000 fb5f 	bl	80095ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008eee:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <xTaskResumeAll+0x134>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008efa:	f000 f847 	bl	8008f8c <xTaskIncrementTick>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f04:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <xTaskResumeAll+0x130>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f1      	bne.n	8008efa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f16:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <xTaskResumeAll+0x134>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f1c:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <xTaskResumeAll+0x130>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d009      	beq.n	8008f38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f24:	2301      	movs	r3, #1
 8008f26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f28:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <xTaskResumeAll+0x138>)
 8008f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f38:	f001 f8e4 	bl	800a104 <vPortExitCritical>

	return xAlreadyYielded;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20001160 	.word	0x20001160
 8008f4c:	20001138 	.word	0x20001138
 8008f50:	200010f8 	.word	0x200010f8
 8008f54:	20001140 	.word	0x20001140
 8008f58:	20000c68 	.word	0x20000c68
 8008f5c:	20000c64 	.word	0x20000c64
 8008f60:	2000114c 	.word	0x2000114c
 8008f64:	20001148 	.word	0x20001148
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <xTaskGetTickCount+0x1c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f78:	687b      	ldr	r3, [r7, #4]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	2000113c 	.word	0x2000113c

08008f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f96:	4b4f      	ldr	r3, [pc, #316]	; (80090d4 <xTaskIncrementTick+0x148>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 808f 	bne.w	80090be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fa0:	4b4d      	ldr	r3, [pc, #308]	; (80090d8 <xTaskIncrementTick+0x14c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fa8:	4a4b      	ldr	r2, [pc, #300]	; (80090d8 <xTaskIncrementTick+0x14c>)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d120      	bne.n	8008ff6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fb4:	4b49      	ldr	r3, [pc, #292]	; (80090dc <xTaskIncrementTick+0x150>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	603b      	str	r3, [r7, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <xTaskIncrementTick+0x46>
 8008fd4:	4b41      	ldr	r3, [pc, #260]	; (80090dc <xTaskIncrementTick+0x150>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	4b41      	ldr	r3, [pc, #260]	; (80090e0 <xTaskIncrementTick+0x154>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a3f      	ldr	r2, [pc, #252]	; (80090dc <xTaskIncrementTick+0x150>)
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	4a3f      	ldr	r2, [pc, #252]	; (80090e0 <xTaskIncrementTick+0x154>)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	4b3e      	ldr	r3, [pc, #248]	; (80090e4 <xTaskIncrementTick+0x158>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3301      	adds	r3, #1
 8008fee:	4a3d      	ldr	r2, [pc, #244]	; (80090e4 <xTaskIncrementTick+0x158>)
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	f000 fadb 	bl	80095ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ff6:	4b3c      	ldr	r3, [pc, #240]	; (80090e8 <xTaskIncrementTick+0x15c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d349      	bcc.n	8009094 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009000:	4b36      	ldr	r3, [pc, #216]	; (80090dc <xTaskIncrementTick+0x150>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800900a:	4b37      	ldr	r3, [pc, #220]	; (80090e8 <xTaskIncrementTick+0x15c>)
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	601a      	str	r2, [r3, #0]
					break;
 8009012:	e03f      	b.n	8009094 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009014:	4b31      	ldr	r3, [pc, #196]	; (80090dc <xTaskIncrementTick+0x150>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d203      	bcs.n	8009034 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800902c:	4a2e      	ldr	r2, [pc, #184]	; (80090e8 <xTaskIncrementTick+0x15c>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009032:	e02f      	b.n	8009094 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	3304      	adds	r3, #4
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe ff79 	bl	8007f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	3318      	adds	r3, #24
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe ff70 	bl	8007f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009054:	4b25      	ldr	r3, [pc, #148]	; (80090ec <xTaskIncrementTick+0x160>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d903      	bls.n	8009064 <xTaskIncrementTick+0xd8>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	4a22      	ldr	r2, [pc, #136]	; (80090ec <xTaskIncrementTick+0x160>)
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <xTaskIncrementTick+0x164>)
 8009072:	441a      	add	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	3304      	adds	r3, #4
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fe fefb 	bl	8007e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009084:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <xTaskIncrementTick+0x168>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	429a      	cmp	r2, r3
 800908c:	d3b8      	bcc.n	8009000 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800908e:	2301      	movs	r3, #1
 8009090:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009092:	e7b5      	b.n	8009000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009094:	4b17      	ldr	r3, [pc, #92]	; (80090f4 <xTaskIncrementTick+0x168>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	4915      	ldr	r1, [pc, #84]	; (80090f0 <xTaskIncrementTick+0x164>)
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d901      	bls.n	80090b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <xTaskIncrementTick+0x16c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	e004      	b.n	80090c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <xTaskIncrementTick+0x170>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <xTaskIncrementTick+0x170>)
 80090c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090c8:	697b      	ldr	r3, [r7, #20]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20001160 	.word	0x20001160
 80090d8:	2000113c 	.word	0x2000113c
 80090dc:	200010f0 	.word	0x200010f0
 80090e0:	200010f4 	.word	0x200010f4
 80090e4:	20001150 	.word	0x20001150
 80090e8:	20001158 	.word	0x20001158
 80090ec:	20001140 	.word	0x20001140
 80090f0:	20000c68 	.word	0x20000c68
 80090f4:	20000c64 	.word	0x20000c64
 80090f8:	2000114c 	.word	0x2000114c
 80090fc:	20001148 	.word	0x20001148

08009100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009106:	4b2a      	ldr	r3, [pc, #168]	; (80091b0 <vTaskSwitchContext+0xb0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800910e:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <vTaskSwitchContext+0xb4>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009114:	e046      	b.n	80091a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009116:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <vTaskSwitchContext+0xb4>)
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911c:	4b26      	ldr	r3, [pc, #152]	; (80091b8 <vTaskSwitchContext+0xb8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	e010      	b.n	8009146 <vTaskSwitchContext+0x46>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <vTaskSwitchContext+0x40>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	607b      	str	r3, [r7, #4]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <vTaskSwitchContext+0x3e>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3b01      	subs	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	491d      	ldr	r1, [pc, #116]	; (80091bc <vTaskSwitchContext+0xbc>)
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0e4      	beq.n	8009124 <vTaskSwitchContext+0x24>
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4a15      	ldr	r2, [pc, #84]	; (80091bc <vTaskSwitchContext+0xbc>)
 8009166:	4413      	add	r3, r2
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	605a      	str	r2, [r3, #4]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3308      	adds	r3, #8
 800917c:	429a      	cmp	r2, r3
 800917e:	d104      	bne.n	800918a <vTaskSwitchContext+0x8a>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	605a      	str	r2, [r3, #4]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	4a0b      	ldr	r2, [pc, #44]	; (80091c0 <vTaskSwitchContext+0xc0>)
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <vTaskSwitchContext+0xb8>)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800919a:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <vTaskSwitchContext+0xc0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3354      	adds	r3, #84	; 0x54
 80091a0:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <vTaskSwitchContext+0xc4>)
 80091a2:	6013      	str	r3, [r2, #0]
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	20001160 	.word	0x20001160
 80091b4:	2000114c 	.word	0x2000114c
 80091b8:	20001140 	.word	0x20001140
 80091bc:	20000c68 	.word	0x20000c68
 80091c0:	20000c64 	.word	0x20000c64
 80091c4:	20000068 	.word	0x20000068

080091c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	60fb      	str	r3, [r7, #12]
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091ee:	4b07      	ldr	r3, [pc, #28]	; (800920c <vTaskPlaceOnEventList+0x44>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3318      	adds	r3, #24
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7fe fe61 	bl	8007ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091fc:	2101      	movs	r1, #1
 80091fe:	6838      	ldr	r0, [r7, #0]
 8009200:	f000 fa80 	bl	8009704 <prvAddCurrentTaskToDelayedList>
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000c64 	.word	0x20000c64

08009210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	617b      	str	r3, [r7, #20]
}
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009238:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <vTaskPlaceOnEventListRestricted+0x54>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3318      	adds	r3, #24
 800923e:	4619      	mov	r1, r3
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f7fe fe18 	bl	8007e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	68b8      	ldr	r0, [r7, #8]
 8009256:	f000 fa55 	bl	8009704 <prvAddCurrentTaskToDelayedList>
	}
 800925a:	bf00      	nop
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000c64 	.word	0x20000c64

08009268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	60fb      	str	r3, [r7, #12]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3318      	adds	r3, #24
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fe49 	bl	8007f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929e:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <xTaskRemoveFromEventList+0xb0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d11d      	bne.n	80092e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fe40 	bl	8007f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	4b19      	ldr	r3, [pc, #100]	; (800931c <xTaskRemoveFromEventList+0xb4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d903      	bls.n	80092c4 <xTaskRemoveFromEventList+0x5c>
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	4a16      	ldr	r2, [pc, #88]	; (800931c <xTaskRemoveFromEventList+0xb4>)
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4a13      	ldr	r2, [pc, #76]	; (8009320 <xTaskRemoveFromEventList+0xb8>)
 80092d2:	441a      	add	r2, r3
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f7fe fdcb 	bl	8007e76 <vListInsertEnd>
 80092e0:	e005      	b.n	80092ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3318      	adds	r3, #24
 80092e6:	4619      	mov	r1, r3
 80092e8:	480e      	ldr	r0, [pc, #56]	; (8009324 <xTaskRemoveFromEventList+0xbc>)
 80092ea:	f7fe fdc4 	bl	8007e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <xTaskRemoveFromEventList+0xc0>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d905      	bls.n	8009308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <xTaskRemoveFromEventList+0xc4>)
 8009302:	2201      	movs	r2, #1
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	e001      	b.n	800930c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800930c:	697b      	ldr	r3, [r7, #20]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20001160 	.word	0x20001160
 800931c:	20001140 	.word	0x20001140
 8009320:	20000c68 	.word	0x20000c68
 8009324:	200010f8 	.word	0x200010f8
 8009328:	20000c64 	.word	0x20000c64
 800932c:	2000114c 	.word	0x2000114c

08009330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <vTaskInternalSetTimeOutState+0x24>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <vTaskInternalSetTimeOutState+0x28>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	605a      	str	r2, [r3, #4]
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20001150 	.word	0x20001150
 8009358:	2000113c 	.word	0x2000113c

0800935c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	613b      	str	r3, [r7, #16]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	60fb      	str	r3, [r7, #12]
}
 800939a:	bf00      	nop
 800939c:	e7fe      	b.n	800939c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800939e:	f000 fe81 	bl	800a0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093a2:	4b1d      	ldr	r3, [pc, #116]	; (8009418 <xTaskCheckForTimeOut+0xbc>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d102      	bne.n	80093c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093bc:	2300      	movs	r3, #0
 80093be:	61fb      	str	r3, [r7, #28]
 80093c0:	e023      	b.n	800940a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	4b15      	ldr	r3, [pc, #84]	; (800941c <xTaskCheckForTimeOut+0xc0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d007      	beq.n	80093de <xTaskCheckForTimeOut+0x82>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d302      	bcc.n	80093de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093d8:	2301      	movs	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	e015      	b.n	800940a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d20b      	bcs.n	8009400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff ff9b 	bl	8009330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093fa:	2300      	movs	r3, #0
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	e004      	b.n	800940a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009406:	2301      	movs	r3, #1
 8009408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800940a:	f000 fe7b 	bl	800a104 <vPortExitCritical>

	return xReturn;
 800940e:	69fb      	ldr	r3, [r7, #28]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3720      	adds	r7, #32
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	2000113c 	.word	0x2000113c
 800941c:	20001150 	.word	0x20001150

08009420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009424:	4b03      	ldr	r3, [pc, #12]	; (8009434 <vTaskMissedYield+0x14>)
 8009426:	2201      	movs	r2, #1
 8009428:	601a      	str	r2, [r3, #0]
}
 800942a:	bf00      	nop
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	2000114c 	.word	0x2000114c

08009438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009440:	f000 f852 	bl	80094e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009444:	4b06      	ldr	r3, [pc, #24]	; (8009460 <prvIdleTask+0x28>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d9f9      	bls.n	8009440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <prvIdleTask+0x2c>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800945c:	e7f0      	b.n	8009440 <prvIdleTask+0x8>
 800945e:	bf00      	nop
 8009460:	20000c68 	.word	0x20000c68
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800946e:	2300      	movs	r3, #0
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	e00c      	b.n	800948e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4a12      	ldr	r2, [pc, #72]	; (80094c8 <prvInitialiseTaskLists+0x60>)
 8009480:	4413      	add	r3, r2
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fcca 	bl	8007e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3301      	adds	r3, #1
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b37      	cmp	r3, #55	; 0x37
 8009492:	d9ef      	bls.n	8009474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009494:	480d      	ldr	r0, [pc, #52]	; (80094cc <prvInitialiseTaskLists+0x64>)
 8009496:	f7fe fcc1 	bl	8007e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800949a:	480d      	ldr	r0, [pc, #52]	; (80094d0 <prvInitialiseTaskLists+0x68>)
 800949c:	f7fe fcbe 	bl	8007e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094a0:	480c      	ldr	r0, [pc, #48]	; (80094d4 <prvInitialiseTaskLists+0x6c>)
 80094a2:	f7fe fcbb 	bl	8007e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094a6:	480c      	ldr	r0, [pc, #48]	; (80094d8 <prvInitialiseTaskLists+0x70>)
 80094a8:	f7fe fcb8 	bl	8007e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094ac:	480b      	ldr	r0, [pc, #44]	; (80094dc <prvInitialiseTaskLists+0x74>)
 80094ae:	f7fe fcb5 	bl	8007e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094b2:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <prvInitialiseTaskLists+0x78>)
 80094b4:	4a05      	ldr	r2, [pc, #20]	; (80094cc <prvInitialiseTaskLists+0x64>)
 80094b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094b8:	4b0a      	ldr	r3, [pc, #40]	; (80094e4 <prvInitialiseTaskLists+0x7c>)
 80094ba:	4a05      	ldr	r2, [pc, #20]	; (80094d0 <prvInitialiseTaskLists+0x68>)
 80094bc:	601a      	str	r2, [r3, #0]
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20000c68 	.word	0x20000c68
 80094cc:	200010c8 	.word	0x200010c8
 80094d0:	200010dc 	.word	0x200010dc
 80094d4:	200010f8 	.word	0x200010f8
 80094d8:	2000110c 	.word	0x2000110c
 80094dc:	20001124 	.word	0x20001124
 80094e0:	200010f0 	.word	0x200010f0
 80094e4:	200010f4 	.word	0x200010f4

080094e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ee:	e019      	b.n	8009524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094f0:	f000 fdd8 	bl	800a0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f4:	4b10      	ldr	r3, [pc, #64]	; (8009538 <prvCheckTasksWaitingTermination+0x50>)
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3304      	adds	r3, #4
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fd15 	bl	8007f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <prvCheckTasksWaitingTermination+0x54>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3b01      	subs	r3, #1
 800950c:	4a0b      	ldr	r2, [pc, #44]	; (800953c <prvCheckTasksWaitingTermination+0x54>)
 800950e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <prvCheckTasksWaitingTermination+0x58>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3b01      	subs	r3, #1
 8009516:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <prvCheckTasksWaitingTermination+0x58>)
 8009518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800951a:	f000 fdf3 	bl	800a104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f810 	bl	8009544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <prvCheckTasksWaitingTermination+0x58>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e1      	bne.n	80094f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000110c 	.word	0x2000110c
 800953c:	20001138 	.word	0x20001138
 8009540:	20001120 	.word	0x20001120

08009544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3354      	adds	r3, #84	; 0x54
 8009550:	4618      	mov	r0, r3
 8009552:	f002 f87d 	bl	800b650 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009564:	4618      	mov	r0, r3
 8009566:	f000 ff8b 	bl	800a480 <vPortFree>
				vPortFree( pxTCB );
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 ff88 	bl	800a480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009570:	e018      	b.n	80095a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009578:	2b01      	cmp	r3, #1
 800957a:	d103      	bne.n	8009584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 ff7f 	bl	800a480 <vPortFree>
	}
 8009582:	e00f      	b.n	80095a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800958a:	2b02      	cmp	r3, #2
 800958c:	d00a      	beq.n	80095a4 <prvDeleteTCB+0x60>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60fb      	str	r3, [r7, #12]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <prvDeleteTCB+0x5e>
	}
 80095a4:	bf00      	nop
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095b2:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <prvResetNextTaskUnblockTime+0x38>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <prvResetNextTaskUnblockTime+0x3c>)
 80095be:	f04f 32ff 	mov.w	r2, #4294967295
 80095c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095c4:	e008      	b.n	80095d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <prvResetNextTaskUnblockTime+0x38>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4a04      	ldr	r2, [pc, #16]	; (80095e8 <prvResetNextTaskUnblockTime+0x3c>)
 80095d6:	6013      	str	r3, [r2, #0]
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	200010f0 	.word	0x200010f0
 80095e8:	20001158 	.word	0x20001158

080095ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <xTaskGetSchedulerState+0x34>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d102      	bne.n	8009600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095fa:	2301      	movs	r3, #1
 80095fc:	607b      	str	r3, [r7, #4]
 80095fe:	e008      	b.n	8009612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009600:	4b08      	ldr	r3, [pc, #32]	; (8009624 <xTaskGetSchedulerState+0x38>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009608:	2302      	movs	r3, #2
 800960a:	607b      	str	r3, [r7, #4]
 800960c:	e001      	b.n	8009612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800960e:	2300      	movs	r3, #0
 8009610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009612:	687b      	ldr	r3, [r7, #4]
	}
 8009614:	4618      	mov	r0, r3
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	20001144 	.word	0x20001144
 8009624:	20001160 	.word	0x20001160

08009628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009634:	2300      	movs	r3, #0
 8009636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d056      	beq.n	80096ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800963e:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <xTaskPriorityDisinherit+0xd0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	429a      	cmp	r2, r3
 8009646:	d00a      	beq.n	800965e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	60fb      	str	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10a      	bne.n	800967c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	60bb      	str	r3, [r7, #8]
}
 8009678:	bf00      	nop
 800967a:	e7fe      	b.n	800967a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009680:	1e5a      	subs	r2, r3, #1
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968e:	429a      	cmp	r2, r3
 8009690:	d02c      	beq.n	80096ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009696:	2b00      	cmp	r3, #0
 8009698:	d128      	bne.n	80096ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	3304      	adds	r3, #4
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fc46 	bl	8007f30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <xTaskPriorityDisinherit+0xd4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d903      	bls.n	80096cc <xTaskPriorityDisinherit+0xa4>
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	4a0c      	ldr	r2, [pc, #48]	; (80096fc <xTaskPriorityDisinherit+0xd4>)
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <xTaskPriorityDisinherit+0xd8>)
 80096da:	441a      	add	r2, r3
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	3304      	adds	r3, #4
 80096e0:	4619      	mov	r1, r3
 80096e2:	4610      	mov	r0, r2
 80096e4:	f7fe fbc7 	bl	8007e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096ec:	697b      	ldr	r3, [r7, #20]
	}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000c64 	.word	0x20000c64
 80096fc:	20001140 	.word	0x20001140
 8009700:	20000c68 	.word	0x20000c68

08009704 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800970e:	4b21      	ldr	r3, [pc, #132]	; (8009794 <prvAddCurrentTaskToDelayedList+0x90>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009714:	4b20      	ldr	r3, [pc, #128]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3304      	adds	r3, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fc08 	bl	8007f30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d10a      	bne.n	800973e <prvAddCurrentTaskToDelayedList+0x3a>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972e:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4819      	ldr	r0, [pc, #100]	; (800979c <prvAddCurrentTaskToDelayedList+0x98>)
 8009738:	f7fe fb9d 	bl	8007e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800973c:	e026      	b.n	800978c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4413      	add	r3, r2
 8009744:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	429a      	cmp	r2, r3
 8009754:	d209      	bcs.n	800976a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009756:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3304      	adds	r3, #4
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f7fe fbab 	bl	8007ebe <vListInsert>
}
 8009768:	e010      	b.n	800978c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976a:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <prvAddCurrentTaskToDelayedList+0x94>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe fba1 	bl	8007ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	429a      	cmp	r2, r3
 8009784:	d202      	bcs.n	800978c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009786:	4a08      	ldr	r2, [pc, #32]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6013      	str	r3, [r2, #0]
}
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	2000113c 	.word	0x2000113c
 8009798:	20000c64 	.word	0x20000c64
 800979c:	20001124 	.word	0x20001124
 80097a0:	200010f4 	.word	0x200010f4
 80097a4:	200010f0 	.word	0x200010f0
 80097a8:	20001158 	.word	0x20001158

080097ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097b6:	f000 fb07 	bl	8009dc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097ba:	4b1c      	ldr	r3, [pc, #112]	; (800982c <xTimerCreateTimerTask+0x80>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d021      	beq.n	8009806 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097ca:	1d3a      	adds	r2, r7, #4
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	f107 030c 	add.w	r3, r7, #12
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe fb07 	bl	8007de8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	9202      	str	r2, [sp, #8]
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	2302      	movs	r3, #2
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	2300      	movs	r3, #0
 80097ea:	460a      	mov	r2, r1
 80097ec:	4910      	ldr	r1, [pc, #64]	; (8009830 <xTimerCreateTimerTask+0x84>)
 80097ee:	4811      	ldr	r0, [pc, #68]	; (8009834 <xTimerCreateTimerTask+0x88>)
 80097f0:	f7ff f8b4 	bl	800895c <xTaskCreateStatic>
 80097f4:	4603      	mov	r3, r0
 80097f6:	4a10      	ldr	r2, [pc, #64]	; (8009838 <xTimerCreateTimerTask+0x8c>)
 80097f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <xTimerCreateTimerTask+0x8c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009802:	2301      	movs	r3, #1
 8009804:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	613b      	str	r3, [r7, #16]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009822:	697b      	ldr	r3, [r7, #20]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	20001194 	.word	0x20001194
 8009830:	0800f038 	.word	0x0800f038
 8009834:	08009971 	.word	0x08009971
 8009838:	20001198 	.word	0x20001198

0800983c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08a      	sub	sp, #40	; 0x28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800984a:	2300      	movs	r3, #0
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	623b      	str	r3, [r7, #32]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800986a:	4b1a      	ldr	r3, [pc, #104]	; (80098d4 <xTimerGenericCommand+0x98>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d02a      	beq.n	80098c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b05      	cmp	r3, #5
 8009882:	dc18      	bgt.n	80098b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009884:	f7ff feb2 	bl	80095ec <xTaskGetSchedulerState>
 8009888:	4603      	mov	r3, r0
 800988a:	2b02      	cmp	r3, #2
 800988c:	d109      	bne.n	80098a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800988e:	4b11      	ldr	r3, [pc, #68]	; (80098d4 <xTimerGenericCommand+0x98>)
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f107 0110 	add.w	r1, r7, #16
 8009896:	2300      	movs	r3, #0
 8009898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989a:	f7fe fc77 	bl	800818c <xQueueGenericSend>
 800989e:	6278      	str	r0, [r7, #36]	; 0x24
 80098a0:	e012      	b.n	80098c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098a2:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <xTimerGenericCommand+0x98>)
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f107 0110 	add.w	r1, r7, #16
 80098aa:	2300      	movs	r3, #0
 80098ac:	2200      	movs	r2, #0
 80098ae:	f7fe fc6d 	bl	800818c <xQueueGenericSend>
 80098b2:	6278      	str	r0, [r7, #36]	; 0x24
 80098b4:	e008      	b.n	80098c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098b6:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <xTimerGenericCommand+0x98>)
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f107 0110 	add.w	r1, r7, #16
 80098be:	2300      	movs	r3, #0
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	f7fe fd61 	bl	8008388 <xQueueGenericSendFromISR>
 80098c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3728      	adds	r7, #40	; 0x28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20001194 	.word	0x20001194

080098d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af02      	add	r7, sp, #8
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e2:	4b22      	ldr	r3, [pc, #136]	; (800996c <prvProcessExpiredTimer+0x94>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	3304      	adds	r3, #4
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe fb1d 	bl	8007f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b00      	cmp	r3, #0
 8009902:	d022      	beq.n	800994a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	18d1      	adds	r1, r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	6978      	ldr	r0, [r7, #20]
 8009912:	f000 f8d1 	bl	8009ab8 <prvInsertTimerInActiveList>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01f      	beq.n	800995c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800991c:	2300      	movs	r3, #0
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	2300      	movs	r3, #0
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	2100      	movs	r1, #0
 8009926:	6978      	ldr	r0, [r7, #20]
 8009928:	f7ff ff88 	bl	800983c <xTimerGenericCommand>
 800992c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d113      	bne.n	800995c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	60fb      	str	r3, [r7, #12]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009950:	f023 0301 	bic.w	r3, r3, #1
 8009954:	b2da      	uxtb	r2, r3
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	6978      	ldr	r0, [r7, #20]
 8009962:	4798      	blx	r3
}
 8009964:	bf00      	nop
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	2000118c 	.word	0x2000118c

08009970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f857 	bl	8009a30 <prvGetNextExpireTime>
 8009982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4619      	mov	r1, r3
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f803 	bl	8009994 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800998e:	f000 f8d5 	bl	8009b3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009992:	e7f1      	b.n	8009978 <prvTimerTask+0x8>

08009994 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800999e:	f7ff fa39 	bl	8008e14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099a2:	f107 0308 	add.w	r3, r7, #8
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f866 	bl	8009a78 <prvSampleTimeNow>
 80099ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d130      	bne.n	8009a16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <prvProcessTimerOrBlockTask+0x3c>
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d806      	bhi.n	80099d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099c2:	f7ff fa35 	bl	8008e30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7ff ff85 	bl	80098d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099ce:	e024      	b.n	8009a1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d008      	beq.n	80099e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099d6:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <prvProcessTimerOrBlockTask+0x90>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <prvProcessTimerOrBlockTask+0x50>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <prvProcessTimerOrBlockTask+0x52>
 80099e4:	2300      	movs	r3, #0
 80099e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099e8:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <prvProcessTimerOrBlockTask+0x94>)
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4619      	mov	r1, r3
 80099f6:	f7fe ff7d 	bl	80088f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099fa:	f7ff fa19 	bl	8008e30 <xTaskResumeAll>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10a      	bne.n	8009a1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a04:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <prvProcessTimerOrBlockTask+0x98>)
 8009a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	f3bf 8f6f 	isb	sy
}
 8009a14:	e001      	b.n	8009a1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a16:	f7ff fa0b 	bl	8008e30 <xTaskResumeAll>
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001190 	.word	0x20001190
 8009a28:	20001194 	.word	0x20001194
 8009a2c:	e000ed04 	.word	0xe000ed04

08009a30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a38:	4b0e      	ldr	r3, [pc, #56]	; (8009a74 <prvGetNextExpireTime+0x44>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <prvGetNextExpireTime+0x16>
 8009a42:	2201      	movs	r2, #1
 8009a44:	e000      	b.n	8009a48 <prvGetNextExpireTime+0x18>
 8009a46:	2200      	movs	r2, #0
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d105      	bne.n	8009a60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a54:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <prvGetNextExpireTime+0x44>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	60fb      	str	r3, [r7, #12]
 8009a5e:	e001      	b.n	8009a64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a64:	68fb      	ldr	r3, [r7, #12]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	2000118c 	.word	0x2000118c

08009a78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a80:	f7ff fa74 	bl	8008f6c <xTaskGetTickCount>
 8009a84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a86:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <prvSampleTimeNow+0x3c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d205      	bcs.n	8009a9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a90:	f000 f936 	bl	8009d00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e002      	b.n	8009aa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009aa2:	4a04      	ldr	r2, [pc, #16]	; (8009ab4 <prvSampleTimeNow+0x3c>)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000119c 	.word	0x2000119c

08009ab8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d812      	bhi.n	8009b04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	1ad2      	subs	r2, r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d302      	bcc.n	8009af2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009aec:	2301      	movs	r3, #1
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	e01b      	b.n	8009b2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009af2:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <prvInsertTimerInActiveList+0x7c>)
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fe f9de 	bl	8007ebe <vListInsert>
 8009b02:	e012      	b.n	8009b2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d206      	bcs.n	8009b1a <prvInsertTimerInActiveList+0x62>
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d302      	bcc.n	8009b1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e007      	b.n	8009b2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b1a:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <prvInsertTimerInActiveList+0x80>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fe f9ca 	bl	8007ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b2a:	697b      	ldr	r3, [r7, #20]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20001190 	.word	0x20001190
 8009b38:	2000118c 	.word	0x2000118c

08009b3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08e      	sub	sp, #56	; 0x38
 8009b40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b42:	e0ca      	b.n	8009cda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da18      	bge.n	8009b7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b4a:	1d3b      	adds	r3, r7, #4
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10a      	bne.n	8009b6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	61fb      	str	r3, [r7, #28]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b72:	6850      	ldr	r0, [r2, #4]
 8009b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b76:	6892      	ldr	r2, [r2, #8]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f2c0 80ab 	blt.w	8009cda <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	3304      	adds	r3, #4
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fe f9cb 	bl	8007f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ff6b 	bl	8009a78 <prvSampleTimeNow>
 8009ba2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b09      	cmp	r3, #9
 8009ba8:	f200 8096 	bhi.w	8009cd8 <prvProcessReceivedCommands+0x19c>
 8009bac:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <prvProcessReceivedCommands+0x78>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009bdd 	.word	0x08009bdd
 8009bc0:	08009c51 	.word	0x08009c51
 8009bc4:	08009c65 	.word	0x08009c65
 8009bc8:	08009caf 	.word	0x08009caf
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009bdd 	.word	0x08009bdd
 8009bd4:	08009c51 	.word	0x08009c51
 8009bd8:	08009c65 	.word	0x08009c65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be2:	f043 0301 	orr.w	r3, r3, #1
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	18d1      	adds	r1, r2, r3
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfc:	f7ff ff5c 	bl	8009ab8 <prvInsertTimerInActiveList>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d069      	beq.n	8009cda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d05e      	beq.n	8009cda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	441a      	add	r2, r3
 8009c24:	2300      	movs	r3, #0
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2e:	f7ff fe05 	bl	800983c <xTimerGenericCommand>
 8009c32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d14f      	bne.n	8009cda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	61bb      	str	r3, [r7, #24]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c62:	e03a      	b.n	8009cda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	617b      	str	r3, [r7, #20]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	18d1      	adds	r1, r2, r3
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca8:	f7ff ff06 	bl	8009ab8 <prvInsertTimerInActiveList>
					break;
 8009cac:	e015      	b.n	8009cda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d103      	bne.n	8009cc4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cbe:	f000 fbdf 	bl	800a480 <vPortFree>
 8009cc2:	e00a      	b.n	8009cda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cd6:	e000      	b.n	8009cda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009cd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cda:	4b08      	ldr	r3, [pc, #32]	; (8009cfc <prvProcessReceivedCommands+0x1c0>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	1d39      	adds	r1, r7, #4
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fbec 	bl	80084c0 <xQueueReceive>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f47f af2a 	bne.w	8009b44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	3730      	adds	r7, #48	; 0x30
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20001194 	.word	0x20001194

08009d00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d06:	e048      	b.n	8009d9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d08:	4b2d      	ldr	r3, [pc, #180]	; (8009dc0 <prvSwitchTimerLists+0xc0>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d12:	4b2b      	ldr	r3, [pc, #172]	; (8009dc0 <prvSwitchTimerLists+0xc0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe f905 	bl	8007f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d02e      	beq.n	8009d9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4413      	add	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d90e      	bls.n	8009d6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d5a:	4b19      	ldr	r3, [pc, #100]	; (8009dc0 <prvSwitchTimerLists+0xc0>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fe f8aa 	bl	8007ebe <vListInsert>
 8009d6a:	e016      	b.n	8009d9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	2300      	movs	r3, #0
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	2100      	movs	r1, #0
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff fd60 	bl	800983c <xTimerGenericCommand>
 8009d7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	603b      	str	r3, [r7, #0]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d9a:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <prvSwitchTimerLists+0xc0>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1b1      	bne.n	8009d08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009da4:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <prvSwitchTimerLists+0xc0>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a04      	ldr	r2, [pc, #16]	; (8009dc0 <prvSwitchTimerLists+0xc0>)
 8009db0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009db2:	4a04      	ldr	r2, [pc, #16]	; (8009dc4 <prvSwitchTimerLists+0xc4>)
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	6013      	str	r3, [r2, #0]
}
 8009db8:	bf00      	nop
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	2000118c 	.word	0x2000118c
 8009dc4:	20001190 	.word	0x20001190

08009dc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009dce:	f000 f969 	bl	800a0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <prvCheckForValidListAndQueue+0x60>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d120      	bne.n	8009e1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dda:	4814      	ldr	r0, [pc, #80]	; (8009e2c <prvCheckForValidListAndQueue+0x64>)
 8009ddc:	f7fe f81e 	bl	8007e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009de0:	4813      	ldr	r0, [pc, #76]	; (8009e30 <prvCheckForValidListAndQueue+0x68>)
 8009de2:	f7fe f81b 	bl	8007e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009de6:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <prvCheckForValidListAndQueue+0x6c>)
 8009de8:	4a10      	ldr	r2, [pc, #64]	; (8009e2c <prvCheckForValidListAndQueue+0x64>)
 8009dea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dec:	4b12      	ldr	r3, [pc, #72]	; (8009e38 <prvCheckForValidListAndQueue+0x70>)
 8009dee:	4a10      	ldr	r2, [pc, #64]	; (8009e30 <prvCheckForValidListAndQueue+0x68>)
 8009df0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009df2:	2300      	movs	r3, #0
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <prvCheckForValidListAndQueue+0x74>)
 8009df8:	4a11      	ldr	r2, [pc, #68]	; (8009e40 <prvCheckForValidListAndQueue+0x78>)
 8009dfa:	2110      	movs	r1, #16
 8009dfc:	200a      	movs	r0, #10
 8009dfe:	f7fe f929 	bl	8008054 <xQueueGenericCreateStatic>
 8009e02:	4603      	mov	r3, r0
 8009e04:	4a08      	ldr	r2, [pc, #32]	; (8009e28 <prvCheckForValidListAndQueue+0x60>)
 8009e06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e08:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <prvCheckForValidListAndQueue+0x60>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <prvCheckForValidListAndQueue+0x60>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	490b      	ldr	r1, [pc, #44]	; (8009e44 <prvCheckForValidListAndQueue+0x7c>)
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fd42 	bl	80088a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e1c:	f000 f972 	bl	800a104 <vPortExitCritical>
}
 8009e20:	bf00      	nop
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20001194 	.word	0x20001194
 8009e2c:	20001164 	.word	0x20001164
 8009e30:	20001178 	.word	0x20001178
 8009e34:	2000118c 	.word	0x2000118c
 8009e38:	20001190 	.word	0x20001190
 8009e3c:	20001240 	.word	0x20001240
 8009e40:	200011a0 	.word	0x200011a0
 8009e44:	0800f040 	.word	0x0800f040

08009e48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3b04      	subs	r3, #4
 8009e58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f023 0201 	bic.w	r2, r3, #1
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3b04      	subs	r3, #4
 8009e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e78:	4a0c      	ldr	r2, [pc, #48]	; (8009eac <pxPortInitialiseStack+0x64>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3b14      	subs	r3, #20
 8009e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f06f 0202 	mvn.w	r2, #2
 8009e96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	3b20      	subs	r3, #32
 8009e9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	08009eb1 	.word	0x08009eb1

08009eb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009eba:	4b12      	ldr	r3, [pc, #72]	; (8009f04 <prvTaskExitError+0x54>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec2:	d00a      	beq.n	8009eda <prvTaskExitError+0x2a>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	60fb      	str	r3, [r7, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <prvTaskExitError+0x28>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	60bb      	str	r3, [r7, #8]
}
 8009eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009eee:	bf00      	nop
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0fc      	beq.n	8009ef0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	2000000c 	.word	0x2000000c
	...

08009f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <pxCurrentTCBConst2>)
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	f380 8809 	msr	PSP, r0
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8811 	msr	BASEPRI, r0
 8009f2a:	4770      	bx	lr
 8009f2c:	f3af 8000 	nop.w

08009f30 <pxCurrentTCBConst2>:
 8009f30:	20000c64 	.word	0x20000c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f38:	4808      	ldr	r0, [pc, #32]	; (8009f5c <prvPortStartFirstTask+0x24>)
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f380 8808 	msr	MSP, r0
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8814 	msr	CONTROL, r0
 8009f4a:	b662      	cpsie	i
 8009f4c:	b661      	cpsie	f
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	df00      	svc	0
 8009f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f5a:	bf00      	nop
 8009f5c:	e000ed08 	.word	0xe000ed08

08009f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f66:	4b46      	ldr	r3, [pc, #280]	; (800a080 <xPortStartScheduler+0x120>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a46      	ldr	r2, [pc, #280]	; (800a084 <xPortStartScheduler+0x124>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d10a      	bne.n	8009f86 <xPortStartScheduler+0x26>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	613b      	str	r3, [r7, #16]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f86:	4b3e      	ldr	r3, [pc, #248]	; (800a080 <xPortStartScheduler+0x120>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a3f      	ldr	r2, [pc, #252]	; (800a088 <xPortStartScheduler+0x128>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d10a      	bne.n	8009fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60fb      	str	r3, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fa6:	4b39      	ldr	r3, [pc, #228]	; (800a08c <xPortStartScheduler+0x12c>)
 8009fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	22ff      	movs	r2, #255	; 0xff
 8009fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	4b31      	ldr	r3, [pc, #196]	; (800a090 <xPortStartScheduler+0x130>)
 8009fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fce:	4b31      	ldr	r3, [pc, #196]	; (800a094 <xPortStartScheduler+0x134>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fd4:	e009      	b.n	8009fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fd6:	4b2f      	ldr	r3, [pc, #188]	; (800a094 <xPortStartScheduler+0x134>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	4a2d      	ldr	r2, [pc, #180]	; (800a094 <xPortStartScheduler+0x134>)
 8009fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff2:	2b80      	cmp	r3, #128	; 0x80
 8009ff4:	d0ef      	beq.n	8009fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ff6:	4b27      	ldr	r3, [pc, #156]	; (800a094 <xPortStartScheduler+0x134>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f1c3 0307 	rsb	r3, r3, #7
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d00a      	beq.n	800a018 <xPortStartScheduler+0xb8>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60bb      	str	r3, [r7, #8]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a018:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <xPortStartScheduler+0x134>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	021b      	lsls	r3, r3, #8
 800a01e:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <xPortStartScheduler+0x134>)
 800a020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a022:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <xPortStartScheduler+0x134>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a02a:	4a1a      	ldr	r2, [pc, #104]	; (800a094 <xPortStartScheduler+0x134>)
 800a02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a036:	4b18      	ldr	r3, [pc, #96]	; (800a098 <xPortStartScheduler+0x138>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a17      	ldr	r2, [pc, #92]	; (800a098 <xPortStartScheduler+0x138>)
 800a03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a042:	4b15      	ldr	r3, [pc, #84]	; (800a098 <xPortStartScheduler+0x138>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a14      	ldr	r2, [pc, #80]	; (800a098 <xPortStartScheduler+0x138>)
 800a048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a04e:	f000 f8dd 	bl	800a20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a052:	4b12      	ldr	r3, [pc, #72]	; (800a09c <xPortStartScheduler+0x13c>)
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a058:	f000 f8fc 	bl	800a254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a05c:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <xPortStartScheduler+0x140>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a0f      	ldr	r2, [pc, #60]	; (800a0a0 <xPortStartScheduler+0x140>)
 800a062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a068:	f7ff ff66 	bl	8009f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a06c:	f7ff f848 	bl	8009100 <vTaskSwitchContext>
	prvTaskExitError();
 800a070:	f7ff ff1e 	bl	8009eb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	e000ed00 	.word	0xe000ed00
 800a084:	410fc271 	.word	0x410fc271
 800a088:	410fc270 	.word	0x410fc270
 800a08c:	e000e400 	.word	0xe000e400
 800a090:	20001290 	.word	0x20001290
 800a094:	20001294 	.word	0x20001294
 800a098:	e000ed20 	.word	0xe000ed20
 800a09c:	2000000c 	.word	0x2000000c
 800a0a0:	e000ef34 	.word	0xe000ef34

0800a0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0be:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	4a0d      	ldr	r2, [pc, #52]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <vPortEnterCritical+0x58>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d10f      	bne.n	800a0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <vPortEnterCritical+0x5c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	603b      	str	r3, [r7, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <vPortEnterCritical+0x4a>
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	2000000c 	.word	0x2000000c
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <vPortExitCritical+0x50>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <vPortExitCritical+0x24>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <vPortExitCritical+0x50>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	4a09      	ldr	r2, [pc, #36]	; (800a154 <vPortExitCritical+0x50>)
 800a130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <vPortExitCritical+0x50>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <vPortExitCritical+0x42>
 800a13a:	2300      	movs	r3, #0
 800a13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	f383 8811 	msr	BASEPRI, r3
}
 800a144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	2000000c 	.word	0x2000000c
	...

0800a160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a160:	f3ef 8009 	mrs	r0, PSP
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <pxCurrentTCBConst>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	f01e 0f10 	tst.w	lr, #16
 800a170:	bf08      	it	eq
 800a172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	6010      	str	r0, [r2, #0]
 800a17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a184:	f380 8811 	msr	BASEPRI, r0
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f7fe ffb6 	bl	8009100 <vTaskSwitchContext>
 800a194:	f04f 0000 	mov.w	r0, #0
 800a198:	f380 8811 	msr	BASEPRI, r0
 800a19c:	bc09      	pop	{r0, r3}
 800a19e:	6819      	ldr	r1, [r3, #0]
 800a1a0:	6808      	ldr	r0, [r1, #0]
 800a1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a6:	f01e 0f10 	tst.w	lr, #16
 800a1aa:	bf08      	it	eq
 800a1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1b0:	f380 8809 	msr	PSP, r0
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <pxCurrentTCBConst>:
 800a1c0:	20000c64 	.word	0x20000c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1e2:	f7fe fed3 	bl	8008f8c <xTaskIncrementTick>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ec:	4b06      	ldr	r3, [pc, #24]	; (800a208 <xPortSysTickHandler+0x40>)
 800a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f383 8811 	msr	BASEPRI, r3
}
 800a1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a216:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <vPortSetupTimerInterrupt+0x38>)
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <vPortSetupTimerInterrupt+0x3c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0a      	ldr	r2, [pc, #40]	; (800a24c <vPortSetupTimerInterrupt+0x40>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	099b      	lsrs	r3, r3, #6
 800a228:	4a09      	ldr	r2, [pc, #36]	; (800a250 <vPortSetupTimerInterrupt+0x44>)
 800a22a:	3b01      	subs	r3, #1
 800a22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a22e:	4b04      	ldr	r3, [pc, #16]	; (800a240 <vPortSetupTimerInterrupt+0x34>)
 800a230:	2207      	movs	r2, #7
 800a232:	601a      	str	r2, [r3, #0]
}
 800a234:	bf00      	nop
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	e000e010 	.word	0xe000e010
 800a244:	e000e018 	.word	0xe000e018
 800a248:	20000000 	.word	0x20000000
 800a24c:	10624dd3 	.word	0x10624dd3
 800a250:	e000e014 	.word	0xe000e014

0800a254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a264 <vPortEnableVFP+0x10>
 800a258:	6801      	ldr	r1, [r0, #0]
 800a25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a25e:	6001      	str	r1, [r0, #0]
 800a260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a262:	bf00      	nop
 800a264:	e000ed88 	.word	0xe000ed88

0800a268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a26e:	f3ef 8305 	mrs	r3, IPSR
 800a272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b0f      	cmp	r3, #15
 800a278:	d914      	bls.n	800a2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a27a:	4a17      	ldr	r2, [pc, #92]	; (800a2d8 <vPortValidateInterruptPriority+0x70>)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a284:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <vPortValidateInterruptPriority+0x74>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	7afa      	ldrb	r2, [r7, #11]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d20a      	bcs.n	800a2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	607b      	str	r3, [r7, #4]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2a4:	4b0e      	ldr	r3, [pc, #56]	; (800a2e0 <vPortValidateInterruptPriority+0x78>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <vPortValidateInterruptPriority+0x7c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d90a      	bls.n	800a2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	603b      	str	r3, [r7, #0]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <vPortValidateInterruptPriority+0x60>
	}
 800a2ca:	bf00      	nop
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	e000e3f0 	.word	0xe000e3f0
 800a2dc:	20001290 	.word	0x20001290
 800a2e0:	e000ed0c 	.word	0xe000ed0c
 800a2e4:	20001294 	.word	0x20001294

0800a2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08a      	sub	sp, #40	; 0x28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2f4:	f7fe fd8e 	bl	8008e14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2f8:	4b5b      	ldr	r3, [pc, #364]	; (800a468 <pvPortMalloc+0x180>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a300:	f000 f920 	bl	800a544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a304:	4b59      	ldr	r3, [pc, #356]	; (800a46c <pvPortMalloc+0x184>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f040 8093 	bne.w	800a438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01d      	beq.n	800a354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a318:	2208      	movs	r2, #8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4413      	add	r3, r2
 800a31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	2b00      	cmp	r3, #0
 800a328:	d014      	beq.n	800a354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f023 0307 	bic.w	r3, r3, #7
 800a330:	3308      	adds	r3, #8
 800a332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <pvPortMalloc+0x6c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	617b      	str	r3, [r7, #20]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d06e      	beq.n	800a438 <pvPortMalloc+0x150>
 800a35a:	4b45      	ldr	r3, [pc, #276]	; (800a470 <pvPortMalloc+0x188>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d869      	bhi.n	800a438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a364:	4b43      	ldr	r3, [pc, #268]	; (800a474 <pvPortMalloc+0x18c>)
 800a366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a368:	4b42      	ldr	r3, [pc, #264]	; (800a474 <pvPortMalloc+0x18c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a36e:	e004      	b.n	800a37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d903      	bls.n	800a38c <pvPortMalloc+0xa4>
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1f1      	bne.n	800a370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a38c:	4b36      	ldr	r3, [pc, #216]	; (800a468 <pvPortMalloc+0x180>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	d050      	beq.n	800a438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2208      	movs	r2, #8
 800a39c:	4413      	add	r3, r2
 800a39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d91f      	bls.n	800a3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	613b      	str	r3, [r7, #16]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	1ad2      	subs	r2, r2, r3
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3f2:	69b8      	ldr	r0, [r7, #24]
 800a3f4:	f000 f908 	bl	800a608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <pvPortMalloc+0x188>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	4a1b      	ldr	r2, [pc, #108]	; (800a470 <pvPortMalloc+0x188>)
 800a404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <pvPortMalloc+0x188>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <pvPortMalloc+0x190>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d203      	bcs.n	800a41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a412:	4b17      	ldr	r3, [pc, #92]	; (800a470 <pvPortMalloc+0x188>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a18      	ldr	r2, [pc, #96]	; (800a478 <pvPortMalloc+0x190>)
 800a418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	4b13      	ldr	r3, [pc, #76]	; (800a46c <pvPortMalloc+0x184>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	431a      	orrs	r2, r3
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <pvPortMalloc+0x194>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a11      	ldr	r2, [pc, #68]	; (800a47c <pvPortMalloc+0x194>)
 800a436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a438:	f7fe fcfa 	bl	8008e30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <pvPortMalloc+0x174>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <pvPortMalloc+0x172>
	return pvReturn;
 800a45c:	69fb      	ldr	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3728      	adds	r7, #40	; 0x28
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20001e58 	.word	0x20001e58
 800a46c:	20001e6c 	.word	0x20001e6c
 800a470:	20001e5c 	.word	0x20001e5c
 800a474:	20001e50 	.word	0x20001e50
 800a478:	20001e60 	.word	0x20001e60
 800a47c:	20001e64 	.word	0x20001e64

0800a480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d04d      	beq.n	800a52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a492:	2308      	movs	r3, #8
 800a494:	425b      	negs	r3, r3
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	4413      	add	r3, r2
 800a49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	4b24      	ldr	r3, [pc, #144]	; (800a538 <vPortFree+0xb8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <vPortFree+0x44>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60fb      	str	r3, [r7, #12]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <vPortFree+0x62>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60bb      	str	r3, [r7, #8]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <vPortFree+0xb8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01e      	beq.n	800a52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d11a      	bne.n	800a52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <vPortFree+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	43db      	mvns	r3, r3
 800a502:	401a      	ands	r2, r3
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a508:	f7fe fc84 	bl	8008e14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <vPortFree+0xbc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4413      	add	r3, r2
 800a516:	4a09      	ldr	r2, [pc, #36]	; (800a53c <vPortFree+0xbc>)
 800a518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a51a:	6938      	ldr	r0, [r7, #16]
 800a51c:	f000 f874 	bl	800a608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <vPortFree+0xc0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	4a06      	ldr	r2, [pc, #24]	; (800a540 <vPortFree+0xc0>)
 800a528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a52a:	f7fe fc81 	bl	8008e30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a52e:	bf00      	nop
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20001e6c 	.word	0x20001e6c
 800a53c:	20001e5c 	.word	0x20001e5c
 800a540:	20001e68 	.word	0x20001e68

0800a544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a54a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a550:	4b27      	ldr	r3, [pc, #156]	; (800a5f0 <prvHeapInit+0xac>)
 800a552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0307 	bic.w	r3, r3, #7
 800a56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <prvHeapInit+0xac>)
 800a574:	4413      	add	r3, r2
 800a576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a57c:	4a1d      	ldr	r2, [pc, #116]	; (800a5f4 <prvHeapInit+0xb0>)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a582:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <prvHeapInit+0xb0>)
 800a584:	2200      	movs	r2, #0
 800a586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a590:	2208      	movs	r2, #8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1a9b      	subs	r3, r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0307 	bic.w	r3, r3, #7
 800a59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <prvHeapInit+0xb8>)
 800a5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a09      	ldr	r2, [pc, #36]	; (800a600 <prvHeapInit+0xbc>)
 800a5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <prvHeapInit+0xc0>)
 800a5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	20001298 	.word	0x20001298
 800a5f4:	20001e50 	.word	0x20001e50
 800a5f8:	20001e58 	.word	0x20001e58
 800a5fc:	20001e60 	.word	0x20001e60
 800a600:	20001e5c 	.word	0x20001e5c
 800a604:	20001e6c 	.word	0x20001e6c

0800a608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a610:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <prvInsertBlockIntoFreeList+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e002      	b.n	800a61c <prvInsertBlockIntoFreeList+0x14>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d8f7      	bhi.n	800a616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d108      	bne.n	800a64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	441a      	add	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d118      	bne.n	800a690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d00d      	beq.n	800a686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	e008      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a686:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e003      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d002      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20001e50 	.word	0x20001e50
 800a6b8:	20001e58 	.word	0x20001e58

0800a6bc <__cvt>:
 800a6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	ec55 4b10 	vmov	r4, r5, d0
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	462b      	mov	r3, r5
 800a6cc:	bfbb      	ittet	lt
 800a6ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6d2:	461d      	movlt	r5, r3
 800a6d4:	2300      	movge	r3, #0
 800a6d6:	232d      	movlt	r3, #45	; 0x2d
 800a6d8:	700b      	strb	r3, [r1, #0]
 800a6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6e0:	4691      	mov	r9, r2
 800a6e2:	f023 0820 	bic.w	r8, r3, #32
 800a6e6:	bfbc      	itt	lt
 800a6e8:	4622      	movlt	r2, r4
 800a6ea:	4614      	movlt	r4, r2
 800a6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6f0:	d005      	beq.n	800a6fe <__cvt+0x42>
 800a6f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a6f6:	d100      	bne.n	800a6fa <__cvt+0x3e>
 800a6f8:	3601      	adds	r6, #1
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	e000      	b.n	800a700 <__cvt+0x44>
 800a6fe:	2103      	movs	r1, #3
 800a700:	ab03      	add	r3, sp, #12
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	ab02      	add	r3, sp, #8
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	ec45 4b10 	vmov	d0, r4, r5
 800a70c:	4653      	mov	r3, sl
 800a70e:	4632      	mov	r2, r6
 800a710:	f001 f8f6 	bl	800b900 <_dtoa_r>
 800a714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a718:	4607      	mov	r7, r0
 800a71a:	d102      	bne.n	800a722 <__cvt+0x66>
 800a71c:	f019 0f01 	tst.w	r9, #1
 800a720:	d022      	beq.n	800a768 <__cvt+0xac>
 800a722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a726:	eb07 0906 	add.w	r9, r7, r6
 800a72a:	d110      	bne.n	800a74e <__cvt+0x92>
 800a72c:	783b      	ldrb	r3, [r7, #0]
 800a72e:	2b30      	cmp	r3, #48	; 0x30
 800a730:	d10a      	bne.n	800a748 <__cvt+0x8c>
 800a732:	2200      	movs	r2, #0
 800a734:	2300      	movs	r3, #0
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f6 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a73e:	b918      	cbnz	r0, 800a748 <__cvt+0x8c>
 800a740:	f1c6 0601 	rsb	r6, r6, #1
 800a744:	f8ca 6000 	str.w	r6, [sl]
 800a748:	f8da 3000 	ldr.w	r3, [sl]
 800a74c:	4499      	add	r9, r3
 800a74e:	2200      	movs	r2, #0
 800a750:	2300      	movs	r3, #0
 800a752:	4620      	mov	r0, r4
 800a754:	4629      	mov	r1, r5
 800a756:	f7f6 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a75a:	b108      	cbz	r0, 800a760 <__cvt+0xa4>
 800a75c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a760:	2230      	movs	r2, #48	; 0x30
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	454b      	cmp	r3, r9
 800a766:	d307      	bcc.n	800a778 <__cvt+0xbc>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a76c:	1bdb      	subs	r3, r3, r7
 800a76e:	4638      	mov	r0, r7
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	b004      	add	sp, #16
 800a774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a778:	1c59      	adds	r1, r3, #1
 800a77a:	9103      	str	r1, [sp, #12]
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	e7f0      	b.n	800a762 <__cvt+0xa6>

0800a780 <__exponent>:
 800a780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a782:	4603      	mov	r3, r0
 800a784:	2900      	cmp	r1, #0
 800a786:	bfb8      	it	lt
 800a788:	4249      	neglt	r1, r1
 800a78a:	f803 2b02 	strb.w	r2, [r3], #2
 800a78e:	bfb4      	ite	lt
 800a790:	222d      	movlt	r2, #45	; 0x2d
 800a792:	222b      	movge	r2, #43	; 0x2b
 800a794:	2909      	cmp	r1, #9
 800a796:	7042      	strb	r2, [r0, #1]
 800a798:	dd2a      	ble.n	800a7f0 <__exponent+0x70>
 800a79a:	f10d 0207 	add.w	r2, sp, #7
 800a79e:	4617      	mov	r7, r2
 800a7a0:	260a      	movs	r6, #10
 800a7a2:	4694      	mov	ip, r2
 800a7a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a7a8:	fb06 1415 	mls	r4, r6, r5, r1
 800a7ac:	3430      	adds	r4, #48	; 0x30
 800a7ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	2c63      	cmp	r4, #99	; 0x63
 800a7b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	dcf1      	bgt.n	800a7a2 <__exponent+0x22>
 800a7be:	3130      	adds	r1, #48	; 0x30
 800a7c0:	f1ac 0402 	sub.w	r4, ip, #2
 800a7c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a7c8:	1c41      	adds	r1, r0, #1
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	42ba      	cmp	r2, r7
 800a7ce:	d30a      	bcc.n	800a7e6 <__exponent+0x66>
 800a7d0:	f10d 0209 	add.w	r2, sp, #9
 800a7d4:	eba2 020c 	sub.w	r2, r2, ip
 800a7d8:	42bc      	cmp	r4, r7
 800a7da:	bf88      	it	hi
 800a7dc:	2200      	movhi	r2, #0
 800a7de:	4413      	add	r3, r2
 800a7e0:	1a18      	subs	r0, r3, r0
 800a7e2:	b003      	add	sp, #12
 800a7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a7ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a7ee:	e7ed      	b.n	800a7cc <__exponent+0x4c>
 800a7f0:	2330      	movs	r3, #48	; 0x30
 800a7f2:	3130      	adds	r1, #48	; 0x30
 800a7f4:	7083      	strb	r3, [r0, #2]
 800a7f6:	70c1      	strb	r1, [r0, #3]
 800a7f8:	1d03      	adds	r3, r0, #4
 800a7fa:	e7f1      	b.n	800a7e0 <__exponent+0x60>

0800a7fc <_printf_float>:
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	ed2d 8b02 	vpush	{d8}
 800a804:	b08d      	sub	sp, #52	; 0x34
 800a806:	460c      	mov	r4, r1
 800a808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a80c:	4616      	mov	r6, r2
 800a80e:	461f      	mov	r7, r3
 800a810:	4605      	mov	r5, r0
 800a812:	f000 ff09 	bl	800b628 <_localeconv_r>
 800a816:	f8d0 a000 	ldr.w	sl, [r0]
 800a81a:	4650      	mov	r0, sl
 800a81c:	f7f5 fd28 	bl	8000270 <strlen>
 800a820:	2300      	movs	r3, #0
 800a822:	930a      	str	r3, [sp, #40]	; 0x28
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	f8d8 3000 	ldr.w	r3, [r8]
 800a82c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a830:	3307      	adds	r3, #7
 800a832:	f023 0307 	bic.w	r3, r3, #7
 800a836:	f103 0208 	add.w	r2, r3, #8
 800a83a:	f8c8 2000 	str.w	r2, [r8]
 800a83e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a842:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a846:	9307      	str	r3, [sp, #28]
 800a848:	f8cd 8018 	str.w	r8, [sp, #24]
 800a84c:	ee08 0a10 	vmov	s16, r0
 800a850:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a858:	4b9e      	ldr	r3, [pc, #632]	; (800aad4 <_printf_float+0x2d8>)
 800a85a:	f04f 32ff 	mov.w	r2, #4294967295
 800a85e:	f7f6 f965 	bl	8000b2c <__aeabi_dcmpun>
 800a862:	bb88      	cbnz	r0, 800a8c8 <_printf_float+0xcc>
 800a864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a868:	4b9a      	ldr	r3, [pc, #616]	; (800aad4 <_printf_float+0x2d8>)
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	f7f6 f93f 	bl	8000af0 <__aeabi_dcmple>
 800a872:	bb48      	cbnz	r0, 800a8c8 <_printf_float+0xcc>
 800a874:	2200      	movs	r2, #0
 800a876:	2300      	movs	r3, #0
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f6 f92e 	bl	8000adc <__aeabi_dcmplt>
 800a880:	b110      	cbz	r0, 800a888 <_printf_float+0x8c>
 800a882:	232d      	movs	r3, #45	; 0x2d
 800a884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a888:	4a93      	ldr	r2, [pc, #588]	; (800aad8 <_printf_float+0x2dc>)
 800a88a:	4b94      	ldr	r3, [pc, #592]	; (800aadc <_printf_float+0x2e0>)
 800a88c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a890:	bf94      	ite	ls
 800a892:	4690      	movls	r8, r2
 800a894:	4698      	movhi	r8, r3
 800a896:	2303      	movs	r3, #3
 800a898:	6123      	str	r3, [r4, #16]
 800a89a:	9b05      	ldr	r3, [sp, #20]
 800a89c:	f023 0304 	bic.w	r3, r3, #4
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	f04f 0900 	mov.w	r9, #0
 800a8a6:	9700      	str	r7, [sp, #0]
 800a8a8:	4633      	mov	r3, r6
 800a8aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 f9da 	bl	800ac68 <_printf_common>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	f040 8090 	bne.w	800a9da <_printf_float+0x1de>
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	b00d      	add	sp, #52	; 0x34
 800a8c0:	ecbd 8b02 	vpop	{d8}
 800a8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	f7f6 f92c 	bl	8000b2c <__aeabi_dcmpun>
 800a8d4:	b140      	cbz	r0, 800a8e8 <_printf_float+0xec>
 800a8d6:	464b      	mov	r3, r9
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	bfbc      	itt	lt
 800a8dc:	232d      	movlt	r3, #45	; 0x2d
 800a8de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8e2:	4a7f      	ldr	r2, [pc, #508]	; (800aae0 <_printf_float+0x2e4>)
 800a8e4:	4b7f      	ldr	r3, [pc, #508]	; (800aae4 <_printf_float+0x2e8>)
 800a8e6:	e7d1      	b.n	800a88c <_printf_float+0x90>
 800a8e8:	6863      	ldr	r3, [r4, #4]
 800a8ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8ee:	9206      	str	r2, [sp, #24]
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	d13f      	bne.n	800a974 <_printf_float+0x178>
 800a8f4:	2306      	movs	r3, #6
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	6861      	ldr	r1, [r4, #4]
 800a8fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a900:	2300      	movs	r3, #0
 800a902:	9303      	str	r3, [sp, #12]
 800a904:	ab0a      	add	r3, sp, #40	; 0x28
 800a906:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a90a:	ab09      	add	r3, sp, #36	; 0x24
 800a90c:	ec49 8b10 	vmov	d0, r8, r9
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	6022      	str	r2, [r4, #0]
 800a914:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a918:	4628      	mov	r0, r5
 800a91a:	f7ff fecf 	bl	800a6bc <__cvt>
 800a91e:	9b06      	ldr	r3, [sp, #24]
 800a920:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a922:	2b47      	cmp	r3, #71	; 0x47
 800a924:	4680      	mov	r8, r0
 800a926:	d108      	bne.n	800a93a <_printf_float+0x13e>
 800a928:	1cc8      	adds	r0, r1, #3
 800a92a:	db02      	blt.n	800a932 <_printf_float+0x136>
 800a92c:	6863      	ldr	r3, [r4, #4]
 800a92e:	4299      	cmp	r1, r3
 800a930:	dd41      	ble.n	800a9b6 <_printf_float+0x1ba>
 800a932:	f1ab 0302 	sub.w	r3, fp, #2
 800a936:	fa5f fb83 	uxtb.w	fp, r3
 800a93a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a93e:	d820      	bhi.n	800a982 <_printf_float+0x186>
 800a940:	3901      	subs	r1, #1
 800a942:	465a      	mov	r2, fp
 800a944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a948:	9109      	str	r1, [sp, #36]	; 0x24
 800a94a:	f7ff ff19 	bl	800a780 <__exponent>
 800a94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a950:	1813      	adds	r3, r2, r0
 800a952:	2a01      	cmp	r2, #1
 800a954:	4681      	mov	r9, r0
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	dc02      	bgt.n	800a960 <_printf_float+0x164>
 800a95a:	6822      	ldr	r2, [r4, #0]
 800a95c:	07d2      	lsls	r2, r2, #31
 800a95e:	d501      	bpl.n	800a964 <_printf_float+0x168>
 800a960:	3301      	adds	r3, #1
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d09c      	beq.n	800a8a6 <_printf_float+0xaa>
 800a96c:	232d      	movs	r3, #45	; 0x2d
 800a96e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a972:	e798      	b.n	800a8a6 <_printf_float+0xaa>
 800a974:	9a06      	ldr	r2, [sp, #24]
 800a976:	2a47      	cmp	r2, #71	; 0x47
 800a978:	d1be      	bne.n	800a8f8 <_printf_float+0xfc>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1bc      	bne.n	800a8f8 <_printf_float+0xfc>
 800a97e:	2301      	movs	r3, #1
 800a980:	e7b9      	b.n	800a8f6 <_printf_float+0xfa>
 800a982:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a986:	d118      	bne.n	800a9ba <_printf_float+0x1be>
 800a988:	2900      	cmp	r1, #0
 800a98a:	6863      	ldr	r3, [r4, #4]
 800a98c:	dd0b      	ble.n	800a9a6 <_printf_float+0x1aa>
 800a98e:	6121      	str	r1, [r4, #16]
 800a990:	b913      	cbnz	r3, 800a998 <_printf_float+0x19c>
 800a992:	6822      	ldr	r2, [r4, #0]
 800a994:	07d0      	lsls	r0, r2, #31
 800a996:	d502      	bpl.n	800a99e <_printf_float+0x1a2>
 800a998:	3301      	adds	r3, #1
 800a99a:	440b      	add	r3, r1
 800a99c:	6123      	str	r3, [r4, #16]
 800a99e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9a0:	f04f 0900 	mov.w	r9, #0
 800a9a4:	e7de      	b.n	800a964 <_printf_float+0x168>
 800a9a6:	b913      	cbnz	r3, 800a9ae <_printf_float+0x1b2>
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	07d2      	lsls	r2, r2, #31
 800a9ac:	d501      	bpl.n	800a9b2 <_printf_float+0x1b6>
 800a9ae:	3302      	adds	r3, #2
 800a9b0:	e7f4      	b.n	800a99c <_printf_float+0x1a0>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e7f2      	b.n	800a99c <_printf_float+0x1a0>
 800a9b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9bc:	4299      	cmp	r1, r3
 800a9be:	db05      	blt.n	800a9cc <_printf_float+0x1d0>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	6121      	str	r1, [r4, #16]
 800a9c4:	07d8      	lsls	r0, r3, #31
 800a9c6:	d5ea      	bpl.n	800a99e <_printf_float+0x1a2>
 800a9c8:	1c4b      	adds	r3, r1, #1
 800a9ca:	e7e7      	b.n	800a99c <_printf_float+0x1a0>
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	bfd4      	ite	le
 800a9d0:	f1c1 0202 	rsble	r2, r1, #2
 800a9d4:	2201      	movgt	r2, #1
 800a9d6:	4413      	add	r3, r2
 800a9d8:	e7e0      	b.n	800a99c <_printf_float+0x1a0>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	055a      	lsls	r2, r3, #21
 800a9de:	d407      	bmi.n	800a9f0 <_printf_float+0x1f4>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	4642      	mov	r2, r8
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d12c      	bne.n	800aa48 <_printf_float+0x24c>
 800a9ee:	e764      	b.n	800a8ba <_printf_float+0xbe>
 800a9f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9f4:	f240 80e0 	bls.w	800abb8 <_printf_float+0x3bc>
 800a9f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f7f6 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d034      	beq.n	800aa72 <_printf_float+0x276>
 800aa08:	4a37      	ldr	r2, [pc, #220]	; (800aae8 <_printf_float+0x2ec>)
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b8      	blx	r7
 800aa12:	3001      	adds	r0, #1
 800aa14:	f43f af51 	beq.w	800a8ba <_printf_float+0xbe>
 800aa18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	db02      	blt.n	800aa26 <_printf_float+0x22a>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	07d8      	lsls	r0, r3, #31
 800aa24:	d510      	bpl.n	800aa48 <_printf_float+0x24c>
 800aa26:	ee18 3a10 	vmov	r3, s16
 800aa2a:	4652      	mov	r2, sl
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	f43f af41 	beq.w	800a8ba <_printf_float+0xbe>
 800aa38:	f04f 0800 	mov.w	r8, #0
 800aa3c:	f104 091a 	add.w	r9, r4, #26
 800aa40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4543      	cmp	r3, r8
 800aa46:	dc09      	bgt.n	800aa5c <_printf_float+0x260>
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	079b      	lsls	r3, r3, #30
 800aa4c:	f100 8107 	bmi.w	800ac5e <_printf_float+0x462>
 800aa50:	68e0      	ldr	r0, [r4, #12]
 800aa52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa54:	4298      	cmp	r0, r3
 800aa56:	bfb8      	it	lt
 800aa58:	4618      	movlt	r0, r3
 800aa5a:	e730      	b.n	800a8be <_printf_float+0xc2>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	464a      	mov	r2, r9
 800aa60:	4631      	mov	r1, r6
 800aa62:	4628      	mov	r0, r5
 800aa64:	47b8      	blx	r7
 800aa66:	3001      	adds	r0, #1
 800aa68:	f43f af27 	beq.w	800a8ba <_printf_float+0xbe>
 800aa6c:	f108 0801 	add.w	r8, r8, #1
 800aa70:	e7e6      	b.n	800aa40 <_printf_float+0x244>
 800aa72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dc39      	bgt.n	800aaec <_printf_float+0x2f0>
 800aa78:	4a1b      	ldr	r2, [pc, #108]	; (800aae8 <_printf_float+0x2ec>)
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af19 	beq.w	800a8ba <_printf_float+0xbe>
 800aa88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d102      	bne.n	800aa96 <_printf_float+0x29a>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	07d9      	lsls	r1, r3, #31
 800aa94:	d5d8      	bpl.n	800aa48 <_printf_float+0x24c>
 800aa96:	ee18 3a10 	vmov	r3, s16
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	47b8      	blx	r7
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	f43f af09 	beq.w	800a8ba <_printf_float+0xbe>
 800aaa8:	f04f 0900 	mov.w	r9, #0
 800aaac:	f104 0a1a 	add.w	sl, r4, #26
 800aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab2:	425b      	negs	r3, r3
 800aab4:	454b      	cmp	r3, r9
 800aab6:	dc01      	bgt.n	800aabc <_printf_float+0x2c0>
 800aab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaba:	e792      	b.n	800a9e2 <_printf_float+0x1e6>
 800aabc:	2301      	movs	r3, #1
 800aabe:	4652      	mov	r2, sl
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f aef7 	beq.w	800a8ba <_printf_float+0xbe>
 800aacc:	f109 0901 	add.w	r9, r9, #1
 800aad0:	e7ee      	b.n	800aab0 <_printf_float+0x2b4>
 800aad2:	bf00      	nop
 800aad4:	7fefffff 	.word	0x7fefffff
 800aad8:	0800f0fc 	.word	0x0800f0fc
 800aadc:	0800f100 	.word	0x0800f100
 800aae0:	0800f104 	.word	0x0800f104
 800aae4:	0800f108 	.word	0x0800f108
 800aae8:	0800f10c 	.word	0x0800f10c
 800aaec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	bfa8      	it	ge
 800aaf4:	461a      	movge	r2, r3
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	4691      	mov	r9, r2
 800aafa:	dc37      	bgt.n	800ab6c <_printf_float+0x370>
 800aafc:	f04f 0b00 	mov.w	fp, #0
 800ab00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab04:	f104 021a 	add.w	r2, r4, #26
 800ab08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab0a:	9305      	str	r3, [sp, #20]
 800ab0c:	eba3 0309 	sub.w	r3, r3, r9
 800ab10:	455b      	cmp	r3, fp
 800ab12:	dc33      	bgt.n	800ab7c <_printf_float+0x380>
 800ab14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	db3b      	blt.n	800ab94 <_printf_float+0x398>
 800ab1c:	6823      	ldr	r3, [r4, #0]
 800ab1e:	07da      	lsls	r2, r3, #31
 800ab20:	d438      	bmi.n	800ab94 <_printf_float+0x398>
 800ab22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab26:	eba2 0903 	sub.w	r9, r2, r3
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	1ad2      	subs	r2, r2, r3
 800ab2e:	4591      	cmp	r9, r2
 800ab30:	bfa8      	it	ge
 800ab32:	4691      	movge	r9, r2
 800ab34:	f1b9 0f00 	cmp.w	r9, #0
 800ab38:	dc35      	bgt.n	800aba6 <_printf_float+0x3aa>
 800ab3a:	f04f 0800 	mov.w	r8, #0
 800ab3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab42:	f104 0a1a 	add.w	sl, r4, #26
 800ab46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	eba3 0309 	sub.w	r3, r3, r9
 800ab50:	4543      	cmp	r3, r8
 800ab52:	f77f af79 	ble.w	800aa48 <_printf_float+0x24c>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4652      	mov	r2, sl
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b8      	blx	r7
 800ab60:	3001      	adds	r0, #1
 800ab62:	f43f aeaa 	beq.w	800a8ba <_printf_float+0xbe>
 800ab66:	f108 0801 	add.w	r8, r8, #1
 800ab6a:	e7ec      	b.n	800ab46 <_printf_float+0x34a>
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4642      	mov	r2, r8
 800ab72:	4628      	mov	r0, r5
 800ab74:	47b8      	blx	r7
 800ab76:	3001      	adds	r0, #1
 800ab78:	d1c0      	bne.n	800aafc <_printf_float+0x300>
 800ab7a:	e69e      	b.n	800a8ba <_printf_float+0xbe>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4628      	mov	r0, r5
 800ab82:	9205      	str	r2, [sp, #20]
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	f43f ae97 	beq.w	800a8ba <_printf_float+0xbe>
 800ab8c:	9a05      	ldr	r2, [sp, #20]
 800ab8e:	f10b 0b01 	add.w	fp, fp, #1
 800ab92:	e7b9      	b.n	800ab08 <_printf_float+0x30c>
 800ab94:	ee18 3a10 	vmov	r3, s16
 800ab98:	4652      	mov	r2, sl
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b8      	blx	r7
 800aba0:	3001      	adds	r0, #1
 800aba2:	d1be      	bne.n	800ab22 <_printf_float+0x326>
 800aba4:	e689      	b.n	800a8ba <_printf_float+0xbe>
 800aba6:	9a05      	ldr	r2, [sp, #20]
 800aba8:	464b      	mov	r3, r9
 800abaa:	4442      	add	r2, r8
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	d1c1      	bne.n	800ab3a <_printf_float+0x33e>
 800abb6:	e680      	b.n	800a8ba <_printf_float+0xbe>
 800abb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abba:	2a01      	cmp	r2, #1
 800abbc:	dc01      	bgt.n	800abc2 <_printf_float+0x3c6>
 800abbe:	07db      	lsls	r3, r3, #31
 800abc0:	d53a      	bpl.n	800ac38 <_printf_float+0x43c>
 800abc2:	2301      	movs	r3, #1
 800abc4:	4642      	mov	r2, r8
 800abc6:	4631      	mov	r1, r6
 800abc8:	4628      	mov	r0, r5
 800abca:	47b8      	blx	r7
 800abcc:	3001      	adds	r0, #1
 800abce:	f43f ae74 	beq.w	800a8ba <_printf_float+0xbe>
 800abd2:	ee18 3a10 	vmov	r3, s16
 800abd6:	4652      	mov	r2, sl
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	47b8      	blx	r7
 800abde:	3001      	adds	r0, #1
 800abe0:	f43f ae6b 	beq.w	800a8ba <_printf_float+0xbe>
 800abe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800abf0:	f7f5 ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800abf4:	b9d8      	cbnz	r0, 800ac2e <_printf_float+0x432>
 800abf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800abfa:	f108 0201 	add.w	r2, r8, #1
 800abfe:	4631      	mov	r1, r6
 800ac00:	4628      	mov	r0, r5
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	d10e      	bne.n	800ac26 <_printf_float+0x42a>
 800ac08:	e657      	b.n	800a8ba <_printf_float+0xbe>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	4652      	mov	r2, sl
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b8      	blx	r7
 800ac14:	3001      	adds	r0, #1
 800ac16:	f43f ae50 	beq.w	800a8ba <_printf_float+0xbe>
 800ac1a:	f108 0801 	add.w	r8, r8, #1
 800ac1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac20:	3b01      	subs	r3, #1
 800ac22:	4543      	cmp	r3, r8
 800ac24:	dcf1      	bgt.n	800ac0a <_printf_float+0x40e>
 800ac26:	464b      	mov	r3, r9
 800ac28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac2c:	e6da      	b.n	800a9e4 <_printf_float+0x1e8>
 800ac2e:	f04f 0800 	mov.w	r8, #0
 800ac32:	f104 0a1a 	add.w	sl, r4, #26
 800ac36:	e7f2      	b.n	800ac1e <_printf_float+0x422>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	e7df      	b.n	800abfe <_printf_float+0x402>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	464a      	mov	r2, r9
 800ac42:	4631      	mov	r1, r6
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b8      	blx	r7
 800ac48:	3001      	adds	r0, #1
 800ac4a:	f43f ae36 	beq.w	800a8ba <_printf_float+0xbe>
 800ac4e:	f108 0801 	add.w	r8, r8, #1
 800ac52:	68e3      	ldr	r3, [r4, #12]
 800ac54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac56:	1a5b      	subs	r3, r3, r1
 800ac58:	4543      	cmp	r3, r8
 800ac5a:	dcf0      	bgt.n	800ac3e <_printf_float+0x442>
 800ac5c:	e6f8      	b.n	800aa50 <_printf_float+0x254>
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	f104 0919 	add.w	r9, r4, #25
 800ac66:	e7f4      	b.n	800ac52 <_printf_float+0x456>

0800ac68 <_printf_common>:
 800ac68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac6c:	4616      	mov	r6, r2
 800ac6e:	4699      	mov	r9, r3
 800ac70:	688a      	ldr	r2, [r1, #8]
 800ac72:	690b      	ldr	r3, [r1, #16]
 800ac74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	bfb8      	it	lt
 800ac7c:	4613      	movlt	r3, r2
 800ac7e:	6033      	str	r3, [r6, #0]
 800ac80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac84:	4607      	mov	r7, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	b10a      	cbz	r2, 800ac8e <_printf_common+0x26>
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	6033      	str	r3, [r6, #0]
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	0699      	lsls	r1, r3, #26
 800ac92:	bf42      	ittt	mi
 800ac94:	6833      	ldrmi	r3, [r6, #0]
 800ac96:	3302      	addmi	r3, #2
 800ac98:	6033      	strmi	r3, [r6, #0]
 800ac9a:	6825      	ldr	r5, [r4, #0]
 800ac9c:	f015 0506 	ands.w	r5, r5, #6
 800aca0:	d106      	bne.n	800acb0 <_printf_common+0x48>
 800aca2:	f104 0a19 	add.w	sl, r4, #25
 800aca6:	68e3      	ldr	r3, [r4, #12]
 800aca8:	6832      	ldr	r2, [r6, #0]
 800acaa:	1a9b      	subs	r3, r3, r2
 800acac:	42ab      	cmp	r3, r5
 800acae:	dc26      	bgt.n	800acfe <_printf_common+0x96>
 800acb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acb4:	1e13      	subs	r3, r2, #0
 800acb6:	6822      	ldr	r2, [r4, #0]
 800acb8:	bf18      	it	ne
 800acba:	2301      	movne	r3, #1
 800acbc:	0692      	lsls	r2, r2, #26
 800acbe:	d42b      	bmi.n	800ad18 <_printf_common+0xb0>
 800acc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc4:	4649      	mov	r1, r9
 800acc6:	4638      	mov	r0, r7
 800acc8:	47c0      	blx	r8
 800acca:	3001      	adds	r0, #1
 800accc:	d01e      	beq.n	800ad0c <_printf_common+0xa4>
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	6922      	ldr	r2, [r4, #16]
 800acd2:	f003 0306 	and.w	r3, r3, #6
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	bf02      	ittt	eq
 800acda:	68e5      	ldreq	r5, [r4, #12]
 800acdc:	6833      	ldreq	r3, [r6, #0]
 800acde:	1aed      	subeq	r5, r5, r3
 800ace0:	68a3      	ldr	r3, [r4, #8]
 800ace2:	bf0c      	ite	eq
 800ace4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ace8:	2500      	movne	r5, #0
 800acea:	4293      	cmp	r3, r2
 800acec:	bfc4      	itt	gt
 800acee:	1a9b      	subgt	r3, r3, r2
 800acf0:	18ed      	addgt	r5, r5, r3
 800acf2:	2600      	movs	r6, #0
 800acf4:	341a      	adds	r4, #26
 800acf6:	42b5      	cmp	r5, r6
 800acf8:	d11a      	bne.n	800ad30 <_printf_common+0xc8>
 800acfa:	2000      	movs	r0, #0
 800acfc:	e008      	b.n	800ad10 <_printf_common+0xa8>
 800acfe:	2301      	movs	r3, #1
 800ad00:	4652      	mov	r2, sl
 800ad02:	4649      	mov	r1, r9
 800ad04:	4638      	mov	r0, r7
 800ad06:	47c0      	blx	r8
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d103      	bne.n	800ad14 <_printf_common+0xac>
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad14:	3501      	adds	r5, #1
 800ad16:	e7c6      	b.n	800aca6 <_printf_common+0x3e>
 800ad18:	18e1      	adds	r1, r4, r3
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	2030      	movs	r0, #48	; 0x30
 800ad1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad22:	4422      	add	r2, r4
 800ad24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	e7c7      	b.n	800acc0 <_printf_common+0x58>
 800ad30:	2301      	movs	r3, #1
 800ad32:	4622      	mov	r2, r4
 800ad34:	4649      	mov	r1, r9
 800ad36:	4638      	mov	r0, r7
 800ad38:	47c0      	blx	r8
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d0e6      	beq.n	800ad0c <_printf_common+0xa4>
 800ad3e:	3601      	adds	r6, #1
 800ad40:	e7d9      	b.n	800acf6 <_printf_common+0x8e>
	...

0800ad44 <_printf_i>:
 800ad44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	7e0f      	ldrb	r7, [r1, #24]
 800ad4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad4c:	2f78      	cmp	r7, #120	; 0x78
 800ad4e:	4691      	mov	r9, r2
 800ad50:	4680      	mov	r8, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	469a      	mov	sl, r3
 800ad56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad5a:	d807      	bhi.n	800ad6c <_printf_i+0x28>
 800ad5c:	2f62      	cmp	r7, #98	; 0x62
 800ad5e:	d80a      	bhi.n	800ad76 <_printf_i+0x32>
 800ad60:	2f00      	cmp	r7, #0
 800ad62:	f000 80d4 	beq.w	800af0e <_printf_i+0x1ca>
 800ad66:	2f58      	cmp	r7, #88	; 0x58
 800ad68:	f000 80c0 	beq.w	800aeec <_printf_i+0x1a8>
 800ad6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad74:	e03a      	b.n	800adec <_printf_i+0xa8>
 800ad76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad7a:	2b15      	cmp	r3, #21
 800ad7c:	d8f6      	bhi.n	800ad6c <_printf_i+0x28>
 800ad7e:	a101      	add	r1, pc, #4	; (adr r1, 800ad84 <_printf_i+0x40>)
 800ad80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad84:	0800addd 	.word	0x0800addd
 800ad88:	0800adf1 	.word	0x0800adf1
 800ad8c:	0800ad6d 	.word	0x0800ad6d
 800ad90:	0800ad6d 	.word	0x0800ad6d
 800ad94:	0800ad6d 	.word	0x0800ad6d
 800ad98:	0800ad6d 	.word	0x0800ad6d
 800ad9c:	0800adf1 	.word	0x0800adf1
 800ada0:	0800ad6d 	.word	0x0800ad6d
 800ada4:	0800ad6d 	.word	0x0800ad6d
 800ada8:	0800ad6d 	.word	0x0800ad6d
 800adac:	0800ad6d 	.word	0x0800ad6d
 800adb0:	0800aef5 	.word	0x0800aef5
 800adb4:	0800ae1d 	.word	0x0800ae1d
 800adb8:	0800aeaf 	.word	0x0800aeaf
 800adbc:	0800ad6d 	.word	0x0800ad6d
 800adc0:	0800ad6d 	.word	0x0800ad6d
 800adc4:	0800af17 	.word	0x0800af17
 800adc8:	0800ad6d 	.word	0x0800ad6d
 800adcc:	0800ae1d 	.word	0x0800ae1d
 800add0:	0800ad6d 	.word	0x0800ad6d
 800add4:	0800ad6d 	.word	0x0800ad6d
 800add8:	0800aeb7 	.word	0x0800aeb7
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	1d1a      	adds	r2, r3, #4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	602a      	str	r2, [r5, #0]
 800ade4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ade8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adec:	2301      	movs	r3, #1
 800adee:	e09f      	b.n	800af30 <_printf_i+0x1ec>
 800adf0:	6820      	ldr	r0, [r4, #0]
 800adf2:	682b      	ldr	r3, [r5, #0]
 800adf4:	0607      	lsls	r7, r0, #24
 800adf6:	f103 0104 	add.w	r1, r3, #4
 800adfa:	6029      	str	r1, [r5, #0]
 800adfc:	d501      	bpl.n	800ae02 <_printf_i+0xbe>
 800adfe:	681e      	ldr	r6, [r3, #0]
 800ae00:	e003      	b.n	800ae0a <_printf_i+0xc6>
 800ae02:	0646      	lsls	r6, r0, #25
 800ae04:	d5fb      	bpl.n	800adfe <_printf_i+0xba>
 800ae06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae0a:	2e00      	cmp	r6, #0
 800ae0c:	da03      	bge.n	800ae16 <_printf_i+0xd2>
 800ae0e:	232d      	movs	r3, #45	; 0x2d
 800ae10:	4276      	negs	r6, r6
 800ae12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae16:	485a      	ldr	r0, [pc, #360]	; (800af80 <_printf_i+0x23c>)
 800ae18:	230a      	movs	r3, #10
 800ae1a:	e012      	b.n	800ae42 <_printf_i+0xfe>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	6820      	ldr	r0, [r4, #0]
 800ae20:	1d19      	adds	r1, r3, #4
 800ae22:	6029      	str	r1, [r5, #0]
 800ae24:	0605      	lsls	r5, r0, #24
 800ae26:	d501      	bpl.n	800ae2c <_printf_i+0xe8>
 800ae28:	681e      	ldr	r6, [r3, #0]
 800ae2a:	e002      	b.n	800ae32 <_printf_i+0xee>
 800ae2c:	0641      	lsls	r1, r0, #25
 800ae2e:	d5fb      	bpl.n	800ae28 <_printf_i+0xe4>
 800ae30:	881e      	ldrh	r6, [r3, #0]
 800ae32:	4853      	ldr	r0, [pc, #332]	; (800af80 <_printf_i+0x23c>)
 800ae34:	2f6f      	cmp	r7, #111	; 0x6f
 800ae36:	bf0c      	ite	eq
 800ae38:	2308      	moveq	r3, #8
 800ae3a:	230a      	movne	r3, #10
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae42:	6865      	ldr	r5, [r4, #4]
 800ae44:	60a5      	str	r5, [r4, #8]
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	bfa2      	ittt	ge
 800ae4a:	6821      	ldrge	r1, [r4, #0]
 800ae4c:	f021 0104 	bicge.w	r1, r1, #4
 800ae50:	6021      	strge	r1, [r4, #0]
 800ae52:	b90e      	cbnz	r6, 800ae58 <_printf_i+0x114>
 800ae54:	2d00      	cmp	r5, #0
 800ae56:	d04b      	beq.n	800aef0 <_printf_i+0x1ac>
 800ae58:	4615      	mov	r5, r2
 800ae5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ae62:	5dc7      	ldrb	r7, [r0, r7]
 800ae64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae68:	4637      	mov	r7, r6
 800ae6a:	42bb      	cmp	r3, r7
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	d9f4      	bls.n	800ae5a <_printf_i+0x116>
 800ae70:	2b08      	cmp	r3, #8
 800ae72:	d10b      	bne.n	800ae8c <_printf_i+0x148>
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	07de      	lsls	r6, r3, #31
 800ae78:	d508      	bpl.n	800ae8c <_printf_i+0x148>
 800ae7a:	6923      	ldr	r3, [r4, #16]
 800ae7c:	6861      	ldr	r1, [r4, #4]
 800ae7e:	4299      	cmp	r1, r3
 800ae80:	bfde      	ittt	le
 800ae82:	2330      	movle	r3, #48	; 0x30
 800ae84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae8c:	1b52      	subs	r2, r2, r5
 800ae8e:	6122      	str	r2, [r4, #16]
 800ae90:	f8cd a000 	str.w	sl, [sp]
 800ae94:	464b      	mov	r3, r9
 800ae96:	aa03      	add	r2, sp, #12
 800ae98:	4621      	mov	r1, r4
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	f7ff fee4 	bl	800ac68 <_printf_common>
 800aea0:	3001      	adds	r0, #1
 800aea2:	d14a      	bne.n	800af3a <_printf_i+0x1f6>
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295
 800aea8:	b004      	add	sp, #16
 800aeaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	f043 0320 	orr.w	r3, r3, #32
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	4833      	ldr	r0, [pc, #204]	; (800af84 <_printf_i+0x240>)
 800aeb8:	2778      	movs	r7, #120	; 0x78
 800aeba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	6829      	ldr	r1, [r5, #0]
 800aec2:	061f      	lsls	r7, r3, #24
 800aec4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aec8:	d402      	bmi.n	800aed0 <_printf_i+0x18c>
 800aeca:	065f      	lsls	r7, r3, #25
 800aecc:	bf48      	it	mi
 800aece:	b2b6      	uxthmi	r6, r6
 800aed0:	07df      	lsls	r7, r3, #31
 800aed2:	bf48      	it	mi
 800aed4:	f043 0320 	orrmi.w	r3, r3, #32
 800aed8:	6029      	str	r1, [r5, #0]
 800aeda:	bf48      	it	mi
 800aedc:	6023      	strmi	r3, [r4, #0]
 800aede:	b91e      	cbnz	r6, 800aee8 <_printf_i+0x1a4>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	f023 0320 	bic.w	r3, r3, #32
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	2310      	movs	r3, #16
 800aeea:	e7a7      	b.n	800ae3c <_printf_i+0xf8>
 800aeec:	4824      	ldr	r0, [pc, #144]	; (800af80 <_printf_i+0x23c>)
 800aeee:	e7e4      	b.n	800aeba <_printf_i+0x176>
 800aef0:	4615      	mov	r5, r2
 800aef2:	e7bd      	b.n	800ae70 <_printf_i+0x12c>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	6826      	ldr	r6, [r4, #0]
 800aef8:	6961      	ldr	r1, [r4, #20]
 800aefa:	1d18      	adds	r0, r3, #4
 800aefc:	6028      	str	r0, [r5, #0]
 800aefe:	0635      	lsls	r5, r6, #24
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	d501      	bpl.n	800af08 <_printf_i+0x1c4>
 800af04:	6019      	str	r1, [r3, #0]
 800af06:	e002      	b.n	800af0e <_printf_i+0x1ca>
 800af08:	0670      	lsls	r0, r6, #25
 800af0a:	d5fb      	bpl.n	800af04 <_printf_i+0x1c0>
 800af0c:	8019      	strh	r1, [r3, #0]
 800af0e:	2300      	movs	r3, #0
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	4615      	mov	r5, r2
 800af14:	e7bc      	b.n	800ae90 <_printf_i+0x14c>
 800af16:	682b      	ldr	r3, [r5, #0]
 800af18:	1d1a      	adds	r2, r3, #4
 800af1a:	602a      	str	r2, [r5, #0]
 800af1c:	681d      	ldr	r5, [r3, #0]
 800af1e:	6862      	ldr	r2, [r4, #4]
 800af20:	2100      	movs	r1, #0
 800af22:	4628      	mov	r0, r5
 800af24:	f7f5 f954 	bl	80001d0 <memchr>
 800af28:	b108      	cbz	r0, 800af2e <_printf_i+0x1ea>
 800af2a:	1b40      	subs	r0, r0, r5
 800af2c:	6060      	str	r0, [r4, #4]
 800af2e:	6863      	ldr	r3, [r4, #4]
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	2300      	movs	r3, #0
 800af34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af38:	e7aa      	b.n	800ae90 <_printf_i+0x14c>
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	462a      	mov	r2, r5
 800af3e:	4649      	mov	r1, r9
 800af40:	4640      	mov	r0, r8
 800af42:	47d0      	blx	sl
 800af44:	3001      	adds	r0, #1
 800af46:	d0ad      	beq.n	800aea4 <_printf_i+0x160>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	079b      	lsls	r3, r3, #30
 800af4c:	d413      	bmi.n	800af76 <_printf_i+0x232>
 800af4e:	68e0      	ldr	r0, [r4, #12]
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	4298      	cmp	r0, r3
 800af54:	bfb8      	it	lt
 800af56:	4618      	movlt	r0, r3
 800af58:	e7a6      	b.n	800aea8 <_printf_i+0x164>
 800af5a:	2301      	movs	r3, #1
 800af5c:	4632      	mov	r2, r6
 800af5e:	4649      	mov	r1, r9
 800af60:	4640      	mov	r0, r8
 800af62:	47d0      	blx	sl
 800af64:	3001      	adds	r0, #1
 800af66:	d09d      	beq.n	800aea4 <_printf_i+0x160>
 800af68:	3501      	adds	r5, #1
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	9903      	ldr	r1, [sp, #12]
 800af6e:	1a5b      	subs	r3, r3, r1
 800af70:	42ab      	cmp	r3, r5
 800af72:	dcf2      	bgt.n	800af5a <_printf_i+0x216>
 800af74:	e7eb      	b.n	800af4e <_printf_i+0x20a>
 800af76:	2500      	movs	r5, #0
 800af78:	f104 0619 	add.w	r6, r4, #25
 800af7c:	e7f5      	b.n	800af6a <_printf_i+0x226>
 800af7e:	bf00      	nop
 800af80:	0800f10e 	.word	0x0800f10e
 800af84:	0800f11f 	.word	0x0800f11f

0800af88 <_scanf_float>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	b087      	sub	sp, #28
 800af8e:	4617      	mov	r7, r2
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	688b      	ldr	r3, [r1, #8]
 800af94:	1e5a      	subs	r2, r3, #1
 800af96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af9a:	bf83      	ittte	hi
 800af9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800afa0:	195b      	addhi	r3, r3, r5
 800afa2:	9302      	strhi	r3, [sp, #8]
 800afa4:	2300      	movls	r3, #0
 800afa6:	bf86      	itte	hi
 800afa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800afac:	608b      	strhi	r3, [r1, #8]
 800afae:	9302      	strls	r3, [sp, #8]
 800afb0:	680b      	ldr	r3, [r1, #0]
 800afb2:	468b      	mov	fp, r1
 800afb4:	2500      	movs	r5, #0
 800afb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800afba:	f84b 3b1c 	str.w	r3, [fp], #28
 800afbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800afc2:	4680      	mov	r8, r0
 800afc4:	460c      	mov	r4, r1
 800afc6:	465e      	mov	r6, fp
 800afc8:	46aa      	mov	sl, r5
 800afca:	46a9      	mov	r9, r5
 800afcc:	9501      	str	r5, [sp, #4]
 800afce:	68a2      	ldr	r2, [r4, #8]
 800afd0:	b152      	cbz	r2, 800afe8 <_scanf_float+0x60>
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b4e      	cmp	r3, #78	; 0x4e
 800afd8:	d864      	bhi.n	800b0a4 <_scanf_float+0x11c>
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d83c      	bhi.n	800b058 <_scanf_float+0xd0>
 800afde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800afe2:	b2c8      	uxtb	r0, r1
 800afe4:	280e      	cmp	r0, #14
 800afe6:	d93a      	bls.n	800b05e <_scanf_float+0xd6>
 800afe8:	f1b9 0f00 	cmp.w	r9, #0
 800afec:	d003      	beq.n	800aff6 <_scanf_float+0x6e>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800affa:	f1ba 0f01 	cmp.w	sl, #1
 800affe:	f200 8113 	bhi.w	800b228 <_scanf_float+0x2a0>
 800b002:	455e      	cmp	r6, fp
 800b004:	f200 8105 	bhi.w	800b212 <_scanf_float+0x28a>
 800b008:	2501      	movs	r5, #1
 800b00a:	4628      	mov	r0, r5
 800b00c:	b007      	add	sp, #28
 800b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b012:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b016:	2a0d      	cmp	r2, #13
 800b018:	d8e6      	bhi.n	800afe8 <_scanf_float+0x60>
 800b01a:	a101      	add	r1, pc, #4	; (adr r1, 800b020 <_scanf_float+0x98>)
 800b01c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b020:	0800b15f 	.word	0x0800b15f
 800b024:	0800afe9 	.word	0x0800afe9
 800b028:	0800afe9 	.word	0x0800afe9
 800b02c:	0800afe9 	.word	0x0800afe9
 800b030:	0800b1bf 	.word	0x0800b1bf
 800b034:	0800b197 	.word	0x0800b197
 800b038:	0800afe9 	.word	0x0800afe9
 800b03c:	0800afe9 	.word	0x0800afe9
 800b040:	0800b16d 	.word	0x0800b16d
 800b044:	0800afe9 	.word	0x0800afe9
 800b048:	0800afe9 	.word	0x0800afe9
 800b04c:	0800afe9 	.word	0x0800afe9
 800b050:	0800afe9 	.word	0x0800afe9
 800b054:	0800b125 	.word	0x0800b125
 800b058:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b05c:	e7db      	b.n	800b016 <_scanf_float+0x8e>
 800b05e:	290e      	cmp	r1, #14
 800b060:	d8c2      	bhi.n	800afe8 <_scanf_float+0x60>
 800b062:	a001      	add	r0, pc, #4	; (adr r0, 800b068 <_scanf_float+0xe0>)
 800b064:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b068:	0800b117 	.word	0x0800b117
 800b06c:	0800afe9 	.word	0x0800afe9
 800b070:	0800b117 	.word	0x0800b117
 800b074:	0800b1ab 	.word	0x0800b1ab
 800b078:	0800afe9 	.word	0x0800afe9
 800b07c:	0800b0c5 	.word	0x0800b0c5
 800b080:	0800b101 	.word	0x0800b101
 800b084:	0800b101 	.word	0x0800b101
 800b088:	0800b101 	.word	0x0800b101
 800b08c:	0800b101 	.word	0x0800b101
 800b090:	0800b101 	.word	0x0800b101
 800b094:	0800b101 	.word	0x0800b101
 800b098:	0800b101 	.word	0x0800b101
 800b09c:	0800b101 	.word	0x0800b101
 800b0a0:	0800b101 	.word	0x0800b101
 800b0a4:	2b6e      	cmp	r3, #110	; 0x6e
 800b0a6:	d809      	bhi.n	800b0bc <_scanf_float+0x134>
 800b0a8:	2b60      	cmp	r3, #96	; 0x60
 800b0aa:	d8b2      	bhi.n	800b012 <_scanf_float+0x8a>
 800b0ac:	2b54      	cmp	r3, #84	; 0x54
 800b0ae:	d077      	beq.n	800b1a0 <_scanf_float+0x218>
 800b0b0:	2b59      	cmp	r3, #89	; 0x59
 800b0b2:	d199      	bne.n	800afe8 <_scanf_float+0x60>
 800b0b4:	2d07      	cmp	r5, #7
 800b0b6:	d197      	bne.n	800afe8 <_scanf_float+0x60>
 800b0b8:	2508      	movs	r5, #8
 800b0ba:	e029      	b.n	800b110 <_scanf_float+0x188>
 800b0bc:	2b74      	cmp	r3, #116	; 0x74
 800b0be:	d06f      	beq.n	800b1a0 <_scanf_float+0x218>
 800b0c0:	2b79      	cmp	r3, #121	; 0x79
 800b0c2:	e7f6      	b.n	800b0b2 <_scanf_float+0x12a>
 800b0c4:	6821      	ldr	r1, [r4, #0]
 800b0c6:	05c8      	lsls	r0, r1, #23
 800b0c8:	d51a      	bpl.n	800b100 <_scanf_float+0x178>
 800b0ca:	9b02      	ldr	r3, [sp, #8]
 800b0cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b0d0:	6021      	str	r1, [r4, #0]
 800b0d2:	f109 0901 	add.w	r9, r9, #1
 800b0d6:	b11b      	cbz	r3, 800b0e0 <_scanf_float+0x158>
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	3201      	adds	r2, #1
 800b0dc:	9302      	str	r3, [sp, #8]
 800b0de:	60a2      	str	r2, [r4, #8]
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	60a3      	str	r3, [r4, #8]
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	607b      	str	r3, [r7, #4]
 800b0f4:	f340 8084 	ble.w	800b200 <_scanf_float+0x278>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	603b      	str	r3, [r7, #0]
 800b0fe:	e766      	b.n	800afce <_scanf_float+0x46>
 800b100:	eb1a 0f05 	cmn.w	sl, r5
 800b104:	f47f af70 	bne.w	800afe8 <_scanf_float+0x60>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b10e:	6022      	str	r2, [r4, #0]
 800b110:	f806 3b01 	strb.w	r3, [r6], #1
 800b114:	e7e4      	b.n	800b0e0 <_scanf_float+0x158>
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	0610      	lsls	r0, r2, #24
 800b11a:	f57f af65 	bpl.w	800afe8 <_scanf_float+0x60>
 800b11e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b122:	e7f4      	b.n	800b10e <_scanf_float+0x186>
 800b124:	f1ba 0f00 	cmp.w	sl, #0
 800b128:	d10e      	bne.n	800b148 <_scanf_float+0x1c0>
 800b12a:	f1b9 0f00 	cmp.w	r9, #0
 800b12e:	d10e      	bne.n	800b14e <_scanf_float+0x1c6>
 800b130:	6822      	ldr	r2, [r4, #0]
 800b132:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b136:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b13a:	d108      	bne.n	800b14e <_scanf_float+0x1c6>
 800b13c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b140:	6022      	str	r2, [r4, #0]
 800b142:	f04f 0a01 	mov.w	sl, #1
 800b146:	e7e3      	b.n	800b110 <_scanf_float+0x188>
 800b148:	f1ba 0f02 	cmp.w	sl, #2
 800b14c:	d055      	beq.n	800b1fa <_scanf_float+0x272>
 800b14e:	2d01      	cmp	r5, #1
 800b150:	d002      	beq.n	800b158 <_scanf_float+0x1d0>
 800b152:	2d04      	cmp	r5, #4
 800b154:	f47f af48 	bne.w	800afe8 <_scanf_float+0x60>
 800b158:	3501      	adds	r5, #1
 800b15a:	b2ed      	uxtb	r5, r5
 800b15c:	e7d8      	b.n	800b110 <_scanf_float+0x188>
 800b15e:	f1ba 0f01 	cmp.w	sl, #1
 800b162:	f47f af41 	bne.w	800afe8 <_scanf_float+0x60>
 800b166:	f04f 0a02 	mov.w	sl, #2
 800b16a:	e7d1      	b.n	800b110 <_scanf_float+0x188>
 800b16c:	b97d      	cbnz	r5, 800b18e <_scanf_float+0x206>
 800b16e:	f1b9 0f00 	cmp.w	r9, #0
 800b172:	f47f af3c 	bne.w	800afee <_scanf_float+0x66>
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b17c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b180:	f47f af39 	bne.w	800aff6 <_scanf_float+0x6e>
 800b184:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b188:	6022      	str	r2, [r4, #0]
 800b18a:	2501      	movs	r5, #1
 800b18c:	e7c0      	b.n	800b110 <_scanf_float+0x188>
 800b18e:	2d03      	cmp	r5, #3
 800b190:	d0e2      	beq.n	800b158 <_scanf_float+0x1d0>
 800b192:	2d05      	cmp	r5, #5
 800b194:	e7de      	b.n	800b154 <_scanf_float+0x1cc>
 800b196:	2d02      	cmp	r5, #2
 800b198:	f47f af26 	bne.w	800afe8 <_scanf_float+0x60>
 800b19c:	2503      	movs	r5, #3
 800b19e:	e7b7      	b.n	800b110 <_scanf_float+0x188>
 800b1a0:	2d06      	cmp	r5, #6
 800b1a2:	f47f af21 	bne.w	800afe8 <_scanf_float+0x60>
 800b1a6:	2507      	movs	r5, #7
 800b1a8:	e7b2      	b.n	800b110 <_scanf_float+0x188>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	0591      	lsls	r1, r2, #22
 800b1ae:	f57f af1b 	bpl.w	800afe8 <_scanf_float+0x60>
 800b1b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1bc:	e7a8      	b.n	800b110 <_scanf_float+0x188>
 800b1be:	6822      	ldr	r2, [r4, #0]
 800b1c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b1c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b1c8:	d006      	beq.n	800b1d8 <_scanf_float+0x250>
 800b1ca:	0550      	lsls	r0, r2, #21
 800b1cc:	f57f af0c 	bpl.w	800afe8 <_scanf_float+0x60>
 800b1d0:	f1b9 0f00 	cmp.w	r9, #0
 800b1d4:	f43f af0f 	beq.w	800aff6 <_scanf_float+0x6e>
 800b1d8:	0591      	lsls	r1, r2, #22
 800b1da:	bf58      	it	pl
 800b1dc:	9901      	ldrpl	r1, [sp, #4]
 800b1de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b1e2:	bf58      	it	pl
 800b1e4:	eba9 0101 	subpl.w	r1, r9, r1
 800b1e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b1ec:	bf58      	it	pl
 800b1ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1f2:	6022      	str	r2, [r4, #0]
 800b1f4:	f04f 0900 	mov.w	r9, #0
 800b1f8:	e78a      	b.n	800b110 <_scanf_float+0x188>
 800b1fa:	f04f 0a03 	mov.w	sl, #3
 800b1fe:	e787      	b.n	800b110 <_scanf_float+0x188>
 800b200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b204:	4639      	mov	r1, r7
 800b206:	4640      	mov	r0, r8
 800b208:	4798      	blx	r3
 800b20a:	2800      	cmp	r0, #0
 800b20c:	f43f aedf 	beq.w	800afce <_scanf_float+0x46>
 800b210:	e6ea      	b.n	800afe8 <_scanf_float+0x60>
 800b212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b21a:	463a      	mov	r2, r7
 800b21c:	4640      	mov	r0, r8
 800b21e:	4798      	blx	r3
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	3b01      	subs	r3, #1
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	e6ec      	b.n	800b002 <_scanf_float+0x7a>
 800b228:	1e6b      	subs	r3, r5, #1
 800b22a:	2b06      	cmp	r3, #6
 800b22c:	d825      	bhi.n	800b27a <_scanf_float+0x2f2>
 800b22e:	2d02      	cmp	r5, #2
 800b230:	d836      	bhi.n	800b2a0 <_scanf_float+0x318>
 800b232:	455e      	cmp	r6, fp
 800b234:	f67f aee8 	bls.w	800b008 <_scanf_float+0x80>
 800b238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b23c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b240:	463a      	mov	r2, r7
 800b242:	4640      	mov	r0, r8
 800b244:	4798      	blx	r3
 800b246:	6923      	ldr	r3, [r4, #16]
 800b248:	3b01      	subs	r3, #1
 800b24a:	6123      	str	r3, [r4, #16]
 800b24c:	e7f1      	b.n	800b232 <_scanf_float+0x2aa>
 800b24e:	9802      	ldr	r0, [sp, #8]
 800b250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b254:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b258:	9002      	str	r0, [sp, #8]
 800b25a:	463a      	mov	r2, r7
 800b25c:	4640      	mov	r0, r8
 800b25e:	4798      	blx	r3
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	3b01      	subs	r3, #1
 800b264:	6123      	str	r3, [r4, #16]
 800b266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b26a:	fa5f fa8a 	uxtb.w	sl, sl
 800b26e:	f1ba 0f02 	cmp.w	sl, #2
 800b272:	d1ec      	bne.n	800b24e <_scanf_float+0x2c6>
 800b274:	3d03      	subs	r5, #3
 800b276:	b2ed      	uxtb	r5, r5
 800b278:	1b76      	subs	r6, r6, r5
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	05da      	lsls	r2, r3, #23
 800b27e:	d52f      	bpl.n	800b2e0 <_scanf_float+0x358>
 800b280:	055b      	lsls	r3, r3, #21
 800b282:	d510      	bpl.n	800b2a6 <_scanf_float+0x31e>
 800b284:	455e      	cmp	r6, fp
 800b286:	f67f aebf 	bls.w	800b008 <_scanf_float+0x80>
 800b28a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b28e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b292:	463a      	mov	r2, r7
 800b294:	4640      	mov	r0, r8
 800b296:	4798      	blx	r3
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	e7f1      	b.n	800b284 <_scanf_float+0x2fc>
 800b2a0:	46aa      	mov	sl, r5
 800b2a2:	9602      	str	r6, [sp, #8]
 800b2a4:	e7df      	b.n	800b266 <_scanf_float+0x2de>
 800b2a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	2965      	cmp	r1, #101	; 0x65
 800b2ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	d00c      	beq.n	800b2d4 <_scanf_float+0x34c>
 800b2ba:	2945      	cmp	r1, #69	; 0x45
 800b2bc:	d00a      	beq.n	800b2d4 <_scanf_float+0x34c>
 800b2be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4798      	blx	r3
 800b2c8:	6923      	ldr	r3, [r4, #16]
 800b2ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	1eb5      	subs	r5, r6, #2
 800b2d2:	6123      	str	r3, [r4, #16]
 800b2d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2d8:	463a      	mov	r2, r7
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4798      	blx	r3
 800b2de:	462e      	mov	r6, r5
 800b2e0:	6825      	ldr	r5, [r4, #0]
 800b2e2:	f015 0510 	ands.w	r5, r5, #16
 800b2e6:	d158      	bne.n	800b39a <_scanf_float+0x412>
 800b2e8:	7035      	strb	r5, [r6, #0]
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2f4:	d11c      	bne.n	800b330 <_scanf_float+0x3a8>
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	454b      	cmp	r3, r9
 800b2fa:	eba3 0209 	sub.w	r2, r3, r9
 800b2fe:	d124      	bne.n	800b34a <_scanf_float+0x3c2>
 800b300:	2200      	movs	r2, #0
 800b302:	4659      	mov	r1, fp
 800b304:	4640      	mov	r0, r8
 800b306:	f002 fca7 	bl	800dc58 <_strtod_r>
 800b30a:	9b03      	ldr	r3, [sp, #12]
 800b30c:	6821      	ldr	r1, [r4, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f011 0f02 	tst.w	r1, #2
 800b314:	ec57 6b10 	vmov	r6, r7, d0
 800b318:	f103 0204 	add.w	r2, r3, #4
 800b31c:	d020      	beq.n	800b360 <_scanf_float+0x3d8>
 800b31e:	9903      	ldr	r1, [sp, #12]
 800b320:	600a      	str	r2, [r1, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	e9c3 6700 	strd	r6, r7, [r3]
 800b328:	68e3      	ldr	r3, [r4, #12]
 800b32a:	3301      	adds	r3, #1
 800b32c:	60e3      	str	r3, [r4, #12]
 800b32e:	e66c      	b.n	800b00a <_scanf_float+0x82>
 800b330:	9b04      	ldr	r3, [sp, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0e4      	beq.n	800b300 <_scanf_float+0x378>
 800b336:	9905      	ldr	r1, [sp, #20]
 800b338:	230a      	movs	r3, #10
 800b33a:	462a      	mov	r2, r5
 800b33c:	3101      	adds	r1, #1
 800b33e:	4640      	mov	r0, r8
 800b340:	f002 fd12 	bl	800dd68 <_strtol_r>
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	9e05      	ldr	r6, [sp, #20]
 800b348:	1ac2      	subs	r2, r0, r3
 800b34a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b34e:	429e      	cmp	r6, r3
 800b350:	bf28      	it	cs
 800b352:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b356:	4912      	ldr	r1, [pc, #72]	; (800b3a0 <_scanf_float+0x418>)
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 f8e7 	bl	800b52c <siprintf>
 800b35e:	e7cf      	b.n	800b300 <_scanf_float+0x378>
 800b360:	f011 0f04 	tst.w	r1, #4
 800b364:	9903      	ldr	r1, [sp, #12]
 800b366:	600a      	str	r2, [r1, #0]
 800b368:	d1db      	bne.n	800b322 <_scanf_float+0x39a>
 800b36a:	f8d3 8000 	ldr.w	r8, [r3]
 800b36e:	ee10 2a10 	vmov	r2, s0
 800b372:	ee10 0a10 	vmov	r0, s0
 800b376:	463b      	mov	r3, r7
 800b378:	4639      	mov	r1, r7
 800b37a:	f7f5 fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800b37e:	b128      	cbz	r0, 800b38c <_scanf_float+0x404>
 800b380:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <_scanf_float+0x41c>)
 800b382:	f000 fa2d 	bl	800b7e0 <nanf>
 800b386:	ed88 0a00 	vstr	s0, [r8]
 800b38a:	e7cd      	b.n	800b328 <_scanf_float+0x3a0>
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f5 fc2a 	bl	8000be8 <__aeabi_d2f>
 800b394:	f8c8 0000 	str.w	r0, [r8]
 800b398:	e7c6      	b.n	800b328 <_scanf_float+0x3a0>
 800b39a:	2500      	movs	r5, #0
 800b39c:	e635      	b.n	800b00a <_scanf_float+0x82>
 800b39e:	bf00      	nop
 800b3a0:	0800f130 	.word	0x0800f130
 800b3a4:	0800f4c5 	.word	0x0800f4c5

0800b3a8 <std>:
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3b6:	6083      	str	r3, [r0, #8]
 800b3b8:	8181      	strh	r1, [r0, #12]
 800b3ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b3bc:	81c2      	strh	r2, [r0, #14]
 800b3be:	6183      	str	r3, [r0, #24]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	2208      	movs	r2, #8
 800b3c4:	305c      	adds	r0, #92	; 0x5c
 800b3c6:	f000 f914 	bl	800b5f2 <memset>
 800b3ca:	4b0d      	ldr	r3, [pc, #52]	; (800b400 <std+0x58>)
 800b3cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b3ce:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <std+0x5c>)
 800b3d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <std+0x60>)
 800b3d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <std+0x64>)
 800b3d8:	6323      	str	r3, [r4, #48]	; 0x30
 800b3da:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <std+0x68>)
 800b3dc:	6224      	str	r4, [r4, #32]
 800b3de:	429c      	cmp	r4, r3
 800b3e0:	d006      	beq.n	800b3f0 <std+0x48>
 800b3e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b3e6:	4294      	cmp	r4, r2
 800b3e8:	d002      	beq.n	800b3f0 <std+0x48>
 800b3ea:	33d0      	adds	r3, #208	; 0xd0
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d105      	bne.n	800b3fc <std+0x54>
 800b3f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f000 b9e0 	b.w	800b7bc <__retarget_lock_init_recursive>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	0800b56d 	.word	0x0800b56d
 800b404:	0800b58f 	.word	0x0800b58f
 800b408:	0800b5c7 	.word	0x0800b5c7
 800b40c:	0800b5eb 	.word	0x0800b5eb
 800b410:	20001e70 	.word	0x20001e70

0800b414 <stdio_exit_handler>:
 800b414:	4a02      	ldr	r2, [pc, #8]	; (800b420 <stdio_exit_handler+0xc>)
 800b416:	4903      	ldr	r1, [pc, #12]	; (800b424 <stdio_exit_handler+0x10>)
 800b418:	4803      	ldr	r0, [pc, #12]	; (800b428 <stdio_exit_handler+0x14>)
 800b41a:	f000 b869 	b.w	800b4f0 <_fwalk_sglue>
 800b41e:	bf00      	nop
 800b420:	20000010 	.word	0x20000010
 800b424:	0800e129 	.word	0x0800e129
 800b428:	2000001c 	.word	0x2000001c

0800b42c <cleanup_stdio>:
 800b42c:	6841      	ldr	r1, [r0, #4]
 800b42e:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <cleanup_stdio+0x34>)
 800b430:	4299      	cmp	r1, r3
 800b432:	b510      	push	{r4, lr}
 800b434:	4604      	mov	r4, r0
 800b436:	d001      	beq.n	800b43c <cleanup_stdio+0x10>
 800b438:	f002 fe76 	bl	800e128 <_fflush_r>
 800b43c:	68a1      	ldr	r1, [r4, #8]
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <cleanup_stdio+0x38>)
 800b440:	4299      	cmp	r1, r3
 800b442:	d002      	beq.n	800b44a <cleanup_stdio+0x1e>
 800b444:	4620      	mov	r0, r4
 800b446:	f002 fe6f 	bl	800e128 <_fflush_r>
 800b44a:	68e1      	ldr	r1, [r4, #12]
 800b44c:	4b06      	ldr	r3, [pc, #24]	; (800b468 <cleanup_stdio+0x3c>)
 800b44e:	4299      	cmp	r1, r3
 800b450:	d004      	beq.n	800b45c <cleanup_stdio+0x30>
 800b452:	4620      	mov	r0, r4
 800b454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b458:	f002 be66 	b.w	800e128 <_fflush_r>
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	bf00      	nop
 800b460:	20001e70 	.word	0x20001e70
 800b464:	20001ed8 	.word	0x20001ed8
 800b468:	20001f40 	.word	0x20001f40

0800b46c <global_stdio_init.part.0>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	4b0b      	ldr	r3, [pc, #44]	; (800b49c <global_stdio_init.part.0+0x30>)
 800b470:	4c0b      	ldr	r4, [pc, #44]	; (800b4a0 <global_stdio_init.part.0+0x34>)
 800b472:	4a0c      	ldr	r2, [pc, #48]	; (800b4a4 <global_stdio_init.part.0+0x38>)
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	4620      	mov	r0, r4
 800b478:	2200      	movs	r2, #0
 800b47a:	2104      	movs	r1, #4
 800b47c:	f7ff ff94 	bl	800b3a8 <std>
 800b480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b484:	2201      	movs	r2, #1
 800b486:	2109      	movs	r1, #9
 800b488:	f7ff ff8e 	bl	800b3a8 <std>
 800b48c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b490:	2202      	movs	r2, #2
 800b492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b496:	2112      	movs	r1, #18
 800b498:	f7ff bf86 	b.w	800b3a8 <std>
 800b49c:	20001fa8 	.word	0x20001fa8
 800b4a0:	20001e70 	.word	0x20001e70
 800b4a4:	0800b415 	.word	0x0800b415

0800b4a8 <__sfp_lock_acquire>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__sfp_lock_acquire+0x8>)
 800b4aa:	f000 b988 	b.w	800b7be <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20001fb1 	.word	0x20001fb1

0800b4b4 <__sfp_lock_release>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	; (800b4bc <__sfp_lock_release+0x8>)
 800b4b6:	f000 b983 	b.w	800b7c0 <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	20001fb1 	.word	0x20001fb1

0800b4c0 <__sinit>:
 800b4c0:	b510      	push	{r4, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	f7ff fff0 	bl	800b4a8 <__sfp_lock_acquire>
 800b4c8:	6a23      	ldr	r3, [r4, #32]
 800b4ca:	b11b      	cbz	r3, 800b4d4 <__sinit+0x14>
 800b4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d0:	f7ff bff0 	b.w	800b4b4 <__sfp_lock_release>
 800b4d4:	4b04      	ldr	r3, [pc, #16]	; (800b4e8 <__sinit+0x28>)
 800b4d6:	6223      	str	r3, [r4, #32]
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <__sinit+0x2c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1f5      	bne.n	800b4cc <__sinit+0xc>
 800b4e0:	f7ff ffc4 	bl	800b46c <global_stdio_init.part.0>
 800b4e4:	e7f2      	b.n	800b4cc <__sinit+0xc>
 800b4e6:	bf00      	nop
 800b4e8:	0800b42d 	.word	0x0800b42d
 800b4ec:	20001fa8 	.word	0x20001fa8

0800b4f0 <_fwalk_sglue>:
 800b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	4688      	mov	r8, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b500:	f1b9 0901 	subs.w	r9, r9, #1
 800b504:	d505      	bpl.n	800b512 <_fwalk_sglue+0x22>
 800b506:	6824      	ldr	r4, [r4, #0]
 800b508:	2c00      	cmp	r4, #0
 800b50a:	d1f7      	bne.n	800b4fc <_fwalk_sglue+0xc>
 800b50c:	4630      	mov	r0, r6
 800b50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d907      	bls.n	800b528 <_fwalk_sglue+0x38>
 800b518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b51c:	3301      	adds	r3, #1
 800b51e:	d003      	beq.n	800b528 <_fwalk_sglue+0x38>
 800b520:	4629      	mov	r1, r5
 800b522:	4638      	mov	r0, r7
 800b524:	47c0      	blx	r8
 800b526:	4306      	orrs	r6, r0
 800b528:	3568      	adds	r5, #104	; 0x68
 800b52a:	e7e9      	b.n	800b500 <_fwalk_sglue+0x10>

0800b52c <siprintf>:
 800b52c:	b40e      	push	{r1, r2, r3}
 800b52e:	b500      	push	{lr}
 800b530:	b09c      	sub	sp, #112	; 0x70
 800b532:	ab1d      	add	r3, sp, #116	; 0x74
 800b534:	9002      	str	r0, [sp, #8]
 800b536:	9006      	str	r0, [sp, #24]
 800b538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b53c:	4809      	ldr	r0, [pc, #36]	; (800b564 <siprintf+0x38>)
 800b53e:	9107      	str	r1, [sp, #28]
 800b540:	9104      	str	r1, [sp, #16]
 800b542:	4909      	ldr	r1, [pc, #36]	; (800b568 <siprintf+0x3c>)
 800b544:	f853 2b04 	ldr.w	r2, [r3], #4
 800b548:	9105      	str	r1, [sp, #20]
 800b54a:	6800      	ldr	r0, [r0, #0]
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	a902      	add	r1, sp, #8
 800b550:	f002 fc66 	bl	800de20 <_svfiprintf_r>
 800b554:	9b02      	ldr	r3, [sp, #8]
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	b01c      	add	sp, #112	; 0x70
 800b55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b560:	b003      	add	sp, #12
 800b562:	4770      	bx	lr
 800b564:	20000068 	.word	0x20000068
 800b568:	ffff0208 	.word	0xffff0208

0800b56c <__sread>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	460c      	mov	r4, r1
 800b570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b574:	f000 f8d4 	bl	800b720 <_read_r>
 800b578:	2800      	cmp	r0, #0
 800b57a:	bfab      	itete	ge
 800b57c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b57e:	89a3      	ldrhlt	r3, [r4, #12]
 800b580:	181b      	addge	r3, r3, r0
 800b582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b586:	bfac      	ite	ge
 800b588:	6563      	strge	r3, [r4, #84]	; 0x54
 800b58a:	81a3      	strhlt	r3, [r4, #12]
 800b58c:	bd10      	pop	{r4, pc}

0800b58e <__swrite>:
 800b58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b592:	461f      	mov	r7, r3
 800b594:	898b      	ldrh	r3, [r1, #12]
 800b596:	05db      	lsls	r3, r3, #23
 800b598:	4605      	mov	r5, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	4616      	mov	r6, r2
 800b59e:	d505      	bpl.n	800b5ac <__swrite+0x1e>
 800b5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f000 f8a8 	bl	800b6fc <_lseek_r>
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5b6:	81a3      	strh	r3, [r4, #12]
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	4628      	mov	r0, r5
 800b5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	f000 b8bf 	b.w	800b744 <_write_r>

0800b5c6 <__sseek>:
 800b5c6:	b510      	push	{r4, lr}
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ce:	f000 f895 	bl	800b6fc <_lseek_r>
 800b5d2:	1c43      	adds	r3, r0, #1
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	bf15      	itete	ne
 800b5d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5e2:	81a3      	strheq	r3, [r4, #12]
 800b5e4:	bf18      	it	ne
 800b5e6:	81a3      	strhne	r3, [r4, #12]
 800b5e8:	bd10      	pop	{r4, pc}

0800b5ea <__sclose>:
 800b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ee:	f000 b81f 	b.w	800b630 <_close_r>

0800b5f2 <memset>:
 800b5f2:	4402      	add	r2, r0
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d100      	bne.n	800b5fc <memset+0xa>
 800b5fa:	4770      	bx	lr
 800b5fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b600:	e7f9      	b.n	800b5f6 <memset+0x4>

0800b602 <strncpy>:
 800b602:	b510      	push	{r4, lr}
 800b604:	3901      	subs	r1, #1
 800b606:	4603      	mov	r3, r0
 800b608:	b132      	cbz	r2, 800b618 <strncpy+0x16>
 800b60a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b60e:	f803 4b01 	strb.w	r4, [r3], #1
 800b612:	3a01      	subs	r2, #1
 800b614:	2c00      	cmp	r4, #0
 800b616:	d1f7      	bne.n	800b608 <strncpy+0x6>
 800b618:	441a      	add	r2, r3
 800b61a:	2100      	movs	r1, #0
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d100      	bne.n	800b622 <strncpy+0x20>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	f803 1b01 	strb.w	r1, [r3], #1
 800b626:	e7f9      	b.n	800b61c <strncpy+0x1a>

0800b628 <_localeconv_r>:
 800b628:	4800      	ldr	r0, [pc, #0]	; (800b62c <_localeconv_r+0x4>)
 800b62a:	4770      	bx	lr
 800b62c:	2000015c 	.word	0x2000015c

0800b630 <_close_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d06      	ldr	r5, [pc, #24]	; (800b64c <_close_r+0x1c>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	f7f6 fc47 	bl	8001ece <_close>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_close_r+0x1a>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_close_r+0x1a>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20001fac 	.word	0x20001fac

0800b650 <_reclaim_reent>:
 800b650:	4b29      	ldr	r3, [pc, #164]	; (800b6f8 <_reclaim_reent+0xa8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4283      	cmp	r3, r0
 800b656:	b570      	push	{r4, r5, r6, lr}
 800b658:	4604      	mov	r4, r0
 800b65a:	d04b      	beq.n	800b6f4 <_reclaim_reent+0xa4>
 800b65c:	69c3      	ldr	r3, [r0, #28]
 800b65e:	b143      	cbz	r3, 800b672 <_reclaim_reent+0x22>
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d144      	bne.n	800b6f0 <_reclaim_reent+0xa0>
 800b666:	69e3      	ldr	r3, [r4, #28]
 800b668:	6819      	ldr	r1, [r3, #0]
 800b66a:	b111      	cbz	r1, 800b672 <_reclaim_reent+0x22>
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 ff39 	bl	800c4e4 <_free_r>
 800b672:	6961      	ldr	r1, [r4, #20]
 800b674:	b111      	cbz	r1, 800b67c <_reclaim_reent+0x2c>
 800b676:	4620      	mov	r0, r4
 800b678:	f000 ff34 	bl	800c4e4 <_free_r>
 800b67c:	69e1      	ldr	r1, [r4, #28]
 800b67e:	b111      	cbz	r1, 800b686 <_reclaim_reent+0x36>
 800b680:	4620      	mov	r0, r4
 800b682:	f000 ff2f 	bl	800c4e4 <_free_r>
 800b686:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b688:	b111      	cbz	r1, 800b690 <_reclaim_reent+0x40>
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 ff2a 	bl	800c4e4 <_free_r>
 800b690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b692:	b111      	cbz	r1, 800b69a <_reclaim_reent+0x4a>
 800b694:	4620      	mov	r0, r4
 800b696:	f000 ff25 	bl	800c4e4 <_free_r>
 800b69a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b69c:	b111      	cbz	r1, 800b6a4 <_reclaim_reent+0x54>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 ff20 	bl	800c4e4 <_free_r>
 800b6a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b6a6:	b111      	cbz	r1, 800b6ae <_reclaim_reent+0x5e>
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 ff1b 	bl	800c4e4 <_free_r>
 800b6ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b6b0:	b111      	cbz	r1, 800b6b8 <_reclaim_reent+0x68>
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 ff16 	bl	800c4e4 <_free_r>
 800b6b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b6ba:	b111      	cbz	r1, 800b6c2 <_reclaim_reent+0x72>
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 ff11 	bl	800c4e4 <_free_r>
 800b6c2:	6a23      	ldr	r3, [r4, #32]
 800b6c4:	b1b3      	cbz	r3, 800b6f4 <_reclaim_reent+0xa4>
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6cc:	4718      	bx	r3
 800b6ce:	5949      	ldr	r1, [r1, r5]
 800b6d0:	b941      	cbnz	r1, 800b6e4 <_reclaim_reent+0x94>
 800b6d2:	3504      	adds	r5, #4
 800b6d4:	69e3      	ldr	r3, [r4, #28]
 800b6d6:	2d80      	cmp	r5, #128	; 0x80
 800b6d8:	68d9      	ldr	r1, [r3, #12]
 800b6da:	d1f8      	bne.n	800b6ce <_reclaim_reent+0x7e>
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f000 ff01 	bl	800c4e4 <_free_r>
 800b6e2:	e7c0      	b.n	800b666 <_reclaim_reent+0x16>
 800b6e4:	680e      	ldr	r6, [r1, #0]
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fefc 	bl	800c4e4 <_free_r>
 800b6ec:	4631      	mov	r1, r6
 800b6ee:	e7ef      	b.n	800b6d0 <_reclaim_reent+0x80>
 800b6f0:	2500      	movs	r5, #0
 800b6f2:	e7ef      	b.n	800b6d4 <_reclaim_reent+0x84>
 800b6f4:	bd70      	pop	{r4, r5, r6, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000068 	.word	0x20000068

0800b6fc <_lseek_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_lseek_r+0x20>)
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	2200      	movs	r2, #0
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7f6 fc06 	bl	8001f1c <_lseek>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_lseek_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_lseek_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	20001fac 	.word	0x20001fac

0800b720 <_read_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d07      	ldr	r5, [pc, #28]	; (800b740 <_read_r+0x20>)
 800b724:	4604      	mov	r4, r0
 800b726:	4608      	mov	r0, r1
 800b728:	4611      	mov	r1, r2
 800b72a:	2200      	movs	r2, #0
 800b72c:	602a      	str	r2, [r5, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	f7f6 fb94 	bl	8001e5c <_read>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_read_r+0x1e>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_read_r+0x1e>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	20001fac 	.word	0x20001fac

0800b744 <_write_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d07      	ldr	r5, [pc, #28]	; (800b764 <_write_r+0x20>)
 800b748:	4604      	mov	r4, r0
 800b74a:	4608      	mov	r0, r1
 800b74c:	4611      	mov	r1, r2
 800b74e:	2200      	movs	r2, #0
 800b750:	602a      	str	r2, [r5, #0]
 800b752:	461a      	mov	r2, r3
 800b754:	f7f6 fb9f 	bl	8001e96 <_write>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_write_r+0x1e>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_write_r+0x1e>
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	20001fac 	.word	0x20001fac

0800b768 <__errno>:
 800b768:	4b01      	ldr	r3, [pc, #4]	; (800b770 <__errno+0x8>)
 800b76a:	6818      	ldr	r0, [r3, #0]
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20000068 	.word	0x20000068

0800b774 <__libc_init_array>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4d0d      	ldr	r5, [pc, #52]	; (800b7ac <__libc_init_array+0x38>)
 800b778:	4c0d      	ldr	r4, [pc, #52]	; (800b7b0 <__libc_init_array+0x3c>)
 800b77a:	1b64      	subs	r4, r4, r5
 800b77c:	10a4      	asrs	r4, r4, #2
 800b77e:	2600      	movs	r6, #0
 800b780:	42a6      	cmp	r6, r4
 800b782:	d109      	bne.n	800b798 <__libc_init_array+0x24>
 800b784:	4d0b      	ldr	r5, [pc, #44]	; (800b7b4 <__libc_init_array+0x40>)
 800b786:	4c0c      	ldr	r4, [pc, #48]	; (800b7b8 <__libc_init_array+0x44>)
 800b788:	f003 fbd6 	bl	800ef38 <_init>
 800b78c:	1b64      	subs	r4, r4, r5
 800b78e:	10a4      	asrs	r4, r4, #2
 800b790:	2600      	movs	r6, #0
 800b792:	42a6      	cmp	r6, r4
 800b794:	d105      	bne.n	800b7a2 <__libc_init_array+0x2e>
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	f855 3b04 	ldr.w	r3, [r5], #4
 800b79c:	4798      	blx	r3
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7ee      	b.n	800b780 <__libc_init_array+0xc>
 800b7a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a6:	4798      	blx	r3
 800b7a8:	3601      	adds	r6, #1
 800b7aa:	e7f2      	b.n	800b792 <__libc_init_array+0x1e>
 800b7ac:	0800f530 	.word	0x0800f530
 800b7b0:	0800f530 	.word	0x0800f530
 800b7b4:	0800f530 	.word	0x0800f530
 800b7b8:	0800f534 	.word	0x0800f534

0800b7bc <__retarget_lock_init_recursive>:
 800b7bc:	4770      	bx	lr

0800b7be <__retarget_lock_acquire_recursive>:
 800b7be:	4770      	bx	lr

0800b7c0 <__retarget_lock_release_recursive>:
 800b7c0:	4770      	bx	lr

0800b7c2 <memcpy>:
 800b7c2:	440a      	add	r2, r1
 800b7c4:	4291      	cmp	r1, r2
 800b7c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7ca:	d100      	bne.n	800b7ce <memcpy+0xc>
 800b7cc:	4770      	bx	lr
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7d8:	4291      	cmp	r1, r2
 800b7da:	d1f9      	bne.n	800b7d0 <memcpy+0xe>
 800b7dc:	bd10      	pop	{r4, pc}
	...

0800b7e0 <nanf>:
 800b7e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b7e8 <nanf+0x8>
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	7fc00000 	.word	0x7fc00000

0800b7ec <quorem>:
 800b7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	6903      	ldr	r3, [r0, #16]
 800b7f2:	690c      	ldr	r4, [r1, #16]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	db7e      	blt.n	800b8f8 <quorem+0x10c>
 800b7fa:	3c01      	subs	r4, #1
 800b7fc:	f101 0814 	add.w	r8, r1, #20
 800b800:	f100 0514 	add.w	r5, r0, #20
 800b804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b80e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b812:	3301      	adds	r3, #1
 800b814:	429a      	cmp	r2, r3
 800b816:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b81a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b81e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b822:	d331      	bcc.n	800b888 <quorem+0x9c>
 800b824:	f04f 0e00 	mov.w	lr, #0
 800b828:	4640      	mov	r0, r8
 800b82a:	46ac      	mov	ip, r5
 800b82c:	46f2      	mov	sl, lr
 800b82e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b832:	b293      	uxth	r3, r2
 800b834:	fb06 e303 	mla	r3, r6, r3, lr
 800b838:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b83c:	0c1a      	lsrs	r2, r3, #16
 800b83e:	b29b      	uxth	r3, r3
 800b840:	ebaa 0303 	sub.w	r3, sl, r3
 800b844:	f8dc a000 	ldr.w	sl, [ip]
 800b848:	fa13 f38a 	uxtah	r3, r3, sl
 800b84c:	fb06 220e 	mla	r2, r6, lr, r2
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b858:	b292      	uxth	r2, r2
 800b85a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b85e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b862:	f8bd 3000 	ldrh.w	r3, [sp]
 800b866:	4581      	cmp	r9, r0
 800b868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b86c:	f84c 3b04 	str.w	r3, [ip], #4
 800b870:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b874:	d2db      	bcs.n	800b82e <quorem+0x42>
 800b876:	f855 300b 	ldr.w	r3, [r5, fp]
 800b87a:	b92b      	cbnz	r3, 800b888 <quorem+0x9c>
 800b87c:	9b01      	ldr	r3, [sp, #4]
 800b87e:	3b04      	subs	r3, #4
 800b880:	429d      	cmp	r5, r3
 800b882:	461a      	mov	r2, r3
 800b884:	d32c      	bcc.n	800b8e0 <quorem+0xf4>
 800b886:	613c      	str	r4, [r7, #16]
 800b888:	4638      	mov	r0, r7
 800b88a:	f001 f9f1 	bl	800cc70 <__mcmp>
 800b88e:	2800      	cmp	r0, #0
 800b890:	db22      	blt.n	800b8d8 <quorem+0xec>
 800b892:	3601      	adds	r6, #1
 800b894:	4629      	mov	r1, r5
 800b896:	2000      	movs	r0, #0
 800b898:	f858 2b04 	ldr.w	r2, [r8], #4
 800b89c:	f8d1 c000 	ldr.w	ip, [r1]
 800b8a0:	b293      	uxth	r3, r2
 800b8a2:	1ac3      	subs	r3, r0, r3
 800b8a4:	0c12      	lsrs	r2, r2, #16
 800b8a6:	fa13 f38c 	uxtah	r3, r3, ip
 800b8aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b8ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8b8:	45c1      	cmp	r9, r8
 800b8ba:	f841 3b04 	str.w	r3, [r1], #4
 800b8be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8c2:	d2e9      	bcs.n	800b898 <quorem+0xac>
 800b8c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8cc:	b922      	cbnz	r2, 800b8d8 <quorem+0xec>
 800b8ce:	3b04      	subs	r3, #4
 800b8d0:	429d      	cmp	r5, r3
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	d30a      	bcc.n	800b8ec <quorem+0x100>
 800b8d6:	613c      	str	r4, [r7, #16]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	b003      	add	sp, #12
 800b8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e0:	6812      	ldr	r2, [r2, #0]
 800b8e2:	3b04      	subs	r3, #4
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	d1ce      	bne.n	800b886 <quorem+0x9a>
 800b8e8:	3c01      	subs	r4, #1
 800b8ea:	e7c9      	b.n	800b880 <quorem+0x94>
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	3b04      	subs	r3, #4
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	d1f0      	bne.n	800b8d6 <quorem+0xea>
 800b8f4:	3c01      	subs	r4, #1
 800b8f6:	e7eb      	b.n	800b8d0 <quorem+0xe4>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e7ee      	b.n	800b8da <quorem+0xee>
 800b8fc:	0000      	movs	r0, r0
	...

0800b900 <_dtoa_r>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	ed2d 8b04 	vpush	{d8-d9}
 800b908:	69c5      	ldr	r5, [r0, #28]
 800b90a:	b093      	sub	sp, #76	; 0x4c
 800b90c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b910:	ec57 6b10 	vmov	r6, r7, d0
 800b914:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b918:	9107      	str	r1, [sp, #28]
 800b91a:	4604      	mov	r4, r0
 800b91c:	920a      	str	r2, [sp, #40]	; 0x28
 800b91e:	930d      	str	r3, [sp, #52]	; 0x34
 800b920:	b975      	cbnz	r5, 800b940 <_dtoa_r+0x40>
 800b922:	2010      	movs	r0, #16
 800b924:	f000 fe2a 	bl	800c57c <malloc>
 800b928:	4602      	mov	r2, r0
 800b92a:	61e0      	str	r0, [r4, #28]
 800b92c:	b920      	cbnz	r0, 800b938 <_dtoa_r+0x38>
 800b92e:	4bae      	ldr	r3, [pc, #696]	; (800bbe8 <_dtoa_r+0x2e8>)
 800b930:	21ef      	movs	r1, #239	; 0xef
 800b932:	48ae      	ldr	r0, [pc, #696]	; (800bbec <_dtoa_r+0x2ec>)
 800b934:	f002 fc64 	bl	800e200 <__assert_func>
 800b938:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b93c:	6005      	str	r5, [r0, #0]
 800b93e:	60c5      	str	r5, [r0, #12]
 800b940:	69e3      	ldr	r3, [r4, #28]
 800b942:	6819      	ldr	r1, [r3, #0]
 800b944:	b151      	cbz	r1, 800b95c <_dtoa_r+0x5c>
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	604a      	str	r2, [r1, #4]
 800b94a:	2301      	movs	r3, #1
 800b94c:	4093      	lsls	r3, r2
 800b94e:	608b      	str	r3, [r1, #8]
 800b950:	4620      	mov	r0, r4
 800b952:	f000 ff07 	bl	800c764 <_Bfree>
 800b956:	69e3      	ldr	r3, [r4, #28]
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	1e3b      	subs	r3, r7, #0
 800b95e:	bfbb      	ittet	lt
 800b960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b964:	9303      	strlt	r3, [sp, #12]
 800b966:	2300      	movge	r3, #0
 800b968:	2201      	movlt	r2, #1
 800b96a:	bfac      	ite	ge
 800b96c:	f8c8 3000 	strge.w	r3, [r8]
 800b970:	f8c8 2000 	strlt.w	r2, [r8]
 800b974:	4b9e      	ldr	r3, [pc, #632]	; (800bbf0 <_dtoa_r+0x2f0>)
 800b976:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b97a:	ea33 0308 	bics.w	r3, r3, r8
 800b97e:	d11b      	bne.n	800b9b8 <_dtoa_r+0xb8>
 800b980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b982:	f242 730f 	movw	r3, #9999	; 0x270f
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b98c:	4333      	orrs	r3, r6
 800b98e:	f000 8593 	beq.w	800c4b8 <_dtoa_r+0xbb8>
 800b992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b994:	b963      	cbnz	r3, 800b9b0 <_dtoa_r+0xb0>
 800b996:	4b97      	ldr	r3, [pc, #604]	; (800bbf4 <_dtoa_r+0x2f4>)
 800b998:	e027      	b.n	800b9ea <_dtoa_r+0xea>
 800b99a:	4b97      	ldr	r3, [pc, #604]	; (800bbf8 <_dtoa_r+0x2f8>)
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	3308      	adds	r3, #8
 800b9a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	9800      	ldr	r0, [sp, #0]
 800b9a6:	b013      	add	sp, #76	; 0x4c
 800b9a8:	ecbd 8b04 	vpop	{d8-d9}
 800b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b0:	4b90      	ldr	r3, [pc, #576]	; (800bbf4 <_dtoa_r+0x2f4>)
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	3303      	adds	r3, #3
 800b9b6:	e7f3      	b.n	800b9a0 <_dtoa_r+0xa0>
 800b9b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	ec51 0b17 	vmov	r0, r1, d7
 800b9c2:	eeb0 8a47 	vmov.f32	s16, s14
 800b9c6:	eef0 8a67 	vmov.f32	s17, s15
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f7f5 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d0:	4681      	mov	r9, r0
 800b9d2:	b160      	cbz	r0, 800b9ee <_dtoa_r+0xee>
 800b9d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 8568 	beq.w	800c4b2 <_dtoa_r+0xbb2>
 800b9e2:	4b86      	ldr	r3, [pc, #536]	; (800bbfc <_dtoa_r+0x2fc>)
 800b9e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	e7da      	b.n	800b9a4 <_dtoa_r+0xa4>
 800b9ee:	aa10      	add	r2, sp, #64	; 0x40
 800b9f0:	a911      	add	r1, sp, #68	; 0x44
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b9f8:	eef0 0a68 	vmov.f32	s1, s17
 800b9fc:	f001 fa4e 	bl	800ce9c <__d2b>
 800ba00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba04:	4682      	mov	sl, r0
 800ba06:	2d00      	cmp	r5, #0
 800ba08:	d07f      	beq.n	800bb0a <_dtoa_r+0x20a>
 800ba0a:	ee18 3a90 	vmov	r3, s17
 800ba0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba16:	ec51 0b18 	vmov	r0, r1, d8
 800ba1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba26:	4619      	mov	r1, r3
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4b75      	ldr	r3, [pc, #468]	; (800bc00 <_dtoa_r+0x300>)
 800ba2c:	f7f4 fc2c 	bl	8000288 <__aeabi_dsub>
 800ba30:	a367      	add	r3, pc, #412	; (adr r3, 800bbd0 <_dtoa_r+0x2d0>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fddf 	bl	80005f8 <__aeabi_dmul>
 800ba3a:	a367      	add	r3, pc, #412	; (adr r3, 800bbd8 <_dtoa_r+0x2d8>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f7f4 fc24 	bl	800028c <__adddf3>
 800ba44:	4606      	mov	r6, r0
 800ba46:	4628      	mov	r0, r5
 800ba48:	460f      	mov	r7, r1
 800ba4a:	f7f4 fd6b 	bl	8000524 <__aeabi_i2d>
 800ba4e:	a364      	add	r3, pc, #400	; (adr r3, 800bbe0 <_dtoa_r+0x2e0>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f7f4 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fc14 	bl	800028c <__adddf3>
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	f7f5 f876 	bl	8000b58 <__aeabi_d2iz>
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	4683      	mov	fp, r0
 800ba70:	2300      	movs	r3, #0
 800ba72:	4630      	mov	r0, r6
 800ba74:	4639      	mov	r1, r7
 800ba76:	f7f5 f831 	bl	8000adc <__aeabi_dcmplt>
 800ba7a:	b148      	cbz	r0, 800ba90 <_dtoa_r+0x190>
 800ba7c:	4658      	mov	r0, fp
 800ba7e:	f7f4 fd51 	bl	8000524 <__aeabi_i2d>
 800ba82:	4632      	mov	r2, r6
 800ba84:	463b      	mov	r3, r7
 800ba86:	f7f5 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba8a:	b908      	cbnz	r0, 800ba90 <_dtoa_r+0x190>
 800ba8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba90:	f1bb 0f16 	cmp.w	fp, #22
 800ba94:	d857      	bhi.n	800bb46 <_dtoa_r+0x246>
 800ba96:	4b5b      	ldr	r3, [pc, #364]	; (800bc04 <_dtoa_r+0x304>)
 800ba98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	ec51 0b18 	vmov	r0, r1, d8
 800baa4:	f7f5 f81a 	bl	8000adc <__aeabi_dcmplt>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d04e      	beq.n	800bb4a <_dtoa_r+0x24a>
 800baac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bab0:	2300      	movs	r3, #0
 800bab2:	930c      	str	r3, [sp, #48]	; 0x30
 800bab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bab6:	1b5b      	subs	r3, r3, r5
 800bab8:	1e5a      	subs	r2, r3, #1
 800baba:	bf45      	ittet	mi
 800babc:	f1c3 0301 	rsbmi	r3, r3, #1
 800bac0:	9305      	strmi	r3, [sp, #20]
 800bac2:	2300      	movpl	r3, #0
 800bac4:	2300      	movmi	r3, #0
 800bac6:	9206      	str	r2, [sp, #24]
 800bac8:	bf54      	ite	pl
 800baca:	9305      	strpl	r3, [sp, #20]
 800bacc:	9306      	strmi	r3, [sp, #24]
 800bace:	f1bb 0f00 	cmp.w	fp, #0
 800bad2:	db3c      	blt.n	800bb4e <_dtoa_r+0x24e>
 800bad4:	9b06      	ldr	r3, [sp, #24]
 800bad6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bada:	445b      	add	r3, fp
 800badc:	9306      	str	r3, [sp, #24]
 800bade:	2300      	movs	r3, #0
 800bae0:	9308      	str	r3, [sp, #32]
 800bae2:	9b07      	ldr	r3, [sp, #28]
 800bae4:	2b09      	cmp	r3, #9
 800bae6:	d868      	bhi.n	800bbba <_dtoa_r+0x2ba>
 800bae8:	2b05      	cmp	r3, #5
 800baea:	bfc4      	itt	gt
 800baec:	3b04      	subgt	r3, #4
 800baee:	9307      	strgt	r3, [sp, #28]
 800baf0:	9b07      	ldr	r3, [sp, #28]
 800baf2:	f1a3 0302 	sub.w	r3, r3, #2
 800baf6:	bfcc      	ite	gt
 800baf8:	2500      	movgt	r5, #0
 800bafa:	2501      	movle	r5, #1
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	f200 8085 	bhi.w	800bc0c <_dtoa_r+0x30c>
 800bb02:	e8df f003 	tbb	[pc, r3]
 800bb06:	3b2e      	.short	0x3b2e
 800bb08:	5839      	.short	0x5839
 800bb0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb0e:	441d      	add	r5, r3
 800bb10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	bfc1      	itttt	gt
 800bb18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb28:	bfd6      	itet	le
 800bb2a:	f1c3 0320 	rsble	r3, r3, #32
 800bb2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb32:	fa06 f003 	lslle.w	r0, r6, r3
 800bb36:	f7f4 fce5 	bl	8000504 <__aeabi_ui2d>
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb40:	3d01      	subs	r5, #1
 800bb42:	920e      	str	r2, [sp, #56]	; 0x38
 800bb44:	e76f      	b.n	800ba26 <_dtoa_r+0x126>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e7b3      	b.n	800bab2 <_dtoa_r+0x1b2>
 800bb4a:	900c      	str	r0, [sp, #48]	; 0x30
 800bb4c:	e7b2      	b.n	800bab4 <_dtoa_r+0x1b4>
 800bb4e:	9b05      	ldr	r3, [sp, #20]
 800bb50:	eba3 030b 	sub.w	r3, r3, fp
 800bb54:	9305      	str	r3, [sp, #20]
 800bb56:	f1cb 0300 	rsb	r3, fp, #0
 800bb5a:	9308      	str	r3, [sp, #32]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb60:	e7bf      	b.n	800bae2 <_dtoa_r+0x1e2>
 800bb62:	2300      	movs	r3, #0
 800bb64:	9309      	str	r3, [sp, #36]	; 0x24
 800bb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc52      	bgt.n	800bc12 <_dtoa_r+0x312>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	461a      	mov	r2, r3
 800bb74:	920a      	str	r2, [sp, #40]	; 0x28
 800bb76:	e00b      	b.n	800bb90 <_dtoa_r+0x290>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e7f3      	b.n	800bb64 <_dtoa_r+0x264>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb82:	445b      	add	r3, fp
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	3301      	adds	r3, #1
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	9304      	str	r3, [sp, #16]
 800bb8c:	bfb8      	it	lt
 800bb8e:	2301      	movlt	r3, #1
 800bb90:	69e0      	ldr	r0, [r4, #28]
 800bb92:	2100      	movs	r1, #0
 800bb94:	2204      	movs	r2, #4
 800bb96:	f102 0614 	add.w	r6, r2, #20
 800bb9a:	429e      	cmp	r6, r3
 800bb9c:	d93d      	bls.n	800bc1a <_dtoa_r+0x31a>
 800bb9e:	6041      	str	r1, [r0, #4]
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fd9f 	bl	800c6e4 <_Balloc>
 800bba6:	9000      	str	r0, [sp, #0]
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d139      	bne.n	800bc20 <_dtoa_r+0x320>
 800bbac:	4b16      	ldr	r3, [pc, #88]	; (800bc08 <_dtoa_r+0x308>)
 800bbae:	4602      	mov	r2, r0
 800bbb0:	f240 11af 	movw	r1, #431	; 0x1af
 800bbb4:	e6bd      	b.n	800b932 <_dtoa_r+0x32>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e7e1      	b.n	800bb7e <_dtoa_r+0x27e>
 800bbba:	2501      	movs	r5, #1
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	9307      	str	r3, [sp, #28]
 800bbc0:	9509      	str	r5, [sp, #36]	; 0x24
 800bbc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2312      	movs	r3, #18
 800bbce:	e7d1      	b.n	800bb74 <_dtoa_r+0x274>
 800bbd0:	636f4361 	.word	0x636f4361
 800bbd4:	3fd287a7 	.word	0x3fd287a7
 800bbd8:	8b60c8b3 	.word	0x8b60c8b3
 800bbdc:	3fc68a28 	.word	0x3fc68a28
 800bbe0:	509f79fb 	.word	0x509f79fb
 800bbe4:	3fd34413 	.word	0x3fd34413
 800bbe8:	0800f142 	.word	0x0800f142
 800bbec:	0800f159 	.word	0x0800f159
 800bbf0:	7ff00000 	.word	0x7ff00000
 800bbf4:	0800f13e 	.word	0x0800f13e
 800bbf8:	0800f135 	.word	0x0800f135
 800bbfc:	0800f10d 	.word	0x0800f10d
 800bc00:	3ff80000 	.word	0x3ff80000
 800bc04:	0800f248 	.word	0x0800f248
 800bc08:	0800f1b1 	.word	0x0800f1b1
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc10:	e7d7      	b.n	800bbc2 <_dtoa_r+0x2c2>
 800bc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	e7ba      	b.n	800bb90 <_dtoa_r+0x290>
 800bc1a:	3101      	adds	r1, #1
 800bc1c:	0052      	lsls	r2, r2, #1
 800bc1e:	e7ba      	b.n	800bb96 <_dtoa_r+0x296>
 800bc20:	69e3      	ldr	r3, [r4, #28]
 800bc22:	9a00      	ldr	r2, [sp, #0]
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	9b04      	ldr	r3, [sp, #16]
 800bc28:	2b0e      	cmp	r3, #14
 800bc2a:	f200 80a8 	bhi.w	800bd7e <_dtoa_r+0x47e>
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	f000 80a5 	beq.w	800bd7e <_dtoa_r+0x47e>
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	dd38      	ble.n	800bcac <_dtoa_r+0x3ac>
 800bc3a:	4bc0      	ldr	r3, [pc, #768]	; (800bf3c <_dtoa_r+0x63c>)
 800bc3c:	f00b 020f 	and.w	r2, fp, #15
 800bc40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bc48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bc50:	d019      	beq.n	800bc86 <_dtoa_r+0x386>
 800bc52:	4bbb      	ldr	r3, [pc, #748]	; (800bf40 <_dtoa_r+0x640>)
 800bc54:	ec51 0b18 	vmov	r0, r1, d8
 800bc58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc5c:	f7f4 fdf6 	bl	800084c <__aeabi_ddiv>
 800bc60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc64:	f008 080f 	and.w	r8, r8, #15
 800bc68:	2503      	movs	r5, #3
 800bc6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bf40 <_dtoa_r+0x640>
 800bc6e:	f1b8 0f00 	cmp.w	r8, #0
 800bc72:	d10a      	bne.n	800bc8a <_dtoa_r+0x38a>
 800bc74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc78:	4632      	mov	r2, r6
 800bc7a:	463b      	mov	r3, r7
 800bc7c:	f7f4 fde6 	bl	800084c <__aeabi_ddiv>
 800bc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc84:	e02b      	b.n	800bcde <_dtoa_r+0x3de>
 800bc86:	2502      	movs	r5, #2
 800bc88:	e7ef      	b.n	800bc6a <_dtoa_r+0x36a>
 800bc8a:	f018 0f01 	tst.w	r8, #1
 800bc8e:	d008      	beq.n	800bca2 <_dtoa_r+0x3a2>
 800bc90:	4630      	mov	r0, r6
 800bc92:	4639      	mov	r1, r7
 800bc94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc98:	f7f4 fcae 	bl	80005f8 <__aeabi_dmul>
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	4606      	mov	r6, r0
 800bca0:	460f      	mov	r7, r1
 800bca2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bca6:	f109 0908 	add.w	r9, r9, #8
 800bcaa:	e7e0      	b.n	800bc6e <_dtoa_r+0x36e>
 800bcac:	f000 809f 	beq.w	800bdee <_dtoa_r+0x4ee>
 800bcb0:	f1cb 0600 	rsb	r6, fp, #0
 800bcb4:	4ba1      	ldr	r3, [pc, #644]	; (800bf3c <_dtoa_r+0x63c>)
 800bcb6:	4fa2      	ldr	r7, [pc, #648]	; (800bf40 <_dtoa_r+0x640>)
 800bcb8:	f006 020f 	and.w	r2, r6, #15
 800bcbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	ec51 0b18 	vmov	r0, r1, d8
 800bcc8:	f7f4 fc96 	bl	80005f8 <__aeabi_dmul>
 800bccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd0:	1136      	asrs	r6, r6, #4
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	2502      	movs	r5, #2
 800bcd6:	2e00      	cmp	r6, #0
 800bcd8:	d17e      	bne.n	800bdd8 <_dtoa_r+0x4d8>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1d0      	bne.n	800bc80 <_dtoa_r+0x380>
 800bcde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 8084 	beq.w	800bdf2 <_dtoa_r+0x4f2>
 800bcea:	4b96      	ldr	r3, [pc, #600]	; (800bf44 <_dtoa_r+0x644>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	4640      	mov	r0, r8
 800bcf0:	4649      	mov	r1, r9
 800bcf2:	f7f4 fef3 	bl	8000adc <__aeabi_dcmplt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d07b      	beq.n	800bdf2 <_dtoa_r+0x4f2>
 800bcfa:	9b04      	ldr	r3, [sp, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d078      	beq.n	800bdf2 <_dtoa_r+0x4f2>
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	dd39      	ble.n	800bd7a <_dtoa_r+0x47a>
 800bd06:	4b90      	ldr	r3, [pc, #576]	; (800bf48 <_dtoa_r+0x648>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fc73 	bl	80005f8 <__aeabi_dmul>
 800bd12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd16:	9e01      	ldr	r6, [sp, #4]
 800bd18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd22:	4628      	mov	r0, r5
 800bd24:	f7f4 fbfe 	bl	8000524 <__aeabi_i2d>
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	4b86      	ldr	r3, [pc, #536]	; (800bf4c <_dtoa_r+0x64c>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	f7f4 faaa 	bl	800028c <__adddf3>
 800bd38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	2e00      	cmp	r6, #0
 800bd44:	d158      	bne.n	800bdf8 <_dtoa_r+0x4f8>
 800bd46:	4b82      	ldr	r3, [pc, #520]	; (800bf50 <_dtoa_r+0x650>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	f7f4 fa9b 	bl	8000288 <__aeabi_dsub>
 800bd52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd56:	4680      	mov	r8, r0
 800bd58:	4689      	mov	r9, r1
 800bd5a:	f7f4 fedd 	bl	8000b18 <__aeabi_dcmpgt>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f040 8296 	bne.w	800c290 <_dtoa_r+0x990>
 800bd64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd68:	4640      	mov	r0, r8
 800bd6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd6e:	4649      	mov	r1, r9
 800bd70:	f7f4 feb4 	bl	8000adc <__aeabi_dcmplt>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	f040 8289 	bne.w	800c28c <_dtoa_r+0x98c>
 800bd7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f2c0 814e 	blt.w	800c022 <_dtoa_r+0x722>
 800bd86:	f1bb 0f0e 	cmp.w	fp, #14
 800bd8a:	f300 814a 	bgt.w	800c022 <_dtoa_r+0x722>
 800bd8e:	4b6b      	ldr	r3, [pc, #428]	; (800bf3c <_dtoa_r+0x63c>)
 800bd90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f280 80dc 	bge.w	800bf58 <_dtoa_r+0x658>
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f300 80d8 	bgt.w	800bf58 <_dtoa_r+0x658>
 800bda8:	f040 826f 	bne.w	800c28a <_dtoa_r+0x98a>
 800bdac:	4b68      	ldr	r3, [pc, #416]	; (800bf50 <_dtoa_r+0x650>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	f7f4 fc20 	bl	80005f8 <__aeabi_dmul>
 800bdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdbc:	f7f4 fea2 	bl	8000b04 <__aeabi_dcmpge>
 800bdc0:	9e04      	ldr	r6, [sp, #16]
 800bdc2:	4637      	mov	r7, r6
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	f040 8245 	bne.w	800c254 <_dtoa_r+0x954>
 800bdca:	9d00      	ldr	r5, [sp, #0]
 800bdcc:	2331      	movs	r3, #49	; 0x31
 800bdce:	f805 3b01 	strb.w	r3, [r5], #1
 800bdd2:	f10b 0b01 	add.w	fp, fp, #1
 800bdd6:	e241      	b.n	800c25c <_dtoa_r+0x95c>
 800bdd8:	07f2      	lsls	r2, r6, #31
 800bdda:	d505      	bpl.n	800bde8 <_dtoa_r+0x4e8>
 800bddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	3501      	adds	r5, #1
 800bde6:	2301      	movs	r3, #1
 800bde8:	1076      	asrs	r6, r6, #1
 800bdea:	3708      	adds	r7, #8
 800bdec:	e773      	b.n	800bcd6 <_dtoa_r+0x3d6>
 800bdee:	2502      	movs	r5, #2
 800bdf0:	e775      	b.n	800bcde <_dtoa_r+0x3de>
 800bdf2:	9e04      	ldr	r6, [sp, #16]
 800bdf4:	465f      	mov	r7, fp
 800bdf6:	e792      	b.n	800bd1e <_dtoa_r+0x41e>
 800bdf8:	9900      	ldr	r1, [sp, #0]
 800bdfa:	4b50      	ldr	r3, [pc, #320]	; (800bf3c <_dtoa_r+0x63c>)
 800bdfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be00:	4431      	add	r1, r6
 800be02:	9102      	str	r1, [sp, #8]
 800be04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be06:	eeb0 9a47 	vmov.f32	s18, s14
 800be0a:	eef0 9a67 	vmov.f32	s19, s15
 800be0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be16:	2900      	cmp	r1, #0
 800be18:	d044      	beq.n	800bea4 <_dtoa_r+0x5a4>
 800be1a:	494e      	ldr	r1, [pc, #312]	; (800bf54 <_dtoa_r+0x654>)
 800be1c:	2000      	movs	r0, #0
 800be1e:	f7f4 fd15 	bl	800084c <__aeabi_ddiv>
 800be22:	ec53 2b19 	vmov	r2, r3, d9
 800be26:	f7f4 fa2f 	bl	8000288 <__aeabi_dsub>
 800be2a:	9d00      	ldr	r5, [sp, #0]
 800be2c:	ec41 0b19 	vmov	d9, r0, r1
 800be30:	4649      	mov	r1, r9
 800be32:	4640      	mov	r0, r8
 800be34:	f7f4 fe90 	bl	8000b58 <__aeabi_d2iz>
 800be38:	4606      	mov	r6, r0
 800be3a:	f7f4 fb73 	bl	8000524 <__aeabi_i2d>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fa1f 	bl	8000288 <__aeabi_dsub>
 800be4a:	3630      	adds	r6, #48	; 0x30
 800be4c:	f805 6b01 	strb.w	r6, [r5], #1
 800be50:	ec53 2b19 	vmov	r2, r3, d9
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	f7f4 fe40 	bl	8000adc <__aeabi_dcmplt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d164      	bne.n	800bf2a <_dtoa_r+0x62a>
 800be60:	4642      	mov	r2, r8
 800be62:	464b      	mov	r3, r9
 800be64:	4937      	ldr	r1, [pc, #220]	; (800bf44 <_dtoa_r+0x644>)
 800be66:	2000      	movs	r0, #0
 800be68:	f7f4 fa0e 	bl	8000288 <__aeabi_dsub>
 800be6c:	ec53 2b19 	vmov	r2, r3, d9
 800be70:	f7f4 fe34 	bl	8000adc <__aeabi_dcmplt>
 800be74:	2800      	cmp	r0, #0
 800be76:	f040 80b6 	bne.w	800bfe6 <_dtoa_r+0x6e6>
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	429d      	cmp	r5, r3
 800be7e:	f43f af7c 	beq.w	800bd7a <_dtoa_r+0x47a>
 800be82:	4b31      	ldr	r3, [pc, #196]	; (800bf48 <_dtoa_r+0x648>)
 800be84:	ec51 0b19 	vmov	r0, r1, d9
 800be88:	2200      	movs	r2, #0
 800be8a:	f7f4 fbb5 	bl	80005f8 <__aeabi_dmul>
 800be8e:	4b2e      	ldr	r3, [pc, #184]	; (800bf48 <_dtoa_r+0x648>)
 800be90:	ec41 0b19 	vmov	d9, r0, r1
 800be94:	2200      	movs	r2, #0
 800be96:	4640      	mov	r0, r8
 800be98:	4649      	mov	r1, r9
 800be9a:	f7f4 fbad 	bl	80005f8 <__aeabi_dmul>
 800be9e:	4680      	mov	r8, r0
 800bea0:	4689      	mov	r9, r1
 800bea2:	e7c5      	b.n	800be30 <_dtoa_r+0x530>
 800bea4:	ec51 0b17 	vmov	r0, r1, d7
 800bea8:	f7f4 fba6 	bl	80005f8 <__aeabi_dmul>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	9d00      	ldr	r5, [sp, #0]
 800beb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb2:	ec41 0b19 	vmov	d9, r0, r1
 800beb6:	4649      	mov	r1, r9
 800beb8:	4640      	mov	r0, r8
 800beba:	f7f4 fe4d 	bl	8000b58 <__aeabi_d2iz>
 800bebe:	4606      	mov	r6, r0
 800bec0:	f7f4 fb30 	bl	8000524 <__aeabi_i2d>
 800bec4:	3630      	adds	r6, #48	; 0x30
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4640      	mov	r0, r8
 800becc:	4649      	mov	r1, r9
 800bece:	f7f4 f9db 	bl	8000288 <__aeabi_dsub>
 800bed2:	f805 6b01 	strb.w	r6, [r5], #1
 800bed6:	9b02      	ldr	r3, [sp, #8]
 800bed8:	429d      	cmp	r5, r3
 800beda:	4680      	mov	r8, r0
 800bedc:	4689      	mov	r9, r1
 800bede:	f04f 0200 	mov.w	r2, #0
 800bee2:	d124      	bne.n	800bf2e <_dtoa_r+0x62e>
 800bee4:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <_dtoa_r+0x654>)
 800bee6:	ec51 0b19 	vmov	r0, r1, d9
 800beea:	f7f4 f9cf 	bl	800028c <__adddf3>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4640      	mov	r0, r8
 800bef4:	4649      	mov	r1, r9
 800bef6:	f7f4 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 800befa:	2800      	cmp	r0, #0
 800befc:	d173      	bne.n	800bfe6 <_dtoa_r+0x6e6>
 800befe:	ec53 2b19 	vmov	r2, r3, d9
 800bf02:	4914      	ldr	r1, [pc, #80]	; (800bf54 <_dtoa_r+0x654>)
 800bf04:	2000      	movs	r0, #0
 800bf06:	f7f4 f9bf 	bl	8000288 <__aeabi_dsub>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4640      	mov	r0, r8
 800bf10:	4649      	mov	r1, r9
 800bf12:	f7f4 fde3 	bl	8000adc <__aeabi_dcmplt>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f af2f 	beq.w	800bd7a <_dtoa_r+0x47a>
 800bf1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf1e:	1e6b      	subs	r3, r5, #1
 800bf20:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf26:	2b30      	cmp	r3, #48	; 0x30
 800bf28:	d0f8      	beq.n	800bf1c <_dtoa_r+0x61c>
 800bf2a:	46bb      	mov	fp, r7
 800bf2c:	e04a      	b.n	800bfc4 <_dtoa_r+0x6c4>
 800bf2e:	4b06      	ldr	r3, [pc, #24]	; (800bf48 <_dtoa_r+0x648>)
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	4680      	mov	r8, r0
 800bf36:	4689      	mov	r9, r1
 800bf38:	e7bd      	b.n	800beb6 <_dtoa_r+0x5b6>
 800bf3a:	bf00      	nop
 800bf3c:	0800f248 	.word	0x0800f248
 800bf40:	0800f220 	.word	0x0800f220
 800bf44:	3ff00000 	.word	0x3ff00000
 800bf48:	40240000 	.word	0x40240000
 800bf4c:	401c0000 	.word	0x401c0000
 800bf50:	40140000 	.word	0x40140000
 800bf54:	3fe00000 	.word	0x3fe00000
 800bf58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf5c:	9d00      	ldr	r5, [sp, #0]
 800bf5e:	4642      	mov	r2, r8
 800bf60:	464b      	mov	r3, r9
 800bf62:	4630      	mov	r0, r6
 800bf64:	4639      	mov	r1, r7
 800bf66:	f7f4 fc71 	bl	800084c <__aeabi_ddiv>
 800bf6a:	f7f4 fdf5 	bl	8000b58 <__aeabi_d2iz>
 800bf6e:	9001      	str	r0, [sp, #4]
 800bf70:	f7f4 fad8 	bl	8000524 <__aeabi_i2d>
 800bf74:	4642      	mov	r2, r8
 800bf76:	464b      	mov	r3, r9
 800bf78:	f7f4 fb3e 	bl	80005f8 <__aeabi_dmul>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4630      	mov	r0, r6
 800bf82:	4639      	mov	r1, r7
 800bf84:	f7f4 f980 	bl	8000288 <__aeabi_dsub>
 800bf88:	9e01      	ldr	r6, [sp, #4]
 800bf8a:	9f04      	ldr	r7, [sp, #16]
 800bf8c:	3630      	adds	r6, #48	; 0x30
 800bf8e:	f805 6b01 	strb.w	r6, [r5], #1
 800bf92:	9e00      	ldr	r6, [sp, #0]
 800bf94:	1bae      	subs	r6, r5, r6
 800bf96:	42b7      	cmp	r7, r6
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	d134      	bne.n	800c008 <_dtoa_r+0x708>
 800bf9e:	f7f4 f975 	bl	800028c <__adddf3>
 800bfa2:	4642      	mov	r2, r8
 800bfa4:	464b      	mov	r3, r9
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460f      	mov	r7, r1
 800bfaa:	f7f4 fdb5 	bl	8000b18 <__aeabi_dcmpgt>
 800bfae:	b9c8      	cbnz	r0, 800bfe4 <_dtoa_r+0x6e4>
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	464b      	mov	r3, r9
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	f7f4 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfbc:	b110      	cbz	r0, 800bfc4 <_dtoa_r+0x6c4>
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	07db      	lsls	r3, r3, #31
 800bfc2:	d40f      	bmi.n	800bfe4 <_dtoa_r+0x6e4>
 800bfc4:	4651      	mov	r1, sl
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 fbcc 	bl	800c764 <_Bfree>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd0:	702b      	strb	r3, [r5, #0]
 800bfd2:	f10b 0301 	add.w	r3, fp, #1
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f43f ace2 	beq.w	800b9a4 <_dtoa_r+0xa4>
 800bfe0:	601d      	str	r5, [r3, #0]
 800bfe2:	e4df      	b.n	800b9a4 <_dtoa_r+0xa4>
 800bfe4:	465f      	mov	r7, fp
 800bfe6:	462b      	mov	r3, r5
 800bfe8:	461d      	mov	r5, r3
 800bfea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfee:	2a39      	cmp	r2, #57	; 0x39
 800bff0:	d106      	bne.n	800c000 <_dtoa_r+0x700>
 800bff2:	9a00      	ldr	r2, [sp, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d1f7      	bne.n	800bfe8 <_dtoa_r+0x6e8>
 800bff8:	9900      	ldr	r1, [sp, #0]
 800bffa:	2230      	movs	r2, #48	; 0x30
 800bffc:	3701      	adds	r7, #1
 800bffe:	700a      	strb	r2, [r1, #0]
 800c000:	781a      	ldrb	r2, [r3, #0]
 800c002:	3201      	adds	r2, #1
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	e790      	b.n	800bf2a <_dtoa_r+0x62a>
 800c008:	4ba3      	ldr	r3, [pc, #652]	; (800c298 <_dtoa_r+0x998>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	f7f4 faf4 	bl	80005f8 <__aeabi_dmul>
 800c010:	2200      	movs	r2, #0
 800c012:	2300      	movs	r3, #0
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	f7f4 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d09e      	beq.n	800bf5e <_dtoa_r+0x65e>
 800c020:	e7d0      	b.n	800bfc4 <_dtoa_r+0x6c4>
 800c022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c024:	2a00      	cmp	r2, #0
 800c026:	f000 80ca 	beq.w	800c1be <_dtoa_r+0x8be>
 800c02a:	9a07      	ldr	r2, [sp, #28]
 800c02c:	2a01      	cmp	r2, #1
 800c02e:	f300 80ad 	bgt.w	800c18c <_dtoa_r+0x88c>
 800c032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c034:	2a00      	cmp	r2, #0
 800c036:	f000 80a5 	beq.w	800c184 <_dtoa_r+0x884>
 800c03a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c03e:	9e08      	ldr	r6, [sp, #32]
 800c040:	9d05      	ldr	r5, [sp, #20]
 800c042:	9a05      	ldr	r2, [sp, #20]
 800c044:	441a      	add	r2, r3
 800c046:	9205      	str	r2, [sp, #20]
 800c048:	9a06      	ldr	r2, [sp, #24]
 800c04a:	2101      	movs	r1, #1
 800c04c:	441a      	add	r2, r3
 800c04e:	4620      	mov	r0, r4
 800c050:	9206      	str	r2, [sp, #24]
 800c052:	f000 fc87 	bl	800c964 <__i2b>
 800c056:	4607      	mov	r7, r0
 800c058:	b165      	cbz	r5, 800c074 <_dtoa_r+0x774>
 800c05a:	9b06      	ldr	r3, [sp, #24]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd09      	ble.n	800c074 <_dtoa_r+0x774>
 800c060:	42ab      	cmp	r3, r5
 800c062:	9a05      	ldr	r2, [sp, #20]
 800c064:	bfa8      	it	ge
 800c066:	462b      	movge	r3, r5
 800c068:	1ad2      	subs	r2, r2, r3
 800c06a:	9205      	str	r2, [sp, #20]
 800c06c:	9a06      	ldr	r2, [sp, #24]
 800c06e:	1aed      	subs	r5, r5, r3
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	9306      	str	r3, [sp, #24]
 800c074:	9b08      	ldr	r3, [sp, #32]
 800c076:	b1f3      	cbz	r3, 800c0b6 <_dtoa_r+0x7b6>
 800c078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 80a3 	beq.w	800c1c6 <_dtoa_r+0x8c6>
 800c080:	2e00      	cmp	r6, #0
 800c082:	dd10      	ble.n	800c0a6 <_dtoa_r+0x7a6>
 800c084:	4639      	mov	r1, r7
 800c086:	4632      	mov	r2, r6
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fd2b 	bl	800cae4 <__pow5mult>
 800c08e:	4652      	mov	r2, sl
 800c090:	4601      	mov	r1, r0
 800c092:	4607      	mov	r7, r0
 800c094:	4620      	mov	r0, r4
 800c096:	f000 fc7b 	bl	800c990 <__multiply>
 800c09a:	4651      	mov	r1, sl
 800c09c:	4680      	mov	r8, r0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 fb60 	bl	800c764 <_Bfree>
 800c0a4:	46c2      	mov	sl, r8
 800c0a6:	9b08      	ldr	r3, [sp, #32]
 800c0a8:	1b9a      	subs	r2, r3, r6
 800c0aa:	d004      	beq.n	800c0b6 <_dtoa_r+0x7b6>
 800c0ac:	4651      	mov	r1, sl
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f000 fd18 	bl	800cae4 <__pow5mult>
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f000 fc53 	bl	800c964 <__i2b>
 800c0be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	f340 8081 	ble.w	800c1ca <_dtoa_r+0x8ca>
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fd09 	bl	800cae4 <__pow5mult>
 800c0d2:	9b07      	ldr	r3, [sp, #28]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	dd7a      	ble.n	800c1d0 <_dtoa_r+0x8d0>
 800c0da:	f04f 0800 	mov.w	r8, #0
 800c0de:	6933      	ldr	r3, [r6, #16]
 800c0e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0e4:	6918      	ldr	r0, [r3, #16]
 800c0e6:	f000 fbef 	bl	800c8c8 <__hi0bits>
 800c0ea:	f1c0 0020 	rsb	r0, r0, #32
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	4418      	add	r0, r3
 800c0f2:	f010 001f 	ands.w	r0, r0, #31
 800c0f6:	f000 8094 	beq.w	800c222 <_dtoa_r+0x922>
 800c0fa:	f1c0 0320 	rsb	r3, r0, #32
 800c0fe:	2b04      	cmp	r3, #4
 800c100:	f340 8085 	ble.w	800c20e <_dtoa_r+0x90e>
 800c104:	9b05      	ldr	r3, [sp, #20]
 800c106:	f1c0 001c 	rsb	r0, r0, #28
 800c10a:	4403      	add	r3, r0
 800c10c:	9305      	str	r3, [sp, #20]
 800c10e:	9b06      	ldr	r3, [sp, #24]
 800c110:	4403      	add	r3, r0
 800c112:	4405      	add	r5, r0
 800c114:	9306      	str	r3, [sp, #24]
 800c116:	9b05      	ldr	r3, [sp, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dd05      	ble.n	800c128 <_dtoa_r+0x828>
 800c11c:	4651      	mov	r1, sl
 800c11e:	461a      	mov	r2, r3
 800c120:	4620      	mov	r0, r4
 800c122:	f000 fd39 	bl	800cb98 <__lshift>
 800c126:	4682      	mov	sl, r0
 800c128:	9b06      	ldr	r3, [sp, #24]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd05      	ble.n	800c13a <_dtoa_r+0x83a>
 800c12e:	4631      	mov	r1, r6
 800c130:	461a      	mov	r2, r3
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fd30 	bl	800cb98 <__lshift>
 800c138:	4606      	mov	r6, r0
 800c13a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d072      	beq.n	800c226 <_dtoa_r+0x926>
 800c140:	4631      	mov	r1, r6
 800c142:	4650      	mov	r0, sl
 800c144:	f000 fd94 	bl	800cc70 <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	da6c      	bge.n	800c226 <_dtoa_r+0x926>
 800c14c:	2300      	movs	r3, #0
 800c14e:	4651      	mov	r1, sl
 800c150:	220a      	movs	r2, #10
 800c152:	4620      	mov	r0, r4
 800c154:	f000 fb28 	bl	800c7a8 <__multadd>
 800c158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c15e:	4682      	mov	sl, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 81b0 	beq.w	800c4c6 <_dtoa_r+0xbc6>
 800c166:	2300      	movs	r3, #0
 800c168:	4639      	mov	r1, r7
 800c16a:	220a      	movs	r2, #10
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 fb1b 	bl	800c7a8 <__multadd>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	4607      	mov	r7, r0
 800c178:	f300 8096 	bgt.w	800c2a8 <_dtoa_r+0x9a8>
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	dc59      	bgt.n	800c236 <_dtoa_r+0x936>
 800c182:	e091      	b.n	800c2a8 <_dtoa_r+0x9a8>
 800c184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c186:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c18a:	e758      	b.n	800c03e <_dtoa_r+0x73e>
 800c18c:	9b04      	ldr	r3, [sp, #16]
 800c18e:	1e5e      	subs	r6, r3, #1
 800c190:	9b08      	ldr	r3, [sp, #32]
 800c192:	42b3      	cmp	r3, r6
 800c194:	bfbf      	itttt	lt
 800c196:	9b08      	ldrlt	r3, [sp, #32]
 800c198:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c19a:	9608      	strlt	r6, [sp, #32]
 800c19c:	1af3      	sublt	r3, r6, r3
 800c19e:	bfb4      	ite	lt
 800c1a0:	18d2      	addlt	r2, r2, r3
 800c1a2:	1b9e      	subge	r6, r3, r6
 800c1a4:	9b04      	ldr	r3, [sp, #16]
 800c1a6:	bfbc      	itt	lt
 800c1a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c1aa:	2600      	movlt	r6, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bfb7      	itett	lt
 800c1b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c1b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c1b8:	1a9d      	sublt	r5, r3, r2
 800c1ba:	2300      	movlt	r3, #0
 800c1bc:	e741      	b.n	800c042 <_dtoa_r+0x742>
 800c1be:	9e08      	ldr	r6, [sp, #32]
 800c1c0:	9d05      	ldr	r5, [sp, #20]
 800c1c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1c4:	e748      	b.n	800c058 <_dtoa_r+0x758>
 800c1c6:	9a08      	ldr	r2, [sp, #32]
 800c1c8:	e770      	b.n	800c0ac <_dtoa_r+0x7ac>
 800c1ca:	9b07      	ldr	r3, [sp, #28]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	dc19      	bgt.n	800c204 <_dtoa_r+0x904>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	b9bb      	cbnz	r3, 800c204 <_dtoa_r+0x904>
 800c1d4:	9b03      	ldr	r3, [sp, #12]
 800c1d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1da:	b99b      	cbnz	r3, 800c204 <_dtoa_r+0x904>
 800c1dc:	9b03      	ldr	r3, [sp, #12]
 800c1de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1e2:	0d1b      	lsrs	r3, r3, #20
 800c1e4:	051b      	lsls	r3, r3, #20
 800c1e6:	b183      	cbz	r3, 800c20a <_dtoa_r+0x90a>
 800c1e8:	9b05      	ldr	r3, [sp, #20]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	9b06      	ldr	r3, [sp, #24]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	9306      	str	r3, [sp, #24]
 800c1f4:	f04f 0801 	mov.w	r8, #1
 800c1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f47f af6f 	bne.w	800c0de <_dtoa_r+0x7de>
 800c200:	2001      	movs	r0, #1
 800c202:	e774      	b.n	800c0ee <_dtoa_r+0x7ee>
 800c204:	f04f 0800 	mov.w	r8, #0
 800c208:	e7f6      	b.n	800c1f8 <_dtoa_r+0x8f8>
 800c20a:	4698      	mov	r8, r3
 800c20c:	e7f4      	b.n	800c1f8 <_dtoa_r+0x8f8>
 800c20e:	d082      	beq.n	800c116 <_dtoa_r+0x816>
 800c210:	9a05      	ldr	r2, [sp, #20]
 800c212:	331c      	adds	r3, #28
 800c214:	441a      	add	r2, r3
 800c216:	9205      	str	r2, [sp, #20]
 800c218:	9a06      	ldr	r2, [sp, #24]
 800c21a:	441a      	add	r2, r3
 800c21c:	441d      	add	r5, r3
 800c21e:	9206      	str	r2, [sp, #24]
 800c220:	e779      	b.n	800c116 <_dtoa_r+0x816>
 800c222:	4603      	mov	r3, r0
 800c224:	e7f4      	b.n	800c210 <_dtoa_r+0x910>
 800c226:	9b04      	ldr	r3, [sp, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	dc37      	bgt.n	800c29c <_dtoa_r+0x99c>
 800c22c:	9b07      	ldr	r3, [sp, #28]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	dd34      	ble.n	800c29c <_dtoa_r+0x99c>
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	9b01      	ldr	r3, [sp, #4]
 800c238:	b963      	cbnz	r3, 800c254 <_dtoa_r+0x954>
 800c23a:	4631      	mov	r1, r6
 800c23c:	2205      	movs	r2, #5
 800c23e:	4620      	mov	r0, r4
 800c240:	f000 fab2 	bl	800c7a8 <__multadd>
 800c244:	4601      	mov	r1, r0
 800c246:	4606      	mov	r6, r0
 800c248:	4650      	mov	r0, sl
 800c24a:	f000 fd11 	bl	800cc70 <__mcmp>
 800c24e:	2800      	cmp	r0, #0
 800c250:	f73f adbb 	bgt.w	800bdca <_dtoa_r+0x4ca>
 800c254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c256:	9d00      	ldr	r5, [sp, #0]
 800c258:	ea6f 0b03 	mvn.w	fp, r3
 800c25c:	f04f 0800 	mov.w	r8, #0
 800c260:	4631      	mov	r1, r6
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fa7e 	bl	800c764 <_Bfree>
 800c268:	2f00      	cmp	r7, #0
 800c26a:	f43f aeab 	beq.w	800bfc4 <_dtoa_r+0x6c4>
 800c26e:	f1b8 0f00 	cmp.w	r8, #0
 800c272:	d005      	beq.n	800c280 <_dtoa_r+0x980>
 800c274:	45b8      	cmp	r8, r7
 800c276:	d003      	beq.n	800c280 <_dtoa_r+0x980>
 800c278:	4641      	mov	r1, r8
 800c27a:	4620      	mov	r0, r4
 800c27c:	f000 fa72 	bl	800c764 <_Bfree>
 800c280:	4639      	mov	r1, r7
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fa6e 	bl	800c764 <_Bfree>
 800c288:	e69c      	b.n	800bfc4 <_dtoa_r+0x6c4>
 800c28a:	2600      	movs	r6, #0
 800c28c:	4637      	mov	r7, r6
 800c28e:	e7e1      	b.n	800c254 <_dtoa_r+0x954>
 800c290:	46bb      	mov	fp, r7
 800c292:	4637      	mov	r7, r6
 800c294:	e599      	b.n	800bdca <_dtoa_r+0x4ca>
 800c296:	bf00      	nop
 800c298:	40240000 	.word	0x40240000
 800c29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f000 80c8 	beq.w	800c434 <_dtoa_r+0xb34>
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	2d00      	cmp	r5, #0
 800c2aa:	dd05      	ble.n	800c2b8 <_dtoa_r+0x9b8>
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	462a      	mov	r2, r5
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 fc71 	bl	800cb98 <__lshift>
 800c2b6:	4607      	mov	r7, r0
 800c2b8:	f1b8 0f00 	cmp.w	r8, #0
 800c2bc:	d05b      	beq.n	800c376 <_dtoa_r+0xa76>
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fa0f 	bl	800c6e4 <_Balloc>
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	b928      	cbnz	r0, 800c2d6 <_dtoa_r+0x9d6>
 800c2ca:	4b83      	ldr	r3, [pc, #524]	; (800c4d8 <_dtoa_r+0xbd8>)
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c2d2:	f7ff bb2e 	b.w	800b932 <_dtoa_r+0x32>
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	3202      	adds	r2, #2
 800c2da:	0092      	lsls	r2, r2, #2
 800c2dc:	f107 010c 	add.w	r1, r7, #12
 800c2e0:	300c      	adds	r0, #12
 800c2e2:	f7ff fa6e 	bl	800b7c2 <memcpy>
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 fc54 	bl	800cb98 <__lshift>
 800c2f0:	9b00      	ldr	r3, [sp, #0]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	9308      	str	r3, [sp, #32]
 800c2fe:	9b02      	ldr	r3, [sp, #8]
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	46b8      	mov	r8, r7
 800c306:	9306      	str	r3, [sp, #24]
 800c308:	4607      	mov	r7, r0
 800c30a:	9b04      	ldr	r3, [sp, #16]
 800c30c:	4631      	mov	r1, r6
 800c30e:	3b01      	subs	r3, #1
 800c310:	4650      	mov	r0, sl
 800c312:	9301      	str	r3, [sp, #4]
 800c314:	f7ff fa6a 	bl	800b7ec <quorem>
 800c318:	4641      	mov	r1, r8
 800c31a:	9002      	str	r0, [sp, #8]
 800c31c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c320:	4650      	mov	r0, sl
 800c322:	f000 fca5 	bl	800cc70 <__mcmp>
 800c326:	463a      	mov	r2, r7
 800c328:	9005      	str	r0, [sp, #20]
 800c32a:	4631      	mov	r1, r6
 800c32c:	4620      	mov	r0, r4
 800c32e:	f000 fcbb 	bl	800cca8 <__mdiff>
 800c332:	68c2      	ldr	r2, [r0, #12]
 800c334:	4605      	mov	r5, r0
 800c336:	bb02      	cbnz	r2, 800c37a <_dtoa_r+0xa7a>
 800c338:	4601      	mov	r1, r0
 800c33a:	4650      	mov	r0, sl
 800c33c:	f000 fc98 	bl	800cc70 <__mcmp>
 800c340:	4602      	mov	r2, r0
 800c342:	4629      	mov	r1, r5
 800c344:	4620      	mov	r0, r4
 800c346:	9209      	str	r2, [sp, #36]	; 0x24
 800c348:	f000 fa0c 	bl	800c764 <_Bfree>
 800c34c:	9b07      	ldr	r3, [sp, #28]
 800c34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c350:	9d04      	ldr	r5, [sp, #16]
 800c352:	ea43 0102 	orr.w	r1, r3, r2
 800c356:	9b06      	ldr	r3, [sp, #24]
 800c358:	4319      	orrs	r1, r3
 800c35a:	d110      	bne.n	800c37e <_dtoa_r+0xa7e>
 800c35c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c360:	d029      	beq.n	800c3b6 <_dtoa_r+0xab6>
 800c362:	9b05      	ldr	r3, [sp, #20]
 800c364:	2b00      	cmp	r3, #0
 800c366:	dd02      	ble.n	800c36e <_dtoa_r+0xa6e>
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c36e:	9b01      	ldr	r3, [sp, #4]
 800c370:	f883 9000 	strb.w	r9, [r3]
 800c374:	e774      	b.n	800c260 <_dtoa_r+0x960>
 800c376:	4638      	mov	r0, r7
 800c378:	e7ba      	b.n	800c2f0 <_dtoa_r+0x9f0>
 800c37a:	2201      	movs	r2, #1
 800c37c:	e7e1      	b.n	800c342 <_dtoa_r+0xa42>
 800c37e:	9b05      	ldr	r3, [sp, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	db04      	blt.n	800c38e <_dtoa_r+0xa8e>
 800c384:	9907      	ldr	r1, [sp, #28]
 800c386:	430b      	orrs	r3, r1
 800c388:	9906      	ldr	r1, [sp, #24]
 800c38a:	430b      	orrs	r3, r1
 800c38c:	d120      	bne.n	800c3d0 <_dtoa_r+0xad0>
 800c38e:	2a00      	cmp	r2, #0
 800c390:	dded      	ble.n	800c36e <_dtoa_r+0xa6e>
 800c392:	4651      	mov	r1, sl
 800c394:	2201      	movs	r2, #1
 800c396:	4620      	mov	r0, r4
 800c398:	f000 fbfe 	bl	800cb98 <__lshift>
 800c39c:	4631      	mov	r1, r6
 800c39e:	4682      	mov	sl, r0
 800c3a0:	f000 fc66 	bl	800cc70 <__mcmp>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	dc03      	bgt.n	800c3b0 <_dtoa_r+0xab0>
 800c3a8:	d1e1      	bne.n	800c36e <_dtoa_r+0xa6e>
 800c3aa:	f019 0f01 	tst.w	r9, #1
 800c3ae:	d0de      	beq.n	800c36e <_dtoa_r+0xa6e>
 800c3b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3b4:	d1d8      	bne.n	800c368 <_dtoa_r+0xa68>
 800c3b6:	9a01      	ldr	r2, [sp, #4]
 800c3b8:	2339      	movs	r3, #57	; 0x39
 800c3ba:	7013      	strb	r3, [r2, #0]
 800c3bc:	462b      	mov	r3, r5
 800c3be:	461d      	mov	r5, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3c6:	2a39      	cmp	r2, #57	; 0x39
 800c3c8:	d06c      	beq.n	800c4a4 <_dtoa_r+0xba4>
 800c3ca:	3201      	adds	r2, #1
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	e747      	b.n	800c260 <_dtoa_r+0x960>
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	dd07      	ble.n	800c3e4 <_dtoa_r+0xae4>
 800c3d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3d8:	d0ed      	beq.n	800c3b6 <_dtoa_r+0xab6>
 800c3da:	9a01      	ldr	r2, [sp, #4]
 800c3dc:	f109 0301 	add.w	r3, r9, #1
 800c3e0:	7013      	strb	r3, [r2, #0]
 800c3e2:	e73d      	b.n	800c260 <_dtoa_r+0x960>
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	9a08      	ldr	r2, [sp, #32]
 800c3e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d043      	beq.n	800c478 <_dtoa_r+0xb78>
 800c3f0:	4651      	mov	r1, sl
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 f9d6 	bl	800c7a8 <__multadd>
 800c3fc:	45b8      	cmp	r8, r7
 800c3fe:	4682      	mov	sl, r0
 800c400:	f04f 0300 	mov.w	r3, #0
 800c404:	f04f 020a 	mov.w	r2, #10
 800c408:	4641      	mov	r1, r8
 800c40a:	4620      	mov	r0, r4
 800c40c:	d107      	bne.n	800c41e <_dtoa_r+0xb1e>
 800c40e:	f000 f9cb 	bl	800c7a8 <__multadd>
 800c412:	4680      	mov	r8, r0
 800c414:	4607      	mov	r7, r0
 800c416:	9b04      	ldr	r3, [sp, #16]
 800c418:	3301      	adds	r3, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	e775      	b.n	800c30a <_dtoa_r+0xa0a>
 800c41e:	f000 f9c3 	bl	800c7a8 <__multadd>
 800c422:	4639      	mov	r1, r7
 800c424:	4680      	mov	r8, r0
 800c426:	2300      	movs	r3, #0
 800c428:	220a      	movs	r2, #10
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f9bc 	bl	800c7a8 <__multadd>
 800c430:	4607      	mov	r7, r0
 800c432:	e7f0      	b.n	800c416 <_dtoa_r+0xb16>
 800c434:	9b04      	ldr	r3, [sp, #16]
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	9d00      	ldr	r5, [sp, #0]
 800c43a:	4631      	mov	r1, r6
 800c43c:	4650      	mov	r0, sl
 800c43e:	f7ff f9d5 	bl	800b7ec <quorem>
 800c442:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c446:	9b00      	ldr	r3, [sp, #0]
 800c448:	f805 9b01 	strb.w	r9, [r5], #1
 800c44c:	1aea      	subs	r2, r5, r3
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	4293      	cmp	r3, r2
 800c452:	dd07      	ble.n	800c464 <_dtoa_r+0xb64>
 800c454:	4651      	mov	r1, sl
 800c456:	2300      	movs	r3, #0
 800c458:	220a      	movs	r2, #10
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f9a4 	bl	800c7a8 <__multadd>
 800c460:	4682      	mov	sl, r0
 800c462:	e7ea      	b.n	800c43a <_dtoa_r+0xb3a>
 800c464:	9b01      	ldr	r3, [sp, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	bfc8      	it	gt
 800c46a:	461d      	movgt	r5, r3
 800c46c:	9b00      	ldr	r3, [sp, #0]
 800c46e:	bfd8      	it	le
 800c470:	2501      	movle	r5, #1
 800c472:	441d      	add	r5, r3
 800c474:	f04f 0800 	mov.w	r8, #0
 800c478:	4651      	mov	r1, sl
 800c47a:	2201      	movs	r2, #1
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 fb8b 	bl	800cb98 <__lshift>
 800c482:	4631      	mov	r1, r6
 800c484:	4682      	mov	sl, r0
 800c486:	f000 fbf3 	bl	800cc70 <__mcmp>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	dc96      	bgt.n	800c3bc <_dtoa_r+0xabc>
 800c48e:	d102      	bne.n	800c496 <_dtoa_r+0xb96>
 800c490:	f019 0f01 	tst.w	r9, #1
 800c494:	d192      	bne.n	800c3bc <_dtoa_r+0xabc>
 800c496:	462b      	mov	r3, r5
 800c498:	461d      	mov	r5, r3
 800c49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49e:	2a30      	cmp	r2, #48	; 0x30
 800c4a0:	d0fa      	beq.n	800c498 <_dtoa_r+0xb98>
 800c4a2:	e6dd      	b.n	800c260 <_dtoa_r+0x960>
 800c4a4:	9a00      	ldr	r2, [sp, #0]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d189      	bne.n	800c3be <_dtoa_r+0xabe>
 800c4aa:	f10b 0b01 	add.w	fp, fp, #1
 800c4ae:	2331      	movs	r3, #49	; 0x31
 800c4b0:	e796      	b.n	800c3e0 <_dtoa_r+0xae0>
 800c4b2:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <_dtoa_r+0xbdc>)
 800c4b4:	f7ff ba99 	b.w	800b9ea <_dtoa_r+0xea>
 800c4b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f47f aa6d 	bne.w	800b99a <_dtoa_r+0x9a>
 800c4c0:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <_dtoa_r+0xbe0>)
 800c4c2:	f7ff ba92 	b.w	800b9ea <_dtoa_r+0xea>
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	dcb5      	bgt.n	800c438 <_dtoa_r+0xb38>
 800c4cc:	9b07      	ldr	r3, [sp, #28]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	f73f aeb1 	bgt.w	800c236 <_dtoa_r+0x936>
 800c4d4:	e7b0      	b.n	800c438 <_dtoa_r+0xb38>
 800c4d6:	bf00      	nop
 800c4d8:	0800f1b1 	.word	0x0800f1b1
 800c4dc:	0800f10c 	.word	0x0800f10c
 800c4e0:	0800f135 	.word	0x0800f135

0800c4e4 <_free_r>:
 800c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d044      	beq.n	800c574 <_free_r+0x90>
 800c4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ee:	9001      	str	r0, [sp, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4f6:	bfb8      	it	lt
 800c4f8:	18e4      	addlt	r4, r4, r3
 800c4fa:	f000 f8e7 	bl	800c6cc <__malloc_lock>
 800c4fe:	4a1e      	ldr	r2, [pc, #120]	; (800c578 <_free_r+0x94>)
 800c500:	9801      	ldr	r0, [sp, #4]
 800c502:	6813      	ldr	r3, [r2, #0]
 800c504:	b933      	cbnz	r3, 800c514 <_free_r+0x30>
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	6014      	str	r4, [r2, #0]
 800c50a:	b003      	add	sp, #12
 800c50c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c510:	f000 b8e2 	b.w	800c6d8 <__malloc_unlock>
 800c514:	42a3      	cmp	r3, r4
 800c516:	d908      	bls.n	800c52a <_free_r+0x46>
 800c518:	6825      	ldr	r5, [r4, #0]
 800c51a:	1961      	adds	r1, r4, r5
 800c51c:	428b      	cmp	r3, r1
 800c51e:	bf01      	itttt	eq
 800c520:	6819      	ldreq	r1, [r3, #0]
 800c522:	685b      	ldreq	r3, [r3, #4]
 800c524:	1949      	addeq	r1, r1, r5
 800c526:	6021      	streq	r1, [r4, #0]
 800c528:	e7ed      	b.n	800c506 <_free_r+0x22>
 800c52a:	461a      	mov	r2, r3
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	b10b      	cbz	r3, 800c534 <_free_r+0x50>
 800c530:	42a3      	cmp	r3, r4
 800c532:	d9fa      	bls.n	800c52a <_free_r+0x46>
 800c534:	6811      	ldr	r1, [r2, #0]
 800c536:	1855      	adds	r5, r2, r1
 800c538:	42a5      	cmp	r5, r4
 800c53a:	d10b      	bne.n	800c554 <_free_r+0x70>
 800c53c:	6824      	ldr	r4, [r4, #0]
 800c53e:	4421      	add	r1, r4
 800c540:	1854      	adds	r4, r2, r1
 800c542:	42a3      	cmp	r3, r4
 800c544:	6011      	str	r1, [r2, #0]
 800c546:	d1e0      	bne.n	800c50a <_free_r+0x26>
 800c548:	681c      	ldr	r4, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	6053      	str	r3, [r2, #4]
 800c54e:	440c      	add	r4, r1
 800c550:	6014      	str	r4, [r2, #0]
 800c552:	e7da      	b.n	800c50a <_free_r+0x26>
 800c554:	d902      	bls.n	800c55c <_free_r+0x78>
 800c556:	230c      	movs	r3, #12
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	e7d6      	b.n	800c50a <_free_r+0x26>
 800c55c:	6825      	ldr	r5, [r4, #0]
 800c55e:	1961      	adds	r1, r4, r5
 800c560:	428b      	cmp	r3, r1
 800c562:	bf04      	itt	eq
 800c564:	6819      	ldreq	r1, [r3, #0]
 800c566:	685b      	ldreq	r3, [r3, #4]
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	bf04      	itt	eq
 800c56c:	1949      	addeq	r1, r1, r5
 800c56e:	6021      	streq	r1, [r4, #0]
 800c570:	6054      	str	r4, [r2, #4]
 800c572:	e7ca      	b.n	800c50a <_free_r+0x26>
 800c574:	b003      	add	sp, #12
 800c576:	bd30      	pop	{r4, r5, pc}
 800c578:	20001fb4 	.word	0x20001fb4

0800c57c <malloc>:
 800c57c:	4b02      	ldr	r3, [pc, #8]	; (800c588 <malloc+0xc>)
 800c57e:	4601      	mov	r1, r0
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	f000 b823 	b.w	800c5cc <_malloc_r>
 800c586:	bf00      	nop
 800c588:	20000068 	.word	0x20000068

0800c58c <sbrk_aligned>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	4e0e      	ldr	r6, [pc, #56]	; (800c5c8 <sbrk_aligned+0x3c>)
 800c590:	460c      	mov	r4, r1
 800c592:	6831      	ldr	r1, [r6, #0]
 800c594:	4605      	mov	r5, r0
 800c596:	b911      	cbnz	r1, 800c59e <sbrk_aligned+0x12>
 800c598:	f001 fe1a 	bl	800e1d0 <_sbrk_r>
 800c59c:	6030      	str	r0, [r6, #0]
 800c59e:	4621      	mov	r1, r4
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f001 fe15 	bl	800e1d0 <_sbrk_r>
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	d00a      	beq.n	800c5c0 <sbrk_aligned+0x34>
 800c5aa:	1cc4      	adds	r4, r0, #3
 800c5ac:	f024 0403 	bic.w	r4, r4, #3
 800c5b0:	42a0      	cmp	r0, r4
 800c5b2:	d007      	beq.n	800c5c4 <sbrk_aligned+0x38>
 800c5b4:	1a21      	subs	r1, r4, r0
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f001 fe0a 	bl	800e1d0 <_sbrk_r>
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d101      	bne.n	800c5c4 <sbrk_aligned+0x38>
 800c5c0:	f04f 34ff 	mov.w	r4, #4294967295
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}
 800c5c8:	20001fb8 	.word	0x20001fb8

0800c5cc <_malloc_r>:
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	1ccd      	adds	r5, r1, #3
 800c5d2:	f025 0503 	bic.w	r5, r5, #3
 800c5d6:	3508      	adds	r5, #8
 800c5d8:	2d0c      	cmp	r5, #12
 800c5da:	bf38      	it	cc
 800c5dc:	250c      	movcc	r5, #12
 800c5de:	2d00      	cmp	r5, #0
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	db01      	blt.n	800c5e8 <_malloc_r+0x1c>
 800c5e4:	42a9      	cmp	r1, r5
 800c5e6:	d905      	bls.n	800c5f4 <_malloc_r+0x28>
 800c5e8:	230c      	movs	r3, #12
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	2600      	movs	r6, #0
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6c8 <_malloc_r+0xfc>
 800c5f8:	f000 f868 	bl	800c6cc <__malloc_lock>
 800c5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c600:	461c      	mov	r4, r3
 800c602:	bb5c      	cbnz	r4, 800c65c <_malloc_r+0x90>
 800c604:	4629      	mov	r1, r5
 800c606:	4638      	mov	r0, r7
 800c608:	f7ff ffc0 	bl	800c58c <sbrk_aligned>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	4604      	mov	r4, r0
 800c610:	d155      	bne.n	800c6be <_malloc_r+0xf2>
 800c612:	f8d8 4000 	ldr.w	r4, [r8]
 800c616:	4626      	mov	r6, r4
 800c618:	2e00      	cmp	r6, #0
 800c61a:	d145      	bne.n	800c6a8 <_malloc_r+0xdc>
 800c61c:	2c00      	cmp	r4, #0
 800c61e:	d048      	beq.n	800c6b2 <_malloc_r+0xe6>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	4631      	mov	r1, r6
 800c624:	4638      	mov	r0, r7
 800c626:	eb04 0903 	add.w	r9, r4, r3
 800c62a:	f001 fdd1 	bl	800e1d0 <_sbrk_r>
 800c62e:	4581      	cmp	r9, r0
 800c630:	d13f      	bne.n	800c6b2 <_malloc_r+0xe6>
 800c632:	6821      	ldr	r1, [r4, #0]
 800c634:	1a6d      	subs	r5, r5, r1
 800c636:	4629      	mov	r1, r5
 800c638:	4638      	mov	r0, r7
 800c63a:	f7ff ffa7 	bl	800c58c <sbrk_aligned>
 800c63e:	3001      	adds	r0, #1
 800c640:	d037      	beq.n	800c6b2 <_malloc_r+0xe6>
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	442b      	add	r3, r5
 800c646:	6023      	str	r3, [r4, #0]
 800c648:	f8d8 3000 	ldr.w	r3, [r8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d038      	beq.n	800c6c2 <_malloc_r+0xf6>
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	42a2      	cmp	r2, r4
 800c654:	d12b      	bne.n	800c6ae <_malloc_r+0xe2>
 800c656:	2200      	movs	r2, #0
 800c658:	605a      	str	r2, [r3, #4]
 800c65a:	e00f      	b.n	800c67c <_malloc_r+0xb0>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	1b52      	subs	r2, r2, r5
 800c660:	d41f      	bmi.n	800c6a2 <_malloc_r+0xd6>
 800c662:	2a0b      	cmp	r2, #11
 800c664:	d917      	bls.n	800c696 <_malloc_r+0xca>
 800c666:	1961      	adds	r1, r4, r5
 800c668:	42a3      	cmp	r3, r4
 800c66a:	6025      	str	r5, [r4, #0]
 800c66c:	bf18      	it	ne
 800c66e:	6059      	strne	r1, [r3, #4]
 800c670:	6863      	ldr	r3, [r4, #4]
 800c672:	bf08      	it	eq
 800c674:	f8c8 1000 	streq.w	r1, [r8]
 800c678:	5162      	str	r2, [r4, r5]
 800c67a:	604b      	str	r3, [r1, #4]
 800c67c:	4638      	mov	r0, r7
 800c67e:	f104 060b 	add.w	r6, r4, #11
 800c682:	f000 f829 	bl	800c6d8 <__malloc_unlock>
 800c686:	f026 0607 	bic.w	r6, r6, #7
 800c68a:	1d23      	adds	r3, r4, #4
 800c68c:	1af2      	subs	r2, r6, r3
 800c68e:	d0ae      	beq.n	800c5ee <_malloc_r+0x22>
 800c690:	1b9b      	subs	r3, r3, r6
 800c692:	50a3      	str	r3, [r4, r2]
 800c694:	e7ab      	b.n	800c5ee <_malloc_r+0x22>
 800c696:	42a3      	cmp	r3, r4
 800c698:	6862      	ldr	r2, [r4, #4]
 800c69a:	d1dd      	bne.n	800c658 <_malloc_r+0x8c>
 800c69c:	f8c8 2000 	str.w	r2, [r8]
 800c6a0:	e7ec      	b.n	800c67c <_malloc_r+0xb0>
 800c6a2:	4623      	mov	r3, r4
 800c6a4:	6864      	ldr	r4, [r4, #4]
 800c6a6:	e7ac      	b.n	800c602 <_malloc_r+0x36>
 800c6a8:	4634      	mov	r4, r6
 800c6aa:	6876      	ldr	r6, [r6, #4]
 800c6ac:	e7b4      	b.n	800c618 <_malloc_r+0x4c>
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	e7cc      	b.n	800c64c <_malloc_r+0x80>
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	603b      	str	r3, [r7, #0]
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f000 f80e 	bl	800c6d8 <__malloc_unlock>
 800c6bc:	e797      	b.n	800c5ee <_malloc_r+0x22>
 800c6be:	6025      	str	r5, [r4, #0]
 800c6c0:	e7dc      	b.n	800c67c <_malloc_r+0xb0>
 800c6c2:	605b      	str	r3, [r3, #4]
 800c6c4:	deff      	udf	#255	; 0xff
 800c6c6:	bf00      	nop
 800c6c8:	20001fb4 	.word	0x20001fb4

0800c6cc <__malloc_lock>:
 800c6cc:	4801      	ldr	r0, [pc, #4]	; (800c6d4 <__malloc_lock+0x8>)
 800c6ce:	f7ff b876 	b.w	800b7be <__retarget_lock_acquire_recursive>
 800c6d2:	bf00      	nop
 800c6d4:	20001fb0 	.word	0x20001fb0

0800c6d8 <__malloc_unlock>:
 800c6d8:	4801      	ldr	r0, [pc, #4]	; (800c6e0 <__malloc_unlock+0x8>)
 800c6da:	f7ff b871 	b.w	800b7c0 <__retarget_lock_release_recursive>
 800c6de:	bf00      	nop
 800c6e0:	20001fb0 	.word	0x20001fb0

0800c6e4 <_Balloc>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	69c6      	ldr	r6, [r0, #28]
 800c6e8:	4604      	mov	r4, r0
 800c6ea:	460d      	mov	r5, r1
 800c6ec:	b976      	cbnz	r6, 800c70c <_Balloc+0x28>
 800c6ee:	2010      	movs	r0, #16
 800c6f0:	f7ff ff44 	bl	800c57c <malloc>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	61e0      	str	r0, [r4, #28]
 800c6f8:	b920      	cbnz	r0, 800c704 <_Balloc+0x20>
 800c6fa:	4b18      	ldr	r3, [pc, #96]	; (800c75c <_Balloc+0x78>)
 800c6fc:	4818      	ldr	r0, [pc, #96]	; (800c760 <_Balloc+0x7c>)
 800c6fe:	216b      	movs	r1, #107	; 0x6b
 800c700:	f001 fd7e 	bl	800e200 <__assert_func>
 800c704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c708:	6006      	str	r6, [r0, #0]
 800c70a:	60c6      	str	r6, [r0, #12]
 800c70c:	69e6      	ldr	r6, [r4, #28]
 800c70e:	68f3      	ldr	r3, [r6, #12]
 800c710:	b183      	cbz	r3, 800c734 <_Balloc+0x50>
 800c712:	69e3      	ldr	r3, [r4, #28]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c71a:	b9b8      	cbnz	r0, 800c74c <_Balloc+0x68>
 800c71c:	2101      	movs	r1, #1
 800c71e:	fa01 f605 	lsl.w	r6, r1, r5
 800c722:	1d72      	adds	r2, r6, #5
 800c724:	0092      	lsls	r2, r2, #2
 800c726:	4620      	mov	r0, r4
 800c728:	f001 fd88 	bl	800e23c <_calloc_r>
 800c72c:	b160      	cbz	r0, 800c748 <_Balloc+0x64>
 800c72e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c732:	e00e      	b.n	800c752 <_Balloc+0x6e>
 800c734:	2221      	movs	r2, #33	; 0x21
 800c736:	2104      	movs	r1, #4
 800c738:	4620      	mov	r0, r4
 800c73a:	f001 fd7f 	bl	800e23c <_calloc_r>
 800c73e:	69e3      	ldr	r3, [r4, #28]
 800c740:	60f0      	str	r0, [r6, #12]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1e4      	bne.n	800c712 <_Balloc+0x2e>
 800c748:	2000      	movs	r0, #0
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	6802      	ldr	r2, [r0, #0]
 800c74e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c752:	2300      	movs	r3, #0
 800c754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c758:	e7f7      	b.n	800c74a <_Balloc+0x66>
 800c75a:	bf00      	nop
 800c75c:	0800f142 	.word	0x0800f142
 800c760:	0800f1c2 	.word	0x0800f1c2

0800c764 <_Bfree>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	69c6      	ldr	r6, [r0, #28]
 800c768:	4605      	mov	r5, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	b976      	cbnz	r6, 800c78c <_Bfree+0x28>
 800c76e:	2010      	movs	r0, #16
 800c770:	f7ff ff04 	bl	800c57c <malloc>
 800c774:	4602      	mov	r2, r0
 800c776:	61e8      	str	r0, [r5, #28]
 800c778:	b920      	cbnz	r0, 800c784 <_Bfree+0x20>
 800c77a:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <_Bfree+0x3c>)
 800c77c:	4809      	ldr	r0, [pc, #36]	; (800c7a4 <_Bfree+0x40>)
 800c77e:	218f      	movs	r1, #143	; 0x8f
 800c780:	f001 fd3e 	bl	800e200 <__assert_func>
 800c784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c788:	6006      	str	r6, [r0, #0]
 800c78a:	60c6      	str	r6, [r0, #12]
 800c78c:	b13c      	cbz	r4, 800c79e <_Bfree+0x3a>
 800c78e:	69eb      	ldr	r3, [r5, #28]
 800c790:	6862      	ldr	r2, [r4, #4]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c798:	6021      	str	r1, [r4, #0]
 800c79a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	0800f142 	.word	0x0800f142
 800c7a4:	0800f1c2 	.word	0x0800f1c2

0800c7a8 <__multadd>:
 800c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ac:	690d      	ldr	r5, [r1, #16]
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	461e      	mov	r6, r3
 800c7b4:	f101 0c14 	add.w	ip, r1, #20
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	f8dc 3000 	ldr.w	r3, [ip]
 800c7be:	b299      	uxth	r1, r3
 800c7c0:	fb02 6101 	mla	r1, r2, r1, r6
 800c7c4:	0c1e      	lsrs	r6, r3, #16
 800c7c6:	0c0b      	lsrs	r3, r1, #16
 800c7c8:	fb02 3306 	mla	r3, r2, r6, r3
 800c7cc:	b289      	uxth	r1, r1
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7d4:	4285      	cmp	r5, r0
 800c7d6:	f84c 1b04 	str.w	r1, [ip], #4
 800c7da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7de:	dcec      	bgt.n	800c7ba <__multadd+0x12>
 800c7e0:	b30e      	cbz	r6, 800c826 <__multadd+0x7e>
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dc19      	bgt.n	800c81c <__multadd+0x74>
 800c7e8:	6861      	ldr	r1, [r4, #4]
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	3101      	adds	r1, #1
 800c7ee:	f7ff ff79 	bl	800c6e4 <_Balloc>
 800c7f2:	4680      	mov	r8, r0
 800c7f4:	b928      	cbnz	r0, 800c802 <__multadd+0x5a>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <__multadd+0x84>)
 800c7fa:	480d      	ldr	r0, [pc, #52]	; (800c830 <__multadd+0x88>)
 800c7fc:	21ba      	movs	r1, #186	; 0xba
 800c7fe:	f001 fcff 	bl	800e200 <__assert_func>
 800c802:	6922      	ldr	r2, [r4, #16]
 800c804:	3202      	adds	r2, #2
 800c806:	f104 010c 	add.w	r1, r4, #12
 800c80a:	0092      	lsls	r2, r2, #2
 800c80c:	300c      	adds	r0, #12
 800c80e:	f7fe ffd8 	bl	800b7c2 <memcpy>
 800c812:	4621      	mov	r1, r4
 800c814:	4638      	mov	r0, r7
 800c816:	f7ff ffa5 	bl	800c764 <_Bfree>
 800c81a:	4644      	mov	r4, r8
 800c81c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c820:	3501      	adds	r5, #1
 800c822:	615e      	str	r6, [r3, #20]
 800c824:	6125      	str	r5, [r4, #16]
 800c826:	4620      	mov	r0, r4
 800c828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82c:	0800f1b1 	.word	0x0800f1b1
 800c830:	0800f1c2 	.word	0x0800f1c2

0800c834 <__s2b>:
 800c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c838:	460c      	mov	r4, r1
 800c83a:	4615      	mov	r5, r2
 800c83c:	461f      	mov	r7, r3
 800c83e:	2209      	movs	r2, #9
 800c840:	3308      	adds	r3, #8
 800c842:	4606      	mov	r6, r0
 800c844:	fb93 f3f2 	sdiv	r3, r3, r2
 800c848:	2100      	movs	r1, #0
 800c84a:	2201      	movs	r2, #1
 800c84c:	429a      	cmp	r2, r3
 800c84e:	db09      	blt.n	800c864 <__s2b+0x30>
 800c850:	4630      	mov	r0, r6
 800c852:	f7ff ff47 	bl	800c6e4 <_Balloc>
 800c856:	b940      	cbnz	r0, 800c86a <__s2b+0x36>
 800c858:	4602      	mov	r2, r0
 800c85a:	4b19      	ldr	r3, [pc, #100]	; (800c8c0 <__s2b+0x8c>)
 800c85c:	4819      	ldr	r0, [pc, #100]	; (800c8c4 <__s2b+0x90>)
 800c85e:	21d3      	movs	r1, #211	; 0xd3
 800c860:	f001 fcce 	bl	800e200 <__assert_func>
 800c864:	0052      	lsls	r2, r2, #1
 800c866:	3101      	adds	r1, #1
 800c868:	e7f0      	b.n	800c84c <__s2b+0x18>
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	6143      	str	r3, [r0, #20]
 800c86e:	2d09      	cmp	r5, #9
 800c870:	f04f 0301 	mov.w	r3, #1
 800c874:	6103      	str	r3, [r0, #16]
 800c876:	dd16      	ble.n	800c8a6 <__s2b+0x72>
 800c878:	f104 0909 	add.w	r9, r4, #9
 800c87c:	46c8      	mov	r8, r9
 800c87e:	442c      	add	r4, r5
 800c880:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c884:	4601      	mov	r1, r0
 800c886:	3b30      	subs	r3, #48	; 0x30
 800c888:	220a      	movs	r2, #10
 800c88a:	4630      	mov	r0, r6
 800c88c:	f7ff ff8c 	bl	800c7a8 <__multadd>
 800c890:	45a0      	cmp	r8, r4
 800c892:	d1f5      	bne.n	800c880 <__s2b+0x4c>
 800c894:	f1a5 0408 	sub.w	r4, r5, #8
 800c898:	444c      	add	r4, r9
 800c89a:	1b2d      	subs	r5, r5, r4
 800c89c:	1963      	adds	r3, r4, r5
 800c89e:	42bb      	cmp	r3, r7
 800c8a0:	db04      	blt.n	800c8ac <__s2b+0x78>
 800c8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a6:	340a      	adds	r4, #10
 800c8a8:	2509      	movs	r5, #9
 800c8aa:	e7f6      	b.n	800c89a <__s2b+0x66>
 800c8ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8b0:	4601      	mov	r1, r0
 800c8b2:	3b30      	subs	r3, #48	; 0x30
 800c8b4:	220a      	movs	r2, #10
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f7ff ff76 	bl	800c7a8 <__multadd>
 800c8bc:	e7ee      	b.n	800c89c <__s2b+0x68>
 800c8be:	bf00      	nop
 800c8c0:	0800f1b1 	.word	0x0800f1b1
 800c8c4:	0800f1c2 	.word	0x0800f1c2

0800c8c8 <__hi0bits>:
 800c8c8:	0c03      	lsrs	r3, r0, #16
 800c8ca:	041b      	lsls	r3, r3, #16
 800c8cc:	b9d3      	cbnz	r3, 800c904 <__hi0bits+0x3c>
 800c8ce:	0400      	lsls	r0, r0, #16
 800c8d0:	2310      	movs	r3, #16
 800c8d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8d6:	bf04      	itt	eq
 800c8d8:	0200      	lsleq	r0, r0, #8
 800c8da:	3308      	addeq	r3, #8
 800c8dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8e0:	bf04      	itt	eq
 800c8e2:	0100      	lsleq	r0, r0, #4
 800c8e4:	3304      	addeq	r3, #4
 800c8e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8ea:	bf04      	itt	eq
 800c8ec:	0080      	lsleq	r0, r0, #2
 800c8ee:	3302      	addeq	r3, #2
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	db05      	blt.n	800c900 <__hi0bits+0x38>
 800c8f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8f8:	f103 0301 	add.w	r3, r3, #1
 800c8fc:	bf08      	it	eq
 800c8fe:	2320      	moveq	r3, #32
 800c900:	4618      	mov	r0, r3
 800c902:	4770      	bx	lr
 800c904:	2300      	movs	r3, #0
 800c906:	e7e4      	b.n	800c8d2 <__hi0bits+0xa>

0800c908 <__lo0bits>:
 800c908:	6803      	ldr	r3, [r0, #0]
 800c90a:	f013 0207 	ands.w	r2, r3, #7
 800c90e:	d00c      	beq.n	800c92a <__lo0bits+0x22>
 800c910:	07d9      	lsls	r1, r3, #31
 800c912:	d422      	bmi.n	800c95a <__lo0bits+0x52>
 800c914:	079a      	lsls	r2, r3, #30
 800c916:	bf49      	itett	mi
 800c918:	085b      	lsrmi	r3, r3, #1
 800c91a:	089b      	lsrpl	r3, r3, #2
 800c91c:	6003      	strmi	r3, [r0, #0]
 800c91e:	2201      	movmi	r2, #1
 800c920:	bf5c      	itt	pl
 800c922:	6003      	strpl	r3, [r0, #0]
 800c924:	2202      	movpl	r2, #2
 800c926:	4610      	mov	r0, r2
 800c928:	4770      	bx	lr
 800c92a:	b299      	uxth	r1, r3
 800c92c:	b909      	cbnz	r1, 800c932 <__lo0bits+0x2a>
 800c92e:	0c1b      	lsrs	r3, r3, #16
 800c930:	2210      	movs	r2, #16
 800c932:	b2d9      	uxtb	r1, r3
 800c934:	b909      	cbnz	r1, 800c93a <__lo0bits+0x32>
 800c936:	3208      	adds	r2, #8
 800c938:	0a1b      	lsrs	r3, r3, #8
 800c93a:	0719      	lsls	r1, r3, #28
 800c93c:	bf04      	itt	eq
 800c93e:	091b      	lsreq	r3, r3, #4
 800c940:	3204      	addeq	r2, #4
 800c942:	0799      	lsls	r1, r3, #30
 800c944:	bf04      	itt	eq
 800c946:	089b      	lsreq	r3, r3, #2
 800c948:	3202      	addeq	r2, #2
 800c94a:	07d9      	lsls	r1, r3, #31
 800c94c:	d403      	bmi.n	800c956 <__lo0bits+0x4e>
 800c94e:	085b      	lsrs	r3, r3, #1
 800c950:	f102 0201 	add.w	r2, r2, #1
 800c954:	d003      	beq.n	800c95e <__lo0bits+0x56>
 800c956:	6003      	str	r3, [r0, #0]
 800c958:	e7e5      	b.n	800c926 <__lo0bits+0x1e>
 800c95a:	2200      	movs	r2, #0
 800c95c:	e7e3      	b.n	800c926 <__lo0bits+0x1e>
 800c95e:	2220      	movs	r2, #32
 800c960:	e7e1      	b.n	800c926 <__lo0bits+0x1e>
	...

0800c964 <__i2b>:
 800c964:	b510      	push	{r4, lr}
 800c966:	460c      	mov	r4, r1
 800c968:	2101      	movs	r1, #1
 800c96a:	f7ff febb 	bl	800c6e4 <_Balloc>
 800c96e:	4602      	mov	r2, r0
 800c970:	b928      	cbnz	r0, 800c97e <__i2b+0x1a>
 800c972:	4b05      	ldr	r3, [pc, #20]	; (800c988 <__i2b+0x24>)
 800c974:	4805      	ldr	r0, [pc, #20]	; (800c98c <__i2b+0x28>)
 800c976:	f240 1145 	movw	r1, #325	; 0x145
 800c97a:	f001 fc41 	bl	800e200 <__assert_func>
 800c97e:	2301      	movs	r3, #1
 800c980:	6144      	str	r4, [r0, #20]
 800c982:	6103      	str	r3, [r0, #16]
 800c984:	bd10      	pop	{r4, pc}
 800c986:	bf00      	nop
 800c988:	0800f1b1 	.word	0x0800f1b1
 800c98c:	0800f1c2 	.word	0x0800f1c2

0800c990 <__multiply>:
 800c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	4691      	mov	r9, r2
 800c996:	690a      	ldr	r2, [r1, #16]
 800c998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	bfb8      	it	lt
 800c9a0:	460b      	movlt	r3, r1
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	bfbc      	itt	lt
 800c9a6:	464c      	movlt	r4, r9
 800c9a8:	4699      	movlt	r9, r3
 800c9aa:	6927      	ldr	r7, [r4, #16]
 800c9ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9b0:	68a3      	ldr	r3, [r4, #8]
 800c9b2:	6861      	ldr	r1, [r4, #4]
 800c9b4:	eb07 060a 	add.w	r6, r7, sl
 800c9b8:	42b3      	cmp	r3, r6
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	bfb8      	it	lt
 800c9be:	3101      	addlt	r1, #1
 800c9c0:	f7ff fe90 	bl	800c6e4 <_Balloc>
 800c9c4:	b930      	cbnz	r0, 800c9d4 <__multiply+0x44>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	4b44      	ldr	r3, [pc, #272]	; (800cadc <__multiply+0x14c>)
 800c9ca:	4845      	ldr	r0, [pc, #276]	; (800cae0 <__multiply+0x150>)
 800c9cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c9d0:	f001 fc16 	bl	800e200 <__assert_func>
 800c9d4:	f100 0514 	add.w	r5, r0, #20
 800c9d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9dc:	462b      	mov	r3, r5
 800c9de:	2200      	movs	r2, #0
 800c9e0:	4543      	cmp	r3, r8
 800c9e2:	d321      	bcc.n	800ca28 <__multiply+0x98>
 800c9e4:	f104 0314 	add.w	r3, r4, #20
 800c9e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9ec:	f109 0314 	add.w	r3, r9, #20
 800c9f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9f4:	9202      	str	r2, [sp, #8]
 800c9f6:	1b3a      	subs	r2, r7, r4
 800c9f8:	3a15      	subs	r2, #21
 800c9fa:	f022 0203 	bic.w	r2, r2, #3
 800c9fe:	3204      	adds	r2, #4
 800ca00:	f104 0115 	add.w	r1, r4, #21
 800ca04:	428f      	cmp	r7, r1
 800ca06:	bf38      	it	cc
 800ca08:	2204      	movcc	r2, #4
 800ca0a:	9201      	str	r2, [sp, #4]
 800ca0c:	9a02      	ldr	r2, [sp, #8]
 800ca0e:	9303      	str	r3, [sp, #12]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d80c      	bhi.n	800ca2e <__multiply+0x9e>
 800ca14:	2e00      	cmp	r6, #0
 800ca16:	dd03      	ble.n	800ca20 <__multiply+0x90>
 800ca18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d05b      	beq.n	800cad8 <__multiply+0x148>
 800ca20:	6106      	str	r6, [r0, #16]
 800ca22:	b005      	add	sp, #20
 800ca24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca28:	f843 2b04 	str.w	r2, [r3], #4
 800ca2c:	e7d8      	b.n	800c9e0 <__multiply+0x50>
 800ca2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca32:	f1ba 0f00 	cmp.w	sl, #0
 800ca36:	d024      	beq.n	800ca82 <__multiply+0xf2>
 800ca38:	f104 0e14 	add.w	lr, r4, #20
 800ca3c:	46a9      	mov	r9, r5
 800ca3e:	f04f 0c00 	mov.w	ip, #0
 800ca42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca46:	f8d9 1000 	ldr.w	r1, [r9]
 800ca4a:	fa1f fb82 	uxth.w	fp, r2
 800ca4e:	b289      	uxth	r1, r1
 800ca50:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca58:	f8d9 2000 	ldr.w	r2, [r9]
 800ca5c:	4461      	add	r1, ip
 800ca5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca62:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca6a:	b289      	uxth	r1, r1
 800ca6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca70:	4577      	cmp	r7, lr
 800ca72:	f849 1b04 	str.w	r1, [r9], #4
 800ca76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca7a:	d8e2      	bhi.n	800ca42 <__multiply+0xb2>
 800ca7c:	9a01      	ldr	r2, [sp, #4]
 800ca7e:	f845 c002 	str.w	ip, [r5, r2]
 800ca82:	9a03      	ldr	r2, [sp, #12]
 800ca84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	f1b9 0f00 	cmp.w	r9, #0
 800ca8e:	d021      	beq.n	800cad4 <__multiply+0x144>
 800ca90:	6829      	ldr	r1, [r5, #0]
 800ca92:	f104 0c14 	add.w	ip, r4, #20
 800ca96:	46ae      	mov	lr, r5
 800ca98:	f04f 0a00 	mov.w	sl, #0
 800ca9c:	f8bc b000 	ldrh.w	fp, [ip]
 800caa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800caa4:	fb09 220b 	mla	r2, r9, fp, r2
 800caa8:	4452      	add	r2, sl
 800caaa:	b289      	uxth	r1, r1
 800caac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cab0:	f84e 1b04 	str.w	r1, [lr], #4
 800cab4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cab8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cabc:	f8be 1000 	ldrh.w	r1, [lr]
 800cac0:	fb09 110a 	mla	r1, r9, sl, r1
 800cac4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cac8:	4567      	cmp	r7, ip
 800caca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cace:	d8e5      	bhi.n	800ca9c <__multiply+0x10c>
 800cad0:	9a01      	ldr	r2, [sp, #4]
 800cad2:	50a9      	str	r1, [r5, r2]
 800cad4:	3504      	adds	r5, #4
 800cad6:	e799      	b.n	800ca0c <__multiply+0x7c>
 800cad8:	3e01      	subs	r6, #1
 800cada:	e79b      	b.n	800ca14 <__multiply+0x84>
 800cadc:	0800f1b1 	.word	0x0800f1b1
 800cae0:	0800f1c2 	.word	0x0800f1c2

0800cae4 <__pow5mult>:
 800cae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae8:	4615      	mov	r5, r2
 800caea:	f012 0203 	ands.w	r2, r2, #3
 800caee:	4606      	mov	r6, r0
 800caf0:	460f      	mov	r7, r1
 800caf2:	d007      	beq.n	800cb04 <__pow5mult+0x20>
 800caf4:	4c25      	ldr	r4, [pc, #148]	; (800cb8c <__pow5mult+0xa8>)
 800caf6:	3a01      	subs	r2, #1
 800caf8:	2300      	movs	r3, #0
 800cafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cafe:	f7ff fe53 	bl	800c7a8 <__multadd>
 800cb02:	4607      	mov	r7, r0
 800cb04:	10ad      	asrs	r5, r5, #2
 800cb06:	d03d      	beq.n	800cb84 <__pow5mult+0xa0>
 800cb08:	69f4      	ldr	r4, [r6, #28]
 800cb0a:	b97c      	cbnz	r4, 800cb2c <__pow5mult+0x48>
 800cb0c:	2010      	movs	r0, #16
 800cb0e:	f7ff fd35 	bl	800c57c <malloc>
 800cb12:	4602      	mov	r2, r0
 800cb14:	61f0      	str	r0, [r6, #28]
 800cb16:	b928      	cbnz	r0, 800cb24 <__pow5mult+0x40>
 800cb18:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <__pow5mult+0xac>)
 800cb1a:	481e      	ldr	r0, [pc, #120]	; (800cb94 <__pow5mult+0xb0>)
 800cb1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb20:	f001 fb6e 	bl	800e200 <__assert_func>
 800cb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb28:	6004      	str	r4, [r0, #0]
 800cb2a:	60c4      	str	r4, [r0, #12]
 800cb2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb34:	b94c      	cbnz	r4, 800cb4a <__pow5mult+0x66>
 800cb36:	f240 2171 	movw	r1, #625	; 0x271
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f7ff ff12 	bl	800c964 <__i2b>
 800cb40:	2300      	movs	r3, #0
 800cb42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb46:	4604      	mov	r4, r0
 800cb48:	6003      	str	r3, [r0, #0]
 800cb4a:	f04f 0900 	mov.w	r9, #0
 800cb4e:	07eb      	lsls	r3, r5, #31
 800cb50:	d50a      	bpl.n	800cb68 <__pow5mult+0x84>
 800cb52:	4639      	mov	r1, r7
 800cb54:	4622      	mov	r2, r4
 800cb56:	4630      	mov	r0, r6
 800cb58:	f7ff ff1a 	bl	800c990 <__multiply>
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	4680      	mov	r8, r0
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff fdff 	bl	800c764 <_Bfree>
 800cb66:	4647      	mov	r7, r8
 800cb68:	106d      	asrs	r5, r5, #1
 800cb6a:	d00b      	beq.n	800cb84 <__pow5mult+0xa0>
 800cb6c:	6820      	ldr	r0, [r4, #0]
 800cb6e:	b938      	cbnz	r0, 800cb80 <__pow5mult+0x9c>
 800cb70:	4622      	mov	r2, r4
 800cb72:	4621      	mov	r1, r4
 800cb74:	4630      	mov	r0, r6
 800cb76:	f7ff ff0b 	bl	800c990 <__multiply>
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	f8c0 9000 	str.w	r9, [r0]
 800cb80:	4604      	mov	r4, r0
 800cb82:	e7e4      	b.n	800cb4e <__pow5mult+0x6a>
 800cb84:	4638      	mov	r0, r7
 800cb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb8a:	bf00      	nop
 800cb8c:	0800f310 	.word	0x0800f310
 800cb90:	0800f142 	.word	0x0800f142
 800cb94:	0800f1c2 	.word	0x0800f1c2

0800cb98 <__lshift>:
 800cb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	6849      	ldr	r1, [r1, #4]
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	4607      	mov	r7, r0
 800cbaa:	4691      	mov	r9, r2
 800cbac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbb0:	f108 0601 	add.w	r6, r8, #1
 800cbb4:	42b3      	cmp	r3, r6
 800cbb6:	db0b      	blt.n	800cbd0 <__lshift+0x38>
 800cbb8:	4638      	mov	r0, r7
 800cbba:	f7ff fd93 	bl	800c6e4 <_Balloc>
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	b948      	cbnz	r0, 800cbd6 <__lshift+0x3e>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	4b28      	ldr	r3, [pc, #160]	; (800cc68 <__lshift+0xd0>)
 800cbc6:	4829      	ldr	r0, [pc, #164]	; (800cc6c <__lshift+0xd4>)
 800cbc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cbcc:	f001 fb18 	bl	800e200 <__assert_func>
 800cbd0:	3101      	adds	r1, #1
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	e7ee      	b.n	800cbb4 <__lshift+0x1c>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f100 0114 	add.w	r1, r0, #20
 800cbdc:	f100 0210 	add.w	r2, r0, #16
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	4553      	cmp	r3, sl
 800cbe4:	db33      	blt.n	800cc4e <__lshift+0xb6>
 800cbe6:	6920      	ldr	r0, [r4, #16]
 800cbe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbec:	f104 0314 	add.w	r3, r4, #20
 800cbf0:	f019 091f 	ands.w	r9, r9, #31
 800cbf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbfc:	d02b      	beq.n	800cc56 <__lshift+0xbe>
 800cbfe:	f1c9 0e20 	rsb	lr, r9, #32
 800cc02:	468a      	mov	sl, r1
 800cc04:	2200      	movs	r2, #0
 800cc06:	6818      	ldr	r0, [r3, #0]
 800cc08:	fa00 f009 	lsl.w	r0, r0, r9
 800cc0c:	4310      	orrs	r0, r2
 800cc0e:	f84a 0b04 	str.w	r0, [sl], #4
 800cc12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc16:	459c      	cmp	ip, r3
 800cc18:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc1c:	d8f3      	bhi.n	800cc06 <__lshift+0x6e>
 800cc1e:	ebac 0304 	sub.w	r3, ip, r4
 800cc22:	3b15      	subs	r3, #21
 800cc24:	f023 0303 	bic.w	r3, r3, #3
 800cc28:	3304      	adds	r3, #4
 800cc2a:	f104 0015 	add.w	r0, r4, #21
 800cc2e:	4584      	cmp	ip, r0
 800cc30:	bf38      	it	cc
 800cc32:	2304      	movcc	r3, #4
 800cc34:	50ca      	str	r2, [r1, r3]
 800cc36:	b10a      	cbz	r2, 800cc3c <__lshift+0xa4>
 800cc38:	f108 0602 	add.w	r6, r8, #2
 800cc3c:	3e01      	subs	r6, #1
 800cc3e:	4638      	mov	r0, r7
 800cc40:	612e      	str	r6, [r5, #16]
 800cc42:	4621      	mov	r1, r4
 800cc44:	f7ff fd8e 	bl	800c764 <_Bfree>
 800cc48:	4628      	mov	r0, r5
 800cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc52:	3301      	adds	r3, #1
 800cc54:	e7c5      	b.n	800cbe2 <__lshift+0x4a>
 800cc56:	3904      	subs	r1, #4
 800cc58:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc60:	459c      	cmp	ip, r3
 800cc62:	d8f9      	bhi.n	800cc58 <__lshift+0xc0>
 800cc64:	e7ea      	b.n	800cc3c <__lshift+0xa4>
 800cc66:	bf00      	nop
 800cc68:	0800f1b1 	.word	0x0800f1b1
 800cc6c:	0800f1c2 	.word	0x0800f1c2

0800cc70 <__mcmp>:
 800cc70:	b530      	push	{r4, r5, lr}
 800cc72:	6902      	ldr	r2, [r0, #16]
 800cc74:	690c      	ldr	r4, [r1, #16]
 800cc76:	1b12      	subs	r2, r2, r4
 800cc78:	d10e      	bne.n	800cc98 <__mcmp+0x28>
 800cc7a:	f100 0314 	add.w	r3, r0, #20
 800cc7e:	3114      	adds	r1, #20
 800cc80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc90:	42a5      	cmp	r5, r4
 800cc92:	d003      	beq.n	800cc9c <__mcmp+0x2c>
 800cc94:	d305      	bcc.n	800cca2 <__mcmp+0x32>
 800cc96:	2201      	movs	r2, #1
 800cc98:	4610      	mov	r0, r2
 800cc9a:	bd30      	pop	{r4, r5, pc}
 800cc9c:	4283      	cmp	r3, r0
 800cc9e:	d3f3      	bcc.n	800cc88 <__mcmp+0x18>
 800cca0:	e7fa      	b.n	800cc98 <__mcmp+0x28>
 800cca2:	f04f 32ff 	mov.w	r2, #4294967295
 800cca6:	e7f7      	b.n	800cc98 <__mcmp+0x28>

0800cca8 <__mdiff>:
 800cca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	460c      	mov	r4, r1
 800ccae:	4606      	mov	r6, r0
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	4690      	mov	r8, r2
 800ccb6:	f7ff ffdb 	bl	800cc70 <__mcmp>
 800ccba:	1e05      	subs	r5, r0, #0
 800ccbc:	d110      	bne.n	800cce0 <__mdiff+0x38>
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7ff fd0f 	bl	800c6e4 <_Balloc>
 800ccc6:	b930      	cbnz	r0, 800ccd6 <__mdiff+0x2e>
 800ccc8:	4b3a      	ldr	r3, [pc, #232]	; (800cdb4 <__mdiff+0x10c>)
 800ccca:	4602      	mov	r2, r0
 800cccc:	f240 2137 	movw	r1, #567	; 0x237
 800ccd0:	4839      	ldr	r0, [pc, #228]	; (800cdb8 <__mdiff+0x110>)
 800ccd2:	f001 fa95 	bl	800e200 <__assert_func>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce0:	bfa4      	itt	ge
 800cce2:	4643      	movge	r3, r8
 800cce4:	46a0      	movge	r8, r4
 800cce6:	4630      	mov	r0, r6
 800cce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ccec:	bfa6      	itte	ge
 800ccee:	461c      	movge	r4, r3
 800ccf0:	2500      	movge	r5, #0
 800ccf2:	2501      	movlt	r5, #1
 800ccf4:	f7ff fcf6 	bl	800c6e4 <_Balloc>
 800ccf8:	b920      	cbnz	r0, 800cd04 <__mdiff+0x5c>
 800ccfa:	4b2e      	ldr	r3, [pc, #184]	; (800cdb4 <__mdiff+0x10c>)
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	f240 2145 	movw	r1, #581	; 0x245
 800cd02:	e7e5      	b.n	800ccd0 <__mdiff+0x28>
 800cd04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd08:	6926      	ldr	r6, [r4, #16]
 800cd0a:	60c5      	str	r5, [r0, #12]
 800cd0c:	f104 0914 	add.w	r9, r4, #20
 800cd10:	f108 0514 	add.w	r5, r8, #20
 800cd14:	f100 0e14 	add.w	lr, r0, #20
 800cd18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd20:	f108 0210 	add.w	r2, r8, #16
 800cd24:	46f2      	mov	sl, lr
 800cd26:	2100      	movs	r1, #0
 800cd28:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd30:	fa11 f88b 	uxtah	r8, r1, fp
 800cd34:	b299      	uxth	r1, r3
 800cd36:	0c1b      	lsrs	r3, r3, #16
 800cd38:	eba8 0801 	sub.w	r8, r8, r1
 800cd3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd44:	fa1f f888 	uxth.w	r8, r8
 800cd48:	1419      	asrs	r1, r3, #16
 800cd4a:	454e      	cmp	r6, r9
 800cd4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd50:	f84a 3b04 	str.w	r3, [sl], #4
 800cd54:	d8e8      	bhi.n	800cd28 <__mdiff+0x80>
 800cd56:	1b33      	subs	r3, r6, r4
 800cd58:	3b15      	subs	r3, #21
 800cd5a:	f023 0303 	bic.w	r3, r3, #3
 800cd5e:	3304      	adds	r3, #4
 800cd60:	3415      	adds	r4, #21
 800cd62:	42a6      	cmp	r6, r4
 800cd64:	bf38      	it	cc
 800cd66:	2304      	movcc	r3, #4
 800cd68:	441d      	add	r5, r3
 800cd6a:	4473      	add	r3, lr
 800cd6c:	469e      	mov	lr, r3
 800cd6e:	462e      	mov	r6, r5
 800cd70:	4566      	cmp	r6, ip
 800cd72:	d30e      	bcc.n	800cd92 <__mdiff+0xea>
 800cd74:	f10c 0203 	add.w	r2, ip, #3
 800cd78:	1b52      	subs	r2, r2, r5
 800cd7a:	f022 0203 	bic.w	r2, r2, #3
 800cd7e:	3d03      	subs	r5, #3
 800cd80:	45ac      	cmp	ip, r5
 800cd82:	bf38      	it	cc
 800cd84:	2200      	movcc	r2, #0
 800cd86:	4413      	add	r3, r2
 800cd88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd8c:	b17a      	cbz	r2, 800cdae <__mdiff+0x106>
 800cd8e:	6107      	str	r7, [r0, #16]
 800cd90:	e7a4      	b.n	800ccdc <__mdiff+0x34>
 800cd92:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd96:	fa11 f288 	uxtah	r2, r1, r8
 800cd9a:	1414      	asrs	r4, r2, #16
 800cd9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cda0:	b292      	uxth	r2, r2
 800cda2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cda6:	f84e 2b04 	str.w	r2, [lr], #4
 800cdaa:	1421      	asrs	r1, r4, #16
 800cdac:	e7e0      	b.n	800cd70 <__mdiff+0xc8>
 800cdae:	3f01      	subs	r7, #1
 800cdb0:	e7ea      	b.n	800cd88 <__mdiff+0xe0>
 800cdb2:	bf00      	nop
 800cdb4:	0800f1b1 	.word	0x0800f1b1
 800cdb8:	0800f1c2 	.word	0x0800f1c2

0800cdbc <__ulp>:
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	ed8d 0b00 	vstr	d0, [sp]
 800cdc2:	9a01      	ldr	r2, [sp, #4]
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <__ulp+0x48>)
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dc08      	bgt.n	800cde2 <__ulp+0x26>
 800cdd0:	425b      	negs	r3, r3
 800cdd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cdd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cdda:	da04      	bge.n	800cde6 <__ulp+0x2a>
 800cddc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cde0:	4113      	asrs	r3, r2
 800cde2:	2200      	movs	r2, #0
 800cde4:	e008      	b.n	800cdf8 <__ulp+0x3c>
 800cde6:	f1a2 0314 	sub.w	r3, r2, #20
 800cdea:	2b1e      	cmp	r3, #30
 800cdec:	bfda      	itte	le
 800cdee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cdf2:	40da      	lsrle	r2, r3
 800cdf4:	2201      	movgt	r2, #1
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	ec41 0b10 	vmov	d0, r0, r1
 800ce00:	b002      	add	sp, #8
 800ce02:	4770      	bx	lr
 800ce04:	7ff00000 	.word	0x7ff00000

0800ce08 <__b2d>:
 800ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0c:	6906      	ldr	r6, [r0, #16]
 800ce0e:	f100 0814 	add.w	r8, r0, #20
 800ce12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce16:	1f37      	subs	r7, r6, #4
 800ce18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f7ff fd53 	bl	800c8c8 <__hi0bits>
 800ce22:	f1c0 0320 	rsb	r3, r0, #32
 800ce26:	280a      	cmp	r0, #10
 800ce28:	600b      	str	r3, [r1, #0]
 800ce2a:	491b      	ldr	r1, [pc, #108]	; (800ce98 <__b2d+0x90>)
 800ce2c:	dc15      	bgt.n	800ce5a <__b2d+0x52>
 800ce2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce32:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce36:	45b8      	cmp	r8, r7
 800ce38:	ea43 0501 	orr.w	r5, r3, r1
 800ce3c:	bf34      	ite	cc
 800ce3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce42:	2300      	movcs	r3, #0
 800ce44:	3015      	adds	r0, #21
 800ce46:	fa02 f000 	lsl.w	r0, r2, r0
 800ce4a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce4e:	4303      	orrs	r3, r0
 800ce50:	461c      	mov	r4, r3
 800ce52:	ec45 4b10 	vmov	d0, r4, r5
 800ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5a:	45b8      	cmp	r8, r7
 800ce5c:	bf3a      	itte	cc
 800ce5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce62:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce66:	2300      	movcs	r3, #0
 800ce68:	380b      	subs	r0, #11
 800ce6a:	d012      	beq.n	800ce92 <__b2d+0x8a>
 800ce6c:	f1c0 0120 	rsb	r1, r0, #32
 800ce70:	fa23 f401 	lsr.w	r4, r3, r1
 800ce74:	4082      	lsls	r2, r0
 800ce76:	4322      	orrs	r2, r4
 800ce78:	4547      	cmp	r7, r8
 800ce7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ce7e:	bf8c      	ite	hi
 800ce80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce84:	2200      	movls	r2, #0
 800ce86:	4083      	lsls	r3, r0
 800ce88:	40ca      	lsrs	r2, r1
 800ce8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	e7de      	b.n	800ce50 <__b2d+0x48>
 800ce92:	ea42 0501 	orr.w	r5, r2, r1
 800ce96:	e7db      	b.n	800ce50 <__b2d+0x48>
 800ce98:	3ff00000 	.word	0x3ff00000

0800ce9c <__d2b>:
 800ce9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cea0:	460f      	mov	r7, r1
 800cea2:	2101      	movs	r1, #1
 800cea4:	ec59 8b10 	vmov	r8, r9, d0
 800cea8:	4616      	mov	r6, r2
 800ceaa:	f7ff fc1b 	bl	800c6e4 <_Balloc>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	b930      	cbnz	r0, 800cec0 <__d2b+0x24>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <__d2b+0xac>)
 800ceb6:	4825      	ldr	r0, [pc, #148]	; (800cf4c <__d2b+0xb0>)
 800ceb8:	f240 310f 	movw	r1, #783	; 0x30f
 800cebc:	f001 f9a0 	bl	800e200 <__assert_func>
 800cec0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cec8:	bb2d      	cbnz	r5, 800cf16 <__d2b+0x7a>
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	f1b8 0300 	subs.w	r3, r8, #0
 800ced0:	d026      	beq.n	800cf20 <__d2b+0x84>
 800ced2:	4668      	mov	r0, sp
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	f7ff fd17 	bl	800c908 <__lo0bits>
 800ceda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cede:	b1e8      	cbz	r0, 800cf1c <__d2b+0x80>
 800cee0:	f1c0 0320 	rsb	r3, r0, #32
 800cee4:	fa02 f303 	lsl.w	r3, r2, r3
 800cee8:	430b      	orrs	r3, r1
 800ceea:	40c2      	lsrs	r2, r0
 800ceec:	6163      	str	r3, [r4, #20]
 800ceee:	9201      	str	r2, [sp, #4]
 800cef0:	9b01      	ldr	r3, [sp, #4]
 800cef2:	61a3      	str	r3, [r4, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	bf14      	ite	ne
 800cef8:	2202      	movne	r2, #2
 800cefa:	2201      	moveq	r2, #1
 800cefc:	6122      	str	r2, [r4, #16]
 800cefe:	b1bd      	cbz	r5, 800cf30 <__d2b+0x94>
 800cf00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf04:	4405      	add	r5, r0
 800cf06:	603d      	str	r5, [r7, #0]
 800cf08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf0c:	6030      	str	r0, [r6, #0]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	b003      	add	sp, #12
 800cf12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf1a:	e7d6      	b.n	800ceca <__d2b+0x2e>
 800cf1c:	6161      	str	r1, [r4, #20]
 800cf1e:	e7e7      	b.n	800cef0 <__d2b+0x54>
 800cf20:	a801      	add	r0, sp, #4
 800cf22:	f7ff fcf1 	bl	800c908 <__lo0bits>
 800cf26:	9b01      	ldr	r3, [sp, #4]
 800cf28:	6163      	str	r3, [r4, #20]
 800cf2a:	3020      	adds	r0, #32
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	e7e5      	b.n	800cefc <__d2b+0x60>
 800cf30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf38:	6038      	str	r0, [r7, #0]
 800cf3a:	6918      	ldr	r0, [r3, #16]
 800cf3c:	f7ff fcc4 	bl	800c8c8 <__hi0bits>
 800cf40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf44:	e7e2      	b.n	800cf0c <__d2b+0x70>
 800cf46:	bf00      	nop
 800cf48:	0800f1b1 	.word	0x0800f1b1
 800cf4c:	0800f1c2 	.word	0x0800f1c2

0800cf50 <__ratio>:
 800cf50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	4688      	mov	r8, r1
 800cf56:	4669      	mov	r1, sp
 800cf58:	4681      	mov	r9, r0
 800cf5a:	f7ff ff55 	bl	800ce08 <__b2d>
 800cf5e:	a901      	add	r1, sp, #4
 800cf60:	4640      	mov	r0, r8
 800cf62:	ec55 4b10 	vmov	r4, r5, d0
 800cf66:	f7ff ff4f 	bl	800ce08 <__b2d>
 800cf6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf72:	eba3 0c02 	sub.w	ip, r3, r2
 800cf76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf7a:	1a9b      	subs	r3, r3, r2
 800cf7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf80:	ec51 0b10 	vmov	r0, r1, d0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	bfd6      	itet	le
 800cf88:	460a      	movle	r2, r1
 800cf8a:	462a      	movgt	r2, r5
 800cf8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf90:	468b      	mov	fp, r1
 800cf92:	462f      	mov	r7, r5
 800cf94:	bfd4      	ite	le
 800cf96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cf9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	ee10 2a10 	vmov	r2, s0
 800cfa4:	465b      	mov	r3, fp
 800cfa6:	4639      	mov	r1, r7
 800cfa8:	f7f3 fc50 	bl	800084c <__aeabi_ddiv>
 800cfac:	ec41 0b10 	vmov	d0, r0, r1
 800cfb0:	b003      	add	sp, #12
 800cfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfb6 <__copybits>:
 800cfb6:	3901      	subs	r1, #1
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	1149      	asrs	r1, r1, #5
 800cfbc:	6914      	ldr	r4, [r2, #16]
 800cfbe:	3101      	adds	r1, #1
 800cfc0:	f102 0314 	add.w	r3, r2, #20
 800cfc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cfcc:	1f05      	subs	r5, r0, #4
 800cfce:	42a3      	cmp	r3, r4
 800cfd0:	d30c      	bcc.n	800cfec <__copybits+0x36>
 800cfd2:	1aa3      	subs	r3, r4, r2
 800cfd4:	3b11      	subs	r3, #17
 800cfd6:	f023 0303 	bic.w	r3, r3, #3
 800cfda:	3211      	adds	r2, #17
 800cfdc:	42a2      	cmp	r2, r4
 800cfde:	bf88      	it	hi
 800cfe0:	2300      	movhi	r3, #0
 800cfe2:	4418      	add	r0, r3
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4288      	cmp	r0, r1
 800cfe8:	d305      	bcc.n	800cff6 <__copybits+0x40>
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	f853 6b04 	ldr.w	r6, [r3], #4
 800cff0:	f845 6f04 	str.w	r6, [r5, #4]!
 800cff4:	e7eb      	b.n	800cfce <__copybits+0x18>
 800cff6:	f840 3b04 	str.w	r3, [r0], #4
 800cffa:	e7f4      	b.n	800cfe6 <__copybits+0x30>

0800cffc <__any_on>:
 800cffc:	f100 0214 	add.w	r2, r0, #20
 800d000:	6900      	ldr	r0, [r0, #16]
 800d002:	114b      	asrs	r3, r1, #5
 800d004:	4298      	cmp	r0, r3
 800d006:	b510      	push	{r4, lr}
 800d008:	db11      	blt.n	800d02e <__any_on+0x32>
 800d00a:	dd0a      	ble.n	800d022 <__any_on+0x26>
 800d00c:	f011 011f 	ands.w	r1, r1, #31
 800d010:	d007      	beq.n	800d022 <__any_on+0x26>
 800d012:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d016:	fa24 f001 	lsr.w	r0, r4, r1
 800d01a:	fa00 f101 	lsl.w	r1, r0, r1
 800d01e:	428c      	cmp	r4, r1
 800d020:	d10b      	bne.n	800d03a <__any_on+0x3e>
 800d022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d026:	4293      	cmp	r3, r2
 800d028:	d803      	bhi.n	800d032 <__any_on+0x36>
 800d02a:	2000      	movs	r0, #0
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	4603      	mov	r3, r0
 800d030:	e7f7      	b.n	800d022 <__any_on+0x26>
 800d032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d036:	2900      	cmp	r1, #0
 800d038:	d0f5      	beq.n	800d026 <__any_on+0x2a>
 800d03a:	2001      	movs	r0, #1
 800d03c:	e7f6      	b.n	800d02c <__any_on+0x30>

0800d03e <sulp>:
 800d03e:	b570      	push	{r4, r5, r6, lr}
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	ec45 4b10 	vmov	d0, r4, r5
 800d048:	4616      	mov	r6, r2
 800d04a:	f7ff feb7 	bl	800cdbc <__ulp>
 800d04e:	ec51 0b10 	vmov	r0, r1, d0
 800d052:	b17e      	cbz	r6, 800d074 <sulp+0x36>
 800d054:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d058:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dd09      	ble.n	800d074 <sulp+0x36>
 800d060:	051b      	lsls	r3, r3, #20
 800d062:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d066:	2400      	movs	r4, #0
 800d068:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d06c:	4622      	mov	r2, r4
 800d06e:	462b      	mov	r3, r5
 800d070:	f7f3 fac2 	bl	80005f8 <__aeabi_dmul>
 800d074:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d078 <_strtod_l>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	ed2d 8b02 	vpush	{d8}
 800d080:	b09b      	sub	sp, #108	; 0x6c
 800d082:	4604      	mov	r4, r0
 800d084:	9213      	str	r2, [sp, #76]	; 0x4c
 800d086:	2200      	movs	r2, #0
 800d088:	9216      	str	r2, [sp, #88]	; 0x58
 800d08a:	460d      	mov	r5, r1
 800d08c:	f04f 0800 	mov.w	r8, #0
 800d090:	f04f 0900 	mov.w	r9, #0
 800d094:	460a      	mov	r2, r1
 800d096:	9215      	str	r2, [sp, #84]	; 0x54
 800d098:	7811      	ldrb	r1, [r2, #0]
 800d09a:	292b      	cmp	r1, #43	; 0x2b
 800d09c:	d04c      	beq.n	800d138 <_strtod_l+0xc0>
 800d09e:	d83a      	bhi.n	800d116 <_strtod_l+0x9e>
 800d0a0:	290d      	cmp	r1, #13
 800d0a2:	d834      	bhi.n	800d10e <_strtod_l+0x96>
 800d0a4:	2908      	cmp	r1, #8
 800d0a6:	d834      	bhi.n	800d112 <_strtod_l+0x9a>
 800d0a8:	2900      	cmp	r1, #0
 800d0aa:	d03d      	beq.n	800d128 <_strtod_l+0xb0>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	920a      	str	r2, [sp, #40]	; 0x28
 800d0b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d0b2:	7832      	ldrb	r2, [r6, #0]
 800d0b4:	2a30      	cmp	r2, #48	; 0x30
 800d0b6:	f040 80b4 	bne.w	800d222 <_strtod_l+0x1aa>
 800d0ba:	7872      	ldrb	r2, [r6, #1]
 800d0bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d0c0:	2a58      	cmp	r2, #88	; 0x58
 800d0c2:	d170      	bne.n	800d1a6 <_strtod_l+0x12e>
 800d0c4:	9302      	str	r3, [sp, #8]
 800d0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0c8:	9301      	str	r3, [sp, #4]
 800d0ca:	ab16      	add	r3, sp, #88	; 0x58
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	4a8e      	ldr	r2, [pc, #568]	; (800d308 <_strtod_l+0x290>)
 800d0d0:	ab17      	add	r3, sp, #92	; 0x5c
 800d0d2:	a915      	add	r1, sp, #84	; 0x54
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f001 f92f 	bl	800e338 <__gethex>
 800d0da:	f010 070f 	ands.w	r7, r0, #15
 800d0de:	4605      	mov	r5, r0
 800d0e0:	d005      	beq.n	800d0ee <_strtod_l+0x76>
 800d0e2:	2f06      	cmp	r7, #6
 800d0e4:	d12a      	bne.n	800d13c <_strtod_l+0xc4>
 800d0e6:	3601      	adds	r6, #1
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9615      	str	r6, [sp, #84]	; 0x54
 800d0ec:	930a      	str	r3, [sp, #40]	; 0x28
 800d0ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 857f 	bne.w	800dbf4 <_strtod_l+0xb7c>
 800d0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0f8:	b1db      	cbz	r3, 800d132 <_strtod_l+0xba>
 800d0fa:	4642      	mov	r2, r8
 800d0fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d100:	ec43 2b10 	vmov	d0, r2, r3
 800d104:	b01b      	add	sp, #108	; 0x6c
 800d106:	ecbd 8b02 	vpop	{d8}
 800d10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10e:	2920      	cmp	r1, #32
 800d110:	d1cc      	bne.n	800d0ac <_strtod_l+0x34>
 800d112:	3201      	adds	r2, #1
 800d114:	e7bf      	b.n	800d096 <_strtod_l+0x1e>
 800d116:	292d      	cmp	r1, #45	; 0x2d
 800d118:	d1c8      	bne.n	800d0ac <_strtod_l+0x34>
 800d11a:	2101      	movs	r1, #1
 800d11c:	910a      	str	r1, [sp, #40]	; 0x28
 800d11e:	1c51      	adds	r1, r2, #1
 800d120:	9115      	str	r1, [sp, #84]	; 0x54
 800d122:	7852      	ldrb	r2, [r2, #1]
 800d124:	2a00      	cmp	r2, #0
 800d126:	d1c3      	bne.n	800d0b0 <_strtod_l+0x38>
 800d128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d12a:	9515      	str	r5, [sp, #84]	; 0x54
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f040 855f 	bne.w	800dbf0 <_strtod_l+0xb78>
 800d132:	4642      	mov	r2, r8
 800d134:	464b      	mov	r3, r9
 800d136:	e7e3      	b.n	800d100 <_strtod_l+0x88>
 800d138:	2100      	movs	r1, #0
 800d13a:	e7ef      	b.n	800d11c <_strtod_l+0xa4>
 800d13c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d13e:	b13a      	cbz	r2, 800d150 <_strtod_l+0xd8>
 800d140:	2135      	movs	r1, #53	; 0x35
 800d142:	a818      	add	r0, sp, #96	; 0x60
 800d144:	f7ff ff37 	bl	800cfb6 <__copybits>
 800d148:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7ff fb0a 	bl	800c764 <_Bfree>
 800d150:	3f01      	subs	r7, #1
 800d152:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d154:	2f04      	cmp	r7, #4
 800d156:	d806      	bhi.n	800d166 <_strtod_l+0xee>
 800d158:	e8df f007 	tbb	[pc, r7]
 800d15c:	201d0314 	.word	0x201d0314
 800d160:	14          	.byte	0x14
 800d161:	00          	.byte	0x00
 800d162:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d166:	05e9      	lsls	r1, r5, #23
 800d168:	bf48      	it	mi
 800d16a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d16e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d172:	0d1b      	lsrs	r3, r3, #20
 800d174:	051b      	lsls	r3, r3, #20
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1b9      	bne.n	800d0ee <_strtod_l+0x76>
 800d17a:	f7fe faf5 	bl	800b768 <__errno>
 800d17e:	2322      	movs	r3, #34	; 0x22
 800d180:	6003      	str	r3, [r0, #0]
 800d182:	e7b4      	b.n	800d0ee <_strtod_l+0x76>
 800d184:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d188:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d18c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d190:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d194:	e7e7      	b.n	800d166 <_strtod_l+0xee>
 800d196:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d310 <_strtod_l+0x298>
 800d19a:	e7e4      	b.n	800d166 <_strtod_l+0xee>
 800d19c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d1a0:	f04f 38ff 	mov.w	r8, #4294967295
 800d1a4:	e7df      	b.n	800d166 <_strtod_l+0xee>
 800d1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	9215      	str	r2, [sp, #84]	; 0x54
 800d1ac:	785b      	ldrb	r3, [r3, #1]
 800d1ae:	2b30      	cmp	r3, #48	; 0x30
 800d1b0:	d0f9      	beq.n	800d1a6 <_strtod_l+0x12e>
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d09b      	beq.n	800d0ee <_strtod_l+0x76>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	f04f 0a00 	mov.w	sl, #0
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d1c6:	46d3      	mov	fp, sl
 800d1c8:	220a      	movs	r2, #10
 800d1ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d1cc:	7806      	ldrb	r6, [r0, #0]
 800d1ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d1d2:	b2d9      	uxtb	r1, r3
 800d1d4:	2909      	cmp	r1, #9
 800d1d6:	d926      	bls.n	800d226 <_strtod_l+0x1ae>
 800d1d8:	494c      	ldr	r1, [pc, #304]	; (800d30c <_strtod_l+0x294>)
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f000 ffe6 	bl	800e1ac <strncmp>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d030      	beq.n	800d246 <_strtod_l+0x1ce>
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	4632      	mov	r2, r6
 800d1e8:	9005      	str	r0, [sp, #20]
 800d1ea:	465e      	mov	r6, fp
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2a65      	cmp	r2, #101	; 0x65
 800d1f0:	d001      	beq.n	800d1f6 <_strtod_l+0x17e>
 800d1f2:	2a45      	cmp	r2, #69	; 0x45
 800d1f4:	d113      	bne.n	800d21e <_strtod_l+0x1a6>
 800d1f6:	b91e      	cbnz	r6, 800d200 <_strtod_l+0x188>
 800d1f8:	9a04      	ldr	r2, [sp, #16]
 800d1fa:	4302      	orrs	r2, r0
 800d1fc:	d094      	beq.n	800d128 <_strtod_l+0xb0>
 800d1fe:	2600      	movs	r6, #0
 800d200:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d202:	1c6a      	adds	r2, r5, #1
 800d204:	9215      	str	r2, [sp, #84]	; 0x54
 800d206:	786a      	ldrb	r2, [r5, #1]
 800d208:	2a2b      	cmp	r2, #43	; 0x2b
 800d20a:	d074      	beq.n	800d2f6 <_strtod_l+0x27e>
 800d20c:	2a2d      	cmp	r2, #45	; 0x2d
 800d20e:	d078      	beq.n	800d302 <_strtod_l+0x28a>
 800d210:	f04f 0c00 	mov.w	ip, #0
 800d214:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d218:	2909      	cmp	r1, #9
 800d21a:	d97f      	bls.n	800d31c <_strtod_l+0x2a4>
 800d21c:	9515      	str	r5, [sp, #84]	; 0x54
 800d21e:	2700      	movs	r7, #0
 800d220:	e09e      	b.n	800d360 <_strtod_l+0x2e8>
 800d222:	2300      	movs	r3, #0
 800d224:	e7c8      	b.n	800d1b8 <_strtod_l+0x140>
 800d226:	f1bb 0f08 	cmp.w	fp, #8
 800d22a:	bfd8      	it	le
 800d22c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d22e:	f100 0001 	add.w	r0, r0, #1
 800d232:	bfda      	itte	le
 800d234:	fb02 3301 	mlale	r3, r2, r1, r3
 800d238:	9309      	strle	r3, [sp, #36]	; 0x24
 800d23a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d23e:	f10b 0b01 	add.w	fp, fp, #1
 800d242:	9015      	str	r0, [sp, #84]	; 0x54
 800d244:	e7c1      	b.n	800d1ca <_strtod_l+0x152>
 800d246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d248:	1c5a      	adds	r2, r3, #1
 800d24a:	9215      	str	r2, [sp, #84]	; 0x54
 800d24c:	785a      	ldrb	r2, [r3, #1]
 800d24e:	f1bb 0f00 	cmp.w	fp, #0
 800d252:	d037      	beq.n	800d2c4 <_strtod_l+0x24c>
 800d254:	9005      	str	r0, [sp, #20]
 800d256:	465e      	mov	r6, fp
 800d258:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d25c:	2b09      	cmp	r3, #9
 800d25e:	d912      	bls.n	800d286 <_strtod_l+0x20e>
 800d260:	2301      	movs	r3, #1
 800d262:	e7c4      	b.n	800d1ee <_strtod_l+0x176>
 800d264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	9215      	str	r2, [sp, #84]	; 0x54
 800d26a:	785a      	ldrb	r2, [r3, #1]
 800d26c:	3001      	adds	r0, #1
 800d26e:	2a30      	cmp	r2, #48	; 0x30
 800d270:	d0f8      	beq.n	800d264 <_strtod_l+0x1ec>
 800d272:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d276:	2b08      	cmp	r3, #8
 800d278:	f200 84c1 	bhi.w	800dbfe <_strtod_l+0xb86>
 800d27c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d27e:	9005      	str	r0, [sp, #20]
 800d280:	2000      	movs	r0, #0
 800d282:	930b      	str	r3, [sp, #44]	; 0x2c
 800d284:	4606      	mov	r6, r0
 800d286:	3a30      	subs	r2, #48	; 0x30
 800d288:	f100 0301 	add.w	r3, r0, #1
 800d28c:	d014      	beq.n	800d2b8 <_strtod_l+0x240>
 800d28e:	9905      	ldr	r1, [sp, #20]
 800d290:	4419      	add	r1, r3
 800d292:	9105      	str	r1, [sp, #20]
 800d294:	4633      	mov	r3, r6
 800d296:	eb00 0c06 	add.w	ip, r0, r6
 800d29a:	210a      	movs	r1, #10
 800d29c:	4563      	cmp	r3, ip
 800d29e:	d113      	bne.n	800d2c8 <_strtod_l+0x250>
 800d2a0:	1833      	adds	r3, r6, r0
 800d2a2:	2b08      	cmp	r3, #8
 800d2a4:	f106 0601 	add.w	r6, r6, #1
 800d2a8:	4406      	add	r6, r0
 800d2aa:	dc1a      	bgt.n	800d2e2 <_strtod_l+0x26a>
 800d2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2ae:	230a      	movs	r3, #10
 800d2b0:	fb03 2301 	mla	r3, r3, r1, r2
 800d2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2ba:	1c51      	adds	r1, r2, #1
 800d2bc:	9115      	str	r1, [sp, #84]	; 0x54
 800d2be:	7852      	ldrb	r2, [r2, #1]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	e7c9      	b.n	800d258 <_strtod_l+0x1e0>
 800d2c4:	4658      	mov	r0, fp
 800d2c6:	e7d2      	b.n	800d26e <_strtod_l+0x1f6>
 800d2c8:	2b08      	cmp	r3, #8
 800d2ca:	f103 0301 	add.w	r3, r3, #1
 800d2ce:	dc03      	bgt.n	800d2d8 <_strtod_l+0x260>
 800d2d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d2d2:	434f      	muls	r7, r1
 800d2d4:	9709      	str	r7, [sp, #36]	; 0x24
 800d2d6:	e7e1      	b.n	800d29c <_strtod_l+0x224>
 800d2d8:	2b10      	cmp	r3, #16
 800d2da:	bfd8      	it	le
 800d2dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d2e0:	e7dc      	b.n	800d29c <_strtod_l+0x224>
 800d2e2:	2e10      	cmp	r6, #16
 800d2e4:	bfdc      	itt	le
 800d2e6:	230a      	movle	r3, #10
 800d2e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d2ec:	e7e3      	b.n	800d2b6 <_strtod_l+0x23e>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9305      	str	r3, [sp, #20]
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e780      	b.n	800d1f8 <_strtod_l+0x180>
 800d2f6:	f04f 0c00 	mov.w	ip, #0
 800d2fa:	1caa      	adds	r2, r5, #2
 800d2fc:	9215      	str	r2, [sp, #84]	; 0x54
 800d2fe:	78aa      	ldrb	r2, [r5, #2]
 800d300:	e788      	b.n	800d214 <_strtod_l+0x19c>
 800d302:	f04f 0c01 	mov.w	ip, #1
 800d306:	e7f8      	b.n	800d2fa <_strtod_l+0x282>
 800d308:	0800f320 	.word	0x0800f320
 800d30c:	0800f31c 	.word	0x0800f31c
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d316:	1c51      	adds	r1, r2, #1
 800d318:	9115      	str	r1, [sp, #84]	; 0x54
 800d31a:	7852      	ldrb	r2, [r2, #1]
 800d31c:	2a30      	cmp	r2, #48	; 0x30
 800d31e:	d0f9      	beq.n	800d314 <_strtod_l+0x29c>
 800d320:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d324:	2908      	cmp	r1, #8
 800d326:	f63f af7a 	bhi.w	800d21e <_strtod_l+0x1a6>
 800d32a:	3a30      	subs	r2, #48	; 0x30
 800d32c:	9208      	str	r2, [sp, #32]
 800d32e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d330:	920c      	str	r2, [sp, #48]	; 0x30
 800d332:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d334:	1c57      	adds	r7, r2, #1
 800d336:	9715      	str	r7, [sp, #84]	; 0x54
 800d338:	7852      	ldrb	r2, [r2, #1]
 800d33a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d33e:	f1be 0f09 	cmp.w	lr, #9
 800d342:	d938      	bls.n	800d3b6 <_strtod_l+0x33e>
 800d344:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d346:	1a7f      	subs	r7, r7, r1
 800d348:	2f08      	cmp	r7, #8
 800d34a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d34e:	dc03      	bgt.n	800d358 <_strtod_l+0x2e0>
 800d350:	9908      	ldr	r1, [sp, #32]
 800d352:	428f      	cmp	r7, r1
 800d354:	bfa8      	it	ge
 800d356:	460f      	movge	r7, r1
 800d358:	f1bc 0f00 	cmp.w	ip, #0
 800d35c:	d000      	beq.n	800d360 <_strtod_l+0x2e8>
 800d35e:	427f      	negs	r7, r7
 800d360:	2e00      	cmp	r6, #0
 800d362:	d14f      	bne.n	800d404 <_strtod_l+0x38c>
 800d364:	9904      	ldr	r1, [sp, #16]
 800d366:	4301      	orrs	r1, r0
 800d368:	f47f aec1 	bne.w	800d0ee <_strtod_l+0x76>
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f47f aedb 	bne.w	800d128 <_strtod_l+0xb0>
 800d372:	2a69      	cmp	r2, #105	; 0x69
 800d374:	d029      	beq.n	800d3ca <_strtod_l+0x352>
 800d376:	dc26      	bgt.n	800d3c6 <_strtod_l+0x34e>
 800d378:	2a49      	cmp	r2, #73	; 0x49
 800d37a:	d026      	beq.n	800d3ca <_strtod_l+0x352>
 800d37c:	2a4e      	cmp	r2, #78	; 0x4e
 800d37e:	f47f aed3 	bne.w	800d128 <_strtod_l+0xb0>
 800d382:	499b      	ldr	r1, [pc, #620]	; (800d5f0 <_strtod_l+0x578>)
 800d384:	a815      	add	r0, sp, #84	; 0x54
 800d386:	f001 fa17 	bl	800e7b8 <__match>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f43f aecc 	beq.w	800d128 <_strtod_l+0xb0>
 800d390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b28      	cmp	r3, #40	; 0x28
 800d396:	d12f      	bne.n	800d3f8 <_strtod_l+0x380>
 800d398:	4996      	ldr	r1, [pc, #600]	; (800d5f4 <_strtod_l+0x57c>)
 800d39a:	aa18      	add	r2, sp, #96	; 0x60
 800d39c:	a815      	add	r0, sp, #84	; 0x54
 800d39e:	f001 fa1f 	bl	800e7e0 <__hexnan>
 800d3a2:	2805      	cmp	r0, #5
 800d3a4:	d128      	bne.n	800d3f8 <_strtod_l+0x380>
 800d3a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d3ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d3b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d3b4:	e69b      	b.n	800d0ee <_strtod_l+0x76>
 800d3b6:	9f08      	ldr	r7, [sp, #32]
 800d3b8:	210a      	movs	r1, #10
 800d3ba:	fb01 2107 	mla	r1, r1, r7, r2
 800d3be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d3c2:	9208      	str	r2, [sp, #32]
 800d3c4:	e7b5      	b.n	800d332 <_strtod_l+0x2ba>
 800d3c6:	2a6e      	cmp	r2, #110	; 0x6e
 800d3c8:	e7d9      	b.n	800d37e <_strtod_l+0x306>
 800d3ca:	498b      	ldr	r1, [pc, #556]	; (800d5f8 <_strtod_l+0x580>)
 800d3cc:	a815      	add	r0, sp, #84	; 0x54
 800d3ce:	f001 f9f3 	bl	800e7b8 <__match>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	f43f aea8 	beq.w	800d128 <_strtod_l+0xb0>
 800d3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3da:	4988      	ldr	r1, [pc, #544]	; (800d5fc <_strtod_l+0x584>)
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	a815      	add	r0, sp, #84	; 0x54
 800d3e0:	9315      	str	r3, [sp, #84]	; 0x54
 800d3e2:	f001 f9e9 	bl	800e7b8 <__match>
 800d3e6:	b910      	cbnz	r0, 800d3ee <_strtod_l+0x376>
 800d3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	9315      	str	r3, [sp, #84]	; 0x54
 800d3ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d60c <_strtod_l+0x594>
 800d3f2:	f04f 0800 	mov.w	r8, #0
 800d3f6:	e67a      	b.n	800d0ee <_strtod_l+0x76>
 800d3f8:	4881      	ldr	r0, [pc, #516]	; (800d600 <_strtod_l+0x588>)
 800d3fa:	f000 fef9 	bl	800e1f0 <nan>
 800d3fe:	ec59 8b10 	vmov	r8, r9, d0
 800d402:	e674      	b.n	800d0ee <_strtod_l+0x76>
 800d404:	9b05      	ldr	r3, [sp, #20]
 800d406:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d408:	1afb      	subs	r3, r7, r3
 800d40a:	f1bb 0f00 	cmp.w	fp, #0
 800d40e:	bf08      	it	eq
 800d410:	46b3      	moveq	fp, r6
 800d412:	2e10      	cmp	r6, #16
 800d414:	9308      	str	r3, [sp, #32]
 800d416:	4635      	mov	r5, r6
 800d418:	bfa8      	it	ge
 800d41a:	2510      	movge	r5, #16
 800d41c:	f7f3 f872 	bl	8000504 <__aeabi_ui2d>
 800d420:	2e09      	cmp	r6, #9
 800d422:	4680      	mov	r8, r0
 800d424:	4689      	mov	r9, r1
 800d426:	dd13      	ble.n	800d450 <_strtod_l+0x3d8>
 800d428:	4b76      	ldr	r3, [pc, #472]	; (800d604 <_strtod_l+0x58c>)
 800d42a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d42e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d432:	f7f3 f8e1 	bl	80005f8 <__aeabi_dmul>
 800d436:	4680      	mov	r8, r0
 800d438:	4650      	mov	r0, sl
 800d43a:	4689      	mov	r9, r1
 800d43c:	f7f3 f862 	bl	8000504 <__aeabi_ui2d>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	4640      	mov	r0, r8
 800d446:	4649      	mov	r1, r9
 800d448:	f7f2 ff20 	bl	800028c <__adddf3>
 800d44c:	4680      	mov	r8, r0
 800d44e:	4689      	mov	r9, r1
 800d450:	2e0f      	cmp	r6, #15
 800d452:	dc38      	bgt.n	800d4c6 <_strtod_l+0x44e>
 800d454:	9b08      	ldr	r3, [sp, #32]
 800d456:	2b00      	cmp	r3, #0
 800d458:	f43f ae49 	beq.w	800d0ee <_strtod_l+0x76>
 800d45c:	dd24      	ble.n	800d4a8 <_strtod_l+0x430>
 800d45e:	2b16      	cmp	r3, #22
 800d460:	dc0b      	bgt.n	800d47a <_strtod_l+0x402>
 800d462:	4968      	ldr	r1, [pc, #416]	; (800d604 <_strtod_l+0x58c>)
 800d464:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d46c:	4642      	mov	r2, r8
 800d46e:	464b      	mov	r3, r9
 800d470:	f7f3 f8c2 	bl	80005f8 <__aeabi_dmul>
 800d474:	4680      	mov	r8, r0
 800d476:	4689      	mov	r9, r1
 800d478:	e639      	b.n	800d0ee <_strtod_l+0x76>
 800d47a:	9a08      	ldr	r2, [sp, #32]
 800d47c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d480:	4293      	cmp	r3, r2
 800d482:	db20      	blt.n	800d4c6 <_strtod_l+0x44e>
 800d484:	4c5f      	ldr	r4, [pc, #380]	; (800d604 <_strtod_l+0x58c>)
 800d486:	f1c6 060f 	rsb	r6, r6, #15
 800d48a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d48e:	4642      	mov	r2, r8
 800d490:	464b      	mov	r3, r9
 800d492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d496:	f7f3 f8af 	bl	80005f8 <__aeabi_dmul>
 800d49a:	9b08      	ldr	r3, [sp, #32]
 800d49c:	1b9e      	subs	r6, r3, r6
 800d49e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d4a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4a6:	e7e3      	b.n	800d470 <_strtod_l+0x3f8>
 800d4a8:	9b08      	ldr	r3, [sp, #32]
 800d4aa:	3316      	adds	r3, #22
 800d4ac:	db0b      	blt.n	800d4c6 <_strtod_l+0x44e>
 800d4ae:	9b05      	ldr	r3, [sp, #20]
 800d4b0:	1bdf      	subs	r7, r3, r7
 800d4b2:	4b54      	ldr	r3, [pc, #336]	; (800d604 <_strtod_l+0x58c>)
 800d4b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4bc:	4640      	mov	r0, r8
 800d4be:	4649      	mov	r1, r9
 800d4c0:	f7f3 f9c4 	bl	800084c <__aeabi_ddiv>
 800d4c4:	e7d6      	b.n	800d474 <_strtod_l+0x3fc>
 800d4c6:	9b08      	ldr	r3, [sp, #32]
 800d4c8:	1b75      	subs	r5, r6, r5
 800d4ca:	441d      	add	r5, r3
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	dd70      	ble.n	800d5b2 <_strtod_l+0x53a>
 800d4d0:	f015 030f 	ands.w	r3, r5, #15
 800d4d4:	d00a      	beq.n	800d4ec <_strtod_l+0x474>
 800d4d6:	494b      	ldr	r1, [pc, #300]	; (800d604 <_strtod_l+0x58c>)
 800d4d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4dc:	4642      	mov	r2, r8
 800d4de:	464b      	mov	r3, r9
 800d4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4e4:	f7f3 f888 	bl	80005f8 <__aeabi_dmul>
 800d4e8:	4680      	mov	r8, r0
 800d4ea:	4689      	mov	r9, r1
 800d4ec:	f035 050f 	bics.w	r5, r5, #15
 800d4f0:	d04d      	beq.n	800d58e <_strtod_l+0x516>
 800d4f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d4f6:	dd22      	ble.n	800d53e <_strtod_l+0x4c6>
 800d4f8:	2500      	movs	r5, #0
 800d4fa:	46ab      	mov	fp, r5
 800d4fc:	9509      	str	r5, [sp, #36]	; 0x24
 800d4fe:	9505      	str	r5, [sp, #20]
 800d500:	2322      	movs	r3, #34	; 0x22
 800d502:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d60c <_strtod_l+0x594>
 800d506:	6023      	str	r3, [r4, #0]
 800d508:	f04f 0800 	mov.w	r8, #0
 800d50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f43f aded 	beq.w	800d0ee <_strtod_l+0x76>
 800d514:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d516:	4620      	mov	r0, r4
 800d518:	f7ff f924 	bl	800c764 <_Bfree>
 800d51c:	9905      	ldr	r1, [sp, #20]
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff f920 	bl	800c764 <_Bfree>
 800d524:	4659      	mov	r1, fp
 800d526:	4620      	mov	r0, r4
 800d528:	f7ff f91c 	bl	800c764 <_Bfree>
 800d52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d52e:	4620      	mov	r0, r4
 800d530:	f7ff f918 	bl	800c764 <_Bfree>
 800d534:	4629      	mov	r1, r5
 800d536:	4620      	mov	r0, r4
 800d538:	f7ff f914 	bl	800c764 <_Bfree>
 800d53c:	e5d7      	b.n	800d0ee <_strtod_l+0x76>
 800d53e:	4b32      	ldr	r3, [pc, #200]	; (800d608 <_strtod_l+0x590>)
 800d540:	9304      	str	r3, [sp, #16]
 800d542:	2300      	movs	r3, #0
 800d544:	112d      	asrs	r5, r5, #4
 800d546:	4640      	mov	r0, r8
 800d548:	4649      	mov	r1, r9
 800d54a:	469a      	mov	sl, r3
 800d54c:	2d01      	cmp	r5, #1
 800d54e:	dc21      	bgt.n	800d594 <_strtod_l+0x51c>
 800d550:	b10b      	cbz	r3, 800d556 <_strtod_l+0x4de>
 800d552:	4680      	mov	r8, r0
 800d554:	4689      	mov	r9, r1
 800d556:	492c      	ldr	r1, [pc, #176]	; (800d608 <_strtod_l+0x590>)
 800d558:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d55c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d560:	4642      	mov	r2, r8
 800d562:	464b      	mov	r3, r9
 800d564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d568:	f7f3 f846 	bl	80005f8 <__aeabi_dmul>
 800d56c:	4b27      	ldr	r3, [pc, #156]	; (800d60c <_strtod_l+0x594>)
 800d56e:	460a      	mov	r2, r1
 800d570:	400b      	ands	r3, r1
 800d572:	4927      	ldr	r1, [pc, #156]	; (800d610 <_strtod_l+0x598>)
 800d574:	428b      	cmp	r3, r1
 800d576:	4680      	mov	r8, r0
 800d578:	d8be      	bhi.n	800d4f8 <_strtod_l+0x480>
 800d57a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d57e:	428b      	cmp	r3, r1
 800d580:	bf86      	itte	hi
 800d582:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d614 <_strtod_l+0x59c>
 800d586:	f04f 38ff 	movhi.w	r8, #4294967295
 800d58a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d58e:	2300      	movs	r3, #0
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	e07b      	b.n	800d68c <_strtod_l+0x614>
 800d594:	07ea      	lsls	r2, r5, #31
 800d596:	d505      	bpl.n	800d5a4 <_strtod_l+0x52c>
 800d598:	9b04      	ldr	r3, [sp, #16]
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f3 f82b 	bl	80005f8 <__aeabi_dmul>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	9a04      	ldr	r2, [sp, #16]
 800d5a6:	3208      	adds	r2, #8
 800d5a8:	f10a 0a01 	add.w	sl, sl, #1
 800d5ac:	106d      	asrs	r5, r5, #1
 800d5ae:	9204      	str	r2, [sp, #16]
 800d5b0:	e7cc      	b.n	800d54c <_strtod_l+0x4d4>
 800d5b2:	d0ec      	beq.n	800d58e <_strtod_l+0x516>
 800d5b4:	426d      	negs	r5, r5
 800d5b6:	f015 020f 	ands.w	r2, r5, #15
 800d5ba:	d00a      	beq.n	800d5d2 <_strtod_l+0x55a>
 800d5bc:	4b11      	ldr	r3, [pc, #68]	; (800d604 <_strtod_l+0x58c>)
 800d5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	f7f3 f93f 	bl	800084c <__aeabi_ddiv>
 800d5ce:	4680      	mov	r8, r0
 800d5d0:	4689      	mov	r9, r1
 800d5d2:	112d      	asrs	r5, r5, #4
 800d5d4:	d0db      	beq.n	800d58e <_strtod_l+0x516>
 800d5d6:	2d1f      	cmp	r5, #31
 800d5d8:	dd1e      	ble.n	800d618 <_strtod_l+0x5a0>
 800d5da:	2500      	movs	r5, #0
 800d5dc:	46ab      	mov	fp, r5
 800d5de:	9509      	str	r5, [sp, #36]	; 0x24
 800d5e0:	9505      	str	r5, [sp, #20]
 800d5e2:	2322      	movs	r3, #34	; 0x22
 800d5e4:	f04f 0800 	mov.w	r8, #0
 800d5e8:	f04f 0900 	mov.w	r9, #0
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	e78d      	b.n	800d50c <_strtod_l+0x494>
 800d5f0:	0800f109 	.word	0x0800f109
 800d5f4:	0800f334 	.word	0x0800f334
 800d5f8:	0800f101 	.word	0x0800f101
 800d5fc:	0800f138 	.word	0x0800f138
 800d600:	0800f4c5 	.word	0x0800f4c5
 800d604:	0800f248 	.word	0x0800f248
 800d608:	0800f220 	.word	0x0800f220
 800d60c:	7ff00000 	.word	0x7ff00000
 800d610:	7ca00000 	.word	0x7ca00000
 800d614:	7fefffff 	.word	0x7fefffff
 800d618:	f015 0310 	ands.w	r3, r5, #16
 800d61c:	bf18      	it	ne
 800d61e:	236a      	movne	r3, #106	; 0x6a
 800d620:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d9c4 <_strtod_l+0x94c>
 800d624:	9304      	str	r3, [sp, #16]
 800d626:	4640      	mov	r0, r8
 800d628:	4649      	mov	r1, r9
 800d62a:	2300      	movs	r3, #0
 800d62c:	07ea      	lsls	r2, r5, #31
 800d62e:	d504      	bpl.n	800d63a <_strtod_l+0x5c2>
 800d630:	e9da 2300 	ldrd	r2, r3, [sl]
 800d634:	f7f2 ffe0 	bl	80005f8 <__aeabi_dmul>
 800d638:	2301      	movs	r3, #1
 800d63a:	106d      	asrs	r5, r5, #1
 800d63c:	f10a 0a08 	add.w	sl, sl, #8
 800d640:	d1f4      	bne.n	800d62c <_strtod_l+0x5b4>
 800d642:	b10b      	cbz	r3, 800d648 <_strtod_l+0x5d0>
 800d644:	4680      	mov	r8, r0
 800d646:	4689      	mov	r9, r1
 800d648:	9b04      	ldr	r3, [sp, #16]
 800d64a:	b1bb      	cbz	r3, 800d67c <_strtod_l+0x604>
 800d64c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d650:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d654:	2b00      	cmp	r3, #0
 800d656:	4649      	mov	r1, r9
 800d658:	dd10      	ble.n	800d67c <_strtod_l+0x604>
 800d65a:	2b1f      	cmp	r3, #31
 800d65c:	f340 811e 	ble.w	800d89c <_strtod_l+0x824>
 800d660:	2b34      	cmp	r3, #52	; 0x34
 800d662:	bfde      	ittt	le
 800d664:	f04f 33ff 	movle.w	r3, #4294967295
 800d668:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d66c:	4093      	lslle	r3, r2
 800d66e:	f04f 0800 	mov.w	r8, #0
 800d672:	bfcc      	ite	gt
 800d674:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d678:	ea03 0901 	andle.w	r9, r3, r1
 800d67c:	2200      	movs	r2, #0
 800d67e:	2300      	movs	r3, #0
 800d680:	4640      	mov	r0, r8
 800d682:	4649      	mov	r1, r9
 800d684:	f7f3 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d1a6      	bne.n	800d5da <_strtod_l+0x562>
 800d68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d692:	4633      	mov	r3, r6
 800d694:	465a      	mov	r2, fp
 800d696:	4620      	mov	r0, r4
 800d698:	f7ff f8cc 	bl	800c834 <__s2b>
 800d69c:	9009      	str	r0, [sp, #36]	; 0x24
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	f43f af2a 	beq.w	800d4f8 <_strtod_l+0x480>
 800d6a4:	9a08      	ldr	r2, [sp, #32]
 800d6a6:	9b05      	ldr	r3, [sp, #20]
 800d6a8:	2a00      	cmp	r2, #0
 800d6aa:	eba3 0307 	sub.w	r3, r3, r7
 800d6ae:	bfa8      	it	ge
 800d6b0:	2300      	movge	r3, #0
 800d6b2:	930c      	str	r3, [sp, #48]	; 0x30
 800d6b4:	2500      	movs	r5, #0
 800d6b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d6ba:	9312      	str	r3, [sp, #72]	; 0x48
 800d6bc:	46ab      	mov	fp, r5
 800d6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	6859      	ldr	r1, [r3, #4]
 800d6c4:	f7ff f80e 	bl	800c6e4 <_Balloc>
 800d6c8:	9005      	str	r0, [sp, #20]
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	f43f af18 	beq.w	800d500 <_strtod_l+0x488>
 800d6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6d2:	691a      	ldr	r2, [r3, #16]
 800d6d4:	3202      	adds	r2, #2
 800d6d6:	f103 010c 	add.w	r1, r3, #12
 800d6da:	0092      	lsls	r2, r2, #2
 800d6dc:	300c      	adds	r0, #12
 800d6de:	f7fe f870 	bl	800b7c2 <memcpy>
 800d6e2:	ec49 8b10 	vmov	d0, r8, r9
 800d6e6:	aa18      	add	r2, sp, #96	; 0x60
 800d6e8:	a917      	add	r1, sp, #92	; 0x5c
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f7ff fbd6 	bl	800ce9c <__d2b>
 800d6f0:	ec49 8b18 	vmov	d8, r8, r9
 800d6f4:	9016      	str	r0, [sp, #88]	; 0x58
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f43f af02 	beq.w	800d500 <_strtod_l+0x488>
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	4620      	mov	r0, r4
 800d700:	f7ff f930 	bl	800c964 <__i2b>
 800d704:	4683      	mov	fp, r0
 800d706:	2800      	cmp	r0, #0
 800d708:	f43f aefa 	beq.w	800d500 <_strtod_l+0x488>
 800d70c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d70e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d710:	2e00      	cmp	r6, #0
 800d712:	bfab      	itete	ge
 800d714:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d716:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d718:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d71a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d71e:	bfac      	ite	ge
 800d720:	eb06 0a03 	addge.w	sl, r6, r3
 800d724:	1b9f      	sublt	r7, r3, r6
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	1af6      	subs	r6, r6, r3
 800d72a:	4416      	add	r6, r2
 800d72c:	4ba0      	ldr	r3, [pc, #640]	; (800d9b0 <_strtod_l+0x938>)
 800d72e:	3e01      	subs	r6, #1
 800d730:	429e      	cmp	r6, r3
 800d732:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d736:	f280 80c4 	bge.w	800d8c2 <_strtod_l+0x84a>
 800d73a:	1b9b      	subs	r3, r3, r6
 800d73c:	2b1f      	cmp	r3, #31
 800d73e:	eba2 0203 	sub.w	r2, r2, r3
 800d742:	f04f 0101 	mov.w	r1, #1
 800d746:	f300 80b0 	bgt.w	800d8aa <_strtod_l+0x832>
 800d74a:	fa01 f303 	lsl.w	r3, r1, r3
 800d74e:	930e      	str	r3, [sp, #56]	; 0x38
 800d750:	2300      	movs	r3, #0
 800d752:	930d      	str	r3, [sp, #52]	; 0x34
 800d754:	eb0a 0602 	add.w	r6, sl, r2
 800d758:	9b04      	ldr	r3, [sp, #16]
 800d75a:	45b2      	cmp	sl, r6
 800d75c:	4417      	add	r7, r2
 800d75e:	441f      	add	r7, r3
 800d760:	4653      	mov	r3, sl
 800d762:	bfa8      	it	ge
 800d764:	4633      	movge	r3, r6
 800d766:	42bb      	cmp	r3, r7
 800d768:	bfa8      	it	ge
 800d76a:	463b      	movge	r3, r7
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	bfc2      	ittt	gt
 800d770:	1af6      	subgt	r6, r6, r3
 800d772:	1aff      	subgt	r7, r7, r3
 800d774:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dd17      	ble.n	800d7ae <_strtod_l+0x736>
 800d77e:	4659      	mov	r1, fp
 800d780:	461a      	mov	r2, r3
 800d782:	4620      	mov	r0, r4
 800d784:	f7ff f9ae 	bl	800cae4 <__pow5mult>
 800d788:	4683      	mov	fp, r0
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f43f aeb8 	beq.w	800d500 <_strtod_l+0x488>
 800d790:	4601      	mov	r1, r0
 800d792:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d794:	4620      	mov	r0, r4
 800d796:	f7ff f8fb 	bl	800c990 <__multiply>
 800d79a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f43f aeaf 	beq.w	800d500 <_strtod_l+0x488>
 800d7a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f7fe ffdd 	bl	800c764 <_Bfree>
 800d7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ac:	9316      	str	r3, [sp, #88]	; 0x58
 800d7ae:	2e00      	cmp	r6, #0
 800d7b0:	f300 808c 	bgt.w	800d8cc <_strtod_l+0x854>
 800d7b4:	9b08      	ldr	r3, [sp, #32]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dd08      	ble.n	800d7cc <_strtod_l+0x754>
 800d7ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7bc:	9905      	ldr	r1, [sp, #20]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f7ff f990 	bl	800cae4 <__pow5mult>
 800d7c4:	9005      	str	r0, [sp, #20]
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f43f ae9a 	beq.w	800d500 <_strtod_l+0x488>
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	dd08      	ble.n	800d7e2 <_strtod_l+0x76a>
 800d7d0:	9905      	ldr	r1, [sp, #20]
 800d7d2:	463a      	mov	r2, r7
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f7ff f9df 	bl	800cb98 <__lshift>
 800d7da:	9005      	str	r0, [sp, #20]
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f43f ae8f 	beq.w	800d500 <_strtod_l+0x488>
 800d7e2:	f1ba 0f00 	cmp.w	sl, #0
 800d7e6:	dd08      	ble.n	800d7fa <_strtod_l+0x782>
 800d7e8:	4659      	mov	r1, fp
 800d7ea:	4652      	mov	r2, sl
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7ff f9d3 	bl	800cb98 <__lshift>
 800d7f2:	4683      	mov	fp, r0
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f43f ae83 	beq.w	800d500 <_strtod_l+0x488>
 800d7fa:	9a05      	ldr	r2, [sp, #20]
 800d7fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d7fe:	4620      	mov	r0, r4
 800d800:	f7ff fa52 	bl	800cca8 <__mdiff>
 800d804:	4605      	mov	r5, r0
 800d806:	2800      	cmp	r0, #0
 800d808:	f43f ae7a 	beq.w	800d500 <_strtod_l+0x488>
 800d80c:	68c3      	ldr	r3, [r0, #12]
 800d80e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d810:	2300      	movs	r3, #0
 800d812:	60c3      	str	r3, [r0, #12]
 800d814:	4659      	mov	r1, fp
 800d816:	f7ff fa2b 	bl	800cc70 <__mcmp>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	da60      	bge.n	800d8e0 <_strtod_l+0x868>
 800d81e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d820:	ea53 0308 	orrs.w	r3, r3, r8
 800d824:	f040 8084 	bne.w	800d930 <_strtod_l+0x8b8>
 800d828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d17f      	bne.n	800d930 <_strtod_l+0x8b8>
 800d830:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d834:	0d1b      	lsrs	r3, r3, #20
 800d836:	051b      	lsls	r3, r3, #20
 800d838:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d83c:	d978      	bls.n	800d930 <_strtod_l+0x8b8>
 800d83e:	696b      	ldr	r3, [r5, #20]
 800d840:	b913      	cbnz	r3, 800d848 <_strtod_l+0x7d0>
 800d842:	692b      	ldr	r3, [r5, #16]
 800d844:	2b01      	cmp	r3, #1
 800d846:	dd73      	ble.n	800d930 <_strtod_l+0x8b8>
 800d848:	4629      	mov	r1, r5
 800d84a:	2201      	movs	r2, #1
 800d84c:	4620      	mov	r0, r4
 800d84e:	f7ff f9a3 	bl	800cb98 <__lshift>
 800d852:	4659      	mov	r1, fp
 800d854:	4605      	mov	r5, r0
 800d856:	f7ff fa0b 	bl	800cc70 <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	dd68      	ble.n	800d930 <_strtod_l+0x8b8>
 800d85e:	9904      	ldr	r1, [sp, #16]
 800d860:	4a54      	ldr	r2, [pc, #336]	; (800d9b4 <_strtod_l+0x93c>)
 800d862:	464b      	mov	r3, r9
 800d864:	2900      	cmp	r1, #0
 800d866:	f000 8084 	beq.w	800d972 <_strtod_l+0x8fa>
 800d86a:	ea02 0109 	and.w	r1, r2, r9
 800d86e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d872:	dc7e      	bgt.n	800d972 <_strtod_l+0x8fa>
 800d874:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d878:	f77f aeb3 	ble.w	800d5e2 <_strtod_l+0x56a>
 800d87c:	4b4e      	ldr	r3, [pc, #312]	; (800d9b8 <_strtod_l+0x940>)
 800d87e:	4640      	mov	r0, r8
 800d880:	4649      	mov	r1, r9
 800d882:	2200      	movs	r2, #0
 800d884:	f7f2 feb8 	bl	80005f8 <__aeabi_dmul>
 800d888:	4b4a      	ldr	r3, [pc, #296]	; (800d9b4 <_strtod_l+0x93c>)
 800d88a:	400b      	ands	r3, r1
 800d88c:	4680      	mov	r8, r0
 800d88e:	4689      	mov	r9, r1
 800d890:	2b00      	cmp	r3, #0
 800d892:	f47f ae3f 	bne.w	800d514 <_strtod_l+0x49c>
 800d896:	2322      	movs	r3, #34	; 0x22
 800d898:	6023      	str	r3, [r4, #0]
 800d89a:	e63b      	b.n	800d514 <_strtod_l+0x49c>
 800d89c:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a4:	ea03 0808 	and.w	r8, r3, r8
 800d8a8:	e6e8      	b.n	800d67c <_strtod_l+0x604>
 800d8aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d8ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d8b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d8b6:	36e2      	adds	r6, #226	; 0xe2
 800d8b8:	fa01 f306 	lsl.w	r3, r1, r6
 800d8bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d8c0:	e748      	b.n	800d754 <_strtod_l+0x6dc>
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d8ca:	e743      	b.n	800d754 <_strtod_l+0x6dc>
 800d8cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8ce:	4632      	mov	r2, r6
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f7ff f961 	bl	800cb98 <__lshift>
 800d8d6:	9016      	str	r0, [sp, #88]	; 0x58
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	f47f af6b 	bne.w	800d7b4 <_strtod_l+0x73c>
 800d8de:	e60f      	b.n	800d500 <_strtod_l+0x488>
 800d8e0:	46ca      	mov	sl, r9
 800d8e2:	d171      	bne.n	800d9c8 <_strtod_l+0x950>
 800d8e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8ea:	b352      	cbz	r2, 800d942 <_strtod_l+0x8ca>
 800d8ec:	4a33      	ldr	r2, [pc, #204]	; (800d9bc <_strtod_l+0x944>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d12a      	bne.n	800d948 <_strtod_l+0x8d0>
 800d8f2:	9b04      	ldr	r3, [sp, #16]
 800d8f4:	4641      	mov	r1, r8
 800d8f6:	b1fb      	cbz	r3, 800d938 <_strtod_l+0x8c0>
 800d8f8:	4b2e      	ldr	r3, [pc, #184]	; (800d9b4 <_strtod_l+0x93c>)
 800d8fa:	ea09 0303 	and.w	r3, r9, r3
 800d8fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d902:	f04f 32ff 	mov.w	r2, #4294967295
 800d906:	d81a      	bhi.n	800d93e <_strtod_l+0x8c6>
 800d908:	0d1b      	lsrs	r3, r3, #20
 800d90a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d90e:	fa02 f303 	lsl.w	r3, r2, r3
 800d912:	4299      	cmp	r1, r3
 800d914:	d118      	bne.n	800d948 <_strtod_l+0x8d0>
 800d916:	4b2a      	ldr	r3, [pc, #168]	; (800d9c0 <_strtod_l+0x948>)
 800d918:	459a      	cmp	sl, r3
 800d91a:	d102      	bne.n	800d922 <_strtod_l+0x8aa>
 800d91c:	3101      	adds	r1, #1
 800d91e:	f43f adef 	beq.w	800d500 <_strtod_l+0x488>
 800d922:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <_strtod_l+0x93c>)
 800d924:	ea0a 0303 	and.w	r3, sl, r3
 800d928:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d92c:	f04f 0800 	mov.w	r8, #0
 800d930:	9b04      	ldr	r3, [sp, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1a2      	bne.n	800d87c <_strtod_l+0x804>
 800d936:	e5ed      	b.n	800d514 <_strtod_l+0x49c>
 800d938:	f04f 33ff 	mov.w	r3, #4294967295
 800d93c:	e7e9      	b.n	800d912 <_strtod_l+0x89a>
 800d93e:	4613      	mov	r3, r2
 800d940:	e7e7      	b.n	800d912 <_strtod_l+0x89a>
 800d942:	ea53 0308 	orrs.w	r3, r3, r8
 800d946:	d08a      	beq.n	800d85e <_strtod_l+0x7e6>
 800d948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d94a:	b1e3      	cbz	r3, 800d986 <_strtod_l+0x90e>
 800d94c:	ea13 0f0a 	tst.w	r3, sl
 800d950:	d0ee      	beq.n	800d930 <_strtod_l+0x8b8>
 800d952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d954:	9a04      	ldr	r2, [sp, #16]
 800d956:	4640      	mov	r0, r8
 800d958:	4649      	mov	r1, r9
 800d95a:	b1c3      	cbz	r3, 800d98e <_strtod_l+0x916>
 800d95c:	f7ff fb6f 	bl	800d03e <sulp>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	ec51 0b18 	vmov	r0, r1, d8
 800d968:	f7f2 fc90 	bl	800028c <__adddf3>
 800d96c:	4680      	mov	r8, r0
 800d96e:	4689      	mov	r9, r1
 800d970:	e7de      	b.n	800d930 <_strtod_l+0x8b8>
 800d972:	4013      	ands	r3, r2
 800d974:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d978:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d97c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d980:	f04f 38ff 	mov.w	r8, #4294967295
 800d984:	e7d4      	b.n	800d930 <_strtod_l+0x8b8>
 800d986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d988:	ea13 0f08 	tst.w	r3, r8
 800d98c:	e7e0      	b.n	800d950 <_strtod_l+0x8d8>
 800d98e:	f7ff fb56 	bl	800d03e <sulp>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	ec51 0b18 	vmov	r0, r1, d8
 800d99a:	f7f2 fc75 	bl	8000288 <__aeabi_dsub>
 800d99e:	2200      	movs	r2, #0
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4680      	mov	r8, r0
 800d9a4:	4689      	mov	r9, r1
 800d9a6:	f7f3 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d0c0      	beq.n	800d930 <_strtod_l+0x8b8>
 800d9ae:	e618      	b.n	800d5e2 <_strtod_l+0x56a>
 800d9b0:	fffffc02 	.word	0xfffffc02
 800d9b4:	7ff00000 	.word	0x7ff00000
 800d9b8:	39500000 	.word	0x39500000
 800d9bc:	000fffff 	.word	0x000fffff
 800d9c0:	7fefffff 	.word	0x7fefffff
 800d9c4:	0800f348 	.word	0x0800f348
 800d9c8:	4659      	mov	r1, fp
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f7ff fac0 	bl	800cf50 <__ratio>
 800d9d0:	ec57 6b10 	vmov	r6, r7, d0
 800d9d4:	ee10 0a10 	vmov	r0, s0
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9de:	4639      	mov	r1, r7
 800d9e0:	f7f3 f886 	bl	8000af0 <__aeabi_dcmple>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d071      	beq.n	800dacc <_strtod_l+0xa54>
 800d9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d17c      	bne.n	800dae8 <_strtod_l+0xa70>
 800d9ee:	f1b8 0f00 	cmp.w	r8, #0
 800d9f2:	d15a      	bne.n	800daaa <_strtod_l+0xa32>
 800d9f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d15d      	bne.n	800dab8 <_strtod_l+0xa40>
 800d9fc:	4b90      	ldr	r3, [pc, #576]	; (800dc40 <_strtod_l+0xbc8>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f3 f86a 	bl	8000adc <__aeabi_dcmplt>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d15c      	bne.n	800dac6 <_strtod_l+0xa4e>
 800da0c:	4630      	mov	r0, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	4b8c      	ldr	r3, [pc, #560]	; (800dc44 <_strtod_l+0xbcc>)
 800da12:	2200      	movs	r2, #0
 800da14:	f7f2 fdf0 	bl	80005f8 <__aeabi_dmul>
 800da18:	4606      	mov	r6, r0
 800da1a:	460f      	mov	r7, r1
 800da1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800da20:	9606      	str	r6, [sp, #24]
 800da22:	9307      	str	r3, [sp, #28]
 800da24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800da2c:	4b86      	ldr	r3, [pc, #536]	; (800dc48 <_strtod_l+0xbd0>)
 800da2e:	ea0a 0303 	and.w	r3, sl, r3
 800da32:	930d      	str	r3, [sp, #52]	; 0x34
 800da34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da36:	4b85      	ldr	r3, [pc, #532]	; (800dc4c <_strtod_l+0xbd4>)
 800da38:	429a      	cmp	r2, r3
 800da3a:	f040 8090 	bne.w	800db5e <_strtod_l+0xae6>
 800da3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800da42:	ec49 8b10 	vmov	d0, r8, r9
 800da46:	f7ff f9b9 	bl	800cdbc <__ulp>
 800da4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da4e:	ec51 0b10 	vmov	r0, r1, d0
 800da52:	f7f2 fdd1 	bl	80005f8 <__aeabi_dmul>
 800da56:	4642      	mov	r2, r8
 800da58:	464b      	mov	r3, r9
 800da5a:	f7f2 fc17 	bl	800028c <__adddf3>
 800da5e:	460b      	mov	r3, r1
 800da60:	4979      	ldr	r1, [pc, #484]	; (800dc48 <_strtod_l+0xbd0>)
 800da62:	4a7b      	ldr	r2, [pc, #492]	; (800dc50 <_strtod_l+0xbd8>)
 800da64:	4019      	ands	r1, r3
 800da66:	4291      	cmp	r1, r2
 800da68:	4680      	mov	r8, r0
 800da6a:	d944      	bls.n	800daf6 <_strtod_l+0xa7e>
 800da6c:	ee18 2a90 	vmov	r2, s17
 800da70:	4b78      	ldr	r3, [pc, #480]	; (800dc54 <_strtod_l+0xbdc>)
 800da72:	429a      	cmp	r2, r3
 800da74:	d104      	bne.n	800da80 <_strtod_l+0xa08>
 800da76:	ee18 3a10 	vmov	r3, s16
 800da7a:	3301      	adds	r3, #1
 800da7c:	f43f ad40 	beq.w	800d500 <_strtod_l+0x488>
 800da80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800dc54 <_strtod_l+0xbdc>
 800da84:	f04f 38ff 	mov.w	r8, #4294967295
 800da88:	9916      	ldr	r1, [sp, #88]	; 0x58
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7fe fe6a 	bl	800c764 <_Bfree>
 800da90:	9905      	ldr	r1, [sp, #20]
 800da92:	4620      	mov	r0, r4
 800da94:	f7fe fe66 	bl	800c764 <_Bfree>
 800da98:	4659      	mov	r1, fp
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7fe fe62 	bl	800c764 <_Bfree>
 800daa0:	4629      	mov	r1, r5
 800daa2:	4620      	mov	r0, r4
 800daa4:	f7fe fe5e 	bl	800c764 <_Bfree>
 800daa8:	e609      	b.n	800d6be <_strtod_l+0x646>
 800daaa:	f1b8 0f01 	cmp.w	r8, #1
 800daae:	d103      	bne.n	800dab8 <_strtod_l+0xa40>
 800dab0:	f1b9 0f00 	cmp.w	r9, #0
 800dab4:	f43f ad95 	beq.w	800d5e2 <_strtod_l+0x56a>
 800dab8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800dc10 <_strtod_l+0xb98>
 800dabc:	4f60      	ldr	r7, [pc, #384]	; (800dc40 <_strtod_l+0xbc8>)
 800dabe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dac2:	2600      	movs	r6, #0
 800dac4:	e7ae      	b.n	800da24 <_strtod_l+0x9ac>
 800dac6:	4f5f      	ldr	r7, [pc, #380]	; (800dc44 <_strtod_l+0xbcc>)
 800dac8:	2600      	movs	r6, #0
 800daca:	e7a7      	b.n	800da1c <_strtod_l+0x9a4>
 800dacc:	4b5d      	ldr	r3, [pc, #372]	; (800dc44 <_strtod_l+0xbcc>)
 800dace:	4630      	mov	r0, r6
 800dad0:	4639      	mov	r1, r7
 800dad2:	2200      	movs	r2, #0
 800dad4:	f7f2 fd90 	bl	80005f8 <__aeabi_dmul>
 800dad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dada:	4606      	mov	r6, r0
 800dadc:	460f      	mov	r7, r1
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d09c      	beq.n	800da1c <_strtod_l+0x9a4>
 800dae2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dae6:	e79d      	b.n	800da24 <_strtod_l+0x9ac>
 800dae8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dc18 <_strtod_l+0xba0>
 800daec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800daf0:	ec57 6b17 	vmov	r6, r7, d7
 800daf4:	e796      	b.n	800da24 <_strtod_l+0x9ac>
 800daf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800dafa:	9b04      	ldr	r3, [sp, #16]
 800dafc:	46ca      	mov	sl, r9
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1c2      	bne.n	800da88 <_strtod_l+0xa10>
 800db02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db08:	0d1b      	lsrs	r3, r3, #20
 800db0a:	051b      	lsls	r3, r3, #20
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d1bb      	bne.n	800da88 <_strtod_l+0xa10>
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f3 f8d0 	bl	8000cb8 <__aeabi_d2lz>
 800db18:	f7f2 fd40 	bl	800059c <__aeabi_l2d>
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	4630      	mov	r0, r6
 800db22:	4639      	mov	r1, r7
 800db24:	f7f2 fbb0 	bl	8000288 <__aeabi_dsub>
 800db28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db2e:	ea43 0308 	orr.w	r3, r3, r8
 800db32:	4313      	orrs	r3, r2
 800db34:	4606      	mov	r6, r0
 800db36:	460f      	mov	r7, r1
 800db38:	d054      	beq.n	800dbe4 <_strtod_l+0xb6c>
 800db3a:	a339      	add	r3, pc, #228	; (adr r3, 800dc20 <_strtod_l+0xba8>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f7f2 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800db44:	2800      	cmp	r0, #0
 800db46:	f47f ace5 	bne.w	800d514 <_strtod_l+0x49c>
 800db4a:	a337      	add	r3, pc, #220	; (adr r3, 800dc28 <_strtod_l+0xbb0>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	4630      	mov	r0, r6
 800db52:	4639      	mov	r1, r7
 800db54:	f7f2 ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d095      	beq.n	800da88 <_strtod_l+0xa10>
 800db5c:	e4da      	b.n	800d514 <_strtod_l+0x49c>
 800db5e:	9b04      	ldr	r3, [sp, #16]
 800db60:	b333      	cbz	r3, 800dbb0 <_strtod_l+0xb38>
 800db62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db68:	d822      	bhi.n	800dbb0 <_strtod_l+0xb38>
 800db6a:	a331      	add	r3, pc, #196	; (adr r3, 800dc30 <_strtod_l+0xbb8>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	4630      	mov	r0, r6
 800db72:	4639      	mov	r1, r7
 800db74:	f7f2 ffbc 	bl	8000af0 <__aeabi_dcmple>
 800db78:	b1a0      	cbz	r0, 800dba4 <_strtod_l+0xb2c>
 800db7a:	4639      	mov	r1, r7
 800db7c:	4630      	mov	r0, r6
 800db7e:	f7f3 f813 	bl	8000ba8 <__aeabi_d2uiz>
 800db82:	2801      	cmp	r0, #1
 800db84:	bf38      	it	cc
 800db86:	2001      	movcc	r0, #1
 800db88:	f7f2 fcbc 	bl	8000504 <__aeabi_ui2d>
 800db8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db8e:	4606      	mov	r6, r0
 800db90:	460f      	mov	r7, r1
 800db92:	bb23      	cbnz	r3, 800dbde <_strtod_l+0xb66>
 800db94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db98:	9010      	str	r0, [sp, #64]	; 0x40
 800db9a:	9311      	str	r3, [sp, #68]	; 0x44
 800db9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dba0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800dba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dba8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dbac:	1a9b      	subs	r3, r3, r2
 800dbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dbb4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbb8:	eef0 0a68 	vmov.f32	s1, s17
 800dbbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800dbc0:	f7ff f8fc 	bl	800cdbc <__ulp>
 800dbc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dbc8:	ec53 2b10 	vmov	r2, r3, d0
 800dbcc:	f7f2 fd14 	bl	80005f8 <__aeabi_dmul>
 800dbd0:	ec53 2b18 	vmov	r2, r3, d8
 800dbd4:	f7f2 fb5a 	bl	800028c <__adddf3>
 800dbd8:	4680      	mov	r8, r0
 800dbda:	4689      	mov	r9, r1
 800dbdc:	e78d      	b.n	800dafa <_strtod_l+0xa82>
 800dbde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dbe2:	e7db      	b.n	800db9c <_strtod_l+0xb24>
 800dbe4:	a314      	add	r3, pc, #80	; (adr r3, 800dc38 <_strtod_l+0xbc0>)
 800dbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbea:	f7f2 ff77 	bl	8000adc <__aeabi_dcmplt>
 800dbee:	e7b3      	b.n	800db58 <_strtod_l+0xae0>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	930a      	str	r3, [sp, #40]	; 0x28
 800dbf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dbf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbf8:	6013      	str	r3, [r2, #0]
 800dbfa:	f7ff ba7c 	b.w	800d0f6 <_strtod_l+0x7e>
 800dbfe:	2a65      	cmp	r2, #101	; 0x65
 800dc00:	f43f ab75 	beq.w	800d2ee <_strtod_l+0x276>
 800dc04:	2a45      	cmp	r2, #69	; 0x45
 800dc06:	f43f ab72 	beq.w	800d2ee <_strtod_l+0x276>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	f7ff bbaa 	b.w	800d364 <_strtod_l+0x2ec>
 800dc10:	00000000 	.word	0x00000000
 800dc14:	bff00000 	.word	0xbff00000
 800dc18:	00000000 	.word	0x00000000
 800dc1c:	3ff00000 	.word	0x3ff00000
 800dc20:	94a03595 	.word	0x94a03595
 800dc24:	3fdfffff 	.word	0x3fdfffff
 800dc28:	35afe535 	.word	0x35afe535
 800dc2c:	3fe00000 	.word	0x3fe00000
 800dc30:	ffc00000 	.word	0xffc00000
 800dc34:	41dfffff 	.word	0x41dfffff
 800dc38:	94a03595 	.word	0x94a03595
 800dc3c:	3fcfffff 	.word	0x3fcfffff
 800dc40:	3ff00000 	.word	0x3ff00000
 800dc44:	3fe00000 	.word	0x3fe00000
 800dc48:	7ff00000 	.word	0x7ff00000
 800dc4c:	7fe00000 	.word	0x7fe00000
 800dc50:	7c9fffff 	.word	0x7c9fffff
 800dc54:	7fefffff 	.word	0x7fefffff

0800dc58 <_strtod_r>:
 800dc58:	4b01      	ldr	r3, [pc, #4]	; (800dc60 <_strtod_r+0x8>)
 800dc5a:	f7ff ba0d 	b.w	800d078 <_strtod_l>
 800dc5e:	bf00      	nop
 800dc60:	2000006c 	.word	0x2000006c

0800dc64 <_strtol_l.constprop.0>:
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6a:	d001      	beq.n	800dc70 <_strtol_l.constprop.0+0xc>
 800dc6c:	2b24      	cmp	r3, #36	; 0x24
 800dc6e:	d906      	bls.n	800dc7e <_strtol_l.constprop.0+0x1a>
 800dc70:	f7fd fd7a 	bl	800b768 <__errno>
 800dc74:	2316      	movs	r3, #22
 800dc76:	6003      	str	r3, [r0, #0]
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd64 <_strtol_l.constprop.0+0x100>
 800dc82:	460d      	mov	r5, r1
 800dc84:	462e      	mov	r6, r5
 800dc86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dc8e:	f017 0708 	ands.w	r7, r7, #8
 800dc92:	d1f7      	bne.n	800dc84 <_strtol_l.constprop.0+0x20>
 800dc94:	2c2d      	cmp	r4, #45	; 0x2d
 800dc96:	d132      	bne.n	800dcfe <_strtol_l.constprop.0+0x9a>
 800dc98:	782c      	ldrb	r4, [r5, #0]
 800dc9a:	2701      	movs	r7, #1
 800dc9c:	1cb5      	adds	r5, r6, #2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d05b      	beq.n	800dd5a <_strtol_l.constprop.0+0xf6>
 800dca2:	2b10      	cmp	r3, #16
 800dca4:	d109      	bne.n	800dcba <_strtol_l.constprop.0+0x56>
 800dca6:	2c30      	cmp	r4, #48	; 0x30
 800dca8:	d107      	bne.n	800dcba <_strtol_l.constprop.0+0x56>
 800dcaa:	782c      	ldrb	r4, [r5, #0]
 800dcac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dcb0:	2c58      	cmp	r4, #88	; 0x58
 800dcb2:	d14d      	bne.n	800dd50 <_strtol_l.constprop.0+0xec>
 800dcb4:	786c      	ldrb	r4, [r5, #1]
 800dcb6:	2310      	movs	r3, #16
 800dcb8:	3502      	adds	r5, #2
 800dcba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dcbe:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcc2:	f04f 0e00 	mov.w	lr, #0
 800dcc6:	fbb8 f9f3 	udiv	r9, r8, r3
 800dcca:	4676      	mov	r6, lr
 800dccc:	fb03 8a19 	mls	sl, r3, r9, r8
 800dcd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dcd4:	f1bc 0f09 	cmp.w	ip, #9
 800dcd8:	d816      	bhi.n	800dd08 <_strtol_l.constprop.0+0xa4>
 800dcda:	4664      	mov	r4, ip
 800dcdc:	42a3      	cmp	r3, r4
 800dcde:	dd24      	ble.n	800dd2a <_strtol_l.constprop.0+0xc6>
 800dce0:	f1be 3fff 	cmp.w	lr, #4294967295
 800dce4:	d008      	beq.n	800dcf8 <_strtol_l.constprop.0+0x94>
 800dce6:	45b1      	cmp	r9, r6
 800dce8:	d31c      	bcc.n	800dd24 <_strtol_l.constprop.0+0xc0>
 800dcea:	d101      	bne.n	800dcf0 <_strtol_l.constprop.0+0x8c>
 800dcec:	45a2      	cmp	sl, r4
 800dcee:	db19      	blt.n	800dd24 <_strtol_l.constprop.0+0xc0>
 800dcf0:	fb06 4603 	mla	r6, r6, r3, r4
 800dcf4:	f04f 0e01 	mov.w	lr, #1
 800dcf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcfc:	e7e8      	b.n	800dcd0 <_strtol_l.constprop.0+0x6c>
 800dcfe:	2c2b      	cmp	r4, #43	; 0x2b
 800dd00:	bf04      	itt	eq
 800dd02:	782c      	ldrbeq	r4, [r5, #0]
 800dd04:	1cb5      	addeq	r5, r6, #2
 800dd06:	e7ca      	b.n	800dc9e <_strtol_l.constprop.0+0x3a>
 800dd08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dd0c:	f1bc 0f19 	cmp.w	ip, #25
 800dd10:	d801      	bhi.n	800dd16 <_strtol_l.constprop.0+0xb2>
 800dd12:	3c37      	subs	r4, #55	; 0x37
 800dd14:	e7e2      	b.n	800dcdc <_strtol_l.constprop.0+0x78>
 800dd16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd1a:	f1bc 0f19 	cmp.w	ip, #25
 800dd1e:	d804      	bhi.n	800dd2a <_strtol_l.constprop.0+0xc6>
 800dd20:	3c57      	subs	r4, #87	; 0x57
 800dd22:	e7db      	b.n	800dcdc <_strtol_l.constprop.0+0x78>
 800dd24:	f04f 3eff 	mov.w	lr, #4294967295
 800dd28:	e7e6      	b.n	800dcf8 <_strtol_l.constprop.0+0x94>
 800dd2a:	f1be 3fff 	cmp.w	lr, #4294967295
 800dd2e:	d105      	bne.n	800dd3c <_strtol_l.constprop.0+0xd8>
 800dd30:	2322      	movs	r3, #34	; 0x22
 800dd32:	6003      	str	r3, [r0, #0]
 800dd34:	4646      	mov	r6, r8
 800dd36:	b942      	cbnz	r2, 800dd4a <_strtol_l.constprop.0+0xe6>
 800dd38:	4630      	mov	r0, r6
 800dd3a:	e79e      	b.n	800dc7a <_strtol_l.constprop.0+0x16>
 800dd3c:	b107      	cbz	r7, 800dd40 <_strtol_l.constprop.0+0xdc>
 800dd3e:	4276      	negs	r6, r6
 800dd40:	2a00      	cmp	r2, #0
 800dd42:	d0f9      	beq.n	800dd38 <_strtol_l.constprop.0+0xd4>
 800dd44:	f1be 0f00 	cmp.w	lr, #0
 800dd48:	d000      	beq.n	800dd4c <_strtol_l.constprop.0+0xe8>
 800dd4a:	1e69      	subs	r1, r5, #1
 800dd4c:	6011      	str	r1, [r2, #0]
 800dd4e:	e7f3      	b.n	800dd38 <_strtol_l.constprop.0+0xd4>
 800dd50:	2430      	movs	r4, #48	; 0x30
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1b1      	bne.n	800dcba <_strtol_l.constprop.0+0x56>
 800dd56:	2308      	movs	r3, #8
 800dd58:	e7af      	b.n	800dcba <_strtol_l.constprop.0+0x56>
 800dd5a:	2c30      	cmp	r4, #48	; 0x30
 800dd5c:	d0a5      	beq.n	800dcaa <_strtol_l.constprop.0+0x46>
 800dd5e:	230a      	movs	r3, #10
 800dd60:	e7ab      	b.n	800dcba <_strtol_l.constprop.0+0x56>
 800dd62:	bf00      	nop
 800dd64:	0800f371 	.word	0x0800f371

0800dd68 <_strtol_r>:
 800dd68:	f7ff bf7c 	b.w	800dc64 <_strtol_l.constprop.0>

0800dd6c <__ssputs_r>:
 800dd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd70:	688e      	ldr	r6, [r1, #8]
 800dd72:	461f      	mov	r7, r3
 800dd74:	42be      	cmp	r6, r7
 800dd76:	680b      	ldr	r3, [r1, #0]
 800dd78:	4682      	mov	sl, r0
 800dd7a:	460c      	mov	r4, r1
 800dd7c:	4690      	mov	r8, r2
 800dd7e:	d82c      	bhi.n	800ddda <__ssputs_r+0x6e>
 800dd80:	898a      	ldrh	r2, [r1, #12]
 800dd82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd86:	d026      	beq.n	800ddd6 <__ssputs_r+0x6a>
 800dd88:	6965      	ldr	r5, [r4, #20]
 800dd8a:	6909      	ldr	r1, [r1, #16]
 800dd8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd90:	eba3 0901 	sub.w	r9, r3, r1
 800dd94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd98:	1c7b      	adds	r3, r7, #1
 800dd9a:	444b      	add	r3, r9
 800dd9c:	106d      	asrs	r5, r5, #1
 800dd9e:	429d      	cmp	r5, r3
 800dda0:	bf38      	it	cc
 800dda2:	461d      	movcc	r5, r3
 800dda4:	0553      	lsls	r3, r2, #21
 800dda6:	d527      	bpl.n	800ddf8 <__ssputs_r+0x8c>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7fe fc0f 	bl	800c5cc <_malloc_r>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	b360      	cbz	r0, 800de0c <__ssputs_r+0xa0>
 800ddb2:	6921      	ldr	r1, [r4, #16]
 800ddb4:	464a      	mov	r2, r9
 800ddb6:	f7fd fd04 	bl	800b7c2 <memcpy>
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc4:	81a3      	strh	r3, [r4, #12]
 800ddc6:	6126      	str	r6, [r4, #16]
 800ddc8:	6165      	str	r5, [r4, #20]
 800ddca:	444e      	add	r6, r9
 800ddcc:	eba5 0509 	sub.w	r5, r5, r9
 800ddd0:	6026      	str	r6, [r4, #0]
 800ddd2:	60a5      	str	r5, [r4, #8]
 800ddd4:	463e      	mov	r6, r7
 800ddd6:	42be      	cmp	r6, r7
 800ddd8:	d900      	bls.n	800dddc <__ssputs_r+0x70>
 800ddda:	463e      	mov	r6, r7
 800dddc:	6820      	ldr	r0, [r4, #0]
 800ddde:	4632      	mov	r2, r6
 800dde0:	4641      	mov	r1, r8
 800dde2:	f000 f9c9 	bl	800e178 <memmove>
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	1b9b      	subs	r3, r3, r6
 800ddea:	60a3      	str	r3, [r4, #8]
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	4433      	add	r3, r6
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	f000 fd9e 	bl	800e93a <_realloc_r>
 800ddfe:	4606      	mov	r6, r0
 800de00:	2800      	cmp	r0, #0
 800de02:	d1e0      	bne.n	800ddc6 <__ssputs_r+0x5a>
 800de04:	6921      	ldr	r1, [r4, #16]
 800de06:	4650      	mov	r0, sl
 800de08:	f7fe fb6c 	bl	800c4e4 <_free_r>
 800de0c:	230c      	movs	r3, #12
 800de0e:	f8ca 3000 	str.w	r3, [sl]
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de18:	81a3      	strh	r3, [r4, #12]
 800de1a:	f04f 30ff 	mov.w	r0, #4294967295
 800de1e:	e7e9      	b.n	800ddf4 <__ssputs_r+0x88>

0800de20 <_svfiprintf_r>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	4698      	mov	r8, r3
 800de26:	898b      	ldrh	r3, [r1, #12]
 800de28:	061b      	lsls	r3, r3, #24
 800de2a:	b09d      	sub	sp, #116	; 0x74
 800de2c:	4607      	mov	r7, r0
 800de2e:	460d      	mov	r5, r1
 800de30:	4614      	mov	r4, r2
 800de32:	d50e      	bpl.n	800de52 <_svfiprintf_r+0x32>
 800de34:	690b      	ldr	r3, [r1, #16]
 800de36:	b963      	cbnz	r3, 800de52 <_svfiprintf_r+0x32>
 800de38:	2140      	movs	r1, #64	; 0x40
 800de3a:	f7fe fbc7 	bl	800c5cc <_malloc_r>
 800de3e:	6028      	str	r0, [r5, #0]
 800de40:	6128      	str	r0, [r5, #16]
 800de42:	b920      	cbnz	r0, 800de4e <_svfiprintf_r+0x2e>
 800de44:	230c      	movs	r3, #12
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	e0d0      	b.n	800dff0 <_svfiprintf_r+0x1d0>
 800de4e:	2340      	movs	r3, #64	; 0x40
 800de50:	616b      	str	r3, [r5, #20]
 800de52:	2300      	movs	r3, #0
 800de54:	9309      	str	r3, [sp, #36]	; 0x24
 800de56:	2320      	movs	r3, #32
 800de58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de60:	2330      	movs	r3, #48	; 0x30
 800de62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e008 <_svfiprintf_r+0x1e8>
 800de66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de6a:	f04f 0901 	mov.w	r9, #1
 800de6e:	4623      	mov	r3, r4
 800de70:	469a      	mov	sl, r3
 800de72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de76:	b10a      	cbz	r2, 800de7c <_svfiprintf_r+0x5c>
 800de78:	2a25      	cmp	r2, #37	; 0x25
 800de7a:	d1f9      	bne.n	800de70 <_svfiprintf_r+0x50>
 800de7c:	ebba 0b04 	subs.w	fp, sl, r4
 800de80:	d00b      	beq.n	800de9a <_svfiprintf_r+0x7a>
 800de82:	465b      	mov	r3, fp
 800de84:	4622      	mov	r2, r4
 800de86:	4629      	mov	r1, r5
 800de88:	4638      	mov	r0, r7
 800de8a:	f7ff ff6f 	bl	800dd6c <__ssputs_r>
 800de8e:	3001      	adds	r0, #1
 800de90:	f000 80a9 	beq.w	800dfe6 <_svfiprintf_r+0x1c6>
 800de94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de96:	445a      	add	r2, fp
 800de98:	9209      	str	r2, [sp, #36]	; 0x24
 800de9a:	f89a 3000 	ldrb.w	r3, [sl]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f000 80a1 	beq.w	800dfe6 <_svfiprintf_r+0x1c6>
 800dea4:	2300      	movs	r3, #0
 800dea6:	f04f 32ff 	mov.w	r2, #4294967295
 800deaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deae:	f10a 0a01 	add.w	sl, sl, #1
 800deb2:	9304      	str	r3, [sp, #16]
 800deb4:	9307      	str	r3, [sp, #28]
 800deb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deba:	931a      	str	r3, [sp, #104]	; 0x68
 800debc:	4654      	mov	r4, sl
 800debe:	2205      	movs	r2, #5
 800dec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec4:	4850      	ldr	r0, [pc, #320]	; (800e008 <_svfiprintf_r+0x1e8>)
 800dec6:	f7f2 f983 	bl	80001d0 <memchr>
 800deca:	9a04      	ldr	r2, [sp, #16]
 800decc:	b9d8      	cbnz	r0, 800df06 <_svfiprintf_r+0xe6>
 800dece:	06d0      	lsls	r0, r2, #27
 800ded0:	bf44      	itt	mi
 800ded2:	2320      	movmi	r3, #32
 800ded4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded8:	0711      	lsls	r1, r2, #28
 800deda:	bf44      	itt	mi
 800dedc:	232b      	movmi	r3, #43	; 0x2b
 800dede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee2:	f89a 3000 	ldrb.w	r3, [sl]
 800dee6:	2b2a      	cmp	r3, #42	; 0x2a
 800dee8:	d015      	beq.n	800df16 <_svfiprintf_r+0xf6>
 800deea:	9a07      	ldr	r2, [sp, #28]
 800deec:	4654      	mov	r4, sl
 800deee:	2000      	movs	r0, #0
 800def0:	f04f 0c0a 	mov.w	ip, #10
 800def4:	4621      	mov	r1, r4
 800def6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800defa:	3b30      	subs	r3, #48	; 0x30
 800defc:	2b09      	cmp	r3, #9
 800defe:	d94d      	bls.n	800df9c <_svfiprintf_r+0x17c>
 800df00:	b1b0      	cbz	r0, 800df30 <_svfiprintf_r+0x110>
 800df02:	9207      	str	r2, [sp, #28]
 800df04:	e014      	b.n	800df30 <_svfiprintf_r+0x110>
 800df06:	eba0 0308 	sub.w	r3, r0, r8
 800df0a:	fa09 f303 	lsl.w	r3, r9, r3
 800df0e:	4313      	orrs	r3, r2
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	46a2      	mov	sl, r4
 800df14:	e7d2      	b.n	800debc <_svfiprintf_r+0x9c>
 800df16:	9b03      	ldr	r3, [sp, #12]
 800df18:	1d19      	adds	r1, r3, #4
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	9103      	str	r1, [sp, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	bfbb      	ittet	lt
 800df22:	425b      	neglt	r3, r3
 800df24:	f042 0202 	orrlt.w	r2, r2, #2
 800df28:	9307      	strge	r3, [sp, #28]
 800df2a:	9307      	strlt	r3, [sp, #28]
 800df2c:	bfb8      	it	lt
 800df2e:	9204      	strlt	r2, [sp, #16]
 800df30:	7823      	ldrb	r3, [r4, #0]
 800df32:	2b2e      	cmp	r3, #46	; 0x2e
 800df34:	d10c      	bne.n	800df50 <_svfiprintf_r+0x130>
 800df36:	7863      	ldrb	r3, [r4, #1]
 800df38:	2b2a      	cmp	r3, #42	; 0x2a
 800df3a:	d134      	bne.n	800dfa6 <_svfiprintf_r+0x186>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	1d1a      	adds	r2, r3, #4
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	9203      	str	r2, [sp, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	bfb8      	it	lt
 800df48:	f04f 33ff 	movlt.w	r3, #4294967295
 800df4c:	3402      	adds	r4, #2
 800df4e:	9305      	str	r3, [sp, #20]
 800df50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e018 <_svfiprintf_r+0x1f8>
 800df54:	7821      	ldrb	r1, [r4, #0]
 800df56:	2203      	movs	r2, #3
 800df58:	4650      	mov	r0, sl
 800df5a:	f7f2 f939 	bl	80001d0 <memchr>
 800df5e:	b138      	cbz	r0, 800df70 <_svfiprintf_r+0x150>
 800df60:	9b04      	ldr	r3, [sp, #16]
 800df62:	eba0 000a 	sub.w	r0, r0, sl
 800df66:	2240      	movs	r2, #64	; 0x40
 800df68:	4082      	lsls	r2, r0
 800df6a:	4313      	orrs	r3, r2
 800df6c:	3401      	adds	r4, #1
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df74:	4825      	ldr	r0, [pc, #148]	; (800e00c <_svfiprintf_r+0x1ec>)
 800df76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df7a:	2206      	movs	r2, #6
 800df7c:	f7f2 f928 	bl	80001d0 <memchr>
 800df80:	2800      	cmp	r0, #0
 800df82:	d038      	beq.n	800dff6 <_svfiprintf_r+0x1d6>
 800df84:	4b22      	ldr	r3, [pc, #136]	; (800e010 <_svfiprintf_r+0x1f0>)
 800df86:	bb1b      	cbnz	r3, 800dfd0 <_svfiprintf_r+0x1b0>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	3307      	adds	r3, #7
 800df8c:	f023 0307 	bic.w	r3, r3, #7
 800df90:	3308      	adds	r3, #8
 800df92:	9303      	str	r3, [sp, #12]
 800df94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df96:	4433      	add	r3, r6
 800df98:	9309      	str	r3, [sp, #36]	; 0x24
 800df9a:	e768      	b.n	800de6e <_svfiprintf_r+0x4e>
 800df9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	e7a6      	b.n	800def4 <_svfiprintf_r+0xd4>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	3401      	adds	r4, #1
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	4619      	mov	r1, r3
 800dfae:	f04f 0c0a 	mov.w	ip, #10
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfb8:	3a30      	subs	r2, #48	; 0x30
 800dfba:	2a09      	cmp	r2, #9
 800dfbc:	d903      	bls.n	800dfc6 <_svfiprintf_r+0x1a6>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d0c6      	beq.n	800df50 <_svfiprintf_r+0x130>
 800dfc2:	9105      	str	r1, [sp, #20]
 800dfc4:	e7c4      	b.n	800df50 <_svfiprintf_r+0x130>
 800dfc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfca:	4604      	mov	r4, r0
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e7f0      	b.n	800dfb2 <_svfiprintf_r+0x192>
 800dfd0:	ab03      	add	r3, sp, #12
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	462a      	mov	r2, r5
 800dfd6:	4b0f      	ldr	r3, [pc, #60]	; (800e014 <_svfiprintf_r+0x1f4>)
 800dfd8:	a904      	add	r1, sp, #16
 800dfda:	4638      	mov	r0, r7
 800dfdc:	f7fc fc0e 	bl	800a7fc <_printf_float>
 800dfe0:	1c42      	adds	r2, r0, #1
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	d1d6      	bne.n	800df94 <_svfiprintf_r+0x174>
 800dfe6:	89ab      	ldrh	r3, [r5, #12]
 800dfe8:	065b      	lsls	r3, r3, #25
 800dfea:	f53f af2d 	bmi.w	800de48 <_svfiprintf_r+0x28>
 800dfee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dff0:	b01d      	add	sp, #116	; 0x74
 800dff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff6:	ab03      	add	r3, sp, #12
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	462a      	mov	r2, r5
 800dffc:	4b05      	ldr	r3, [pc, #20]	; (800e014 <_svfiprintf_r+0x1f4>)
 800dffe:	a904      	add	r1, sp, #16
 800e000:	4638      	mov	r0, r7
 800e002:	f7fc fe9f 	bl	800ad44 <_printf_i>
 800e006:	e7eb      	b.n	800dfe0 <_svfiprintf_r+0x1c0>
 800e008:	0800f471 	.word	0x0800f471
 800e00c:	0800f47b 	.word	0x0800f47b
 800e010:	0800a7fd 	.word	0x0800a7fd
 800e014:	0800dd6d 	.word	0x0800dd6d
 800e018:	0800f477 	.word	0x0800f477

0800e01c <__sflush_r>:
 800e01c:	898a      	ldrh	r2, [r1, #12]
 800e01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e022:	4605      	mov	r5, r0
 800e024:	0710      	lsls	r0, r2, #28
 800e026:	460c      	mov	r4, r1
 800e028:	d458      	bmi.n	800e0dc <__sflush_r+0xc0>
 800e02a:	684b      	ldr	r3, [r1, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	dc05      	bgt.n	800e03c <__sflush_r+0x20>
 800e030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e032:	2b00      	cmp	r3, #0
 800e034:	dc02      	bgt.n	800e03c <__sflush_r+0x20>
 800e036:	2000      	movs	r0, #0
 800e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e03c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e03e:	2e00      	cmp	r6, #0
 800e040:	d0f9      	beq.n	800e036 <__sflush_r+0x1a>
 800e042:	2300      	movs	r3, #0
 800e044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e048:	682f      	ldr	r7, [r5, #0]
 800e04a:	6a21      	ldr	r1, [r4, #32]
 800e04c:	602b      	str	r3, [r5, #0]
 800e04e:	d032      	beq.n	800e0b6 <__sflush_r+0x9a>
 800e050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	075a      	lsls	r2, r3, #29
 800e056:	d505      	bpl.n	800e064 <__sflush_r+0x48>
 800e058:	6863      	ldr	r3, [r4, #4]
 800e05a:	1ac0      	subs	r0, r0, r3
 800e05c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e05e:	b10b      	cbz	r3, 800e064 <__sflush_r+0x48>
 800e060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e062:	1ac0      	subs	r0, r0, r3
 800e064:	2300      	movs	r3, #0
 800e066:	4602      	mov	r2, r0
 800e068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e06a:	6a21      	ldr	r1, [r4, #32]
 800e06c:	4628      	mov	r0, r5
 800e06e:	47b0      	blx	r6
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	d106      	bne.n	800e084 <__sflush_r+0x68>
 800e076:	6829      	ldr	r1, [r5, #0]
 800e078:	291d      	cmp	r1, #29
 800e07a:	d82b      	bhi.n	800e0d4 <__sflush_r+0xb8>
 800e07c:	4a29      	ldr	r2, [pc, #164]	; (800e124 <__sflush_r+0x108>)
 800e07e:	410a      	asrs	r2, r1
 800e080:	07d6      	lsls	r6, r2, #31
 800e082:	d427      	bmi.n	800e0d4 <__sflush_r+0xb8>
 800e084:	2200      	movs	r2, #0
 800e086:	6062      	str	r2, [r4, #4]
 800e088:	04d9      	lsls	r1, r3, #19
 800e08a:	6922      	ldr	r2, [r4, #16]
 800e08c:	6022      	str	r2, [r4, #0]
 800e08e:	d504      	bpl.n	800e09a <__sflush_r+0x7e>
 800e090:	1c42      	adds	r2, r0, #1
 800e092:	d101      	bne.n	800e098 <__sflush_r+0x7c>
 800e094:	682b      	ldr	r3, [r5, #0]
 800e096:	b903      	cbnz	r3, 800e09a <__sflush_r+0x7e>
 800e098:	6560      	str	r0, [r4, #84]	; 0x54
 800e09a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e09c:	602f      	str	r7, [r5, #0]
 800e09e:	2900      	cmp	r1, #0
 800e0a0:	d0c9      	beq.n	800e036 <__sflush_r+0x1a>
 800e0a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0a6:	4299      	cmp	r1, r3
 800e0a8:	d002      	beq.n	800e0b0 <__sflush_r+0x94>
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f7fe fa1a 	bl	800c4e4 <_free_r>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	6360      	str	r0, [r4, #52]	; 0x34
 800e0b4:	e7c0      	b.n	800e038 <__sflush_r+0x1c>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	47b0      	blx	r6
 800e0bc:	1c41      	adds	r1, r0, #1
 800e0be:	d1c8      	bne.n	800e052 <__sflush_r+0x36>
 800e0c0:	682b      	ldr	r3, [r5, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0c5      	beq.n	800e052 <__sflush_r+0x36>
 800e0c6:	2b1d      	cmp	r3, #29
 800e0c8:	d001      	beq.n	800e0ce <__sflush_r+0xb2>
 800e0ca:	2b16      	cmp	r3, #22
 800e0cc:	d101      	bne.n	800e0d2 <__sflush_r+0xb6>
 800e0ce:	602f      	str	r7, [r5, #0]
 800e0d0:	e7b1      	b.n	800e036 <__sflush_r+0x1a>
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d8:	81a3      	strh	r3, [r4, #12]
 800e0da:	e7ad      	b.n	800e038 <__sflush_r+0x1c>
 800e0dc:	690f      	ldr	r7, [r1, #16]
 800e0de:	2f00      	cmp	r7, #0
 800e0e0:	d0a9      	beq.n	800e036 <__sflush_r+0x1a>
 800e0e2:	0793      	lsls	r3, r2, #30
 800e0e4:	680e      	ldr	r6, [r1, #0]
 800e0e6:	bf08      	it	eq
 800e0e8:	694b      	ldreq	r3, [r1, #20]
 800e0ea:	600f      	str	r7, [r1, #0]
 800e0ec:	bf18      	it	ne
 800e0ee:	2300      	movne	r3, #0
 800e0f0:	eba6 0807 	sub.w	r8, r6, r7
 800e0f4:	608b      	str	r3, [r1, #8]
 800e0f6:	f1b8 0f00 	cmp.w	r8, #0
 800e0fa:	dd9c      	ble.n	800e036 <__sflush_r+0x1a>
 800e0fc:	6a21      	ldr	r1, [r4, #32]
 800e0fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e100:	4643      	mov	r3, r8
 800e102:	463a      	mov	r2, r7
 800e104:	4628      	mov	r0, r5
 800e106:	47b0      	blx	r6
 800e108:	2800      	cmp	r0, #0
 800e10a:	dc06      	bgt.n	800e11a <__sflush_r+0xfe>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e112:	81a3      	strh	r3, [r4, #12]
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	e78e      	b.n	800e038 <__sflush_r+0x1c>
 800e11a:	4407      	add	r7, r0
 800e11c:	eba8 0800 	sub.w	r8, r8, r0
 800e120:	e7e9      	b.n	800e0f6 <__sflush_r+0xda>
 800e122:	bf00      	nop
 800e124:	dfbffffe 	.word	0xdfbffffe

0800e128 <_fflush_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	690b      	ldr	r3, [r1, #16]
 800e12c:	4605      	mov	r5, r0
 800e12e:	460c      	mov	r4, r1
 800e130:	b913      	cbnz	r3, 800e138 <_fflush_r+0x10>
 800e132:	2500      	movs	r5, #0
 800e134:	4628      	mov	r0, r5
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	b118      	cbz	r0, 800e142 <_fflush_r+0x1a>
 800e13a:	6a03      	ldr	r3, [r0, #32]
 800e13c:	b90b      	cbnz	r3, 800e142 <_fflush_r+0x1a>
 800e13e:	f7fd f9bf 	bl	800b4c0 <__sinit>
 800e142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d0f3      	beq.n	800e132 <_fflush_r+0xa>
 800e14a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e14c:	07d0      	lsls	r0, r2, #31
 800e14e:	d404      	bmi.n	800e15a <_fflush_r+0x32>
 800e150:	0599      	lsls	r1, r3, #22
 800e152:	d402      	bmi.n	800e15a <_fflush_r+0x32>
 800e154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e156:	f7fd fb32 	bl	800b7be <__retarget_lock_acquire_recursive>
 800e15a:	4628      	mov	r0, r5
 800e15c:	4621      	mov	r1, r4
 800e15e:	f7ff ff5d 	bl	800e01c <__sflush_r>
 800e162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e164:	07da      	lsls	r2, r3, #31
 800e166:	4605      	mov	r5, r0
 800e168:	d4e4      	bmi.n	800e134 <_fflush_r+0xc>
 800e16a:	89a3      	ldrh	r3, [r4, #12]
 800e16c:	059b      	lsls	r3, r3, #22
 800e16e:	d4e1      	bmi.n	800e134 <_fflush_r+0xc>
 800e170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e172:	f7fd fb25 	bl	800b7c0 <__retarget_lock_release_recursive>
 800e176:	e7dd      	b.n	800e134 <_fflush_r+0xc>

0800e178 <memmove>:
 800e178:	4288      	cmp	r0, r1
 800e17a:	b510      	push	{r4, lr}
 800e17c:	eb01 0402 	add.w	r4, r1, r2
 800e180:	d902      	bls.n	800e188 <memmove+0x10>
 800e182:	4284      	cmp	r4, r0
 800e184:	4623      	mov	r3, r4
 800e186:	d807      	bhi.n	800e198 <memmove+0x20>
 800e188:	1e43      	subs	r3, r0, #1
 800e18a:	42a1      	cmp	r1, r4
 800e18c:	d008      	beq.n	800e1a0 <memmove+0x28>
 800e18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e192:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e196:	e7f8      	b.n	800e18a <memmove+0x12>
 800e198:	4402      	add	r2, r0
 800e19a:	4601      	mov	r1, r0
 800e19c:	428a      	cmp	r2, r1
 800e19e:	d100      	bne.n	800e1a2 <memmove+0x2a>
 800e1a0:	bd10      	pop	{r4, pc}
 800e1a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1aa:	e7f7      	b.n	800e19c <memmove+0x24>

0800e1ac <strncmp>:
 800e1ac:	b510      	push	{r4, lr}
 800e1ae:	b16a      	cbz	r2, 800e1cc <strncmp+0x20>
 800e1b0:	3901      	subs	r1, #1
 800e1b2:	1884      	adds	r4, r0, r2
 800e1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d103      	bne.n	800e1c8 <strncmp+0x1c>
 800e1c0:	42a0      	cmp	r0, r4
 800e1c2:	d001      	beq.n	800e1c8 <strncmp+0x1c>
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	d1f5      	bne.n	800e1b4 <strncmp+0x8>
 800e1c8:	1ad0      	subs	r0, r2, r3
 800e1ca:	bd10      	pop	{r4, pc}
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	e7fc      	b.n	800e1ca <strncmp+0x1e>

0800e1d0 <_sbrk_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d06      	ldr	r5, [pc, #24]	; (800e1ec <_sbrk_r+0x1c>)
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	4608      	mov	r0, r1
 800e1da:	602b      	str	r3, [r5, #0]
 800e1dc:	f7f3 feac 	bl	8001f38 <_sbrk>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_sbrk_r+0x1a>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_sbrk_r+0x1a>
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	20001fac 	.word	0x20001fac

0800e1f0 <nan>:
 800e1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1f8 <nan+0x8>
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	00000000 	.word	0x00000000
 800e1fc:	7ff80000 	.word	0x7ff80000

0800e200 <__assert_func>:
 800e200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e202:	4614      	mov	r4, r2
 800e204:	461a      	mov	r2, r3
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <__assert_func+0x2c>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4605      	mov	r5, r0
 800e20c:	68d8      	ldr	r0, [r3, #12]
 800e20e:	b14c      	cbz	r4, 800e224 <__assert_func+0x24>
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <__assert_func+0x30>)
 800e212:	9100      	str	r1, [sp, #0]
 800e214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e218:	4906      	ldr	r1, [pc, #24]	; (800e234 <__assert_func+0x34>)
 800e21a:	462b      	mov	r3, r5
 800e21c:	f000 fbca 	bl	800e9b4 <fiprintf>
 800e220:	f000 fbda 	bl	800e9d8 <abort>
 800e224:	4b04      	ldr	r3, [pc, #16]	; (800e238 <__assert_func+0x38>)
 800e226:	461c      	mov	r4, r3
 800e228:	e7f3      	b.n	800e212 <__assert_func+0x12>
 800e22a:	bf00      	nop
 800e22c:	20000068 	.word	0x20000068
 800e230:	0800f48a 	.word	0x0800f48a
 800e234:	0800f497 	.word	0x0800f497
 800e238:	0800f4c5 	.word	0x0800f4c5

0800e23c <_calloc_r>:
 800e23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e23e:	fba1 2402 	umull	r2, r4, r1, r2
 800e242:	b94c      	cbnz	r4, 800e258 <_calloc_r+0x1c>
 800e244:	4611      	mov	r1, r2
 800e246:	9201      	str	r2, [sp, #4]
 800e248:	f7fe f9c0 	bl	800c5cc <_malloc_r>
 800e24c:	9a01      	ldr	r2, [sp, #4]
 800e24e:	4605      	mov	r5, r0
 800e250:	b930      	cbnz	r0, 800e260 <_calloc_r+0x24>
 800e252:	4628      	mov	r0, r5
 800e254:	b003      	add	sp, #12
 800e256:	bd30      	pop	{r4, r5, pc}
 800e258:	220c      	movs	r2, #12
 800e25a:	6002      	str	r2, [r0, #0]
 800e25c:	2500      	movs	r5, #0
 800e25e:	e7f8      	b.n	800e252 <_calloc_r+0x16>
 800e260:	4621      	mov	r1, r4
 800e262:	f7fd f9c6 	bl	800b5f2 <memset>
 800e266:	e7f4      	b.n	800e252 <_calloc_r+0x16>

0800e268 <rshift>:
 800e268:	6903      	ldr	r3, [r0, #16]
 800e26a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e26e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e272:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e276:	f100 0414 	add.w	r4, r0, #20
 800e27a:	dd45      	ble.n	800e308 <rshift+0xa0>
 800e27c:	f011 011f 	ands.w	r1, r1, #31
 800e280:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e284:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e288:	d10c      	bne.n	800e2a4 <rshift+0x3c>
 800e28a:	f100 0710 	add.w	r7, r0, #16
 800e28e:	4629      	mov	r1, r5
 800e290:	42b1      	cmp	r1, r6
 800e292:	d334      	bcc.n	800e2fe <rshift+0x96>
 800e294:	1a9b      	subs	r3, r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	1eea      	subs	r2, r5, #3
 800e29a:	4296      	cmp	r6, r2
 800e29c:	bf38      	it	cc
 800e29e:	2300      	movcc	r3, #0
 800e2a0:	4423      	add	r3, r4
 800e2a2:	e015      	b.n	800e2d0 <rshift+0x68>
 800e2a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e2a8:	f1c1 0820 	rsb	r8, r1, #32
 800e2ac:	40cf      	lsrs	r7, r1
 800e2ae:	f105 0e04 	add.w	lr, r5, #4
 800e2b2:	46a1      	mov	r9, r4
 800e2b4:	4576      	cmp	r6, lr
 800e2b6:	46f4      	mov	ip, lr
 800e2b8:	d815      	bhi.n	800e2e6 <rshift+0x7e>
 800e2ba:	1a9a      	subs	r2, r3, r2
 800e2bc:	0092      	lsls	r2, r2, #2
 800e2be:	3a04      	subs	r2, #4
 800e2c0:	3501      	adds	r5, #1
 800e2c2:	42ae      	cmp	r6, r5
 800e2c4:	bf38      	it	cc
 800e2c6:	2200      	movcc	r2, #0
 800e2c8:	18a3      	adds	r3, r4, r2
 800e2ca:	50a7      	str	r7, [r4, r2]
 800e2cc:	b107      	cbz	r7, 800e2d0 <rshift+0x68>
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	1b1a      	subs	r2, r3, r4
 800e2d2:	42a3      	cmp	r3, r4
 800e2d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e2d8:	bf08      	it	eq
 800e2da:	2300      	moveq	r3, #0
 800e2dc:	6102      	str	r2, [r0, #16]
 800e2de:	bf08      	it	eq
 800e2e0:	6143      	streq	r3, [r0, #20]
 800e2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2e6:	f8dc c000 	ldr.w	ip, [ip]
 800e2ea:	fa0c fc08 	lsl.w	ip, ip, r8
 800e2ee:	ea4c 0707 	orr.w	r7, ip, r7
 800e2f2:	f849 7b04 	str.w	r7, [r9], #4
 800e2f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2fa:	40cf      	lsrs	r7, r1
 800e2fc:	e7da      	b.n	800e2b4 <rshift+0x4c>
 800e2fe:	f851 cb04 	ldr.w	ip, [r1], #4
 800e302:	f847 cf04 	str.w	ip, [r7, #4]!
 800e306:	e7c3      	b.n	800e290 <rshift+0x28>
 800e308:	4623      	mov	r3, r4
 800e30a:	e7e1      	b.n	800e2d0 <rshift+0x68>

0800e30c <__hexdig_fun>:
 800e30c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e310:	2b09      	cmp	r3, #9
 800e312:	d802      	bhi.n	800e31a <__hexdig_fun+0xe>
 800e314:	3820      	subs	r0, #32
 800e316:	b2c0      	uxtb	r0, r0
 800e318:	4770      	bx	lr
 800e31a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e31e:	2b05      	cmp	r3, #5
 800e320:	d801      	bhi.n	800e326 <__hexdig_fun+0x1a>
 800e322:	3847      	subs	r0, #71	; 0x47
 800e324:	e7f7      	b.n	800e316 <__hexdig_fun+0xa>
 800e326:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e32a:	2b05      	cmp	r3, #5
 800e32c:	d801      	bhi.n	800e332 <__hexdig_fun+0x26>
 800e32e:	3827      	subs	r0, #39	; 0x27
 800e330:	e7f1      	b.n	800e316 <__hexdig_fun+0xa>
 800e332:	2000      	movs	r0, #0
 800e334:	4770      	bx	lr
	...

0800e338 <__gethex>:
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	4617      	mov	r7, r2
 800e33e:	680a      	ldr	r2, [r1, #0]
 800e340:	b085      	sub	sp, #20
 800e342:	f102 0b02 	add.w	fp, r2, #2
 800e346:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e34a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e34e:	4681      	mov	r9, r0
 800e350:	468a      	mov	sl, r1
 800e352:	9302      	str	r3, [sp, #8]
 800e354:	32fe      	adds	r2, #254	; 0xfe
 800e356:	eb02 030b 	add.w	r3, r2, fp
 800e35a:	46d8      	mov	r8, fp
 800e35c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e360:	9301      	str	r3, [sp, #4]
 800e362:	2830      	cmp	r0, #48	; 0x30
 800e364:	d0f7      	beq.n	800e356 <__gethex+0x1e>
 800e366:	f7ff ffd1 	bl	800e30c <__hexdig_fun>
 800e36a:	4604      	mov	r4, r0
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d138      	bne.n	800e3e2 <__gethex+0xaa>
 800e370:	49a7      	ldr	r1, [pc, #668]	; (800e610 <__gethex+0x2d8>)
 800e372:	2201      	movs	r2, #1
 800e374:	4640      	mov	r0, r8
 800e376:	f7ff ff19 	bl	800e1ac <strncmp>
 800e37a:	4606      	mov	r6, r0
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d169      	bne.n	800e454 <__gethex+0x11c>
 800e380:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e384:	465d      	mov	r5, fp
 800e386:	f7ff ffc1 	bl	800e30c <__hexdig_fun>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	d064      	beq.n	800e458 <__gethex+0x120>
 800e38e:	465a      	mov	r2, fp
 800e390:	7810      	ldrb	r0, [r2, #0]
 800e392:	2830      	cmp	r0, #48	; 0x30
 800e394:	4690      	mov	r8, r2
 800e396:	f102 0201 	add.w	r2, r2, #1
 800e39a:	d0f9      	beq.n	800e390 <__gethex+0x58>
 800e39c:	f7ff ffb6 	bl	800e30c <__hexdig_fun>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	fab0 f480 	clz	r4, r0
 800e3a6:	0964      	lsrs	r4, r4, #5
 800e3a8:	465e      	mov	r6, fp
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	4615      	mov	r5, r2
 800e3b0:	3201      	adds	r2, #1
 800e3b2:	7828      	ldrb	r0, [r5, #0]
 800e3b4:	f7ff ffaa 	bl	800e30c <__hexdig_fun>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d1f8      	bne.n	800e3ae <__gethex+0x76>
 800e3bc:	4994      	ldr	r1, [pc, #592]	; (800e610 <__gethex+0x2d8>)
 800e3be:	2201      	movs	r2, #1
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f7ff fef3 	bl	800e1ac <strncmp>
 800e3c6:	b978      	cbnz	r0, 800e3e8 <__gethex+0xb0>
 800e3c8:	b946      	cbnz	r6, 800e3dc <__gethex+0xa4>
 800e3ca:	1c6e      	adds	r6, r5, #1
 800e3cc:	4632      	mov	r2, r6
 800e3ce:	4615      	mov	r5, r2
 800e3d0:	3201      	adds	r2, #1
 800e3d2:	7828      	ldrb	r0, [r5, #0]
 800e3d4:	f7ff ff9a 	bl	800e30c <__hexdig_fun>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d1f8      	bne.n	800e3ce <__gethex+0x96>
 800e3dc:	1b73      	subs	r3, r6, r5
 800e3de:	009e      	lsls	r6, r3, #2
 800e3e0:	e004      	b.n	800e3ec <__gethex+0xb4>
 800e3e2:	2400      	movs	r4, #0
 800e3e4:	4626      	mov	r6, r4
 800e3e6:	e7e1      	b.n	800e3ac <__gethex+0x74>
 800e3e8:	2e00      	cmp	r6, #0
 800e3ea:	d1f7      	bne.n	800e3dc <__gethex+0xa4>
 800e3ec:	782b      	ldrb	r3, [r5, #0]
 800e3ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e3f2:	2b50      	cmp	r3, #80	; 0x50
 800e3f4:	d13d      	bne.n	800e472 <__gethex+0x13a>
 800e3f6:	786b      	ldrb	r3, [r5, #1]
 800e3f8:	2b2b      	cmp	r3, #43	; 0x2b
 800e3fa:	d02f      	beq.n	800e45c <__gethex+0x124>
 800e3fc:	2b2d      	cmp	r3, #45	; 0x2d
 800e3fe:	d031      	beq.n	800e464 <__gethex+0x12c>
 800e400:	1c69      	adds	r1, r5, #1
 800e402:	f04f 0b00 	mov.w	fp, #0
 800e406:	7808      	ldrb	r0, [r1, #0]
 800e408:	f7ff ff80 	bl	800e30c <__hexdig_fun>
 800e40c:	1e42      	subs	r2, r0, #1
 800e40e:	b2d2      	uxtb	r2, r2
 800e410:	2a18      	cmp	r2, #24
 800e412:	d82e      	bhi.n	800e472 <__gethex+0x13a>
 800e414:	f1a0 0210 	sub.w	r2, r0, #16
 800e418:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e41c:	f7ff ff76 	bl	800e30c <__hexdig_fun>
 800e420:	f100 3cff 	add.w	ip, r0, #4294967295
 800e424:	fa5f fc8c 	uxtb.w	ip, ip
 800e428:	f1bc 0f18 	cmp.w	ip, #24
 800e42c:	d91d      	bls.n	800e46a <__gethex+0x132>
 800e42e:	f1bb 0f00 	cmp.w	fp, #0
 800e432:	d000      	beq.n	800e436 <__gethex+0xfe>
 800e434:	4252      	negs	r2, r2
 800e436:	4416      	add	r6, r2
 800e438:	f8ca 1000 	str.w	r1, [sl]
 800e43c:	b1dc      	cbz	r4, 800e476 <__gethex+0x13e>
 800e43e:	9b01      	ldr	r3, [sp, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	bf14      	ite	ne
 800e444:	f04f 0800 	movne.w	r8, #0
 800e448:	f04f 0806 	moveq.w	r8, #6
 800e44c:	4640      	mov	r0, r8
 800e44e:	b005      	add	sp, #20
 800e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e454:	4645      	mov	r5, r8
 800e456:	4626      	mov	r6, r4
 800e458:	2401      	movs	r4, #1
 800e45a:	e7c7      	b.n	800e3ec <__gethex+0xb4>
 800e45c:	f04f 0b00 	mov.w	fp, #0
 800e460:	1ca9      	adds	r1, r5, #2
 800e462:	e7d0      	b.n	800e406 <__gethex+0xce>
 800e464:	f04f 0b01 	mov.w	fp, #1
 800e468:	e7fa      	b.n	800e460 <__gethex+0x128>
 800e46a:	230a      	movs	r3, #10
 800e46c:	fb03 0002 	mla	r0, r3, r2, r0
 800e470:	e7d0      	b.n	800e414 <__gethex+0xdc>
 800e472:	4629      	mov	r1, r5
 800e474:	e7e0      	b.n	800e438 <__gethex+0x100>
 800e476:	eba5 0308 	sub.w	r3, r5, r8
 800e47a:	3b01      	subs	r3, #1
 800e47c:	4621      	mov	r1, r4
 800e47e:	2b07      	cmp	r3, #7
 800e480:	dc0a      	bgt.n	800e498 <__gethex+0x160>
 800e482:	4648      	mov	r0, r9
 800e484:	f7fe f92e 	bl	800c6e4 <_Balloc>
 800e488:	4604      	mov	r4, r0
 800e48a:	b940      	cbnz	r0, 800e49e <__gethex+0x166>
 800e48c:	4b61      	ldr	r3, [pc, #388]	; (800e614 <__gethex+0x2dc>)
 800e48e:	4602      	mov	r2, r0
 800e490:	21e4      	movs	r1, #228	; 0xe4
 800e492:	4861      	ldr	r0, [pc, #388]	; (800e618 <__gethex+0x2e0>)
 800e494:	f7ff feb4 	bl	800e200 <__assert_func>
 800e498:	3101      	adds	r1, #1
 800e49a:	105b      	asrs	r3, r3, #1
 800e49c:	e7ef      	b.n	800e47e <__gethex+0x146>
 800e49e:	f100 0a14 	add.w	sl, r0, #20
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	495a      	ldr	r1, [pc, #360]	; (800e610 <__gethex+0x2d8>)
 800e4a6:	f8cd a004 	str.w	sl, [sp, #4]
 800e4aa:	469b      	mov	fp, r3
 800e4ac:	45a8      	cmp	r8, r5
 800e4ae:	d342      	bcc.n	800e536 <__gethex+0x1fe>
 800e4b0:	9801      	ldr	r0, [sp, #4]
 800e4b2:	f840 bb04 	str.w	fp, [r0], #4
 800e4b6:	eba0 000a 	sub.w	r0, r0, sl
 800e4ba:	1080      	asrs	r0, r0, #2
 800e4bc:	6120      	str	r0, [r4, #16]
 800e4be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e4c2:	4658      	mov	r0, fp
 800e4c4:	f7fe fa00 	bl	800c8c8 <__hi0bits>
 800e4c8:	683d      	ldr	r5, [r7, #0]
 800e4ca:	eba8 0000 	sub.w	r0, r8, r0
 800e4ce:	42a8      	cmp	r0, r5
 800e4d0:	dd59      	ble.n	800e586 <__gethex+0x24e>
 800e4d2:	eba0 0805 	sub.w	r8, r0, r5
 800e4d6:	4641      	mov	r1, r8
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f7fe fd8f 	bl	800cffc <__any_on>
 800e4de:	4683      	mov	fp, r0
 800e4e0:	b1b8      	cbz	r0, 800e512 <__gethex+0x1da>
 800e4e2:	f108 33ff 	add.w	r3, r8, #4294967295
 800e4e6:	1159      	asrs	r1, r3, #5
 800e4e8:	f003 021f 	and.w	r2, r3, #31
 800e4ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e4f0:	f04f 0b01 	mov.w	fp, #1
 800e4f4:	fa0b f202 	lsl.w	r2, fp, r2
 800e4f8:	420a      	tst	r2, r1
 800e4fa:	d00a      	beq.n	800e512 <__gethex+0x1da>
 800e4fc:	455b      	cmp	r3, fp
 800e4fe:	dd06      	ble.n	800e50e <__gethex+0x1d6>
 800e500:	f1a8 0102 	sub.w	r1, r8, #2
 800e504:	4620      	mov	r0, r4
 800e506:	f7fe fd79 	bl	800cffc <__any_on>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d138      	bne.n	800e580 <__gethex+0x248>
 800e50e:	f04f 0b02 	mov.w	fp, #2
 800e512:	4641      	mov	r1, r8
 800e514:	4620      	mov	r0, r4
 800e516:	f7ff fea7 	bl	800e268 <rshift>
 800e51a:	4446      	add	r6, r8
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	42b3      	cmp	r3, r6
 800e520:	da41      	bge.n	800e5a6 <__gethex+0x26e>
 800e522:	4621      	mov	r1, r4
 800e524:	4648      	mov	r0, r9
 800e526:	f7fe f91d 	bl	800c764 <_Bfree>
 800e52a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e52c:	2300      	movs	r3, #0
 800e52e:	6013      	str	r3, [r2, #0]
 800e530:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e534:	e78a      	b.n	800e44c <__gethex+0x114>
 800e536:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e53a:	2a2e      	cmp	r2, #46	; 0x2e
 800e53c:	d014      	beq.n	800e568 <__gethex+0x230>
 800e53e:	2b20      	cmp	r3, #32
 800e540:	d106      	bne.n	800e550 <__gethex+0x218>
 800e542:	9b01      	ldr	r3, [sp, #4]
 800e544:	f843 bb04 	str.w	fp, [r3], #4
 800e548:	f04f 0b00 	mov.w	fp, #0
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	465b      	mov	r3, fp
 800e550:	7828      	ldrb	r0, [r5, #0]
 800e552:	9303      	str	r3, [sp, #12]
 800e554:	f7ff feda 	bl	800e30c <__hexdig_fun>
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	f000 000f 	and.w	r0, r0, #15
 800e55e:	4098      	lsls	r0, r3
 800e560:	ea4b 0b00 	orr.w	fp, fp, r0
 800e564:	3304      	adds	r3, #4
 800e566:	e7a1      	b.n	800e4ac <__gethex+0x174>
 800e568:	45a8      	cmp	r8, r5
 800e56a:	d8e8      	bhi.n	800e53e <__gethex+0x206>
 800e56c:	2201      	movs	r2, #1
 800e56e:	4628      	mov	r0, r5
 800e570:	9303      	str	r3, [sp, #12]
 800e572:	f7ff fe1b 	bl	800e1ac <strncmp>
 800e576:	4926      	ldr	r1, [pc, #152]	; (800e610 <__gethex+0x2d8>)
 800e578:	9b03      	ldr	r3, [sp, #12]
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d1df      	bne.n	800e53e <__gethex+0x206>
 800e57e:	e795      	b.n	800e4ac <__gethex+0x174>
 800e580:	f04f 0b03 	mov.w	fp, #3
 800e584:	e7c5      	b.n	800e512 <__gethex+0x1da>
 800e586:	da0b      	bge.n	800e5a0 <__gethex+0x268>
 800e588:	eba5 0800 	sub.w	r8, r5, r0
 800e58c:	4621      	mov	r1, r4
 800e58e:	4642      	mov	r2, r8
 800e590:	4648      	mov	r0, r9
 800e592:	f7fe fb01 	bl	800cb98 <__lshift>
 800e596:	eba6 0608 	sub.w	r6, r6, r8
 800e59a:	4604      	mov	r4, r0
 800e59c:	f100 0a14 	add.w	sl, r0, #20
 800e5a0:	f04f 0b00 	mov.w	fp, #0
 800e5a4:	e7ba      	b.n	800e51c <__gethex+0x1e4>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	42b3      	cmp	r3, r6
 800e5aa:	dd73      	ble.n	800e694 <__gethex+0x35c>
 800e5ac:	1b9e      	subs	r6, r3, r6
 800e5ae:	42b5      	cmp	r5, r6
 800e5b0:	dc34      	bgt.n	800e61c <__gethex+0x2e4>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d023      	beq.n	800e600 <__gethex+0x2c8>
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d025      	beq.n	800e608 <__gethex+0x2d0>
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d115      	bne.n	800e5ec <__gethex+0x2b4>
 800e5c0:	42b5      	cmp	r5, r6
 800e5c2:	d113      	bne.n	800e5ec <__gethex+0x2b4>
 800e5c4:	2d01      	cmp	r5, #1
 800e5c6:	d10b      	bne.n	800e5e0 <__gethex+0x2a8>
 800e5c8:	9a02      	ldr	r2, [sp, #8]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6013      	str	r3, [r2, #0]
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	6123      	str	r3, [r4, #16]
 800e5d2:	f8ca 3000 	str.w	r3, [sl]
 800e5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e5dc:	601c      	str	r4, [r3, #0]
 800e5de:	e735      	b.n	800e44c <__gethex+0x114>
 800e5e0:	1e69      	subs	r1, r5, #1
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f7fe fd0a 	bl	800cffc <__any_on>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	d1ed      	bne.n	800e5c8 <__gethex+0x290>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4648      	mov	r0, r9
 800e5f0:	f7fe f8b8 	bl	800c764 <_Bfree>
 800e5f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	6013      	str	r3, [r2, #0]
 800e5fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e5fe:	e725      	b.n	800e44c <__gethex+0x114>
 800e600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1f2      	bne.n	800e5ec <__gethex+0x2b4>
 800e606:	e7df      	b.n	800e5c8 <__gethex+0x290>
 800e608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1dc      	bne.n	800e5c8 <__gethex+0x290>
 800e60e:	e7ed      	b.n	800e5ec <__gethex+0x2b4>
 800e610:	0800f31c 	.word	0x0800f31c
 800e614:	0800f1b1 	.word	0x0800f1b1
 800e618:	0800f4c6 	.word	0x0800f4c6
 800e61c:	f106 38ff 	add.w	r8, r6, #4294967295
 800e620:	f1bb 0f00 	cmp.w	fp, #0
 800e624:	d133      	bne.n	800e68e <__gethex+0x356>
 800e626:	f1b8 0f00 	cmp.w	r8, #0
 800e62a:	d004      	beq.n	800e636 <__gethex+0x2fe>
 800e62c:	4641      	mov	r1, r8
 800e62e:	4620      	mov	r0, r4
 800e630:	f7fe fce4 	bl	800cffc <__any_on>
 800e634:	4683      	mov	fp, r0
 800e636:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e63a:	2301      	movs	r3, #1
 800e63c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e640:	f008 081f 	and.w	r8, r8, #31
 800e644:	fa03 f308 	lsl.w	r3, r3, r8
 800e648:	4213      	tst	r3, r2
 800e64a:	4631      	mov	r1, r6
 800e64c:	4620      	mov	r0, r4
 800e64e:	bf18      	it	ne
 800e650:	f04b 0b02 	orrne.w	fp, fp, #2
 800e654:	1bad      	subs	r5, r5, r6
 800e656:	f7ff fe07 	bl	800e268 <rshift>
 800e65a:	687e      	ldr	r6, [r7, #4]
 800e65c:	f04f 0802 	mov.w	r8, #2
 800e660:	f1bb 0f00 	cmp.w	fp, #0
 800e664:	d04a      	beq.n	800e6fc <__gethex+0x3c4>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b02      	cmp	r3, #2
 800e66a:	d016      	beq.n	800e69a <__gethex+0x362>
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d018      	beq.n	800e6a2 <__gethex+0x36a>
 800e670:	2b01      	cmp	r3, #1
 800e672:	d109      	bne.n	800e688 <__gethex+0x350>
 800e674:	f01b 0f02 	tst.w	fp, #2
 800e678:	d006      	beq.n	800e688 <__gethex+0x350>
 800e67a:	f8da 3000 	ldr.w	r3, [sl]
 800e67e:	ea4b 0b03 	orr.w	fp, fp, r3
 800e682:	f01b 0f01 	tst.w	fp, #1
 800e686:	d10f      	bne.n	800e6a8 <__gethex+0x370>
 800e688:	f048 0810 	orr.w	r8, r8, #16
 800e68c:	e036      	b.n	800e6fc <__gethex+0x3c4>
 800e68e:	f04f 0b01 	mov.w	fp, #1
 800e692:	e7d0      	b.n	800e636 <__gethex+0x2fe>
 800e694:	f04f 0801 	mov.w	r8, #1
 800e698:	e7e2      	b.n	800e660 <__gethex+0x328>
 800e69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e69c:	f1c3 0301 	rsb	r3, r3, #1
 800e6a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d0ef      	beq.n	800e688 <__gethex+0x350>
 800e6a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e6ac:	f104 0214 	add.w	r2, r4, #20
 800e6b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	4694      	mov	ip, r2
 800e6be:	f852 1b04 	ldr.w	r1, [r2], #4
 800e6c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e6c6:	d01e      	beq.n	800e706 <__gethex+0x3ce>
 800e6c8:	3101      	adds	r1, #1
 800e6ca:	f8cc 1000 	str.w	r1, [ip]
 800e6ce:	f1b8 0f02 	cmp.w	r8, #2
 800e6d2:	f104 0214 	add.w	r2, r4, #20
 800e6d6:	d13d      	bne.n	800e754 <__gethex+0x41c>
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	42ab      	cmp	r3, r5
 800e6de:	d10b      	bne.n	800e6f8 <__gethex+0x3c0>
 800e6e0:	1169      	asrs	r1, r5, #5
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f005 051f 	and.w	r5, r5, #31
 800e6e8:	fa03 f505 	lsl.w	r5, r3, r5
 800e6ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6f0:	421d      	tst	r5, r3
 800e6f2:	bf18      	it	ne
 800e6f4:	f04f 0801 	movne.w	r8, #1
 800e6f8:	f048 0820 	orr.w	r8, r8, #32
 800e6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6fe:	601c      	str	r4, [r3, #0]
 800e700:	9b02      	ldr	r3, [sp, #8]
 800e702:	601e      	str	r6, [r3, #0]
 800e704:	e6a2      	b.n	800e44c <__gethex+0x114>
 800e706:	4290      	cmp	r0, r2
 800e708:	f842 3c04 	str.w	r3, [r2, #-4]
 800e70c:	d8d6      	bhi.n	800e6bc <__gethex+0x384>
 800e70e:	68a2      	ldr	r2, [r4, #8]
 800e710:	4593      	cmp	fp, r2
 800e712:	db17      	blt.n	800e744 <__gethex+0x40c>
 800e714:	6861      	ldr	r1, [r4, #4]
 800e716:	4648      	mov	r0, r9
 800e718:	3101      	adds	r1, #1
 800e71a:	f7fd ffe3 	bl	800c6e4 <_Balloc>
 800e71e:	4682      	mov	sl, r0
 800e720:	b918      	cbnz	r0, 800e72a <__gethex+0x3f2>
 800e722:	4b1b      	ldr	r3, [pc, #108]	; (800e790 <__gethex+0x458>)
 800e724:	4602      	mov	r2, r0
 800e726:	2184      	movs	r1, #132	; 0x84
 800e728:	e6b3      	b.n	800e492 <__gethex+0x15a>
 800e72a:	6922      	ldr	r2, [r4, #16]
 800e72c:	3202      	adds	r2, #2
 800e72e:	f104 010c 	add.w	r1, r4, #12
 800e732:	0092      	lsls	r2, r2, #2
 800e734:	300c      	adds	r0, #12
 800e736:	f7fd f844 	bl	800b7c2 <memcpy>
 800e73a:	4621      	mov	r1, r4
 800e73c:	4648      	mov	r0, r9
 800e73e:	f7fe f811 	bl	800c764 <_Bfree>
 800e742:	4654      	mov	r4, sl
 800e744:	6922      	ldr	r2, [r4, #16]
 800e746:	1c51      	adds	r1, r2, #1
 800e748:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e74c:	6121      	str	r1, [r4, #16]
 800e74e:	2101      	movs	r1, #1
 800e750:	6151      	str	r1, [r2, #20]
 800e752:	e7bc      	b.n	800e6ce <__gethex+0x396>
 800e754:	6921      	ldr	r1, [r4, #16]
 800e756:	4559      	cmp	r1, fp
 800e758:	dd0b      	ble.n	800e772 <__gethex+0x43a>
 800e75a:	2101      	movs	r1, #1
 800e75c:	4620      	mov	r0, r4
 800e75e:	f7ff fd83 	bl	800e268 <rshift>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	3601      	adds	r6, #1
 800e766:	42b3      	cmp	r3, r6
 800e768:	f6ff aedb 	blt.w	800e522 <__gethex+0x1ea>
 800e76c:	f04f 0801 	mov.w	r8, #1
 800e770:	e7c2      	b.n	800e6f8 <__gethex+0x3c0>
 800e772:	f015 051f 	ands.w	r5, r5, #31
 800e776:	d0f9      	beq.n	800e76c <__gethex+0x434>
 800e778:	9b01      	ldr	r3, [sp, #4]
 800e77a:	441a      	add	r2, r3
 800e77c:	f1c5 0520 	rsb	r5, r5, #32
 800e780:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e784:	f7fe f8a0 	bl	800c8c8 <__hi0bits>
 800e788:	42a8      	cmp	r0, r5
 800e78a:	dbe6      	blt.n	800e75a <__gethex+0x422>
 800e78c:	e7ee      	b.n	800e76c <__gethex+0x434>
 800e78e:	bf00      	nop
 800e790:	0800f1b1 	.word	0x0800f1b1

0800e794 <L_shift>:
 800e794:	f1c2 0208 	rsb	r2, r2, #8
 800e798:	0092      	lsls	r2, r2, #2
 800e79a:	b570      	push	{r4, r5, r6, lr}
 800e79c:	f1c2 0620 	rsb	r6, r2, #32
 800e7a0:	6843      	ldr	r3, [r0, #4]
 800e7a2:	6804      	ldr	r4, [r0, #0]
 800e7a4:	fa03 f506 	lsl.w	r5, r3, r6
 800e7a8:	432c      	orrs	r4, r5
 800e7aa:	40d3      	lsrs	r3, r2
 800e7ac:	6004      	str	r4, [r0, #0]
 800e7ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800e7b2:	4288      	cmp	r0, r1
 800e7b4:	d3f4      	bcc.n	800e7a0 <L_shift+0xc>
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}

0800e7b8 <__match>:
 800e7b8:	b530      	push	{r4, r5, lr}
 800e7ba:	6803      	ldr	r3, [r0, #0]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7c2:	b914      	cbnz	r4, 800e7ca <__match+0x12>
 800e7c4:	6003      	str	r3, [r0, #0]
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	bd30      	pop	{r4, r5, pc}
 800e7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e7d2:	2d19      	cmp	r5, #25
 800e7d4:	bf98      	it	ls
 800e7d6:	3220      	addls	r2, #32
 800e7d8:	42a2      	cmp	r2, r4
 800e7da:	d0f0      	beq.n	800e7be <__match+0x6>
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e7f3      	b.n	800e7c8 <__match+0x10>

0800e7e0 <__hexnan>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	680b      	ldr	r3, [r1, #0]
 800e7e6:	6801      	ldr	r1, [r0, #0]
 800e7e8:	115e      	asrs	r6, r3, #5
 800e7ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e7ee:	f013 031f 	ands.w	r3, r3, #31
 800e7f2:	b087      	sub	sp, #28
 800e7f4:	bf18      	it	ne
 800e7f6:	3604      	addne	r6, #4
 800e7f8:	2500      	movs	r5, #0
 800e7fa:	1f37      	subs	r7, r6, #4
 800e7fc:	4682      	mov	sl, r0
 800e7fe:	4690      	mov	r8, r2
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	f846 5c04 	str.w	r5, [r6, #-4]
 800e806:	46b9      	mov	r9, r7
 800e808:	463c      	mov	r4, r7
 800e80a:	9502      	str	r5, [sp, #8]
 800e80c:	46ab      	mov	fp, r5
 800e80e:	784a      	ldrb	r2, [r1, #1]
 800e810:	1c4b      	adds	r3, r1, #1
 800e812:	9303      	str	r3, [sp, #12]
 800e814:	b342      	cbz	r2, 800e868 <__hexnan+0x88>
 800e816:	4610      	mov	r0, r2
 800e818:	9105      	str	r1, [sp, #20]
 800e81a:	9204      	str	r2, [sp, #16]
 800e81c:	f7ff fd76 	bl	800e30c <__hexdig_fun>
 800e820:	2800      	cmp	r0, #0
 800e822:	d14f      	bne.n	800e8c4 <__hexnan+0xe4>
 800e824:	9a04      	ldr	r2, [sp, #16]
 800e826:	9905      	ldr	r1, [sp, #20]
 800e828:	2a20      	cmp	r2, #32
 800e82a:	d818      	bhi.n	800e85e <__hexnan+0x7e>
 800e82c:	9b02      	ldr	r3, [sp, #8]
 800e82e:	459b      	cmp	fp, r3
 800e830:	dd13      	ble.n	800e85a <__hexnan+0x7a>
 800e832:	454c      	cmp	r4, r9
 800e834:	d206      	bcs.n	800e844 <__hexnan+0x64>
 800e836:	2d07      	cmp	r5, #7
 800e838:	dc04      	bgt.n	800e844 <__hexnan+0x64>
 800e83a:	462a      	mov	r2, r5
 800e83c:	4649      	mov	r1, r9
 800e83e:	4620      	mov	r0, r4
 800e840:	f7ff ffa8 	bl	800e794 <L_shift>
 800e844:	4544      	cmp	r4, r8
 800e846:	d950      	bls.n	800e8ea <__hexnan+0x10a>
 800e848:	2300      	movs	r3, #0
 800e84a:	f1a4 0904 	sub.w	r9, r4, #4
 800e84e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e852:	f8cd b008 	str.w	fp, [sp, #8]
 800e856:	464c      	mov	r4, r9
 800e858:	461d      	mov	r5, r3
 800e85a:	9903      	ldr	r1, [sp, #12]
 800e85c:	e7d7      	b.n	800e80e <__hexnan+0x2e>
 800e85e:	2a29      	cmp	r2, #41	; 0x29
 800e860:	d155      	bne.n	800e90e <__hexnan+0x12e>
 800e862:	3102      	adds	r1, #2
 800e864:	f8ca 1000 	str.w	r1, [sl]
 800e868:	f1bb 0f00 	cmp.w	fp, #0
 800e86c:	d04f      	beq.n	800e90e <__hexnan+0x12e>
 800e86e:	454c      	cmp	r4, r9
 800e870:	d206      	bcs.n	800e880 <__hexnan+0xa0>
 800e872:	2d07      	cmp	r5, #7
 800e874:	dc04      	bgt.n	800e880 <__hexnan+0xa0>
 800e876:	462a      	mov	r2, r5
 800e878:	4649      	mov	r1, r9
 800e87a:	4620      	mov	r0, r4
 800e87c:	f7ff ff8a 	bl	800e794 <L_shift>
 800e880:	4544      	cmp	r4, r8
 800e882:	d934      	bls.n	800e8ee <__hexnan+0x10e>
 800e884:	f1a8 0204 	sub.w	r2, r8, #4
 800e888:	4623      	mov	r3, r4
 800e88a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e88e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e892:	429f      	cmp	r7, r3
 800e894:	d2f9      	bcs.n	800e88a <__hexnan+0xaa>
 800e896:	1b3b      	subs	r3, r7, r4
 800e898:	f023 0303 	bic.w	r3, r3, #3
 800e89c:	3304      	adds	r3, #4
 800e89e:	3e03      	subs	r6, #3
 800e8a0:	3401      	adds	r4, #1
 800e8a2:	42a6      	cmp	r6, r4
 800e8a4:	bf38      	it	cc
 800e8a6:	2304      	movcc	r3, #4
 800e8a8:	4443      	add	r3, r8
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f843 2b04 	str.w	r2, [r3], #4
 800e8b0:	429f      	cmp	r7, r3
 800e8b2:	d2fb      	bcs.n	800e8ac <__hexnan+0xcc>
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	b91b      	cbnz	r3, 800e8c0 <__hexnan+0xe0>
 800e8b8:	4547      	cmp	r7, r8
 800e8ba:	d126      	bne.n	800e90a <__hexnan+0x12a>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	603b      	str	r3, [r7, #0]
 800e8c0:	2005      	movs	r0, #5
 800e8c2:	e025      	b.n	800e910 <__hexnan+0x130>
 800e8c4:	3501      	adds	r5, #1
 800e8c6:	2d08      	cmp	r5, #8
 800e8c8:	f10b 0b01 	add.w	fp, fp, #1
 800e8cc:	dd06      	ble.n	800e8dc <__hexnan+0xfc>
 800e8ce:	4544      	cmp	r4, r8
 800e8d0:	d9c3      	bls.n	800e85a <__hexnan+0x7a>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8d8:	2501      	movs	r5, #1
 800e8da:	3c04      	subs	r4, #4
 800e8dc:	6822      	ldr	r2, [r4, #0]
 800e8de:	f000 000f 	and.w	r0, r0, #15
 800e8e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e8e6:	6020      	str	r0, [r4, #0]
 800e8e8:	e7b7      	b.n	800e85a <__hexnan+0x7a>
 800e8ea:	2508      	movs	r5, #8
 800e8ec:	e7b5      	b.n	800e85a <__hexnan+0x7a>
 800e8ee:	9b01      	ldr	r3, [sp, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d0df      	beq.n	800e8b4 <__hexnan+0xd4>
 800e8f4:	f1c3 0320 	rsb	r3, r3, #32
 800e8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8fc:	40da      	lsrs	r2, r3
 800e8fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e902:	4013      	ands	r3, r2
 800e904:	f846 3c04 	str.w	r3, [r6, #-4]
 800e908:	e7d4      	b.n	800e8b4 <__hexnan+0xd4>
 800e90a:	3f04      	subs	r7, #4
 800e90c:	e7d2      	b.n	800e8b4 <__hexnan+0xd4>
 800e90e:	2004      	movs	r0, #4
 800e910:	b007      	add	sp, #28
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e916 <__ascii_mbtowc>:
 800e916:	b082      	sub	sp, #8
 800e918:	b901      	cbnz	r1, 800e91c <__ascii_mbtowc+0x6>
 800e91a:	a901      	add	r1, sp, #4
 800e91c:	b142      	cbz	r2, 800e930 <__ascii_mbtowc+0x1a>
 800e91e:	b14b      	cbz	r3, 800e934 <__ascii_mbtowc+0x1e>
 800e920:	7813      	ldrb	r3, [r2, #0]
 800e922:	600b      	str	r3, [r1, #0]
 800e924:	7812      	ldrb	r2, [r2, #0]
 800e926:	1e10      	subs	r0, r2, #0
 800e928:	bf18      	it	ne
 800e92a:	2001      	movne	r0, #1
 800e92c:	b002      	add	sp, #8
 800e92e:	4770      	bx	lr
 800e930:	4610      	mov	r0, r2
 800e932:	e7fb      	b.n	800e92c <__ascii_mbtowc+0x16>
 800e934:	f06f 0001 	mvn.w	r0, #1
 800e938:	e7f8      	b.n	800e92c <__ascii_mbtowc+0x16>

0800e93a <_realloc_r>:
 800e93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93e:	4680      	mov	r8, r0
 800e940:	4614      	mov	r4, r2
 800e942:	460e      	mov	r6, r1
 800e944:	b921      	cbnz	r1, 800e950 <_realloc_r+0x16>
 800e946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e94a:	4611      	mov	r1, r2
 800e94c:	f7fd be3e 	b.w	800c5cc <_malloc_r>
 800e950:	b92a      	cbnz	r2, 800e95e <_realloc_r+0x24>
 800e952:	f7fd fdc7 	bl	800c4e4 <_free_r>
 800e956:	4625      	mov	r5, r4
 800e958:	4628      	mov	r0, r5
 800e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95e:	f000 f842 	bl	800e9e6 <_malloc_usable_size_r>
 800e962:	4284      	cmp	r4, r0
 800e964:	4607      	mov	r7, r0
 800e966:	d802      	bhi.n	800e96e <_realloc_r+0x34>
 800e968:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e96c:	d812      	bhi.n	800e994 <_realloc_r+0x5a>
 800e96e:	4621      	mov	r1, r4
 800e970:	4640      	mov	r0, r8
 800e972:	f7fd fe2b 	bl	800c5cc <_malloc_r>
 800e976:	4605      	mov	r5, r0
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0ed      	beq.n	800e958 <_realloc_r+0x1e>
 800e97c:	42bc      	cmp	r4, r7
 800e97e:	4622      	mov	r2, r4
 800e980:	4631      	mov	r1, r6
 800e982:	bf28      	it	cs
 800e984:	463a      	movcs	r2, r7
 800e986:	f7fc ff1c 	bl	800b7c2 <memcpy>
 800e98a:	4631      	mov	r1, r6
 800e98c:	4640      	mov	r0, r8
 800e98e:	f7fd fda9 	bl	800c4e4 <_free_r>
 800e992:	e7e1      	b.n	800e958 <_realloc_r+0x1e>
 800e994:	4635      	mov	r5, r6
 800e996:	e7df      	b.n	800e958 <_realloc_r+0x1e>

0800e998 <__ascii_wctomb>:
 800e998:	b149      	cbz	r1, 800e9ae <__ascii_wctomb+0x16>
 800e99a:	2aff      	cmp	r2, #255	; 0xff
 800e99c:	bf85      	ittet	hi
 800e99e:	238a      	movhi	r3, #138	; 0x8a
 800e9a0:	6003      	strhi	r3, [r0, #0]
 800e9a2:	700a      	strbls	r2, [r1, #0]
 800e9a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9a8:	bf98      	it	ls
 800e9aa:	2001      	movls	r0, #1
 800e9ac:	4770      	bx	lr
 800e9ae:	4608      	mov	r0, r1
 800e9b0:	4770      	bx	lr
	...

0800e9b4 <fiprintf>:
 800e9b4:	b40e      	push	{r1, r2, r3}
 800e9b6:	b503      	push	{r0, r1, lr}
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	ab03      	add	r3, sp, #12
 800e9bc:	4805      	ldr	r0, [pc, #20]	; (800e9d4 <fiprintf+0x20>)
 800e9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9c2:	6800      	ldr	r0, [r0, #0]
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	f000 f83f 	bl	800ea48 <_vfiprintf_r>
 800e9ca:	b002      	add	sp, #8
 800e9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9d0:	b003      	add	sp, #12
 800e9d2:	4770      	bx	lr
 800e9d4:	20000068 	.word	0x20000068

0800e9d8 <abort>:
 800e9d8:	b508      	push	{r3, lr}
 800e9da:	2006      	movs	r0, #6
 800e9dc:	f000 fa0c 	bl	800edf8 <raise>
 800e9e0:	2001      	movs	r0, #1
 800e9e2:	f7f3 fa31 	bl	8001e48 <_exit>

0800e9e6 <_malloc_usable_size_r>:
 800e9e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9ea:	1f18      	subs	r0, r3, #4
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	bfbc      	itt	lt
 800e9f0:	580b      	ldrlt	r3, [r1, r0]
 800e9f2:	18c0      	addlt	r0, r0, r3
 800e9f4:	4770      	bx	lr

0800e9f6 <__sfputc_r>:
 800e9f6:	6893      	ldr	r3, [r2, #8]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	b410      	push	{r4}
 800e9fe:	6093      	str	r3, [r2, #8]
 800ea00:	da08      	bge.n	800ea14 <__sfputc_r+0x1e>
 800ea02:	6994      	ldr	r4, [r2, #24]
 800ea04:	42a3      	cmp	r3, r4
 800ea06:	db01      	blt.n	800ea0c <__sfputc_r+0x16>
 800ea08:	290a      	cmp	r1, #10
 800ea0a:	d103      	bne.n	800ea14 <__sfputc_r+0x1e>
 800ea0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea10:	f000 b934 	b.w	800ec7c <__swbuf_r>
 800ea14:	6813      	ldr	r3, [r2, #0]
 800ea16:	1c58      	adds	r0, r3, #1
 800ea18:	6010      	str	r0, [r2, #0]
 800ea1a:	7019      	strb	r1, [r3, #0]
 800ea1c:	4608      	mov	r0, r1
 800ea1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <__sfputs_r>:
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	4606      	mov	r6, r0
 800ea28:	460f      	mov	r7, r1
 800ea2a:	4614      	mov	r4, r2
 800ea2c:	18d5      	adds	r5, r2, r3
 800ea2e:	42ac      	cmp	r4, r5
 800ea30:	d101      	bne.n	800ea36 <__sfputs_r+0x12>
 800ea32:	2000      	movs	r0, #0
 800ea34:	e007      	b.n	800ea46 <__sfputs_r+0x22>
 800ea36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea3a:	463a      	mov	r2, r7
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff ffda 	bl	800e9f6 <__sfputc_r>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d1f3      	bne.n	800ea2e <__sfputs_r+0xa>
 800ea46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea48 <_vfiprintf_r>:
 800ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4c:	460d      	mov	r5, r1
 800ea4e:	b09d      	sub	sp, #116	; 0x74
 800ea50:	4614      	mov	r4, r2
 800ea52:	4698      	mov	r8, r3
 800ea54:	4606      	mov	r6, r0
 800ea56:	b118      	cbz	r0, 800ea60 <_vfiprintf_r+0x18>
 800ea58:	6a03      	ldr	r3, [r0, #32]
 800ea5a:	b90b      	cbnz	r3, 800ea60 <_vfiprintf_r+0x18>
 800ea5c:	f7fc fd30 	bl	800b4c0 <__sinit>
 800ea60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea62:	07d9      	lsls	r1, r3, #31
 800ea64:	d405      	bmi.n	800ea72 <_vfiprintf_r+0x2a>
 800ea66:	89ab      	ldrh	r3, [r5, #12]
 800ea68:	059a      	lsls	r2, r3, #22
 800ea6a:	d402      	bmi.n	800ea72 <_vfiprintf_r+0x2a>
 800ea6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea6e:	f7fc fea6 	bl	800b7be <__retarget_lock_acquire_recursive>
 800ea72:	89ab      	ldrh	r3, [r5, #12]
 800ea74:	071b      	lsls	r3, r3, #28
 800ea76:	d501      	bpl.n	800ea7c <_vfiprintf_r+0x34>
 800ea78:	692b      	ldr	r3, [r5, #16]
 800ea7a:	b99b      	cbnz	r3, 800eaa4 <_vfiprintf_r+0x5c>
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f000 f93a 	bl	800ecf8 <__swsetup_r>
 800ea84:	b170      	cbz	r0, 800eaa4 <_vfiprintf_r+0x5c>
 800ea86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea88:	07dc      	lsls	r4, r3, #31
 800ea8a:	d504      	bpl.n	800ea96 <_vfiprintf_r+0x4e>
 800ea8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea90:	b01d      	add	sp, #116	; 0x74
 800ea92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea96:	89ab      	ldrh	r3, [r5, #12]
 800ea98:	0598      	lsls	r0, r3, #22
 800ea9a:	d4f7      	bmi.n	800ea8c <_vfiprintf_r+0x44>
 800ea9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea9e:	f7fc fe8f 	bl	800b7c0 <__retarget_lock_release_recursive>
 800eaa2:	e7f3      	b.n	800ea8c <_vfiprintf_r+0x44>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa8:	2320      	movs	r3, #32
 800eaaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaae:	f8cd 800c 	str.w	r8, [sp, #12]
 800eab2:	2330      	movs	r3, #48	; 0x30
 800eab4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ec68 <_vfiprintf_r+0x220>
 800eab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eabc:	f04f 0901 	mov.w	r9, #1
 800eac0:	4623      	mov	r3, r4
 800eac2:	469a      	mov	sl, r3
 800eac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac8:	b10a      	cbz	r2, 800eace <_vfiprintf_r+0x86>
 800eaca:	2a25      	cmp	r2, #37	; 0x25
 800eacc:	d1f9      	bne.n	800eac2 <_vfiprintf_r+0x7a>
 800eace:	ebba 0b04 	subs.w	fp, sl, r4
 800ead2:	d00b      	beq.n	800eaec <_vfiprintf_r+0xa4>
 800ead4:	465b      	mov	r3, fp
 800ead6:	4622      	mov	r2, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	4630      	mov	r0, r6
 800eadc:	f7ff ffa2 	bl	800ea24 <__sfputs_r>
 800eae0:	3001      	adds	r0, #1
 800eae2:	f000 80a9 	beq.w	800ec38 <_vfiprintf_r+0x1f0>
 800eae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eae8:	445a      	add	r2, fp
 800eaea:	9209      	str	r2, [sp, #36]	; 0x24
 800eaec:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 80a1 	beq.w	800ec38 <_vfiprintf_r+0x1f0>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f04f 32ff 	mov.w	r2, #4294967295
 800eafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb00:	f10a 0a01 	add.w	sl, sl, #1
 800eb04:	9304      	str	r3, [sp, #16]
 800eb06:	9307      	str	r3, [sp, #28]
 800eb08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb0c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb0e:	4654      	mov	r4, sl
 800eb10:	2205      	movs	r2, #5
 800eb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb16:	4854      	ldr	r0, [pc, #336]	; (800ec68 <_vfiprintf_r+0x220>)
 800eb18:	f7f1 fb5a 	bl	80001d0 <memchr>
 800eb1c:	9a04      	ldr	r2, [sp, #16]
 800eb1e:	b9d8      	cbnz	r0, 800eb58 <_vfiprintf_r+0x110>
 800eb20:	06d1      	lsls	r1, r2, #27
 800eb22:	bf44      	itt	mi
 800eb24:	2320      	movmi	r3, #32
 800eb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb2a:	0713      	lsls	r3, r2, #28
 800eb2c:	bf44      	itt	mi
 800eb2e:	232b      	movmi	r3, #43	; 0x2b
 800eb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb34:	f89a 3000 	ldrb.w	r3, [sl]
 800eb38:	2b2a      	cmp	r3, #42	; 0x2a
 800eb3a:	d015      	beq.n	800eb68 <_vfiprintf_r+0x120>
 800eb3c:	9a07      	ldr	r2, [sp, #28]
 800eb3e:	4654      	mov	r4, sl
 800eb40:	2000      	movs	r0, #0
 800eb42:	f04f 0c0a 	mov.w	ip, #10
 800eb46:	4621      	mov	r1, r4
 800eb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb4c:	3b30      	subs	r3, #48	; 0x30
 800eb4e:	2b09      	cmp	r3, #9
 800eb50:	d94d      	bls.n	800ebee <_vfiprintf_r+0x1a6>
 800eb52:	b1b0      	cbz	r0, 800eb82 <_vfiprintf_r+0x13a>
 800eb54:	9207      	str	r2, [sp, #28]
 800eb56:	e014      	b.n	800eb82 <_vfiprintf_r+0x13a>
 800eb58:	eba0 0308 	sub.w	r3, r0, r8
 800eb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800eb60:	4313      	orrs	r3, r2
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	46a2      	mov	sl, r4
 800eb66:	e7d2      	b.n	800eb0e <_vfiprintf_r+0xc6>
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	1d19      	adds	r1, r3, #4
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	9103      	str	r1, [sp, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	bfbb      	ittet	lt
 800eb74:	425b      	neglt	r3, r3
 800eb76:	f042 0202 	orrlt.w	r2, r2, #2
 800eb7a:	9307      	strge	r3, [sp, #28]
 800eb7c:	9307      	strlt	r3, [sp, #28]
 800eb7e:	bfb8      	it	lt
 800eb80:	9204      	strlt	r2, [sp, #16]
 800eb82:	7823      	ldrb	r3, [r4, #0]
 800eb84:	2b2e      	cmp	r3, #46	; 0x2e
 800eb86:	d10c      	bne.n	800eba2 <_vfiprintf_r+0x15a>
 800eb88:	7863      	ldrb	r3, [r4, #1]
 800eb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb8c:	d134      	bne.n	800ebf8 <_vfiprintf_r+0x1b0>
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	1d1a      	adds	r2, r3, #4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9203      	str	r2, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfb8      	it	lt
 800eb9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb9e:	3402      	adds	r4, #2
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ec78 <_vfiprintf_r+0x230>
 800eba6:	7821      	ldrb	r1, [r4, #0]
 800eba8:	2203      	movs	r2, #3
 800ebaa:	4650      	mov	r0, sl
 800ebac:	f7f1 fb10 	bl	80001d0 <memchr>
 800ebb0:	b138      	cbz	r0, 800ebc2 <_vfiprintf_r+0x17a>
 800ebb2:	9b04      	ldr	r3, [sp, #16]
 800ebb4:	eba0 000a 	sub.w	r0, r0, sl
 800ebb8:	2240      	movs	r2, #64	; 0x40
 800ebba:	4082      	lsls	r2, r0
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	3401      	adds	r4, #1
 800ebc0:	9304      	str	r3, [sp, #16]
 800ebc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc6:	4829      	ldr	r0, [pc, #164]	; (800ec6c <_vfiprintf_r+0x224>)
 800ebc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebcc:	2206      	movs	r2, #6
 800ebce:	f7f1 faff 	bl	80001d0 <memchr>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d03f      	beq.n	800ec56 <_vfiprintf_r+0x20e>
 800ebd6:	4b26      	ldr	r3, [pc, #152]	; (800ec70 <_vfiprintf_r+0x228>)
 800ebd8:	bb1b      	cbnz	r3, 800ec22 <_vfiprintf_r+0x1da>
 800ebda:	9b03      	ldr	r3, [sp, #12]
 800ebdc:	3307      	adds	r3, #7
 800ebde:	f023 0307 	bic.w	r3, r3, #7
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	9303      	str	r3, [sp, #12]
 800ebe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe8:	443b      	add	r3, r7
 800ebea:	9309      	str	r3, [sp, #36]	; 0x24
 800ebec:	e768      	b.n	800eac0 <_vfiprintf_r+0x78>
 800ebee:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	2001      	movs	r0, #1
 800ebf6:	e7a6      	b.n	800eb46 <_vfiprintf_r+0xfe>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	3401      	adds	r4, #1
 800ebfc:	9305      	str	r3, [sp, #20]
 800ebfe:	4619      	mov	r1, r3
 800ec00:	f04f 0c0a 	mov.w	ip, #10
 800ec04:	4620      	mov	r0, r4
 800ec06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec0a:	3a30      	subs	r2, #48	; 0x30
 800ec0c:	2a09      	cmp	r2, #9
 800ec0e:	d903      	bls.n	800ec18 <_vfiprintf_r+0x1d0>
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d0c6      	beq.n	800eba2 <_vfiprintf_r+0x15a>
 800ec14:	9105      	str	r1, [sp, #20]
 800ec16:	e7c4      	b.n	800eba2 <_vfiprintf_r+0x15a>
 800ec18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e7f0      	b.n	800ec04 <_vfiprintf_r+0x1bc>
 800ec22:	ab03      	add	r3, sp, #12
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	462a      	mov	r2, r5
 800ec28:	4b12      	ldr	r3, [pc, #72]	; (800ec74 <_vfiprintf_r+0x22c>)
 800ec2a:	a904      	add	r1, sp, #16
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f7fb fde5 	bl	800a7fc <_printf_float>
 800ec32:	4607      	mov	r7, r0
 800ec34:	1c78      	adds	r0, r7, #1
 800ec36:	d1d6      	bne.n	800ebe6 <_vfiprintf_r+0x19e>
 800ec38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec3a:	07d9      	lsls	r1, r3, #31
 800ec3c:	d405      	bmi.n	800ec4a <_vfiprintf_r+0x202>
 800ec3e:	89ab      	ldrh	r3, [r5, #12]
 800ec40:	059a      	lsls	r2, r3, #22
 800ec42:	d402      	bmi.n	800ec4a <_vfiprintf_r+0x202>
 800ec44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec46:	f7fc fdbb 	bl	800b7c0 <__retarget_lock_release_recursive>
 800ec4a:	89ab      	ldrh	r3, [r5, #12]
 800ec4c:	065b      	lsls	r3, r3, #25
 800ec4e:	f53f af1d 	bmi.w	800ea8c <_vfiprintf_r+0x44>
 800ec52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec54:	e71c      	b.n	800ea90 <_vfiprintf_r+0x48>
 800ec56:	ab03      	add	r3, sp, #12
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	462a      	mov	r2, r5
 800ec5c:	4b05      	ldr	r3, [pc, #20]	; (800ec74 <_vfiprintf_r+0x22c>)
 800ec5e:	a904      	add	r1, sp, #16
 800ec60:	4630      	mov	r0, r6
 800ec62:	f7fc f86f 	bl	800ad44 <_printf_i>
 800ec66:	e7e4      	b.n	800ec32 <_vfiprintf_r+0x1ea>
 800ec68:	0800f471 	.word	0x0800f471
 800ec6c:	0800f47b 	.word	0x0800f47b
 800ec70:	0800a7fd 	.word	0x0800a7fd
 800ec74:	0800ea25 	.word	0x0800ea25
 800ec78:	0800f477 	.word	0x0800f477

0800ec7c <__swbuf_r>:
 800ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7e:	460e      	mov	r6, r1
 800ec80:	4614      	mov	r4, r2
 800ec82:	4605      	mov	r5, r0
 800ec84:	b118      	cbz	r0, 800ec8e <__swbuf_r+0x12>
 800ec86:	6a03      	ldr	r3, [r0, #32]
 800ec88:	b90b      	cbnz	r3, 800ec8e <__swbuf_r+0x12>
 800ec8a:	f7fc fc19 	bl	800b4c0 <__sinit>
 800ec8e:	69a3      	ldr	r3, [r4, #24]
 800ec90:	60a3      	str	r3, [r4, #8]
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	071a      	lsls	r2, r3, #28
 800ec96:	d525      	bpl.n	800ece4 <__swbuf_r+0x68>
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	b31b      	cbz	r3, 800ece4 <__swbuf_r+0x68>
 800ec9c:	6823      	ldr	r3, [r4, #0]
 800ec9e:	6922      	ldr	r2, [r4, #16]
 800eca0:	1a98      	subs	r0, r3, r2
 800eca2:	6963      	ldr	r3, [r4, #20]
 800eca4:	b2f6      	uxtb	r6, r6
 800eca6:	4283      	cmp	r3, r0
 800eca8:	4637      	mov	r7, r6
 800ecaa:	dc04      	bgt.n	800ecb6 <__swbuf_r+0x3a>
 800ecac:	4621      	mov	r1, r4
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f7ff fa3a 	bl	800e128 <_fflush_r>
 800ecb4:	b9e0      	cbnz	r0, 800ecf0 <__swbuf_r+0x74>
 800ecb6:	68a3      	ldr	r3, [r4, #8]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	60a3      	str	r3, [r4, #8]
 800ecbc:	6823      	ldr	r3, [r4, #0]
 800ecbe:	1c5a      	adds	r2, r3, #1
 800ecc0:	6022      	str	r2, [r4, #0]
 800ecc2:	701e      	strb	r6, [r3, #0]
 800ecc4:	6962      	ldr	r2, [r4, #20]
 800ecc6:	1c43      	adds	r3, r0, #1
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d004      	beq.n	800ecd6 <__swbuf_r+0x5a>
 800eccc:	89a3      	ldrh	r3, [r4, #12]
 800ecce:	07db      	lsls	r3, r3, #31
 800ecd0:	d506      	bpl.n	800ece0 <__swbuf_r+0x64>
 800ecd2:	2e0a      	cmp	r6, #10
 800ecd4:	d104      	bne.n	800ece0 <__swbuf_r+0x64>
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	4628      	mov	r0, r5
 800ecda:	f7ff fa25 	bl	800e128 <_fflush_r>
 800ecde:	b938      	cbnz	r0, 800ecf0 <__swbuf_r+0x74>
 800ece0:	4638      	mov	r0, r7
 800ece2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece4:	4621      	mov	r1, r4
 800ece6:	4628      	mov	r0, r5
 800ece8:	f000 f806 	bl	800ecf8 <__swsetup_r>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d0d5      	beq.n	800ec9c <__swbuf_r+0x20>
 800ecf0:	f04f 37ff 	mov.w	r7, #4294967295
 800ecf4:	e7f4      	b.n	800ece0 <__swbuf_r+0x64>
	...

0800ecf8 <__swsetup_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	4b2a      	ldr	r3, [pc, #168]	; (800eda4 <__swsetup_r+0xac>)
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	6818      	ldr	r0, [r3, #0]
 800ed00:	460c      	mov	r4, r1
 800ed02:	b118      	cbz	r0, 800ed0c <__swsetup_r+0x14>
 800ed04:	6a03      	ldr	r3, [r0, #32]
 800ed06:	b90b      	cbnz	r3, 800ed0c <__swsetup_r+0x14>
 800ed08:	f7fc fbda 	bl	800b4c0 <__sinit>
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed12:	0718      	lsls	r0, r3, #28
 800ed14:	d422      	bmi.n	800ed5c <__swsetup_r+0x64>
 800ed16:	06d9      	lsls	r1, r3, #27
 800ed18:	d407      	bmi.n	800ed2a <__swsetup_r+0x32>
 800ed1a:	2309      	movs	r3, #9
 800ed1c:	602b      	str	r3, [r5, #0]
 800ed1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed22:	81a3      	strh	r3, [r4, #12]
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	e034      	b.n	800ed94 <__swsetup_r+0x9c>
 800ed2a:	0758      	lsls	r0, r3, #29
 800ed2c:	d512      	bpl.n	800ed54 <__swsetup_r+0x5c>
 800ed2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed30:	b141      	cbz	r1, 800ed44 <__swsetup_r+0x4c>
 800ed32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed36:	4299      	cmp	r1, r3
 800ed38:	d002      	beq.n	800ed40 <__swsetup_r+0x48>
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f7fd fbd2 	bl	800c4e4 <_free_r>
 800ed40:	2300      	movs	r3, #0
 800ed42:	6363      	str	r3, [r4, #52]	; 0x34
 800ed44:	89a3      	ldrh	r3, [r4, #12]
 800ed46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed4a:	81a3      	strh	r3, [r4, #12]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	6063      	str	r3, [r4, #4]
 800ed50:	6923      	ldr	r3, [r4, #16]
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	89a3      	ldrh	r3, [r4, #12]
 800ed56:	f043 0308 	orr.w	r3, r3, #8
 800ed5a:	81a3      	strh	r3, [r4, #12]
 800ed5c:	6923      	ldr	r3, [r4, #16]
 800ed5e:	b94b      	cbnz	r3, 800ed74 <__swsetup_r+0x7c>
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed6a:	d003      	beq.n	800ed74 <__swsetup_r+0x7c>
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f000 f884 	bl	800ee7c <__smakebuf_r>
 800ed74:	89a0      	ldrh	r0, [r4, #12]
 800ed76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed7a:	f010 0301 	ands.w	r3, r0, #1
 800ed7e:	d00a      	beq.n	800ed96 <__swsetup_r+0x9e>
 800ed80:	2300      	movs	r3, #0
 800ed82:	60a3      	str	r3, [r4, #8]
 800ed84:	6963      	ldr	r3, [r4, #20]
 800ed86:	425b      	negs	r3, r3
 800ed88:	61a3      	str	r3, [r4, #24]
 800ed8a:	6923      	ldr	r3, [r4, #16]
 800ed8c:	b943      	cbnz	r3, 800eda0 <__swsetup_r+0xa8>
 800ed8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed92:	d1c4      	bne.n	800ed1e <__swsetup_r+0x26>
 800ed94:	bd38      	pop	{r3, r4, r5, pc}
 800ed96:	0781      	lsls	r1, r0, #30
 800ed98:	bf58      	it	pl
 800ed9a:	6963      	ldrpl	r3, [r4, #20]
 800ed9c:	60a3      	str	r3, [r4, #8]
 800ed9e:	e7f4      	b.n	800ed8a <__swsetup_r+0x92>
 800eda0:	2000      	movs	r0, #0
 800eda2:	e7f7      	b.n	800ed94 <__swsetup_r+0x9c>
 800eda4:	20000068 	.word	0x20000068

0800eda8 <_raise_r>:
 800eda8:	291f      	cmp	r1, #31
 800edaa:	b538      	push	{r3, r4, r5, lr}
 800edac:	4604      	mov	r4, r0
 800edae:	460d      	mov	r5, r1
 800edb0:	d904      	bls.n	800edbc <_raise_r+0x14>
 800edb2:	2316      	movs	r3, #22
 800edb4:	6003      	str	r3, [r0, #0]
 800edb6:	f04f 30ff 	mov.w	r0, #4294967295
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800edbe:	b112      	cbz	r2, 800edc6 <_raise_r+0x1e>
 800edc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edc4:	b94b      	cbnz	r3, 800edda <_raise_r+0x32>
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 f830 	bl	800ee2c <_getpid_r>
 800edcc:	462a      	mov	r2, r5
 800edce:	4601      	mov	r1, r0
 800edd0:	4620      	mov	r0, r4
 800edd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edd6:	f000 b817 	b.w	800ee08 <_kill_r>
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d00a      	beq.n	800edf4 <_raise_r+0x4c>
 800edde:	1c59      	adds	r1, r3, #1
 800ede0:	d103      	bne.n	800edea <_raise_r+0x42>
 800ede2:	2316      	movs	r3, #22
 800ede4:	6003      	str	r3, [r0, #0]
 800ede6:	2001      	movs	r0, #1
 800ede8:	e7e7      	b.n	800edba <_raise_r+0x12>
 800edea:	2400      	movs	r4, #0
 800edec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800edf0:	4628      	mov	r0, r5
 800edf2:	4798      	blx	r3
 800edf4:	2000      	movs	r0, #0
 800edf6:	e7e0      	b.n	800edba <_raise_r+0x12>

0800edf8 <raise>:
 800edf8:	4b02      	ldr	r3, [pc, #8]	; (800ee04 <raise+0xc>)
 800edfa:	4601      	mov	r1, r0
 800edfc:	6818      	ldr	r0, [r3, #0]
 800edfe:	f7ff bfd3 	b.w	800eda8 <_raise_r>
 800ee02:	bf00      	nop
 800ee04:	20000068 	.word	0x20000068

0800ee08 <_kill_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4d07      	ldr	r5, [pc, #28]	; (800ee28 <_kill_r+0x20>)
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	4604      	mov	r4, r0
 800ee10:	4608      	mov	r0, r1
 800ee12:	4611      	mov	r1, r2
 800ee14:	602b      	str	r3, [r5, #0]
 800ee16:	f7f3 f807 	bl	8001e28 <_kill>
 800ee1a:	1c43      	adds	r3, r0, #1
 800ee1c:	d102      	bne.n	800ee24 <_kill_r+0x1c>
 800ee1e:	682b      	ldr	r3, [r5, #0]
 800ee20:	b103      	cbz	r3, 800ee24 <_kill_r+0x1c>
 800ee22:	6023      	str	r3, [r4, #0]
 800ee24:	bd38      	pop	{r3, r4, r5, pc}
 800ee26:	bf00      	nop
 800ee28:	20001fac 	.word	0x20001fac

0800ee2c <_getpid_r>:
 800ee2c:	f7f2 bff4 	b.w	8001e18 <_getpid>

0800ee30 <__swhatbuf_r>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	460c      	mov	r4, r1
 800ee34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee38:	2900      	cmp	r1, #0
 800ee3a:	b096      	sub	sp, #88	; 0x58
 800ee3c:	4615      	mov	r5, r2
 800ee3e:	461e      	mov	r6, r3
 800ee40:	da0d      	bge.n	800ee5e <__swhatbuf_r+0x2e>
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ee48:	f04f 0100 	mov.w	r1, #0
 800ee4c:	bf0c      	ite	eq
 800ee4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ee52:	2340      	movne	r3, #64	; 0x40
 800ee54:	2000      	movs	r0, #0
 800ee56:	6031      	str	r1, [r6, #0]
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	b016      	add	sp, #88	; 0x58
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
 800ee5e:	466a      	mov	r2, sp
 800ee60:	f000 f848 	bl	800eef4 <_fstat_r>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	dbec      	blt.n	800ee42 <__swhatbuf_r+0x12>
 800ee68:	9901      	ldr	r1, [sp, #4]
 800ee6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ee6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ee72:	4259      	negs	r1, r3
 800ee74:	4159      	adcs	r1, r3
 800ee76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee7a:	e7eb      	b.n	800ee54 <__swhatbuf_r+0x24>

0800ee7c <__smakebuf_r>:
 800ee7c:	898b      	ldrh	r3, [r1, #12]
 800ee7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee80:	079d      	lsls	r5, r3, #30
 800ee82:	4606      	mov	r6, r0
 800ee84:	460c      	mov	r4, r1
 800ee86:	d507      	bpl.n	800ee98 <__smakebuf_r+0x1c>
 800ee88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	6123      	str	r3, [r4, #16]
 800ee90:	2301      	movs	r3, #1
 800ee92:	6163      	str	r3, [r4, #20]
 800ee94:	b002      	add	sp, #8
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	ab01      	add	r3, sp, #4
 800ee9a:	466a      	mov	r2, sp
 800ee9c:	f7ff ffc8 	bl	800ee30 <__swhatbuf_r>
 800eea0:	9900      	ldr	r1, [sp, #0]
 800eea2:	4605      	mov	r5, r0
 800eea4:	4630      	mov	r0, r6
 800eea6:	f7fd fb91 	bl	800c5cc <_malloc_r>
 800eeaa:	b948      	cbnz	r0, 800eec0 <__smakebuf_r+0x44>
 800eeac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeb0:	059a      	lsls	r2, r3, #22
 800eeb2:	d4ef      	bmi.n	800ee94 <__smakebuf_r+0x18>
 800eeb4:	f023 0303 	bic.w	r3, r3, #3
 800eeb8:	f043 0302 	orr.w	r3, r3, #2
 800eebc:	81a3      	strh	r3, [r4, #12]
 800eebe:	e7e3      	b.n	800ee88 <__smakebuf_r+0xc>
 800eec0:	89a3      	ldrh	r3, [r4, #12]
 800eec2:	6020      	str	r0, [r4, #0]
 800eec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eec8:	81a3      	strh	r3, [r4, #12]
 800eeca:	9b00      	ldr	r3, [sp, #0]
 800eecc:	6163      	str	r3, [r4, #20]
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	6120      	str	r0, [r4, #16]
 800eed2:	b15b      	cbz	r3, 800eeec <__smakebuf_r+0x70>
 800eed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eed8:	4630      	mov	r0, r6
 800eeda:	f000 f81d 	bl	800ef18 <_isatty_r>
 800eede:	b128      	cbz	r0, 800eeec <__smakebuf_r+0x70>
 800eee0:	89a3      	ldrh	r3, [r4, #12]
 800eee2:	f023 0303 	bic.w	r3, r3, #3
 800eee6:	f043 0301 	orr.w	r3, r3, #1
 800eeea:	81a3      	strh	r3, [r4, #12]
 800eeec:	89a3      	ldrh	r3, [r4, #12]
 800eeee:	431d      	orrs	r5, r3
 800eef0:	81a5      	strh	r5, [r4, #12]
 800eef2:	e7cf      	b.n	800ee94 <__smakebuf_r+0x18>

0800eef4 <_fstat_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	4d07      	ldr	r5, [pc, #28]	; (800ef14 <_fstat_r+0x20>)
 800eef8:	2300      	movs	r3, #0
 800eefa:	4604      	mov	r4, r0
 800eefc:	4608      	mov	r0, r1
 800eefe:	4611      	mov	r1, r2
 800ef00:	602b      	str	r3, [r5, #0]
 800ef02:	f7f2 fff0 	bl	8001ee6 <_fstat>
 800ef06:	1c43      	adds	r3, r0, #1
 800ef08:	d102      	bne.n	800ef10 <_fstat_r+0x1c>
 800ef0a:	682b      	ldr	r3, [r5, #0]
 800ef0c:	b103      	cbz	r3, 800ef10 <_fstat_r+0x1c>
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	bd38      	pop	{r3, r4, r5, pc}
 800ef12:	bf00      	nop
 800ef14:	20001fac 	.word	0x20001fac

0800ef18 <_isatty_r>:
 800ef18:	b538      	push	{r3, r4, r5, lr}
 800ef1a:	4d06      	ldr	r5, [pc, #24]	; (800ef34 <_isatty_r+0x1c>)
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4608      	mov	r0, r1
 800ef22:	602b      	str	r3, [r5, #0]
 800ef24:	f7f2 ffef 	bl	8001f06 <_isatty>
 800ef28:	1c43      	adds	r3, r0, #1
 800ef2a:	d102      	bne.n	800ef32 <_isatty_r+0x1a>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	b103      	cbz	r3, 800ef32 <_isatty_r+0x1a>
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	bd38      	pop	{r3, r4, r5, pc}
 800ef34:	20001fac 	.word	0x20001fac

0800ef38 <_init>:
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3a:	bf00      	nop
 800ef3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3e:	bc08      	pop	{r3}
 800ef40:	469e      	mov	lr, r3
 800ef42:	4770      	bx	lr

0800ef44 <_fini>:
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef46:	bf00      	nop
 800ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4a:	bc08      	pop	{r3}
 800ef4c:	469e      	mov	lr, r3
 800ef4e:	4770      	bx	lr
