
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001086c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08010a00  08010a00  00020a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111a8  080111a8  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080111a8  080111a8  000211a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111b0  080111b0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111b0  080111b0  000211b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111b4  080111b4  000211b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080111b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f00  200001dc  08011394  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020dc  08011394  000320dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000268e4  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d5b  00000000  00000000  00056b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  0005b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000191a  00000000  00000000  0005d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af6d  00000000  00000000  0005f1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025f02  00000000  00000000  0008a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116658  00000000  00000000  000b0051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fa4  00000000  00000000  001c66ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001d0650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080109e4 	.word	0x080109e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080109e4 	.word	0x080109e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_mpu>:
vector_t gravitational_acceleration[3] = {0, 0, 0};

float unit_conversion = NO_CONVERSION;


HAL_StatusTypeDef init_mpu(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	hi2c_mpu = i2c_handler;
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <init_mpu+0x110>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
	uart_debug_handler = debug_handler;
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <init_mpu+0x114>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
    // Write power management configuration
	uint8_t data = MPU_PWR_MGMT_1_DEFAULT_CONFIG;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <init_mpu+0x110>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	f003 fb6d 	bl	8004700 <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <init_mpu+0x52>
		DEBUG_PRINT("Failed to initialize power management configuration\r\n");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <init_mpu+0x114>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	2235      	movs	r2, #53	; 0x35
 8001038:	4933      	ldr	r1, [pc, #204]	; (8001108 <init_mpu+0x118>)
 800103a:	f006 fe8d 	bl	8007d58 <HAL_UART_Transmit>
		return ret;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e05a      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write filter configuration
	data = MPU_FILTER_DELAY_5_MS;
 8001042:	2303      	movs	r3, #3
 8001044:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_FILTER_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <init_mpu+0x110>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221a      	movs	r2, #26
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f003 fb4f 	bl	8004700 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <init_mpu+0x8e>
		DEBUG_PRINT("Failed to initialize DLPF configuration\r\n");
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <init_mpu+0x114>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2229      	movs	r2, #41	; 0x29
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <init_mpu+0x11c>)
 8001076:	f006 fe6f 	bl	8007d58 <HAL_UART_Transmit>
		return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	e03c      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write gyroscope configuration
	data = MPU_GYRO_RANGE_500_DPS;
 800107e:	2308      	movs	r3, #8
 8001080:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_mpu+0x110>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	; 0xd0
 800109a:	f003 fb31 	bl	8004700 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <init_mpu+0xca>
		DEBUG_PRINT("Failed to initialize gyroscope configuration\r\n");
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <init_mpu+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	222e      	movs	r2, #46	; 0x2e
 80010b0:	4917      	ldr	r1, [pc, #92]	; (8001110 <init_mpu+0x120>)
 80010b2:	f006 fe51 	bl	8007d58 <HAL_UART_Transmit>
		return ret;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e01e      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write accelerometer configuration
	data = MPU_ACCEL_RANGE_8G;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <init_mpu+0x110>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	221c      	movs	r2, #28
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f003 fb13 	bl	8004700 <HAL_I2C_Mem_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <init_mpu+0x106>
		DEBUG_PRINT("Failed to initialize accelerometer configuration\r\n");
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <init_mpu+0x114>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <init_mpu+0x124>)
 80010ee:	f006 fe33 	bl	8007d58 <HAL_UART_Transmit>
		return ret;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	e000      	b.n	80010f8 <init_mpu+0x108>
	}
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f8 	.word	0x200001f8
 8001104:	200001fc 	.word	0x200001fc
 8001108:	08010a00 	.word	0x08010a00
 800110c:	08010a38 	.word	0x08010a38
 8001110:	08010a64 	.word	0x08010a64
 8001114:	08010a94 	.word	0x08010a94

08001118 <calibrate_mpu>:

HAL_StatusTypeDef calibrate_mpu() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	vector_t target_vector[3] = {1, 0, 0};
 800111e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
	vector_t measured_accel[3];
	vector_t preliminary_bias[3];
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001134:	e038      	b.n	80011a8 <calibrate_mpu+0x90>
		ret = get_accel(measured_accel);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f88e 	bl	800125c <get_accel>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret) {
 8001146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <calibrate_mpu+0x4a>
			DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <calibrate_mpu+0x120>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2223      	movs	r2, #35	; 0x23
 8001156:	4939      	ldr	r1, [pc, #228]	; (800123c <calibrate_mpu+0x124>)
 8001158:	f006 fdfe 	bl	8007d58 <HAL_UART_Transmit>
			return ret;
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	e066      	b.n	8001230 <calibrate_mpu+0x118>
		}
		for (int j = 0; j < 3; j++) {
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
 8001166:	e019      	b.n	800119c <calibrate_mpu+0x84>
			preliminary_bias[j] += measured_accel[j];
 8001168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	3330      	adds	r3, #48	; 0x30
 800116e:	443b      	add	r3, r7
 8001170:	3b30      	subs	r3, #48	; 0x30
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	3330      	adds	r3, #48	; 0x30
 800117c:	443b      	add	r3, r7
 800117e:	3b24      	subs	r3, #36	; 0x24
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	3330      	adds	r3, #48	; 0x30
 800118e:	443b      	add	r3, r7
 8001190:	3b30      	subs	r3, #48	; 0x30
 8001192:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++) {
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	3301      	adds	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	2b02      	cmp	r3, #2
 80011a0:	dde2      	ble.n	8001168 <calibrate_mpu+0x50>
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	3301      	adds	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	f240 52db 	movw	r2, #1499	; 0x5db
 80011ae:	4293      	cmp	r3, r2
 80011b0:	ddc1      	ble.n	8001136 <calibrate_mpu+0x1e>
		}
	}
	accel_bias_x = target_vector[0] - (preliminary_bias[0] / CALIBRATION_ITERATIONS);
 80011b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b6:	edd7 6a00 	vldr	s13, [r7]
 80011ba:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001240 <calibrate_mpu+0x128>
 80011be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <calibrate_mpu+0x12c>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_y = target_vector[1] - (preliminary_bias[1] / CALIBRATION_ITERATIONS);
 80011cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80011d0:	edd7 6a01 	vldr	s13, [r7, #4]
 80011d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001240 <calibrate_mpu+0x128>
 80011d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <calibrate_mpu+0x130>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_z = target_vector[2] - (preliminary_bias[2] / CALIBRATION_ITERATIONS);
 80011e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80011ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80011ee:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001240 <calibrate_mpu+0x128>
 80011f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <calibrate_mpu+0x134>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	ret = get_accel(gravitational_acceleration);
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <calibrate_mpu+0x138>)
 8001202:	f000 f82b 	bl	800125c <get_accel>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret) {
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <calibrate_mpu+0x110>
		DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <calibrate_mpu+0x120>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	2223      	movs	r2, #35	; 0x23
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <calibrate_mpu+0x124>)
 800121e:	f006 fd9b 	bl	8007d58 <HAL_UART_Transmit>
		return ret;
 8001222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001226:	e003      	b.n	8001230 <calibrate_mpu+0x118>
	}
	unit_conversion = GS_TO_MPSPS;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <calibrate_mpu+0x13c>)
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <calibrate_mpu+0x140>)
 800122c:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001fc 	.word	0x200001fc
 800123c:	08010ac8 	.word	0x08010ac8
 8001240:	44bb8000 	.word	0x44bb8000
 8001244:	20000200 	.word	0x20000200
 8001248:	20000204 	.word	0x20000204
 800124c:	20000208 	.word	0x20000208
 8001250:	2000020c 	.word	0x2000020c
 8001254:	20000000 	.word	0x20000000
 8001258:	411cf5c3 	.word	0x411cf5c3

0800125c <get_accel>:

HAL_StatusTypeDef get_accel(vector_t accel[3]) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af04      	add	r7, sp, #16
 8001262:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t accel_buf[6];
	ret = HAL_I2C_Mem_Read(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACEL_DATA, I2C_MEMADD_SIZE_8BIT, accel_buf, 6, I2C_DELAY);
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <get_accel+0x194>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2306      	movs	r3, #6
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	223b      	movs	r2, #59	; 0x3b
 800127a:	21d0      	movs	r1, #208	; 0xd0
 800127c:	f003 fb54 	bl	8004928 <HAL_I2C_Mem_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <get_accel+0x40>
		DEBUG_PRINT("Failed to fetch accelerometer value\r\n");
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <get_accel+0x198>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	2225      	movs	r2, #37	; 0x25
 8001292:	4959      	ldr	r1, [pc, #356]	; (80013f8 <get_accel+0x19c>)
 8001294:	f006 fd60 	bl	8007d58 <HAL_UART_Transmit>
		return ret;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	e0a5      	b.n	80013e8 <get_accel+0x18c>
	}
	int16_t accel_raw_x = (accel_buf[0] << 8) | accel_buf[1];
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	82bb      	strh	r3, [r7, #20]
	int16_t accel_raw_y = (accel_buf[2] << 8) | accel_buf[3];
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	827b      	strh	r3, [r7, #18]
	int16_t accel_raw_z = (accel_buf[4] << 8) | accel_buf[5];
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	823b      	strh	r3, [r7, #16]

	accel[0] = (vector_t)accel_raw_x / MPU_ACCEL_RANGE_8G_LSB + accel_bias_x - gravitational_acceleration[0];
 80012c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80013fc <get_accel+0x1a0>
 80012d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <get_accel+0x1a4>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <get_accel+0x1a8>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)accel_raw_y / MPU_ACCEL_RANGE_8G_LSB + accel_bias_y - gravitational_acceleration[1];
 80012f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80013fc <get_accel+0x1a0>
 8001304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <get_accel+0x1ac>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <get_accel+0x1a8>)
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)accel_raw_z / MPU_ACCEL_RANGE_8G_LSB + accel_bias_z - gravitational_acceleration[2];
 8001324:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	eddf 6a32 	vldr	s13, [pc, #200]	; 80013fc <get_accel+0x1a0>
 8001334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <get_accel+0x1b0>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <get_accel+0x1a8>)
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3308      	adds	r3, #8
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	edc3 7a00 	vstr	s15, [r3]

	accel[0] = (vector_t)(int)(accel[0] * 10) / 10 * unit_conversion;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800136e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <get_accel+0x1b4>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)(int)(accel[1] * 10) / 10 * unit_conversion;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800139e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <get_accel+0x1b4>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b0:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)(int)(accel[2] * 10) / 10 * unit_conversion;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3308      	adds	r3, #8
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <get_accel+0x1b4>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3308      	adds	r3, #8
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	edc3 7a00 	vstr	s15, [r3]
	return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	200001fc 	.word	0x200001fc
 80013f8:	08010aec 	.word	0x08010aec
 80013fc:	45800000 	.word	0x45800000
 8001400:	20000200 	.word	0x20000200
 8001404:	2000020c 	.word	0x2000020c
 8001408:	20000204 	.word	0x20000204
 800140c:	20000208 	.word	0x20000208
 8001410:	20000000 	.word	0x20000000

08001414 <init_spatial>:

// Internal globals
vector_t accleration_sample_array[ACCEL_SAMPLES][3];
uint8_t accel_sample_index = 0;

HAL_StatusTypeDef init_spatial(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = init_mpu(i2c_handler, debug_handler);
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fde5 	bl	8000ff0 <init_mpu>
 8001426:	4603      	mov	r3, r0
 8001428:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <init_spatial+0x20>
//		DEBUG_PRINT("Failed hardware initialization");
		return ret;
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	e01c      	b.n	800146e <init_spatial+0x5a>
	}
	ret = calibrate_mpu();
 8001434:	f7ff fe70 	bl	8001118 <calibrate_mpu>
 8001438:	4603      	mov	r3, r0
 800143a:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <init_spatial+0x32>
		return ret;
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	e013      	b.n	800146e <init_spatial+0x5a>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e00c      	b.n	8001466 <init_spatial+0x52>
		get_accel(accleration_sample_array[i]);
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <init_spatial+0x64>)
 8001458:	4413      	add	r3, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fefe 	bl	800125c <get_accel>
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b09      	cmp	r3, #9
 800146a:	ddef      	ble.n	800144c <init_spatial+0x38>
	}
	return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000244 	.word	0x20000244

0800147c <update_acceleration_averages>:
	current_position[2] = 0;

	current_distance = 0;
}

HAL_StatusTypeDef update_acceleration_averages() {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e026      	b.n	80014d6 <update_acceleration_averages+0x5a>
		HAL_StatusTypeDef ret;
		ret = get_accel(accleration_sample_array[accel_sample_index]);
 8001488:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <update_acceleration_averages+0x124>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <update_acceleration_averages+0x128>)
 8001498:	4413      	add	r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fede 	bl	800125c <get_accel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
		if (ret)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <update_acceleration_averages+0x32>
			return ret;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	e073      	b.n	8001596 <update_acceleration_averages+0x11a>
		accel_sample_index = (accel_sample_index + 1) % ACCEL_SAMPLES;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <update_acceleration_averages+0x124>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <update_acceleration_averages+0x12c>)
 80014b6:	fb83 1302 	smull	r1, r3, r3, r2
 80014ba:	1099      	asrs	r1, r3, #2
 80014bc:	17d3      	asrs	r3, r2, #31
 80014be:	1ac9      	subs	r1, r1, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1ad1      	subs	r1, r2, r3
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <update_acceleration_averages+0x124>)
 80014ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	ddd5      	ble.n	8001488 <update_acceleration_averages+0xc>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e037      	b.n	8001552 <update_acceleration_averages+0xd6>
		current_acceleration[0] += accleration_sample_array[i][0];
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <update_acceleration_averages+0x130>)
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	492e      	ldr	r1, [pc, #184]	; (80015a4 <update_acceleration_averages+0x128>)
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <update_acceleration_averages+0x130>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
		current_acceleration[1] += accleration_sample_array[i][1];
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <update_acceleration_averages+0x130>)
 8001506:	ed93 7a01 	vldr	s14, [r3, #4]
 800150a:	4926      	ldr	r1, [pc, #152]	; (80015a4 <update_acceleration_averages+0x128>)
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3304      	adds	r3, #4
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <update_acceleration_averages+0x130>)
 8001524:	edc3 7a01 	vstr	s15, [r3, #4]
		current_acceleration[2] += accleration_sample_array[i][2];
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <update_acceleration_averages+0x130>)
 800152a:	ed93 7a02 	vldr	s14, [r3, #8]
 800152e:	491d      	ldr	r1, [pc, #116]	; (80015a4 <update_acceleration_averages+0x128>)
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3308      	adds	r3, #8
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <update_acceleration_averages+0x130>)
 8001548:	edc3 7a02 	vstr	s15, [r3, #8]
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddc4      	ble.n	80014e2 <update_acceleration_averages+0x66>
	}
	current_acceleration[0] /= ACCEL_SAMPLES;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <update_acceleration_averages+0x130>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <update_acceleration_averages+0x130>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
	current_acceleration[1] /= ACCEL_SAMPLES;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <update_acceleration_averages+0x130>)
 800156e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001572:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <update_acceleration_averages+0x130>)
 800157c:	edc3 7a01 	vstr	s15, [r3, #4]
	current_acceleration[2] /= ACCEL_SAMPLES;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <update_acceleration_averages+0x130>)
 8001582:	ed93 7a02 	vldr	s14, [r3, #8]
 8001586:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <update_acceleration_averages+0x130>)
 8001590:	edc3 7a02 	vstr	s15, [r3, #8]
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002bc 	.word	0x200002bc
 80015a4:	20000244 	.word	0x20000244
 80015a8:	66666667 	.word	0x66666667
 80015ac:	20000218 	.word	0x20000218

080015b0 <update_spatial>:

HAL_StatusTypeDef update_spatial(float delta_t) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef ret;
	vector_euler_step(current_acceleration, current_velocity, delta_t);
 80015ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80015be:	4915      	ldr	r1, [pc, #84]	; (8001614 <update_spatial+0x64>)
 80015c0:	4815      	ldr	r0, [pc, #84]	; (8001618 <update_spatial+0x68>)
 80015c2:	f000 f860 	bl	8001686 <vector_euler_step>
	vector_euler_step(current_velocity, current_position, delta_t);
 80015c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <update_spatial+0x6c>)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <update_spatial+0x64>)
 80015ce:	f000 f85a 	bl	8001686 <vector_euler_step>
	current_speed = magnitude(current_velocity);
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <update_spatial+0x64>)
 80015d4:	f000 f828 	bl	8001628 <magnitude>
 80015d8:	eef0 7a40 	vmov.f32	s15, s0
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <update_spatial+0x70>)
 80015de:	edc3 7a00 	vstr	s15, [r3]
	euler_step(current_speed, &current_distance, delta_t);
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <update_spatial+0x70>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	edd7 0a01 	vldr	s1, [r7, #4]
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <update_spatial+0x74>)
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f000 f888 	bl	8001706 <euler_step>
	ret = update_acceleration_averages();
 80015f6:	f7ff ff41 	bl	800147c <update_acceleration_averages>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <update_spatial+0x58>
//		DEBUG_PRINT("Failed to update acceleration");
		return ret;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	e000      	b.n	800160a <update_spatial+0x5a>
	}
	return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000224 	.word	0x20000224
 8001618:	20000218 	.word	0x20000218
 800161c:	20000234 	.word	0x20000234
 8001620:	20000230 	.word	0x20000230
 8001624:	20000240 	.word	0x20000240

08001628 <magnitude>:
#include "vectors.h"
#include <math.h>
#include <stdlib.h>

// Get the magnitude of a given vector
magnitude_t magnitude(vector_t* vec) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    return root_func((vec[x] * vec[x]) + (vec[y] * vec[y]) + (vec[z] * vec[z]));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	edd3 6a00 	vldr	s13, [r3]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3308      	adds	r3, #8
 800165c:	edd3 6a00 	vldr	s13, [r3]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3308      	adds	r3, #8
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f00f f994 	bl	80109a0 <sqrtf>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
}
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <vector_euler_step>:

// Eulers method for integration in respect to time in 3 dimensions.
// Example: pass acceleration vector to source and velocity to target to integrate acceleration
void vector_euler_step(vector_t* source_vec, vector_t* target_vec, float delta_t) {
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	ed87 0a01 	vstr	s0, [r7, #4]
    target_vec[x] += source_vec[x] * delta_t;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    target_vec[y] += source_vec[y] * delta_t;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3304      	adds	r3, #4
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	edd3 6a00 	vldr	s13, [r3]
 80016c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3304      	adds	r3, #4
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	edc3 7a00 	vstr	s15, [r3]
    target_vec[z] += source_vec[z] * delta_t;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3308      	adds	r3, #8
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3308      	adds	r3, #8
 80016e2:	edd3 6a00 	vldr	s13, [r3]
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3308      	adds	r3, #8
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	edc3 7a00 	vstr	s15, [r3]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <euler_step>:

// Eulers method for integration in respect to time for scalars.
// This is used for calculating arc length.
void euler_step(magnitude_t source, magnitude_t* destination, float delta_t) {
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001710:	60b8      	str	r0, [r7, #8]
 8001712:	edc7 0a01 	vstr	s1, [r7, #4]
    *destination += source * delta_t;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	edc3 7a00 	vstr	s15, [r3]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09a      	sub	sp, #104	; 0x68
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f001 fa1d 	bl	8002b84 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f89b 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f000 fae7 	bl	8001d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f000 fac7 	bl	8001ce4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001756:	f000 fa95 	bl	8001c84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800175a:	f000 f9eb 	bl	8001b34 <MX_TIM3_Init>
  MX_ADC1_Init();
 800175e:	f000 f8e3 	bl	8001928 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001762:	f000 f957 	bl	8001a14 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001766:	f000 f995 	bl	8001a94 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800176a:	f000 fa5b 	bl	8001c24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start the longboard by initializing the motor throttle to 0
  char StartMsg[100];
  sprintf(StartMsg, "\r\nStarting the LongBoard!\r\n");
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4931      	ldr	r1, [pc, #196]	; (8001838 <main+0xf8>)
 8001772:	4618      	mov	r0, r3
 8001774:	f00b fd38 	bl	800d1e8 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd78 	bl	8000270 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	1d39      	adds	r1, r7, #4
 8001786:	2332      	movs	r3, #50	; 0x32
 8001788:	482c      	ldr	r0, [pc, #176]	; (800183c <main+0xfc>)
 800178a:	f006 fae5 	bl	8007d58 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800178e:	210c      	movs	r1, #12
 8001790:	482b      	ldr	r0, [pc, #172]	; (8001840 <main+0x100>)
 8001792:	f005 f9af 	bl	8006af4 <HAL_TIM_PWM_Start>
  TIM3->CCR4 =  Min_PWM;
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <main+0x104>)
 8001798:	2250      	movs	r2, #80	; 0x50
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(5000);
 800179c:	f241 3088 	movw	r0, #5000	; 0x1388
 80017a0:	f001 fa30 	bl	8002c04 <HAL_Delay>

  sprintf(StartMsg, "\r\nInitialized Throttle!\r\n");
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4928      	ldr	r1, [pc, #160]	; (8001848 <main+0x108>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f00b fd1d 	bl	800d1e8 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd5d 	bl	8000270 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	1d39      	adds	r1, r7, #4
 80017bc:	2332      	movs	r3, #50	; 0x32
 80017be:	481f      	ldr	r0, [pc, #124]	; (800183c <main+0xfc>)
 80017c0:	f006 faca 	bl	8007d58 <HAL_UART_Transmit>
  throttle = Min_Throttle;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <main+0x10c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

  Lora_Init();
 80017ca:	f000 fb0f 	bl	8001dec <Lora_Init>
  sprintf(StartMsg, "\r\nInitialized LORA!\r\n");
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	491f      	ldr	r1, [pc, #124]	; (8001850 <main+0x110>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00b fd08 	bl	800d1e8 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fd48 	bl	8000270 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	1d39      	adds	r1, r7, #4
 80017e6:	2332      	movs	r3, #50	; 0x32
 80017e8:	4814      	ldr	r0, [pc, #80]	; (800183c <main+0xfc>)
 80017ea:	f006 fab5 	bl	8007d58 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017ee:	f007 fdbd 	bl	800936c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017f2:	4a18      	ldr	r2, [pc, #96]	; (8001854 <main+0x114>)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <main+0x118>)
 80017f8:	f007 fe02 	bl	8009400 <osThreadNew>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <main+0x11c>)
 8001800:	6013      	str	r3, [r2, #0]

  /* creation of readThrottle */
  readThrottleHandle = osThreadNew(ReadThrottle, NULL, &readThrottle_attributes);
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <main+0x120>)
 8001804:	2100      	movs	r1, #0
 8001806:	4817      	ldr	r0, [pc, #92]	; (8001864 <main+0x124>)
 8001808:	f007 fdfa 	bl	8009400 <osThreadNew>
 800180c:	4603      	mov	r3, r0
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <main+0x128>)
 8001810:	6013      	str	r3, [r2, #0]

  /* creation of sendSpeed */
  sendSpeedHandle = osThreadNew(SendSpeed, NULL, &sendSpeed_attributes);
 8001812:	4a16      	ldr	r2, [pc, #88]	; (800186c <main+0x12c>)
 8001814:	2100      	movs	r1, #0
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <main+0x130>)
 8001818:	f007 fdf2 	bl	8009400 <osThreadNew>
 800181c:	4603      	mov	r3, r0
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <main+0x134>)
 8001820:	6013      	str	r3, [r2, #0]

  /* creation of accelUpdateTask */
  accelUpdateTaskHandle = osThreadNew(startAccelUpdateTask, NULL, &accelUpdateTask_attributes);
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <main+0x138>)
 8001824:	2100      	movs	r1, #0
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <main+0x13c>)
 8001828:	f007 fdea 	bl	8009400 <osThreadNew>
 800182c:	4603      	mov	r3, r0
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <main+0x140>)
 8001830:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001832:	f007 fdbf 	bl	80093b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001836:	e7fe      	b.n	8001836 <main+0xf6>
 8001838:	08010b4c 	.word	0x08010b4c
 800183c:	20000498 	.word	0x20000498
 8001840:	200003c4 	.word	0x200003c4
 8001844:	40000400 	.word	0x40000400
 8001848:	08010b68 	.word	0x08010b68
 800184c:	20000598 	.word	0x20000598
 8001850:	08010b84 	.word	0x08010b84
 8001854:	08010ca8 	.word	0x08010ca8
 8001858:	080022a1 	.word	0x080022a1
 800185c:	20000568 	.word	0x20000568
 8001860:	08010ccc 	.word	0x08010ccc
 8001864:	080022b1 	.word	0x080022b1
 8001868:	2000056c 	.word	0x2000056c
 800186c:	08010cf0 	.word	0x08010cf0
 8001870:	08002301 	.word	0x08002301
 8001874:	20000570 	.word	0x20000570
 8001878:	08010d14 	.word	0x08010d14
 800187c:	08002341 	.word	0x08002341
 8001880:	20000574 	.word	0x20000574

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b096      	sub	sp, #88	; 0x58
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	2244      	movs	r2, #68	; 0x44
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00b fd0b 	bl	800d2ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018aa:	f003 fcb5 	bl	8005218 <HAL_PWREx_ControlVoltageScaling>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018b4:	f000 fd70 	bl	8002398 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c2:	2310      	movs	r3, #16
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ca:	2302      	movs	r3, #2
 80018cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018d2:	230a      	movs	r3, #10
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018d6:	2307      	movs	r3, #7
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018da:	2302      	movs	r3, #2
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018de:	2302      	movs	r3, #2
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fcec 	bl	80052c4 <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018f2:	f000 fd51 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f6:	230f      	movs	r3, #15
 80018f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fa:	2303      	movs	r3, #3
 80018fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800190a:	463b      	mov	r3, r7
 800190c:	2104      	movs	r1, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f004 f8b4 	bl	8005a7c <HAL_RCC_ClockConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800191a:	f000 fd3d 	bl	8002398 <Error_Handler>
  }
}
 800191e:	bf00      	nop
 8001920:	3758      	adds	r7, #88	; 0x58
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <MX_ADC1_Init+0xe0>)
 800194c:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <MX_ADC1_Init+0xe4>)
 800194e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MX_ADC1_Init+0xe0>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <MX_ADC1_Init+0xe0>)
 800196a:	2204      	movs	r2, #4
 800196c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001970:	2200      	movs	r2, #0
 8001972:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001976:	2200      	movs	r2, #0
 8001978:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_ADC1_Init+0xe0>)
 800197c:	2201      	movs	r2, #1
 800197e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_ADC1_Init+0xe0>)
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001990:	2200      	movs	r2, #0
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_ADC1_Init+0xe0>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_ADC1_Init+0xe0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_ADC1_Init+0xe0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019aa:	4817      	ldr	r0, [pc, #92]	; (8001a08 <MX_ADC1_Init+0xe0>)
 80019ac:	f001 fada 	bl	8002f64 <HAL_ADC_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019b6:	f000 fcef 	bl	8002398 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4810      	ldr	r0, [pc, #64]	; (8001a08 <MX_ADC1_Init+0xe0>)
 80019c6:	f002 f835 	bl	8003a34 <HAL_ADCEx_MultiModeConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019d0:	f000 fce2 	bl	8002398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_ADC1_Init+0xe8>)
 80019d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d8:	2306      	movs	r3, #6
 80019da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019e0:	237f      	movs	r3, #127	; 0x7f
 80019e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019e4:	2304      	movs	r3, #4
 80019e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_ADC1_Init+0xe0>)
 80019f2:	f001 fc07 	bl	8003204 <HAL_ADC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80019fc:	f000 fccc 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002c0 	.word	0x200002c0
 8001a0c:	50040000 	.word	0x50040000
 8001a10:	04300002 	.word	0x04300002

08001a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a1a:	4a1c      	ldr	r2, [pc, #112]	; (8001a8c <MX_I2C1_Init+0x78>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a20:	4a1b      	ldr	r2, [pc, #108]	; (8001a90 <MX_I2C1_Init+0x7c>)
 8001a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a50:	f002 fdba 	bl	80045c8 <HAL_I2C_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a5a:	f000 fc9d 	bl	8002398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4809      	ldr	r0, [pc, #36]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a62:	f003 fb33 	bl	80050cc <HAL_I2CEx_ConfigAnalogFilter>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a6c:	f000 fc94 	bl	8002398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a70:	2100      	movs	r1, #0
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_I2C1_Init+0x74>)
 8001a74:	f003 fb75 	bl	8005162 <HAL_I2CEx_ConfigDigitalFilter>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a7e:	f000 fc8b 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000324 	.word	0x20000324
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	10909cec 	.word	0x10909cec

08001a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001abc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001aca:	f04f 32ff 	mov.w	r2, #4294967295
 8001ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001ae0:	f004 fede 	bl	80068a0 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001aea:	f000 fc55 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001afc:	f005 fb16 	bl	800712c <HAL_TIM_ConfigClockSource>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b06:	f000 fc47 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_TIM2_Init+0x9c>)
 8001b18:	f006 f82a 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b22:	f000 fc39 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000378 	.word	0x20000378

08001b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <MX_TIM3_Init+0xec>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b7c:	f240 623f 	movw	r2, #1599	; 0x63f
 8001b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b8e:	4823      	ldr	r0, [pc, #140]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001b90:	f004 fe86 	bl	80068a0 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b9a:	f000 fbfd 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001bac:	f005 fabe 	bl	800712c <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001bb6:	f000 fbef 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bba:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001bbc:	f004 ff38 	bl	8006a30 <HAL_TIM_PWM_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001bc6:	f000 fbe7 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4810      	ldr	r0, [pc, #64]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001bda:	f005 ffc9 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001be4:	f000 fbd8 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be8:	2360      	movs	r3, #96	; 0x60
 8001bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001c00:	f005 f980 	bl	8006f04 <HAL_TIM_PWM_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001c0a:	f000 fbc5 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_TIM3_Init+0xe8>)
 8001c10:	f000 fcf8 	bl	8002604 <HAL_TIM_MspPostInit>

}
 8001c14:	bf00      	nop
 8001c16:	3738      	adds	r7, #56	; 0x38
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200003c4 	.word	0x200003c4
 8001c20:	40000400 	.word	0x40000400

08001c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <MX_USART1_UART_Init+0x5c>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USART1_UART_Init+0x58>)
 8001c68:	f006 f828 	bl	8007cbc <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c72:	f000 fb91 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000410 	.word	0x20000410
 8001c80:	40013800 	.word	0x40013800

08001c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <MX_USART2_UART_Init+0x5c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cc8:	f005 fff8 	bl	8007cbc <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f000 fb61 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000498 	.word	0x20000498
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_DMA_Init+0x38>)
 8001cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <MX_DMA_Init+0x38>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6493      	str	r3, [r2, #72]	; 0x48
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_DMA_Init+0x38>)
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	200f      	movs	r0, #15
 8001d08:	f001 fffc 	bl	8003d04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d0c:	200f      	movs	r0, #15
 8001d0e:	f002 f815 	bl	8003d3c <HAL_NVIC_EnableIRQ>

}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000

08001d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <MX_GPIO_Init+0xc4>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2120      	movs	r1, #32
 8001d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9e:	f002 fbfb 	bl	8004598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001da8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <MX_GPIO_Init+0xc8>)
 8001dba:	f002 fa43 	bl	8004244 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd8:	f002 fa34 	bl	8004244 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	48000800 	.word	0x48000800

08001dec <Lora_Init>:

/* USER CODE BEGIN 4 */

void Lora_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09a      	sub	sp, #104	; 0x68
 8001df0:	af00      	add	r7, sp, #0
	// Set LORA Chip To Transmit/Receive Mode
	char msg[100] = "";
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	2260      	movs	r2, #96	; 0x60
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00b fa55 	bl	800d2ae <memset>
	// Spreading Factor: 7
	// Bandwidth: 500 KHz
	// Coding Rate: 1
	// Programmed Preamble: 10
	// This favors speed over dependabilitySerial2.println("AT+PARAMETER=7,9,1,4");
	sprintf(msg, "AT+PARAMETER=10,8,1,4\r\n");
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4960      	ldr	r1, [pc, #384]	; (8001f88 <Lora_Init+0x19c>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00b f9ed 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fa2d 	bl	8000270 <strlen>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	1d39      	adds	r1, r7, #4
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	485a      	ldr	r0, [pc, #360]	; (8001f8c <Lora_Init+0x1a0>)
 8001e22:	f005 ff99 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e2a:	f000 feeb 	bl	8002c04 <HAL_Delay>

	// Sets LORA Chip address to 24
	sprintf(msg, "AT+ADDRESS=24\r\n");
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4957      	ldr	r1, [pc, #348]	; (8001f90 <Lora_Init+0x1a4>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00b f9d8 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fa18 	bl	8000270 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	1d39      	adds	r1, r7, #4
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	4850      	ldr	r0, [pc, #320]	; (8001f8c <Lora_Init+0x1a0>)
 8001e4c:	f005 ff84 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e54:	f000 fed6 	bl	8002c04 <HAL_Delay>

	// Reads back address to verify setup
	sprintf(msg, "AT+NETWORKID=3\r\n");
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	494e      	ldr	r1, [pc, #312]	; (8001f94 <Lora_Init+0x1a8>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f00b f9c3 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fa03 	bl	8000270 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	1d39      	adds	r1, r7, #4
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	4845      	ldr	r0, [pc, #276]	; (8001f8c <Lora_Init+0x1a0>)
 8001e76:	f005 ff6f 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e7e:	f000 fec1 	bl	8002c04 <HAL_Delay>

	sprintf(msg, "AT+CPIN?\r\n");
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4944      	ldr	r1, [pc, #272]	; (8001f98 <Lora_Init+0x1ac>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00b f9ae 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f9ee 	bl	8000270 <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	1d39      	adds	r1, r7, #4
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	483b      	ldr	r0, [pc, #236]	; (8001f8c <Lora_Init+0x1a0>)
 8001ea0:	f005 ff5a 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ea8:	f000 feac 	bl	8002c04 <HAL_Delay>


	sprintf(msg, "AT+CRFOP?\r\n");
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	493b      	ldr	r1, [pc, #236]	; (8001f9c <Lora_Init+0x1b0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f00b f999 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe f9d9 	bl	8000270 <strlen>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	1d39      	adds	r1, r7, #4
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	4830      	ldr	r0, [pc, #192]	; (8001f8c <Lora_Init+0x1a0>)
 8001eca:	f005 ff45 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed2:	f000 fe97 	bl	8002c04 <HAL_Delay>

	sprintf(msg, "AT+ADDRESS?\r\n");
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4931      	ldr	r1, [pc, #196]	; (8001fa0 <Lora_Init+0x1b4>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00b f984 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe f9c4 	bl	8000270 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	1d39      	adds	r1, r7, #4
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	4826      	ldr	r0, [pc, #152]	; (8001f8c <Lora_Init+0x1a0>)
 8001ef4:	f005 ff30 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001ef8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001efc:	f000 fe82 	bl	8002c04 <HAL_Delay>

	sprintf(msg, "AT+NETWORKID?\r\n");
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4928      	ldr	r1, [pc, #160]	; (8001fa4 <Lora_Init+0x1b8>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00b f96f 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe f9af 	bl	8000270 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	1d39      	adds	r1, r7, #4
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	481b      	ldr	r0, [pc, #108]	; (8001f8c <Lora_Init+0x1a0>)
 8001f1e:	f005 ff1b 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f26:	f000 fe6d 	bl	8002c04 <HAL_Delay>

	sprintf(msg, "AT+BAND?\r\n");
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	491e      	ldr	r1, [pc, #120]	; (8001fa8 <Lora_Init+0x1bc>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f00b f95a 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe f99a 	bl	8000270 <strlen>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	1d39      	adds	r1, r7, #4
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <Lora_Init+0x1a0>)
 8001f48:	f005 ff06 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f50:	f000 fe58 	bl	8002c04 <HAL_Delay>

	sprintf(msg, "AT+MODE=0\r\n");
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4915      	ldr	r1, [pc, #84]	; (8001fac <Lora_Init+0x1c0>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00b f945 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe f985 	bl	8000270 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	1d39      	adds	r1, r7, #4
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <Lora_Init+0x1a0>)
 8001f72:	f005 fef1 	bl	8007d58 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f7a:	f000 fe43 	bl	8002c04 <HAL_Delay>
}
 8001f7e:	bf00      	nop
 8001f80:	3768      	adds	r7, #104	; 0x68
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08010b9c 	.word	0x08010b9c
 8001f8c:	20000410 	.word	0x20000410
 8001f90:	08010bb4 	.word	0x08010bb4
 8001f94:	08010bc4 	.word	0x08010bc4
 8001f98:	08010bd8 	.word	0x08010bd8
 8001f9c:	08010be4 	.word	0x08010be4
 8001fa0:	08010bf0 	.word	0x08010bf0
 8001fa4:	08010c00 	.word	0x08010c00
 8001fa8:	08010c10 	.word	0x08010c10
 8001fac:	08010c1c 	.word	0x08010c1c

08001fb0 <Lora_Send_Data>:

void Lora_Send_Data(char data[])
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b09e      	sub	sp, #120	; 0x78
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	6078      	str	r0, [r7, #4]
	// Combines message to be sent with the data passed in
	char LoraMsg[100];
	sprintf(LoraMsg, "AT+SEND=%i,%i,%s\r\n", ESP_LORA_ADDRESS, strlen(data), data);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe f959 	bl	8000270 <strlen>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f107 000c 	add.w	r0, r7, #12
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	2219      	movs	r2, #25
 8001fcc:	4910      	ldr	r1, [pc, #64]	; (8002010 <Lora_Send_Data+0x60>)
 8001fce:	f00b f90b 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart1, LoraMsg, strlen(LoraMsg), 50);
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f94a 	bl	8000270 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f107 010c 	add.w	r1, r7, #12
 8001fe4:	2332      	movs	r3, #50	; 0x32
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <Lora_Send_Data+0x64>)
 8001fe8:	f005 feb6 	bl	8007d58 <HAL_UART_Transmit>
	osThreadSuspend(readThrottleHandle);
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <Lora_Send_Data+0x68>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f007 fa97 	bl	8009524 <osThreadSuspend>
	osDelay(200);
 8001ff6:	20c8      	movs	r0, #200	; 0xc8
 8001ff8:	f007 fad6 	bl	80095a8 <osDelay>
	osThreadResume(readThrottleHandle);
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <Lora_Send_Data+0x68>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f007 fab0 	bl	8009566 <osThreadResume>



}
 8002006:	bf00      	nop
 8002008:	3770      	adds	r7, #112	; 0x70
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	08010c28 	.word	0x08010c28
 8002014:	20000410 	.word	0x20000410
 8002018:	2000056c 	.word	0x2000056c

0800201c <Parse_Recieve_Data>:

void Parse_Recieve_Data(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
	// Find the position of "T" in the array
		bool good = true;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]

	    char *start = strstr(UART1_rxBuffer, "T");
 8002026:	2154      	movs	r1, #84	; 0x54
 8002028:	4815      	ldr	r0, [pc, #84]	; (8002080 <Parse_Recieve_Data+0x64>)
 800202a:	f00b f948 	bl	800d2be <strchr>
 800202e:	60b8      	str	r0, [r7, #8]

	    // Check if "T" is found
	    if (start != NULL)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d021      	beq.n	800207a <Parse_Recieve_Data+0x5e>
	    {
	    	buffer_print(start, "str from start of parse");
 8002036:	4913      	ldr	r1, [pc, #76]	; (8002084 <Parse_Recieve_Data+0x68>)
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	f000 f851 	bl	80020e0 <buffer_print>
	        // Find the position of the next comma after "S"
	        char *end = strchr(start, ',');
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	68b8      	ldr	r0, [r7, #8]
 8002042:	f00b f93c 	bl	800d2be <strchr>
 8002046:	6078      	str	r0, [r7, #4]

	        // Check if the comma is found
	        if (end != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d015      	beq.n	800207a <Parse_Recieve_Data+0x5e>
//	        	if (error != NULL)
//	        	{
//	        		good = false;
//	        	}

	        	if (good)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d012      	beq.n	800207a <Parse_Recieve_Data+0x5e>
	        	{
	        		// Calculate the length of the substring
	        		size_t length = end - start;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	603b      	str	r3, [r7, #0]
	        		if (length > 4)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d80a      	bhi.n	8002078 <Parse_Recieve_Data+0x5c>
	        			return;

	        		// Copy the substring to the buffer
	        		strncpy(receive_data, start, length);
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	4808      	ldr	r0, [pc, #32]	; (8002088 <Parse_Recieve_Data+0x6c>)
 8002068:	f00b f936 	bl	800d2d8 <strncpy>

	        		// Null-terminate the buffer
	        		receive_data[length] = '\0';
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <Parse_Recieve_Data+0x6c>)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	4413      	add	r3, r2
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e000      	b.n	800207a <Parse_Recieve_Data+0x5e>
	        			return;
 8002078:	bf00      	nop
	        	}

	        }
	    }
}
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000578 	.word	0x20000578
 8002084:	08010c3c 	.word	0x08010c3c
 8002088:	20000594 	.word	0x20000594

0800208c <get_timestep>:

// Get stored time in timer 2 in terms of seconds
double get_timestep() {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	long double cur_time = TIM2->CNT;
 8002092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa33 	bl	8000504 <__aeabi_ui2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	e9c7 2300 	strd	r2, r3, [r7]
	// Reset timer for next call
	TIM2->CNT = 0;
 80020a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
	// Division to make time in terms of seconds
	cur_time /= 8000;
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <get_timestep+0x50>)
 80020b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020b8:	f7fe fbc8 	bl	800084c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9c7 2300 	strd	r2, r3, [r7]
	return (double)cur_time;
 80020c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80020cc:	eeb0 0a47 	vmov.f32	s0, s14
 80020d0:	eef0 0a67 	vmov.f32	s1, s15
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40bf4000 	.word	0x40bf4000

080020e0 <buffer_print>:

void buffer_print(void* buffer, const char* msg) {
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
 80020ec:	466b      	mov	r3, sp
 80020ee:	469a      	mov	sl, r3
	uint8_t modded_buffer[strlen(buffer) + strlen(msg)];
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe f8bd 	bl	8000270 <strlen>
 80020f6:	4606      	mov	r6, r0
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f7fe f8b9 	bl	8000270 <strlen>
 80020fe:	4603      	mov	r3, r0
 8002100:	18f1      	adds	r1, r6, r3
 8002102:	460b      	mov	r3, r1
 8002104:	3b01      	subs	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	2300      	movs	r3, #0
 800210a:	4688      	mov	r8, r1
 800210c:	4699      	mov	r9, r3
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800211e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002122:	2300      	movs	r3, #0
 8002124:	460c      	mov	r4, r1
 8002126:	461d      	mov	r5, r3
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	00eb      	lsls	r3, r5, #3
 8002132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002136:	00e2      	lsls	r2, r4, #3
 8002138:	1dcb      	adds	r3, r1, #7
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	ebad 0d03 	sub.w	sp, sp, r3
 8002142:	466b      	mov	r3, sp
 8002144:	3300      	adds	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
	sprintf(modded_buffer, "%s: %s\r\n", msg, buffer);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	490a      	ldr	r1, [pc, #40]	; (8002178 <buffer_print+0x98>)
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	f00b f84a 	bl	800d1e8 <siprintf>
	HAL_UART_Transmit(&huart2, modded_buffer, strlen(modded_buffer), HAL_MAX_DELAY);
 8002154:	68b8      	ldr	r0, [r7, #8]
 8002156:	f7fe f88b 	bl	8000270 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <buffer_print+0x9c>)
 8002166:	f005 fdf7 	bl	8007d58 <HAL_UART_Transmit>
 800216a:	46d5      	mov	sp, sl
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002176:	bf00      	nop
 8002178:	08010c54 	.word	0x08010c54
 800217c:	20000498 	.word	0x20000498

08002180 <receive_lora_packet>:

HAL_StatusTypeDef receive_lora_packet()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	bool received_new_packet = false;
 8002186:	2300      	movs	r3, #0
 8002188:	71fb      	strb	r3, [r7, #7]
	while (!received_new_packet) {
 800218a:	e008      	b.n	800219e <receive_lora_packet+0x1e>
	    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, 1);
 800218c:	2201      	movs	r2, #1
 800218e:	4915      	ldr	r1, [pc, #84]	; (80021e4 <receive_lora_packet+0x64>)
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <receive_lora_packet+0x68>)
 8002192:	f005 fe6b 	bl	8007e6c <HAL_UART_Receive_DMA>
	    if (UART1_rxBuffer[0] == '+')
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <receive_lora_packet+0x64>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b2b      	cmp	r3, #43	; 0x2b
 800219c:	d006      	beq.n	80021ac <receive_lora_packet+0x2c>
	while (!received_new_packet) {
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <receive_lora_packet+0xc>
 80021aa:	e000      	b.n	80021ae <receive_lora_packet+0x2e>
	    	break;
 80021ac:	bf00      	nop
	}
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, LORA_BUFFER_SIZE - 2);
 80021ae:	2217      	movs	r2, #23
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <receive_lora_packet+0x64>)
 80021b2:	480d      	ldr	r0, [pc, #52]	; (80021e8 <receive_lora_packet+0x68>)
 80021b4:	f005 fe5a 	bl	8007e6c <HAL_UART_Receive_DMA>
//    buffer_print(UART1_rxBuffer, "rcv portion");
    // Packets MUST be from address 25 and have a length of 3 bytes or they will be discarded
    UART1_rxBuffer[LORA_BUFFER_SIZE - 1] = 0;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <receive_lora_packet+0x64>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	761a      	strb	r2, [r3, #24]
	buffer_print(UART1_rxBuffer, "rxBuffer");
 80021be:	490b      	ldr	r1, [pc, #44]	; (80021ec <receive_lora_packet+0x6c>)
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <receive_lora_packet+0x64>)
 80021c2:	f7ff ff8d 	bl	80020e0 <buffer_print>
//    if (strncmp(UART1_rxBuffer, "RCV=25,", 7)) {
//    	return HAL_ERROR;
//    }
    Parse_Recieve_Data();
 80021c6:	f7ff ff29 	bl	800201c <Parse_Recieve_Data>
    buffer_print(receive_data, "data");
 80021ca:	4909      	ldr	r1, [pc, #36]	; (80021f0 <receive_lora_packet+0x70>)
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <receive_lora_packet+0x74>)
 80021ce:	f7ff ff87 	bl	80020e0 <buffer_print>
//    while (UART1_rxBuffer[0] != '\n') {
//    	HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, 1);
////        buffer_print(UART1_rxBuffer, "garbage char");
//    }
    UART1_rxBuffer[0] = 0;
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <receive_lora_packet+0x64>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000578 	.word	0x20000578
 80021e8:	20000410 	.word	0x20000410
 80021ec:	08010c60 	.word	0x08010c60
 80021f0:	08010c6c 	.word	0x08010c6c
 80021f4:	20000594 	.word	0x20000594

080021f8 <Smooth_Speed>:

void Smooth_Speed(int tempThrottle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	if (tempThrottle < Min_Throttle) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da02      	bge.n	800220c <Smooth_Speed+0x14>
		tempThrottle = Min_Throttle;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	e004      	b.n	8002216 <Smooth_Speed+0x1e>
	}
	else if (tempThrottle > Max_Throttle) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b50      	cmp	r3, #80	; 0x50
 8002210:	dd01      	ble.n	8002216 <Smooth_Speed+0x1e>
		tempThrottle = Max_Throttle;
 8002212:	2350      	movs	r3, #80	; 0x50
 8002214:	607b      	str	r3, [r7, #4]
	}
	int diffThrottle = throttle - tempThrottle;
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <Smooth_Speed+0xa0>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]
	if (diffThrottle < 1 && diffThrottle > -1)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	dc02      	bgt.n	800222c <Smooth_Speed+0x34>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	da2f      	bge.n	800228c <Smooth_Speed+0x94>
	{
		return;
	}

	if (diffThrottle > 1)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	dd14      	ble.n	800225c <Smooth_Speed+0x64>
	{
		while (throttle < tempThrottle)
 8002232:	e00d      	b.n	8002250 <Smooth_Speed+0x58>
		{
			throttle += 1;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <Smooth_Speed+0xa0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <Smooth_Speed+0xa0>)
 800223c:	6013      	str	r3, [r2, #0]
			TIM3->CCR4 =  Min_PWM + throttle;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <Smooth_Speed+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <Smooth_Speed+0xa4>)
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800224a:	2064      	movs	r0, #100	; 0x64
 800224c:	f000 fcda 	bl	8002c04 <HAL_Delay>
		while (throttle < tempThrottle)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <Smooth_Speed+0xa0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	dcec      	bgt.n	8002234 <Smooth_Speed+0x3c>
			throttle -= 1;
			TIM3->CCR4 =  Min_PWM + throttle;
			HAL_Delay(100);
		}
	}
	return;
 800225a:	e019      	b.n	8002290 <Smooth_Speed+0x98>
	else if (diffThrottle < 1)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	dc16      	bgt.n	8002290 <Smooth_Speed+0x98>
		while (throttle > tempThrottle)
 8002262:	e00d      	b.n	8002280 <Smooth_Speed+0x88>
			throttle -= 1;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <Smooth_Speed+0xa0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3b01      	subs	r3, #1
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <Smooth_Speed+0xa0>)
 800226c:	6013      	str	r3, [r2, #0]
			TIM3->CCR4 =  Min_PWM + throttle;
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <Smooth_Speed+0xa0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <Smooth_Speed+0xa4>)
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800227a:	2064      	movs	r0, #100	; 0x64
 800227c:	f000 fcc2 	bl	8002c04 <HAL_Delay>
		while (throttle > tempThrottle)
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <Smooth_Speed+0xa0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	dbec      	blt.n	8002264 <Smooth_Speed+0x6c>
	return;
 800228a:	e001      	b.n	8002290 <Smooth_Speed+0x98>
		return;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <Smooth_Speed+0x9a>
	return;
 8002290:	bf00      	nop

}
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000598 	.word	0x20000598
 800229c:	40000400 	.word	0x40000400

080022a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f007 f97d 	bl	80095a8 <osDelay>
 80022ae:	e7fb      	b.n	80022a8 <StartDefaultTask+0x8>

080022b0 <ReadThrottle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadThrottle */
void ReadThrottle(void *argument)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b090      	sub	sp, #64	; 0x40
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  for(;;) {
//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 25);
    
//	Parse_Recieve_Data();
//	HAL_UART_Transmit(&huart2, receive_data, strlen(receive_data), 25);
    receive_lora_packet();
 80022b8:	f7ff ff62 	bl	8002180 <receive_lora_packet>

	if (receive_data[0] == 'T') {
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <ReadThrottle+0x40>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b54      	cmp	r3, #84	; 0x54
 80022c2:	d1f9      	bne.n	80022b8 <ReadThrottle+0x8>
		int tempThrottle = atoi(receive_data + 1);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <ReadThrottle+0x44>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f009 ff10 	bl	800c0ec <atoi>
 80022cc:	63f8      	str	r0, [r7, #60]	; 0x3c
		Smooth_Speed(tempThrottle);
 80022ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80022d0:	f7ff ff92 	bl	80021f8 <Smooth_Speed>
		sprintf(ThrottleMsg, "Set Throttle to: %i", throttle);
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <ReadThrottle+0x48>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <ReadThrottle+0x4c>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f00a ff82 	bl	800d1e8 <siprintf>
		Lora_Send_Data(ThrottleMsg);
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fe61 	bl	8001fb0 <Lora_Send_Data>
    receive_lora_packet();
 80022ee:	e7e3      	b.n	80022b8 <ReadThrottle+0x8>
 80022f0:	20000594 	.word	0x20000594
 80022f4:	20000595 	.word	0x20000595
 80022f8:	20000598 	.word	0x20000598
 80022fc:	08010c74 	.word	0x08010c74

08002300 <SendSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSpeed */
void SendSpeed(void *argument)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendSpeed */
  /* Infinite loop */
  for(;;)
  {
	// Calculate Speed
	char formatted_speed[4] = "";
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
	sprintf(formatted_speed, "%.1f", current_speed);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <SendSpeed+0x38>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f919 	bl	8000548 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	f107 000c 	add.w	r0, r7, #12
 800231e:	4907      	ldr	r1, [pc, #28]	; (800233c <SendSpeed+0x3c>)
 8002320:	f00a ff62 	bl	800d1e8 <siprintf>
	Lora_Send_Data(formatted_speed);
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fe41 	bl	8001fb0 <Lora_Send_Data>
  osDelay(1000);
 800232e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002332:	f007 f939 	bl	80095a8 <osDelay>
  {
 8002336:	e7e7      	b.n	8002308 <SendSpeed+0x8>
 8002338:	20000230 	.word	0x20000230
 800233c:	08010c88 	.word	0x08010c88

08002340 <startAccelUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAccelUpdateTask */
void startAccelUpdateTask(void *argument)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAccelUpdateTask */
  init_spatial(&hi2c1, &huart2);
 8002348:	4908      	ldr	r1, [pc, #32]	; (800236c <startAccelUpdateTask+0x2c>)
 800234a:	4809      	ldr	r0, [pc, #36]	; (8002370 <startAccelUpdateTask+0x30>)
 800234c:	f7ff f862 	bl	8001414 <init_spatial>
  /* Infinite loop */
  for(;;) {
    update_spatial(get_timestep());
 8002350:	f7ff fe9c 	bl	800208c <get_timestep>
 8002354:	ec53 2b10 	vmov	r2, r3, d0
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fc44 	bl	8000be8 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
 8002362:	ee00 3a10 	vmov	s0, r3
 8002366:	f7ff f923 	bl	80015b0 <update_spatial>
 800236a:	e7f1      	b.n	8002350 <startAccelUpdateTask+0x10>
 800236c:	20000498 	.word	0x20000498
 8002370:	20000324 	.word	0x20000324

08002374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002386:	f000 fc1d 	bl	8002bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40001000 	.word	0x40001000

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  if (throttle > 0)
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <Error_Handler+0x24>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	ddfb      	ble.n	80023a0 <Error_Handler+0x8>
	  {
		  throttle--;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <Error_Handler+0x24>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	4a03      	ldr	r2, [pc, #12]	; (80023bc <Error_Handler+0x24>)
 80023b0:	6013      	str	r3, [r2, #0]
		  HAL_Delay(50);
 80023b2:	2032      	movs	r0, #50	; 0x32
 80023b4:	f000 fc26 	bl	8002c04 <HAL_Delay>
	  if (throttle > 0)
 80023b8:	e7f2      	b.n	80023a0 <Error_Handler+0x8>
 80023ba:	bf00      	nop
 80023bc:	20000598 	.word	0x20000598

080023c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_MspInit+0x4c>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_MspInit+0x4c>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6613      	str	r3, [r2, #96]	; 0x60
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_MspInit+0x4c>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_MspInit+0x4c>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_MspInit+0x4c>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	210f      	movs	r1, #15
 80023fa:	f06f 0001 	mvn.w	r0, #1
 80023fe:	f001 fc81 	bl	8003d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0ac      	sub	sp, #176	; 0xb0
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2288      	movs	r2, #136	; 0x88
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f00a ff3c 	bl	800d2ae <memset>
  if(hadc->Instance==ADC1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <HAL_ADC_MspInit+0xc8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d146      	bne.n	80024ce <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002444:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800244a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002452:	2301      	movs	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002456:	2308      	movs	r3, #8
 8002458:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800245a:	2307      	movs	r3, #7
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800245e:	2302      	movs	r3, #2
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002462:	2302      	movs	r3, #2
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fd59 	bl	8005f28 <HAL_RCCEx_PeriphCLKConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800247c:	f7ff ff8c 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_ADC_MspInit+0xcc>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <HAL_ADC_MspInit+0xcc>)
 8002486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800248a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_ADC_MspInit+0xcc>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_ADC_MspInit+0xcc>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_ADC_MspInit+0xcc>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_ADC_MspInit+0xcc>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024b6:	230b      	movs	r3, #11
 80024b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_ADC_MspInit+0xd0>)
 80024ca:	f001 febb 	bl	8004244 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ce:	bf00      	nop
 80024d0:	37b0      	adds	r7, #176	; 0xb0
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	50040000 	.word	0x50040000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	48000800 	.word	0x48000800

080024e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0ac      	sub	sp, #176	; 0xb0
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2288      	movs	r2, #136	; 0x88
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f00a fed2 	bl	800d2ae <memset>
  if(hi2c->Instance==I2C1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_I2C_MspInit+0xb0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d13b      	bne.n	800258c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002518:	2300      	movs	r3, #0
 800251a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fd01 	bl	8005f28 <HAL_RCCEx_PeriphCLKConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800252c:	f7ff ff34 	bl	8002398 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_I2C_MspInit+0xb4>)
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_I2C_MspInit+0xb4>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_I2C_MspInit+0xb4>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 8002548:	f44f 7340 	mov.w	r3, #768	; 0x300
 800254c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002550:	2312      	movs	r3, #18
 8002552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002562:	2304      	movs	r3, #4
 8002564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002568:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256c:	4619      	mov	r1, r3
 800256e:	480b      	ldr	r0, [pc, #44]	; (800259c <HAL_I2C_MspInit+0xb8>)
 8002570:	f001 fe68 	bl	8004244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_I2C_MspInit+0xb4>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a07      	ldr	r2, [pc, #28]	; (8002598 <HAL_I2C_MspInit+0xb4>)
 800257a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_I2C_MspInit+0xb4>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	37b0      	adds	r7, #176	; 0xb0
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40005400 	.word	0x40005400
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400

080025a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d10c      	bne.n	80025cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_TIM_Base_MspInit+0x5c>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <HAL_TIM_Base_MspInit+0x5c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_TIM_Base_MspInit+0x5c>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ca:	e010      	b.n	80025ee <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <HAL_TIM_Base_MspInit+0x60>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10b      	bne.n	80025ee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_TIM_Base_MspInit+0x5c>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_TIM_Base_MspInit+0x5c>)
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	6593      	str	r3, [r2, #88]	; 0x58
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_TIM_Base_MspInit+0x5c>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40000400 	.word	0x40000400

08002604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_TIM_MspPostInit+0x64>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d11c      	bne.n	8002660 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_TIM_MspPostInit+0x68>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_TIM_MspPostInit+0x68>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_TIM_MspPostInit+0x68>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800263e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002650:	2302      	movs	r3, #2
 8002652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4619      	mov	r1, r3
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <HAL_TIM_MspPostInit+0x6c>)
 800265c:	f001 fdf2 	bl	8004244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40000400 	.word	0x40000400
 800266c:	40021000 	.word	0x40021000
 8002670:	48000800 	.word	0x48000800

08002674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ae      	sub	sp, #184	; 0xb8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	2288      	movs	r2, #136	; 0x88
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f00a fe0a 	bl	800d2ae <memset>
  if(huart->Instance==USART1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5c      	ldr	r2, [pc, #368]	; (8002810 <HAL_UART_MspInit+0x19c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d16f      	bne.n	8002784 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026a8:	2300      	movs	r3, #0
 80026aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fc39 	bl	8005f28 <HAL_RCCEx_PeriphCLKConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026bc:	f7ff fe6c 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c0:	4b54      	ldr	r3, [pc, #336]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	4a53      	ldr	r2, [pc, #332]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80026c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ca:	6613      	str	r3, [r2, #96]	; 0x60
 80026cc:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800270a:	2307      	movs	r3, #7
 800270c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271a:	f001 fd93 	bl	8004244 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800271e:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002720:	4a3e      	ldr	r2, [pc, #248]	; (800281c <HAL_UART_MspInit+0x1a8>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002724:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002726:	2202      	movs	r2, #2
 8002728:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800274e:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002754:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002756:	4830      	ldr	r0, [pc, #192]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 8002758:	f001 fafe 	bl	8003d58 <HAL_DMA_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8002762:	f7ff fe19 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 800276a:	675a      	str	r2, [r3, #116]	; 0x74
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <HAL_UART_MspInit+0x1a4>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2105      	movs	r1, #5
 8002776:	2025      	movs	r0, #37	; 0x25
 8002778:	f001 fac4 	bl	8003d04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800277c:	2025      	movs	r0, #37	; 0x25
 800277e:	f001 fadd 	bl	8003d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002782:	e040      	b.n	8002806 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a25      	ldr	r2, [pc, #148]	; (8002820 <HAL_UART_MspInit+0x1ac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d13b      	bne.n	8002806 <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800278e:	2302      	movs	r3, #2
 8002790:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002792:	2300      	movs	r3, #0
 8002794:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fbc4 	bl	8005f28 <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_MspInit+0x136>
      Error_Handler();
 80027a6:	f7ff fdf7 	bl	8002398 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_UART_MspInit+0x1a0>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027da:	230c      	movs	r3, #12
 80027dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027f2:	2307      	movs	r3, #7
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f001 fd1f 	bl	8004244 <HAL_GPIO_Init>
}
 8002806:	bf00      	nop
 8002808:	37b8      	adds	r7, #184	; 0xb8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40013800 	.word	0x40013800
 8002814:	40021000 	.word	0x40021000
 8002818:	20000520 	.word	0x20000520
 800281c:	40020058 	.word	0x40020058
 8002820:	40004400 	.word	0x40004400

08002824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08e      	sub	sp, #56	; 0x38
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_InitTick+0xe0>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a33      	ldr	r2, [pc, #204]	; (8002904 <HAL_InitTick+0xe0>)
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_InitTick+0xe0>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800284a:	f107 0210 	add.w	r2, r7, #16
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fad5 	bl	8005e04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002864:	f003 faa2 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8002868:	6378      	str	r0, [r7, #52]	; 0x34
 800286a:	e004      	b.n	8002876 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800286c:	f003 fa9e 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8002870:	4603      	mov	r3, r0
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_InitTick+0xe4>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	3b01      	subs	r3, #1
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_InitTick+0xe8>)
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_InitTick+0xec>)
 8002888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_InitTick+0xe8>)
 800288c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002890:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_InitTick+0xe8>)
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_InitTick+0xe8>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_InitTick+0xe8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_InitTick+0xe8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80028aa:	4818      	ldr	r0, [pc, #96]	; (800290c <HAL_InitTick+0xe8>)
 80028ac:	f003 fff8 	bl	80068a0 <HAL_TIM_Base_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80028b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11b      	bne.n	80028f6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80028be:	4813      	ldr	r0, [pc, #76]	; (800290c <HAL_InitTick+0xe8>)
 80028c0:	f004 f846 	bl	8006950 <HAL_TIM_Base_Start_IT>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80028ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d111      	bne.n	80028f6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028d2:	2036      	movs	r0, #54	; 0x36
 80028d4:	f001 fa32 	bl	8003d3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	d808      	bhi.n	80028f0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80028de:	2200      	movs	r2, #0
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	2036      	movs	r0, #54	; 0x36
 80028e4:	f001 fa0e 	bl	8003d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_InitTick+0xf0>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e002      	b.n	80028f6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3738      	adds	r7, #56	; 0x38
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	431bde83 	.word	0x431bde83
 800290c:	2000059c 	.word	0x2000059c
 8002910:	40001000 	.word	0x40001000
 8002914:	20000008 	.word	0x20000008

08002918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800291c:	e7fe      	b.n	800291c <NMI_Handler+0x4>

0800291e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <HardFault_Handler+0x4>

08002924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <MemManage_Handler+0x4>

0800292a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <BusFault_Handler+0x4>

08002930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <UsageFault_Handler+0x4>

08002936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <DMA1_Channel5_IRQHandler+0x10>)
 800294a:	f001 fb9c 	bl	8004086 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000520 	.word	0x20000520

08002958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <USART1_IRQHandler+0x10>)
 800295e:	f005 fad1 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000410 	.word	0x20000410

0800296c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <TIM6_DAC_IRQHandler+0x10>)
 8002972:	f004 f9c5 	bl	8006d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000059c 	.word	0x2000059c

08002980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return 1;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_kill>:

int _kill(int pid, int sig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800299a:	f00a fd61 	bl	800d460 <__errno>
 800299e:	4603      	mov	r3, r0
 80029a0:	2216      	movs	r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
  return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_exit>:

void _exit (int status)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffe7 	bl	8002990 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029c2:	e7fe      	b.n	80029c2 <_exit+0x12>

080029c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e00a      	b.n	80029ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d6:	f3af 8000 	nop.w
 80029da:	4601      	mov	r1, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf0      	blt.n	80029d6 <_read+0x12>
  }

  return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e009      	b.n	8002a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	60ba      	str	r2, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf1      	blt.n	8002a10 <_write+0x12>
  }
  return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_close>:

int _close(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <_isatty>:

int _isatty(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad0:	f00a fcc6 	bl	800d460 <__errno>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e009      	b.n	8002af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <_sbrk+0x64>)
 8002af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20018000 	.word	0x20018000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	200005e8 	.word	0x200005e8
 8002b08:	200020e0 	.word	0x200020e0

08002b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <SystemInit+0x20>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <SystemInit+0x20>)
 8002b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b34:	f7ff ffea 	bl	8002b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b3a:	490d      	ldr	r1, [pc, #52]	; (8002b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <LoopForever+0xe>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b50:	4c0a      	ldr	r4, [pc, #40]	; (8002b7c <LoopForever+0x16>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b5e:	f00a fc85 	bl	800d46c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b62:	f7fe fded 	bl	8001740 <main>

08002b66 <LoopForever>:

LoopForever:
    b LoopForever
 8002b66:	e7fe      	b.n	8002b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b74:	080111b8 	.word	0x080111b8
  ldr r2, =_sbss
 8002b78:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002b7c:	200020dc 	.word	0x200020dc

08002b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_2_IRQHandler>
	...

08002b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_Init+0x3c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <HAL_Init+0x3c>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	f001 f8a7 	bl	8003cee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ba0:	200f      	movs	r0, #15
 8002ba2:	f7ff fe3f 	bl	8002824 <HAL_InitTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	e001      	b.n	8002bb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bb2:	f7ff fc05 	bl	80023c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000000c 	.word	0x2000000c
 8002be8:	200005ec 	.word	0x200005ec

08002bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200005ec 	.word	0x200005ec

08002c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff ffee 	bl	8002bec <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d005      	beq.n	8002c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_Delay+0x44>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c2a:	bf00      	nop
 8002c2c:	f7ff ffde 	bl	8002bec <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8f7      	bhi.n	8002c2c <HAL_Delay+0x28>
  {
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3360      	adds	r3, #96	; 0x60
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <LL_ADC_SetOffset+0x44>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	03fff000 	.word	0x03fff000

08002cfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3360      	adds	r3, #96	; 0x60
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3330      	adds	r3, #48	; 0x30
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	211f      	movs	r1, #31
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	f003 011f 	and.w	r1, r3, #31
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	431a      	orrs	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	0e5b      	lsrs	r3, r3, #25
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	4413      	add	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2107      	movs	r1, #7
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	0d1b      	lsrs	r3, r3, #20
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0318 	and.w	r3, r3, #24
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e30:	40d9      	lsrs	r1, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	400b      	ands	r3, r1
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	0007ffff 	.word	0x0007ffff

08002e54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6093      	str	r3, [r2, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8c:	d101      	bne.n	8002e92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <LL_ADC_IsEnabled+0x18>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_ADC_IsEnabled+0x1a>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d101      	bne.n	8002f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d101      	bne.n	8002f54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e130      	b.n	80031e0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fa3f 	bl	8002410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff67 	bl	8002e78 <LL_ADC_IsDeepPowerDownEnabled>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff4d 	bl	8002e54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ff82 	bl	8002ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff66 	bl	8002ea0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fd4:	4b84      	ldr	r3, [pc, #528]	; (80031e8 <HAL_ADC_Init+0x284>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	4a84      	ldr	r2, [pc, #528]	; (80031ec <HAL_ADC_Init+0x288>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fe8:	e002      	b.n	8002ff0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f9      	bne.n	8002fea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff64 	bl	8002ec8 <LL_ADC_IsInternalRegulatorEnabled>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff75 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 800302c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 80c9 	bne.w	80031ce <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 80c5 	bne.w	80031ce <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800304c:	f043 0202 	orr.w	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff49 	bl	8002ef0 <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d115      	bne.n	8003090 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003064:	4862      	ldr	r0, [pc, #392]	; (80031f0 <HAL_ADC_Init+0x28c>)
 8003066:	f7ff ff43 	bl	8002ef0 <LL_ADC_IsEnabled>
 800306a:	4604      	mov	r4, r0
 800306c:	4861      	ldr	r0, [pc, #388]	; (80031f4 <HAL_ADC_Init+0x290>)
 800306e:	f7ff ff3f 	bl	8002ef0 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	431c      	orrs	r4, r3
 8003076:	4860      	ldr	r0, [pc, #384]	; (80031f8 <HAL_ADC_Init+0x294>)
 8003078:	f7ff ff3a 	bl	8002ef0 <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	4323      	orrs	r3, r4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4619      	mov	r1, r3
 800308a:	485c      	ldr	r0, [pc, #368]	; (80031fc <HAL_ADC_Init+0x298>)
 800308c:	f7ff fdde 	bl	8002c4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7e5b      	ldrb	r3, [r3, #25]
 8003094:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800309a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80030a0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80030a6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d106      	bne.n	80030cc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	3b01      	subs	r3, #1
 80030c4:	045b      	lsls	r3, r3, #17
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_ADC_Init+0x29c>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff1b 	bl	8002f3c <LL_ADC_INJ_IsConversionOngoing>
 8003106:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d13d      	bne.n	800318a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d13a      	bne.n	800318a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003118:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003120:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003130:	f023 0302 	bic.w	r3, r3, #2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	430b      	orrs	r3, r1
 800313c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003144:	2b01      	cmp	r3, #1
 8003146:	d118      	bne.n	800317a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003164:	4311      	orrs	r1, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800316a:	430a      	orrs	r2, r1
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	611a      	str	r2, [r3, #16]
 8003178:	e007      	b.n	800318a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10c      	bne.n	80031ac <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f023 010f 	bic.w	r1, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
 80031aa:	e007      	b.n	80031bc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 020f 	bic.w	r2, r2, #15
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f023 0303 	bic.w	r3, r3, #3
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
 80031cc:	e007      	b.n	80031de <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031de:	7ffb      	ldrb	r3, [r7, #31]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3724      	adds	r7, #36	; 0x24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	20000004 	.word	0x20000004
 80031ec:	053e2d63 	.word	0x053e2d63
 80031f0:	50040000 	.word	0x50040000
 80031f4:	50040100 	.word	0x50040100
 80031f8:	50040200 	.word	0x50040200
 80031fc:	50040300 	.word	0x50040300
 8003200:	fff0c007 	.word	0xfff0c007

08003204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0b6      	sub	sp, #216	; 0xd8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x22>
 8003222:	2302      	movs	r3, #2
 8003224:	e3c9      	b.n	80039ba <HAL_ADC_ConfigChannel+0x7b6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fe6f 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 83aa 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d824      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	3b02      	subs	r3, #2
 8003256:	2b03      	cmp	r3, #3
 8003258:	d81b      	bhi.n	8003292 <HAL_ADC_ConfigChannel+0x8e>
 800325a:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_ADC_ConfigChannel+0x5c>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003271 	.word	0x08003271
 8003264:	08003279 	.word	0x08003279
 8003268:	08003281 	.word	0x08003281
 800326c:	08003289 	.word	0x08003289
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003270:	230c      	movs	r3, #12
 8003272:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003276:	e010      	b.n	800329a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003278:	2312      	movs	r3, #18
 800327a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800327e:	e00c      	b.n	800329a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003280:	2318      	movs	r3, #24
 8003282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003286:	e008      	b.n	800329a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800328c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003290:	e003      	b.n	800329a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003292:	2306      	movs	r3, #6
 8003294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003298:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80032a8:	f7ff fd59 	bl	8002d5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fe30 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 80032b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fe3c 	bl	8002f3c <LL_ADC_INJ_IsConversionOngoing>
 80032c4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 81a4 	bne.w	800361a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 819f 	bne.w	800361a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	461a      	mov	r2, r3
 80032ea:	f7ff fd64 	bl	8002db6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00a      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6919      	ldr	r1, [r3, #16]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003320:	f7ff fcc8 	bl	8002cb4 <LL_ADC_SetOffset>
 8003324:	e179      	b.n	800361a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fce5 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x14e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fcda 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	e01e      	b.n	8003390 <HAL_ADC_ConfigChannel+0x18c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fccf 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e004      	b.n	800338e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1a4>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	e018      	b.n	80033da <HAL_ADC_ConfigChannel+0x1d6>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80033bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80033c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e004      	b.n	80033da <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033da:	429a      	cmp	r2, r3
 80033dc:	d106      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fc9e 	bl	8002d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fc82 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x214>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fc77 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	e01e      	b.n	8003456 <HAL_ADC_ConfigChannel+0x252>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fc6c 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800343a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800343e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e004      	b.n	8003454 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800344a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_ADC_ConfigChannel+0x26a>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	e018      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x29c>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003486:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800348a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fc3b 	bl	8002d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fc1f 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x2da>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fc14 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x318>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fc09 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x330>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	e014      	b.n	800355e <HAL_ADC_ConfigChannel+0x35a>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e004      	b.n	800355e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800355e:	429a      	cmp	r2, r3
 8003560:	d106      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fbdc 	bl	8002d28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2103      	movs	r1, #3
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fbc0 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10a      	bne.n	800359c <HAL_ADC_ConfigChannel+0x398>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2103      	movs	r1, #3
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fbb5 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	f003 021f 	and.w	r2, r3, #31
 800359a:	e017      	b.n	80035cc <HAL_ADC_ConfigChannel+0x3c8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2103      	movs	r1, #3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fbaa 	bl	8002cfc <LL_ADC_GetOffsetChannel>
 80035a8:	4603      	mov	r3, r0
 80035aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80035b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x3e0>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	e011      	b.n	8003608 <HAL_ADC_ConfigChannel+0x404>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e003      	b.n	8003608 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	2103      	movs	r1, #3
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fb87 	bl	8002d28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fc66 	bl	8002ef0 <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8140 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	461a      	mov	r2, r3
 800363a:	f7ff fbe7 	bl	8002e0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a8f      	ldr	r2, [pc, #572]	; (8003880 <HAL_ADC_ConfigChannel+0x67c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	f040 8131 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x46e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2b09      	cmp	r3, #9
 8003668:	bf94      	ite	ls
 800366a:	2301      	movls	r3, #1
 800366c:	2300      	movhi	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e019      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x4a2>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e003      	b.n	8003696 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2b09      	cmp	r3, #9
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d079      	beq.n	800379e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x4c2>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	3301      	adds	r3, #1
 80036be:	069b      	lsls	r3, r3, #26
 80036c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c4:	e015      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x4ee>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80036d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80036d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	069b      	lsls	r3, r3, #26
 80036ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x50e>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	e017      	b.n	8003742 <HAL_ADC_ConfigChannel+0x53e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800372e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2101      	movs	r1, #1
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	ea42 0103 	orr.w	r1, r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x564>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0e9b      	lsrs	r3, r3, #26
 8003758:	3301      	adds	r3, #1
 800375a:	f003 021f 	and.w	r2, r3, #31
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	051b      	lsls	r3, r3, #20
 8003766:	e018      	b.n	800379a <HAL_ADC_ConfigChannel+0x596>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800379a:	430b      	orrs	r3, r1
 800379c:	e081      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x5b6>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	3301      	adds	r3, #1
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b8:	e015      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x5e2>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e003      	b.n	80037de <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3301      	adds	r3, #1
 80037e0:	069b      	lsls	r3, r3, #26
 80037e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x602>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	0e9b      	lsrs	r3, r3, #26
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	e017      	b.n	8003836 <HAL_ADC_ConfigChannel+0x632>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61bb      	str	r3, [r7, #24]
  return result;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e003      	b.n	800382a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	ea42 0103 	orr.w	r1, r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x65e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	3301      	adds	r3, #1
 800384e:	f003 021f 	and.w	r2, r3, #31
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	3b1e      	subs	r3, #30
 800385a:	051b      	lsls	r3, r3, #20
 800385c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003860:	e01e      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x69c>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	60fb      	str	r3, [r7, #12]
  return result;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800387a:	2320      	movs	r3, #32
 800387c:	e006      	b.n	800388c <HAL_ADC_ConfigChannel+0x688>
 800387e:	bf00      	nop
 8003880:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f003 021f 	and.w	r2, r3, #31
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	3b1e      	subs	r3, #30
 800389a:	051b      	lsls	r3, r3, #20
 800389c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7ff fa85 	bl	8002db6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d07a      	beq.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038b8:	4843      	ldr	r0, [pc, #268]	; (80039c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80038ba:	f7ff f9ed 	bl	8002c98 <LL_ADC_GetCommonPathInternalCh>
 80038be:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a41      	ldr	r2, [pc, #260]	; (80039cc <HAL_ADC_ConfigChannel+0x7c8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d12c      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d126      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x6e8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d15d      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f4:	4619      	mov	r1, r3
 80038f6:	4834      	ldr	r0, [pc, #208]	; (80039c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80038f8:	f7ff f9bb 	bl	8002c72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_ADC_ConfigChannel+0x7d4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	4a36      	ldr	r2, [pc, #216]	; (80039dc <HAL_ADC_ConfigChannel+0x7d8>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003916:	e002      	b.n	800391e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3b01      	subs	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f9      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003924:	e040      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d118      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d112      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_ADC_ConfigChannel+0x74c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <HAL_ADC_ConfigChannel+0x7d0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d12d      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003958:	4619      	mov	r1, r3
 800395a:	481b      	ldr	r0, [pc, #108]	; (80039c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800395c:	f7ff f989 	bl	8002c72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003960:	e024      	b.n	80039ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d120      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800396c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11a      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d115      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800398a:	4619      	mov	r1, r3
 800398c:	480e      	ldr	r0, [pc, #56]	; (80039c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800398e:	f7ff f970 	bl	8002c72 <LL_ADC_SetCommonPathInternalCh>
 8003992:	e00c      	b.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039a6:	e002      	b.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	37d8      	adds	r7, #216	; 0xd8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	80080000 	.word	0x80080000
 80039c8:	50040300 	.word	0x50040300
 80039cc:	c7520000 	.word	0xc7520000
 80039d0:	50040000 	.word	0x50040000
 80039d4:	50040200 	.word	0x50040200
 80039d8:	20000004 	.word	0x20000004
 80039dc:	053e2d63 	.word	0x053e2d63
 80039e0:	cb840000 	.word	0xcb840000
 80039e4:	80000001 	.word	0x80000001

080039e8 <LL_ADC_IsEnabled>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <LL_ADC_IsEnabled+0x18>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <LL_ADC_IsEnabled+0x1a>
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d101      	bne.n	8003a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b09f      	sub	sp, #124	; 0x7c
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e093      	b.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a47      	ldr	r2, [pc, #284]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d102      	bne.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a6c:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	e001      	b.n	8003a76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e072      	b.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ffb9 	bl	8003a0e <LL_ADC_REG_IsConversionOngoing>
 8003a9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ffb3 	bl	8003a0e <LL_ADC_REG_IsConversionOngoing>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d154      	bne.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d151      	bne.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ab4:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02c      	beq.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ad2:	035b      	lsls	r3, r3, #13
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003adc:	4829      	ldr	r0, [pc, #164]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ade:	f7ff ff83 	bl	80039e8 <LL_ADC_IsEnabled>
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4828      	ldr	r0, [pc, #160]	; (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ae6:	f7ff ff7f 	bl	80039e8 <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	431c      	orrs	r4, r3
 8003aee:	4828      	ldr	r0, [pc, #160]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003af0:	f7ff ff7a 	bl	80039e8 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d137      	bne.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b04:	f023 030f 	bic.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	431a      	orrs	r2, r3
 8003b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b16:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b18:	e028      	b.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b26:	4817      	ldr	r0, [pc, #92]	; (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b28:	f7ff ff5e 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	4816      	ldr	r0, [pc, #88]	; (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b30:	f7ff ff5a 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	431c      	orrs	r4, r3
 8003b38:	4815      	ldr	r0, [pc, #84]	; (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b3a:	f7ff ff55 	bl	80039e8 <LL_ADC_IsEnabled>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4323      	orrs	r3, r4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d112      	bne.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b4e:	f023 030f 	bic.w	r3, r3, #15
 8003b52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b56:	e009      	b.n	8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	f043 0220 	orr.w	r2, r3, #32
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b6a:	e000      	b.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	377c      	adds	r7, #124	; 0x7c
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	50040000 	.word	0x50040000
 8003b88:	50040100 	.word	0x50040100
 8003b8c:	50040300 	.word	0x50040300
 8003b90:	50040200 	.word	0x50040200

08003b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	60d3      	str	r3, [r2, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4907      	ldr	r1, [pc, #28]	; (8003c30 <__NVIC_EnableIRQ+0x38>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000e100 	.word	0xe000e100

08003c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	db0a      	blt.n	8003c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	490c      	ldr	r1, [pc, #48]	; (8003c80 <__NVIC_SetPriority+0x4c>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	440b      	add	r3, r1
 8003c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c5c:	e00a      	b.n	8003c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4908      	ldr	r1, [pc, #32]	; (8003c84 <__NVIC_SetPriority+0x50>)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	0112      	lsls	r2, r2, #4
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	761a      	strb	r2, [r3, #24]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000e100 	.word	0xe000e100
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	bf28      	it	cs
 8003ca6:	2304      	movcs	r3, #4
 8003ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d902      	bls.n	8003cb8 <NVIC_EncodePriority+0x30>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3b03      	subs	r3, #3
 8003cb6:	e000      	b.n	8003cba <NVIC_EncodePriority+0x32>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	401a      	ands	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	4313      	orrs	r3, r2
         );
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff4c 	bl	8003b94 <__NVIC_SetPriorityGrouping>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d16:	f7ff ff61 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003d1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	6978      	ldr	r0, [r7, #20]
 8003d22:	f7ff ffb1 	bl	8003c88 <NVIC_EncodePriority>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff80 	bl	8003c34 <__NVIC_SetPriority>
}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff54 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e098      	b.n	8003e9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_DMA_Init+0x150>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d80f      	bhi.n	8003d96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_DMA_Init+0x154>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <HAL_DMA_Init+0x158>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a48      	ldr	r2, [pc, #288]	; (8003eb4 <HAL_DMA_Init+0x15c>)
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
 8003d94:	e00e      	b.n	8003db4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <HAL_DMA_Init+0x160>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	4a43      	ldr	r2, [pc, #268]	; (8003eb0 <HAL_DMA_Init+0x158>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	009a      	lsls	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a42      	ldr	r2, [pc, #264]	; (8003ebc <HAL_DMA_Init+0x164>)
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0e:	d039      	beq.n	8003e84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <HAL_DMA_Init+0x15c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d11a      	bne.n	8003e50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_DMA_Init+0x168>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f003 031c 	and.w	r3, r3, #28
 8003e26:	210f      	movs	r1, #15
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	4924      	ldr	r1, [pc, #144]	; (8003ec0 <HAL_DMA_Init+0x168>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e34:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_DMA_Init+0x168>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f003 031c 	and.w	r3, r3, #28
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	491d      	ldr	r1, [pc, #116]	; (8003ec0 <HAL_DMA_Init+0x168>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
 8003e4e:	e019      	b.n	8003e84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <HAL_DMA_Init+0x16c>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f003 031c 	and.w	r3, r3, #28
 8003e5c:	210f      	movs	r1, #15
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	4917      	ldr	r1, [pc, #92]	; (8003ec4 <HAL_DMA_Init+0x16c>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <HAL_DMA_Init+0x16c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6859      	ldr	r1, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f003 031c 	and.w	r3, r3, #28
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <HAL_DMA_Init+0x16c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40020407 	.word	0x40020407
 8003eac:	bffdfff8 	.word	0xbffdfff8
 8003eb0:	cccccccd 	.word	0xcccccccd
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	bffdfbf8 	.word	0xbffdfbf8
 8003ebc:	40020400 	.word	0x40020400
 8003ec0:	400200a8 	.word	0x400200a8
 8003ec4:	400204a8 	.word	0x400204a8

08003ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DMA_Start_IT+0x20>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e04b      	b.n	8003f80 <HAL_DMA_Start_IT+0xb8>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d13a      	bne.n	8003f72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f95f 	bl	80041e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 020e 	orr.w	r2, r2, #14
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e00f      	b.n	8003f60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0204 	bic.w	r2, r2, #4
 8003f4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 020a 	orr.w	r2, r2, #10
 8003f5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e005      	b.n	8003f7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d008      	beq.n	8003fb2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e022      	b.n	8003ff8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 020e 	bic.w	r2, r2, #14
 8003fc0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f003 021c 	and.w	r2, r3, #28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2101      	movs	r1, #1
 8003fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d005      	beq.n	8004028 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2204      	movs	r2, #4
 8004020:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e029      	b.n	800407c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 020e 	bic.w	r2, r2, #14
 8004036:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	f003 021c 	and.w	r2, r3, #28
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
    }
  }
  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f003 031c 	and.w	r3, r3, #28
 80040a6:	2204      	movs	r2, #4
 80040a8:	409a      	lsls	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d026      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7a>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0204 	bic.w	r2, r2, #4
 80040d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f003 021c 	and.w	r2, r3, #28
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2104      	movs	r1, #4
 80040e8:	fa01 f202 	lsl.w	r2, r1, r2
 80040ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d071      	beq.n	80041da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040fe:	e06c      	b.n	80041da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	f003 031c 	and.w	r3, r3, #28
 8004108:	2202      	movs	r2, #2
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02e      	beq.n	8004172 <HAL_DMA_IRQHandler+0xec>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d029      	beq.n	8004172 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 020a 	bic.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f003 021c 	and.w	r2, r3, #28
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2102      	movs	r1, #2
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d038      	beq.n	80041da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004170:	e033      	b.n	80041da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f003 031c 	and.w	r3, r3, #28
 800417a:	2208      	movs	r2, #8
 800417c:	409a      	lsls	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02a      	beq.n	80041dc <HAL_DMA_IRQHandler+0x156>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d025      	beq.n	80041dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 020e 	bic.w	r2, r2, #14
 800419e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	f003 021c 	and.w	r2, r3, #28
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f202 	lsl.w	r2, r1, r2
 80041b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
}
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	f003 021c 	and.w	r2, r3, #28
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d108      	bne.n	8004228 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004226:	e007      	b.n	8004238 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004252:	e17f      	b.n	8004554 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2101      	movs	r1, #1
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	fa01 f303 	lsl.w	r3, r1, r3
 8004260:	4013      	ands	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8171 	beq.w	800454e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d005      	beq.n	8004284 <HAL_GPIO_Init+0x40>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d130      	bne.n	80042e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2203      	movs	r2, #3
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ba:	2201      	movs	r2, #1
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 0201 	and.w	r2, r3, #1
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d118      	bne.n	8004324 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80042f8:	2201      	movs	r2, #1
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0201 	and.w	r2, r3, #1
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d017      	beq.n	8004360 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d123      	bne.n	80043b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	08da      	lsrs	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3208      	adds	r2, #8
 8004374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	220f      	movs	r2, #15
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	08da      	lsrs	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3208      	adds	r2, #8
 80043ae:	6939      	ldr	r1, [r7, #16]
 80043b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2203      	movs	r2, #3
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0203 	and.w	r2, r3, #3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80ac 	beq.w	800454e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f6:	4b5f      	ldr	r3, [pc, #380]	; (8004574 <HAL_GPIO_Init+0x330>)
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	4a5e      	ldr	r2, [pc, #376]	; (8004574 <HAL_GPIO_Init+0x330>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6613      	str	r3, [r2, #96]	; 0x60
 8004402:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <HAL_GPIO_Init+0x330>)
 8004404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800440e:	4a5a      	ldr	r2, [pc, #360]	; (8004578 <HAL_GPIO_Init+0x334>)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004438:	d025      	beq.n	8004486 <HAL_GPIO_Init+0x242>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4f      	ldr	r2, [pc, #316]	; (800457c <HAL_GPIO_Init+0x338>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01f      	beq.n	8004482 <HAL_GPIO_Init+0x23e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4e      	ldr	r2, [pc, #312]	; (8004580 <HAL_GPIO_Init+0x33c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d019      	beq.n	800447e <HAL_GPIO_Init+0x23a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4d      	ldr	r2, [pc, #308]	; (8004584 <HAL_GPIO_Init+0x340>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_GPIO_Init+0x236>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4c      	ldr	r2, [pc, #304]	; (8004588 <HAL_GPIO_Init+0x344>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00d      	beq.n	8004476 <HAL_GPIO_Init+0x232>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4b      	ldr	r2, [pc, #300]	; (800458c <HAL_GPIO_Init+0x348>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <HAL_GPIO_Init+0x22e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4a      	ldr	r2, [pc, #296]	; (8004590 <HAL_GPIO_Init+0x34c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d101      	bne.n	800446e <HAL_GPIO_Init+0x22a>
 800446a:	2306      	movs	r3, #6
 800446c:	e00c      	b.n	8004488 <HAL_GPIO_Init+0x244>
 800446e:	2307      	movs	r3, #7
 8004470:	e00a      	b.n	8004488 <HAL_GPIO_Init+0x244>
 8004472:	2305      	movs	r3, #5
 8004474:	e008      	b.n	8004488 <HAL_GPIO_Init+0x244>
 8004476:	2304      	movs	r3, #4
 8004478:	e006      	b.n	8004488 <HAL_GPIO_Init+0x244>
 800447a:	2303      	movs	r3, #3
 800447c:	e004      	b.n	8004488 <HAL_GPIO_Init+0x244>
 800447e:	2302      	movs	r3, #2
 8004480:	e002      	b.n	8004488 <HAL_GPIO_Init+0x244>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_GPIO_Init+0x244>
 8004486:	2300      	movs	r3, #0
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	f002 0203 	and.w	r2, r2, #3
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	4093      	lsls	r3, r2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004498:	4937      	ldr	r1, [pc, #220]	; (8004578 <HAL_GPIO_Init+0x334>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	3302      	adds	r3, #2
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <HAL_GPIO_Init+0x350>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044ca:	4a32      	ldr	r2, [pc, #200]	; (8004594 <HAL_GPIO_Init+0x350>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044d0:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_GPIO_Init+0x350>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	43db      	mvns	r3, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044f4:	4a27      	ldr	r2, [pc, #156]	; (8004594 <HAL_GPIO_Init+0x350>)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_GPIO_Init+0x350>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	43db      	mvns	r3, r3
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800451e:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <HAL_GPIO_Init+0x350>)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_GPIO_Init+0x350>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	43db      	mvns	r3, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004548:	4a12      	ldr	r2, [pc, #72]	; (8004594 <HAL_GPIO_Init+0x350>)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3301      	adds	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	f47f ae78 	bne.w	8004254 <HAL_GPIO_Init+0x10>
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	40010000 	.word	0x40010000
 800457c:	48000400 	.word	0x48000400
 8004580:	48000800 	.word	0x48000800
 8004584:	48000c00 	.word	0x48000c00
 8004588:	48001000 	.word	0x48001000
 800458c:	48001400 	.word	0x48001400
 8004590:	48001800 	.word	0x48001800
 8004594:	40010400 	.word	0x40010400

08004598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
 80045a4:	4613      	mov	r3, r2
 80045a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a8:	787b      	ldrb	r3, [r7, #1]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045b4:	e002      	b.n	80045bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e08d      	b.n	80046f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd ff78 	bl	80024e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004618:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004628:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	e006      	b.n	8004650 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800464e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d108      	bne.n	800466a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	e007      	b.n	800467a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004678:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	461a      	mov	r2, r3
 800470e:	4603      	mov	r3, r0
 8004710:	817b      	strh	r3, [r7, #10]
 8004712:	460b      	mov	r3, r1
 8004714:	813b      	strh	r3, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	f040 80f9 	bne.w	800491a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_I2C_Mem_Write+0x34>
 800472e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0ed      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_I2C_Mem_Write+0x4e>
 800474a:	2302      	movs	r3, #2
 800474c:	e0e6      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004756:	f7fe fa49 	bl	8002bec <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2319      	movs	r3, #25
 8004762:	2201      	movs	r2, #1
 8004764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fac3 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0d1      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2221      	movs	r2, #33	; 0x21
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a0:	88f8      	ldrh	r0, [r7, #6]
 80047a2:	893a      	ldrh	r2, [r7, #8]
 80047a4:	8979      	ldrh	r1, [r7, #10]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	4603      	mov	r3, r0
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f9d3 	bl	8004b5c <I2C_RequestMemoryWrite>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0a9      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2bff      	cmp	r3, #255	; 0xff
 80047d0:	d90e      	bls.n	80047f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fc3d 	bl	8005068 <I2C_TransferConfig>
 80047ee:	e00f      	b.n	8004810 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	8979      	ldrh	r1, [r7, #10]
 8004802:	2300      	movs	r3, #0
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fc2c 	bl	8005068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fabc 	bl	8004d92 <I2C_WaitOnTXISFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e07b      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d034      	beq.n	80048c8 <HAL_I2C_Mem_Write+0x1c8>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d130      	bne.n	80048c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	2200      	movs	r2, #0
 800486e:	2180      	movs	r1, #128	; 0x80
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fa3f 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e04d      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2bff      	cmp	r3, #255	; 0xff
 8004888:	d90e      	bls.n	80048a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	b2da      	uxtb	r2, r3
 8004896:	8979      	ldrh	r1, [r7, #10]
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fbe1 	bl	8005068 <I2C_TransferConfig>
 80048a6:	e00f      	b.n	80048c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	8979      	ldrh	r1, [r7, #10]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fbd0 	bl	8005068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d19e      	bne.n	8004810 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 faa2 	bl	8004e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e01a      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2220      	movs	r2, #32
 80048ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_I2C_Mem_Write+0x224>)
 80048fa:	400b      	ands	r3, r1
 80048fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	fe00e800 	.word	0xfe00e800

08004928 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	817b      	strh	r3, [r7, #10]
 800493a:	460b      	mov	r3, r1
 800493c:	813b      	strh	r3, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	f040 80fd 	bne.w	8004b4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_I2C_Mem_Read+0x34>
 8004956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d105      	bne.n	8004968 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0f1      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_I2C_Mem_Read+0x4e>
 8004972:	2302      	movs	r3, #2
 8004974:	e0ea      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800497e:	f7fe f935 	bl	8002bec <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2319      	movs	r3, #25
 800498a:	2201      	movs	r2, #1
 800498c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f9af 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0d5      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2222      	movs	r2, #34	; 0x22
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c8:	88f8      	ldrh	r0, [r7, #6]
 80049ca:	893a      	ldrh	r2, [r7, #8]
 80049cc:	8979      	ldrh	r1, [r7, #10]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	4603      	mov	r3, r0
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f913 	bl	8004c04 <I2C_RequestMemoryRead>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0ad      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2bff      	cmp	r3, #255	; 0xff
 80049f8:	d90e      	bls.n	8004a18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	22ff      	movs	r2, #255	; 0xff
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	8979      	ldrh	r1, [r7, #10]
 8004a08:	4b52      	ldr	r3, [pc, #328]	; (8004b54 <HAL_I2C_Mem_Read+0x22c>)
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fb29 	bl	8005068 <I2C_TransferConfig>
 8004a16:	e00f      	b.n	8004a38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	8979      	ldrh	r1, [r7, #10]
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <HAL_I2C_Mem_Read+0x22c>)
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fb18 	bl	8005068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2104      	movs	r1, #4
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f956 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07c      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d034      	beq.n	8004af8 <HAL_I2C_Mem_Read+0x1d0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d130      	bne.n	8004af8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f927 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e04d      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d90e      	bls.n	8004ad8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fac9 	bl	8005068 <I2C_TransferConfig>
 8004ad6:	e00f      	b.n	8004af8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fab8 	bl	8005068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d19a      	bne.n	8004a38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f98a 	bl	8004e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e01a      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_I2C_Mem_Read+0x230>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	80002400 	.word	0x80002400
 8004b58:	fe00e800 	.word	0xfe00e800

08004b5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	817b      	strh	r3, [r7, #10]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	813b      	strh	r3, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	8979      	ldrh	r1, [r7, #10]
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <I2C_RequestMemoryWrite+0xa4>)
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fa6f 	bl	8005068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f8ff 	bl	8004d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e02c      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
 8004bae:	e015      	b.n	8004bdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f8e5 	bl	8004d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e012      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd2:	893b      	ldrh	r3, [r7, #8]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f884 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	80002000 	.word	0x80002000

08004c04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	817b      	strh	r3, [r7, #10]
 8004c16:	460b      	mov	r3, r1
 8004c18:	813b      	strh	r3, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	8979      	ldrh	r1, [r7, #10]
 8004c24:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <I2C_RequestMemoryRead+0xa4>)
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa1c 	bl	8005068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f8ac 	bl	8004d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e02c      	b.n	8004c9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4a:	893b      	ldrh	r3, [r7, #8]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
 8004c54:	e015      	b.n	8004c82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c56:	893b      	ldrh	r3, [r7, #8]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	69b9      	ldr	r1, [r7, #24]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f892 	bl	8004d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e012      	b.n	8004c9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2140      	movs	r1, #64	; 0x40
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f831 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	80002000 	.word	0x80002000

08004cac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d103      	bne.n	8004cca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d007      	beq.n	8004ce8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	619a      	str	r2, [r3, #24]
  }
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d04:	e031      	b.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d02d      	beq.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0e:	f7fd ff6d 	bl	8002bec <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d122      	bne.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d113      	bne.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e00f      	b.n	8004d8a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d0be      	beq.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d9e:	e033      	b.n	8004e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f87f 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e031      	b.n	8004e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d025      	beq.n	8004e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbc:	f7fd ff16 	bl	8002bec <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11a      	bne.n	8004e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d013      	beq.n	8004e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e007      	b.n	8004e18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d1c4      	bne.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e2c:	e02f      	b.n	8004e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f838 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e02d      	b.n	8004e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fd fed3 	bl	8002bec <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d11a      	bne.n	8004e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d013      	beq.n	8004e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e007      	b.n	8004e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d1c8      	bne.n	8004e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d068      	beq.n	8004fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004edc:	e049      	b.n	8004f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d045      	beq.n	8004f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fd fe81 	bl	8002bec <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_IsErrorOccurred+0x54>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d13a      	bne.n	8004f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1e:	d121      	bne.n	8004f64 <I2C_IsErrorOccurred+0xbc>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f26:	d01d      	beq.n	8004f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d01a      	beq.n	8004f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f3e:	f7fd fe55 	bl	8002bec <HAL_GetTick>
 8004f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f44:	e00e      	b.n	8004f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f46:	f7fd fe51 	bl	8002bec <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b19      	cmp	r3, #25
 8004f52:	d907      	bls.n	8004f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	f043 0320 	orr.w	r3, r3, #32
 8004f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f62:	e006      	b.n	8004f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d1e9      	bne.n	8004f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d003      	beq.n	8004f88 <I2C_IsErrorOccurred+0xe0>
 8004f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0aa      	beq.n	8004ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2220      	movs	r2, #32
 8004f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01c      	beq.n	8005056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff fe45 	bl	8004cac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <I2C_IsErrorOccurred+0x1bc>)
 800502e:	400b      	ands	r3, r1
 8005030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	fe00e800 	.word	0xfe00e800

08005068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	817b      	strh	r3, [r7, #10]
 8005076:	4613      	mov	r3, r2
 8005078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005080:	7a7b      	ldrb	r3, [r7, #9]
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	4313      	orrs	r3, r2
 8005092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	0d5b      	lsrs	r3, r3, #21
 80050a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <I2C_TransferConfig+0x60>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	43db      	mvns	r3, r3
 80050ac:	ea02 0103 	and.w	r1, r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	03ff63ff 	.word	0x03ff63ff

080050cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d138      	bne.n	8005154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e032      	b.n	8005156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800511e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6819      	ldr	r1, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b20      	cmp	r3, #32
 8005176:	d139      	bne.n	80051ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005182:	2302      	movs	r3, #2
 8005184:	e033      	b.n	80051ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	; 0x24
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <HAL_PWREx_GetVoltageRange+0x18>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40007000 	.word	0x40007000

08005218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005226:	d130      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005228:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	d038      	beq.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2232      	movs	r2, #50	; 0x32
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0c9b      	lsrs	r3, r3, #18
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800525c:	e002      	b.n	8005264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3b01      	subs	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005270:	d102      	bne.n	8005278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f2      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005284:	d110      	bne.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d007      	beq.n	80052a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052a0:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40007000 	.word	0x40007000
 80052bc:	20000004 	.word	0x20000004
 80052c0:	431bde83 	.word	0x431bde83

080052c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e3ca      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d6:	4b97      	ldr	r3, [pc, #604]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e0:	4b94      	ldr	r3, [pc, #592]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80e4 	beq.w	80054c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_RCC_OscConfig+0x4a>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	f040 808b 	bne.w	800541c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b01      	cmp	r3, #1
 800530a:	f040 8087 	bne.w	800541c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800530e:	4b89      	ldr	r3, [pc, #548]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_RCC_OscConfig+0x62>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e3a2      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	4b82      	ldr	r3, [pc, #520]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <HAL_RCC_OscConfig+0x7c>
 8005336:	4b7f      	ldr	r3, [pc, #508]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533e:	e005      	b.n	800534c <HAL_RCC_OscConfig+0x88>
 8005340:	4b7c      	ldr	r3, [pc, #496]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534c:	4293      	cmp	r3, r2
 800534e:	d223      	bcs.n	8005398 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fd87 	bl	8005e68 <RCC_SetFlashLatencyFromMSIRange>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e383      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005364:	4b73      	ldr	r3, [pc, #460]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a72      	ldr	r2, [pc, #456]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800536a:	f043 0308 	orr.w	r3, r3, #8
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b70      	ldr	r3, [pc, #448]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	496d      	ldr	r1, [pc, #436]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005382:	4b6c      	ldr	r3, [pc, #432]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	4968      	ldr	r1, [pc, #416]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
 8005396:	e025      	b.n	80053e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005398:	4b66      	ldr	r3, [pc, #408]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a65      	ldr	r2, [pc, #404]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800539e:	f043 0308 	orr.w	r3, r3, #8
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b63      	ldr	r3, [pc, #396]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	4960      	ldr	r1, [pc, #384]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053b6:	4b5f      	ldr	r3, [pc, #380]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	495b      	ldr	r1, [pc, #364]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fd47 	bl	8005e68 <RCC_SetFlashLatencyFromMSIRange>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e343      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053e4:	f000 fc4a 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b52      	ldr	r3, [pc, #328]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	091b      	lsrs	r3, r3, #4
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	4950      	ldr	r1, [pc, #320]	; (8005538 <HAL_RCC_OscConfig+0x274>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005400:	4a4e      	ldr	r2, [pc, #312]	; (800553c <HAL_RCC_OscConfig+0x278>)
 8005402:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005404:	4b4e      	ldr	r3, [pc, #312]	; (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fd fa0b 	bl	8002824 <HAL_InitTick>
 800540e:	4603      	mov	r3, r0
 8005410:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d052      	beq.n	80054be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	e327      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d032      	beq.n	800548a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005424:	4b43      	ldr	r3, [pc, #268]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a42      	ldr	r2, [pc, #264]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005430:	f7fd fbdc 	bl	8002bec <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005438:	f7fd fbd8 	bl	8002bec <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e310      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a36      	ldr	r2, [pc, #216]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800545c:	f043 0308 	orr.w	r3, r3, #8
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	4931      	ldr	r1, [pc, #196]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005474:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	492c      	ldr	r1, [pc, #176]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
 8005488:	e01a      	b.n	80054c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800548a:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a29      	ldr	r2, [pc, #164]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005496:	f7fd fba9 	bl	8002bec <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800549e:	f7fd fba5 	bl	8002bec <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e2dd      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f0      	bne.n	800549e <HAL_RCC_OscConfig+0x1da>
 80054bc:	e000      	b.n	80054c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d074      	beq.n	80055b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x21a>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d10e      	bne.n	80054f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d10b      	bne.n	80054f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d064      	beq.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d160      	bne.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e2ba      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fe:	d106      	bne.n	800550e <HAL_RCC_OscConfig+0x24a>
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a0b      	ldr	r2, [pc, #44]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	e026      	b.n	800555c <HAL_RCC_OscConfig+0x298>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005516:	d115      	bne.n	8005544 <HAL_RCC_OscConfig+0x280>
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a05      	ldr	r2, [pc, #20]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800551e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a02      	ldr	r2, [pc, #8]	; (8005534 <HAL_RCC_OscConfig+0x270>)
 800552a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e014      	b.n	800555c <HAL_RCC_OscConfig+0x298>
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	08010d38 	.word	0x08010d38
 800553c:	20000004 	.word	0x20000004
 8005540:	20000008 	.word	0x20000008
 8005544:	4ba0      	ldr	r3, [pc, #640]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a9f      	ldr	r2, [pc, #636]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b9d      	ldr	r3, [pc, #628]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a9c      	ldr	r2, [pc, #624]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fd fb42 	bl	8002bec <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556c:	f7fd fb3e 	bl	8002bec <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e276      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800557e:	4b92      	ldr	r3, [pc, #584]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x2a8>
 800558a:	e014      	b.n	80055b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fd fb2e 	bl	8002bec <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005594:	f7fd fb2a 	bl	8002bec <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e262      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055a6:	4b88      	ldr	r3, [pc, #544]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x2d0>
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d060      	beq.n	8005684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_OscConfig+0x310>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d119      	bne.n	8005602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d116      	bne.n	8005602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055d4:	4b7c      	ldr	r3, [pc, #496]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_OscConfig+0x328>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e23f      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ec:	4b76      	ldr	r3, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	061b      	lsls	r3, r3, #24
 80055fa:	4973      	ldr	r1, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005600:	e040      	b.n	8005684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d023      	beq.n	8005652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800560a:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a6e      	ldr	r2, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fd fae9 	bl	8002bec <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561e:	f7fd fae5 	bl	8002bec <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e21d      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005630:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563c:	4b62      	ldr	r3, [pc, #392]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	061b      	lsls	r3, r3, #24
 800564a:	495f      	ldr	r1, [pc, #380]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800564c:	4313      	orrs	r3, r2
 800564e:	604b      	str	r3, [r1, #4]
 8005650:	e018      	b.n	8005684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005652:	4b5d      	ldr	r3, [pc, #372]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5c      	ldr	r2, [pc, #368]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fd fac5 	bl	8002bec <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005666:	f7fd fac1 	bl	8002bec <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1f9      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005678:	4b53      	ldr	r3, [pc, #332]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f0      	bne.n	8005666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d03c      	beq.n	800570a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01c      	beq.n	80056d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005698:	4b4b      	ldr	r3, [pc, #300]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569e:	4a4a      	ldr	r2, [pc, #296]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fd faa0 	bl	8002bec <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b0:	f7fd fa9c 	bl	8002bec <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e1d4      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056c2:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80056c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ef      	beq.n	80056b0 <HAL_RCC_OscConfig+0x3ec>
 80056d0:	e01b      	b.n	800570a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d2:	4b3d      	ldr	r3, [pc, #244]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80056d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d8:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fd fa83 	bl	8002bec <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ea:	f7fd fa7f 	bl	8002bec <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e1b7      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056fc:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80056fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ef      	bne.n	80056ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a6 	beq.w	8005864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005718:	2300      	movs	r3, #0
 800571a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005728:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	6593      	str	r3, [r2, #88]	; 0x58
 8005734:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005744:	4b21      	ldr	r3, [pc, #132]	; (80057cc <HAL_RCC_OscConfig+0x508>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d118      	bne.n	8005782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_RCC_OscConfig+0x508>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_RCC_OscConfig+0x508>)
 8005756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575c:	f7fd fa46 	bl	8002bec <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005764:	f7fd fa42 	bl	8002bec <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e17a      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <HAL_RCC_OscConfig+0x508>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d108      	bne.n	800579c <HAL_RCC_OscConfig+0x4d8>
 800578a:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800579a:	e029      	b.n	80057f0 <HAL_RCC_OscConfig+0x52c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b05      	cmp	r3, #5
 80057a2:	d115      	bne.n	80057d0 <HAL_RCC_OscConfig+0x50c>
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80057ac:	f043 0304 	orr.w	r3, r3, #4
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ba:	4a03      	ldr	r2, [pc, #12]	; (80057c8 <HAL_RCC_OscConfig+0x504>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057c4:	e014      	b.n	80057f0 <HAL_RCC_OscConfig+0x52c>
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40007000 	.word	0x40007000
 80057d0:	4b9c      	ldr	r3, [pc, #624]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	4a9b      	ldr	r2, [pc, #620]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057e0:	4b98      	ldr	r3, [pc, #608]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	4a97      	ldr	r2, [pc, #604]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7fd f9f8 	bl	8002bec <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005800:	f7fd f9f4 	bl	8002bec <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e12a      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005816:	4b8b      	ldr	r3, [pc, #556]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ed      	beq.n	8005800 <HAL_RCC_OscConfig+0x53c>
 8005824:	e015      	b.n	8005852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fd f9e1 	bl	8002bec <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fd f9dd 	bl	8002bec <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e113      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005844:	4b7f      	ldr	r3, [pc, #508]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ed      	bne.n	800582e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005852:	7ffb      	ldrb	r3, [r7, #31]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d105      	bne.n	8005864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005858:	4b7a      	ldr	r3, [pc, #488]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	4a79      	ldr	r2, [pc, #484]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 800585e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005862:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80fe 	beq.w	8005a6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	2b02      	cmp	r3, #2
 8005874:	f040 80d0 	bne.w	8005a18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005878:	4b72      	ldr	r3, [pc, #456]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 0203 	and.w	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	429a      	cmp	r2, r3
 800588a:	d130      	bne.n	80058ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	3b01      	subs	r3, #1
 8005898:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d127      	bne.n	80058ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11f      	bne.n	80058ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058b8:	2a07      	cmp	r2, #7
 80058ba:	bf14      	ite	ne
 80058bc:	2201      	movne	r2, #1
 80058be:	2200      	moveq	r2, #0
 80058c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d113      	bne.n	80058ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	3b01      	subs	r3, #1
 80058d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	3b01      	subs	r3, #1
 80058e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d06e      	beq.n	80059cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d069      	beq.n	80059c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0ad      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005910:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a4b      	ldr	r2, [pc, #300]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800591c:	f7fd f966 	bl	8002bec <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fd f962 	bl	8002bec <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e09a      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005936:	4b43      	ldr	r3, [pc, #268]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005942:	4b40      	ldr	r3, [pc, #256]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <HAL_RCC_OscConfig+0x784>)
 8005948:	4013      	ands	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005952:	3a01      	subs	r2, #1
 8005954:	0112      	lsls	r2, r2, #4
 8005956:	4311      	orrs	r1, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800595c:	0212      	lsls	r2, r2, #8
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005964:	0852      	lsrs	r2, r2, #1
 8005966:	3a01      	subs	r2, #1
 8005968:	0552      	lsls	r2, r2, #21
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005970:	0852      	lsrs	r2, r2, #1
 8005972:	3a01      	subs	r2, #1
 8005974:	0652      	lsls	r2, r2, #25
 8005976:	4311      	orrs	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800597c:	0912      	lsrs	r2, r2, #4
 800597e:	0452      	lsls	r2, r2, #17
 8005980:	430a      	orrs	r2, r1
 8005982:	4930      	ldr	r1, [pc, #192]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005984:	4313      	orrs	r3, r2
 8005986:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005988:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2d      	ldr	r2, [pc, #180]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 800598e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005992:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005994:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 800599a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059a0:	f7fd f924 	bl	8002bec <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fd f920 	bl	8002bec <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e058      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ba:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059c6:	e050      	b.n	8005a6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e04f      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d148      	bne.n	8005a6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80059de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059e4:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 80059ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059f0:	f7fd f8fc 	bl	8002bec <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f8:	f7fd f8f8 	bl	8002bec <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e030      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0x734>
 8005a16:	e028      	b.n	8005a6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d023      	beq.n	8005a66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <HAL_RCC_OscConfig+0x780>)
 8005a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fd f8df 	bl	8002bec <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a30:	e00c      	b.n	8005a4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fd f8db 	bl	8002bec <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d905      	bls.n	8005a4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e013      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
 8005a44:	40021000 	.word	0x40021000
 8005a48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_OscConfig+0x7b0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ec      	bne.n	8005a32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_RCC_OscConfig+0x7b0>)
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	4905      	ldr	r1, [pc, #20]	; (8005a74 <HAL_RCC_OscConfig+0x7b0>)
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <HAL_RCC_OscConfig+0x7b4>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	60cb      	str	r3, [r1, #12]
 8005a64:	e001      	b.n	8005a6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40021000 	.word	0x40021000
 8005a78:	feeefffc 	.word	0xfeeefffc

08005a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0e7      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a90:	4b75      	ldr	r3, [pc, #468]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d910      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b72      	ldr	r3, [pc, #456]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 0207 	bic.w	r2, r3, #7
 8005aa6:	4970      	ldr	r1, [pc, #448]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	4b6e      	ldr	r3, [pc, #440]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0cf      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	4b66      	ldr	r3, [pc, #408]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d908      	bls.n	8005aee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005adc:	4b63      	ldr	r3, [pc, #396]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4960      	ldr	r1, [pc, #384]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d04c      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d107      	bne.n	8005b12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b02:	4b5a      	ldr	r3, [pc, #360]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d121      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e0a6      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d107      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1a:	4b54      	ldr	r3, [pc, #336]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d115      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e09a      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b32:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e08e      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e086      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b52:	4b46      	ldr	r3, [pc, #280]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 0203 	bic.w	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4943      	ldr	r1, [pc, #268]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b64:	f7fd f842 	bl	8002bec <HAL_GetTick>
 8005b68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6c:	f7fd f83e 	bl	8002bec <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e06e      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b82:	4b3a      	ldr	r3, [pc, #232]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 020c 	and.w	r2, r3, #12
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d1eb      	bne.n	8005b6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d208      	bcs.n	8005bc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb0:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	492b      	ldr	r1, [pc, #172]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc2:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d210      	bcs.n	8005bf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd0:	4b25      	ldr	r3, [pc, #148]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 0207 	bic.w	r2, r3, #7
 8005bd8:	4923      	ldr	r1, [pc, #140]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be0:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <HAL_RCC_ClockConfig+0x1ec>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d001      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e036      	b.n	8005c60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	4918      	ldr	r1, [pc, #96]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4910      	ldr	r1, [pc, #64]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c30:	f000 f824 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <HAL_RCC_ClockConfig+0x1f0>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	490b      	ldr	r1, [pc, #44]	; (8005c70 <HAL_RCC_ClockConfig+0x1f4>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	f003 031f 	and.w	r3, r3, #31
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4c:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <HAL_RCC_ClockConfig+0x1f8>)
 8005c4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <HAL_RCC_ClockConfig+0x1fc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fc fde5 	bl	8002824 <HAL_InitTick>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40022000 	.word	0x40022000
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	08010d38 	.word	0x08010d38
 8005c74:	20000004 	.word	0x20000004
 8005c78:	20000008 	.word	0x20000008

08005c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c94:	4b3b      	ldr	r3, [pc, #236]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d121      	bne.n	8005cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d11e      	bne.n	8005cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cb0:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	e005      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ccc:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10d      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cec:	e00a      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d102      	bne.n	8005cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cf4:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e004      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d00:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d134      	bne.n	8005d74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d003      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0xac>
 8005d20:	e005      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d22:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005d24:	617b      	str	r3, [r7, #20]
      break;
 8005d26:	e005      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d28:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d2a:	617b      	str	r3, [r7, #20]
      break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	617b      	str	r3, [r7, #20]
      break;
 8005d32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	091b      	lsrs	r3, r3, #4
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	3301      	adds	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	fb03 f202 	mul.w	r2, r3, r2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	0e5b      	lsrs	r3, r3, #25
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	3301      	adds	r3, #1
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d74:	69bb      	ldr	r3, [r7, #24]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3724      	adds	r7, #36	; 0x24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40021000 	.word	0x40021000
 8005d88:	08010d50 	.word	0x08010d50
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	007a1200 	.word	0x007a1200

08005d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000004 	.word	0x20000004

08005dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005db0:	f7ff fff0 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4904      	ldr	r1, [pc, #16]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	08010d48 	.word	0x08010d48

08005dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ddc:	f7ff ffda 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	0adb      	lsrs	r3, r3, #11
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	4904      	ldr	r1, [pc, #16]	; (8005e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	08010d48 	.word	0x08010d48

08005e04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	220f      	movs	r2, #15
 8005e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0203 	and.w	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_GetClockConfig+0x5c>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	08db      	lsrs	r3, r3, #3
 8005e3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e46:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <HAL_RCC_GetClockConfig+0x60>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0207 	and.w	r2, r3, #7
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40022000 	.word	0x40022000

08005e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e74:	4b2a      	ldr	r3, [pc, #168]	; (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e80:	f7ff f9bc 	bl	80051fc <HAL_PWREx_GetVoltageRange>
 8005e84:	6178      	str	r0, [r7, #20]
 8005e86:	e014      	b.n	8005eb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	6593      	str	r3, [r2, #88]	; 0x58
 8005e94:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ea0:	f7ff f9ac 	bl	80051fc <HAL_PWREx_GetVoltageRange>
 8005ea4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb8:	d10b      	bne.n	8005ed2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d919      	bls.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2ba0      	cmp	r3, #160	; 0xa0
 8005ec4:	d902      	bls.n	8005ecc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e013      	b.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ecc:	2301      	movs	r3, #1
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	e010      	b.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b80      	cmp	r3, #128	; 0x80
 8005ed6:	d902      	bls.n	8005ede <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ed8:	2303      	movs	r3, #3
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e00a      	b.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b80      	cmp	r3, #128	; 0x80
 8005ee2:	d102      	bne.n	8005eea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	e004      	b.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b70      	cmp	r3, #112	; 0x70
 8005eee:	d101      	bne.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 0207 	bic.w	r2, r3, #7
 8005efc:	4909      	ldr	r1, [pc, #36]	; (8005f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f04:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d001      	beq.n	8005f16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40022000 	.word	0x40022000

08005f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f30:	2300      	movs	r3, #0
 8005f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f34:	2300      	movs	r3, #0
 8005f36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d041      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f4c:	d02a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f52:	d824      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f58:	d008      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f5e:	d81e      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f68:	d010      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f6a:	e018      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f6c:	4b86      	ldr	r3, [pc, #536]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4a85      	ldr	r2, [pc, #532]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f78:	e015      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fabb 	bl	80064fc <RCCEx_PLLSAI1_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f8a:	e00c      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3320      	adds	r3, #32
 8005f90:	2100      	movs	r1, #0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fba6 	bl	80066e4 <RCCEx_PLLSAI2_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa6:	7cfb      	ldrb	r3, [r7, #19]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fac:	4b76      	ldr	r3, [pc, #472]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	4973      	ldr	r1, [pc, #460]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005fc2:	e001      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d041      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fdc:	d02a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005fde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fe2:	d824      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fe8:	d008      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fee:	d81e      	bhi.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff8:	d010      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ffa:	e018      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ffc:	4b62      	ldr	r3, [pc, #392]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4a61      	ldr	r2, [pc, #388]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006006:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006008:	e015      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fa73 	bl	80064fc <RCCEx_PLLSAI1_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800601a:	e00c      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3320      	adds	r3, #32
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb5e 	bl	80066e4 <RCCEx_PLLSAI2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800602c:	e003      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	74fb      	strb	r3, [r7, #19]
      break;
 8006032:	e000      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006036:	7cfb      	ldrb	r3, [r7, #19]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800603c:	4b52      	ldr	r3, [pc, #328]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006042:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604a:	494f      	ldr	r1, [pc, #316]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006052:	e001      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80a0 	beq.w	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800606a:	4b47      	ldr	r3, [pc, #284]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006080:	4b41      	ldr	r3, [pc, #260]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	4a40      	ldr	r2, [pc, #256]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608a:	6593      	str	r3, [r2, #88]	; 0x58
 800608c:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006098:	2301      	movs	r3, #1
 800609a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609c:	4b3b      	ldr	r3, [pc, #236]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a3a      	ldr	r2, [pc, #232]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060a8:	f7fc fda0 	bl	8002bec <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ae:	e009      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b0:	f7fc fd9c 	bl	8002bec <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d902      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	74fb      	strb	r3, [r7, #19]
        break;
 80060c2:	e005      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060c4:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0ef      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80060d0:	7cfb      	ldrb	r3, [r7, #19]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d15c      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060d6:	4b2c      	ldr	r3, [pc, #176]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01f      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d019      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f4:	4b24      	ldr	r3, [pc, #144]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006100:	4b21      	ldr	r3, [pc, #132]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006106:	4a20      	ldr	r2, [pc, #128]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006110:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006120:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006132:	f7fc fd5b 	bl	8002bec <HAL_GetTick>
 8006136:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	e00b      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fc fd57 	bl	8002bec <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d902      	bls.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	74fb      	strb	r3, [r7, #19]
            break;
 8006150:	e006      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ec      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006160:	7cfb      	ldrb	r3, [r7, #19]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10c      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006166:	4b08      	ldr	r3, [pc, #32]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006176:	4904      	ldr	r1, [pc, #16]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800617e:	e009      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	74bb      	strb	r3, [r7, #18]
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006194:	7c7b      	ldrb	r3, [r7, #17]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619a:	4b9e      	ldr	r3, [pc, #632]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619e:	4a9d      	ldr	r2, [pc, #628]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061b2:	4b98      	ldr	r3, [pc, #608]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f023 0203 	bic.w	r2, r3, #3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	4994      	ldr	r1, [pc, #592]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d4:	4b8f      	ldr	r3, [pc, #572]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f023 020c 	bic.w	r2, r3, #12
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	498c      	ldr	r1, [pc, #560]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061f6:	4b87      	ldr	r3, [pc, #540]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	4983      	ldr	r1, [pc, #524]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006218:	4b7e      	ldr	r3, [pc, #504]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	497b      	ldr	r1, [pc, #492]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800623a:	4b76      	ldr	r3, [pc, #472]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006248:	4972      	ldr	r1, [pc, #456]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800625c:	4b6d      	ldr	r3, [pc, #436]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	496a      	ldr	r1, [pc, #424]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627e:	4b65      	ldr	r3, [pc, #404]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628c:	4961      	ldr	r1, [pc, #388]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062a0:	4b5c      	ldr	r3, [pc, #368]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ae:	4959      	ldr	r1, [pc, #356]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c2:	4b54      	ldr	r3, [pc, #336]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d0:	4950      	ldr	r1, [pc, #320]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e4:	4b4b      	ldr	r3, [pc, #300]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	4948      	ldr	r1, [pc, #288]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006306:	4b43      	ldr	r3, [pc, #268]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006314:	493f      	ldr	r1, [pc, #252]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d028      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006328:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006336:	4937      	ldr	r1, [pc, #220]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006346:	d106      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b32      	ldr	r3, [pc, #200]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a31      	ldr	r2, [pc, #196]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
 8006354:	e011      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800635e:	d10c      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f8c8 	bl	80064fc <RCCEx_PLLSAI1_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006370:	7cfb      	ldrb	r3, [r7, #19]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006376:	7cfb      	ldrb	r3, [r7, #19]
 8006378:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d028      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006386:	4b23      	ldr	r3, [pc, #140]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	491f      	ldr	r1, [pc, #124]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a4:	d106      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a6:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4a1a      	ldr	r2, [pc, #104]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b0:	60d3      	str	r3, [r2, #12]
 80063b2:	e011      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	2101      	movs	r1, #1
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f899 	bl	80064fc <RCCEx_PLLSAI1_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ce:	7cfb      	ldrb	r3, [r7, #19]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80063d4:	7cfb      	ldrb	r3, [r7, #19]
 80063d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02b      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f2:	4908      	ldr	r1, [pc, #32]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006402:	d109      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006404:	4b03      	ldr	r3, [pc, #12]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4a02      	ldr	r2, [pc, #8]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800640e:	60d3      	str	r3, [r2, #12]
 8006410:	e014      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006420:	d10c      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f867 	bl	80064fc <RCCEx_PLLSAI1_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006438:	7cfb      	ldrb	r3, [r7, #19]
 800643a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d02f      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006448:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006456:	4928      	ldr	r1, [pc, #160]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006466:	d10d      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3304      	adds	r3, #4
 800646c:	2102      	movs	r1, #2
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f844 	bl	80064fc <RCCEx_PLLSAI1_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d014      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	74bb      	strb	r3, [r7, #18]
 8006482:	e011      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	d10c      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3320      	adds	r3, #32
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f925 	bl	80066e4 <RCCEx_PLLSAI2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c2:	490d      	ldr	r1, [pc, #52]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e6:	4904      	ldr	r1, [pc, #16]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40021000 	.word	0x40021000

080064fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800650a:	4b75      	ldr	r3, [pc, #468]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d018      	beq.n	8006548 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006516:	4b72      	ldr	r3, [pc, #456]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0203 	and.w	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d10d      	bne.n	8006542 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
       ||
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800652e:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
       ||
 800653e:	429a      	cmp	r2, r3
 8006540:	d047      	beq.n	80065d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
 8006546:	e044      	b.n	80065d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d018      	beq.n	8006582 <RCCEx_PLLSAI1_Config+0x86>
 8006550:	2b03      	cmp	r3, #3
 8006552:	d825      	bhi.n	80065a0 <RCCEx_PLLSAI1_Config+0xa4>
 8006554:	2b01      	cmp	r3, #1
 8006556:	d002      	beq.n	800655e <RCCEx_PLLSAI1_Config+0x62>
 8006558:	2b02      	cmp	r3, #2
 800655a:	d009      	beq.n	8006570 <RCCEx_PLLSAI1_Config+0x74>
 800655c:	e020      	b.n	80065a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800655e:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d11d      	bne.n	80065a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800656e:	e01a      	b.n	80065a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006570:	4b5b      	ldr	r3, [pc, #364]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006578:	2b00      	cmp	r3, #0
 800657a:	d116      	bne.n	80065aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006580:	e013      	b.n	80065aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006582:	4b57      	ldr	r3, [pc, #348]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800658e:	4b54      	ldr	r3, [pc, #336]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800659e:	e006      	b.n	80065ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
      break;
 80065a4:	e004      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065a6:	bf00      	nop
 80065a8:	e002      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065b6:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	430b      	orrs	r3, r1
 80065cc:	4944      	ldr	r1, [pc, #272]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d17d      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065d8:	4b41      	ldr	r3, [pc, #260]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a40      	ldr	r2, [pc, #256]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fc fb02 	bl	8002bec <HAL_GetTick>
 80065e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065ea:	e009      	b.n	8006600 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065ec:	f7fc fafe 	bl	8002bec <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d902      	bls.n	8006600 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	73fb      	strb	r3, [r7, #15]
        break;
 80065fe:	e005      	b.n	800660c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006600:	4b37      	ldr	r3, [pc, #220]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1ef      	bne.n	80065ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d160      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d111      	bne.n	800663c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006618:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	0211      	lsls	r1, r2, #8
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68d2      	ldr	r2, [r2, #12]
 800662e:	0912      	lsrs	r2, r2, #4
 8006630:	0452      	lsls	r2, r2, #17
 8006632:	430a      	orrs	r2, r1
 8006634:	492a      	ldr	r1, [pc, #168]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006636:	4313      	orrs	r3, r2
 8006638:	610b      	str	r3, [r1, #16]
 800663a:	e027      	b.n	800668c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d112      	bne.n	8006668 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006642:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800664a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6892      	ldr	r2, [r2, #8]
 8006652:	0211      	lsls	r1, r2, #8
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6912      	ldr	r2, [r2, #16]
 8006658:	0852      	lsrs	r2, r2, #1
 800665a:	3a01      	subs	r2, #1
 800665c:	0552      	lsls	r2, r2, #21
 800665e:	430a      	orrs	r2, r1
 8006660:	491f      	ldr	r1, [pc, #124]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006662:	4313      	orrs	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
 8006666:	e011      	b.n	800668c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6892      	ldr	r2, [r2, #8]
 8006678:	0211      	lsls	r1, r2, #8
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6952      	ldr	r2, [r2, #20]
 800667e:	0852      	lsrs	r2, r2, #1
 8006680:	3a01      	subs	r2, #1
 8006682:	0652      	lsls	r2, r2, #25
 8006684:	430a      	orrs	r2, r1
 8006686:	4916      	ldr	r1, [pc, #88]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006688:	4313      	orrs	r3, r2
 800668a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800668c:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006696:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006698:	f7fc faa8 	bl	8002bec <HAL_GetTick>
 800669c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800669e:	e009      	b.n	80066b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066a0:	f7fc faa4 	bl	8002bec <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d902      	bls.n	80066b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	73fb      	strb	r3, [r7, #15]
          break;
 80066b2:	e005      	b.n	80066c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0ef      	beq.n	80066a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	4904      	ldr	r1, [pc, #16]	; (80066e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40021000 	.word	0x40021000

080066e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066f2:	4b6a      	ldr	r3, [pc, #424]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d018      	beq.n	8006730 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066fe:	4b67      	ldr	r3, [pc, #412]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0203 	and.w	r2, r3, #3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d10d      	bne.n	800672a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
       ||
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006716:	4b61      	ldr	r3, [pc, #388]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
       ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d047      	beq.n	80067ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	e044      	b.n	80067ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d018      	beq.n	800676a <RCCEx_PLLSAI2_Config+0x86>
 8006738:	2b03      	cmp	r3, #3
 800673a:	d825      	bhi.n	8006788 <RCCEx_PLLSAI2_Config+0xa4>
 800673c:	2b01      	cmp	r3, #1
 800673e:	d002      	beq.n	8006746 <RCCEx_PLLSAI2_Config+0x62>
 8006740:	2b02      	cmp	r3, #2
 8006742:	d009      	beq.n	8006758 <RCCEx_PLLSAI2_Config+0x74>
 8006744:	e020      	b.n	8006788 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006746:	4b55      	ldr	r3, [pc, #340]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d11d      	bne.n	800678e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006756:	e01a      	b.n	800678e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006758:	4b50      	ldr	r3, [pc, #320]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006768:	e013      	b.n	8006792 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800676a:	4b4c      	ldr	r3, [pc, #304]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006776:	4b49      	ldr	r3, [pc, #292]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006786:	e006      	b.n	8006796 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
      break;
 800678c:	e004      	b.n	8006798 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006796:	bf00      	nop
    }

    if(status == HAL_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800679e:	4b3f      	ldr	r3, [pc, #252]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	430b      	orrs	r3, r1
 80067b4:	4939      	ldr	r1, [pc, #228]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d167      	bne.n	8006890 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80067c0:	4b36      	ldr	r3, [pc, #216]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a35      	ldr	r2, [pc, #212]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067cc:	f7fc fa0e 	bl	8002bec <HAL_GetTick>
 80067d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067d2:	e009      	b.n	80067e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067d4:	f7fc fa0a 	bl	8002bec <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d902      	bls.n	80067e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	73fb      	strb	r3, [r7, #15]
        break;
 80067e6:	e005      	b.n	80067f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067e8:	4b2c      	ldr	r3, [pc, #176]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1ef      	bne.n	80067d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d14a      	bne.n	8006890 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d111      	bne.n	8006824 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006800:	4b26      	ldr	r3, [pc, #152]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6892      	ldr	r2, [r2, #8]
 8006810:	0211      	lsls	r1, r2, #8
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68d2      	ldr	r2, [r2, #12]
 8006816:	0912      	lsrs	r2, r2, #4
 8006818:	0452      	lsls	r2, r2, #17
 800681a:	430a      	orrs	r2, r1
 800681c:	491f      	ldr	r1, [pc, #124]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 800681e:	4313      	orrs	r3, r2
 8006820:	614b      	str	r3, [r1, #20]
 8006822:	e011      	b.n	8006848 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006824:	4b1d      	ldr	r3, [pc, #116]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800682c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6892      	ldr	r2, [r2, #8]
 8006834:	0211      	lsls	r1, r2, #8
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6912      	ldr	r2, [r2, #16]
 800683a:	0852      	lsrs	r2, r2, #1
 800683c:	3a01      	subs	r2, #1
 800683e:	0652      	lsls	r2, r2, #25
 8006840:	430a      	orrs	r2, r1
 8006842:	4916      	ldr	r1, [pc, #88]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006844:	4313      	orrs	r3, r2
 8006846:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006848:	4b14      	ldr	r3, [pc, #80]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a13      	ldr	r2, [pc, #76]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006854:	f7fc f9ca 	bl	8002bec <HAL_GetTick>
 8006858:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800685a:	e009      	b.n	8006870 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800685c:	f7fc f9c6 	bl	8002bec <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d902      	bls.n	8006870 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	73fb      	strb	r3, [r7, #15]
          break;
 800686e:	e005      	b.n	800687c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ef      	beq.n	800685c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006882:	4b06      	ldr	r3, [pc, #24]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	4904      	ldr	r1, [pc, #16]	; (800689c <RCCEx_PLLSAI2_Config+0x1b8>)
 800688c:	4313      	orrs	r3, r2
 800688e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000

080068a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e049      	b.n	8006946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fb fe6a 	bl	80025a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f000 fd16 	bl	8007310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d001      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e04f      	b.n	8006a08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a23      	ldr	r2, [pc, #140]	; (8006a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01d      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x76>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d018      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x76>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x76>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00e      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x76>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x76>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0x76>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d115      	bne.n	80069f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b06      	cmp	r3, #6
 80069d6:	d015      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0xb4>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069de:	d011      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f0:	e008      	b.n	8006a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0201 	orr.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40013400 	.word	0x40013400
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	00010007 	.word	0x00010007

08006a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e049      	b.n	8006ad6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f841 	bl	8006ade <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f000 fc4e 	bl	8007310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <HAL_TIM_PWM_Start+0x24>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	bf14      	ite	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	2300      	moveq	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e03c      	b.n	8006b92 <HAL_TIM_PWM_Start+0x9e>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d109      	bne.n	8006b32 <HAL_TIM_PWM_Start+0x3e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	e02f      	b.n	8006b92 <HAL_TIM_PWM_Start+0x9e>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d109      	bne.n	8006b4c <HAL_TIM_PWM_Start+0x58>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	bf14      	ite	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	2300      	moveq	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	e022      	b.n	8006b92 <HAL_TIM_PWM_Start+0x9e>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b0c      	cmp	r3, #12
 8006b50:	d109      	bne.n	8006b66 <HAL_TIM_PWM_Start+0x72>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	e015      	b.n	8006b92 <HAL_TIM_PWM_Start+0x9e>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d109      	bne.n	8006b80 <HAL_TIM_PWM_Start+0x8c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	e008      	b.n	8006b92 <HAL_TIM_PWM_Start+0x9e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	bf14      	ite	ne
 8006b8c:	2301      	movne	r3, #1
 8006b8e:	2300      	moveq	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e09c      	b.n	8006cd4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_PWM_Start+0xb6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba8:	e023      	b.n	8006bf2 <HAL_TIM_PWM_Start+0xfe>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_PWM_Start+0xc6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb8:	e01b      	b.n	8006bf2 <HAL_TIM_PWM_Start+0xfe>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_PWM_Start+0xd6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc8:	e013      	b.n	8006bf2 <HAL_TIM_PWM_Start+0xfe>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b0c      	cmp	r3, #12
 8006bce:	d104      	bne.n	8006bda <HAL_TIM_PWM_Start+0xe6>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bd8:	e00b      	b.n	8006bf2 <HAL_TIM_PWM_Start+0xfe>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	d104      	bne.n	8006bea <HAL_TIM_PWM_Start+0xf6>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006be8:	e003      	b.n	8006bf2 <HAL_TIM_PWM_Start+0xfe>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 ff92 	bl	8007b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a35      	ldr	r2, [pc, #212]	; (8006cdc <HAL_TIM_PWM_Start+0x1e8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x13e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a34      	ldr	r2, [pc, #208]	; (8006ce0 <HAL_TIM_PWM_Start+0x1ec>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00e      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x13e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a32      	ldr	r2, [pc, #200]	; (8006ce4 <HAL_TIM_PWM_Start+0x1f0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d009      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x13e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a31      	ldr	r2, [pc, #196]	; (8006ce8 <HAL_TIM_PWM_Start+0x1f4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d004      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x13e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <HAL_TIM_PWM_Start+0x1f8>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_PWM_Start+0x142>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_TIM_PWM_Start+0x144>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <HAL_TIM_PWM_Start+0x1e8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01d      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x19e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5e:	d018      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x19e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <HAL_TIM_PWM_Start+0x1fc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x19e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a21      	ldr	r2, [pc, #132]	; (8006cf4 <HAL_TIM_PWM_Start+0x200>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00e      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x19e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <HAL_TIM_PWM_Start+0x204>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d009      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x19e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <HAL_TIM_PWM_Start+0x1ec>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d004      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x19e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <HAL_TIM_PWM_Start+0x1f0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d115      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <HAL_TIM_PWM_Start+0x208>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b06      	cmp	r3, #6
 8006ca2:	d015      	beq.n	8006cd0 <HAL_TIM_PWM_Start+0x1dc>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006caa:	d011      	beq.n	8006cd0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbc:	e008      	b.n	8006cd0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0201 	orr.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e000      	b.n	8006cd2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	40013400 	.word	0x40013400
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	00010007 	.word	0x00010007

08006d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d020      	beq.n	8006d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01b      	beq.n	8006d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0202 	mvn.w	r2, #2
 8006d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fac1 	bl	80072d2 <HAL_TIM_IC_CaptureCallback>
 8006d50:	e005      	b.n	8006d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fab3 	bl	80072be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fac4 	bl	80072e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d020      	beq.n	8006db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f06f 0204 	mvn.w	r2, #4
 8006d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa9b 	bl	80072d2 <HAL_TIM_IC_CaptureCallback>
 8006d9c:	e005      	b.n	8006daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa8d 	bl	80072be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fa9e 	bl	80072e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d020      	beq.n	8006dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01b      	beq.n	8006dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0208 	mvn.w	r2, #8
 8006dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa75 	bl	80072d2 <HAL_TIM_IC_CaptureCallback>
 8006de8:	e005      	b.n	8006df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa67 	bl	80072be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fa78 	bl	80072e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d020      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01b      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f06f 0210 	mvn.w	r2, #16
 8006e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa4f 	bl	80072d2 <HAL_TIM_IC_CaptureCallback>
 8006e34:	e005      	b.n	8006e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa41 	bl	80072be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa52 	bl	80072e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00c      	beq.n	8006e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0201 	mvn.w	r2, #1
 8006e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fb fa84 	bl	8002374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 ff02 	bl	8007c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fefa 	bl	8007ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa11 	bl	80072fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0220 	mvn.w	r2, #32
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fec2 	bl	8007c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e0ff      	b.n	8007122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b14      	cmp	r3, #20
 8006f2e:	f200 80f0 	bhi.w	8007112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08007113 	.word	0x08007113
 8006f40:	08007113 	.word	0x08007113
 8006f44:	08007113 	.word	0x08007113
 8006f48:	08006fcd 	.word	0x08006fcd
 8006f4c:	08007113 	.word	0x08007113
 8006f50:	08007113 	.word	0x08007113
 8006f54:	08007113 	.word	0x08007113
 8006f58:	0800700f 	.word	0x0800700f
 8006f5c:	08007113 	.word	0x08007113
 8006f60:	08007113 	.word	0x08007113
 8006f64:	08007113 	.word	0x08007113
 8006f68:	0800704f 	.word	0x0800704f
 8006f6c:	08007113 	.word	0x08007113
 8006f70:	08007113 	.word	0x08007113
 8006f74:	08007113 	.word	0x08007113
 8006f78:	08007091 	.word	0x08007091
 8006f7c:	08007113 	.word	0x08007113
 8006f80:	08007113 	.word	0x08007113
 8006f84:	08007113 	.word	0x08007113
 8006f88:	080070d1 	.word	0x080070d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fa56 	bl	8007444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0208 	orr.w	r2, r2, #8
 8006fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0204 	bic.w	r2, r2, #4
 8006fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6999      	ldr	r1, [r3, #24]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	619a      	str	r2, [r3, #24]
      break;
 8006fca:	e0a5      	b.n	8007118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fac6 	bl	8007564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6999      	ldr	r1, [r3, #24]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	619a      	str	r2, [r3, #24]
      break;
 800700c:	e084      	b.n	8007118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fb2f 	bl	8007678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0208 	orr.w	r2, r2, #8
 8007028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0204 	bic.w	r2, r2, #4
 8007038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	61da      	str	r2, [r3, #28]
      break;
 800704c:	e064      	b.n	8007118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fb97 	bl	8007788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69d9      	ldr	r1, [r3, #28]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	021a      	lsls	r2, r3, #8
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	61da      	str	r2, [r3, #28]
      break;
 800708e:	e043      	b.n	8007118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fbe0 	bl	800785c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0208 	orr.w	r2, r2, #8
 80070aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0204 	bic.w	r2, r2, #4
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070ce:	e023      	b.n	8007118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 fc24 	bl	8007924 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	021a      	lsls	r2, r3, #8
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007110:	e002      	b.n	8007118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
      break;
 8007116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop

0800712c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIM_ConfigClockSource+0x1c>
 8007144:	2302      	movs	r3, #2
 8007146:	e0b6      	b.n	80072b6 <HAL_TIM_ConfigClockSource+0x18a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800716a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007184:	d03e      	beq.n	8007204 <HAL_TIM_ConfigClockSource+0xd8>
 8007186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718a:	f200 8087 	bhi.w	800729c <HAL_TIM_ConfigClockSource+0x170>
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	f000 8086 	beq.w	80072a2 <HAL_TIM_ConfigClockSource+0x176>
 8007196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719a:	d87f      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 800719c:	2b70      	cmp	r3, #112	; 0x70
 800719e:	d01a      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0xaa>
 80071a0:	2b70      	cmp	r3, #112	; 0x70
 80071a2:	d87b      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 80071a4:	2b60      	cmp	r3, #96	; 0x60
 80071a6:	d050      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x11e>
 80071a8:	2b60      	cmp	r3, #96	; 0x60
 80071aa:	d877      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 80071ac:	2b50      	cmp	r3, #80	; 0x50
 80071ae:	d03c      	beq.n	800722a <HAL_TIM_ConfigClockSource+0xfe>
 80071b0:	2b50      	cmp	r3, #80	; 0x50
 80071b2:	d873      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d058      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x13e>
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d86f      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 80071bc:	2b30      	cmp	r3, #48	; 0x30
 80071be:	d064      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15e>
 80071c0:	2b30      	cmp	r3, #48	; 0x30
 80071c2:	d86b      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d060      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15e>
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d867      	bhi.n	800729c <HAL_TIM_ConfigClockSource+0x170>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d05c      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15e>
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d05a      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x15e>
 80071d4:	e062      	b.n	800729c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e6:	f000 fc7d 	bl	8007ae4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	609a      	str	r2, [r3, #8]
      break;
 8007202:	e04f      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007214:	f000 fc66 	bl	8007ae4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007226:	609a      	str	r2, [r3, #8]
      break;
 8007228:	e03c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	461a      	mov	r2, r3
 8007238:	f000 fbda 	bl	80079f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2150      	movs	r1, #80	; 0x50
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fc33 	bl	8007aae <TIM_ITRx_SetConfig>
      break;
 8007248:	e02c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007256:	461a      	mov	r2, r3
 8007258:	f000 fbf9 	bl	8007a4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2160      	movs	r1, #96	; 0x60
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fc23 	bl	8007aae <TIM_ITRx_SetConfig>
      break;
 8007268:	e01c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007276:	461a      	mov	r2, r3
 8007278:	f000 fbba 	bl	80079f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2140      	movs	r1, #64	; 0x40
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fc13 	bl	8007aae <TIM_ITRx_SetConfig>
      break;
 8007288:	e00c      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f000 fc0a 	bl	8007aae <TIM_ITRx_SetConfig>
      break;
 800729a:	e003      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	73fb      	strb	r3, [r7, #15]
      break;
 80072a0:	e000      	b.n	80072a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80072a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a40      	ldr	r2, [pc, #256]	; (8007424 <TIM_Base_SetConfig+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d00f      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a3d      	ldr	r2, [pc, #244]	; (8007428 <TIM_Base_SetConfig+0x118>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00b      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a3c      	ldr	r2, [pc, #240]	; (800742c <TIM_Base_SetConfig+0x11c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d007      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a3b      	ldr	r2, [pc, #236]	; (8007430 <TIM_Base_SetConfig+0x120>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a3a      	ldr	r2, [pc, #232]	; (8007434 <TIM_Base_SetConfig+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d108      	bne.n	8007362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2f      	ldr	r2, [pc, #188]	; (8007424 <TIM_Base_SetConfig+0x114>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d01f      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d01b      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a2c      	ldr	r2, [pc, #176]	; (8007428 <TIM_Base_SetConfig+0x118>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d017      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2b      	ldr	r2, [pc, #172]	; (800742c <TIM_Base_SetConfig+0x11c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <TIM_Base_SetConfig+0x120>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00f      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a29      	ldr	r2, [pc, #164]	; (8007434 <TIM_Base_SetConfig+0x124>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00b      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a28      	ldr	r2, [pc, #160]	; (8007438 <TIM_Base_SetConfig+0x128>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d007      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a27      	ldr	r2, [pc, #156]	; (800743c <TIM_Base_SetConfig+0x12c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d003      	beq.n	80073aa <TIM_Base_SetConfig+0x9a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a26      	ldr	r2, [pc, #152]	; (8007440 <TIM_Base_SetConfig+0x130>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d108      	bne.n	80073bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a10      	ldr	r2, [pc, #64]	; (8007424 <TIM_Base_SetConfig+0x114>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00f      	beq.n	8007408 <TIM_Base_SetConfig+0xf8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a12      	ldr	r2, [pc, #72]	; (8007434 <TIM_Base_SetConfig+0x124>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_Base_SetConfig+0xf8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a11      	ldr	r2, [pc, #68]	; (8007438 <TIM_Base_SetConfig+0x128>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_Base_SetConfig+0xf8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a10      	ldr	r2, [pc, #64]	; (800743c <TIM_Base_SetConfig+0x12c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0xf8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a0f      	ldr	r2, [pc, #60]	; (8007440 <TIM_Base_SetConfig+0x130>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d103      	bne.n	8007410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	615a      	str	r2, [r3, #20]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40012c00 	.word	0x40012c00
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800
 8007430:	40000c00 	.word	0x40000c00
 8007434:	40013400 	.word	0x40013400
 8007438:	40014000 	.word	0x40014000
 800743c:	40014400 	.word	0x40014400
 8007440:	40014800 	.word	0x40014800

08007444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f023 0201 	bic.w	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0303 	bic.w	r3, r3, #3
 800747e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 0302 	bic.w	r3, r3, #2
 8007490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <TIM_OC1_SetConfig+0x10c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00f      	beq.n	80074c4 <TIM_OC1_SetConfig+0x80>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a2b      	ldr	r2, [pc, #172]	; (8007554 <TIM_OC1_SetConfig+0x110>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00b      	beq.n	80074c4 <TIM_OC1_SetConfig+0x80>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <TIM_OC1_SetConfig+0x114>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_OC1_SetConfig+0x80>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a29      	ldr	r2, [pc, #164]	; (800755c <TIM_OC1_SetConfig+0x118>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_OC1_SetConfig+0x80>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a28      	ldr	r2, [pc, #160]	; (8007560 <TIM_OC1_SetConfig+0x11c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d10c      	bne.n	80074de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0308 	bic.w	r3, r3, #8
 80074ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f023 0304 	bic.w	r3, r3, #4
 80074dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <TIM_OC1_SetConfig+0x10c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00f      	beq.n	8007506 <TIM_OC1_SetConfig+0xc2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <TIM_OC1_SetConfig+0x110>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00b      	beq.n	8007506 <TIM_OC1_SetConfig+0xc2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a19      	ldr	r2, [pc, #100]	; (8007558 <TIM_OC1_SetConfig+0x114>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d007      	beq.n	8007506 <TIM_OC1_SetConfig+0xc2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a18      	ldr	r2, [pc, #96]	; (800755c <TIM_OC1_SetConfig+0x118>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_OC1_SetConfig+0xc2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a17      	ldr	r2, [pc, #92]	; (8007560 <TIM_OC1_SetConfig+0x11c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d111      	bne.n	800752a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800750c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	621a      	str	r2, [r3, #32]
}
 8007544:	bf00      	nop
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	40012c00 	.word	0x40012c00
 8007554:	40013400 	.word	0x40013400
 8007558:	40014000 	.word	0x40014000
 800755c:	40014400 	.word	0x40014400
 8007560:	40014800 	.word	0x40014800

08007564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	f023 0210 	bic.w	r2, r3, #16
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f023 0320 	bic.w	r3, r3, #32
 80075b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a28      	ldr	r2, [pc, #160]	; (8007664 <TIM_OC2_SetConfig+0x100>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_OC2_SetConfig+0x6c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a27      	ldr	r2, [pc, #156]	; (8007668 <TIM_OC2_SetConfig+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10d      	bne.n	80075ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <TIM_OC2_SetConfig+0x100>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00f      	beq.n	8007614 <TIM_OC2_SetConfig+0xb0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <TIM_OC2_SetConfig+0x104>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d00b      	beq.n	8007614 <TIM_OC2_SetConfig+0xb0>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <TIM_OC2_SetConfig+0x108>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d007      	beq.n	8007614 <TIM_OC2_SetConfig+0xb0>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <TIM_OC2_SetConfig+0x10c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d003      	beq.n	8007614 <TIM_OC2_SetConfig+0xb0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a19      	ldr	r2, [pc, #100]	; (8007674 <TIM_OC2_SetConfig+0x110>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d113      	bne.n	800763c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800761a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	621a      	str	r2, [r3, #32]
}
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40013400 	.word	0x40013400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800

08007678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a27      	ldr	r2, [pc, #156]	; (8007774 <TIM_OC3_SetConfig+0xfc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d003      	beq.n	80076e2 <TIM_OC3_SetConfig+0x6a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a26      	ldr	r2, [pc, #152]	; (8007778 <TIM_OC3_SetConfig+0x100>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10d      	bne.n	80076fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1c      	ldr	r2, [pc, #112]	; (8007774 <TIM_OC3_SetConfig+0xfc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00f      	beq.n	8007726 <TIM_OC3_SetConfig+0xae>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <TIM_OC3_SetConfig+0x100>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00b      	beq.n	8007726 <TIM_OC3_SetConfig+0xae>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a1a      	ldr	r2, [pc, #104]	; (800777c <TIM_OC3_SetConfig+0x104>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d007      	beq.n	8007726 <TIM_OC3_SetConfig+0xae>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a19      	ldr	r2, [pc, #100]	; (8007780 <TIM_OC3_SetConfig+0x108>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d003      	beq.n	8007726 <TIM_OC3_SetConfig+0xae>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a18      	ldr	r2, [pc, #96]	; (8007784 <TIM_OC3_SetConfig+0x10c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d113      	bne.n	800774e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800772c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40013400 	.word	0x40013400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800

08007788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	031b      	lsls	r3, r3, #12
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a18      	ldr	r2, [pc, #96]	; (8007848 <TIM_OC4_SetConfig+0xc0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00f      	beq.n	800780c <TIM_OC4_SetConfig+0x84>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <TIM_OC4_SetConfig+0xc4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00b      	beq.n	800780c <TIM_OC4_SetConfig+0x84>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM_OC4_SetConfig+0xc8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_OC4_SetConfig+0x84>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <TIM_OC4_SetConfig+0xcc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_OC4_SetConfig+0x84>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a14      	ldr	r2, [pc, #80]	; (8007858 <TIM_OC4_SetConfig+0xd0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d109      	bne.n	8007820 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	019b      	lsls	r3, r3, #6
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	4313      	orrs	r3, r2
 800781e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800

0800785c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	041b      	lsls	r3, r3, #16
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <TIM_OC5_SetConfig+0xb4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00f      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a16      	ldr	r2, [pc, #88]	; (8007914 <TIM_OC5_SetConfig+0xb8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <TIM_OC5_SetConfig+0xbc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a14      	ldr	r2, [pc, #80]	; (800791c <TIM_OC5_SetConfig+0xc0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <TIM_OC5_SetConfig+0xc4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d109      	bne.n	80078ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800796a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	051b      	lsls	r3, r3, #20
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a18      	ldr	r2, [pc, #96]	; (80079dc <TIM_OC6_SetConfig+0xb8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00f      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <TIM_OC6_SetConfig+0xbc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00b      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <TIM_OC6_SetConfig+0xc0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a15      	ldr	r2, [pc, #84]	; (80079e8 <TIM_OC6_SetConfig+0xc4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a14      	ldr	r2, [pc, #80]	; (80079ec <TIM_OC6_SetConfig+0xc8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40013400 	.word	0x40013400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800

080079f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	f023 0201 	bic.w	r2, r3, #1
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 030a 	bic.w	r3, r3, #10
 8007a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	621a      	str	r2, [r3, #32]
}
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b087      	sub	sp, #28
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f023 0210 	bic.w	r2, r3, #16
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	031b      	lsls	r3, r3, #12
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f043 0307 	orr.w	r3, r3, #7
 8007ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	609a      	str	r2, [r3, #8]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	021a      	lsls	r2, r3, #8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	609a      	str	r2, [r3, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 031f 	and.w	r3, r3, #31
 8007b36:	2201      	movs	r2, #1
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1a      	ldr	r2, [r3, #32]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	43db      	mvns	r3, r3
 8007b46:	401a      	ands	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a1a      	ldr	r2, [r3, #32]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e068      	b.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a2e      	ldr	r2, [pc, #184]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a2d      	ldr	r2, [pc, #180]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1e      	ldr	r2, [pc, #120]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfa:	d018      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1b      	ldr	r2, [pc, #108]	; (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1a      	ldr	r2, [pc, #104]	; (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a18      	ldr	r2, [pc, #96]	; (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d10c      	bne.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40013400 	.word	0x40013400
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40000800 	.word	0x40000800
 8007c78:	40000c00 	.word	0x40000c00
 8007c7c:	40014000 	.word	0x40014000

08007c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e040      	b.n	8007d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fa fcc8 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2224      	movs	r2, #36	; 0x24
 8007ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0201 	bic.w	r2, r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fed4 	bl	8008ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fc19 	bl	8008540 <UART_SetConfig>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e01b      	b.n	8007d50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0201 	orr.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 ff53 	bl	8008bf4 <UART_CheckIdleState>
 8007d4e:	4603      	mov	r3, r0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d178      	bne.n	8007e62 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <HAL_UART_Transmit+0x24>
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e071      	b.n	8007e64 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2221      	movs	r2, #33	; 0x21
 8007d8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d8e:	f7fa ff2d 	bl	8002bec <HAL_GetTick>
 8007d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	88fa      	ldrh	r2, [r7, #6]
 8007d98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dac:	d108      	bne.n	8007dc0 <HAL_UART_Transmit+0x68>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	61bb      	str	r3, [r7, #24]
 8007dbe:	e003      	b.n	8007dc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dc8:	e030      	b.n	8007e2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2180      	movs	r1, #128	; 0x80
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 ffb5 	bl	8008d44 <UART_WaitOnFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2220      	movs	r2, #32
 8007de4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e03c      	b.n	8007e64 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	881a      	ldrh	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dfc:	b292      	uxth	r2, r2
 8007dfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	3302      	adds	r3, #2
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	e008      	b.n	8007e1a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	b292      	uxth	r2, r2
 8007e12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3301      	adds	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1c8      	bne.n	8007dca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 ff7e 	bl	8008d44 <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e005      	b.n	8007e64 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e000      	b.n	8007e64 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007e62:	2302      	movs	r3, #2
  }
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3720      	adds	r7, #32
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d137      	bne.n	8007ef4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <HAL_UART_Receive_DMA+0x24>
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e030      	b.n	8007ef6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a18      	ldr	r2, [pc, #96]	; (8007f00 <HAL_UART_Receive_DMA+0x94>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d01f      	beq.n	8007ee4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d018      	beq.n	8007ee4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	623b      	str	r3, [r7, #32]
 8007ed2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	69f9      	ldr	r1, [r7, #28]
 8007ed6:	6a3a      	ldr	r2, [r7, #32]
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e6      	bne.n	8007eb2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 ff92 	bl	8008e14 <UART_Start_Receive_DMA>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	e000      	b.n	8007ef6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ef4:	2302      	movs	r3, #2
  }
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3728      	adds	r7, #40	; 0x28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	40008000 	.word	0x40008000

08007f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b0ba      	sub	sp, #232	; 0xe8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f32:	4013      	ands	r3, r2
 8007f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d115      	bne.n	8007f6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 82ae 	beq.w	80084be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
      }
      return;
 8007f6a:	e2a8      	b.n	80084be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8117 	beq.w	80081a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f86:	4b85      	ldr	r3, [pc, #532]	; (800819c <HAL_UART_IRQHandler+0x298>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 810a 	beq.w	80081a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d011      	beq.n	8007fc0 <HAL_UART_IRQHandler+0xbc>
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00b      	beq.n	8007fc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2201      	movs	r2, #1
 8007fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb6:	f043 0201 	orr.w	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d011      	beq.n	8007ff0 <HAL_UART_IRQHandler+0xec>
 8007fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe6:	f043 0204 	orr.w	r2, r3, #4
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d011      	beq.n	8008020 <HAL_UART_IRQHandler+0x11c>
 8007ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2204      	movs	r2, #4
 800800e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008016:	f043 0202 	orr.w	r2, r3, #2
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d017      	beq.n	800805c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2208      	movs	r2, #8
 800804a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008052:	f043 0208 	orr.w	r2, r3, #8
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008064:	2b00      	cmp	r3, #0
 8008066:	d012      	beq.n	800808e <HAL_UART_IRQHandler+0x18a>
 8008068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800807c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008084:	f043 0220 	orr.w	r2, r3, #32
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8214 	beq.w	80084c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800809a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d005      	beq.n	80080e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d04f      	beq.n	8008186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 ff5a 	bl	8008fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d141      	bne.n	800817e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800812a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800813e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1d9      	bne.n	80080fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814a:	2b00      	cmp	r3, #0
 800814c:	d013      	beq.n	8008176 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008152:	4a13      	ldr	r2, [pc, #76]	; (80081a0 <HAL_UART_IRQHandler+0x29c>)
 8008154:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815a:	4618      	mov	r0, r3
 800815c:	f7fb ff52 	bl	8004004 <HAL_DMA_Abort_IT>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d017      	beq.n	8008196 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008174:	e00f      	b.n	8008196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9cc 	bl	8008514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817c:	e00b      	b.n	8008196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9c8 	bl	8008514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	e007      	b.n	8008196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9c4 	bl	8008514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008194:	e195      	b.n	80084c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008196:	bf00      	nop
    return;
 8008198:	e193      	b.n	80084c2 <HAL_UART_IRQHandler+0x5be>
 800819a:	bf00      	nop
 800819c:	04000120 	.word	0x04000120
 80081a0:	08009251 	.word	0x08009251

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	f040 814e 	bne.w	800844a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0310 	and.w	r3, r3, #16
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8147 	beq.w	800844a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8140 	beq.w	800844a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2210      	movs	r2, #16
 80081d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	f040 80b8 	bne.w	8008352 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8167 	beq.w	80084c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008202:	429a      	cmp	r2, r3
 8008204:	f080 815f 	bcs.w	80084c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800820e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	f040 8086 	bne.w	8008330 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800823c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800824e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008252:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800825a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1da      	bne.n	8008224 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3308      	adds	r3, #8
 8008274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800827e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800829a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e1      	bne.n	800826e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e3      	bne.n	80082aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008300:	f023 0310 	bic.w	r3, r3, #16
 8008304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008312:	65bb      	str	r3, [r7, #88]	; 0x58
 8008314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e4      	bne.n	80082f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb fe2c 	bl	8003f88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008342:	b29b      	uxth	r3, r3
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	b29b      	uxth	r3, r3
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8ec 	bl	8008528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008350:	e0b9      	b.n	80084c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800835e:	b29b      	uxth	r3, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800836c:	b29b      	uxth	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80ab 	beq.w	80084ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80a6 	beq.w	80084ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083a0:	647b      	str	r3, [r7, #68]	; 0x44
 80083a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	623b      	str	r3, [r7, #32]
   return(result);
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083d8:	633a      	str	r2, [r7, #48]	; 0x30
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e3      	bne.n	80083b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	60fb      	str	r3, [r7, #12]
   return(result);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f023 0310 	bic.w	r3, r3, #16
 8008414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	69b9      	ldr	r1, [r7, #24]
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	617b      	str	r3, [r7, #20]
   return(result);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e4      	bne.n	8008400 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800843c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f870 	bl	8008528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008448:	e03f      	b.n	80084ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00e      	beq.n	8008474 <HAL_UART_IRQHandler+0x570>
 8008456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800845a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800846a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 ff2f 	bl	80092d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008472:	e02d      	b.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00e      	beq.n	800849e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008488:	2b00      	cmp	r3, #0
 800848a:	d008      	beq.n	800849e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01c      	beq.n	80084ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
    }
    return;
 800849c:	e017      	b.n	80084ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800849e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d012      	beq.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
 80084aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00c      	beq.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fee0 	bl	800927c <UART_EndTransmit_IT>
    return;
 80084bc:	e008      	b.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80084be:	bf00      	nop
 80084c0:	e006      	b.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80084c2:	bf00      	nop
 80084c4:	e004      	b.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80084c6:	bf00      	nop
 80084c8:	e002      	b.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80084ca:	bf00      	nop
 80084cc:	e000      	b.n	80084d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80084ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80084d0:	37e8      	adds	r7, #232	; 0xe8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008544:	b08a      	sub	sp, #40	; 0x28
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	431a      	orrs	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	431a      	orrs	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	4313      	orrs	r3, r2
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4ba4      	ldr	r3, [pc, #656]	; (8008800 <UART_SetConfig+0x2c0>)
 8008570:	4013      	ands	r3, r2
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008578:	430b      	orrs	r3, r1
 800857a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a99      	ldr	r2, [pc, #612]	; (8008804 <UART_SetConfig+0x2c4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	4313      	orrs	r3, r2
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	430a      	orrs	r2, r1
 80085be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a90      	ldr	r2, [pc, #576]	; (8008808 <UART_SetConfig+0x2c8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d126      	bne.n	8008618 <UART_SetConfig+0xd8>
 80085ca:	4b90      	ldr	r3, [pc, #576]	; (800880c <UART_SetConfig+0x2cc>)
 80085cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d81b      	bhi.n	8008610 <UART_SetConfig+0xd0>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0xa0>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	080085f1 	.word	0x080085f1
 80085e4:	08008601 	.word	0x08008601
 80085e8:	080085f9 	.word	0x080085f9
 80085ec:	08008609 	.word	0x08008609
 80085f0:	2301      	movs	r3, #1
 80085f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f6:	e116      	b.n	8008826 <UART_SetConfig+0x2e6>
 80085f8:	2302      	movs	r3, #2
 80085fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fe:	e112      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008606:	e10e      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800860e:	e10a      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008616:	e106      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a7c      	ldr	r2, [pc, #496]	; (8008810 <UART_SetConfig+0x2d0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d138      	bne.n	8008694 <UART_SetConfig+0x154>
 8008622:	4b7a      	ldr	r3, [pc, #488]	; (800880c <UART_SetConfig+0x2cc>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008628:	f003 030c 	and.w	r3, r3, #12
 800862c:	2b0c      	cmp	r3, #12
 800862e:	d82d      	bhi.n	800868c <UART_SetConfig+0x14c>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <UART_SetConfig+0xf8>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	0800866d 	.word	0x0800866d
 800863c:	0800868d 	.word	0x0800868d
 8008640:	0800868d 	.word	0x0800868d
 8008644:	0800868d 	.word	0x0800868d
 8008648:	0800867d 	.word	0x0800867d
 800864c:	0800868d 	.word	0x0800868d
 8008650:	0800868d 	.word	0x0800868d
 8008654:	0800868d 	.word	0x0800868d
 8008658:	08008675 	.word	0x08008675
 800865c:	0800868d 	.word	0x0800868d
 8008660:	0800868d 	.word	0x0800868d
 8008664:	0800868d 	.word	0x0800868d
 8008668:	08008685 	.word	0x08008685
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008672:	e0d8      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867a:	e0d4      	b.n	8008826 <UART_SetConfig+0x2e6>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008682:	e0d0      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868a:	e0cc      	b.n	8008826 <UART_SetConfig+0x2e6>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008692:	e0c8      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a5e      	ldr	r2, [pc, #376]	; (8008814 <UART_SetConfig+0x2d4>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d125      	bne.n	80086ea <UART_SetConfig+0x1aa>
 800869e:	4b5b      	ldr	r3, [pc, #364]	; (800880c <UART_SetConfig+0x2cc>)
 80086a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086a8:	2b30      	cmp	r3, #48	; 0x30
 80086aa:	d016      	beq.n	80086da <UART_SetConfig+0x19a>
 80086ac:	2b30      	cmp	r3, #48	; 0x30
 80086ae:	d818      	bhi.n	80086e2 <UART_SetConfig+0x1a2>
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d00a      	beq.n	80086ca <UART_SetConfig+0x18a>
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d814      	bhi.n	80086e2 <UART_SetConfig+0x1a2>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <UART_SetConfig+0x182>
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d008      	beq.n	80086d2 <UART_SetConfig+0x192>
 80086c0:	e00f      	b.n	80086e2 <UART_SetConfig+0x1a2>
 80086c2:	2300      	movs	r3, #0
 80086c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c8:	e0ad      	b.n	8008826 <UART_SetConfig+0x2e6>
 80086ca:	2302      	movs	r3, #2
 80086cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d0:	e0a9      	b.n	8008826 <UART_SetConfig+0x2e6>
 80086d2:	2304      	movs	r3, #4
 80086d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d8:	e0a5      	b.n	8008826 <UART_SetConfig+0x2e6>
 80086da:	2308      	movs	r3, #8
 80086dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086e0:	e0a1      	b.n	8008826 <UART_SetConfig+0x2e6>
 80086e2:	2310      	movs	r3, #16
 80086e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086e8:	e09d      	b.n	8008826 <UART_SetConfig+0x2e6>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a4a      	ldr	r2, [pc, #296]	; (8008818 <UART_SetConfig+0x2d8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d125      	bne.n	8008740 <UART_SetConfig+0x200>
 80086f4:	4b45      	ldr	r3, [pc, #276]	; (800880c <UART_SetConfig+0x2cc>)
 80086f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008700:	d016      	beq.n	8008730 <UART_SetConfig+0x1f0>
 8008702:	2bc0      	cmp	r3, #192	; 0xc0
 8008704:	d818      	bhi.n	8008738 <UART_SetConfig+0x1f8>
 8008706:	2b80      	cmp	r3, #128	; 0x80
 8008708:	d00a      	beq.n	8008720 <UART_SetConfig+0x1e0>
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	d814      	bhi.n	8008738 <UART_SetConfig+0x1f8>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <UART_SetConfig+0x1d8>
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d008      	beq.n	8008728 <UART_SetConfig+0x1e8>
 8008716:	e00f      	b.n	8008738 <UART_SetConfig+0x1f8>
 8008718:	2300      	movs	r3, #0
 800871a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800871e:	e082      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008720:	2302      	movs	r3, #2
 8008722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008726:	e07e      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008728:	2304      	movs	r3, #4
 800872a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800872e:	e07a      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008730:	2308      	movs	r3, #8
 8008732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008736:	e076      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008738:	2310      	movs	r3, #16
 800873a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800873e:	e072      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a35      	ldr	r2, [pc, #212]	; (800881c <UART_SetConfig+0x2dc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d12a      	bne.n	80087a0 <UART_SetConfig+0x260>
 800874a:	4b30      	ldr	r3, [pc, #192]	; (800880c <UART_SetConfig+0x2cc>)
 800874c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008758:	d01a      	beq.n	8008790 <UART_SetConfig+0x250>
 800875a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875e:	d81b      	bhi.n	8008798 <UART_SetConfig+0x258>
 8008760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008764:	d00c      	beq.n	8008780 <UART_SetConfig+0x240>
 8008766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876a:	d815      	bhi.n	8008798 <UART_SetConfig+0x258>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <UART_SetConfig+0x238>
 8008770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008774:	d008      	beq.n	8008788 <UART_SetConfig+0x248>
 8008776:	e00f      	b.n	8008798 <UART_SetConfig+0x258>
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800877e:	e052      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008780:	2302      	movs	r3, #2
 8008782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008786:	e04e      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008788:	2304      	movs	r3, #4
 800878a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878e:	e04a      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008790:	2308      	movs	r3, #8
 8008792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008796:	e046      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008798:	2310      	movs	r3, #16
 800879a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879e:	e042      	b.n	8008826 <UART_SetConfig+0x2e6>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a17      	ldr	r2, [pc, #92]	; (8008804 <UART_SetConfig+0x2c4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d13a      	bne.n	8008820 <UART_SetConfig+0x2e0>
 80087aa:	4b18      	ldr	r3, [pc, #96]	; (800880c <UART_SetConfig+0x2cc>)
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b8:	d01a      	beq.n	80087f0 <UART_SetConfig+0x2b0>
 80087ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087be:	d81b      	bhi.n	80087f8 <UART_SetConfig+0x2b8>
 80087c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c4:	d00c      	beq.n	80087e0 <UART_SetConfig+0x2a0>
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ca:	d815      	bhi.n	80087f8 <UART_SetConfig+0x2b8>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <UART_SetConfig+0x298>
 80087d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087d4:	d008      	beq.n	80087e8 <UART_SetConfig+0x2a8>
 80087d6:	e00f      	b.n	80087f8 <UART_SetConfig+0x2b8>
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087de:	e022      	b.n	8008826 <UART_SetConfig+0x2e6>
 80087e0:	2302      	movs	r3, #2
 80087e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e6:	e01e      	b.n	8008826 <UART_SetConfig+0x2e6>
 80087e8:	2304      	movs	r3, #4
 80087ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ee:	e01a      	b.n	8008826 <UART_SetConfig+0x2e6>
 80087f0:	2308      	movs	r3, #8
 80087f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f6:	e016      	b.n	8008826 <UART_SetConfig+0x2e6>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fe:	e012      	b.n	8008826 <UART_SetConfig+0x2e6>
 8008800:	efff69f3 	.word	0xefff69f3
 8008804:	40008000 	.word	0x40008000
 8008808:	40013800 	.word	0x40013800
 800880c:	40021000 	.word	0x40021000
 8008810:	40004400 	.word	0x40004400
 8008814:	40004800 	.word	0x40004800
 8008818:	40004c00 	.word	0x40004c00
 800881c:	40005000 	.word	0x40005000
 8008820:	2310      	movs	r3, #16
 8008822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a9f      	ldr	r2, [pc, #636]	; (8008aa8 <UART_SetConfig+0x568>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d17a      	bne.n	8008926 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008834:	2b08      	cmp	r3, #8
 8008836:	d824      	bhi.n	8008882 <UART_SetConfig+0x342>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x300>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008865 	.word	0x08008865
 8008844:	08008883 	.word	0x08008883
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008883 	.word	0x08008883
 8008850:	08008873 	.word	0x08008873
 8008854:	08008883 	.word	0x08008883
 8008858:	08008883 	.word	0x08008883
 800885c:	08008883 	.word	0x08008883
 8008860:	0800887b 	.word	0x0800887b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008864:	f7fd faa2 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008868:	61f8      	str	r0, [r7, #28]
        break;
 800886a:	e010      	b.n	800888e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800886c:	4b8f      	ldr	r3, [pc, #572]	; (8008aac <UART_SetConfig+0x56c>)
 800886e:	61fb      	str	r3, [r7, #28]
        break;
 8008870:	e00d      	b.n	800888e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008872:	f7fd fa03 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8008876:	61f8      	str	r0, [r7, #28]
        break;
 8008878:	e009      	b.n	800888e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887e:	61fb      	str	r3, [r7, #28]
        break;
 8008880:	e005      	b.n	800888e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800888c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80fb 	beq.w	8008a8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4413      	add	r3, r2
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d305      	bcc.n	80088b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d903      	bls.n	80088ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80088b8:	e0e8      	b.n	8008a8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	2200      	movs	r2, #0
 80088be:	461c      	mov	r4, r3
 80088c0:	4615      	mov	r5, r2
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	f04f 0300 	mov.w	r3, #0
 80088ca:	022b      	lsls	r3, r5, #8
 80088cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80088d0:	0222      	lsls	r2, r4, #8
 80088d2:	68f9      	ldr	r1, [r7, #12]
 80088d4:	6849      	ldr	r1, [r1, #4]
 80088d6:	0849      	lsrs	r1, r1, #1
 80088d8:	2000      	movs	r0, #0
 80088da:	4688      	mov	r8, r1
 80088dc:	4681      	mov	r9, r0
 80088de:	eb12 0a08 	adds.w	sl, r2, r8
 80088e2:	eb43 0b09 	adc.w	fp, r3, r9
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	603b      	str	r3, [r7, #0]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f4:	4650      	mov	r0, sl
 80088f6:	4659      	mov	r1, fp
 80088f8:	f7f8 f9c6 	bl	8000c88 <__aeabi_uldivmod>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4613      	mov	r3, r2
 8008902:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890a:	d308      	bcc.n	800891e <UART_SetConfig+0x3de>
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008912:	d204      	bcs.n	800891e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	60da      	str	r2, [r3, #12]
 800891c:	e0b6      	b.n	8008a8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008924:	e0b2      	b.n	8008a8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892e:	d15e      	bne.n	80089ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008934:	2b08      	cmp	r3, #8
 8008936:	d828      	bhi.n	800898a <UART_SetConfig+0x44a>
 8008938:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x400>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008965 	.word	0x08008965
 8008944:	0800896d 	.word	0x0800896d
 8008948:	08008975 	.word	0x08008975
 800894c:	0800898b 	.word	0x0800898b
 8008950:	0800897b 	.word	0x0800897b
 8008954:	0800898b 	.word	0x0800898b
 8008958:	0800898b 	.word	0x0800898b
 800895c:	0800898b 	.word	0x0800898b
 8008960:	08008983 	.word	0x08008983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008964:	f7fd fa22 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008968:	61f8      	str	r0, [r7, #28]
        break;
 800896a:	e014      	b.n	8008996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800896c:	f7fd fa34 	bl	8005dd8 <HAL_RCC_GetPCLK2Freq>
 8008970:	61f8      	str	r0, [r7, #28]
        break;
 8008972:	e010      	b.n	8008996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008974:	4b4d      	ldr	r3, [pc, #308]	; (8008aac <UART_SetConfig+0x56c>)
 8008976:	61fb      	str	r3, [r7, #28]
        break;
 8008978:	e00d      	b.n	8008996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fd f97f 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 800897e:	61f8      	str	r0, [r7, #28]
        break;
 8008980:	e009      	b.n	8008996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008986:	61fb      	str	r3, [r7, #28]
        break;
 8008988:	e005      	b.n	8008996 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d077      	beq.n	8008a8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	005a      	lsls	r2, r3, #1
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	085b      	lsrs	r3, r3, #1
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b0f      	cmp	r3, #15
 80089b6:	d916      	bls.n	80089e6 <UART_SetConfig+0x4a6>
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089be:	d212      	bcs.n	80089e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f023 030f 	bic.w	r3, r3, #15
 80089c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	8afb      	ldrh	r3, [r7, #22]
 80089d8:	4313      	orrs	r3, r2
 80089da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	8afa      	ldrh	r2, [r7, #22]
 80089e2:	60da      	str	r2, [r3, #12]
 80089e4:	e052      	b.n	8008a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089ec:	e04e      	b.n	8008a8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d827      	bhi.n	8008a46 <UART_SetConfig+0x506>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x4bc>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a21 	.word	0x08008a21
 8008a00:	08008a29 	.word	0x08008a29
 8008a04:	08008a31 	.word	0x08008a31
 8008a08:	08008a47 	.word	0x08008a47
 8008a0c:	08008a37 	.word	0x08008a37
 8008a10:	08008a47 	.word	0x08008a47
 8008a14:	08008a47 	.word	0x08008a47
 8008a18:	08008a47 	.word	0x08008a47
 8008a1c:	08008a3f 	.word	0x08008a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a20:	f7fd f9c4 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008a24:	61f8      	str	r0, [r7, #28]
        break;
 8008a26:	e014      	b.n	8008a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a28:	f7fd f9d6 	bl	8005dd8 <HAL_RCC_GetPCLK2Freq>
 8008a2c:	61f8      	str	r0, [r7, #28]
        break;
 8008a2e:	e010      	b.n	8008a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a30:	4b1e      	ldr	r3, [pc, #120]	; (8008aac <UART_SetConfig+0x56c>)
 8008a32:	61fb      	str	r3, [r7, #28]
        break;
 8008a34:	e00d      	b.n	8008a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a36:	f7fd f921 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8008a3a:	61f8      	str	r0, [r7, #28]
        break;
 8008a3c:	e009      	b.n	8008a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a42:	61fb      	str	r3, [r7, #28]
        break;
 8008a44:	e005      	b.n	8008a52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a50:	bf00      	nop
    }

    if (pclk != 0U)
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d019      	beq.n	8008a8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	085a      	lsrs	r2, r3, #1
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	441a      	add	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	d909      	bls.n	8008a86 <UART_SetConfig+0x546>
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d205      	bcs.n	8008a86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60da      	str	r2, [r3, #12]
 8008a84:	e002      	b.n	8008a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3728      	adds	r7, #40	; 0x28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40008000 	.word	0x40008000
 8008aac:	00f42400 	.word	0x00f42400

08008ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	f003 0310 	and.w	r3, r3, #16
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01a      	beq.n	8008bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bae:	d10a      	bne.n	8008bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	605a      	str	r2, [r3, #4]
  }
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b098      	sub	sp, #96	; 0x60
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c04:	f7f9 fff2 	bl	8002bec <HAL_GetTick>
 8008c08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0308 	and.w	r3, r3, #8
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d12e      	bne.n	8008c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c20:	2200      	movs	r2, #0
 8008c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f88c 	bl	8008d44 <UART_WaitOnFlagUntilTimeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d021      	beq.n	8008c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c46:	653b      	str	r3, [r7, #80]	; 0x50
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c50:	647b      	str	r3, [r7, #68]	; 0x44
 8008c52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e6      	bne.n	8008c32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2220      	movs	r2, #32
 8008c68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e062      	b.n	8008d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d149      	bne.n	8008d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f856 	bl	8008d44 <UART_WaitOnFlagUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03c      	beq.n	8008d18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	e853 3f00 	ldrex	r3, [r3]
 8008caa:	623b      	str	r3, [r7, #32]
   return(result);
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8008cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e6      	bne.n	8008c9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0301 	bic.w	r3, r3, #1
 8008ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3308      	adds	r3, #8
 8008cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cf0:	61fa      	str	r2, [r7, #28]
 8008cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	69b9      	ldr	r1, [r7, #24]
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e5      	bne.n	8008cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e011      	b.n	8008d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3758      	adds	r7, #88	; 0x58
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	4613      	mov	r3, r2
 8008d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d54:	e049      	b.n	8008dea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5c:	d045      	beq.n	8008dea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d5e:	f7f9 ff45 	bl	8002bec <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d302      	bcc.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e048      	b.n	8008e0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d031      	beq.n	8008dea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d110      	bne.n	8008db6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2208      	movs	r2, #8
 8008d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f8ff 	bl	8008fa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2208      	movs	r2, #8
 8008da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e029      	b.n	8008e0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dc4:	d111      	bne.n	8008dea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 f8e5 	bl	8008fa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e00f      	b.n	8008e0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69da      	ldr	r2, [r3, #28]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4013      	ands	r3, r2
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	bf0c      	ite	eq
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	2300      	movne	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	461a      	mov	r2, r3
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d0a6      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b096      	sub	sp, #88	; 0x58
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2222      	movs	r2, #34	; 0x22
 8008e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d028      	beq.n	8008e9a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	4a3e      	ldr	r2, [pc, #248]	; (8008f48 <UART_Start_Receive_DMA+0x134>)
 8008e4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	4a3d      	ldr	r2, [pc, #244]	; (8008f4c <UART_Start_Receive_DMA+0x138>)
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5c:	4a3c      	ldr	r2, [pc, #240]	; (8008f50 <UART_Start_Receive_DMA+0x13c>)
 8008e5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e64:	2200      	movs	r2, #0
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3324      	adds	r3, #36	; 0x24
 8008e72:	4619      	mov	r1, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e78:	461a      	mov	r2, r3
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	f7fb f824 	bl	8003ec8 <HAL_DMA_Start_IT>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2210      	movs	r2, #16
 8008e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e051      	b.n	8008f3e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e6      	bne.n	8008ea2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	653b      	str	r3, [r7, #80]	; 0x50
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ef4:	637a      	str	r2, [r7, #52]	; 0x34
 8008ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efc:	e841 2300 	strex	r3, r2, [r1]
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e5      	bne.n	8008ed4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	613b      	str	r3, [r7, #16]
   return(result);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f28:	623a      	str	r2, [r7, #32]
 8008f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3758      	adds	r7, #88	; 0x58
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	08009069 	.word	0x08009069
 8008f4c:	08009195 	.word	0x08009195
 8008f50:	080091d3 	.word	0x080091d3

08008f54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b089      	sub	sp, #36	; 0x24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	61bb      	str	r3, [r7, #24]
 8008f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6979      	ldr	r1, [r7, #20]
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	613b      	str	r3, [r7, #16]
   return(result);
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e6      	bne.n	8008f5c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008f94:	bf00      	nop
 8008f96:	3724      	adds	r7, #36	; 0x24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b095      	sub	sp, #84	; 0x54
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8008fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e6      	bne.n	8008fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	e853 3f00 	ldrex	r3, [r3]
 8008fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	f023 0301 	bic.w	r3, r3, #1
 8008ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3308      	adds	r3, #8
 8008ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e5      	bne.n	8008fda <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009012:	2b01      	cmp	r3, #1
 8009014:	d118      	bne.n	8009048 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	60bb      	str	r3, [r7, #8]
   return(result);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f023 0310 	bic.w	r3, r3, #16
 800902a:	647b      	str	r3, [r7, #68]	; 0x44
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6979      	ldr	r1, [r7, #20]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	613b      	str	r3, [r7, #16]
   return(result);
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800905c:	bf00      	nop
 800905e:	3754      	adds	r7, #84	; 0x54
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b09c      	sub	sp, #112	; 0x70
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009074:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b00      	cmp	r3, #0
 8009082:	d171      	bne.n	8009168 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009086:	2200      	movs	r2, #0
 8009088:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800908c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800909a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80090a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80090ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e6      	bne.n	800908c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	e853 3f00 	ldrex	r3, [r3]
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	667b      	str	r3, [r7, #100]	; 0x64
 80090d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3308      	adds	r3, #8
 80090dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090de:	647a      	str	r2, [r7, #68]	; 0x44
 80090e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090e6:	e841 2300 	strex	r3, r2, [r1]
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1e5      	bne.n	80090be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3308      	adds	r3, #8
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	623b      	str	r3, [r7, #32]
   return(result);
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009108:	663b      	str	r3, [r7, #96]	; 0x60
 800910a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009112:	633a      	str	r2, [r7, #48]	; 0x30
 8009114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e5      	bne.n	80090f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009128:	2220      	movs	r2, #32
 800912a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009132:	2b01      	cmp	r3, #1
 8009134:	d118      	bne.n	8009168 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	60fb      	str	r3, [r7, #12]
   return(result);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 0310 	bic.w	r3, r3, #16
 800914a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800914c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	69b9      	ldr	r1, [r7, #24]
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	617b      	str	r3, [r7, #20]
   return(result);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e6      	bne.n	8009136 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916a:	2200      	movs	r2, #0
 800916c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800916e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009172:	2b01      	cmp	r3, #1
 8009174:	d107      	bne.n	8009186 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800917c:	4619      	mov	r1, r3
 800917e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009180:	f7ff f9d2 	bl	8008528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009184:	e002      	b.n	800918c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009186:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009188:	f7ff f9b0 	bl	80084ec <HAL_UART_RxCpltCallback>
}
 800918c:	bf00      	nop
 800918e:	3770      	adds	r7, #112	; 0x70
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d109      	bne.n	80091c4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	4619      	mov	r1, r3
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7ff f9b3 	bl	8008528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091c2:	e002      	b.n	80091ca <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff f99b 	bl	8008500 <HAL_UART_RxHalfCpltCallback>
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d109      	bne.n	8009210 <UART_DMAError+0x3e>
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2b21      	cmp	r3, #33	; 0x21
 8009200:	d106      	bne.n	8009210 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2200      	movs	r2, #0
 8009206:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800920a:	6978      	ldr	r0, [r7, #20]
 800920c:	f7ff fea2 	bl	8008f54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	2b40      	cmp	r3, #64	; 0x40
 800921c:	d109      	bne.n	8009232 <UART_DMAError+0x60>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b22      	cmp	r3, #34	; 0x22
 8009222:	d106      	bne.n	8009232 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2200      	movs	r2, #0
 8009228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800922c:	6978      	ldr	r0, [r7, #20]
 800922e:	f7ff feb7 	bl	8008fa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009238:	f043 0210 	orr.w	r2, r3, #16
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009242:	6978      	ldr	r0, [r7, #20]
 8009244:	f7ff f966 	bl	8008514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009248:	bf00      	nop
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff f950 	bl	8008514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009274:	bf00      	nop
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	60bb      	str	r3, [r7, #8]
   return(result);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009298:	61fb      	str	r3, [r7, #28]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6979      	ldr	r1, [r7, #20]
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	613b      	str	r3, [r7, #16]
   return(result);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e6      	bne.n	8009284 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2220      	movs	r2, #32
 80092ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff f908 	bl	80084d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c8:	bf00      	nop
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <__NVIC_SetPriority>:
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	db0a      	blt.n	800930e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	490c      	ldr	r1, [pc, #48]	; (8009330 <__NVIC_SetPriority+0x4c>)
 80092fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009302:	0112      	lsls	r2, r2, #4
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	440b      	add	r3, r1
 8009308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800930c:	e00a      	b.n	8009324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	4908      	ldr	r1, [pc, #32]	; (8009334 <__NVIC_SetPriority+0x50>)
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	f003 030f 	and.w	r3, r3, #15
 800931a:	3b04      	subs	r3, #4
 800931c:	0112      	lsls	r2, r2, #4
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	440b      	add	r3, r1
 8009322:	761a      	strb	r2, [r3, #24]
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	e000e100 	.word	0xe000e100
 8009334:	e000ed00 	.word	0xe000ed00

08009338 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <SysTick_Handler+0x1c>)
 800933e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009340:	f001 fe70 	bl	800b024 <xTaskGetSchedulerState>
 8009344:	4603      	mov	r3, r0
 8009346:	2b01      	cmp	r3, #1
 8009348:	d001      	beq.n	800934e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800934a:	f002 fc55 	bl	800bbf8 <xPortSysTickHandler>
  }
}
 800934e:	bf00      	nop
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	e000e010 	.word	0xe000e010

08009358 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800935c:	2100      	movs	r1, #0
 800935e:	f06f 0004 	mvn.w	r0, #4
 8009362:	f7ff ffbf 	bl	80092e4 <__NVIC_SetPriority>
#endif
}
 8009366:	bf00      	nop
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009372:	f3ef 8305 	mrs	r3, IPSR
 8009376:	603b      	str	r3, [r7, #0]
  return(result);
 8009378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800937e:	f06f 0305 	mvn.w	r3, #5
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	e00c      	b.n	80093a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009386:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <osKernelInitialize+0x44>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d105      	bne.n	800939a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <osKernelInitialize+0x44>)
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009394:	2300      	movs	r3, #0
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	e002      	b.n	80093a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800939a:	f04f 33ff 	mov.w	r3, #4294967295
 800939e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093a0:	687b      	ldr	r3, [r7, #4]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200005f0 	.word	0x200005f0

080093b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ba:	f3ef 8305 	mrs	r3, IPSR
 80093be:	603b      	str	r3, [r7, #0]
  return(result);
 80093c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80093c6:	f06f 0305 	mvn.w	r3, #5
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	e010      	b.n	80093f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <osKernelStart+0x48>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d109      	bne.n	80093ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093d6:	f7ff ffbf 	bl	8009358 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093da:	4b08      	ldr	r3, [pc, #32]	; (80093fc <osKernelStart+0x48>)
 80093dc:	2202      	movs	r2, #2
 80093de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093e0:	f001 f9c4 	bl	800a76c <vTaskStartScheduler>
      stat = osOK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	607b      	str	r3, [r7, #4]
 80093e8:	e002      	b.n	80093f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093f0:	687b      	ldr	r3, [r7, #4]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	200005f0 	.word	0x200005f0

08009400 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	; 0x38
 8009404:	af04      	add	r7, sp, #16
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009410:	f3ef 8305 	mrs	r3, IPSR
 8009414:	617b      	str	r3, [r7, #20]
  return(result);
 8009416:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009418:	2b00      	cmp	r3, #0
 800941a:	d17e      	bne.n	800951a <osThreadNew+0x11a>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d07b      	beq.n	800951a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009422:	2380      	movs	r3, #128	; 0x80
 8009424:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009426:	2318      	movs	r3, #24
 8009428:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800942e:	f04f 33ff 	mov.w	r3, #4294967295
 8009432:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d045      	beq.n	80094c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <osThreadNew+0x48>
        name = attr->name;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d008      	beq.n	800946e <osThreadNew+0x6e>
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2b38      	cmp	r3, #56	; 0x38
 8009460:	d805      	bhi.n	800946e <osThreadNew+0x6e>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <osThreadNew+0x72>
        return (NULL);
 800946e:	2300      	movs	r3, #0
 8009470:	e054      	b.n	800951c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	089b      	lsrs	r3, r3, #2
 8009480:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00e      	beq.n	80094a8 <osThreadNew+0xa8>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	2ba7      	cmp	r3, #167	; 0xa7
 8009490:	d90a      	bls.n	80094a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009496:	2b00      	cmp	r3, #0
 8009498:	d006      	beq.n	80094a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <osThreadNew+0xa8>
        mem = 1;
 80094a2:	2301      	movs	r3, #1
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	e010      	b.n	80094ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10c      	bne.n	80094ca <osThreadNew+0xca>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d108      	bne.n	80094ca <osThreadNew+0xca>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <osThreadNew+0xca>
          mem = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61bb      	str	r3, [r7, #24]
 80094c4:	e001      	b.n	80094ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d110      	bne.n	80094f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094d8:	9202      	str	r2, [sp, #8]
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fe4e 	bl	800a188 <xTaskCreateStatic>
 80094ec:	4603      	mov	r3, r0
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	e013      	b.n	800951a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d110      	bne.n	800951a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	f107 0310 	add.w	r3, r7, #16
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fe99 	bl	800a242 <xTaskCreate>
 8009510:	4603      	mov	r3, r0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d001      	beq.n	800951a <osThreadNew+0x11a>
            hTask = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800951a:	693b      	ldr	r3, [r7, #16]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3728      	adds	r7, #40	; 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009530:	f3ef 8305 	mrs	r3, IPSR
 8009534:	60fb      	str	r3, [r7, #12]
  return(result);
 8009536:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800953c:	f06f 0305 	mvn.w	r3, #5
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	e00b      	b.n	800955c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d103      	bne.n	8009552 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800954a:	f06f 0303 	mvn.w	r3, #3
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e004      	b.n	800955c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8009556:	6938      	ldr	r0, [r7, #16]
 8009558:	f001 f802 	bl	800a560 <vTaskSuspend>
  }

  return (stat);
 800955c:	697b      	ldr	r3, [r7, #20]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8009566:	b580      	push	{r7, lr}
 8009568:	b086      	sub	sp, #24
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009572:	f3ef 8305 	mrs	r3, IPSR
 8009576:	60fb      	str	r3, [r7, #12]
  return(result);
 8009578:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <osThreadResume+0x20>
    stat = osErrorISR;
 800957e:	f06f 0305 	mvn.w	r3, #5
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e00b      	b.n	800959e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800958c:	f06f 0303 	mvn.w	r3, #3
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e004      	b.n	800959e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f001 f889 	bl	800a6b0 <vTaskResume>
  }

  return (stat);
 800959e:	697b      	ldr	r3, [r7, #20]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095b0:	f3ef 8305 	mrs	r3, IPSR
 80095b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80095b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <osDelay+0x1c>
    stat = osErrorISR;
 80095bc:	f06f 0305 	mvn.w	r3, #5
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e007      	b.n	80095d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 ff92 	bl	800a4f8 <vTaskDelay>
    }
  }

  return (stat);
 80095d4:	68fb      	ldr	r3, [r7, #12]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4a07      	ldr	r2, [pc, #28]	; (800960c <vApplicationGetIdleTaskMemory+0x2c>)
 80095f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	4a06      	ldr	r2, [pc, #24]	; (8009610 <vApplicationGetIdleTaskMemory+0x30>)
 80095f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2280      	movs	r2, #128	; 0x80
 80095fc:	601a      	str	r2, [r3, #0]
}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	200005f4 	.word	0x200005f4
 8009610:	2000069c 	.word	0x2000069c

08009614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4a07      	ldr	r2, [pc, #28]	; (8009640 <vApplicationGetTimerTaskMemory+0x2c>)
 8009624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	4a06      	ldr	r2, [pc, #24]	; (8009644 <vApplicationGetTimerTaskMemory+0x30>)
 800962a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009632:	601a      	str	r2, [r3, #0]
}
 8009634:	bf00      	nop
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	2000089c 	.word	0x2000089c
 8009644:	20000944 	.word	0x20000944

08009648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f103 0208 	add.w	r2, r3, #8
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f04f 32ff 	mov.w	r2, #4294967295
 8009660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f103 0208 	add.w	r2, r3, #8
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f103 0208 	add.w	r2, r3, #8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009696:	bf00      	nop
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096ea:	b480      	push	{r7}
 80096ec:	b085      	sub	sp, #20
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009700:	d103      	bne.n	800970a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	e00c      	b.n	8009724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3308      	adds	r3, #8
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	e002      	b.n	8009718 <vListInsert+0x2e>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	429a      	cmp	r2, r3
 8009722:	d2f6      	bcs.n	8009712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	601a      	str	r2, [r3, #0]
}
 8009750:	bf00      	nop
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	6892      	ldr	r2, [r2, #8]
 8009772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6852      	ldr	r2, [r2, #4]
 800977c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d103      	bne.n	8009790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1e5a      	subs	r2, r3, #1
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10a      	bne.n	80097da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097d6:	bf00      	nop
 80097d8:	e7fe      	b.n	80097d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097da:	f002 f97b 	bl	800bad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097ea:	fb01 f303 	mul.w	r3, r1, r3
 80097ee:	441a      	add	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980a:	3b01      	subs	r3, #1
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009810:	fb01 f303 	mul.w	r3, r1, r3
 8009814:	441a      	add	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	22ff      	movs	r2, #255	; 0xff
 800981e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	22ff      	movs	r2, #255	; 0xff
 8009826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d114      	bne.n	800985a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01a      	beq.n	800986e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3310      	adds	r3, #16
 800983c:	4618      	mov	r0, r3
 800983e:	f001 fa2f 	bl	800aca0 <xTaskRemoveFromEventList>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d012      	beq.n	800986e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009848:	4b0c      	ldr	r3, [pc, #48]	; (800987c <xQueueGenericReset+0xcc>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	e009      	b.n	800986e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3310      	adds	r3, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fef2 	bl	8009648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3324      	adds	r3, #36	; 0x24
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff feed 	bl	8009648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800986e:	f002 f961 	bl	800bb34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009872:	2301      	movs	r3, #1
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	e000ed04 	.word	0xe000ed04

08009880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08e      	sub	sp, #56	; 0x38
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <xQueueGenericCreateStatic+0x52>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <xQueueGenericCreateStatic+0x56>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <xQueueGenericCreateStatic+0x58>
 80098d6:	2300      	movs	r3, #0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	623b      	str	r3, [r7, #32]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d102      	bne.n	80098fe <xQueueGenericCreateStatic+0x7e>
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <xQueueGenericCreateStatic+0x82>
 80098fe:	2301      	movs	r3, #1
 8009900:	e000      	b.n	8009904 <xQueueGenericCreateStatic+0x84>
 8009902:	2300      	movs	r3, #0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	61fb      	str	r3, [r7, #28]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800991e:	2350      	movs	r3, #80	; 0x50
 8009920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b50      	cmp	r3, #80	; 0x50
 8009926:	d00a      	beq.n	800993e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	61bb      	str	r3, [r7, #24]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800993e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009952:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	4613      	mov	r3, r2
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f805 	bl	8009970 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009968:	4618      	mov	r0, r3
 800996a:	3730      	adds	r7, #48	; 0x30
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d103      	bne.n	800998c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	e002      	b.n	8009992 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800999e:	2101      	movs	r1, #1
 80099a0:	69b8      	ldr	r0, [r7, #24]
 80099a2:	f7ff ff05 	bl	80097b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08e      	sub	sp, #56	; 0x38
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099c6:	2300      	movs	r3, #0
 80099c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <xQueueGenericSend+0x32>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <xQueueGenericSend+0x40>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <xQueueGenericSend+0x44>
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <xQueueGenericSend+0x46>
 80099fc:	2300      	movs	r3, #0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <xQueueGenericSend+0x60>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a14:	bf00      	nop
 8009a16:	e7fe      	b.n	8009a16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d103      	bne.n	8009a26 <xQueueGenericSend+0x6e>
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d101      	bne.n	8009a2a <xQueueGenericSend+0x72>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <xQueueGenericSend+0x74>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <xQueueGenericSend+0x8e>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	623b      	str	r3, [r7, #32]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a46:	f001 faed 	bl	800b024 <xTaskGetSchedulerState>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <xQueueGenericSend+0x9e>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <xQueueGenericSend+0xa2>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <xQueueGenericSend+0xa4>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <xQueueGenericSend+0xbe>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	61fb      	str	r3, [r7, #28]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a76:	f002 f82d 	bl	800bad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d302      	bcc.n	8009a8c <xQueueGenericSend+0xd4>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d129      	bne.n	8009ae0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a92:	f000 fa0b 	bl	8009eac <prvCopyDataToQueue>
 8009a96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d010      	beq.n	8009ac2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	3324      	adds	r3, #36	; 0x24
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 f8fb 	bl	800aca0 <xTaskRemoveFromEventList>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d013      	beq.n	8009ad8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ab0:	4b3f      	ldr	r3, [pc, #252]	; (8009bb0 <xQueueGenericSend+0x1f8>)
 8009ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	e00a      	b.n	8009ad8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ac8:	4b39      	ldr	r3, [pc, #228]	; (8009bb0 <xQueueGenericSend+0x1f8>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ad8:	f002 f82c 	bl	800bb34 <vPortExitCritical>
				return pdPASS;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e063      	b.n	8009ba8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d103      	bne.n	8009aee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ae6:	f002 f825 	bl	800bb34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e05c      	b.n	8009ba8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009af4:	f107 0314 	add.w	r3, r7, #20
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 f935 	bl	800ad68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009afe:	2301      	movs	r3, #1
 8009b00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b02:	f002 f817 	bl	800bb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b06:	f000 fea1 	bl	800a84c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b0a:	f001 ffe3 	bl	800bad4 <vPortEnterCritical>
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b14:	b25b      	sxtb	r3, r3
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d103      	bne.n	8009b24 <xQueueGenericSend+0x16c>
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b2a:	b25b      	sxtb	r3, r3
 8009b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b30:	d103      	bne.n	8009b3a <xQueueGenericSend+0x182>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b3a:	f001 fffb 	bl	800bb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b3e:	1d3a      	adds	r2, r7, #4
 8009b40:	f107 0314 	add.w	r3, r7, #20
 8009b44:	4611      	mov	r1, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 f924 	bl	800ad94 <xTaskCheckForTimeOut>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d124      	bne.n	8009b9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b54:	f000 faa2 	bl	800a09c <prvIsQueueFull>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d018      	beq.n	8009b90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	3310      	adds	r3, #16
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4611      	mov	r1, r2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 f84a 	bl	800ac00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b6e:	f000 fa2d 	bl	8009fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b72:	f000 fe79 	bl	800a868 <xTaskResumeAll>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f47f af7c 	bne.w	8009a76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <xQueueGenericSend+0x1f8>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	e772      	b.n	8009a76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b92:	f000 fa1b 	bl	8009fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b96:	f000 fe67 	bl	800a868 <xTaskResumeAll>
 8009b9a:	e76c      	b.n	8009a76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9e:	f000 fa15 	bl	8009fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ba2:	f000 fe61 	bl	800a868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ba6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3738      	adds	r7, #56	; 0x38
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b090      	sub	sp, #64	; 0x40
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <xQueueGenericSendFromISR+0x3c>
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <xQueueGenericSendFromISR+0x40>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <xQueueGenericSendFromISR+0x42>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d103      	bne.n	8009c1e <xQueueGenericSendFromISR+0x6a>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <xQueueGenericSendFromISR+0x6e>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e000      	b.n	8009c24 <xQueueGenericSendFromISR+0x70>
 8009c22:	2300      	movs	r3, #0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	623b      	str	r3, [r7, #32]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c3e:	f002 f82b 	bl	800bc98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c42:	f3ef 8211 	mrs	r2, BASEPRI
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	61fa      	str	r2, [r7, #28]
 8009c58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d302      	bcc.n	8009c70 <xQueueGenericSendFromISR+0xbc>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d12f      	bne.n	8009cd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c86:	f000 f911 	bl	8009eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d112      	bne.n	8009cba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d016      	beq.n	8009cca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	3324      	adds	r3, #36	; 0x24
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fffd 	bl	800aca0 <xTaskRemoveFromEventList>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00e      	beq.n	8009cca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e007      	b.n	8009cca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	b25a      	sxtb	r2, r3
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009cce:	e001      	b.n	8009cd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3740      	adds	r7, #64	; 0x40
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	; 0x30
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <xQueueReceive+0x30>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	623b      	str	r3, [r7, #32]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d103      	bne.n	8009d2a <xQueueReceive+0x3e>
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <xQueueReceive+0x42>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <xQueueReceive+0x44>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueReceive+0x5e>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	61fb      	str	r3, [r7, #28]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d4a:	f001 f96b 	bl	800b024 <xTaskGetSchedulerState>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <xQueueReceive+0x6e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <xQueueReceive+0x72>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e000      	b.n	8009d60 <xQueueReceive+0x74>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <xQueueReceive+0x8e>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	61bb      	str	r3, [r7, #24]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d7a:	f001 feab 	bl	800bad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d01f      	beq.n	8009dca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d8e:	f000 f8f7 	bl	8009f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	1e5a      	subs	r2, r3, #1
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00f      	beq.n	8009dc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	3310      	adds	r3, #16
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 ff7a 	bl	800aca0 <xTaskRemoveFromEventList>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d007      	beq.n	8009dc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009db2:	4b3d      	ldr	r3, [pc, #244]	; (8009ea8 <xQueueReceive+0x1bc>)
 8009db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dc2:	f001 feb7 	bl	800bb34 <vPortExitCritical>
				return pdPASS;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e069      	b.n	8009e9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dd0:	f001 feb0 	bl	800bb34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e062      	b.n	8009e9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dde:	f107 0310 	add.w	r3, r7, #16
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 ffc0 	bl	800ad68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009de8:	2301      	movs	r3, #1
 8009dea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dec:	f001 fea2 	bl	800bb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009df0:	f000 fd2c 	bl	800a84c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009df4:	f001 fe6e 	bl	800bad4 <vPortEnterCritical>
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dfe:	b25b      	sxtb	r3, r3
 8009e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e04:	d103      	bne.n	8009e0e <xQueueReceive+0x122>
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1a:	d103      	bne.n	8009e24 <xQueueReceive+0x138>
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e24:	f001 fe86 	bl	800bb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e28:	1d3a      	adds	r2, r7, #4
 8009e2a:	f107 0310 	add.w	r3, r7, #16
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 ffaf 	bl	800ad94 <xTaskCheckForTimeOut>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d123      	bne.n	8009e84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e3e:	f000 f917 	bl	800a070 <prvIsQueueEmpty>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d017      	beq.n	8009e78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	3324      	adds	r3, #36	; 0x24
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fed5 	bl	800ac00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e58:	f000 f8b8 	bl	8009fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e5c:	f000 fd04 	bl	800a868 <xTaskResumeAll>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d189      	bne.n	8009d7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <xQueueReceive+0x1bc>)
 8009e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	e780      	b.n	8009d7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e7a:	f000 f8a7 	bl	8009fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e7e:	f000 fcf3 	bl	800a868 <xTaskResumeAll>
 8009e82:	e77a      	b.n	8009d7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e86:	f000 f8a1 	bl	8009fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e8a:	f000 fced 	bl	800a868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e90:	f000 f8ee 	bl	800a070 <prvIsQueueEmpty>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f43f af6f 	beq.w	8009d7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3730      	adds	r7, #48	; 0x30
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	e000ed04 	.word	0xe000ed04

08009eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10d      	bne.n	8009ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d14d      	bne.n	8009f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 f8c2 	bl	800b060 <xTaskPriorityDisinherit>
 8009edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	609a      	str	r2, [r3, #8]
 8009ee4:	e043      	b.n	8009f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d119      	bne.n	8009f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6858      	ldr	r0, [r3, #4]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	f003 fadf 	bl	800d4ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	441a      	add	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d32b      	bcc.n	8009f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	605a      	str	r2, [r3, #4]
 8009f1e:	e026      	b.n	8009f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	68d8      	ldr	r0, [r3, #12]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f28:	461a      	mov	r2, r3
 8009f2a:	68b9      	ldr	r1, [r7, #8]
 8009f2c:	f003 fac5 	bl	800d4ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	425b      	negs	r3, r3
 8009f3a:	441a      	add	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68da      	ldr	r2, [r3, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d207      	bcs.n	8009f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	425b      	negs	r3, r3
 8009f56:	441a      	add	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d105      	bne.n	8009f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f76:	697b      	ldr	r3, [r7, #20]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d018      	beq.n	8009fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9a:	441a      	add	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d303      	bcc.n	8009fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68d9      	ldr	r1, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	6838      	ldr	r0, [r7, #0]
 8009fc0:	f003 fa7b 	bl	800d4ba <memcpy>
	}
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fd4:	f001 fd7e 	bl	800bad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fe0:	e011      	b.n	800a006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d012      	beq.n	800a010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3324      	adds	r3, #36	; 0x24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fe56 	bl	800aca0 <xTaskRemoveFromEventList>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ffa:	f000 ff2d 	bl	800ae58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	3b01      	subs	r3, #1
 800a002:	b2db      	uxtb	r3, r3
 800a004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dce9      	bgt.n	8009fe2 <prvUnlockQueue+0x16>
 800a00e:	e000      	b.n	800a012 <prvUnlockQueue+0x46>
					break;
 800a010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	22ff      	movs	r2, #255	; 0xff
 800a016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a01a:	f001 fd8b 	bl	800bb34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a01e:	f001 fd59 	bl	800bad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a02a:	e011      	b.n	800a050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d012      	beq.n	800a05a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3310      	adds	r3, #16
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 fe31 	bl	800aca0 <xTaskRemoveFromEventList>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a044:	f000 ff08 	bl	800ae58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a054:	2b00      	cmp	r3, #0
 800a056:	dce9      	bgt.n	800a02c <prvUnlockQueue+0x60>
 800a058:	e000      	b.n	800a05c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a05a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	22ff      	movs	r2, #255	; 0xff
 800a060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a064:	f001 fd66 	bl	800bb34 <vPortExitCritical>
}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a078:	f001 fd2c 	bl	800bad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e001      	b.n	800a08e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a08e:	f001 fd51 	bl	800bb34 <vPortExitCritical>

	return xReturn;
 800a092:	68fb      	ldr	r3, [r7, #12]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0a4:	f001 fd16 	bl	800bad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d102      	bne.n	800a0ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e001      	b.n	800a0be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0be:	f001 fd39 	bl	800bb34 <vPortExitCritical>

	return xReturn;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e014      	b.n	800a106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0dc:	4a0f      	ldr	r2, [pc, #60]	; (800a11c <vQueueAddToRegistry+0x50>)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0e8:	490c      	ldr	r1, [pc, #48]	; (800a11c <vQueueAddToRegistry+0x50>)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0f2:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <vQueueAddToRegistry+0x50>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0fe:	e006      	b.n	800a10e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b07      	cmp	r3, #7
 800a10a:	d9e7      	bls.n	800a0dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20000d44 	.word	0x20000d44

0800a120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a130:	f001 fcd0 	bl	800bad4 <vPortEnterCritical>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a13a:	b25b      	sxtb	r3, r3
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d103      	bne.n	800a14a <vQueueWaitForMessageRestricted+0x2a>
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a150:	b25b      	sxtb	r3, r3
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d103      	bne.n	800a160 <vQueueWaitForMessageRestricted+0x40>
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a160:	f001 fce8 	bl	800bb34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	3324      	adds	r3, #36	; 0x24
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	68b9      	ldr	r1, [r7, #8]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fd67 	bl	800ac48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	f7ff ff26 	bl	8009fcc <prvUnlockQueue>
	}
 800a180:	bf00      	nop
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08e      	sub	sp, #56	; 0x38
 800a18c:	af04      	add	r7, sp, #16
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	623b      	str	r3, [r7, #32]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	61fb      	str	r3, [r7, #28]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1ce:	23a8      	movs	r3, #168	; 0xa8
 800a1d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2ba8      	cmp	r3, #168	; 0xa8
 800a1d6:	d00a      	beq.n	800a1ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	61bb      	str	r3, [r7, #24]
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d01e      	beq.n	800a234 <xTaskCreateStatic+0xac>
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01b      	beq.n	800a234 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	2202      	movs	r2, #2
 800a20a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a20e:	2300      	movs	r3, #0
 800a210:	9303      	str	r3, [sp, #12]
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	9302      	str	r3, [sp, #8]
 800a216:	f107 0314 	add.w	r3, r7, #20
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 f850 	bl	800a2cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a22c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a22e:	f000 f8f3 	bl	800a418 <prvAddNewTaskToReadyList>
 800a232:	e001      	b.n	800a238 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a238:	697b      	ldr	r3, [r7, #20]
	}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3728      	adds	r7, #40	; 0x28
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a242:	b580      	push	{r7, lr}
 800a244:	b08c      	sub	sp, #48	; 0x30
 800a246:	af04      	add	r7, sp, #16
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	4613      	mov	r3, r2
 800a250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4618      	mov	r0, r3
 800a258:	f001 fd5e 	bl	800bd18 <pvPortMalloc>
 800a25c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00e      	beq.n	800a282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a264:	20a8      	movs	r0, #168	; 0xa8
 800a266:	f001 fd57 	bl	800bd18 <pvPortMalloc>
 800a26a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
 800a278:	e005      	b.n	800a286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f001 fe18 	bl	800beb0 <vPortFree>
 800a280:	e001      	b.n	800a286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d017      	beq.n	800a2bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a294:	88fa      	ldrh	r2, [r7, #6]
 800a296:	2300      	movs	r3, #0
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	9302      	str	r3, [sp, #8]
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f80e 	bl	800a2cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2b0:	69f8      	ldr	r0, [r7, #28]
 800a2b2:	f000 f8b1 	bl	800a418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	61bb      	str	r3, [r7, #24]
 800a2ba:	e002      	b.n	800a2c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3720      	adds	r7, #32
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	21a5      	movs	r1, #165	; 0xa5
 800a2e6:	f002 ffe2 	bl	800d2ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	f023 0307 	bic.w	r3, r3, #7
 800a302:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	617b      	str	r3, [r7, #20]
}
 800a320:	bf00      	nop
 800a322:	e7fe      	b.n	800a322 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01f      	beq.n	800a36a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a32a:	2300      	movs	r3, #0
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	e012      	b.n	800a356 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	4413      	add	r3, r2
 800a336:	7819      	ldrb	r1, [r3, #0]
 800a338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	3334      	adds	r3, #52	; 0x34
 800a340:	460a      	mov	r2, r1
 800a342:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	4413      	add	r3, r2
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3301      	adds	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	2b0f      	cmp	r3, #15
 800a35a:	d9e9      	bls.n	800a330 <prvInitialiseNewTask+0x64>
 800a35c:	e000      	b.n	800a360 <prvInitialiseNewTask+0x94>
			{
				break;
 800a35e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a368:	e003      	b.n	800a372 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	2b37      	cmp	r3, #55	; 0x37
 800a376:	d901      	bls.n	800a37c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a378:	2337      	movs	r3, #55	; 0x37
 800a37a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a380:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a386:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	2200      	movs	r2, #0
 800a38c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	3304      	adds	r3, #4
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff f978 	bl	8009688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	3318      	adds	r3, #24
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff f973 	bl	8009688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	3354      	adds	r3, #84	; 0x54
 800a3cc:	224c      	movs	r2, #76	; 0x4c
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f002 ff6c 	bl	800d2ae <memset>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	4a0c      	ldr	r2, [pc, #48]	; (800a40c <prvInitialiseNewTask+0x140>)
 800a3da:	659a      	str	r2, [r3, #88]	; 0x58
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	4a0c      	ldr	r2, [pc, #48]	; (800a410 <prvInitialiseNewTask+0x144>)
 800a3e0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	4a0b      	ldr	r2, [pc, #44]	; (800a414 <prvInitialiseNewTask+0x148>)
 800a3e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	69b8      	ldr	r0, [r7, #24]
 800a3ee:	f001 fa47 	bl	800b880 <pxPortInitialiseStack>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a402:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a404:	bf00      	nop
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20001f98 	.word	0x20001f98
 800a410:	20002000 	.word	0x20002000
 800a414:	20002068 	.word	0x20002068

0800a418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a420:	f001 fb58 	bl	800bad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a424:	4b2d      	ldr	r3, [pc, #180]	; (800a4dc <prvAddNewTaskToReadyList+0xc4>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a2c      	ldr	r2, [pc, #176]	; (800a4dc <prvAddNewTaskToReadyList+0xc4>)
 800a42c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a42e:	4b2c      	ldr	r3, [pc, #176]	; (800a4e0 <prvAddNewTaskToReadyList+0xc8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a436:	4a2a      	ldr	r2, [pc, #168]	; (800a4e0 <prvAddNewTaskToReadyList+0xc8>)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a43c:	4b27      	ldr	r3, [pc, #156]	; (800a4dc <prvAddNewTaskToReadyList+0xc4>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d110      	bne.n	800a466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a444:	f000 fd2c 	bl	800aea0 <prvInitialiseTaskLists>
 800a448:	e00d      	b.n	800a466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a44a:	4b26      	ldr	r3, [pc, #152]	; (800a4e4 <prvAddNewTaskToReadyList+0xcc>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d109      	bne.n	800a466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a452:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <prvAddNewTaskToReadyList+0xc8>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d802      	bhi.n	800a466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a460:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <prvAddNewTaskToReadyList+0xc8>)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a466:	4b20      	ldr	r3, [pc, #128]	; (800a4e8 <prvAddNewTaskToReadyList+0xd0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3301      	adds	r3, #1
 800a46c:	4a1e      	ldr	r2, [pc, #120]	; (800a4e8 <prvAddNewTaskToReadyList+0xd0>)
 800a46e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a470:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <prvAddNewTaskToReadyList+0xd0>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ec <prvAddNewTaskToReadyList+0xd4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	429a      	cmp	r2, r3
 800a482:	d903      	bls.n	800a48c <prvAddNewTaskToReadyList+0x74>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	4a18      	ldr	r2, [pc, #96]	; (800a4ec <prvAddNewTaskToReadyList+0xd4>)
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a490:	4613      	mov	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <prvAddNewTaskToReadyList+0xd8>)
 800a49a:	441a      	add	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7ff f8fd 	bl	80096a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4a8:	f001 fb44 	bl	800bb34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <prvAddNewTaskToReadyList+0xcc>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00e      	beq.n	800a4d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <prvAddNewTaskToReadyList+0xc8>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d207      	bcs.n	800a4d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <prvAddNewTaskToReadyList+0xdc>)
 800a4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20001258 	.word	0x20001258
 800a4e0:	20000d84 	.word	0x20000d84
 800a4e4:	20001264 	.word	0x20001264
 800a4e8:	20001274 	.word	0x20001274
 800a4ec:	20001260 	.word	0x20001260
 800a4f0:	20000d88 	.word	0x20000d88
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a500:	2300      	movs	r3, #0
 800a502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d017      	beq.n	800a53a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a50a:	4b13      	ldr	r3, [pc, #76]	; (800a558 <vTaskDelay+0x60>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <vTaskDelay+0x30>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	60bb      	str	r3, [r7, #8]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a528:	f000 f990 	bl	800a84c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a52c:	2100      	movs	r1, #0
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fe04 	bl	800b13c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a534:	f000 f998 	bl	800a868 <xTaskResumeAll>
 800a538:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d107      	bne.n	800a550 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a540:	4b06      	ldr	r3, [pc, #24]	; (800a55c <vTaskDelay+0x64>)
 800a542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a550:	bf00      	nop
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20001280 	.word	0x20001280
 800a55c:	e000ed04 	.word	0xe000ed04

0800a560 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a568:	f001 fab4 	bl	800bad4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d102      	bne.n	800a578 <vTaskSuspend+0x18>
 800a572:	4b30      	ldr	r3, [pc, #192]	; (800a634 <vTaskSuspend+0xd4>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	e000      	b.n	800a57a <vTaskSuspend+0x1a>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3304      	adds	r3, #4
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff f8eb 	bl	800975c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d004      	beq.n	800a598 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3318      	adds	r3, #24
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff f8e2 	bl	800975c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4619      	mov	r1, r3
 800a59e:	4826      	ldr	r0, [pc, #152]	; (800a638 <vTaskSuspend+0xd8>)
 800a5a0:	f7ff f87f 	bl	80096a2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d103      	bne.n	800a5b8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a5b8:	f001 fabc 	bl	800bb34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a5bc:	4b1f      	ldr	r3, [pc, #124]	; (800a63c <vTaskSuspend+0xdc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d005      	beq.n	800a5d0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a5c4:	f001 fa86 	bl	800bad4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a5c8:	f000 fd0c 	bl	800afe4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a5cc:	f001 fab2 	bl	800bb34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a5d0:	4b18      	ldr	r3, [pc, #96]	; (800a634 <vTaskSuspend+0xd4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d127      	bne.n	800a62a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a5da:	4b18      	ldr	r3, [pc, #96]	; (800a63c <vTaskSuspend+0xdc>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d017      	beq.n	800a612 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a5e2:	4b17      	ldr	r3, [pc, #92]	; (800a640 <vTaskSuspend+0xe0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <vTaskSuspend+0xa0>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	60bb      	str	r3, [r7, #8]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a600:	4b10      	ldr	r3, [pc, #64]	; (800a644 <vTaskSuspend+0xe4>)
 800a602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a610:	e00b      	b.n	800a62a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a612:	4b09      	ldr	r3, [pc, #36]	; (800a638 <vTaskSuspend+0xd8>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <vTaskSuspend+0xe8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d103      	bne.n	800a626 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <vTaskSuspend+0xd4>)
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
	}
 800a624:	e001      	b.n	800a62a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a626:	f000 fa87 	bl	800ab38 <vTaskSwitchContext>
	}
 800a62a:	bf00      	nop
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20000d84 	.word	0x20000d84
 800a638:	20001244 	.word	0x20001244
 800a63c:	20001264 	.word	0x20001264
 800a640:	20001280 	.word	0x20001280
 800a644:	e000ed04 	.word	0xe000ed04
 800a648:	20001258 	.word	0x20001258

0800a64c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a654:	2300      	movs	r3, #0
 800a656:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	60fb      	str	r3, [r7, #12]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	4a0a      	ldr	r2, [pc, #40]	; (800a6a8 <prvTaskIsTaskSuspended+0x5c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d10a      	bne.n	800a698 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a686:	4a09      	ldr	r2, [pc, #36]	; (800a6ac <prvTaskIsTaskSuspended+0x60>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d005      	beq.n	800a698 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a694:	2301      	movs	r3, #1
 800a696:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a698:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a69a:	4618      	mov	r0, r3
 800a69c:	371c      	adds	r7, #28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	20001244 	.word	0x20001244
 800a6ac:	20001218 	.word	0x20001218

0800a6b0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <vTaskResume+0x28>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	60bb      	str	r3, [r7, #8]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a6d8:	4b20      	ldr	r3, [pc, #128]	; (800a75c <vTaskResume+0xac>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d038      	beq.n	800a754 <vTaskResume+0xa4>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d035      	beq.n	800a754 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a6e8:	f001 f9f4 	bl	800bad4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7ff ffad 	bl	800a64c <prvTaskIsTaskSuspended>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d02b      	beq.n	800a750 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff f82d 	bl	800975c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	4b16      	ldr	r3, [pc, #88]	; (800a760 <vTaskResume+0xb0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d903      	bls.n	800a716 <vTaskResume+0x66>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a712:	4a13      	ldr	r2, [pc, #76]	; (800a760 <vTaskResume+0xb0>)
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4a10      	ldr	r2, [pc, #64]	; (800a764 <vTaskResume+0xb4>)
 800a724:	441a      	add	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3304      	adds	r3, #4
 800a72a:	4619      	mov	r1, r3
 800a72c:	4610      	mov	r0, r2
 800a72e:	f7fe ffb8 	bl	80096a2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a736:	4b09      	ldr	r3, [pc, #36]	; (800a75c <vTaskResume+0xac>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d307      	bcc.n	800a750 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a740:	4b09      	ldr	r3, [pc, #36]	; (800a768 <vTaskResume+0xb8>)
 800a742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a750:	f001 f9f0 	bl	800bb34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a754:	bf00      	nop
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000d84 	.word	0x20000d84
 800a760:	20001260 	.word	0x20001260
 800a764:	20000d88 	.word	0x20000d88
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	; 0x28
 800a770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a77a:	463a      	mov	r2, r7
 800a77c:	1d39      	adds	r1, r7, #4
 800a77e:	f107 0308 	add.w	r3, r7, #8
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe ff2c 	bl	80095e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	9202      	str	r2, [sp, #8]
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	2300      	movs	r3, #0
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	2300      	movs	r3, #0
 800a798:	460a      	mov	r2, r1
 800a79a:	4924      	ldr	r1, [pc, #144]	; (800a82c <vTaskStartScheduler+0xc0>)
 800a79c:	4824      	ldr	r0, [pc, #144]	; (800a830 <vTaskStartScheduler+0xc4>)
 800a79e:	f7ff fcf3 	bl	800a188 <xTaskCreateStatic>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4a23      	ldr	r2, [pc, #140]	; (800a834 <vTaskStartScheduler+0xc8>)
 800a7a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a7a8:	4b22      	ldr	r3, [pc, #136]	; (800a834 <vTaskStartScheduler+0xc8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	e001      	b.n	800a7ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d102      	bne.n	800a7c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a7c0:	f000 fd10 	bl	800b1e4 <xTimerCreateTimerTask>
 800a7c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d11b      	bne.n	800a804 <vTaskStartScheduler+0x98>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	613b      	str	r3, [r7, #16]
}
 800a7de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7e0:	4b15      	ldr	r3, [pc, #84]	; (800a838 <vTaskStartScheduler+0xcc>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3354      	adds	r3, #84	; 0x54
 800a7e6:	4a15      	ldr	r2, [pc, #84]	; (800a83c <vTaskStartScheduler+0xd0>)
 800a7e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7ea:	4b15      	ldr	r3, [pc, #84]	; (800a840 <vTaskStartScheduler+0xd4>)
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7f2:	4b14      	ldr	r3, [pc, #80]	; (800a844 <vTaskStartScheduler+0xd8>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7f8:	4b13      	ldr	r3, [pc, #76]	; (800a848 <vTaskStartScheduler+0xdc>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7fe:	f001 f8c7 	bl	800b990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a802:	e00e      	b.n	800a822 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d10a      	bne.n	800a822 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	60fb      	str	r3, [r7, #12]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <vTaskStartScheduler+0xb4>
}
 800a822:	bf00      	nop
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	08010c90 	.word	0x08010c90
 800a830:	0800ae71 	.word	0x0800ae71
 800a834:	2000127c 	.word	0x2000127c
 800a838:	20000d84 	.word	0x20000d84
 800a83c:	2000006c 	.word	0x2000006c
 800a840:	20001278 	.word	0x20001278
 800a844:	20001264 	.word	0x20001264
 800a848:	2000125c 	.word	0x2000125c

0800a84c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a850:	4b04      	ldr	r3, [pc, #16]	; (800a864 <vTaskSuspendAll+0x18>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	4a03      	ldr	r2, [pc, #12]	; (800a864 <vTaskSuspendAll+0x18>)
 800a858:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a85a:	bf00      	nop
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	20001280 	.word	0x20001280

0800a868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a876:	4b42      	ldr	r3, [pc, #264]	; (800a980 <xTaskResumeAll+0x118>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <xTaskResumeAll+0x2c>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	603b      	str	r3, [r7, #0]
}
 800a890:	bf00      	nop
 800a892:	e7fe      	b.n	800a892 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a894:	f001 f91e 	bl	800bad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a898:	4b39      	ldr	r3, [pc, #228]	; (800a980 <xTaskResumeAll+0x118>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	4a38      	ldr	r2, [pc, #224]	; (800a980 <xTaskResumeAll+0x118>)
 800a8a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8a2:	4b37      	ldr	r3, [pc, #220]	; (800a980 <xTaskResumeAll+0x118>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d162      	bne.n	800a970 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8aa:	4b36      	ldr	r3, [pc, #216]	; (800a984 <xTaskResumeAll+0x11c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d05e      	beq.n	800a970 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8b2:	e02f      	b.n	800a914 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b4:	4b34      	ldr	r3, [pc, #208]	; (800a988 <xTaskResumeAll+0x120>)
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3318      	adds	r3, #24
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe ff4b 	bl	800975c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe ff46 	bl	800975c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d4:	4b2d      	ldr	r3, [pc, #180]	; (800a98c <xTaskResumeAll+0x124>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d903      	bls.n	800a8e4 <xTaskResumeAll+0x7c>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e0:	4a2a      	ldr	r2, [pc, #168]	; (800a98c <xTaskResumeAll+0x124>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4a27      	ldr	r2, [pc, #156]	; (800a990 <xTaskResumeAll+0x128>)
 800a8f2:	441a      	add	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	f7fe fed1 	bl	80096a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	4b23      	ldr	r3, [pc, #140]	; (800a994 <xTaskResumeAll+0x12c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d302      	bcc.n	800a914 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a90e:	4b22      	ldr	r3, [pc, #136]	; (800a998 <xTaskResumeAll+0x130>)
 800a910:	2201      	movs	r2, #1
 800a912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a914:	4b1c      	ldr	r3, [pc, #112]	; (800a988 <xTaskResumeAll+0x120>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1cb      	bne.n	800a8b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a922:	f000 fb5f 	bl	800afe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a926:	4b1d      	ldr	r3, [pc, #116]	; (800a99c <xTaskResumeAll+0x134>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d010      	beq.n	800a954 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a932:	f000 f847 	bl	800a9c4 <xTaskIncrementTick>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a93c:	4b16      	ldr	r3, [pc, #88]	; (800a998 <xTaskResumeAll+0x130>)
 800a93e:	2201      	movs	r2, #1
 800a940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	3b01      	subs	r3, #1
 800a946:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1f1      	bne.n	800a932 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <xTaskResumeAll+0x134>)
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a954:	4b10      	ldr	r3, [pc, #64]	; (800a998 <xTaskResumeAll+0x130>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a960:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <xTaskResumeAll+0x138>)
 800a962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a966:	601a      	str	r2, [r3, #0]
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a970:	f001 f8e0 	bl	800bb34 <vPortExitCritical>

	return xAlreadyYielded;
 800a974:	68bb      	ldr	r3, [r7, #8]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20001280 	.word	0x20001280
 800a984:	20001258 	.word	0x20001258
 800a988:	20001218 	.word	0x20001218
 800a98c:	20001260 	.word	0x20001260
 800a990:	20000d88 	.word	0x20000d88
 800a994:	20000d84 	.word	0x20000d84
 800a998:	2000126c 	.word	0x2000126c
 800a99c:	20001268 	.word	0x20001268
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a9aa:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <xTaskGetTickCount+0x1c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a9b0:	687b      	ldr	r3, [r7, #4]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	2000125c 	.word	0x2000125c

0800a9c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ce:	4b4f      	ldr	r3, [pc, #316]	; (800ab0c <xTaskIncrementTick+0x148>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f040 808f 	bne.w	800aaf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9d8:	4b4d      	ldr	r3, [pc, #308]	; (800ab10 <xTaskIncrementTick+0x14c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9e0:	4a4b      	ldr	r2, [pc, #300]	; (800ab10 <xTaskIncrementTick+0x14c>)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d120      	bne.n	800aa2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9ec:	4b49      	ldr	r3, [pc, #292]	; (800ab14 <xTaskIncrementTick+0x150>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <xTaskIncrementTick+0x48>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	603b      	str	r3, [r7, #0]
}
 800aa08:	bf00      	nop
 800aa0a:	e7fe      	b.n	800aa0a <xTaskIncrementTick+0x46>
 800aa0c:	4b41      	ldr	r3, [pc, #260]	; (800ab14 <xTaskIncrementTick+0x150>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	4b41      	ldr	r3, [pc, #260]	; (800ab18 <xTaskIncrementTick+0x154>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a3f      	ldr	r2, [pc, #252]	; (800ab14 <xTaskIncrementTick+0x150>)
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	4a3f      	ldr	r2, [pc, #252]	; (800ab18 <xTaskIncrementTick+0x154>)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	4b3e      	ldr	r3, [pc, #248]	; (800ab1c <xTaskIncrementTick+0x158>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3301      	adds	r3, #1
 800aa26:	4a3d      	ldr	r2, [pc, #244]	; (800ab1c <xTaskIncrementTick+0x158>)
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	f000 fadb 	bl	800afe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa2e:	4b3c      	ldr	r3, [pc, #240]	; (800ab20 <xTaskIncrementTick+0x15c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d349      	bcc.n	800aacc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa38:	4b36      	ldr	r3, [pc, #216]	; (800ab14 <xTaskIncrementTick+0x150>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa42:	4b37      	ldr	r3, [pc, #220]	; (800ab20 <xTaskIncrementTick+0x15c>)
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295
 800aa48:	601a      	str	r2, [r3, #0]
					break;
 800aa4a:	e03f      	b.n	800aacc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4c:	4b31      	ldr	r3, [pc, #196]	; (800ab14 <xTaskIncrementTick+0x150>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d203      	bcs.n	800aa6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa64:	4a2e      	ldr	r2, [pc, #184]	; (800ab20 <xTaskIncrementTick+0x15c>)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa6a:	e02f      	b.n	800aacc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fe73 	bl	800975c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d004      	beq.n	800aa88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	3318      	adds	r3, #24
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fe6a 	bl	800975c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8c:	4b25      	ldr	r3, [pc, #148]	; (800ab24 <xTaskIncrementTick+0x160>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d903      	bls.n	800aa9c <xTaskIncrementTick+0xd8>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	4a22      	ldr	r2, [pc, #136]	; (800ab24 <xTaskIncrementTick+0x160>)
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4a1f      	ldr	r2, [pc, #124]	; (800ab28 <xTaskIncrementTick+0x164>)
 800aaaa:	441a      	add	r2, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f7fe fdf5 	bl	80096a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabc:	4b1b      	ldr	r3, [pc, #108]	; (800ab2c <xTaskIncrementTick+0x168>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d3b8      	bcc.n	800aa38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aac6:	2301      	movs	r3, #1
 800aac8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaca:	e7b5      	b.n	800aa38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aacc:	4b17      	ldr	r3, [pc, #92]	; (800ab2c <xTaskIncrementTick+0x168>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad2:	4915      	ldr	r1, [pc, #84]	; (800ab28 <xTaskIncrementTick+0x164>)
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d901      	bls.n	800aae8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aae8:	4b11      	ldr	r3, [pc, #68]	; (800ab30 <xTaskIncrementTick+0x16c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d007      	beq.n	800ab00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	e004      	b.n	800ab00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aaf6:	4b0f      	ldr	r3, [pc, #60]	; (800ab34 <xTaskIncrementTick+0x170>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3301      	adds	r3, #1
 800aafc:	4a0d      	ldr	r2, [pc, #52]	; (800ab34 <xTaskIncrementTick+0x170>)
 800aafe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab00:	697b      	ldr	r3, [r7, #20]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20001280 	.word	0x20001280
 800ab10:	2000125c 	.word	0x2000125c
 800ab14:	20001210 	.word	0x20001210
 800ab18:	20001214 	.word	0x20001214
 800ab1c:	20001270 	.word	0x20001270
 800ab20:	20001278 	.word	0x20001278
 800ab24:	20001260 	.word	0x20001260
 800ab28:	20000d88 	.word	0x20000d88
 800ab2c:	20000d84 	.word	0x20000d84
 800ab30:	2000126c 	.word	0x2000126c
 800ab34:	20001268 	.word	0x20001268

0800ab38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab3e:	4b2a      	ldr	r3, [pc, #168]	; (800abe8 <vTaskSwitchContext+0xb0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab46:	4b29      	ldr	r3, [pc, #164]	; (800abec <vTaskSwitchContext+0xb4>)
 800ab48:	2201      	movs	r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab4c:	e046      	b.n	800abdc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ab4e:	4b27      	ldr	r3, [pc, #156]	; (800abec <vTaskSwitchContext+0xb4>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	4b26      	ldr	r3, [pc, #152]	; (800abf0 <vTaskSwitchContext+0xb8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	60fb      	str	r3, [r7, #12]
 800ab5a:	e010      	b.n	800ab7e <vTaskSwitchContext+0x46>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <vTaskSwitchContext+0x40>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	607b      	str	r3, [r7, #4]
}
 800ab74:	bf00      	nop
 800ab76:	e7fe      	b.n	800ab76 <vTaskSwitchContext+0x3e>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	491d      	ldr	r1, [pc, #116]	; (800abf4 <vTaskSwitchContext+0xbc>)
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0e4      	beq.n	800ab5c <vTaskSwitchContext+0x24>
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4a15      	ldr	r2, [pc, #84]	; (800abf4 <vTaskSwitchContext+0xbc>)
 800ab9e:	4413      	add	r3, r2
 800aba0:	60bb      	str	r3, [r7, #8]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	605a      	str	r2, [r3, #4]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	3308      	adds	r3, #8
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d104      	bne.n	800abc2 <vTaskSwitchContext+0x8a>
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	605a      	str	r2, [r3, #4]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	4a0b      	ldr	r2, [pc, #44]	; (800abf8 <vTaskSwitchContext+0xc0>)
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	4a08      	ldr	r2, [pc, #32]	; (800abf0 <vTaskSwitchContext+0xb8>)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800abd2:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <vTaskSwitchContext+0xc0>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3354      	adds	r3, #84	; 0x54
 800abd8:	4a08      	ldr	r2, [pc, #32]	; (800abfc <vTaskSwitchContext+0xc4>)
 800abda:	6013      	str	r3, [r2, #0]
}
 800abdc:	bf00      	nop
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	20001280 	.word	0x20001280
 800abec:	2000126c 	.word	0x2000126c
 800abf0:	20001260 	.word	0x20001260
 800abf4:	20000d88 	.word	0x20000d88
 800abf8:	20000d84 	.word	0x20000d84
 800abfc:	2000006c 	.word	0x2000006c

0800ac00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <vTaskPlaceOnEventList+0x44>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3318      	adds	r3, #24
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fe fd5b 	bl	80096ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac34:	2101      	movs	r1, #1
 800ac36:	6838      	ldr	r0, [r7, #0]
 800ac38:	f000 fa80 	bl	800b13c <prvAddCurrentTaskToDelayedList>
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000d84 	.word	0x20000d84

0800ac48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10a      	bne.n	800ac70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	617b      	str	r3, [r7, #20]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac70:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <vTaskPlaceOnEventListRestricted+0x54>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3318      	adds	r3, #24
 800ac76:	4619      	mov	r1, r3
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7fe fd12 	bl	80096a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295
 800ac88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac8a:	6879      	ldr	r1, [r7, #4]
 800ac8c:	68b8      	ldr	r0, [r7, #8]
 800ac8e:	f000 fa55 	bl	800b13c <prvAddCurrentTaskToDelayedList>
	}
 800ac92:	bf00      	nop
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000d84 	.word	0x20000d84

0800aca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10a      	bne.n	800accc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	f383 8811 	msr	BASEPRI, r3
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	60fb      	str	r3, [r7, #12]
}
 800acc8:	bf00      	nop
 800acca:	e7fe      	b.n	800acca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3318      	adds	r3, #24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fd43 	bl	800975c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acd6:	4b1e      	ldr	r3, [pc, #120]	; (800ad50 <xTaskRemoveFromEventList+0xb0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d11d      	bne.n	800ad1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fd3a 	bl	800975c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acec:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <xTaskRemoveFromEventList+0xb4>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d903      	bls.n	800acfc <xTaskRemoveFromEventList+0x5c>
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	4a16      	ldr	r2, [pc, #88]	; (800ad54 <xTaskRemoveFromEventList+0xb4>)
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4a13      	ldr	r2, [pc, #76]	; (800ad58 <xTaskRemoveFromEventList+0xb8>)
 800ad0a:	441a      	add	r2, r3
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4619      	mov	r1, r3
 800ad12:	4610      	mov	r0, r2
 800ad14:	f7fe fcc5 	bl	80096a2 <vListInsertEnd>
 800ad18:	e005      	b.n	800ad26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3318      	adds	r3, #24
 800ad1e:	4619      	mov	r1, r3
 800ad20:	480e      	ldr	r0, [pc, #56]	; (800ad5c <xTaskRemoveFromEventList+0xbc>)
 800ad22:	f7fe fcbe 	bl	80096a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2a:	4b0d      	ldr	r3, [pc, #52]	; (800ad60 <xTaskRemoveFromEventList+0xc0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d905      	bls.n	800ad40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad34:	2301      	movs	r3, #1
 800ad36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <xTaskRemoveFromEventList+0xc4>)
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e001      	b.n	800ad44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad44:	697b      	ldr	r3, [r7, #20]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20001280 	.word	0x20001280
 800ad54:	20001260 	.word	0x20001260
 800ad58:	20000d88 	.word	0x20000d88
 800ad5c:	20001218 	.word	0x20001218
 800ad60:	20000d84 	.word	0x20000d84
 800ad64:	2000126c 	.word	0x2000126c

0800ad68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad70:	4b06      	ldr	r3, [pc, #24]	; (800ad8c <vTaskInternalSetTimeOutState+0x24>)
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <vTaskInternalSetTimeOutState+0x28>)
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	605a      	str	r2, [r3, #4]
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20001270 	.word	0x20001270
 800ad90:	2000125c 	.word	0x2000125c

0800ad94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	613b      	str	r3, [r7, #16]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10a      	bne.n	800add6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	60fb      	str	r3, [r7, #12]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800add6:	f000 fe7d 	bl	800bad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800adda:	4b1d      	ldr	r3, [pc, #116]	; (800ae50 <xTaskCheckForTimeOut+0xbc>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf2:	d102      	bne.n	800adfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adf4:	2300      	movs	r3, #0
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e023      	b.n	800ae42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4b15      	ldr	r3, [pc, #84]	; (800ae54 <xTaskCheckForTimeOut+0xc0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d007      	beq.n	800ae16 <xTaskCheckForTimeOut+0x82>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d302      	bcc.n	800ae16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae10:	2301      	movs	r3, #1
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	e015      	b.n	800ae42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d20b      	bcs.n	800ae38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	1ad2      	subs	r2, r2, r3
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff9b 	bl	800ad68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	61fb      	str	r3, [r7, #28]
 800ae36:	e004      	b.n	800ae42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae42:	f000 fe77 	bl	800bb34 <vPortExitCritical>

	return xReturn;
 800ae46:	69fb      	ldr	r3, [r7, #28]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	2000125c 	.word	0x2000125c
 800ae54:	20001270 	.word	0x20001270

0800ae58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae5c:	4b03      	ldr	r3, [pc, #12]	; (800ae6c <vTaskMissedYield+0x14>)
 800ae5e:	2201      	movs	r2, #1
 800ae60:	601a      	str	r2, [r3, #0]
}
 800ae62:	bf00      	nop
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	2000126c 	.word	0x2000126c

0800ae70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae78:	f000 f852 	bl	800af20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae7c:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <prvIdleTask+0x28>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d9f9      	bls.n	800ae78 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae84:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <prvIdleTask+0x2c>)
 800ae86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae94:	e7f0      	b.n	800ae78 <prvIdleTask+0x8>
 800ae96:	bf00      	nop
 800ae98:	20000d88 	.word	0x20000d88
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	e00c      	b.n	800aec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4a12      	ldr	r2, [pc, #72]	; (800af00 <prvInitialiseTaskLists+0x60>)
 800aeb8:	4413      	add	r3, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fbc4 	bl	8009648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b37      	cmp	r3, #55	; 0x37
 800aeca:	d9ef      	bls.n	800aeac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aecc:	480d      	ldr	r0, [pc, #52]	; (800af04 <prvInitialiseTaskLists+0x64>)
 800aece:	f7fe fbbb 	bl	8009648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aed2:	480d      	ldr	r0, [pc, #52]	; (800af08 <prvInitialiseTaskLists+0x68>)
 800aed4:	f7fe fbb8 	bl	8009648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aed8:	480c      	ldr	r0, [pc, #48]	; (800af0c <prvInitialiseTaskLists+0x6c>)
 800aeda:	f7fe fbb5 	bl	8009648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aede:	480c      	ldr	r0, [pc, #48]	; (800af10 <prvInitialiseTaskLists+0x70>)
 800aee0:	f7fe fbb2 	bl	8009648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aee4:	480b      	ldr	r0, [pc, #44]	; (800af14 <prvInitialiseTaskLists+0x74>)
 800aee6:	f7fe fbaf 	bl	8009648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aeea:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <prvInitialiseTaskLists+0x78>)
 800aeec:	4a05      	ldr	r2, [pc, #20]	; (800af04 <prvInitialiseTaskLists+0x64>)
 800aeee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <prvInitialiseTaskLists+0x7c>)
 800aef2:	4a05      	ldr	r2, [pc, #20]	; (800af08 <prvInitialiseTaskLists+0x68>)
 800aef4:	601a      	str	r2, [r3, #0]
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20000d88 	.word	0x20000d88
 800af04:	200011e8 	.word	0x200011e8
 800af08:	200011fc 	.word	0x200011fc
 800af0c:	20001218 	.word	0x20001218
 800af10:	2000122c 	.word	0x2000122c
 800af14:	20001244 	.word	0x20001244
 800af18:	20001210 	.word	0x20001210
 800af1c:	20001214 	.word	0x20001214

0800af20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af26:	e019      	b.n	800af5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af28:	f000 fdd4 	bl	800bad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2c:	4b10      	ldr	r3, [pc, #64]	; (800af70 <prvCheckTasksWaitingTermination+0x50>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3304      	adds	r3, #4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fc0f 	bl	800975c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af3e:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <prvCheckTasksWaitingTermination+0x54>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3b01      	subs	r3, #1
 800af44:	4a0b      	ldr	r2, [pc, #44]	; (800af74 <prvCheckTasksWaitingTermination+0x54>)
 800af46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4a0a      	ldr	r2, [pc, #40]	; (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af52:	f000 fdef 	bl	800bb34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f810 	bl	800af7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af5c:	4b06      	ldr	r3, [pc, #24]	; (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e1      	bne.n	800af28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2000122c 	.word	0x2000122c
 800af74:	20001258 	.word	0x20001258
 800af78:	20001240 	.word	0x20001240

0800af7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3354      	adds	r3, #84	; 0x54
 800af88:	4618      	mov	r0, r3
 800af8a:	f002 f9cd 	bl	800d328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800af94:	2b00      	cmp	r3, #0
 800af96:	d108      	bne.n	800afaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 ff87 	bl	800beb0 <vPortFree>
				vPortFree( pxTCB );
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 ff84 	bl	800beb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800afa8:	e018      	b.n	800afdc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d103      	bne.n	800afbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 ff7b 	bl	800beb0 <vPortFree>
	}
 800afba:	e00f      	b.n	800afdc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d00a      	beq.n	800afdc <prvDeleteTCB+0x60>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	60fb      	str	r3, [r7, #12]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <prvDeleteTCB+0x5e>
	}
 800afdc:	bf00      	nop
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afea:	4b0c      	ldr	r3, [pc, #48]	; (800b01c <prvResetNextTaskUnblockTime+0x38>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d104      	bne.n	800affe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aff4:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <prvResetNextTaskUnblockTime+0x3c>)
 800aff6:	f04f 32ff 	mov.w	r2, #4294967295
 800affa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800affc:	e008      	b.n	800b010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800affe:	4b07      	ldr	r3, [pc, #28]	; (800b01c <prvResetNextTaskUnblockTime+0x38>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	4a04      	ldr	r2, [pc, #16]	; (800b020 <prvResetNextTaskUnblockTime+0x3c>)
 800b00e:	6013      	str	r3, [r2, #0]
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20001210 	.word	0x20001210
 800b020:	20001278 	.word	0x20001278

0800b024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b02a:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <xTaskGetSchedulerState+0x34>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d102      	bne.n	800b038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b032:	2301      	movs	r3, #1
 800b034:	607b      	str	r3, [r7, #4]
 800b036:	e008      	b.n	800b04a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b038:	4b08      	ldr	r3, [pc, #32]	; (800b05c <xTaskGetSchedulerState+0x38>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b040:	2302      	movs	r3, #2
 800b042:	607b      	str	r3, [r7, #4]
 800b044:	e001      	b.n	800b04a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b046:	2300      	movs	r3, #0
 800b048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b04a:	687b      	ldr	r3, [r7, #4]
	}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	20001264 	.word	0x20001264
 800b05c:	20001280 	.word	0x20001280

0800b060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d056      	beq.n	800b124 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b076:	4b2e      	ldr	r3, [pc, #184]	; (800b130 <xTaskPriorityDisinherit+0xd0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d00a      	beq.n	800b096 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	60fb      	str	r3, [r7, #12]
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10a      	bne.n	800b0b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	60bb      	str	r3, [r7, #8]
}
 800b0b0:	bf00      	nop
 800b0b2:	e7fe      	b.n	800b0b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0b8:	1e5a      	subs	r2, r3, #1
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d02c      	beq.n	800b124 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d128      	bne.n	800b124 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe fb40 	bl	800975c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f4:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <xTaskPriorityDisinherit+0xd4>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d903      	bls.n	800b104 <xTaskPriorityDisinherit+0xa4>
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	4a0c      	ldr	r2, [pc, #48]	; (800b134 <xTaskPriorityDisinherit+0xd4>)
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4a09      	ldr	r2, [pc, #36]	; (800b138 <xTaskPriorityDisinherit+0xd8>)
 800b112:	441a      	add	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	3304      	adds	r3, #4
 800b118:	4619      	mov	r1, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	f7fe fac1 	bl	80096a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b120:	2301      	movs	r3, #1
 800b122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b124:	697b      	ldr	r3, [r7, #20]
	}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20000d84 	.word	0x20000d84
 800b134:	20001260 	.word	0x20001260
 800b138:	20000d88 	.word	0x20000d88

0800b13c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b146:	4b21      	ldr	r3, [pc, #132]	; (800b1cc <prvAddCurrentTaskToDelayedList+0x90>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b14c:	4b20      	ldr	r3, [pc, #128]	; (800b1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3304      	adds	r3, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fb02 	bl	800975c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15e:	d10a      	bne.n	800b176 <prvAddCurrentTaskToDelayedList+0x3a>
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b166:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3304      	adds	r3, #4
 800b16c:	4619      	mov	r1, r3
 800b16e:	4819      	ldr	r0, [pc, #100]	; (800b1d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b170:	f7fe fa97 	bl	80096a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b174:	e026      	b.n	800b1c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4413      	add	r3, r2
 800b17c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b17e:	4b14      	ldr	r3, [pc, #80]	; (800b1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d209      	bcs.n	800b1a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b18e:	4b12      	ldr	r3, [pc, #72]	; (800b1d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3304      	adds	r3, #4
 800b198:	4619      	mov	r1, r3
 800b19a:	4610      	mov	r0, r2
 800b19c:	f7fe faa5 	bl	80096ea <vListInsert>
}
 800b1a0:	e010      	b.n	800b1c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1a2:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fe fa9b 	bl	80096ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1b4:	4b0a      	ldr	r3, [pc, #40]	; (800b1e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d202      	bcs.n	800b1c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b1be:	4a08      	ldr	r2, [pc, #32]	; (800b1e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	6013      	str	r3, [r2, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	2000125c 	.word	0x2000125c
 800b1d0:	20000d84 	.word	0x20000d84
 800b1d4:	20001244 	.word	0x20001244
 800b1d8:	20001214 	.word	0x20001214
 800b1dc:	20001210 	.word	0x20001210
 800b1e0:	20001278 	.word	0x20001278

0800b1e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08a      	sub	sp, #40	; 0x28
 800b1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b1ee:	f000 fb07 	bl	800b800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b1f2:	4b1c      	ldr	r3, [pc, #112]	; (800b264 <xTimerCreateTimerTask+0x80>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d021      	beq.n	800b23e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b202:	1d3a      	adds	r2, r7, #4
 800b204:	f107 0108 	add.w	r1, r7, #8
 800b208:	f107 030c 	add.w	r3, r7, #12
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fa01 	bl	8009614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	9202      	str	r2, [sp, #8]
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	2302      	movs	r3, #2
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	2300      	movs	r3, #0
 800b222:	460a      	mov	r2, r1
 800b224:	4910      	ldr	r1, [pc, #64]	; (800b268 <xTimerCreateTimerTask+0x84>)
 800b226:	4811      	ldr	r0, [pc, #68]	; (800b26c <xTimerCreateTimerTask+0x88>)
 800b228:	f7fe ffae 	bl	800a188 <xTaskCreateStatic>
 800b22c:	4603      	mov	r3, r0
 800b22e:	4a10      	ldr	r2, [pc, #64]	; (800b270 <xTimerCreateTimerTask+0x8c>)
 800b230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b232:	4b0f      	ldr	r3, [pc, #60]	; (800b270 <xTimerCreateTimerTask+0x8c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b23a:	2301      	movs	r3, #1
 800b23c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	613b      	str	r3, [r7, #16]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b25a:	697b      	ldr	r3, [r7, #20]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200012b4 	.word	0x200012b4
 800b268:	08010c98 	.word	0x08010c98
 800b26c:	0800b3a9 	.word	0x0800b3a9
 800b270:	200012b8 	.word	0x200012b8

0800b274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08a      	sub	sp, #40	; 0x28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b282:	2300      	movs	r3, #0
 800b284:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	623b      	str	r3, [r7, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b2a2:	4b1a      	ldr	r3, [pc, #104]	; (800b30c <xTimerGenericCommand+0x98>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d02a      	beq.n	800b300 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b05      	cmp	r3, #5
 800b2ba:	dc18      	bgt.n	800b2ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b2bc:	f7ff feb2 	bl	800b024 <xTaskGetSchedulerState>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d109      	bne.n	800b2da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b2c6:	4b11      	ldr	r3, [pc, #68]	; (800b30c <xTimerGenericCommand+0x98>)
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	f107 0110 	add.w	r1, r7, #16
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d2:	f7fe fb71 	bl	80099b8 <xQueueGenericSend>
 800b2d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b2d8:	e012      	b.n	800b300 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b2da:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <xTimerGenericCommand+0x98>)
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	f107 0110 	add.w	r1, r7, #16
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f7fe fb67 	bl	80099b8 <xQueueGenericSend>
 800b2ea:	6278      	str	r0, [r7, #36]	; 0x24
 800b2ec:	e008      	b.n	800b300 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b2ee:	4b07      	ldr	r3, [pc, #28]	; (800b30c <xTimerGenericCommand+0x98>)
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	f107 0110 	add.w	r1, r7, #16
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	f7fe fc5b 	bl	8009bb4 <xQueueGenericSendFromISR>
 800b2fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b302:	4618      	mov	r0, r3
 800b304:	3728      	adds	r7, #40	; 0x28
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200012b4 	.word	0x200012b4

0800b310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af02      	add	r7, sp, #8
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31a:	4b22      	ldr	r3, [pc, #136]	; (800b3a4 <prvProcessExpiredTimer+0x94>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	3304      	adds	r3, #4
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe fa17 	bl	800975c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d022      	beq.n	800b382 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	699a      	ldr	r2, [r3, #24]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	18d1      	adds	r1, r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	6978      	ldr	r0, [r7, #20]
 800b34a:	f000 f8d1 	bl	800b4f0 <prvInsertTimerInActiveList>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01f      	beq.n	800b394 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b354:	2300      	movs	r3, #0
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	2300      	movs	r3, #0
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	2100      	movs	r1, #0
 800b35e:	6978      	ldr	r0, [r7, #20]
 800b360:	f7ff ff88 	bl	800b274 <xTimerGenericCommand>
 800b364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d113      	bne.n	800b394 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	60fb      	str	r3, [r7, #12]
}
 800b37e:	bf00      	nop
 800b380:	e7fe      	b.n	800b380 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b388:	f023 0301 	bic.w	r3, r3, #1
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	6978      	ldr	r0, [r7, #20]
 800b39a:	4798      	blx	r3
}
 800b39c:	bf00      	nop
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	200012ac 	.word	0x200012ac

0800b3a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3b0:	f107 0308 	add.w	r3, r7, #8
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 f857 	bl	800b468 <prvGetNextExpireTime>
 800b3ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 f803 	bl	800b3cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b3c6:	f000 f8d5 	bl	800b574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3ca:	e7f1      	b.n	800b3b0 <prvTimerTask+0x8>

0800b3cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b3d6:	f7ff fa39 	bl	800a84c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3da:	f107 0308 	add.w	r3, r7, #8
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 f866 	bl	800b4b0 <prvSampleTimeNow>
 800b3e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d130      	bne.n	800b44e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10a      	bne.n	800b408 <prvProcessTimerOrBlockTask+0x3c>
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d806      	bhi.n	800b408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b3fa:	f7ff fa35 	bl	800a868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b3fe:	68f9      	ldr	r1, [r7, #12]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff ff85 	bl	800b310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b406:	e024      	b.n	800b452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b40e:	4b13      	ldr	r3, [pc, #76]	; (800b45c <prvProcessTimerOrBlockTask+0x90>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <prvProcessTimerOrBlockTask+0x50>
 800b418:	2301      	movs	r3, #1
 800b41a:	e000      	b.n	800b41e <prvProcessTimerOrBlockTask+0x52>
 800b41c:	2300      	movs	r3, #0
 800b41e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b420:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <prvProcessTimerOrBlockTask+0x94>)
 800b422:	6818      	ldr	r0, [r3, #0]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	4619      	mov	r1, r3
 800b42e:	f7fe fe77 	bl	800a120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b432:	f7ff fa19 	bl	800a868 <xTaskResumeAll>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10a      	bne.n	800b452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b43c:	4b09      	ldr	r3, [pc, #36]	; (800b464 <prvProcessTimerOrBlockTask+0x98>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	f3bf 8f6f 	isb	sy
}
 800b44c:	e001      	b.n	800b452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b44e:	f7ff fa0b 	bl	800a868 <xTaskResumeAll>
}
 800b452:	bf00      	nop
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200012b0 	.word	0x200012b0
 800b460:	200012b4 	.word	0x200012b4
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b470:	4b0e      	ldr	r3, [pc, #56]	; (800b4ac <prvGetNextExpireTime+0x44>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <prvGetNextExpireTime+0x16>
 800b47a:	2201      	movs	r2, #1
 800b47c:	e000      	b.n	800b480 <prvGetNextExpireTime+0x18>
 800b47e:	2200      	movs	r2, #0
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d105      	bne.n	800b498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b48c:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <prvGetNextExpireTime+0x44>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	e001      	b.n	800b49c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b49c:	68fb      	ldr	r3, [r7, #12]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	200012ac 	.word	0x200012ac

0800b4b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b4b8:	f7ff fa74 	bl	800a9a4 <xTaskGetTickCount>
 800b4bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b4be:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <prvSampleTimeNow+0x3c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d205      	bcs.n	800b4d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b4c8:	f000 f936 	bl	800b738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	e002      	b.n	800b4da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b4da:	4a04      	ldr	r2, [pc, #16]	; (800b4ec <prvSampleTimeNow+0x3c>)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200012bc 	.word	0x200012bc

0800b4f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	429a      	cmp	r2, r3
 800b514:	d812      	bhi.n	800b53c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	1ad2      	subs	r2, r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	429a      	cmp	r2, r3
 800b522:	d302      	bcc.n	800b52a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b524:	2301      	movs	r3, #1
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	e01b      	b.n	800b562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b52a:	4b10      	ldr	r3, [pc, #64]	; (800b56c <prvInsertTimerInActiveList+0x7c>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3304      	adds	r3, #4
 800b532:	4619      	mov	r1, r3
 800b534:	4610      	mov	r0, r2
 800b536:	f7fe f8d8 	bl	80096ea <vListInsert>
 800b53a:	e012      	b.n	800b562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	d206      	bcs.n	800b552 <prvInsertTimerInActiveList+0x62>
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d302      	bcc.n	800b552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b54c:	2301      	movs	r3, #1
 800b54e:	617b      	str	r3, [r7, #20]
 800b550:	e007      	b.n	800b562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b552:	4b07      	ldr	r3, [pc, #28]	; (800b570 <prvInsertTimerInActiveList+0x80>)
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7fe f8c4 	bl	80096ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b562:	697b      	ldr	r3, [r7, #20]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	200012b0 	.word	0x200012b0
 800b570:	200012ac 	.word	0x200012ac

0800b574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08e      	sub	sp, #56	; 0x38
 800b578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b57a:	e0ca      	b.n	800b712 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da18      	bge.n	800b5b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b582:	1d3b      	adds	r3, r7, #4
 800b584:	3304      	adds	r3, #4
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	61fb      	str	r3, [r7, #28]
}
 800b5a0:	bf00      	nop
 800b5a2:	e7fe      	b.n	800b5a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5aa:	6850      	ldr	r0, [r2, #4]
 800b5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ae:	6892      	ldr	r2, [r2, #8]
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f2c0 80ab 	blt.w	800b712 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d004      	beq.n	800b5d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe f8c5 	bl	800975c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ff6b 	bl	800b4b0 <prvSampleTimeNow>
 800b5da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b09      	cmp	r3, #9
 800b5e0:	f200 8096 	bhi.w	800b710 <prvProcessReceivedCommands+0x19c>
 800b5e4:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <prvProcessReceivedCommands+0x78>)
 800b5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ea:	bf00      	nop
 800b5ec:	0800b615 	.word	0x0800b615
 800b5f0:	0800b615 	.word	0x0800b615
 800b5f4:	0800b615 	.word	0x0800b615
 800b5f8:	0800b689 	.word	0x0800b689
 800b5fc:	0800b69d 	.word	0x0800b69d
 800b600:	0800b6e7 	.word	0x0800b6e7
 800b604:	0800b615 	.word	0x0800b615
 800b608:	0800b615 	.word	0x0800b615
 800b60c:	0800b689 	.word	0x0800b689
 800b610:	0800b69d 	.word	0x0800b69d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	18d1      	adds	r1, r2, r3
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b634:	f7ff ff5c 	bl	800b4f0 <prvInsertTimerInActiveList>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d069      	beq.n	800b712 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b64c:	f003 0304 	and.w	r3, r3, #4
 800b650:	2b00      	cmp	r3, #0
 800b652:	d05e      	beq.n	800b712 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	441a      	add	r2, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	2300      	movs	r3, #0
 800b662:	2100      	movs	r1, #0
 800b664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b666:	f7ff fe05 	bl	800b274 <xTimerGenericCommand>
 800b66a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d14f      	bne.n	800b712 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	61bb      	str	r3, [r7, #24]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b68e:	f023 0301 	bic.w	r3, r3, #1
 800b692:	b2da      	uxtb	r2, r3
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b69a:	e03a      	b.n	800b712 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6a2:	f043 0301 	orr.w	r3, r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10a      	bne.n	800b6d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	617b      	str	r3, [r7, #20]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d4:	699a      	ldr	r2, [r3, #24]
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d8:	18d1      	adds	r1, r2, r3
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6e0:	f7ff ff06 	bl	800b4f0 <prvInsertTimerInActiveList>
					break;
 800b6e4:	e015      	b.n	800b712 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d103      	bne.n	800b6fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6f6:	f000 fbdb 	bl	800beb0 <vPortFree>
 800b6fa:	e00a      	b.n	800b712 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b702:	f023 0301 	bic.w	r3, r3, #1
 800b706:	b2da      	uxtb	r2, r3
 800b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b70e:	e000      	b.n	800b712 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b712:	4b08      	ldr	r3, [pc, #32]	; (800b734 <prvProcessReceivedCommands+0x1c0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	1d39      	adds	r1, r7, #4
 800b718:	2200      	movs	r2, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe fae6 	bl	8009cec <xQueueReceive>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	f47f af2a 	bne.w	800b57c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	3730      	adds	r7, #48	; 0x30
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	200012b4 	.word	0x200012b4

0800b738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b73e:	e048      	b.n	800b7d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b740:	4b2d      	ldr	r3, [pc, #180]	; (800b7f8 <prvSwitchTimerLists+0xc0>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74a:	4b2b      	ldr	r3, [pc, #172]	; (800b7f8 <prvSwitchTimerLists+0xc0>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3304      	adds	r3, #4
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fd ffff 	bl	800975c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d02e      	beq.n	800b7d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	4413      	add	r3, r2
 800b77c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	429a      	cmp	r2, r3
 800b784:	d90e      	bls.n	800b7a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b792:	4b19      	ldr	r3, [pc, #100]	; (800b7f8 <prvSwitchTimerLists+0xc0>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3304      	adds	r3, #4
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7fd ffa4 	bl	80096ea <vListInsert>
 800b7a2:	e016      	b.n	800b7d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff fd60 	bl	800b274 <xTimerGenericCommand>
 800b7b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	603b      	str	r3, [r7, #0]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <prvSwitchTimerLists+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1b1      	bne.n	800b740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b7dc:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <prvSwitchTimerLists+0xc0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b7e2:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <prvSwitchTimerLists+0xc4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a04      	ldr	r2, [pc, #16]	; (800b7f8 <prvSwitchTimerLists+0xc0>)
 800b7e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b7ea:	4a04      	ldr	r2, [pc, #16]	; (800b7fc <prvSwitchTimerLists+0xc4>)
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	6013      	str	r3, [r2, #0]
}
 800b7f0:	bf00      	nop
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	200012ac 	.word	0x200012ac
 800b7fc:	200012b0 	.word	0x200012b0

0800b800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b806:	f000 f965 	bl	800bad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b80a:	4b15      	ldr	r3, [pc, #84]	; (800b860 <prvCheckForValidListAndQueue+0x60>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d120      	bne.n	800b854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b812:	4814      	ldr	r0, [pc, #80]	; (800b864 <prvCheckForValidListAndQueue+0x64>)
 800b814:	f7fd ff18 	bl	8009648 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b818:	4813      	ldr	r0, [pc, #76]	; (800b868 <prvCheckForValidListAndQueue+0x68>)
 800b81a:	f7fd ff15 	bl	8009648 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b81e:	4b13      	ldr	r3, [pc, #76]	; (800b86c <prvCheckForValidListAndQueue+0x6c>)
 800b820:	4a10      	ldr	r2, [pc, #64]	; (800b864 <prvCheckForValidListAndQueue+0x64>)
 800b822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b824:	4b12      	ldr	r3, [pc, #72]	; (800b870 <prvCheckForValidListAndQueue+0x70>)
 800b826:	4a10      	ldr	r2, [pc, #64]	; (800b868 <prvCheckForValidListAndQueue+0x68>)
 800b828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b82a:	2300      	movs	r3, #0
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	4b11      	ldr	r3, [pc, #68]	; (800b874 <prvCheckForValidListAndQueue+0x74>)
 800b830:	4a11      	ldr	r2, [pc, #68]	; (800b878 <prvCheckForValidListAndQueue+0x78>)
 800b832:	2110      	movs	r1, #16
 800b834:	200a      	movs	r0, #10
 800b836:	f7fe f823 	bl	8009880 <xQueueGenericCreateStatic>
 800b83a:	4603      	mov	r3, r0
 800b83c:	4a08      	ldr	r2, [pc, #32]	; (800b860 <prvCheckForValidListAndQueue+0x60>)
 800b83e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b840:	4b07      	ldr	r3, [pc, #28]	; (800b860 <prvCheckForValidListAndQueue+0x60>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <prvCheckForValidListAndQueue+0x60>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	490b      	ldr	r1, [pc, #44]	; (800b87c <prvCheckForValidListAndQueue+0x7c>)
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fc3c 	bl	800a0cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b854:	f000 f96e 	bl	800bb34 <vPortExitCritical>
}
 800b858:	bf00      	nop
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	200012b4 	.word	0x200012b4
 800b864:	20001284 	.word	0x20001284
 800b868:	20001298 	.word	0x20001298
 800b86c:	200012ac 	.word	0x200012ac
 800b870:	200012b0 	.word	0x200012b0
 800b874:	20001360 	.word	0x20001360
 800b878:	200012c0 	.word	0x200012c0
 800b87c:	08010ca0 	.word	0x08010ca0

0800b880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3b04      	subs	r3, #4
 800b890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3b04      	subs	r3, #4
 800b89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f023 0201 	bic.w	r2, r3, #1
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8b0:	4a0c      	ldr	r2, [pc, #48]	; (800b8e4 <pxPortInitialiseStack+0x64>)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3b14      	subs	r3, #20
 800b8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3b04      	subs	r3, #4
 800b8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f06f 0202 	mvn.w	r2, #2
 800b8ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3b20      	subs	r3, #32
 800b8d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	0800b8e9 	.word	0x0800b8e9

0800b8e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8f2:	4b12      	ldr	r3, [pc, #72]	; (800b93c <prvTaskExitError+0x54>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	d00a      	beq.n	800b912 <prvTaskExitError+0x2a>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	60fb      	str	r3, [r7, #12]
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <prvTaskExitError+0x28>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	60bb      	str	r3, [r7, #8]
}
 800b924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b926:	bf00      	nop
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0fc      	beq.n	800b928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	20000010 	.word	0x20000010

0800b940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b940:	4b07      	ldr	r3, [pc, #28]	; (800b960 <pxCurrentTCBConst2>)
 800b942:	6819      	ldr	r1, [r3, #0]
 800b944:	6808      	ldr	r0, [r1, #0]
 800b946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94a:	f380 8809 	msr	PSP, r0
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f04f 0000 	mov.w	r0, #0
 800b956:	f380 8811 	msr	BASEPRI, r0
 800b95a:	4770      	bx	lr
 800b95c:	f3af 8000 	nop.w

0800b960 <pxCurrentTCBConst2>:
 800b960:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop

0800b968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b968:	4808      	ldr	r0, [pc, #32]	; (800b98c <prvPortStartFirstTask+0x24>)
 800b96a:	6800      	ldr	r0, [r0, #0]
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f380 8808 	msr	MSP, r0
 800b972:	f04f 0000 	mov.w	r0, #0
 800b976:	f380 8814 	msr	CONTROL, r0
 800b97a:	b662      	cpsie	i
 800b97c:	b661      	cpsie	f
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	df00      	svc	0
 800b988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b98a:	bf00      	nop
 800b98c:	e000ed08 	.word	0xe000ed08

0800b990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b996:	4b46      	ldr	r3, [pc, #280]	; (800bab0 <xPortStartScheduler+0x120>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a46      	ldr	r2, [pc, #280]	; (800bab4 <xPortStartScheduler+0x124>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d10a      	bne.n	800b9b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	613b      	str	r3, [r7, #16]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9b6:	4b3e      	ldr	r3, [pc, #248]	; (800bab0 <xPortStartScheduler+0x120>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a3f      	ldr	r2, [pc, #252]	; (800bab8 <xPortStartScheduler+0x128>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d10a      	bne.n	800b9d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	60fb      	str	r3, [r7, #12]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b9d6:	4b39      	ldr	r3, [pc, #228]	; (800babc <xPortStartScheduler+0x12c>)
 800b9d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	22ff      	movs	r2, #255	; 0xff
 800b9e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	4b31      	ldr	r3, [pc, #196]	; (800bac0 <xPortStartScheduler+0x130>)
 800b9fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9fe:	4b31      	ldr	r3, [pc, #196]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba00:	2207      	movs	r2, #7
 800ba02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba04:	e009      	b.n	800ba1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ba06:	4b2f      	ldr	r3, [pc, #188]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	4a2d      	ldr	r2, [pc, #180]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba10:	78fb      	ldrb	r3, [r7, #3]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba1a:	78fb      	ldrb	r3, [r7, #3]
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba22:	2b80      	cmp	r3, #128	; 0x80
 800ba24:	d0ef      	beq.n	800ba06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba26:	4b27      	ldr	r3, [pc, #156]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f1c3 0307 	rsb	r3, r3, #7
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	d00a      	beq.n	800ba48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	60bb      	str	r3, [r7, #8]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba48:	4b1e      	ldr	r3, [pc, #120]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	4a1d      	ldr	r2, [pc, #116]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba52:	4b1c      	ldr	r3, [pc, #112]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba5a:	4a1a      	ldr	r2, [pc, #104]	; (800bac4 <xPortStartScheduler+0x134>)
 800ba5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba66:	4b18      	ldr	r3, [pc, #96]	; (800bac8 <xPortStartScheduler+0x138>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a17      	ldr	r2, [pc, #92]	; (800bac8 <xPortStartScheduler+0x138>)
 800ba6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba72:	4b15      	ldr	r3, [pc, #84]	; (800bac8 <xPortStartScheduler+0x138>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a14      	ldr	r2, [pc, #80]	; (800bac8 <xPortStartScheduler+0x138>)
 800ba78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba7e:	f000 f8dd 	bl	800bc3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba82:	4b12      	ldr	r3, [pc, #72]	; (800bacc <xPortStartScheduler+0x13c>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba88:	f000 f8fc 	bl	800bc84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba8c:	4b10      	ldr	r3, [pc, #64]	; (800bad0 <xPortStartScheduler+0x140>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a0f      	ldr	r2, [pc, #60]	; (800bad0 <xPortStartScheduler+0x140>)
 800ba92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba98:	f7ff ff66 	bl	800b968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba9c:	f7ff f84c 	bl	800ab38 <vTaskSwitchContext>
	prvTaskExitError();
 800baa0:	f7ff ff22 	bl	800b8e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	e000ed00 	.word	0xe000ed00
 800bab4:	410fc271 	.word	0x410fc271
 800bab8:	410fc270 	.word	0x410fc270
 800babc:	e000e400 	.word	0xe000e400
 800bac0:	200013b0 	.word	0x200013b0
 800bac4:	200013b4 	.word	0x200013b4
 800bac8:	e000ed20 	.word	0xe000ed20
 800bacc:	20000010 	.word	0x20000010
 800bad0:	e000ef34 	.word	0xe000ef34

0800bad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
	__asm volatile
 800bada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	607b      	str	r3, [r7, #4]
}
 800baec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800baee:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <vPortEnterCritical+0x58>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3301      	adds	r3, #1
 800baf4:	4a0d      	ldr	r2, [pc, #52]	; (800bb2c <vPortEnterCritical+0x58>)
 800baf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800baf8:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <vPortEnterCritical+0x58>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d10f      	bne.n	800bb20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb00:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <vPortEnterCritical+0x5c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <vPortEnterCritical+0x4c>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	603b      	str	r3, [r7, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	e7fe      	b.n	800bb1e <vPortEnterCritical+0x4a>
	}
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20000010 	.word	0x20000010
 800bb30:	e000ed04 	.word	0xe000ed04

0800bb34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb3a:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <vPortExitCritical+0x50>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <vPortExitCritical+0x24>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	607b      	str	r3, [r7, #4]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb58:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <vPortExitCritical+0x50>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	4a09      	ldr	r2, [pc, #36]	; (800bb84 <vPortExitCritical+0x50>)
 800bb60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb62:	4b08      	ldr	r3, [pc, #32]	; (800bb84 <vPortExitCritical+0x50>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d105      	bne.n	800bb76 <vPortExitCritical+0x42>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	f383 8811 	msr	BASEPRI, r3
}
 800bb74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb76:	bf00      	nop
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	20000010 	.word	0x20000010
	...

0800bb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb90:	f3ef 8009 	mrs	r0, PSP
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <pxCurrentTCBConst>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	f01e 0f10 	tst.w	lr, #16
 800bba0:	bf08      	it	eq
 800bba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbaa:	6010      	str	r0, [r2, #0]
 800bbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bbb4:	f380 8811 	msr	BASEPRI, r0
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f7fe ffba 	bl	800ab38 <vTaskSwitchContext>
 800bbc4:	f04f 0000 	mov.w	r0, #0
 800bbc8:	f380 8811 	msr	BASEPRI, r0
 800bbcc:	bc09      	pop	{r0, r3}
 800bbce:	6819      	ldr	r1, [r3, #0]
 800bbd0:	6808      	ldr	r0, [r1, #0]
 800bbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd6:	f01e 0f10 	tst.w	lr, #16
 800bbda:	bf08      	it	eq
 800bbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bbe0:	f380 8809 	msr	PSP, r0
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	f3af 8000 	nop.w

0800bbf0 <pxCurrentTCBConst>:
 800bbf0:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop

0800bbf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
}
 800bc10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc12:	f7fe fed7 	bl	800a9c4 <xTaskIncrementTick>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <xPortSysTickHandler+0x40>)
 800bc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc22:	601a      	str	r2, [r3, #0]
 800bc24:	2300      	movs	r3, #0
 800bc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f383 8811 	msr	BASEPRI, r3
}
 800bc2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <vPortSetupTimerInterrupt+0x34>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <vPortSetupTimerInterrupt+0x38>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <vPortSetupTimerInterrupt+0x3c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0a      	ldr	r2, [pc, #40]	; (800bc7c <vPortSetupTimerInterrupt+0x40>)
 800bc52:	fba2 2303 	umull	r2, r3, r2, r3
 800bc56:	099b      	lsrs	r3, r3, #6
 800bc58:	4a09      	ldr	r2, [pc, #36]	; (800bc80 <vPortSetupTimerInterrupt+0x44>)
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc5e:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <vPortSetupTimerInterrupt+0x34>)
 800bc60:	2207      	movs	r2, #7
 800bc62:	601a      	str	r2, [r3, #0]
}
 800bc64:	bf00      	nop
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	e000e010 	.word	0xe000e010
 800bc74:	e000e018 	.word	0xe000e018
 800bc78:	20000004 	.word	0x20000004
 800bc7c:	10624dd3 	.word	0x10624dd3
 800bc80:	e000e014 	.word	0xe000e014

0800bc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc94 <vPortEnableVFP+0x10>
 800bc88:	6801      	ldr	r1, [r0, #0]
 800bc8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc8e:	6001      	str	r1, [r0, #0]
 800bc90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc92:	bf00      	nop
 800bc94:	e000ed88 	.word	0xe000ed88

0800bc98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc9e:	f3ef 8305 	mrs	r3, IPSR
 800bca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b0f      	cmp	r3, #15
 800bca8:	d914      	bls.n	800bcd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcaa:	4a17      	ldr	r2, [pc, #92]	; (800bd08 <vPortValidateInterruptPriority+0x70>)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcb4:	4b15      	ldr	r3, [pc, #84]	; (800bd0c <vPortValidateInterruptPriority+0x74>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	7afa      	ldrb	r2, [r7, #11]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d20a      	bcs.n	800bcd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	607b      	str	r3, [r7, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bcd4:	4b0e      	ldr	r3, [pc, #56]	; (800bd10 <vPortValidateInterruptPriority+0x78>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	; (800bd14 <vPortValidateInterruptPriority+0x7c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d90a      	bls.n	800bcfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	603b      	str	r3, [r7, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <vPortValidateInterruptPriority+0x60>
	}
 800bcfa:	bf00      	nop
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	e000e3f0 	.word	0xe000e3f0
 800bd0c:	200013b0 	.word	0x200013b0
 800bd10:	e000ed0c 	.word	0xe000ed0c
 800bd14:	200013b4 	.word	0x200013b4

0800bd18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd20:	2300      	movs	r3, #0
 800bd22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd24:	f7fe fd92 	bl	800a84c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd28:	4b5b      	ldr	r3, [pc, #364]	; (800be98 <pvPortMalloc+0x180>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd30:	f000 f920 	bl	800bf74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd34:	4b59      	ldr	r3, [pc, #356]	; (800be9c <pvPortMalloc+0x184>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f040 8093 	bne.w	800be68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01d      	beq.n	800bd84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd48:	2208      	movs	r2, #8
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f003 0307 	and.w	r3, r3, #7
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d014      	beq.n	800bd84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f023 0307 	bic.w	r3, r3, #7
 800bd60:	3308      	adds	r3, #8
 800bd62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f003 0307 	and.w	r3, r3, #7
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <pvPortMalloc+0x6c>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	617b      	str	r3, [r7, #20]
}
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d06e      	beq.n	800be68 <pvPortMalloc+0x150>
 800bd8a:	4b45      	ldr	r3, [pc, #276]	; (800bea0 <pvPortMalloc+0x188>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d869      	bhi.n	800be68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd94:	4b43      	ldr	r3, [pc, #268]	; (800bea4 <pvPortMalloc+0x18c>)
 800bd96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd98:	4b42      	ldr	r3, [pc, #264]	; (800bea4 <pvPortMalloc+0x18c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd9e:	e004      	b.n	800bdaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d903      	bls.n	800bdbc <pvPortMalloc+0xa4>
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1f1      	bne.n	800bda0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdbc:	4b36      	ldr	r3, [pc, #216]	; (800be98 <pvPortMalloc+0x180>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d050      	beq.n	800be68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2208      	movs	r2, #8
 800bdcc:	4413      	add	r3, r2
 800bdce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	1ad2      	subs	r2, r2, r3
 800bde0:	2308      	movs	r3, #8
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d91f      	bls.n	800be28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4413      	add	r3, r2
 800bdee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	f003 0307 	and.w	r3, r3, #7
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00a      	beq.n	800be10 <pvPortMalloc+0xf8>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	613b      	str	r3, [r7, #16]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	1ad2      	subs	r2, r2, r3
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be22:	69b8      	ldr	r0, [r7, #24]
 800be24:	f000 f908 	bl	800c038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be28:	4b1d      	ldr	r3, [pc, #116]	; (800bea0 <pvPortMalloc+0x188>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	4a1b      	ldr	r2, [pc, #108]	; (800bea0 <pvPortMalloc+0x188>)
 800be34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be36:	4b1a      	ldr	r3, [pc, #104]	; (800bea0 <pvPortMalloc+0x188>)
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	4b1b      	ldr	r3, [pc, #108]	; (800bea8 <pvPortMalloc+0x190>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d203      	bcs.n	800be4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be42:	4b17      	ldr	r3, [pc, #92]	; (800bea0 <pvPortMalloc+0x188>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a18      	ldr	r2, [pc, #96]	; (800bea8 <pvPortMalloc+0x190>)
 800be48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	4b13      	ldr	r3, [pc, #76]	; (800be9c <pvPortMalloc+0x184>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	431a      	orrs	r2, r3
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be5e:	4b13      	ldr	r3, [pc, #76]	; (800beac <pvPortMalloc+0x194>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3301      	adds	r3, #1
 800be64:	4a11      	ldr	r2, [pc, #68]	; (800beac <pvPortMalloc+0x194>)
 800be66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be68:	f7fe fcfe 	bl	800a868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	f003 0307 	and.w	r3, r3, #7
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00a      	beq.n	800be8c <pvPortMalloc+0x174>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	60fb      	str	r3, [r7, #12]
}
 800be88:	bf00      	nop
 800be8a:	e7fe      	b.n	800be8a <pvPortMalloc+0x172>
	return pvReturn;
 800be8c:	69fb      	ldr	r3, [r7, #28]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3728      	adds	r7, #40	; 0x28
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20001f78 	.word	0x20001f78
 800be9c:	20001f8c 	.word	0x20001f8c
 800bea0:	20001f7c 	.word	0x20001f7c
 800bea4:	20001f70 	.word	0x20001f70
 800bea8:	20001f80 	.word	0x20001f80
 800beac:	20001f84 	.word	0x20001f84

0800beb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d04d      	beq.n	800bf5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bec2:	2308      	movs	r3, #8
 800bec4:	425b      	negs	r3, r3
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	4413      	add	r3, r2
 800beca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <vPortFree+0xb8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4013      	ands	r3, r2
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10a      	bne.n	800bef4 <vPortFree+0x44>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	60fb      	str	r3, [r7, #12]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00a      	beq.n	800bf12 <vPortFree+0x62>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	60bb      	str	r3, [r7, #8]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	685a      	ldr	r2, [r3, #4]
 800bf16:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <vPortFree+0xb8>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d01e      	beq.n	800bf5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d11a      	bne.n	800bf5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	4b0e      	ldr	r3, [pc, #56]	; (800bf68 <vPortFree+0xb8>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	43db      	mvns	r3, r3
 800bf32:	401a      	ands	r2, r3
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf38:	f7fe fc88 	bl	800a84c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	685a      	ldr	r2, [r3, #4]
 800bf40:	4b0a      	ldr	r3, [pc, #40]	; (800bf6c <vPortFree+0xbc>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4413      	add	r3, r2
 800bf46:	4a09      	ldr	r2, [pc, #36]	; (800bf6c <vPortFree+0xbc>)
 800bf48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf4a:	6938      	ldr	r0, [r7, #16]
 800bf4c:	f000 f874 	bl	800c038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf50:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <vPortFree+0xc0>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3301      	adds	r3, #1
 800bf56:	4a06      	ldr	r2, [pc, #24]	; (800bf70 <vPortFree+0xc0>)
 800bf58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf5a:	f7fe fc85 	bl	800a868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf5e:	bf00      	nop
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20001f8c 	.word	0x20001f8c
 800bf6c:	20001f7c 	.word	0x20001f7c
 800bf70:	20001f88 	.word	0x20001f88

0800bf74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bf7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf80:	4b27      	ldr	r3, [pc, #156]	; (800c020 <prvHeapInit+0xac>)
 800bf82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f003 0307 	and.w	r3, r3, #7
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00c      	beq.n	800bfa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3307      	adds	r3, #7
 800bf92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0307 	bic.w	r3, r3, #7
 800bf9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	4a1f      	ldr	r2, [pc, #124]	; (800c020 <prvHeapInit+0xac>)
 800bfa4:	4413      	add	r3, r2
 800bfa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfac:	4a1d      	ldr	r2, [pc, #116]	; (800c024 <prvHeapInit+0xb0>)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bfb2:	4b1c      	ldr	r3, [pc, #112]	; (800c024 <prvHeapInit+0xb0>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	1a9b      	subs	r3, r3, r2
 800bfc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f023 0307 	bic.w	r3, r3, #7
 800bfce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4a15      	ldr	r2, [pc, #84]	; (800c028 <prvHeapInit+0xb4>)
 800bfd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bfd6:	4b14      	ldr	r3, [pc, #80]	; (800c028 <prvHeapInit+0xb4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfde:	4b12      	ldr	r3, [pc, #72]	; (800c028 <prvHeapInit+0xb4>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	1ad2      	subs	r2, r2, r3
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bff4:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <prvHeapInit+0xb4>)
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4a0a      	ldr	r2, [pc, #40]	; (800c02c <prvHeapInit+0xb8>)
 800c002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	4a09      	ldr	r2, [pc, #36]	; (800c030 <prvHeapInit+0xbc>)
 800c00a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c00c:	4b09      	ldr	r3, [pc, #36]	; (800c034 <prvHeapInit+0xc0>)
 800c00e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c012:	601a      	str	r2, [r3, #0]
}
 800c014:	bf00      	nop
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr
 800c020:	200013b8 	.word	0x200013b8
 800c024:	20001f70 	.word	0x20001f70
 800c028:	20001f78 	.word	0x20001f78
 800c02c:	20001f80 	.word	0x20001f80
 800c030:	20001f7c 	.word	0x20001f7c
 800c034:	20001f8c 	.word	0x20001f8c

0800c038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c040:	4b28      	ldr	r3, [pc, #160]	; (800c0e4 <prvInsertBlockIntoFreeList+0xac>)
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	e002      	b.n	800c04c <prvInsertBlockIntoFreeList+0x14>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60fb      	str	r3, [r7, #12]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d8f7      	bhi.n	800c046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	4413      	add	r3, r2
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	429a      	cmp	r2, r3
 800c066:	d108      	bne.n	800c07a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	441a      	add	r2, r3
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	441a      	add	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d118      	bne.n	800c0c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d00d      	beq.n	800c0b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	441a      	add	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	601a      	str	r2, [r3, #0]
 800c0b4:	e008      	b.n	800c0c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0b6:	4b0c      	ldr	r3, [pc, #48]	; (800c0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	e003      	b.n	800c0c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d002      	beq.n	800c0d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0d6:	bf00      	nop
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20001f70 	.word	0x20001f70
 800c0e8:	20001f78 	.word	0x20001f78

0800c0ec <atoi>:
 800c0ec:	220a      	movs	r2, #10
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f000 b938 	b.w	800c364 <strtol>

0800c0f4 <malloc>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	; (800c100 <malloc+0xc>)
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f000 b823 	b.w	800c144 <_malloc_r>
 800c0fe:	bf00      	nop
 800c100:	2000006c 	.word	0x2000006c

0800c104 <sbrk_aligned>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	4e0e      	ldr	r6, [pc, #56]	; (800c140 <sbrk_aligned+0x3c>)
 800c108:	460c      	mov	r4, r1
 800c10a:	6831      	ldr	r1, [r6, #0]
 800c10c:	4605      	mov	r5, r0
 800c10e:	b911      	cbnz	r1, 800c116 <sbrk_aligned+0x12>
 800c110:	f001 f984 	bl	800d41c <_sbrk_r>
 800c114:	6030      	str	r0, [r6, #0]
 800c116:	4621      	mov	r1, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	f001 f97f 	bl	800d41c <_sbrk_r>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d00a      	beq.n	800c138 <sbrk_aligned+0x34>
 800c122:	1cc4      	adds	r4, r0, #3
 800c124:	f024 0403 	bic.w	r4, r4, #3
 800c128:	42a0      	cmp	r0, r4
 800c12a:	d007      	beq.n	800c13c <sbrk_aligned+0x38>
 800c12c:	1a21      	subs	r1, r4, r0
 800c12e:	4628      	mov	r0, r5
 800c130:	f001 f974 	bl	800d41c <_sbrk_r>
 800c134:	3001      	adds	r0, #1
 800c136:	d101      	bne.n	800c13c <sbrk_aligned+0x38>
 800c138:	f04f 34ff 	mov.w	r4, #4294967295
 800c13c:	4620      	mov	r0, r4
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	20001f94 	.word	0x20001f94

0800c144 <_malloc_r>:
 800c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c148:	1ccd      	adds	r5, r1, #3
 800c14a:	f025 0503 	bic.w	r5, r5, #3
 800c14e:	3508      	adds	r5, #8
 800c150:	2d0c      	cmp	r5, #12
 800c152:	bf38      	it	cc
 800c154:	250c      	movcc	r5, #12
 800c156:	2d00      	cmp	r5, #0
 800c158:	4607      	mov	r7, r0
 800c15a:	db01      	blt.n	800c160 <_malloc_r+0x1c>
 800c15c:	42a9      	cmp	r1, r5
 800c15e:	d905      	bls.n	800c16c <_malloc_r+0x28>
 800c160:	230c      	movs	r3, #12
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	2600      	movs	r6, #0
 800c166:	4630      	mov	r0, r6
 800c168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c16c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c240 <_malloc_r+0xfc>
 800c170:	f000 f868 	bl	800c244 <__malloc_lock>
 800c174:	f8d8 3000 	ldr.w	r3, [r8]
 800c178:	461c      	mov	r4, r3
 800c17a:	bb5c      	cbnz	r4, 800c1d4 <_malloc_r+0x90>
 800c17c:	4629      	mov	r1, r5
 800c17e:	4638      	mov	r0, r7
 800c180:	f7ff ffc0 	bl	800c104 <sbrk_aligned>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	4604      	mov	r4, r0
 800c188:	d155      	bne.n	800c236 <_malloc_r+0xf2>
 800c18a:	f8d8 4000 	ldr.w	r4, [r8]
 800c18e:	4626      	mov	r6, r4
 800c190:	2e00      	cmp	r6, #0
 800c192:	d145      	bne.n	800c220 <_malloc_r+0xdc>
 800c194:	2c00      	cmp	r4, #0
 800c196:	d048      	beq.n	800c22a <_malloc_r+0xe6>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	4631      	mov	r1, r6
 800c19c:	4638      	mov	r0, r7
 800c19e:	eb04 0903 	add.w	r9, r4, r3
 800c1a2:	f001 f93b 	bl	800d41c <_sbrk_r>
 800c1a6:	4581      	cmp	r9, r0
 800c1a8:	d13f      	bne.n	800c22a <_malloc_r+0xe6>
 800c1aa:	6821      	ldr	r1, [r4, #0]
 800c1ac:	1a6d      	subs	r5, r5, r1
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ffa7 	bl	800c104 <sbrk_aligned>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d037      	beq.n	800c22a <_malloc_r+0xe6>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	442b      	add	r3, r5
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d038      	beq.n	800c23a <_malloc_r+0xf6>
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	42a2      	cmp	r2, r4
 800c1cc:	d12b      	bne.n	800c226 <_malloc_r+0xe2>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	e00f      	b.n	800c1f4 <_malloc_r+0xb0>
 800c1d4:	6822      	ldr	r2, [r4, #0]
 800c1d6:	1b52      	subs	r2, r2, r5
 800c1d8:	d41f      	bmi.n	800c21a <_malloc_r+0xd6>
 800c1da:	2a0b      	cmp	r2, #11
 800c1dc:	d917      	bls.n	800c20e <_malloc_r+0xca>
 800c1de:	1961      	adds	r1, r4, r5
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	6025      	str	r5, [r4, #0]
 800c1e4:	bf18      	it	ne
 800c1e6:	6059      	strne	r1, [r3, #4]
 800c1e8:	6863      	ldr	r3, [r4, #4]
 800c1ea:	bf08      	it	eq
 800c1ec:	f8c8 1000 	streq.w	r1, [r8]
 800c1f0:	5162      	str	r2, [r4, r5]
 800c1f2:	604b      	str	r3, [r1, #4]
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f104 060b 	add.w	r6, r4, #11
 800c1fa:	f000 f829 	bl	800c250 <__malloc_unlock>
 800c1fe:	f026 0607 	bic.w	r6, r6, #7
 800c202:	1d23      	adds	r3, r4, #4
 800c204:	1af2      	subs	r2, r6, r3
 800c206:	d0ae      	beq.n	800c166 <_malloc_r+0x22>
 800c208:	1b9b      	subs	r3, r3, r6
 800c20a:	50a3      	str	r3, [r4, r2]
 800c20c:	e7ab      	b.n	800c166 <_malloc_r+0x22>
 800c20e:	42a3      	cmp	r3, r4
 800c210:	6862      	ldr	r2, [r4, #4]
 800c212:	d1dd      	bne.n	800c1d0 <_malloc_r+0x8c>
 800c214:	f8c8 2000 	str.w	r2, [r8]
 800c218:	e7ec      	b.n	800c1f4 <_malloc_r+0xb0>
 800c21a:	4623      	mov	r3, r4
 800c21c:	6864      	ldr	r4, [r4, #4]
 800c21e:	e7ac      	b.n	800c17a <_malloc_r+0x36>
 800c220:	4634      	mov	r4, r6
 800c222:	6876      	ldr	r6, [r6, #4]
 800c224:	e7b4      	b.n	800c190 <_malloc_r+0x4c>
 800c226:	4613      	mov	r3, r2
 800c228:	e7cc      	b.n	800c1c4 <_malloc_r+0x80>
 800c22a:	230c      	movs	r3, #12
 800c22c:	603b      	str	r3, [r7, #0]
 800c22e:	4638      	mov	r0, r7
 800c230:	f000 f80e 	bl	800c250 <__malloc_unlock>
 800c234:	e797      	b.n	800c166 <_malloc_r+0x22>
 800c236:	6025      	str	r5, [r4, #0]
 800c238:	e7dc      	b.n	800c1f4 <_malloc_r+0xb0>
 800c23a:	605b      	str	r3, [r3, #4]
 800c23c:	deff      	udf	#255	; 0xff
 800c23e:	bf00      	nop
 800c240:	20001f90 	.word	0x20001f90

0800c244 <__malloc_lock>:
 800c244:	4801      	ldr	r0, [pc, #4]	; (800c24c <__malloc_lock+0x8>)
 800c246:	f001 b936 	b.w	800d4b6 <__retarget_lock_acquire_recursive>
 800c24a:	bf00      	nop
 800c24c:	200020d8 	.word	0x200020d8

0800c250 <__malloc_unlock>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__malloc_unlock+0x8>)
 800c252:	f001 b931 	b.w	800d4b8 <__retarget_lock_release_recursive>
 800c256:	bf00      	nop
 800c258:	200020d8 	.word	0x200020d8

0800c25c <_strtol_l.constprop.0>:
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c262:	d001      	beq.n	800c268 <_strtol_l.constprop.0+0xc>
 800c264:	2b24      	cmp	r3, #36	; 0x24
 800c266:	d906      	bls.n	800c276 <_strtol_l.constprop.0+0x1a>
 800c268:	f001 f8fa 	bl	800d460 <__errno>
 800c26c:	2316      	movs	r3, #22
 800c26e:	6003      	str	r3, [r0, #0]
 800c270:	2000      	movs	r0, #0
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c35c <_strtol_l.constprop.0+0x100>
 800c27a:	460d      	mov	r5, r1
 800c27c:	462e      	mov	r6, r5
 800c27e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c282:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c286:	f017 0708 	ands.w	r7, r7, #8
 800c28a:	d1f7      	bne.n	800c27c <_strtol_l.constprop.0+0x20>
 800c28c:	2c2d      	cmp	r4, #45	; 0x2d
 800c28e:	d132      	bne.n	800c2f6 <_strtol_l.constprop.0+0x9a>
 800c290:	782c      	ldrb	r4, [r5, #0]
 800c292:	2701      	movs	r7, #1
 800c294:	1cb5      	adds	r5, r6, #2
 800c296:	2b00      	cmp	r3, #0
 800c298:	d05b      	beq.n	800c352 <_strtol_l.constprop.0+0xf6>
 800c29a:	2b10      	cmp	r3, #16
 800c29c:	d109      	bne.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c29e:	2c30      	cmp	r4, #48	; 0x30
 800c2a0:	d107      	bne.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c2a2:	782c      	ldrb	r4, [r5, #0]
 800c2a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c2a8:	2c58      	cmp	r4, #88	; 0x58
 800c2aa:	d14d      	bne.n	800c348 <_strtol_l.constprop.0+0xec>
 800c2ac:	786c      	ldrb	r4, [r5, #1]
 800c2ae:	2310      	movs	r3, #16
 800c2b0:	3502      	adds	r5, #2
 800c2b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c2b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2ba:	f04f 0e00 	mov.w	lr, #0
 800c2be:	fbb8 f9f3 	udiv	r9, r8, r3
 800c2c2:	4676      	mov	r6, lr
 800c2c4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c2c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c2cc:	f1bc 0f09 	cmp.w	ip, #9
 800c2d0:	d816      	bhi.n	800c300 <_strtol_l.constprop.0+0xa4>
 800c2d2:	4664      	mov	r4, ip
 800c2d4:	42a3      	cmp	r3, r4
 800c2d6:	dd24      	ble.n	800c322 <_strtol_l.constprop.0+0xc6>
 800c2d8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c2dc:	d008      	beq.n	800c2f0 <_strtol_l.constprop.0+0x94>
 800c2de:	45b1      	cmp	r9, r6
 800c2e0:	d31c      	bcc.n	800c31c <_strtol_l.constprop.0+0xc0>
 800c2e2:	d101      	bne.n	800c2e8 <_strtol_l.constprop.0+0x8c>
 800c2e4:	45a2      	cmp	sl, r4
 800c2e6:	db19      	blt.n	800c31c <_strtol_l.constprop.0+0xc0>
 800c2e8:	fb06 4603 	mla	r6, r6, r3, r4
 800c2ec:	f04f 0e01 	mov.w	lr, #1
 800c2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2f4:	e7e8      	b.n	800c2c8 <_strtol_l.constprop.0+0x6c>
 800c2f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c2f8:	bf04      	itt	eq
 800c2fa:	782c      	ldrbeq	r4, [r5, #0]
 800c2fc:	1cb5      	addeq	r5, r6, #2
 800c2fe:	e7ca      	b.n	800c296 <_strtol_l.constprop.0+0x3a>
 800c300:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c304:	f1bc 0f19 	cmp.w	ip, #25
 800c308:	d801      	bhi.n	800c30e <_strtol_l.constprop.0+0xb2>
 800c30a:	3c37      	subs	r4, #55	; 0x37
 800c30c:	e7e2      	b.n	800c2d4 <_strtol_l.constprop.0+0x78>
 800c30e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c312:	f1bc 0f19 	cmp.w	ip, #25
 800c316:	d804      	bhi.n	800c322 <_strtol_l.constprop.0+0xc6>
 800c318:	3c57      	subs	r4, #87	; 0x57
 800c31a:	e7db      	b.n	800c2d4 <_strtol_l.constprop.0+0x78>
 800c31c:	f04f 3eff 	mov.w	lr, #4294967295
 800c320:	e7e6      	b.n	800c2f0 <_strtol_l.constprop.0+0x94>
 800c322:	f1be 3fff 	cmp.w	lr, #4294967295
 800c326:	d105      	bne.n	800c334 <_strtol_l.constprop.0+0xd8>
 800c328:	2322      	movs	r3, #34	; 0x22
 800c32a:	6003      	str	r3, [r0, #0]
 800c32c:	4646      	mov	r6, r8
 800c32e:	b942      	cbnz	r2, 800c342 <_strtol_l.constprop.0+0xe6>
 800c330:	4630      	mov	r0, r6
 800c332:	e79e      	b.n	800c272 <_strtol_l.constprop.0+0x16>
 800c334:	b107      	cbz	r7, 800c338 <_strtol_l.constprop.0+0xdc>
 800c336:	4276      	negs	r6, r6
 800c338:	2a00      	cmp	r2, #0
 800c33a:	d0f9      	beq.n	800c330 <_strtol_l.constprop.0+0xd4>
 800c33c:	f1be 0f00 	cmp.w	lr, #0
 800c340:	d000      	beq.n	800c344 <_strtol_l.constprop.0+0xe8>
 800c342:	1e69      	subs	r1, r5, #1
 800c344:	6011      	str	r1, [r2, #0]
 800c346:	e7f3      	b.n	800c330 <_strtol_l.constprop.0+0xd4>
 800c348:	2430      	movs	r4, #48	; 0x30
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1b1      	bne.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c34e:	2308      	movs	r3, #8
 800c350:	e7af      	b.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c352:	2c30      	cmp	r4, #48	; 0x30
 800c354:	d0a5      	beq.n	800c2a2 <_strtol_l.constprop.0+0x46>
 800c356:	230a      	movs	r3, #10
 800c358:	e7ab      	b.n	800c2b2 <_strtol_l.constprop.0+0x56>
 800c35a:	bf00      	nop
 800c35c:	08010d81 	.word	0x08010d81

0800c360 <_strtol_r>:
 800c360:	f7ff bf7c 	b.w	800c25c <_strtol_l.constprop.0>

0800c364 <strtol>:
 800c364:	4613      	mov	r3, r2
 800c366:	460a      	mov	r2, r1
 800c368:	4601      	mov	r1, r0
 800c36a:	4802      	ldr	r0, [pc, #8]	; (800c374 <strtol+0x10>)
 800c36c:	6800      	ldr	r0, [r0, #0]
 800c36e:	f7ff bf75 	b.w	800c25c <_strtol_l.constprop.0>
 800c372:	bf00      	nop
 800c374:	2000006c 	.word	0x2000006c

0800c378 <__cvt>:
 800c378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c37c:	ec55 4b10 	vmov	r4, r5, d0
 800c380:	2d00      	cmp	r5, #0
 800c382:	460e      	mov	r6, r1
 800c384:	4619      	mov	r1, r3
 800c386:	462b      	mov	r3, r5
 800c388:	bfbb      	ittet	lt
 800c38a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c38e:	461d      	movlt	r5, r3
 800c390:	2300      	movge	r3, #0
 800c392:	232d      	movlt	r3, #45	; 0x2d
 800c394:	700b      	strb	r3, [r1, #0]
 800c396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c398:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c39c:	4691      	mov	r9, r2
 800c39e:	f023 0820 	bic.w	r8, r3, #32
 800c3a2:	bfbc      	itt	lt
 800c3a4:	4622      	movlt	r2, r4
 800c3a6:	4614      	movlt	r4, r2
 800c3a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3ac:	d005      	beq.n	800c3ba <__cvt+0x42>
 800c3ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c3b2:	d100      	bne.n	800c3b6 <__cvt+0x3e>
 800c3b4:	3601      	adds	r6, #1
 800c3b6:	2102      	movs	r1, #2
 800c3b8:	e000      	b.n	800c3bc <__cvt+0x44>
 800c3ba:	2103      	movs	r1, #3
 800c3bc:	ab03      	add	r3, sp, #12
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	ab02      	add	r3, sp, #8
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	ec45 4b10 	vmov	d0, r4, r5
 800c3c8:	4653      	mov	r3, sl
 800c3ca:	4632      	mov	r2, r6
 800c3cc:	f001 f914 	bl	800d5f8 <_dtoa_r>
 800c3d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c3d4:	4607      	mov	r7, r0
 800c3d6:	d102      	bne.n	800c3de <__cvt+0x66>
 800c3d8:	f019 0f01 	tst.w	r9, #1
 800c3dc:	d022      	beq.n	800c424 <__cvt+0xac>
 800c3de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c3e2:	eb07 0906 	add.w	r9, r7, r6
 800c3e6:	d110      	bne.n	800c40a <__cvt+0x92>
 800c3e8:	783b      	ldrb	r3, [r7, #0]
 800c3ea:	2b30      	cmp	r3, #48	; 0x30
 800c3ec:	d10a      	bne.n	800c404 <__cvt+0x8c>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7f4 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3fa:	b918      	cbnz	r0, 800c404 <__cvt+0x8c>
 800c3fc:	f1c6 0601 	rsb	r6, r6, #1
 800c400:	f8ca 6000 	str.w	r6, [sl]
 800c404:	f8da 3000 	ldr.w	r3, [sl]
 800c408:	4499      	add	r9, r3
 800c40a:	2200      	movs	r2, #0
 800c40c:	2300      	movs	r3, #0
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	f7f4 fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 800c416:	b108      	cbz	r0, 800c41c <__cvt+0xa4>
 800c418:	f8cd 900c 	str.w	r9, [sp, #12]
 800c41c:	2230      	movs	r2, #48	; 0x30
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	454b      	cmp	r3, r9
 800c422:	d307      	bcc.n	800c434 <__cvt+0xbc>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c428:	1bdb      	subs	r3, r3, r7
 800c42a:	4638      	mov	r0, r7
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	b004      	add	sp, #16
 800c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c434:	1c59      	adds	r1, r3, #1
 800c436:	9103      	str	r1, [sp, #12]
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	e7f0      	b.n	800c41e <__cvt+0xa6>

0800c43c <__exponent>:
 800c43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c43e:	4603      	mov	r3, r0
 800c440:	2900      	cmp	r1, #0
 800c442:	bfb8      	it	lt
 800c444:	4249      	neglt	r1, r1
 800c446:	f803 2b02 	strb.w	r2, [r3], #2
 800c44a:	bfb4      	ite	lt
 800c44c:	222d      	movlt	r2, #45	; 0x2d
 800c44e:	222b      	movge	r2, #43	; 0x2b
 800c450:	2909      	cmp	r1, #9
 800c452:	7042      	strb	r2, [r0, #1]
 800c454:	dd2a      	ble.n	800c4ac <__exponent+0x70>
 800c456:	f10d 0207 	add.w	r2, sp, #7
 800c45a:	4617      	mov	r7, r2
 800c45c:	260a      	movs	r6, #10
 800c45e:	4694      	mov	ip, r2
 800c460:	fb91 f5f6 	sdiv	r5, r1, r6
 800c464:	fb06 1415 	mls	r4, r6, r5, r1
 800c468:	3430      	adds	r4, #48	; 0x30
 800c46a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c46e:	460c      	mov	r4, r1
 800c470:	2c63      	cmp	r4, #99	; 0x63
 800c472:	f102 32ff 	add.w	r2, r2, #4294967295
 800c476:	4629      	mov	r1, r5
 800c478:	dcf1      	bgt.n	800c45e <__exponent+0x22>
 800c47a:	3130      	adds	r1, #48	; 0x30
 800c47c:	f1ac 0402 	sub.w	r4, ip, #2
 800c480:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c484:	1c41      	adds	r1, r0, #1
 800c486:	4622      	mov	r2, r4
 800c488:	42ba      	cmp	r2, r7
 800c48a:	d30a      	bcc.n	800c4a2 <__exponent+0x66>
 800c48c:	f10d 0209 	add.w	r2, sp, #9
 800c490:	eba2 020c 	sub.w	r2, r2, ip
 800c494:	42bc      	cmp	r4, r7
 800c496:	bf88      	it	hi
 800c498:	2200      	movhi	r2, #0
 800c49a:	4413      	add	r3, r2
 800c49c:	1a18      	subs	r0, r3, r0
 800c49e:	b003      	add	sp, #12
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c4a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c4aa:	e7ed      	b.n	800c488 <__exponent+0x4c>
 800c4ac:	2330      	movs	r3, #48	; 0x30
 800c4ae:	3130      	adds	r1, #48	; 0x30
 800c4b0:	7083      	strb	r3, [r0, #2]
 800c4b2:	70c1      	strb	r1, [r0, #3]
 800c4b4:	1d03      	adds	r3, r0, #4
 800c4b6:	e7f1      	b.n	800c49c <__exponent+0x60>

0800c4b8 <_printf_float>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	ed2d 8b02 	vpush	{d8}
 800c4c0:	b08d      	sub	sp, #52	; 0x34
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c4c8:	4616      	mov	r6, r2
 800c4ca:	461f      	mov	r7, r3
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	f000 ff17 	bl	800d300 <_localeconv_r>
 800c4d2:	f8d0 a000 	ldr.w	sl, [r0]
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	f7f3 feca 	bl	8000270 <strlen>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	9305      	str	r3, [sp, #20]
 800c4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c4ec:	3307      	adds	r3, #7
 800c4ee:	f023 0307 	bic.w	r3, r3, #7
 800c4f2:	f103 0208 	add.w	r2, r3, #8
 800c4f6:	f8c8 2000 	str.w	r2, [r8]
 800c4fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c502:	9307      	str	r3, [sp, #28]
 800c504:	f8cd 8018 	str.w	r8, [sp, #24]
 800c508:	ee08 0a10 	vmov	s16, r0
 800c50c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c514:	4b9e      	ldr	r3, [pc, #632]	; (800c790 <_printf_float+0x2d8>)
 800c516:	f04f 32ff 	mov.w	r2, #4294967295
 800c51a:	f7f4 fb07 	bl	8000b2c <__aeabi_dcmpun>
 800c51e:	bb88      	cbnz	r0, 800c584 <_printf_float+0xcc>
 800c520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c524:	4b9a      	ldr	r3, [pc, #616]	; (800c790 <_printf_float+0x2d8>)
 800c526:	f04f 32ff 	mov.w	r2, #4294967295
 800c52a:	f7f4 fae1 	bl	8000af0 <__aeabi_dcmple>
 800c52e:	bb48      	cbnz	r0, 800c584 <_printf_float+0xcc>
 800c530:	2200      	movs	r2, #0
 800c532:	2300      	movs	r3, #0
 800c534:	4640      	mov	r0, r8
 800c536:	4649      	mov	r1, r9
 800c538:	f7f4 fad0 	bl	8000adc <__aeabi_dcmplt>
 800c53c:	b110      	cbz	r0, 800c544 <_printf_float+0x8c>
 800c53e:	232d      	movs	r3, #45	; 0x2d
 800c540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c544:	4a93      	ldr	r2, [pc, #588]	; (800c794 <_printf_float+0x2dc>)
 800c546:	4b94      	ldr	r3, [pc, #592]	; (800c798 <_printf_float+0x2e0>)
 800c548:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c54c:	bf94      	ite	ls
 800c54e:	4690      	movls	r8, r2
 800c550:	4698      	movhi	r8, r3
 800c552:	2303      	movs	r3, #3
 800c554:	6123      	str	r3, [r4, #16]
 800c556:	9b05      	ldr	r3, [sp, #20]
 800c558:	f023 0304 	bic.w	r3, r3, #4
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	f04f 0900 	mov.w	r9, #0
 800c562:	9700      	str	r7, [sp, #0]
 800c564:	4633      	mov	r3, r6
 800c566:	aa0b      	add	r2, sp, #44	; 0x2c
 800c568:	4621      	mov	r1, r4
 800c56a:	4628      	mov	r0, r5
 800c56c:	f000 f9da 	bl	800c924 <_printf_common>
 800c570:	3001      	adds	r0, #1
 800c572:	f040 8090 	bne.w	800c696 <_printf_float+0x1de>
 800c576:	f04f 30ff 	mov.w	r0, #4294967295
 800c57a:	b00d      	add	sp, #52	; 0x34
 800c57c:	ecbd 8b02 	vpop	{d8}
 800c580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	4642      	mov	r2, r8
 800c586:	464b      	mov	r3, r9
 800c588:	4640      	mov	r0, r8
 800c58a:	4649      	mov	r1, r9
 800c58c:	f7f4 face 	bl	8000b2c <__aeabi_dcmpun>
 800c590:	b140      	cbz	r0, 800c5a4 <_printf_float+0xec>
 800c592:	464b      	mov	r3, r9
 800c594:	2b00      	cmp	r3, #0
 800c596:	bfbc      	itt	lt
 800c598:	232d      	movlt	r3, #45	; 0x2d
 800c59a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c59e:	4a7f      	ldr	r2, [pc, #508]	; (800c79c <_printf_float+0x2e4>)
 800c5a0:	4b7f      	ldr	r3, [pc, #508]	; (800c7a0 <_printf_float+0x2e8>)
 800c5a2:	e7d1      	b.n	800c548 <_printf_float+0x90>
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c5aa:	9206      	str	r2, [sp, #24]
 800c5ac:	1c5a      	adds	r2, r3, #1
 800c5ae:	d13f      	bne.n	800c630 <_printf_float+0x178>
 800c5b0:	2306      	movs	r3, #6
 800c5b2:	6063      	str	r3, [r4, #4]
 800c5b4:	9b05      	ldr	r3, [sp, #20]
 800c5b6:	6861      	ldr	r1, [r4, #4]
 800c5b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9303      	str	r3, [sp, #12]
 800c5c0:	ab0a      	add	r3, sp, #40	; 0x28
 800c5c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c5c6:	ab09      	add	r3, sp, #36	; 0x24
 800c5c8:	ec49 8b10 	vmov	d0, r8, r9
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	6022      	str	r2, [r4, #0]
 800c5d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f7ff fecf 	bl	800c378 <__cvt>
 800c5da:	9b06      	ldr	r3, [sp, #24]
 800c5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5de:	2b47      	cmp	r3, #71	; 0x47
 800c5e0:	4680      	mov	r8, r0
 800c5e2:	d108      	bne.n	800c5f6 <_printf_float+0x13e>
 800c5e4:	1cc8      	adds	r0, r1, #3
 800c5e6:	db02      	blt.n	800c5ee <_printf_float+0x136>
 800c5e8:	6863      	ldr	r3, [r4, #4]
 800c5ea:	4299      	cmp	r1, r3
 800c5ec:	dd41      	ble.n	800c672 <_printf_float+0x1ba>
 800c5ee:	f1ab 0302 	sub.w	r3, fp, #2
 800c5f2:	fa5f fb83 	uxtb.w	fp, r3
 800c5f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5fa:	d820      	bhi.n	800c63e <_printf_float+0x186>
 800c5fc:	3901      	subs	r1, #1
 800c5fe:	465a      	mov	r2, fp
 800c600:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c604:	9109      	str	r1, [sp, #36]	; 0x24
 800c606:	f7ff ff19 	bl	800c43c <__exponent>
 800c60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c60c:	1813      	adds	r3, r2, r0
 800c60e:	2a01      	cmp	r2, #1
 800c610:	4681      	mov	r9, r0
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	dc02      	bgt.n	800c61c <_printf_float+0x164>
 800c616:	6822      	ldr	r2, [r4, #0]
 800c618:	07d2      	lsls	r2, r2, #31
 800c61a:	d501      	bpl.n	800c620 <_printf_float+0x168>
 800c61c:	3301      	adds	r3, #1
 800c61e:	6123      	str	r3, [r4, #16]
 800c620:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c624:	2b00      	cmp	r3, #0
 800c626:	d09c      	beq.n	800c562 <_printf_float+0xaa>
 800c628:	232d      	movs	r3, #45	; 0x2d
 800c62a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c62e:	e798      	b.n	800c562 <_printf_float+0xaa>
 800c630:	9a06      	ldr	r2, [sp, #24]
 800c632:	2a47      	cmp	r2, #71	; 0x47
 800c634:	d1be      	bne.n	800c5b4 <_printf_float+0xfc>
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1bc      	bne.n	800c5b4 <_printf_float+0xfc>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e7b9      	b.n	800c5b2 <_printf_float+0xfa>
 800c63e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c642:	d118      	bne.n	800c676 <_printf_float+0x1be>
 800c644:	2900      	cmp	r1, #0
 800c646:	6863      	ldr	r3, [r4, #4]
 800c648:	dd0b      	ble.n	800c662 <_printf_float+0x1aa>
 800c64a:	6121      	str	r1, [r4, #16]
 800c64c:	b913      	cbnz	r3, 800c654 <_printf_float+0x19c>
 800c64e:	6822      	ldr	r2, [r4, #0]
 800c650:	07d0      	lsls	r0, r2, #31
 800c652:	d502      	bpl.n	800c65a <_printf_float+0x1a2>
 800c654:	3301      	adds	r3, #1
 800c656:	440b      	add	r3, r1
 800c658:	6123      	str	r3, [r4, #16]
 800c65a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c65c:	f04f 0900 	mov.w	r9, #0
 800c660:	e7de      	b.n	800c620 <_printf_float+0x168>
 800c662:	b913      	cbnz	r3, 800c66a <_printf_float+0x1b2>
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	07d2      	lsls	r2, r2, #31
 800c668:	d501      	bpl.n	800c66e <_printf_float+0x1b6>
 800c66a:	3302      	adds	r3, #2
 800c66c:	e7f4      	b.n	800c658 <_printf_float+0x1a0>
 800c66e:	2301      	movs	r3, #1
 800c670:	e7f2      	b.n	800c658 <_printf_float+0x1a0>
 800c672:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c678:	4299      	cmp	r1, r3
 800c67a:	db05      	blt.n	800c688 <_printf_float+0x1d0>
 800c67c:	6823      	ldr	r3, [r4, #0]
 800c67e:	6121      	str	r1, [r4, #16]
 800c680:	07d8      	lsls	r0, r3, #31
 800c682:	d5ea      	bpl.n	800c65a <_printf_float+0x1a2>
 800c684:	1c4b      	adds	r3, r1, #1
 800c686:	e7e7      	b.n	800c658 <_printf_float+0x1a0>
 800c688:	2900      	cmp	r1, #0
 800c68a:	bfd4      	ite	le
 800c68c:	f1c1 0202 	rsble	r2, r1, #2
 800c690:	2201      	movgt	r2, #1
 800c692:	4413      	add	r3, r2
 800c694:	e7e0      	b.n	800c658 <_printf_float+0x1a0>
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	055a      	lsls	r2, r3, #21
 800c69a:	d407      	bmi.n	800c6ac <_printf_float+0x1f4>
 800c69c:	6923      	ldr	r3, [r4, #16]
 800c69e:	4642      	mov	r2, r8
 800c6a0:	4631      	mov	r1, r6
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	47b8      	blx	r7
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	d12c      	bne.n	800c704 <_printf_float+0x24c>
 800c6aa:	e764      	b.n	800c576 <_printf_float+0xbe>
 800c6ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6b0:	f240 80e0 	bls.w	800c874 <_printf_float+0x3bc>
 800c6b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	f7f4 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d034      	beq.n	800c72e <_printf_float+0x276>
 800c6c4:	4a37      	ldr	r2, [pc, #220]	; (800c7a4 <_printf_float+0x2ec>)
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f43f af51 	beq.w	800c576 <_printf_float+0xbe>
 800c6d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	db02      	blt.n	800c6e2 <_printf_float+0x22a>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	07d8      	lsls	r0, r3, #31
 800c6e0:	d510      	bpl.n	800c704 <_printf_float+0x24c>
 800c6e2:	ee18 3a10 	vmov	r3, s16
 800c6e6:	4652      	mov	r2, sl
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	47b8      	blx	r7
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f43f af41 	beq.w	800c576 <_printf_float+0xbe>
 800c6f4:	f04f 0800 	mov.w	r8, #0
 800c6f8:	f104 091a 	add.w	r9, r4, #26
 800c6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fe:	3b01      	subs	r3, #1
 800c700:	4543      	cmp	r3, r8
 800c702:	dc09      	bgt.n	800c718 <_printf_float+0x260>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	079b      	lsls	r3, r3, #30
 800c708:	f100 8107 	bmi.w	800c91a <_printf_float+0x462>
 800c70c:	68e0      	ldr	r0, [r4, #12]
 800c70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c710:	4298      	cmp	r0, r3
 800c712:	bfb8      	it	lt
 800c714:	4618      	movlt	r0, r3
 800c716:	e730      	b.n	800c57a <_printf_float+0xc2>
 800c718:	2301      	movs	r3, #1
 800c71a:	464a      	mov	r2, r9
 800c71c:	4631      	mov	r1, r6
 800c71e:	4628      	mov	r0, r5
 800c720:	47b8      	blx	r7
 800c722:	3001      	adds	r0, #1
 800c724:	f43f af27 	beq.w	800c576 <_printf_float+0xbe>
 800c728:	f108 0801 	add.w	r8, r8, #1
 800c72c:	e7e6      	b.n	800c6fc <_printf_float+0x244>
 800c72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c730:	2b00      	cmp	r3, #0
 800c732:	dc39      	bgt.n	800c7a8 <_printf_float+0x2f0>
 800c734:	4a1b      	ldr	r2, [pc, #108]	; (800c7a4 <_printf_float+0x2ec>)
 800c736:	2301      	movs	r3, #1
 800c738:	4631      	mov	r1, r6
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b8      	blx	r7
 800c73e:	3001      	adds	r0, #1
 800c740:	f43f af19 	beq.w	800c576 <_printf_float+0xbe>
 800c744:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c748:	4313      	orrs	r3, r2
 800c74a:	d102      	bne.n	800c752 <_printf_float+0x29a>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	07d9      	lsls	r1, r3, #31
 800c750:	d5d8      	bpl.n	800c704 <_printf_float+0x24c>
 800c752:	ee18 3a10 	vmov	r3, s16
 800c756:	4652      	mov	r2, sl
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	f43f af09 	beq.w	800c576 <_printf_float+0xbe>
 800c764:	f04f 0900 	mov.w	r9, #0
 800c768:	f104 0a1a 	add.w	sl, r4, #26
 800c76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76e:	425b      	negs	r3, r3
 800c770:	454b      	cmp	r3, r9
 800c772:	dc01      	bgt.n	800c778 <_printf_float+0x2c0>
 800c774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c776:	e792      	b.n	800c69e <_printf_float+0x1e6>
 800c778:	2301      	movs	r3, #1
 800c77a:	4652      	mov	r2, sl
 800c77c:	4631      	mov	r1, r6
 800c77e:	4628      	mov	r0, r5
 800c780:	47b8      	blx	r7
 800c782:	3001      	adds	r0, #1
 800c784:	f43f aef7 	beq.w	800c576 <_printf_float+0xbe>
 800c788:	f109 0901 	add.w	r9, r9, #1
 800c78c:	e7ee      	b.n	800c76c <_printf_float+0x2b4>
 800c78e:	bf00      	nop
 800c790:	7fefffff 	.word	0x7fefffff
 800c794:	08010e81 	.word	0x08010e81
 800c798:	08010e85 	.word	0x08010e85
 800c79c:	08010e89 	.word	0x08010e89
 800c7a0:	08010e8d 	.word	0x08010e8d
 800c7a4:	08010e91 	.word	0x08010e91
 800c7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	bfa8      	it	ge
 800c7b0:	461a      	movge	r2, r3
 800c7b2:	2a00      	cmp	r2, #0
 800c7b4:	4691      	mov	r9, r2
 800c7b6:	dc37      	bgt.n	800c828 <_printf_float+0x370>
 800c7b8:	f04f 0b00 	mov.w	fp, #0
 800c7bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7c0:	f104 021a 	add.w	r2, r4, #26
 800c7c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	eba3 0309 	sub.w	r3, r3, r9
 800c7cc:	455b      	cmp	r3, fp
 800c7ce:	dc33      	bgt.n	800c838 <_printf_float+0x380>
 800c7d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	db3b      	blt.n	800c850 <_printf_float+0x398>
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	07da      	lsls	r2, r3, #31
 800c7dc:	d438      	bmi.n	800c850 <_printf_float+0x398>
 800c7de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c7e2:	eba2 0903 	sub.w	r9, r2, r3
 800c7e6:	9b05      	ldr	r3, [sp, #20]
 800c7e8:	1ad2      	subs	r2, r2, r3
 800c7ea:	4591      	cmp	r9, r2
 800c7ec:	bfa8      	it	ge
 800c7ee:	4691      	movge	r9, r2
 800c7f0:	f1b9 0f00 	cmp.w	r9, #0
 800c7f4:	dc35      	bgt.n	800c862 <_printf_float+0x3aa>
 800c7f6:	f04f 0800 	mov.w	r8, #0
 800c7fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7fe:	f104 0a1a 	add.w	sl, r4, #26
 800c802:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c806:	1a9b      	subs	r3, r3, r2
 800c808:	eba3 0309 	sub.w	r3, r3, r9
 800c80c:	4543      	cmp	r3, r8
 800c80e:	f77f af79 	ble.w	800c704 <_printf_float+0x24c>
 800c812:	2301      	movs	r3, #1
 800c814:	4652      	mov	r2, sl
 800c816:	4631      	mov	r1, r6
 800c818:	4628      	mov	r0, r5
 800c81a:	47b8      	blx	r7
 800c81c:	3001      	adds	r0, #1
 800c81e:	f43f aeaa 	beq.w	800c576 <_printf_float+0xbe>
 800c822:	f108 0801 	add.w	r8, r8, #1
 800c826:	e7ec      	b.n	800c802 <_printf_float+0x34a>
 800c828:	4613      	mov	r3, r2
 800c82a:	4631      	mov	r1, r6
 800c82c:	4642      	mov	r2, r8
 800c82e:	4628      	mov	r0, r5
 800c830:	47b8      	blx	r7
 800c832:	3001      	adds	r0, #1
 800c834:	d1c0      	bne.n	800c7b8 <_printf_float+0x300>
 800c836:	e69e      	b.n	800c576 <_printf_float+0xbe>
 800c838:	2301      	movs	r3, #1
 800c83a:	4631      	mov	r1, r6
 800c83c:	4628      	mov	r0, r5
 800c83e:	9205      	str	r2, [sp, #20]
 800c840:	47b8      	blx	r7
 800c842:	3001      	adds	r0, #1
 800c844:	f43f ae97 	beq.w	800c576 <_printf_float+0xbe>
 800c848:	9a05      	ldr	r2, [sp, #20]
 800c84a:	f10b 0b01 	add.w	fp, fp, #1
 800c84e:	e7b9      	b.n	800c7c4 <_printf_float+0x30c>
 800c850:	ee18 3a10 	vmov	r3, s16
 800c854:	4652      	mov	r2, sl
 800c856:	4631      	mov	r1, r6
 800c858:	4628      	mov	r0, r5
 800c85a:	47b8      	blx	r7
 800c85c:	3001      	adds	r0, #1
 800c85e:	d1be      	bne.n	800c7de <_printf_float+0x326>
 800c860:	e689      	b.n	800c576 <_printf_float+0xbe>
 800c862:	9a05      	ldr	r2, [sp, #20]
 800c864:	464b      	mov	r3, r9
 800c866:	4442      	add	r2, r8
 800c868:	4631      	mov	r1, r6
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b8      	blx	r7
 800c86e:	3001      	adds	r0, #1
 800c870:	d1c1      	bne.n	800c7f6 <_printf_float+0x33e>
 800c872:	e680      	b.n	800c576 <_printf_float+0xbe>
 800c874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c876:	2a01      	cmp	r2, #1
 800c878:	dc01      	bgt.n	800c87e <_printf_float+0x3c6>
 800c87a:	07db      	lsls	r3, r3, #31
 800c87c:	d53a      	bpl.n	800c8f4 <_printf_float+0x43c>
 800c87e:	2301      	movs	r3, #1
 800c880:	4642      	mov	r2, r8
 800c882:	4631      	mov	r1, r6
 800c884:	4628      	mov	r0, r5
 800c886:	47b8      	blx	r7
 800c888:	3001      	adds	r0, #1
 800c88a:	f43f ae74 	beq.w	800c576 <_printf_float+0xbe>
 800c88e:	ee18 3a10 	vmov	r3, s16
 800c892:	4652      	mov	r2, sl
 800c894:	4631      	mov	r1, r6
 800c896:	4628      	mov	r0, r5
 800c898:	47b8      	blx	r7
 800c89a:	3001      	adds	r0, #1
 800c89c:	f43f ae6b 	beq.w	800c576 <_printf_float+0xbe>
 800c8a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c8ac:	f7f4 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8b0:	b9d8      	cbnz	r0, 800c8ea <_printf_float+0x432>
 800c8b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c8b6:	f108 0201 	add.w	r2, r8, #1
 800c8ba:	4631      	mov	r1, r6
 800c8bc:	4628      	mov	r0, r5
 800c8be:	47b8      	blx	r7
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d10e      	bne.n	800c8e2 <_printf_float+0x42a>
 800c8c4:	e657      	b.n	800c576 <_printf_float+0xbe>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	4652      	mov	r2, sl
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	47b8      	blx	r7
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	f43f ae50 	beq.w	800c576 <_printf_float+0xbe>
 800c8d6:	f108 0801 	add.w	r8, r8, #1
 800c8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	4543      	cmp	r3, r8
 800c8e0:	dcf1      	bgt.n	800c8c6 <_printf_float+0x40e>
 800c8e2:	464b      	mov	r3, r9
 800c8e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8e8:	e6da      	b.n	800c6a0 <_printf_float+0x1e8>
 800c8ea:	f04f 0800 	mov.w	r8, #0
 800c8ee:	f104 0a1a 	add.w	sl, r4, #26
 800c8f2:	e7f2      	b.n	800c8da <_printf_float+0x422>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4642      	mov	r2, r8
 800c8f8:	e7df      	b.n	800c8ba <_printf_float+0x402>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	464a      	mov	r2, r9
 800c8fe:	4631      	mov	r1, r6
 800c900:	4628      	mov	r0, r5
 800c902:	47b8      	blx	r7
 800c904:	3001      	adds	r0, #1
 800c906:	f43f ae36 	beq.w	800c576 <_printf_float+0xbe>
 800c90a:	f108 0801 	add.w	r8, r8, #1
 800c90e:	68e3      	ldr	r3, [r4, #12]
 800c910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c912:	1a5b      	subs	r3, r3, r1
 800c914:	4543      	cmp	r3, r8
 800c916:	dcf0      	bgt.n	800c8fa <_printf_float+0x442>
 800c918:	e6f8      	b.n	800c70c <_printf_float+0x254>
 800c91a:	f04f 0800 	mov.w	r8, #0
 800c91e:	f104 0919 	add.w	r9, r4, #25
 800c922:	e7f4      	b.n	800c90e <_printf_float+0x456>

0800c924 <_printf_common>:
 800c924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c928:	4616      	mov	r6, r2
 800c92a:	4699      	mov	r9, r3
 800c92c:	688a      	ldr	r2, [r1, #8]
 800c92e:	690b      	ldr	r3, [r1, #16]
 800c930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c934:	4293      	cmp	r3, r2
 800c936:	bfb8      	it	lt
 800c938:	4613      	movlt	r3, r2
 800c93a:	6033      	str	r3, [r6, #0]
 800c93c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c940:	4607      	mov	r7, r0
 800c942:	460c      	mov	r4, r1
 800c944:	b10a      	cbz	r2, 800c94a <_printf_common+0x26>
 800c946:	3301      	adds	r3, #1
 800c948:	6033      	str	r3, [r6, #0]
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	0699      	lsls	r1, r3, #26
 800c94e:	bf42      	ittt	mi
 800c950:	6833      	ldrmi	r3, [r6, #0]
 800c952:	3302      	addmi	r3, #2
 800c954:	6033      	strmi	r3, [r6, #0]
 800c956:	6825      	ldr	r5, [r4, #0]
 800c958:	f015 0506 	ands.w	r5, r5, #6
 800c95c:	d106      	bne.n	800c96c <_printf_common+0x48>
 800c95e:	f104 0a19 	add.w	sl, r4, #25
 800c962:	68e3      	ldr	r3, [r4, #12]
 800c964:	6832      	ldr	r2, [r6, #0]
 800c966:	1a9b      	subs	r3, r3, r2
 800c968:	42ab      	cmp	r3, r5
 800c96a:	dc26      	bgt.n	800c9ba <_printf_common+0x96>
 800c96c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c970:	1e13      	subs	r3, r2, #0
 800c972:	6822      	ldr	r2, [r4, #0]
 800c974:	bf18      	it	ne
 800c976:	2301      	movne	r3, #1
 800c978:	0692      	lsls	r2, r2, #26
 800c97a:	d42b      	bmi.n	800c9d4 <_printf_common+0xb0>
 800c97c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c980:	4649      	mov	r1, r9
 800c982:	4638      	mov	r0, r7
 800c984:	47c0      	blx	r8
 800c986:	3001      	adds	r0, #1
 800c988:	d01e      	beq.n	800c9c8 <_printf_common+0xa4>
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	6922      	ldr	r2, [r4, #16]
 800c98e:	f003 0306 	and.w	r3, r3, #6
 800c992:	2b04      	cmp	r3, #4
 800c994:	bf02      	ittt	eq
 800c996:	68e5      	ldreq	r5, [r4, #12]
 800c998:	6833      	ldreq	r3, [r6, #0]
 800c99a:	1aed      	subeq	r5, r5, r3
 800c99c:	68a3      	ldr	r3, [r4, #8]
 800c99e:	bf0c      	ite	eq
 800c9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9a4:	2500      	movne	r5, #0
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	bfc4      	itt	gt
 800c9aa:	1a9b      	subgt	r3, r3, r2
 800c9ac:	18ed      	addgt	r5, r5, r3
 800c9ae:	2600      	movs	r6, #0
 800c9b0:	341a      	adds	r4, #26
 800c9b2:	42b5      	cmp	r5, r6
 800c9b4:	d11a      	bne.n	800c9ec <_printf_common+0xc8>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	e008      	b.n	800c9cc <_printf_common+0xa8>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	4652      	mov	r2, sl
 800c9be:	4649      	mov	r1, r9
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	47c0      	blx	r8
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d103      	bne.n	800c9d0 <_printf_common+0xac>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d0:	3501      	adds	r5, #1
 800c9d2:	e7c6      	b.n	800c962 <_printf_common+0x3e>
 800c9d4:	18e1      	adds	r1, r4, r3
 800c9d6:	1c5a      	adds	r2, r3, #1
 800c9d8:	2030      	movs	r0, #48	; 0x30
 800c9da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9de:	4422      	add	r2, r4
 800c9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9e8:	3302      	adds	r3, #2
 800c9ea:	e7c7      	b.n	800c97c <_printf_common+0x58>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	47c0      	blx	r8
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	d0e6      	beq.n	800c9c8 <_printf_common+0xa4>
 800c9fa:	3601      	adds	r6, #1
 800c9fc:	e7d9      	b.n	800c9b2 <_printf_common+0x8e>
	...

0800ca00 <_printf_i>:
 800ca00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	7e0f      	ldrb	r7, [r1, #24]
 800ca06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca08:	2f78      	cmp	r7, #120	; 0x78
 800ca0a:	4691      	mov	r9, r2
 800ca0c:	4680      	mov	r8, r0
 800ca0e:	460c      	mov	r4, r1
 800ca10:	469a      	mov	sl, r3
 800ca12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca16:	d807      	bhi.n	800ca28 <_printf_i+0x28>
 800ca18:	2f62      	cmp	r7, #98	; 0x62
 800ca1a:	d80a      	bhi.n	800ca32 <_printf_i+0x32>
 800ca1c:	2f00      	cmp	r7, #0
 800ca1e:	f000 80d4 	beq.w	800cbca <_printf_i+0x1ca>
 800ca22:	2f58      	cmp	r7, #88	; 0x58
 800ca24:	f000 80c0 	beq.w	800cba8 <_printf_i+0x1a8>
 800ca28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca30:	e03a      	b.n	800caa8 <_printf_i+0xa8>
 800ca32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca36:	2b15      	cmp	r3, #21
 800ca38:	d8f6      	bhi.n	800ca28 <_printf_i+0x28>
 800ca3a:	a101      	add	r1, pc, #4	; (adr r1, 800ca40 <_printf_i+0x40>)
 800ca3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca40:	0800ca99 	.word	0x0800ca99
 800ca44:	0800caad 	.word	0x0800caad
 800ca48:	0800ca29 	.word	0x0800ca29
 800ca4c:	0800ca29 	.word	0x0800ca29
 800ca50:	0800ca29 	.word	0x0800ca29
 800ca54:	0800ca29 	.word	0x0800ca29
 800ca58:	0800caad 	.word	0x0800caad
 800ca5c:	0800ca29 	.word	0x0800ca29
 800ca60:	0800ca29 	.word	0x0800ca29
 800ca64:	0800ca29 	.word	0x0800ca29
 800ca68:	0800ca29 	.word	0x0800ca29
 800ca6c:	0800cbb1 	.word	0x0800cbb1
 800ca70:	0800cad9 	.word	0x0800cad9
 800ca74:	0800cb6b 	.word	0x0800cb6b
 800ca78:	0800ca29 	.word	0x0800ca29
 800ca7c:	0800ca29 	.word	0x0800ca29
 800ca80:	0800cbd3 	.word	0x0800cbd3
 800ca84:	0800ca29 	.word	0x0800ca29
 800ca88:	0800cad9 	.word	0x0800cad9
 800ca8c:	0800ca29 	.word	0x0800ca29
 800ca90:	0800ca29 	.word	0x0800ca29
 800ca94:	0800cb73 	.word	0x0800cb73
 800ca98:	682b      	ldr	r3, [r5, #0]
 800ca9a:	1d1a      	adds	r2, r3, #4
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	602a      	str	r2, [r5, #0]
 800caa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800caa8:	2301      	movs	r3, #1
 800caaa:	e09f      	b.n	800cbec <_printf_i+0x1ec>
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	682b      	ldr	r3, [r5, #0]
 800cab0:	0607      	lsls	r7, r0, #24
 800cab2:	f103 0104 	add.w	r1, r3, #4
 800cab6:	6029      	str	r1, [r5, #0]
 800cab8:	d501      	bpl.n	800cabe <_printf_i+0xbe>
 800caba:	681e      	ldr	r6, [r3, #0]
 800cabc:	e003      	b.n	800cac6 <_printf_i+0xc6>
 800cabe:	0646      	lsls	r6, r0, #25
 800cac0:	d5fb      	bpl.n	800caba <_printf_i+0xba>
 800cac2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cac6:	2e00      	cmp	r6, #0
 800cac8:	da03      	bge.n	800cad2 <_printf_i+0xd2>
 800caca:	232d      	movs	r3, #45	; 0x2d
 800cacc:	4276      	negs	r6, r6
 800cace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad2:	485a      	ldr	r0, [pc, #360]	; (800cc3c <_printf_i+0x23c>)
 800cad4:	230a      	movs	r3, #10
 800cad6:	e012      	b.n	800cafe <_printf_i+0xfe>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	6820      	ldr	r0, [r4, #0]
 800cadc:	1d19      	adds	r1, r3, #4
 800cade:	6029      	str	r1, [r5, #0]
 800cae0:	0605      	lsls	r5, r0, #24
 800cae2:	d501      	bpl.n	800cae8 <_printf_i+0xe8>
 800cae4:	681e      	ldr	r6, [r3, #0]
 800cae6:	e002      	b.n	800caee <_printf_i+0xee>
 800cae8:	0641      	lsls	r1, r0, #25
 800caea:	d5fb      	bpl.n	800cae4 <_printf_i+0xe4>
 800caec:	881e      	ldrh	r6, [r3, #0]
 800caee:	4853      	ldr	r0, [pc, #332]	; (800cc3c <_printf_i+0x23c>)
 800caf0:	2f6f      	cmp	r7, #111	; 0x6f
 800caf2:	bf0c      	ite	eq
 800caf4:	2308      	moveq	r3, #8
 800caf6:	230a      	movne	r3, #10
 800caf8:	2100      	movs	r1, #0
 800cafa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cafe:	6865      	ldr	r5, [r4, #4]
 800cb00:	60a5      	str	r5, [r4, #8]
 800cb02:	2d00      	cmp	r5, #0
 800cb04:	bfa2      	ittt	ge
 800cb06:	6821      	ldrge	r1, [r4, #0]
 800cb08:	f021 0104 	bicge.w	r1, r1, #4
 800cb0c:	6021      	strge	r1, [r4, #0]
 800cb0e:	b90e      	cbnz	r6, 800cb14 <_printf_i+0x114>
 800cb10:	2d00      	cmp	r5, #0
 800cb12:	d04b      	beq.n	800cbac <_printf_i+0x1ac>
 800cb14:	4615      	mov	r5, r2
 800cb16:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb1a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb1e:	5dc7      	ldrb	r7, [r0, r7]
 800cb20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb24:	4637      	mov	r7, r6
 800cb26:	42bb      	cmp	r3, r7
 800cb28:	460e      	mov	r6, r1
 800cb2a:	d9f4      	bls.n	800cb16 <_printf_i+0x116>
 800cb2c:	2b08      	cmp	r3, #8
 800cb2e:	d10b      	bne.n	800cb48 <_printf_i+0x148>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	07de      	lsls	r6, r3, #31
 800cb34:	d508      	bpl.n	800cb48 <_printf_i+0x148>
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	6861      	ldr	r1, [r4, #4]
 800cb3a:	4299      	cmp	r1, r3
 800cb3c:	bfde      	ittt	le
 800cb3e:	2330      	movle	r3, #48	; 0x30
 800cb40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb48:	1b52      	subs	r2, r2, r5
 800cb4a:	6122      	str	r2, [r4, #16]
 800cb4c:	f8cd a000 	str.w	sl, [sp]
 800cb50:	464b      	mov	r3, r9
 800cb52:	aa03      	add	r2, sp, #12
 800cb54:	4621      	mov	r1, r4
 800cb56:	4640      	mov	r0, r8
 800cb58:	f7ff fee4 	bl	800c924 <_printf_common>
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d14a      	bne.n	800cbf6 <_printf_i+0x1f6>
 800cb60:	f04f 30ff 	mov.w	r0, #4294967295
 800cb64:	b004      	add	sp, #16
 800cb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	f043 0320 	orr.w	r3, r3, #32
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	4833      	ldr	r0, [pc, #204]	; (800cc40 <_printf_i+0x240>)
 800cb74:	2778      	movs	r7, #120	; 0x78
 800cb76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	6829      	ldr	r1, [r5, #0]
 800cb7e:	061f      	lsls	r7, r3, #24
 800cb80:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb84:	d402      	bmi.n	800cb8c <_printf_i+0x18c>
 800cb86:	065f      	lsls	r7, r3, #25
 800cb88:	bf48      	it	mi
 800cb8a:	b2b6      	uxthmi	r6, r6
 800cb8c:	07df      	lsls	r7, r3, #31
 800cb8e:	bf48      	it	mi
 800cb90:	f043 0320 	orrmi.w	r3, r3, #32
 800cb94:	6029      	str	r1, [r5, #0]
 800cb96:	bf48      	it	mi
 800cb98:	6023      	strmi	r3, [r4, #0]
 800cb9a:	b91e      	cbnz	r6, 800cba4 <_printf_i+0x1a4>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	f023 0320 	bic.w	r3, r3, #32
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	2310      	movs	r3, #16
 800cba6:	e7a7      	b.n	800caf8 <_printf_i+0xf8>
 800cba8:	4824      	ldr	r0, [pc, #144]	; (800cc3c <_printf_i+0x23c>)
 800cbaa:	e7e4      	b.n	800cb76 <_printf_i+0x176>
 800cbac:	4615      	mov	r5, r2
 800cbae:	e7bd      	b.n	800cb2c <_printf_i+0x12c>
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	6826      	ldr	r6, [r4, #0]
 800cbb4:	6961      	ldr	r1, [r4, #20]
 800cbb6:	1d18      	adds	r0, r3, #4
 800cbb8:	6028      	str	r0, [r5, #0]
 800cbba:	0635      	lsls	r5, r6, #24
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	d501      	bpl.n	800cbc4 <_printf_i+0x1c4>
 800cbc0:	6019      	str	r1, [r3, #0]
 800cbc2:	e002      	b.n	800cbca <_printf_i+0x1ca>
 800cbc4:	0670      	lsls	r0, r6, #25
 800cbc6:	d5fb      	bpl.n	800cbc0 <_printf_i+0x1c0>
 800cbc8:	8019      	strh	r1, [r3, #0]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	4615      	mov	r5, r2
 800cbd0:	e7bc      	b.n	800cb4c <_printf_i+0x14c>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	1d1a      	adds	r2, r3, #4
 800cbd6:	602a      	str	r2, [r5, #0]
 800cbd8:	681d      	ldr	r5, [r3, #0]
 800cbda:	6862      	ldr	r2, [r4, #4]
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f7f3 faf6 	bl	80001d0 <memchr>
 800cbe4:	b108      	cbz	r0, 800cbea <_printf_i+0x1ea>
 800cbe6:	1b40      	subs	r0, r0, r5
 800cbe8:	6060      	str	r0, [r4, #4]
 800cbea:	6863      	ldr	r3, [r4, #4]
 800cbec:	6123      	str	r3, [r4, #16]
 800cbee:	2300      	movs	r3, #0
 800cbf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbf4:	e7aa      	b.n	800cb4c <_printf_i+0x14c>
 800cbf6:	6923      	ldr	r3, [r4, #16]
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	47d0      	blx	sl
 800cc00:	3001      	adds	r0, #1
 800cc02:	d0ad      	beq.n	800cb60 <_printf_i+0x160>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	079b      	lsls	r3, r3, #30
 800cc08:	d413      	bmi.n	800cc32 <_printf_i+0x232>
 800cc0a:	68e0      	ldr	r0, [r4, #12]
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	4298      	cmp	r0, r3
 800cc10:	bfb8      	it	lt
 800cc12:	4618      	movlt	r0, r3
 800cc14:	e7a6      	b.n	800cb64 <_printf_i+0x164>
 800cc16:	2301      	movs	r3, #1
 800cc18:	4632      	mov	r2, r6
 800cc1a:	4649      	mov	r1, r9
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	47d0      	blx	sl
 800cc20:	3001      	adds	r0, #1
 800cc22:	d09d      	beq.n	800cb60 <_printf_i+0x160>
 800cc24:	3501      	adds	r5, #1
 800cc26:	68e3      	ldr	r3, [r4, #12]
 800cc28:	9903      	ldr	r1, [sp, #12]
 800cc2a:	1a5b      	subs	r3, r3, r1
 800cc2c:	42ab      	cmp	r3, r5
 800cc2e:	dcf2      	bgt.n	800cc16 <_printf_i+0x216>
 800cc30:	e7eb      	b.n	800cc0a <_printf_i+0x20a>
 800cc32:	2500      	movs	r5, #0
 800cc34:	f104 0619 	add.w	r6, r4, #25
 800cc38:	e7f5      	b.n	800cc26 <_printf_i+0x226>
 800cc3a:	bf00      	nop
 800cc3c:	08010e93 	.word	0x08010e93
 800cc40:	08010ea4 	.word	0x08010ea4

0800cc44 <_scanf_float>:
 800cc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	b087      	sub	sp, #28
 800cc4a:	4617      	mov	r7, r2
 800cc4c:	9303      	str	r3, [sp, #12]
 800cc4e:	688b      	ldr	r3, [r1, #8]
 800cc50:	1e5a      	subs	r2, r3, #1
 800cc52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc56:	bf83      	ittte	hi
 800cc58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc5c:	195b      	addhi	r3, r3, r5
 800cc5e:	9302      	strhi	r3, [sp, #8]
 800cc60:	2300      	movls	r3, #0
 800cc62:	bf86      	itte	hi
 800cc64:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc68:	608b      	strhi	r3, [r1, #8]
 800cc6a:	9302      	strls	r3, [sp, #8]
 800cc6c:	680b      	ldr	r3, [r1, #0]
 800cc6e:	468b      	mov	fp, r1
 800cc70:	2500      	movs	r5, #0
 800cc72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cc76:	f84b 3b1c 	str.w	r3, [fp], #28
 800cc7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cc7e:	4680      	mov	r8, r0
 800cc80:	460c      	mov	r4, r1
 800cc82:	465e      	mov	r6, fp
 800cc84:	46aa      	mov	sl, r5
 800cc86:	46a9      	mov	r9, r5
 800cc88:	9501      	str	r5, [sp, #4]
 800cc8a:	68a2      	ldr	r2, [r4, #8]
 800cc8c:	b152      	cbz	r2, 800cca4 <_scanf_float+0x60>
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	2b4e      	cmp	r3, #78	; 0x4e
 800cc94:	d864      	bhi.n	800cd60 <_scanf_float+0x11c>
 800cc96:	2b40      	cmp	r3, #64	; 0x40
 800cc98:	d83c      	bhi.n	800cd14 <_scanf_float+0xd0>
 800cc9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cc9e:	b2c8      	uxtb	r0, r1
 800cca0:	280e      	cmp	r0, #14
 800cca2:	d93a      	bls.n	800cd1a <_scanf_float+0xd6>
 800cca4:	f1b9 0f00 	cmp.w	r9, #0
 800cca8:	d003      	beq.n	800ccb2 <_scanf_float+0x6e>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ccb6:	f1ba 0f01 	cmp.w	sl, #1
 800ccba:	f200 8113 	bhi.w	800cee4 <_scanf_float+0x2a0>
 800ccbe:	455e      	cmp	r6, fp
 800ccc0:	f200 8105 	bhi.w	800cece <_scanf_float+0x28a>
 800ccc4:	2501      	movs	r5, #1
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	b007      	add	sp, #28
 800ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ccd2:	2a0d      	cmp	r2, #13
 800ccd4:	d8e6      	bhi.n	800cca4 <_scanf_float+0x60>
 800ccd6:	a101      	add	r1, pc, #4	; (adr r1, 800ccdc <_scanf_float+0x98>)
 800ccd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ccdc:	0800ce1b 	.word	0x0800ce1b
 800cce0:	0800cca5 	.word	0x0800cca5
 800cce4:	0800cca5 	.word	0x0800cca5
 800cce8:	0800cca5 	.word	0x0800cca5
 800ccec:	0800ce7b 	.word	0x0800ce7b
 800ccf0:	0800ce53 	.word	0x0800ce53
 800ccf4:	0800cca5 	.word	0x0800cca5
 800ccf8:	0800cca5 	.word	0x0800cca5
 800ccfc:	0800ce29 	.word	0x0800ce29
 800cd00:	0800cca5 	.word	0x0800cca5
 800cd04:	0800cca5 	.word	0x0800cca5
 800cd08:	0800cca5 	.word	0x0800cca5
 800cd0c:	0800cca5 	.word	0x0800cca5
 800cd10:	0800cde1 	.word	0x0800cde1
 800cd14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cd18:	e7db      	b.n	800ccd2 <_scanf_float+0x8e>
 800cd1a:	290e      	cmp	r1, #14
 800cd1c:	d8c2      	bhi.n	800cca4 <_scanf_float+0x60>
 800cd1e:	a001      	add	r0, pc, #4	; (adr r0, 800cd24 <_scanf_float+0xe0>)
 800cd20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cd24:	0800cdd3 	.word	0x0800cdd3
 800cd28:	0800cca5 	.word	0x0800cca5
 800cd2c:	0800cdd3 	.word	0x0800cdd3
 800cd30:	0800ce67 	.word	0x0800ce67
 800cd34:	0800cca5 	.word	0x0800cca5
 800cd38:	0800cd81 	.word	0x0800cd81
 800cd3c:	0800cdbd 	.word	0x0800cdbd
 800cd40:	0800cdbd 	.word	0x0800cdbd
 800cd44:	0800cdbd 	.word	0x0800cdbd
 800cd48:	0800cdbd 	.word	0x0800cdbd
 800cd4c:	0800cdbd 	.word	0x0800cdbd
 800cd50:	0800cdbd 	.word	0x0800cdbd
 800cd54:	0800cdbd 	.word	0x0800cdbd
 800cd58:	0800cdbd 	.word	0x0800cdbd
 800cd5c:	0800cdbd 	.word	0x0800cdbd
 800cd60:	2b6e      	cmp	r3, #110	; 0x6e
 800cd62:	d809      	bhi.n	800cd78 <_scanf_float+0x134>
 800cd64:	2b60      	cmp	r3, #96	; 0x60
 800cd66:	d8b2      	bhi.n	800ccce <_scanf_float+0x8a>
 800cd68:	2b54      	cmp	r3, #84	; 0x54
 800cd6a:	d077      	beq.n	800ce5c <_scanf_float+0x218>
 800cd6c:	2b59      	cmp	r3, #89	; 0x59
 800cd6e:	d199      	bne.n	800cca4 <_scanf_float+0x60>
 800cd70:	2d07      	cmp	r5, #7
 800cd72:	d197      	bne.n	800cca4 <_scanf_float+0x60>
 800cd74:	2508      	movs	r5, #8
 800cd76:	e029      	b.n	800cdcc <_scanf_float+0x188>
 800cd78:	2b74      	cmp	r3, #116	; 0x74
 800cd7a:	d06f      	beq.n	800ce5c <_scanf_float+0x218>
 800cd7c:	2b79      	cmp	r3, #121	; 0x79
 800cd7e:	e7f6      	b.n	800cd6e <_scanf_float+0x12a>
 800cd80:	6821      	ldr	r1, [r4, #0]
 800cd82:	05c8      	lsls	r0, r1, #23
 800cd84:	d51a      	bpl.n	800cdbc <_scanf_float+0x178>
 800cd86:	9b02      	ldr	r3, [sp, #8]
 800cd88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cd8c:	6021      	str	r1, [r4, #0]
 800cd8e:	f109 0901 	add.w	r9, r9, #1
 800cd92:	b11b      	cbz	r3, 800cd9c <_scanf_float+0x158>
 800cd94:	3b01      	subs	r3, #1
 800cd96:	3201      	adds	r2, #1
 800cd98:	9302      	str	r3, [sp, #8]
 800cd9a:	60a2      	str	r2, [r4, #8]
 800cd9c:	68a3      	ldr	r3, [r4, #8]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	60a3      	str	r3, [r4, #8]
 800cda2:	6923      	ldr	r3, [r4, #16]
 800cda4:	3301      	adds	r3, #1
 800cda6:	6123      	str	r3, [r4, #16]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	607b      	str	r3, [r7, #4]
 800cdb0:	f340 8084 	ble.w	800cebc <_scanf_float+0x278>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	603b      	str	r3, [r7, #0]
 800cdba:	e766      	b.n	800cc8a <_scanf_float+0x46>
 800cdbc:	eb1a 0f05 	cmn.w	sl, r5
 800cdc0:	f47f af70 	bne.w	800cca4 <_scanf_float+0x60>
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cdca:	6022      	str	r2, [r4, #0]
 800cdcc:	f806 3b01 	strb.w	r3, [r6], #1
 800cdd0:	e7e4      	b.n	800cd9c <_scanf_float+0x158>
 800cdd2:	6822      	ldr	r2, [r4, #0]
 800cdd4:	0610      	lsls	r0, r2, #24
 800cdd6:	f57f af65 	bpl.w	800cca4 <_scanf_float+0x60>
 800cdda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdde:	e7f4      	b.n	800cdca <_scanf_float+0x186>
 800cde0:	f1ba 0f00 	cmp.w	sl, #0
 800cde4:	d10e      	bne.n	800ce04 <_scanf_float+0x1c0>
 800cde6:	f1b9 0f00 	cmp.w	r9, #0
 800cdea:	d10e      	bne.n	800ce0a <_scanf_float+0x1c6>
 800cdec:	6822      	ldr	r2, [r4, #0]
 800cdee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cdf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cdf6:	d108      	bne.n	800ce0a <_scanf_float+0x1c6>
 800cdf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cdfc:	6022      	str	r2, [r4, #0]
 800cdfe:	f04f 0a01 	mov.w	sl, #1
 800ce02:	e7e3      	b.n	800cdcc <_scanf_float+0x188>
 800ce04:	f1ba 0f02 	cmp.w	sl, #2
 800ce08:	d055      	beq.n	800ceb6 <_scanf_float+0x272>
 800ce0a:	2d01      	cmp	r5, #1
 800ce0c:	d002      	beq.n	800ce14 <_scanf_float+0x1d0>
 800ce0e:	2d04      	cmp	r5, #4
 800ce10:	f47f af48 	bne.w	800cca4 <_scanf_float+0x60>
 800ce14:	3501      	adds	r5, #1
 800ce16:	b2ed      	uxtb	r5, r5
 800ce18:	e7d8      	b.n	800cdcc <_scanf_float+0x188>
 800ce1a:	f1ba 0f01 	cmp.w	sl, #1
 800ce1e:	f47f af41 	bne.w	800cca4 <_scanf_float+0x60>
 800ce22:	f04f 0a02 	mov.w	sl, #2
 800ce26:	e7d1      	b.n	800cdcc <_scanf_float+0x188>
 800ce28:	b97d      	cbnz	r5, 800ce4a <_scanf_float+0x206>
 800ce2a:	f1b9 0f00 	cmp.w	r9, #0
 800ce2e:	f47f af3c 	bne.w	800ccaa <_scanf_float+0x66>
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ce38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ce3c:	f47f af39 	bne.w	800ccb2 <_scanf_float+0x6e>
 800ce40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce44:	6022      	str	r2, [r4, #0]
 800ce46:	2501      	movs	r5, #1
 800ce48:	e7c0      	b.n	800cdcc <_scanf_float+0x188>
 800ce4a:	2d03      	cmp	r5, #3
 800ce4c:	d0e2      	beq.n	800ce14 <_scanf_float+0x1d0>
 800ce4e:	2d05      	cmp	r5, #5
 800ce50:	e7de      	b.n	800ce10 <_scanf_float+0x1cc>
 800ce52:	2d02      	cmp	r5, #2
 800ce54:	f47f af26 	bne.w	800cca4 <_scanf_float+0x60>
 800ce58:	2503      	movs	r5, #3
 800ce5a:	e7b7      	b.n	800cdcc <_scanf_float+0x188>
 800ce5c:	2d06      	cmp	r5, #6
 800ce5e:	f47f af21 	bne.w	800cca4 <_scanf_float+0x60>
 800ce62:	2507      	movs	r5, #7
 800ce64:	e7b2      	b.n	800cdcc <_scanf_float+0x188>
 800ce66:	6822      	ldr	r2, [r4, #0]
 800ce68:	0591      	lsls	r1, r2, #22
 800ce6a:	f57f af1b 	bpl.w	800cca4 <_scanf_float+0x60>
 800ce6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ce72:	6022      	str	r2, [r4, #0]
 800ce74:	f8cd 9004 	str.w	r9, [sp, #4]
 800ce78:	e7a8      	b.n	800cdcc <_scanf_float+0x188>
 800ce7a:	6822      	ldr	r2, [r4, #0]
 800ce7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ce80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ce84:	d006      	beq.n	800ce94 <_scanf_float+0x250>
 800ce86:	0550      	lsls	r0, r2, #21
 800ce88:	f57f af0c 	bpl.w	800cca4 <_scanf_float+0x60>
 800ce8c:	f1b9 0f00 	cmp.w	r9, #0
 800ce90:	f43f af0f 	beq.w	800ccb2 <_scanf_float+0x6e>
 800ce94:	0591      	lsls	r1, r2, #22
 800ce96:	bf58      	it	pl
 800ce98:	9901      	ldrpl	r1, [sp, #4]
 800ce9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ce9e:	bf58      	it	pl
 800cea0:	eba9 0101 	subpl.w	r1, r9, r1
 800cea4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cea8:	bf58      	it	pl
 800ceaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ceae:	6022      	str	r2, [r4, #0]
 800ceb0:	f04f 0900 	mov.w	r9, #0
 800ceb4:	e78a      	b.n	800cdcc <_scanf_float+0x188>
 800ceb6:	f04f 0a03 	mov.w	sl, #3
 800ceba:	e787      	b.n	800cdcc <_scanf_float+0x188>
 800cebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cec0:	4639      	mov	r1, r7
 800cec2:	4640      	mov	r0, r8
 800cec4:	4798      	blx	r3
 800cec6:	2800      	cmp	r0, #0
 800cec8:	f43f aedf 	beq.w	800cc8a <_scanf_float+0x46>
 800cecc:	e6ea      	b.n	800cca4 <_scanf_float+0x60>
 800cece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ced2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ced6:	463a      	mov	r2, r7
 800ced8:	4640      	mov	r0, r8
 800ceda:	4798      	blx	r3
 800cedc:	6923      	ldr	r3, [r4, #16]
 800cede:	3b01      	subs	r3, #1
 800cee0:	6123      	str	r3, [r4, #16]
 800cee2:	e6ec      	b.n	800ccbe <_scanf_float+0x7a>
 800cee4:	1e6b      	subs	r3, r5, #1
 800cee6:	2b06      	cmp	r3, #6
 800cee8:	d825      	bhi.n	800cf36 <_scanf_float+0x2f2>
 800ceea:	2d02      	cmp	r5, #2
 800ceec:	d836      	bhi.n	800cf5c <_scanf_float+0x318>
 800ceee:	455e      	cmp	r6, fp
 800cef0:	f67f aee8 	bls.w	800ccc4 <_scanf_float+0x80>
 800cef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cef8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cefc:	463a      	mov	r2, r7
 800cefe:	4640      	mov	r0, r8
 800cf00:	4798      	blx	r3
 800cf02:	6923      	ldr	r3, [r4, #16]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	6123      	str	r3, [r4, #16]
 800cf08:	e7f1      	b.n	800ceee <_scanf_float+0x2aa>
 800cf0a:	9802      	ldr	r0, [sp, #8]
 800cf0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cf14:	9002      	str	r0, [sp, #8]
 800cf16:	463a      	mov	r2, r7
 800cf18:	4640      	mov	r0, r8
 800cf1a:	4798      	blx	r3
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	6123      	str	r3, [r4, #16]
 800cf22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf26:	fa5f fa8a 	uxtb.w	sl, sl
 800cf2a:	f1ba 0f02 	cmp.w	sl, #2
 800cf2e:	d1ec      	bne.n	800cf0a <_scanf_float+0x2c6>
 800cf30:	3d03      	subs	r5, #3
 800cf32:	b2ed      	uxtb	r5, r5
 800cf34:	1b76      	subs	r6, r6, r5
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	05da      	lsls	r2, r3, #23
 800cf3a:	d52f      	bpl.n	800cf9c <_scanf_float+0x358>
 800cf3c:	055b      	lsls	r3, r3, #21
 800cf3e:	d510      	bpl.n	800cf62 <_scanf_float+0x31e>
 800cf40:	455e      	cmp	r6, fp
 800cf42:	f67f aebf 	bls.w	800ccc4 <_scanf_float+0x80>
 800cf46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf4e:	463a      	mov	r2, r7
 800cf50:	4640      	mov	r0, r8
 800cf52:	4798      	blx	r3
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	6123      	str	r3, [r4, #16]
 800cf5a:	e7f1      	b.n	800cf40 <_scanf_float+0x2fc>
 800cf5c:	46aa      	mov	sl, r5
 800cf5e:	9602      	str	r6, [sp, #8]
 800cf60:	e7df      	b.n	800cf22 <_scanf_float+0x2de>
 800cf62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cf66:	6923      	ldr	r3, [r4, #16]
 800cf68:	2965      	cmp	r1, #101	; 0x65
 800cf6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cf72:	6123      	str	r3, [r4, #16]
 800cf74:	d00c      	beq.n	800cf90 <_scanf_float+0x34c>
 800cf76:	2945      	cmp	r1, #69	; 0x45
 800cf78:	d00a      	beq.n	800cf90 <_scanf_float+0x34c>
 800cf7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf7e:	463a      	mov	r2, r7
 800cf80:	4640      	mov	r0, r8
 800cf82:	4798      	blx	r3
 800cf84:	6923      	ldr	r3, [r4, #16]
 800cf86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	1eb5      	subs	r5, r6, #2
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf94:	463a      	mov	r2, r7
 800cf96:	4640      	mov	r0, r8
 800cf98:	4798      	blx	r3
 800cf9a:	462e      	mov	r6, r5
 800cf9c:	6825      	ldr	r5, [r4, #0]
 800cf9e:	f015 0510 	ands.w	r5, r5, #16
 800cfa2:	d158      	bne.n	800d056 <_scanf_float+0x412>
 800cfa4:	7035      	strb	r5, [r6, #0]
 800cfa6:	6823      	ldr	r3, [r4, #0]
 800cfa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cfac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfb0:	d11c      	bne.n	800cfec <_scanf_float+0x3a8>
 800cfb2:	9b01      	ldr	r3, [sp, #4]
 800cfb4:	454b      	cmp	r3, r9
 800cfb6:	eba3 0209 	sub.w	r2, r3, r9
 800cfba:	d124      	bne.n	800d006 <_scanf_float+0x3c2>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4659      	mov	r1, fp
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	f002 fc11 	bl	800f7e8 <_strtod_r>
 800cfc6:	9b03      	ldr	r3, [sp, #12]
 800cfc8:	6821      	ldr	r1, [r4, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f011 0f02 	tst.w	r1, #2
 800cfd0:	ec57 6b10 	vmov	r6, r7, d0
 800cfd4:	f103 0204 	add.w	r2, r3, #4
 800cfd8:	d020      	beq.n	800d01c <_scanf_float+0x3d8>
 800cfda:	9903      	ldr	r1, [sp, #12]
 800cfdc:	600a      	str	r2, [r1, #0]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	e9c3 6700 	strd	r6, r7, [r3]
 800cfe4:	68e3      	ldr	r3, [r4, #12]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	60e3      	str	r3, [r4, #12]
 800cfea:	e66c      	b.n	800ccc6 <_scanf_float+0x82>
 800cfec:	9b04      	ldr	r3, [sp, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0e4      	beq.n	800cfbc <_scanf_float+0x378>
 800cff2:	9905      	ldr	r1, [sp, #20]
 800cff4:	230a      	movs	r3, #10
 800cff6:	462a      	mov	r2, r5
 800cff8:	3101      	adds	r1, #1
 800cffa:	4640      	mov	r0, r8
 800cffc:	f7ff f9b0 	bl	800c360 <_strtol_r>
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	9e05      	ldr	r6, [sp, #20]
 800d004:	1ac2      	subs	r2, r0, r3
 800d006:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d00a:	429e      	cmp	r6, r3
 800d00c:	bf28      	it	cs
 800d00e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d012:	4912      	ldr	r1, [pc, #72]	; (800d05c <_scanf_float+0x418>)
 800d014:	4630      	mov	r0, r6
 800d016:	f000 f8e7 	bl	800d1e8 <siprintf>
 800d01a:	e7cf      	b.n	800cfbc <_scanf_float+0x378>
 800d01c:	f011 0f04 	tst.w	r1, #4
 800d020:	9903      	ldr	r1, [sp, #12]
 800d022:	600a      	str	r2, [r1, #0]
 800d024:	d1db      	bne.n	800cfde <_scanf_float+0x39a>
 800d026:	f8d3 8000 	ldr.w	r8, [r3]
 800d02a:	ee10 2a10 	vmov	r2, s0
 800d02e:	ee10 0a10 	vmov	r0, s0
 800d032:	463b      	mov	r3, r7
 800d034:	4639      	mov	r1, r7
 800d036:	f7f3 fd79 	bl	8000b2c <__aeabi_dcmpun>
 800d03a:	b128      	cbz	r0, 800d048 <_scanf_float+0x404>
 800d03c:	4808      	ldr	r0, [pc, #32]	; (800d060 <_scanf_float+0x41c>)
 800d03e:	f000 fa4b 	bl	800d4d8 <nanf>
 800d042:	ed88 0a00 	vstr	s0, [r8]
 800d046:	e7cd      	b.n	800cfe4 <_scanf_float+0x3a0>
 800d048:	4630      	mov	r0, r6
 800d04a:	4639      	mov	r1, r7
 800d04c:	f7f3 fdcc 	bl	8000be8 <__aeabi_d2f>
 800d050:	f8c8 0000 	str.w	r0, [r8]
 800d054:	e7c6      	b.n	800cfe4 <_scanf_float+0x3a0>
 800d056:	2500      	movs	r5, #0
 800d058:	e635      	b.n	800ccc6 <_scanf_float+0x82>
 800d05a:	bf00      	nop
 800d05c:	08010eb5 	.word	0x08010eb5
 800d060:	08011144 	.word	0x08011144

0800d064 <std>:
 800d064:	2300      	movs	r3, #0
 800d066:	b510      	push	{r4, lr}
 800d068:	4604      	mov	r4, r0
 800d06a:	e9c0 3300 	strd	r3, r3, [r0]
 800d06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d072:	6083      	str	r3, [r0, #8]
 800d074:	8181      	strh	r1, [r0, #12]
 800d076:	6643      	str	r3, [r0, #100]	; 0x64
 800d078:	81c2      	strh	r2, [r0, #14]
 800d07a:	6183      	str	r3, [r0, #24]
 800d07c:	4619      	mov	r1, r3
 800d07e:	2208      	movs	r2, #8
 800d080:	305c      	adds	r0, #92	; 0x5c
 800d082:	f000 f914 	bl	800d2ae <memset>
 800d086:	4b0d      	ldr	r3, [pc, #52]	; (800d0bc <std+0x58>)
 800d088:	6263      	str	r3, [r4, #36]	; 0x24
 800d08a:	4b0d      	ldr	r3, [pc, #52]	; (800d0c0 <std+0x5c>)
 800d08c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d08e:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <std+0x60>)
 800d090:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d092:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <std+0x64>)
 800d094:	6323      	str	r3, [r4, #48]	; 0x30
 800d096:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <std+0x68>)
 800d098:	6224      	str	r4, [r4, #32]
 800d09a:	429c      	cmp	r4, r3
 800d09c:	d006      	beq.n	800d0ac <std+0x48>
 800d09e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d0a2:	4294      	cmp	r4, r2
 800d0a4:	d002      	beq.n	800d0ac <std+0x48>
 800d0a6:	33d0      	adds	r3, #208	; 0xd0
 800d0a8:	429c      	cmp	r4, r3
 800d0aa:	d105      	bne.n	800d0b8 <std+0x54>
 800d0ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b4:	f000 b9fe 	b.w	800d4b4 <__retarget_lock_init_recursive>
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	bf00      	nop
 800d0bc:	0800d229 	.word	0x0800d229
 800d0c0:	0800d24b 	.word	0x0800d24b
 800d0c4:	0800d283 	.word	0x0800d283
 800d0c8:	0800d2a7 	.word	0x0800d2a7
 800d0cc:	20001f98 	.word	0x20001f98

0800d0d0 <stdio_exit_handler>:
 800d0d0:	4a02      	ldr	r2, [pc, #8]	; (800d0dc <stdio_exit_handler+0xc>)
 800d0d2:	4903      	ldr	r1, [pc, #12]	; (800d0e0 <stdio_exit_handler+0x10>)
 800d0d4:	4803      	ldr	r0, [pc, #12]	; (800d0e4 <stdio_exit_handler+0x14>)
 800d0d6:	f000 b869 	b.w	800d1ac <_fwalk_sglue>
 800d0da:	bf00      	nop
 800d0dc:	20000014 	.word	0x20000014
 800d0e0:	0800fbb1 	.word	0x0800fbb1
 800d0e4:	20000020 	.word	0x20000020

0800d0e8 <cleanup_stdio>:
 800d0e8:	6841      	ldr	r1, [r0, #4]
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	; (800d11c <cleanup_stdio+0x34>)
 800d0ec:	4299      	cmp	r1, r3
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	d001      	beq.n	800d0f8 <cleanup_stdio+0x10>
 800d0f4:	f002 fd5c 	bl	800fbb0 <_fflush_r>
 800d0f8:	68a1      	ldr	r1, [r4, #8]
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <cleanup_stdio+0x38>)
 800d0fc:	4299      	cmp	r1, r3
 800d0fe:	d002      	beq.n	800d106 <cleanup_stdio+0x1e>
 800d100:	4620      	mov	r0, r4
 800d102:	f002 fd55 	bl	800fbb0 <_fflush_r>
 800d106:	68e1      	ldr	r1, [r4, #12]
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <cleanup_stdio+0x3c>)
 800d10a:	4299      	cmp	r1, r3
 800d10c:	d004      	beq.n	800d118 <cleanup_stdio+0x30>
 800d10e:	4620      	mov	r0, r4
 800d110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d114:	f002 bd4c 	b.w	800fbb0 <_fflush_r>
 800d118:	bd10      	pop	{r4, pc}
 800d11a:	bf00      	nop
 800d11c:	20001f98 	.word	0x20001f98
 800d120:	20002000 	.word	0x20002000
 800d124:	20002068 	.word	0x20002068

0800d128 <global_stdio_init.part.0>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <global_stdio_init.part.0+0x30>)
 800d12c:	4c0b      	ldr	r4, [pc, #44]	; (800d15c <global_stdio_init.part.0+0x34>)
 800d12e:	4a0c      	ldr	r2, [pc, #48]	; (800d160 <global_stdio_init.part.0+0x38>)
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	4620      	mov	r0, r4
 800d134:	2200      	movs	r2, #0
 800d136:	2104      	movs	r1, #4
 800d138:	f7ff ff94 	bl	800d064 <std>
 800d13c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d140:	2201      	movs	r2, #1
 800d142:	2109      	movs	r1, #9
 800d144:	f7ff ff8e 	bl	800d064 <std>
 800d148:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d14c:	2202      	movs	r2, #2
 800d14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d152:	2112      	movs	r1, #18
 800d154:	f7ff bf86 	b.w	800d064 <std>
 800d158:	200020d0 	.word	0x200020d0
 800d15c:	20001f98 	.word	0x20001f98
 800d160:	0800d0d1 	.word	0x0800d0d1

0800d164 <__sfp_lock_acquire>:
 800d164:	4801      	ldr	r0, [pc, #4]	; (800d16c <__sfp_lock_acquire+0x8>)
 800d166:	f000 b9a6 	b.w	800d4b6 <__retarget_lock_acquire_recursive>
 800d16a:	bf00      	nop
 800d16c:	200020d9 	.word	0x200020d9

0800d170 <__sfp_lock_release>:
 800d170:	4801      	ldr	r0, [pc, #4]	; (800d178 <__sfp_lock_release+0x8>)
 800d172:	f000 b9a1 	b.w	800d4b8 <__retarget_lock_release_recursive>
 800d176:	bf00      	nop
 800d178:	200020d9 	.word	0x200020d9

0800d17c <__sinit>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	4604      	mov	r4, r0
 800d180:	f7ff fff0 	bl	800d164 <__sfp_lock_acquire>
 800d184:	6a23      	ldr	r3, [r4, #32]
 800d186:	b11b      	cbz	r3, 800d190 <__sinit+0x14>
 800d188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18c:	f7ff bff0 	b.w	800d170 <__sfp_lock_release>
 800d190:	4b04      	ldr	r3, [pc, #16]	; (800d1a4 <__sinit+0x28>)
 800d192:	6223      	str	r3, [r4, #32]
 800d194:	4b04      	ldr	r3, [pc, #16]	; (800d1a8 <__sinit+0x2c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1f5      	bne.n	800d188 <__sinit+0xc>
 800d19c:	f7ff ffc4 	bl	800d128 <global_stdio_init.part.0>
 800d1a0:	e7f2      	b.n	800d188 <__sinit+0xc>
 800d1a2:	bf00      	nop
 800d1a4:	0800d0e9 	.word	0x0800d0e9
 800d1a8:	200020d0 	.word	0x200020d0

0800d1ac <_fwalk_sglue>:
 800d1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	4688      	mov	r8, r1
 800d1b4:	4614      	mov	r4, r2
 800d1b6:	2600      	movs	r6, #0
 800d1b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1bc:	f1b9 0901 	subs.w	r9, r9, #1
 800d1c0:	d505      	bpl.n	800d1ce <_fwalk_sglue+0x22>
 800d1c2:	6824      	ldr	r4, [r4, #0]
 800d1c4:	2c00      	cmp	r4, #0
 800d1c6:	d1f7      	bne.n	800d1b8 <_fwalk_sglue+0xc>
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d907      	bls.n	800d1e4 <_fwalk_sglue+0x38>
 800d1d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	d003      	beq.n	800d1e4 <_fwalk_sglue+0x38>
 800d1dc:	4629      	mov	r1, r5
 800d1de:	4638      	mov	r0, r7
 800d1e0:	47c0      	blx	r8
 800d1e2:	4306      	orrs	r6, r0
 800d1e4:	3568      	adds	r5, #104	; 0x68
 800d1e6:	e7e9      	b.n	800d1bc <_fwalk_sglue+0x10>

0800d1e8 <siprintf>:
 800d1e8:	b40e      	push	{r1, r2, r3}
 800d1ea:	b500      	push	{lr}
 800d1ec:	b09c      	sub	sp, #112	; 0x70
 800d1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800d1f0:	9002      	str	r0, [sp, #8]
 800d1f2:	9006      	str	r0, [sp, #24]
 800d1f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1f8:	4809      	ldr	r0, [pc, #36]	; (800d220 <siprintf+0x38>)
 800d1fa:	9107      	str	r1, [sp, #28]
 800d1fc:	9104      	str	r1, [sp, #16]
 800d1fe:	4909      	ldr	r1, [pc, #36]	; (800d224 <siprintf+0x3c>)
 800d200:	f853 2b04 	ldr.w	r2, [r3], #4
 800d204:	9105      	str	r1, [sp, #20]
 800d206:	6800      	ldr	r0, [r0, #0]
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	a902      	add	r1, sp, #8
 800d20c:	f002 fb4c 	bl	800f8a8 <_svfiprintf_r>
 800d210:	9b02      	ldr	r3, [sp, #8]
 800d212:	2200      	movs	r2, #0
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	b01c      	add	sp, #112	; 0x70
 800d218:	f85d eb04 	ldr.w	lr, [sp], #4
 800d21c:	b003      	add	sp, #12
 800d21e:	4770      	bx	lr
 800d220:	2000006c 	.word	0x2000006c
 800d224:	ffff0208 	.word	0xffff0208

0800d228 <__sread>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	f000 f8e2 	bl	800d3f8 <_read_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	bfab      	itete	ge
 800d238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrhlt	r3, [r4, #12]
 800d23c:	181b      	addge	r3, r3, r0
 800d23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d242:	bfac      	ite	ge
 800d244:	6563      	strge	r3, [r4, #84]	; 0x54
 800d246:	81a3      	strhlt	r3, [r4, #12]
 800d248:	bd10      	pop	{r4, pc}

0800d24a <__swrite>:
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	461f      	mov	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	05db      	lsls	r3, r3, #23
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4616      	mov	r6, r2
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1e>
 800d25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d260:	2302      	movs	r3, #2
 800d262:	2200      	movs	r2, #0
 800d264:	f000 f8b6 	bl	800d3d4 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	4632      	mov	r2, r6
 800d276:	463b      	mov	r3, r7
 800d278:	4628      	mov	r0, r5
 800d27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	f000 b8dd 	b.w	800d43c <_write_r>

0800d282 <__sseek>:
 800d282:	b510      	push	{r4, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28a:	f000 f8a3 	bl	800d3d4 <_lseek_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	bf15      	itete	ne
 800d294:	6560      	strne	r0, [r4, #84]	; 0x54
 800d296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29e:	81a3      	strheq	r3, [r4, #12]
 800d2a0:	bf18      	it	ne
 800d2a2:	81a3      	strhne	r3, [r4, #12]
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__sclose>:
 800d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2aa:	f000 b82d 	b.w	800d308 <_close_r>

0800d2ae <memset>:
 800d2ae:	4402      	add	r2, r0
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d100      	bne.n	800d2b8 <memset+0xa>
 800d2b6:	4770      	bx	lr
 800d2b8:	f803 1b01 	strb.w	r1, [r3], #1
 800d2bc:	e7f9      	b.n	800d2b2 <memset+0x4>

0800d2be <strchr>:
 800d2be:	b2c9      	uxtb	r1, r1
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2c6:	b11a      	cbz	r2, 800d2d0 <strchr+0x12>
 800d2c8:	428a      	cmp	r2, r1
 800d2ca:	d1f9      	bne.n	800d2c0 <strchr+0x2>
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	4770      	bx	lr
 800d2d0:	2900      	cmp	r1, #0
 800d2d2:	bf18      	it	ne
 800d2d4:	2300      	movne	r3, #0
 800d2d6:	e7f9      	b.n	800d2cc <strchr+0xe>

0800d2d8 <strncpy>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	3901      	subs	r1, #1
 800d2dc:	4603      	mov	r3, r0
 800d2de:	b132      	cbz	r2, 800d2ee <strncpy+0x16>
 800d2e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d2e4:	f803 4b01 	strb.w	r4, [r3], #1
 800d2e8:	3a01      	subs	r2, #1
 800d2ea:	2c00      	cmp	r4, #0
 800d2ec:	d1f7      	bne.n	800d2de <strncpy+0x6>
 800d2ee:	441a      	add	r2, r3
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d100      	bne.n	800d2f8 <strncpy+0x20>
 800d2f6:	bd10      	pop	{r4, pc}
 800d2f8:	f803 1b01 	strb.w	r1, [r3], #1
 800d2fc:	e7f9      	b.n	800d2f2 <strncpy+0x1a>
	...

0800d300 <_localeconv_r>:
 800d300:	4800      	ldr	r0, [pc, #0]	; (800d304 <_localeconv_r+0x4>)
 800d302:	4770      	bx	lr
 800d304:	20000160 	.word	0x20000160

0800d308 <_close_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4d06      	ldr	r5, [pc, #24]	; (800d324 <_close_r+0x1c>)
 800d30c:	2300      	movs	r3, #0
 800d30e:	4604      	mov	r4, r0
 800d310:	4608      	mov	r0, r1
 800d312:	602b      	str	r3, [r5, #0]
 800d314:	f7f5 fb8f 	bl	8002a36 <_close>
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	d102      	bne.n	800d322 <_close_r+0x1a>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	b103      	cbz	r3, 800d322 <_close_r+0x1a>
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	bd38      	pop	{r3, r4, r5, pc}
 800d324:	200020d4 	.word	0x200020d4

0800d328 <_reclaim_reent>:
 800d328:	4b29      	ldr	r3, [pc, #164]	; (800d3d0 <_reclaim_reent+0xa8>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4283      	cmp	r3, r0
 800d32e:	b570      	push	{r4, r5, r6, lr}
 800d330:	4604      	mov	r4, r0
 800d332:	d04b      	beq.n	800d3cc <_reclaim_reent+0xa4>
 800d334:	69c3      	ldr	r3, [r0, #28]
 800d336:	b143      	cbz	r3, 800d34a <_reclaim_reent+0x22>
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d144      	bne.n	800d3c8 <_reclaim_reent+0xa0>
 800d33e:	69e3      	ldr	r3, [r4, #28]
 800d340:	6819      	ldr	r1, [r3, #0]
 800d342:	b111      	cbz	r1, 800d34a <_reclaim_reent+0x22>
 800d344:	4620      	mov	r0, r4
 800d346:	f000 ff49 	bl	800e1dc <_free_r>
 800d34a:	6961      	ldr	r1, [r4, #20]
 800d34c:	b111      	cbz	r1, 800d354 <_reclaim_reent+0x2c>
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 ff44 	bl	800e1dc <_free_r>
 800d354:	69e1      	ldr	r1, [r4, #28]
 800d356:	b111      	cbz	r1, 800d35e <_reclaim_reent+0x36>
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 ff3f 	bl	800e1dc <_free_r>
 800d35e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d360:	b111      	cbz	r1, 800d368 <_reclaim_reent+0x40>
 800d362:	4620      	mov	r0, r4
 800d364:	f000 ff3a 	bl	800e1dc <_free_r>
 800d368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d36a:	b111      	cbz	r1, 800d372 <_reclaim_reent+0x4a>
 800d36c:	4620      	mov	r0, r4
 800d36e:	f000 ff35 	bl	800e1dc <_free_r>
 800d372:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d374:	b111      	cbz	r1, 800d37c <_reclaim_reent+0x54>
 800d376:	4620      	mov	r0, r4
 800d378:	f000 ff30 	bl	800e1dc <_free_r>
 800d37c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d37e:	b111      	cbz	r1, 800d386 <_reclaim_reent+0x5e>
 800d380:	4620      	mov	r0, r4
 800d382:	f000 ff2b 	bl	800e1dc <_free_r>
 800d386:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d388:	b111      	cbz	r1, 800d390 <_reclaim_reent+0x68>
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 ff26 	bl	800e1dc <_free_r>
 800d390:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d392:	b111      	cbz	r1, 800d39a <_reclaim_reent+0x72>
 800d394:	4620      	mov	r0, r4
 800d396:	f000 ff21 	bl	800e1dc <_free_r>
 800d39a:	6a23      	ldr	r3, [r4, #32]
 800d39c:	b1b3      	cbz	r3, 800d3cc <_reclaim_reent+0xa4>
 800d39e:	4620      	mov	r0, r4
 800d3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3a4:	4718      	bx	r3
 800d3a6:	5949      	ldr	r1, [r1, r5]
 800d3a8:	b941      	cbnz	r1, 800d3bc <_reclaim_reent+0x94>
 800d3aa:	3504      	adds	r5, #4
 800d3ac:	69e3      	ldr	r3, [r4, #28]
 800d3ae:	2d80      	cmp	r5, #128	; 0x80
 800d3b0:	68d9      	ldr	r1, [r3, #12]
 800d3b2:	d1f8      	bne.n	800d3a6 <_reclaim_reent+0x7e>
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f000 ff11 	bl	800e1dc <_free_r>
 800d3ba:	e7c0      	b.n	800d33e <_reclaim_reent+0x16>
 800d3bc:	680e      	ldr	r6, [r1, #0]
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 ff0c 	bl	800e1dc <_free_r>
 800d3c4:	4631      	mov	r1, r6
 800d3c6:	e7ef      	b.n	800d3a8 <_reclaim_reent+0x80>
 800d3c8:	2500      	movs	r5, #0
 800d3ca:	e7ef      	b.n	800d3ac <_reclaim_reent+0x84>
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2000006c 	.word	0x2000006c

0800d3d4 <_lseek_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4d07      	ldr	r5, [pc, #28]	; (800d3f4 <_lseek_r+0x20>)
 800d3d8:	4604      	mov	r4, r0
 800d3da:	4608      	mov	r0, r1
 800d3dc:	4611      	mov	r1, r2
 800d3de:	2200      	movs	r2, #0
 800d3e0:	602a      	str	r2, [r5, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	f7f5 fb4e 	bl	8002a84 <_lseek>
 800d3e8:	1c43      	adds	r3, r0, #1
 800d3ea:	d102      	bne.n	800d3f2 <_lseek_r+0x1e>
 800d3ec:	682b      	ldr	r3, [r5, #0]
 800d3ee:	b103      	cbz	r3, 800d3f2 <_lseek_r+0x1e>
 800d3f0:	6023      	str	r3, [r4, #0]
 800d3f2:	bd38      	pop	{r3, r4, r5, pc}
 800d3f4:	200020d4 	.word	0x200020d4

0800d3f8 <_read_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	; (800d418 <_read_r+0x20>)
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	4608      	mov	r0, r1
 800d400:	4611      	mov	r1, r2
 800d402:	2200      	movs	r2, #0
 800d404:	602a      	str	r2, [r5, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f7f5 fadc 	bl	80029c4 <_read>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_read_r+0x1e>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_read_r+0x1e>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	200020d4 	.word	0x200020d4

0800d41c <_sbrk_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d06      	ldr	r5, [pc, #24]	; (800d438 <_sbrk_r+0x1c>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	602b      	str	r3, [r5, #0]
 800d428:	f7f5 fb3a 	bl	8002aa0 <_sbrk>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_sbrk_r+0x1a>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_sbrk_r+0x1a>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	200020d4 	.word	0x200020d4

0800d43c <_write_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	; (800d45c <_write_r+0x20>)
 800d440:	4604      	mov	r4, r0
 800d442:	4608      	mov	r0, r1
 800d444:	4611      	mov	r1, r2
 800d446:	2200      	movs	r2, #0
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f7f5 fad7 	bl	80029fe <_write>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_write_r+0x1e>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_write_r+0x1e>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	200020d4 	.word	0x200020d4

0800d460 <__errno>:
 800d460:	4b01      	ldr	r3, [pc, #4]	; (800d468 <__errno+0x8>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	2000006c 	.word	0x2000006c

0800d46c <__libc_init_array>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	4d0d      	ldr	r5, [pc, #52]	; (800d4a4 <__libc_init_array+0x38>)
 800d470:	4c0d      	ldr	r4, [pc, #52]	; (800d4a8 <__libc_init_array+0x3c>)
 800d472:	1b64      	subs	r4, r4, r5
 800d474:	10a4      	asrs	r4, r4, #2
 800d476:	2600      	movs	r6, #0
 800d478:	42a6      	cmp	r6, r4
 800d47a:	d109      	bne.n	800d490 <__libc_init_array+0x24>
 800d47c:	4d0b      	ldr	r5, [pc, #44]	; (800d4ac <__libc_init_array+0x40>)
 800d47e:	4c0c      	ldr	r4, [pc, #48]	; (800d4b0 <__libc_init_array+0x44>)
 800d480:	f003 fab0 	bl	80109e4 <_init>
 800d484:	1b64      	subs	r4, r4, r5
 800d486:	10a4      	asrs	r4, r4, #2
 800d488:	2600      	movs	r6, #0
 800d48a:	42a6      	cmp	r6, r4
 800d48c:	d105      	bne.n	800d49a <__libc_init_array+0x2e>
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
 800d490:	f855 3b04 	ldr.w	r3, [r5], #4
 800d494:	4798      	blx	r3
 800d496:	3601      	adds	r6, #1
 800d498:	e7ee      	b.n	800d478 <__libc_init_array+0xc>
 800d49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d49e:	4798      	blx	r3
 800d4a0:	3601      	adds	r6, #1
 800d4a2:	e7f2      	b.n	800d48a <__libc_init_array+0x1e>
 800d4a4:	080111b0 	.word	0x080111b0
 800d4a8:	080111b0 	.word	0x080111b0
 800d4ac:	080111b0 	.word	0x080111b0
 800d4b0:	080111b4 	.word	0x080111b4

0800d4b4 <__retarget_lock_init_recursive>:
 800d4b4:	4770      	bx	lr

0800d4b6 <__retarget_lock_acquire_recursive>:
 800d4b6:	4770      	bx	lr

0800d4b8 <__retarget_lock_release_recursive>:
 800d4b8:	4770      	bx	lr

0800d4ba <memcpy>:
 800d4ba:	440a      	add	r2, r1
 800d4bc:	4291      	cmp	r1, r2
 800d4be:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4c2:	d100      	bne.n	800d4c6 <memcpy+0xc>
 800d4c4:	4770      	bx	lr
 800d4c6:	b510      	push	{r4, lr}
 800d4c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4d0:	4291      	cmp	r1, r2
 800d4d2:	d1f9      	bne.n	800d4c8 <memcpy+0xe>
 800d4d4:	bd10      	pop	{r4, pc}
	...

0800d4d8 <nanf>:
 800d4d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d4e0 <nanf+0x8>
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	7fc00000 	.word	0x7fc00000

0800d4e4 <quorem>:
 800d4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e8:	6903      	ldr	r3, [r0, #16]
 800d4ea:	690c      	ldr	r4, [r1, #16]
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	db7e      	blt.n	800d5f0 <quorem+0x10c>
 800d4f2:	3c01      	subs	r4, #1
 800d4f4:	f101 0814 	add.w	r8, r1, #20
 800d4f8:	f100 0514 	add.w	r5, r0, #20
 800d4fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d50a:	3301      	adds	r3, #1
 800d50c:	429a      	cmp	r2, r3
 800d50e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d512:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d516:	fbb2 f6f3 	udiv	r6, r2, r3
 800d51a:	d331      	bcc.n	800d580 <quorem+0x9c>
 800d51c:	f04f 0e00 	mov.w	lr, #0
 800d520:	4640      	mov	r0, r8
 800d522:	46ac      	mov	ip, r5
 800d524:	46f2      	mov	sl, lr
 800d526:	f850 2b04 	ldr.w	r2, [r0], #4
 800d52a:	b293      	uxth	r3, r2
 800d52c:	fb06 e303 	mla	r3, r6, r3, lr
 800d530:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d534:	0c1a      	lsrs	r2, r3, #16
 800d536:	b29b      	uxth	r3, r3
 800d538:	ebaa 0303 	sub.w	r3, sl, r3
 800d53c:	f8dc a000 	ldr.w	sl, [ip]
 800d540:	fa13 f38a 	uxtah	r3, r3, sl
 800d544:	fb06 220e 	mla	r2, r6, lr, r2
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	9b00      	ldr	r3, [sp, #0]
 800d54c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d550:	b292      	uxth	r2, r2
 800d552:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d556:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d55a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d55e:	4581      	cmp	r9, r0
 800d560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d564:	f84c 3b04 	str.w	r3, [ip], #4
 800d568:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d56c:	d2db      	bcs.n	800d526 <quorem+0x42>
 800d56e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d572:	b92b      	cbnz	r3, 800d580 <quorem+0x9c>
 800d574:	9b01      	ldr	r3, [sp, #4]
 800d576:	3b04      	subs	r3, #4
 800d578:	429d      	cmp	r5, r3
 800d57a:	461a      	mov	r2, r3
 800d57c:	d32c      	bcc.n	800d5d8 <quorem+0xf4>
 800d57e:	613c      	str	r4, [r7, #16]
 800d580:	4638      	mov	r0, r7
 800d582:	f001 f93d 	bl	800e800 <__mcmp>
 800d586:	2800      	cmp	r0, #0
 800d588:	db22      	blt.n	800d5d0 <quorem+0xec>
 800d58a:	3601      	adds	r6, #1
 800d58c:	4629      	mov	r1, r5
 800d58e:	2000      	movs	r0, #0
 800d590:	f858 2b04 	ldr.w	r2, [r8], #4
 800d594:	f8d1 c000 	ldr.w	ip, [r1]
 800d598:	b293      	uxth	r3, r2
 800d59a:	1ac3      	subs	r3, r0, r3
 800d59c:	0c12      	lsrs	r2, r2, #16
 800d59e:	fa13 f38c 	uxtah	r3, r3, ip
 800d5a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d5a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5b0:	45c1      	cmp	r9, r8
 800d5b2:	f841 3b04 	str.w	r3, [r1], #4
 800d5b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d5ba:	d2e9      	bcs.n	800d590 <quorem+0xac>
 800d5bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5c4:	b922      	cbnz	r2, 800d5d0 <quorem+0xec>
 800d5c6:	3b04      	subs	r3, #4
 800d5c8:	429d      	cmp	r5, r3
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	d30a      	bcc.n	800d5e4 <quorem+0x100>
 800d5ce:	613c      	str	r4, [r7, #16]
 800d5d0:	4630      	mov	r0, r6
 800d5d2:	b003      	add	sp, #12
 800d5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d8:	6812      	ldr	r2, [r2, #0]
 800d5da:	3b04      	subs	r3, #4
 800d5dc:	2a00      	cmp	r2, #0
 800d5de:	d1ce      	bne.n	800d57e <quorem+0x9a>
 800d5e0:	3c01      	subs	r4, #1
 800d5e2:	e7c9      	b.n	800d578 <quorem+0x94>
 800d5e4:	6812      	ldr	r2, [r2, #0]
 800d5e6:	3b04      	subs	r3, #4
 800d5e8:	2a00      	cmp	r2, #0
 800d5ea:	d1f0      	bne.n	800d5ce <quorem+0xea>
 800d5ec:	3c01      	subs	r4, #1
 800d5ee:	e7eb      	b.n	800d5c8 <quorem+0xe4>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	e7ee      	b.n	800d5d2 <quorem+0xee>
 800d5f4:	0000      	movs	r0, r0
	...

0800d5f8 <_dtoa_r>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	ed2d 8b04 	vpush	{d8-d9}
 800d600:	69c5      	ldr	r5, [r0, #28]
 800d602:	b093      	sub	sp, #76	; 0x4c
 800d604:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d608:	ec57 6b10 	vmov	r6, r7, d0
 800d60c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d610:	9107      	str	r1, [sp, #28]
 800d612:	4604      	mov	r4, r0
 800d614:	920a      	str	r2, [sp, #40]	; 0x28
 800d616:	930d      	str	r3, [sp, #52]	; 0x34
 800d618:	b975      	cbnz	r5, 800d638 <_dtoa_r+0x40>
 800d61a:	2010      	movs	r0, #16
 800d61c:	f7fe fd6a 	bl	800c0f4 <malloc>
 800d620:	4602      	mov	r2, r0
 800d622:	61e0      	str	r0, [r4, #28]
 800d624:	b920      	cbnz	r0, 800d630 <_dtoa_r+0x38>
 800d626:	4bae      	ldr	r3, [pc, #696]	; (800d8e0 <_dtoa_r+0x2e8>)
 800d628:	21ef      	movs	r1, #239	; 0xef
 800d62a:	48ae      	ldr	r0, [pc, #696]	; (800d8e4 <_dtoa_r+0x2ec>)
 800d62c:	f002 fb1c 	bl	800fc68 <__assert_func>
 800d630:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d634:	6005      	str	r5, [r0, #0]
 800d636:	60c5      	str	r5, [r0, #12]
 800d638:	69e3      	ldr	r3, [r4, #28]
 800d63a:	6819      	ldr	r1, [r3, #0]
 800d63c:	b151      	cbz	r1, 800d654 <_dtoa_r+0x5c>
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	604a      	str	r2, [r1, #4]
 800d642:	2301      	movs	r3, #1
 800d644:	4093      	lsls	r3, r2
 800d646:	608b      	str	r3, [r1, #8]
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 fe53 	bl	800e2f4 <_Bfree>
 800d64e:	69e3      	ldr	r3, [r4, #28]
 800d650:	2200      	movs	r2, #0
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	1e3b      	subs	r3, r7, #0
 800d656:	bfbb      	ittet	lt
 800d658:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d65c:	9303      	strlt	r3, [sp, #12]
 800d65e:	2300      	movge	r3, #0
 800d660:	2201      	movlt	r2, #1
 800d662:	bfac      	ite	ge
 800d664:	f8c8 3000 	strge.w	r3, [r8]
 800d668:	f8c8 2000 	strlt.w	r2, [r8]
 800d66c:	4b9e      	ldr	r3, [pc, #632]	; (800d8e8 <_dtoa_r+0x2f0>)
 800d66e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d672:	ea33 0308 	bics.w	r3, r3, r8
 800d676:	d11b      	bne.n	800d6b0 <_dtoa_r+0xb8>
 800d678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d67a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d67e:	6013      	str	r3, [r2, #0]
 800d680:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d684:	4333      	orrs	r3, r6
 800d686:	f000 8593 	beq.w	800e1b0 <_dtoa_r+0xbb8>
 800d68a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d68c:	b963      	cbnz	r3, 800d6a8 <_dtoa_r+0xb0>
 800d68e:	4b97      	ldr	r3, [pc, #604]	; (800d8ec <_dtoa_r+0x2f4>)
 800d690:	e027      	b.n	800d6e2 <_dtoa_r+0xea>
 800d692:	4b97      	ldr	r3, [pc, #604]	; (800d8f0 <_dtoa_r+0x2f8>)
 800d694:	9300      	str	r3, [sp, #0]
 800d696:	3308      	adds	r3, #8
 800d698:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	9800      	ldr	r0, [sp, #0]
 800d69e:	b013      	add	sp, #76	; 0x4c
 800d6a0:	ecbd 8b04 	vpop	{d8-d9}
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a8:	4b90      	ldr	r3, [pc, #576]	; (800d8ec <_dtoa_r+0x2f4>)
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	3303      	adds	r3, #3
 800d6ae:	e7f3      	b.n	800d698 <_dtoa_r+0xa0>
 800d6b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	ec51 0b17 	vmov	r0, r1, d7
 800d6ba:	eeb0 8a47 	vmov.f32	s16, s14
 800d6be:	eef0 8a67 	vmov.f32	s17, s15
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f7f3 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6c8:	4681      	mov	r9, r0
 800d6ca:	b160      	cbz	r0, 800d6e6 <_dtoa_r+0xee>
 800d6cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	6013      	str	r3, [r2, #0]
 800d6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 8568 	beq.w	800e1aa <_dtoa_r+0xbb2>
 800d6da:	4b86      	ldr	r3, [pc, #536]	; (800d8f4 <_dtoa_r+0x2fc>)
 800d6dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	e7da      	b.n	800d69c <_dtoa_r+0xa4>
 800d6e6:	aa10      	add	r2, sp, #64	; 0x40
 800d6e8:	a911      	add	r1, sp, #68	; 0x44
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	eeb0 0a48 	vmov.f32	s0, s16
 800d6f0:	eef0 0a68 	vmov.f32	s1, s17
 800d6f4:	f001 f99a 	bl	800ea2c <__d2b>
 800d6f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	2d00      	cmp	r5, #0
 800d700:	d07f      	beq.n	800d802 <_dtoa_r+0x20a>
 800d702:	ee18 3a90 	vmov	r3, s17
 800d706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d70a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d70e:	ec51 0b18 	vmov	r0, r1, d8
 800d712:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d71a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d71e:	4619      	mov	r1, r3
 800d720:	2200      	movs	r2, #0
 800d722:	4b75      	ldr	r3, [pc, #468]	; (800d8f8 <_dtoa_r+0x300>)
 800d724:	f7f2 fdb0 	bl	8000288 <__aeabi_dsub>
 800d728:	a367      	add	r3, pc, #412	; (adr r3, 800d8c8 <_dtoa_r+0x2d0>)
 800d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72e:	f7f2 ff63 	bl	80005f8 <__aeabi_dmul>
 800d732:	a367      	add	r3, pc, #412	; (adr r3, 800d8d0 <_dtoa_r+0x2d8>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	f7f2 fda8 	bl	800028c <__adddf3>
 800d73c:	4606      	mov	r6, r0
 800d73e:	4628      	mov	r0, r5
 800d740:	460f      	mov	r7, r1
 800d742:	f7f2 feef 	bl	8000524 <__aeabi_i2d>
 800d746:	a364      	add	r3, pc, #400	; (adr r3, 800d8d8 <_dtoa_r+0x2e0>)
 800d748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74c:	f7f2 ff54 	bl	80005f8 <__aeabi_dmul>
 800d750:	4602      	mov	r2, r0
 800d752:	460b      	mov	r3, r1
 800d754:	4630      	mov	r0, r6
 800d756:	4639      	mov	r1, r7
 800d758:	f7f2 fd98 	bl	800028c <__adddf3>
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	f7f3 f9fa 	bl	8000b58 <__aeabi_d2iz>
 800d764:	2200      	movs	r2, #0
 800d766:	4683      	mov	fp, r0
 800d768:	2300      	movs	r3, #0
 800d76a:	4630      	mov	r0, r6
 800d76c:	4639      	mov	r1, r7
 800d76e:	f7f3 f9b5 	bl	8000adc <__aeabi_dcmplt>
 800d772:	b148      	cbz	r0, 800d788 <_dtoa_r+0x190>
 800d774:	4658      	mov	r0, fp
 800d776:	f7f2 fed5 	bl	8000524 <__aeabi_i2d>
 800d77a:	4632      	mov	r2, r6
 800d77c:	463b      	mov	r3, r7
 800d77e:	f7f3 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d782:	b908      	cbnz	r0, 800d788 <_dtoa_r+0x190>
 800d784:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d788:	f1bb 0f16 	cmp.w	fp, #22
 800d78c:	d857      	bhi.n	800d83e <_dtoa_r+0x246>
 800d78e:	4b5b      	ldr	r3, [pc, #364]	; (800d8fc <_dtoa_r+0x304>)
 800d790:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	ec51 0b18 	vmov	r0, r1, d8
 800d79c:	f7f3 f99e 	bl	8000adc <__aeabi_dcmplt>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d04e      	beq.n	800d842 <_dtoa_r+0x24a>
 800d7a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	930c      	str	r3, [sp, #48]	; 0x30
 800d7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7ae:	1b5b      	subs	r3, r3, r5
 800d7b0:	1e5a      	subs	r2, r3, #1
 800d7b2:	bf45      	ittet	mi
 800d7b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800d7b8:	9305      	strmi	r3, [sp, #20]
 800d7ba:	2300      	movpl	r3, #0
 800d7bc:	2300      	movmi	r3, #0
 800d7be:	9206      	str	r2, [sp, #24]
 800d7c0:	bf54      	ite	pl
 800d7c2:	9305      	strpl	r3, [sp, #20]
 800d7c4:	9306      	strmi	r3, [sp, #24]
 800d7c6:	f1bb 0f00 	cmp.w	fp, #0
 800d7ca:	db3c      	blt.n	800d846 <_dtoa_r+0x24e>
 800d7cc:	9b06      	ldr	r3, [sp, #24]
 800d7ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d7d2:	445b      	add	r3, fp
 800d7d4:	9306      	str	r3, [sp, #24]
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	9308      	str	r3, [sp, #32]
 800d7da:	9b07      	ldr	r3, [sp, #28]
 800d7dc:	2b09      	cmp	r3, #9
 800d7de:	d868      	bhi.n	800d8b2 <_dtoa_r+0x2ba>
 800d7e0:	2b05      	cmp	r3, #5
 800d7e2:	bfc4      	itt	gt
 800d7e4:	3b04      	subgt	r3, #4
 800d7e6:	9307      	strgt	r3, [sp, #28]
 800d7e8:	9b07      	ldr	r3, [sp, #28]
 800d7ea:	f1a3 0302 	sub.w	r3, r3, #2
 800d7ee:	bfcc      	ite	gt
 800d7f0:	2500      	movgt	r5, #0
 800d7f2:	2501      	movle	r5, #1
 800d7f4:	2b03      	cmp	r3, #3
 800d7f6:	f200 8085 	bhi.w	800d904 <_dtoa_r+0x30c>
 800d7fa:	e8df f003 	tbb	[pc, r3]
 800d7fe:	3b2e      	.short	0x3b2e
 800d800:	5839      	.short	0x5839
 800d802:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d806:	441d      	add	r5, r3
 800d808:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d80c:	2b20      	cmp	r3, #32
 800d80e:	bfc1      	itttt	gt
 800d810:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d814:	fa08 f803 	lslgt.w	r8, r8, r3
 800d818:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d81c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d820:	bfd6      	itet	le
 800d822:	f1c3 0320 	rsble	r3, r3, #32
 800d826:	ea48 0003 	orrgt.w	r0, r8, r3
 800d82a:	fa06 f003 	lslle.w	r0, r6, r3
 800d82e:	f7f2 fe69 	bl	8000504 <__aeabi_ui2d>
 800d832:	2201      	movs	r2, #1
 800d834:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d838:	3d01      	subs	r5, #1
 800d83a:	920e      	str	r2, [sp, #56]	; 0x38
 800d83c:	e76f      	b.n	800d71e <_dtoa_r+0x126>
 800d83e:	2301      	movs	r3, #1
 800d840:	e7b3      	b.n	800d7aa <_dtoa_r+0x1b2>
 800d842:	900c      	str	r0, [sp, #48]	; 0x30
 800d844:	e7b2      	b.n	800d7ac <_dtoa_r+0x1b4>
 800d846:	9b05      	ldr	r3, [sp, #20]
 800d848:	eba3 030b 	sub.w	r3, r3, fp
 800d84c:	9305      	str	r3, [sp, #20]
 800d84e:	f1cb 0300 	rsb	r3, fp, #0
 800d852:	9308      	str	r3, [sp, #32]
 800d854:	2300      	movs	r3, #0
 800d856:	930b      	str	r3, [sp, #44]	; 0x2c
 800d858:	e7bf      	b.n	800d7da <_dtoa_r+0x1e2>
 800d85a:	2300      	movs	r3, #0
 800d85c:	9309      	str	r3, [sp, #36]	; 0x24
 800d85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d860:	2b00      	cmp	r3, #0
 800d862:	dc52      	bgt.n	800d90a <_dtoa_r+0x312>
 800d864:	2301      	movs	r3, #1
 800d866:	9301      	str	r3, [sp, #4]
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	461a      	mov	r2, r3
 800d86c:	920a      	str	r2, [sp, #40]	; 0x28
 800d86e:	e00b      	b.n	800d888 <_dtoa_r+0x290>
 800d870:	2301      	movs	r3, #1
 800d872:	e7f3      	b.n	800d85c <_dtoa_r+0x264>
 800d874:	2300      	movs	r3, #0
 800d876:	9309      	str	r3, [sp, #36]	; 0x24
 800d878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d87a:	445b      	add	r3, fp
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	3301      	adds	r3, #1
 800d880:	2b01      	cmp	r3, #1
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	bfb8      	it	lt
 800d886:	2301      	movlt	r3, #1
 800d888:	69e0      	ldr	r0, [r4, #28]
 800d88a:	2100      	movs	r1, #0
 800d88c:	2204      	movs	r2, #4
 800d88e:	f102 0614 	add.w	r6, r2, #20
 800d892:	429e      	cmp	r6, r3
 800d894:	d93d      	bls.n	800d912 <_dtoa_r+0x31a>
 800d896:	6041      	str	r1, [r0, #4]
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 fceb 	bl	800e274 <_Balloc>
 800d89e:	9000      	str	r0, [sp, #0]
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d139      	bne.n	800d918 <_dtoa_r+0x320>
 800d8a4:	4b16      	ldr	r3, [pc, #88]	; (800d900 <_dtoa_r+0x308>)
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	f240 11af 	movw	r1, #431	; 0x1af
 800d8ac:	e6bd      	b.n	800d62a <_dtoa_r+0x32>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e7e1      	b.n	800d876 <_dtoa_r+0x27e>
 800d8b2:	2501      	movs	r5, #1
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9307      	str	r3, [sp, #28]
 800d8b8:	9509      	str	r5, [sp, #36]	; 0x24
 800d8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2312      	movs	r3, #18
 800d8c6:	e7d1      	b.n	800d86c <_dtoa_r+0x274>
 800d8c8:	636f4361 	.word	0x636f4361
 800d8cc:	3fd287a7 	.word	0x3fd287a7
 800d8d0:	8b60c8b3 	.word	0x8b60c8b3
 800d8d4:	3fc68a28 	.word	0x3fc68a28
 800d8d8:	509f79fb 	.word	0x509f79fb
 800d8dc:	3fd34413 	.word	0x3fd34413
 800d8e0:	08010ec7 	.word	0x08010ec7
 800d8e4:	08010ede 	.word	0x08010ede
 800d8e8:	7ff00000 	.word	0x7ff00000
 800d8ec:	08010ec3 	.word	0x08010ec3
 800d8f0:	08010eba 	.word	0x08010eba
 800d8f4:	08010e92 	.word	0x08010e92
 800d8f8:	3ff80000 	.word	0x3ff80000
 800d8fc:	08010fc8 	.word	0x08010fc8
 800d900:	08010f36 	.word	0x08010f36
 800d904:	2301      	movs	r3, #1
 800d906:	9309      	str	r3, [sp, #36]	; 0x24
 800d908:	e7d7      	b.n	800d8ba <_dtoa_r+0x2c2>
 800d90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	9304      	str	r3, [sp, #16]
 800d910:	e7ba      	b.n	800d888 <_dtoa_r+0x290>
 800d912:	3101      	adds	r1, #1
 800d914:	0052      	lsls	r2, r2, #1
 800d916:	e7ba      	b.n	800d88e <_dtoa_r+0x296>
 800d918:	69e3      	ldr	r3, [r4, #28]
 800d91a:	9a00      	ldr	r2, [sp, #0]
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	2b0e      	cmp	r3, #14
 800d922:	f200 80a8 	bhi.w	800da76 <_dtoa_r+0x47e>
 800d926:	2d00      	cmp	r5, #0
 800d928:	f000 80a5 	beq.w	800da76 <_dtoa_r+0x47e>
 800d92c:	f1bb 0f00 	cmp.w	fp, #0
 800d930:	dd38      	ble.n	800d9a4 <_dtoa_r+0x3ac>
 800d932:	4bc0      	ldr	r3, [pc, #768]	; (800dc34 <_dtoa_r+0x63c>)
 800d934:	f00b 020f 	and.w	r2, fp, #15
 800d938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d93c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d940:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d944:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d948:	d019      	beq.n	800d97e <_dtoa_r+0x386>
 800d94a:	4bbb      	ldr	r3, [pc, #748]	; (800dc38 <_dtoa_r+0x640>)
 800d94c:	ec51 0b18 	vmov	r0, r1, d8
 800d950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d954:	f7f2 ff7a 	bl	800084c <__aeabi_ddiv>
 800d958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d95c:	f008 080f 	and.w	r8, r8, #15
 800d960:	2503      	movs	r5, #3
 800d962:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dc38 <_dtoa_r+0x640>
 800d966:	f1b8 0f00 	cmp.w	r8, #0
 800d96a:	d10a      	bne.n	800d982 <_dtoa_r+0x38a>
 800d96c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d970:	4632      	mov	r2, r6
 800d972:	463b      	mov	r3, r7
 800d974:	f7f2 ff6a 	bl	800084c <__aeabi_ddiv>
 800d978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d97c:	e02b      	b.n	800d9d6 <_dtoa_r+0x3de>
 800d97e:	2502      	movs	r5, #2
 800d980:	e7ef      	b.n	800d962 <_dtoa_r+0x36a>
 800d982:	f018 0f01 	tst.w	r8, #1
 800d986:	d008      	beq.n	800d99a <_dtoa_r+0x3a2>
 800d988:	4630      	mov	r0, r6
 800d98a:	4639      	mov	r1, r7
 800d98c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d990:	f7f2 fe32 	bl	80005f8 <__aeabi_dmul>
 800d994:	3501      	adds	r5, #1
 800d996:	4606      	mov	r6, r0
 800d998:	460f      	mov	r7, r1
 800d99a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d99e:	f109 0908 	add.w	r9, r9, #8
 800d9a2:	e7e0      	b.n	800d966 <_dtoa_r+0x36e>
 800d9a4:	f000 809f 	beq.w	800dae6 <_dtoa_r+0x4ee>
 800d9a8:	f1cb 0600 	rsb	r6, fp, #0
 800d9ac:	4ba1      	ldr	r3, [pc, #644]	; (800dc34 <_dtoa_r+0x63c>)
 800d9ae:	4fa2      	ldr	r7, [pc, #648]	; (800dc38 <_dtoa_r+0x640>)
 800d9b0:	f006 020f 	and.w	r2, r6, #15
 800d9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	ec51 0b18 	vmov	r0, r1, d8
 800d9c0:	f7f2 fe1a 	bl	80005f8 <__aeabi_dmul>
 800d9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9c8:	1136      	asrs	r6, r6, #4
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	2502      	movs	r5, #2
 800d9ce:	2e00      	cmp	r6, #0
 800d9d0:	d17e      	bne.n	800dad0 <_dtoa_r+0x4d8>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1d0      	bne.n	800d978 <_dtoa_r+0x380>
 800d9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 8084 	beq.w	800daea <_dtoa_r+0x4f2>
 800d9e2:	4b96      	ldr	r3, [pc, #600]	; (800dc3c <_dtoa_r+0x644>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f3 f877 	bl	8000adc <__aeabi_dcmplt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d07b      	beq.n	800daea <_dtoa_r+0x4f2>
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d078      	beq.n	800daea <_dtoa_r+0x4f2>
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	dd39      	ble.n	800da72 <_dtoa_r+0x47a>
 800d9fe:	4b90      	ldr	r3, [pc, #576]	; (800dc40 <_dtoa_r+0x648>)
 800da00:	2200      	movs	r2, #0
 800da02:	4640      	mov	r0, r8
 800da04:	4649      	mov	r1, r9
 800da06:	f7f2 fdf7 	bl	80005f8 <__aeabi_dmul>
 800da0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da0e:	9e01      	ldr	r6, [sp, #4]
 800da10:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da14:	3501      	adds	r5, #1
 800da16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da1a:	4628      	mov	r0, r5
 800da1c:	f7f2 fd82 	bl	8000524 <__aeabi_i2d>
 800da20:	4642      	mov	r2, r8
 800da22:	464b      	mov	r3, r9
 800da24:	f7f2 fde8 	bl	80005f8 <__aeabi_dmul>
 800da28:	4b86      	ldr	r3, [pc, #536]	; (800dc44 <_dtoa_r+0x64c>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	f7f2 fc2e 	bl	800028c <__adddf3>
 800da30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da38:	9303      	str	r3, [sp, #12]
 800da3a:	2e00      	cmp	r6, #0
 800da3c:	d158      	bne.n	800daf0 <_dtoa_r+0x4f8>
 800da3e:	4b82      	ldr	r3, [pc, #520]	; (800dc48 <_dtoa_r+0x650>)
 800da40:	2200      	movs	r2, #0
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f2 fc1f 	bl	8000288 <__aeabi_dsub>
 800da4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da4e:	4680      	mov	r8, r0
 800da50:	4689      	mov	r9, r1
 800da52:	f7f3 f861 	bl	8000b18 <__aeabi_dcmpgt>
 800da56:	2800      	cmp	r0, #0
 800da58:	f040 8296 	bne.w	800df88 <_dtoa_r+0x990>
 800da5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da60:	4640      	mov	r0, r8
 800da62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da66:	4649      	mov	r1, r9
 800da68:	f7f3 f838 	bl	8000adc <__aeabi_dcmplt>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f040 8289 	bne.w	800df84 <_dtoa_r+0x98c>
 800da72:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f2c0 814e 	blt.w	800dd1a <_dtoa_r+0x722>
 800da7e:	f1bb 0f0e 	cmp.w	fp, #14
 800da82:	f300 814a 	bgt.w	800dd1a <_dtoa_r+0x722>
 800da86:	4b6b      	ldr	r3, [pc, #428]	; (800dc34 <_dtoa_r+0x63c>)
 800da88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da92:	2b00      	cmp	r3, #0
 800da94:	f280 80dc 	bge.w	800dc50 <_dtoa_r+0x658>
 800da98:	9b04      	ldr	r3, [sp, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f300 80d8 	bgt.w	800dc50 <_dtoa_r+0x658>
 800daa0:	f040 826f 	bne.w	800df82 <_dtoa_r+0x98a>
 800daa4:	4b68      	ldr	r3, [pc, #416]	; (800dc48 <_dtoa_r+0x650>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	4640      	mov	r0, r8
 800daaa:	4649      	mov	r1, r9
 800daac:	f7f2 fda4 	bl	80005f8 <__aeabi_dmul>
 800dab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dab4:	f7f3 f826 	bl	8000b04 <__aeabi_dcmpge>
 800dab8:	9e04      	ldr	r6, [sp, #16]
 800daba:	4637      	mov	r7, r6
 800dabc:	2800      	cmp	r0, #0
 800dabe:	f040 8245 	bne.w	800df4c <_dtoa_r+0x954>
 800dac2:	9d00      	ldr	r5, [sp, #0]
 800dac4:	2331      	movs	r3, #49	; 0x31
 800dac6:	f805 3b01 	strb.w	r3, [r5], #1
 800daca:	f10b 0b01 	add.w	fp, fp, #1
 800dace:	e241      	b.n	800df54 <_dtoa_r+0x95c>
 800dad0:	07f2      	lsls	r2, r6, #31
 800dad2:	d505      	bpl.n	800dae0 <_dtoa_r+0x4e8>
 800dad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad8:	f7f2 fd8e 	bl	80005f8 <__aeabi_dmul>
 800dadc:	3501      	adds	r5, #1
 800dade:	2301      	movs	r3, #1
 800dae0:	1076      	asrs	r6, r6, #1
 800dae2:	3708      	adds	r7, #8
 800dae4:	e773      	b.n	800d9ce <_dtoa_r+0x3d6>
 800dae6:	2502      	movs	r5, #2
 800dae8:	e775      	b.n	800d9d6 <_dtoa_r+0x3de>
 800daea:	9e04      	ldr	r6, [sp, #16]
 800daec:	465f      	mov	r7, fp
 800daee:	e792      	b.n	800da16 <_dtoa_r+0x41e>
 800daf0:	9900      	ldr	r1, [sp, #0]
 800daf2:	4b50      	ldr	r3, [pc, #320]	; (800dc34 <_dtoa_r+0x63c>)
 800daf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daf8:	4431      	add	r1, r6
 800dafa:	9102      	str	r1, [sp, #8]
 800dafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dafe:	eeb0 9a47 	vmov.f32	s18, s14
 800db02:	eef0 9a67 	vmov.f32	s19, s15
 800db06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db0e:	2900      	cmp	r1, #0
 800db10:	d044      	beq.n	800db9c <_dtoa_r+0x5a4>
 800db12:	494e      	ldr	r1, [pc, #312]	; (800dc4c <_dtoa_r+0x654>)
 800db14:	2000      	movs	r0, #0
 800db16:	f7f2 fe99 	bl	800084c <__aeabi_ddiv>
 800db1a:	ec53 2b19 	vmov	r2, r3, d9
 800db1e:	f7f2 fbb3 	bl	8000288 <__aeabi_dsub>
 800db22:	9d00      	ldr	r5, [sp, #0]
 800db24:	ec41 0b19 	vmov	d9, r0, r1
 800db28:	4649      	mov	r1, r9
 800db2a:	4640      	mov	r0, r8
 800db2c:	f7f3 f814 	bl	8000b58 <__aeabi_d2iz>
 800db30:	4606      	mov	r6, r0
 800db32:	f7f2 fcf7 	bl	8000524 <__aeabi_i2d>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	4640      	mov	r0, r8
 800db3c:	4649      	mov	r1, r9
 800db3e:	f7f2 fba3 	bl	8000288 <__aeabi_dsub>
 800db42:	3630      	adds	r6, #48	; 0x30
 800db44:	f805 6b01 	strb.w	r6, [r5], #1
 800db48:	ec53 2b19 	vmov	r2, r3, d9
 800db4c:	4680      	mov	r8, r0
 800db4e:	4689      	mov	r9, r1
 800db50:	f7f2 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800db54:	2800      	cmp	r0, #0
 800db56:	d164      	bne.n	800dc22 <_dtoa_r+0x62a>
 800db58:	4642      	mov	r2, r8
 800db5a:	464b      	mov	r3, r9
 800db5c:	4937      	ldr	r1, [pc, #220]	; (800dc3c <_dtoa_r+0x644>)
 800db5e:	2000      	movs	r0, #0
 800db60:	f7f2 fb92 	bl	8000288 <__aeabi_dsub>
 800db64:	ec53 2b19 	vmov	r2, r3, d9
 800db68:	f7f2 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	f040 80b6 	bne.w	800dcde <_dtoa_r+0x6e6>
 800db72:	9b02      	ldr	r3, [sp, #8]
 800db74:	429d      	cmp	r5, r3
 800db76:	f43f af7c 	beq.w	800da72 <_dtoa_r+0x47a>
 800db7a:	4b31      	ldr	r3, [pc, #196]	; (800dc40 <_dtoa_r+0x648>)
 800db7c:	ec51 0b19 	vmov	r0, r1, d9
 800db80:	2200      	movs	r2, #0
 800db82:	f7f2 fd39 	bl	80005f8 <__aeabi_dmul>
 800db86:	4b2e      	ldr	r3, [pc, #184]	; (800dc40 <_dtoa_r+0x648>)
 800db88:	ec41 0b19 	vmov	d9, r0, r1
 800db8c:	2200      	movs	r2, #0
 800db8e:	4640      	mov	r0, r8
 800db90:	4649      	mov	r1, r9
 800db92:	f7f2 fd31 	bl	80005f8 <__aeabi_dmul>
 800db96:	4680      	mov	r8, r0
 800db98:	4689      	mov	r9, r1
 800db9a:	e7c5      	b.n	800db28 <_dtoa_r+0x530>
 800db9c:	ec51 0b17 	vmov	r0, r1, d7
 800dba0:	f7f2 fd2a 	bl	80005f8 <__aeabi_dmul>
 800dba4:	9b02      	ldr	r3, [sp, #8]
 800dba6:	9d00      	ldr	r5, [sp, #0]
 800dba8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbaa:	ec41 0b19 	vmov	d9, r0, r1
 800dbae:	4649      	mov	r1, r9
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	f7f2 ffd1 	bl	8000b58 <__aeabi_d2iz>
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	f7f2 fcb4 	bl	8000524 <__aeabi_i2d>
 800dbbc:	3630      	adds	r6, #48	; 0x30
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	f7f2 fb5f 	bl	8000288 <__aeabi_dsub>
 800dbca:	f805 6b01 	strb.w	r6, [r5], #1
 800dbce:	9b02      	ldr	r3, [sp, #8]
 800dbd0:	429d      	cmp	r5, r3
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	4689      	mov	r9, r1
 800dbd6:	f04f 0200 	mov.w	r2, #0
 800dbda:	d124      	bne.n	800dc26 <_dtoa_r+0x62e>
 800dbdc:	4b1b      	ldr	r3, [pc, #108]	; (800dc4c <_dtoa_r+0x654>)
 800dbde:	ec51 0b19 	vmov	r0, r1, d9
 800dbe2:	f7f2 fb53 	bl	800028c <__adddf3>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	f7f2 ff93 	bl	8000b18 <__aeabi_dcmpgt>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d173      	bne.n	800dcde <_dtoa_r+0x6e6>
 800dbf6:	ec53 2b19 	vmov	r2, r3, d9
 800dbfa:	4914      	ldr	r1, [pc, #80]	; (800dc4c <_dtoa_r+0x654>)
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	f7f2 fb43 	bl	8000288 <__aeabi_dsub>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	4640      	mov	r0, r8
 800dc08:	4649      	mov	r1, r9
 800dc0a:	f7f2 ff67 	bl	8000adc <__aeabi_dcmplt>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f43f af2f 	beq.w	800da72 <_dtoa_r+0x47a>
 800dc14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc16:	1e6b      	subs	r3, r5, #1
 800dc18:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc1e:	2b30      	cmp	r3, #48	; 0x30
 800dc20:	d0f8      	beq.n	800dc14 <_dtoa_r+0x61c>
 800dc22:	46bb      	mov	fp, r7
 800dc24:	e04a      	b.n	800dcbc <_dtoa_r+0x6c4>
 800dc26:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <_dtoa_r+0x648>)
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	4680      	mov	r8, r0
 800dc2e:	4689      	mov	r9, r1
 800dc30:	e7bd      	b.n	800dbae <_dtoa_r+0x5b6>
 800dc32:	bf00      	nop
 800dc34:	08010fc8 	.word	0x08010fc8
 800dc38:	08010fa0 	.word	0x08010fa0
 800dc3c:	3ff00000 	.word	0x3ff00000
 800dc40:	40240000 	.word	0x40240000
 800dc44:	401c0000 	.word	0x401c0000
 800dc48:	40140000 	.word	0x40140000
 800dc4c:	3fe00000 	.word	0x3fe00000
 800dc50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc54:	9d00      	ldr	r5, [sp, #0]
 800dc56:	4642      	mov	r2, r8
 800dc58:	464b      	mov	r3, r9
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	4639      	mov	r1, r7
 800dc5e:	f7f2 fdf5 	bl	800084c <__aeabi_ddiv>
 800dc62:	f7f2 ff79 	bl	8000b58 <__aeabi_d2iz>
 800dc66:	9001      	str	r0, [sp, #4]
 800dc68:	f7f2 fc5c 	bl	8000524 <__aeabi_i2d>
 800dc6c:	4642      	mov	r2, r8
 800dc6e:	464b      	mov	r3, r9
 800dc70:	f7f2 fcc2 	bl	80005f8 <__aeabi_dmul>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	4630      	mov	r0, r6
 800dc7a:	4639      	mov	r1, r7
 800dc7c:	f7f2 fb04 	bl	8000288 <__aeabi_dsub>
 800dc80:	9e01      	ldr	r6, [sp, #4]
 800dc82:	9f04      	ldr	r7, [sp, #16]
 800dc84:	3630      	adds	r6, #48	; 0x30
 800dc86:	f805 6b01 	strb.w	r6, [r5], #1
 800dc8a:	9e00      	ldr	r6, [sp, #0]
 800dc8c:	1bae      	subs	r6, r5, r6
 800dc8e:	42b7      	cmp	r7, r6
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	d134      	bne.n	800dd00 <_dtoa_r+0x708>
 800dc96:	f7f2 faf9 	bl	800028c <__adddf3>
 800dc9a:	4642      	mov	r2, r8
 800dc9c:	464b      	mov	r3, r9
 800dc9e:	4606      	mov	r6, r0
 800dca0:	460f      	mov	r7, r1
 800dca2:	f7f2 ff39 	bl	8000b18 <__aeabi_dcmpgt>
 800dca6:	b9c8      	cbnz	r0, 800dcdc <_dtoa_r+0x6e4>
 800dca8:	4642      	mov	r2, r8
 800dcaa:	464b      	mov	r3, r9
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	f7f2 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcb4:	b110      	cbz	r0, 800dcbc <_dtoa_r+0x6c4>
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	07db      	lsls	r3, r3, #31
 800dcba:	d40f      	bmi.n	800dcdc <_dtoa_r+0x6e4>
 800dcbc:	4651      	mov	r1, sl
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 fb18 	bl	800e2f4 <_Bfree>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcc8:	702b      	strb	r3, [r5, #0]
 800dcca:	f10b 0301 	add.w	r3, fp, #1
 800dcce:	6013      	str	r3, [r2, #0]
 800dcd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f43f ace2 	beq.w	800d69c <_dtoa_r+0xa4>
 800dcd8:	601d      	str	r5, [r3, #0]
 800dcda:	e4df      	b.n	800d69c <_dtoa_r+0xa4>
 800dcdc:	465f      	mov	r7, fp
 800dcde:	462b      	mov	r3, r5
 800dce0:	461d      	mov	r5, r3
 800dce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dce6:	2a39      	cmp	r2, #57	; 0x39
 800dce8:	d106      	bne.n	800dcf8 <_dtoa_r+0x700>
 800dcea:	9a00      	ldr	r2, [sp, #0]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d1f7      	bne.n	800dce0 <_dtoa_r+0x6e8>
 800dcf0:	9900      	ldr	r1, [sp, #0]
 800dcf2:	2230      	movs	r2, #48	; 0x30
 800dcf4:	3701      	adds	r7, #1
 800dcf6:	700a      	strb	r2, [r1, #0]
 800dcf8:	781a      	ldrb	r2, [r3, #0]
 800dcfa:	3201      	adds	r2, #1
 800dcfc:	701a      	strb	r2, [r3, #0]
 800dcfe:	e790      	b.n	800dc22 <_dtoa_r+0x62a>
 800dd00:	4ba3      	ldr	r3, [pc, #652]	; (800df90 <_dtoa_r+0x998>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	f7f2 fc78 	bl	80005f8 <__aeabi_dmul>
 800dd08:	2200      	movs	r2, #0
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	f7f2 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d09e      	beq.n	800dc56 <_dtoa_r+0x65e>
 800dd18:	e7d0      	b.n	800dcbc <_dtoa_r+0x6c4>
 800dd1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd1c:	2a00      	cmp	r2, #0
 800dd1e:	f000 80ca 	beq.w	800deb6 <_dtoa_r+0x8be>
 800dd22:	9a07      	ldr	r2, [sp, #28]
 800dd24:	2a01      	cmp	r2, #1
 800dd26:	f300 80ad 	bgt.w	800de84 <_dtoa_r+0x88c>
 800dd2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd2c:	2a00      	cmp	r2, #0
 800dd2e:	f000 80a5 	beq.w	800de7c <_dtoa_r+0x884>
 800dd32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd36:	9e08      	ldr	r6, [sp, #32]
 800dd38:	9d05      	ldr	r5, [sp, #20]
 800dd3a:	9a05      	ldr	r2, [sp, #20]
 800dd3c:	441a      	add	r2, r3
 800dd3e:	9205      	str	r2, [sp, #20]
 800dd40:	9a06      	ldr	r2, [sp, #24]
 800dd42:	2101      	movs	r1, #1
 800dd44:	441a      	add	r2, r3
 800dd46:	4620      	mov	r0, r4
 800dd48:	9206      	str	r2, [sp, #24]
 800dd4a:	f000 fbd3 	bl	800e4f4 <__i2b>
 800dd4e:	4607      	mov	r7, r0
 800dd50:	b165      	cbz	r5, 800dd6c <_dtoa_r+0x774>
 800dd52:	9b06      	ldr	r3, [sp, #24]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dd09      	ble.n	800dd6c <_dtoa_r+0x774>
 800dd58:	42ab      	cmp	r3, r5
 800dd5a:	9a05      	ldr	r2, [sp, #20]
 800dd5c:	bfa8      	it	ge
 800dd5e:	462b      	movge	r3, r5
 800dd60:	1ad2      	subs	r2, r2, r3
 800dd62:	9205      	str	r2, [sp, #20]
 800dd64:	9a06      	ldr	r2, [sp, #24]
 800dd66:	1aed      	subs	r5, r5, r3
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	9306      	str	r3, [sp, #24]
 800dd6c:	9b08      	ldr	r3, [sp, #32]
 800dd6e:	b1f3      	cbz	r3, 800ddae <_dtoa_r+0x7b6>
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f000 80a3 	beq.w	800debe <_dtoa_r+0x8c6>
 800dd78:	2e00      	cmp	r6, #0
 800dd7a:	dd10      	ble.n	800dd9e <_dtoa_r+0x7a6>
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	4632      	mov	r2, r6
 800dd80:	4620      	mov	r0, r4
 800dd82:	f000 fc77 	bl	800e674 <__pow5mult>
 800dd86:	4652      	mov	r2, sl
 800dd88:	4601      	mov	r1, r0
 800dd8a:	4607      	mov	r7, r0
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f000 fbc7 	bl	800e520 <__multiply>
 800dd92:	4651      	mov	r1, sl
 800dd94:	4680      	mov	r8, r0
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 faac 	bl	800e2f4 <_Bfree>
 800dd9c:	46c2      	mov	sl, r8
 800dd9e:	9b08      	ldr	r3, [sp, #32]
 800dda0:	1b9a      	subs	r2, r3, r6
 800dda2:	d004      	beq.n	800ddae <_dtoa_r+0x7b6>
 800dda4:	4651      	mov	r1, sl
 800dda6:	4620      	mov	r0, r4
 800dda8:	f000 fc64 	bl	800e674 <__pow5mult>
 800ddac:	4682      	mov	sl, r0
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 fb9f 	bl	800e4f4 <__i2b>
 800ddb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	4606      	mov	r6, r0
 800ddbc:	f340 8081 	ble.w	800dec2 <_dtoa_r+0x8ca>
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f000 fc55 	bl	800e674 <__pow5mult>
 800ddca:	9b07      	ldr	r3, [sp, #28]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	4606      	mov	r6, r0
 800ddd0:	dd7a      	ble.n	800dec8 <_dtoa_r+0x8d0>
 800ddd2:	f04f 0800 	mov.w	r8, #0
 800ddd6:	6933      	ldr	r3, [r6, #16]
 800ddd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dddc:	6918      	ldr	r0, [r3, #16]
 800ddde:	f000 fb3b 	bl	800e458 <__hi0bits>
 800dde2:	f1c0 0020 	rsb	r0, r0, #32
 800dde6:	9b06      	ldr	r3, [sp, #24]
 800dde8:	4418      	add	r0, r3
 800ddea:	f010 001f 	ands.w	r0, r0, #31
 800ddee:	f000 8094 	beq.w	800df1a <_dtoa_r+0x922>
 800ddf2:	f1c0 0320 	rsb	r3, r0, #32
 800ddf6:	2b04      	cmp	r3, #4
 800ddf8:	f340 8085 	ble.w	800df06 <_dtoa_r+0x90e>
 800ddfc:	9b05      	ldr	r3, [sp, #20]
 800ddfe:	f1c0 001c 	rsb	r0, r0, #28
 800de02:	4403      	add	r3, r0
 800de04:	9305      	str	r3, [sp, #20]
 800de06:	9b06      	ldr	r3, [sp, #24]
 800de08:	4403      	add	r3, r0
 800de0a:	4405      	add	r5, r0
 800de0c:	9306      	str	r3, [sp, #24]
 800de0e:	9b05      	ldr	r3, [sp, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	dd05      	ble.n	800de20 <_dtoa_r+0x828>
 800de14:	4651      	mov	r1, sl
 800de16:	461a      	mov	r2, r3
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 fc85 	bl	800e728 <__lshift>
 800de1e:	4682      	mov	sl, r0
 800de20:	9b06      	ldr	r3, [sp, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	dd05      	ble.n	800de32 <_dtoa_r+0x83a>
 800de26:	4631      	mov	r1, r6
 800de28:	461a      	mov	r2, r3
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 fc7c 	bl	800e728 <__lshift>
 800de30:	4606      	mov	r6, r0
 800de32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de34:	2b00      	cmp	r3, #0
 800de36:	d072      	beq.n	800df1e <_dtoa_r+0x926>
 800de38:	4631      	mov	r1, r6
 800de3a:	4650      	mov	r0, sl
 800de3c:	f000 fce0 	bl	800e800 <__mcmp>
 800de40:	2800      	cmp	r0, #0
 800de42:	da6c      	bge.n	800df1e <_dtoa_r+0x926>
 800de44:	2300      	movs	r3, #0
 800de46:	4651      	mov	r1, sl
 800de48:	220a      	movs	r2, #10
 800de4a:	4620      	mov	r0, r4
 800de4c:	f000 fa74 	bl	800e338 <__multadd>
 800de50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de56:	4682      	mov	sl, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 81b0 	beq.w	800e1be <_dtoa_r+0xbc6>
 800de5e:	2300      	movs	r3, #0
 800de60:	4639      	mov	r1, r7
 800de62:	220a      	movs	r2, #10
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fa67 	bl	800e338 <__multadd>
 800de6a:	9b01      	ldr	r3, [sp, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	4607      	mov	r7, r0
 800de70:	f300 8096 	bgt.w	800dfa0 <_dtoa_r+0x9a8>
 800de74:	9b07      	ldr	r3, [sp, #28]
 800de76:	2b02      	cmp	r3, #2
 800de78:	dc59      	bgt.n	800df2e <_dtoa_r+0x936>
 800de7a:	e091      	b.n	800dfa0 <_dtoa_r+0x9a8>
 800de7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de82:	e758      	b.n	800dd36 <_dtoa_r+0x73e>
 800de84:	9b04      	ldr	r3, [sp, #16]
 800de86:	1e5e      	subs	r6, r3, #1
 800de88:	9b08      	ldr	r3, [sp, #32]
 800de8a:	42b3      	cmp	r3, r6
 800de8c:	bfbf      	itttt	lt
 800de8e:	9b08      	ldrlt	r3, [sp, #32]
 800de90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800de92:	9608      	strlt	r6, [sp, #32]
 800de94:	1af3      	sublt	r3, r6, r3
 800de96:	bfb4      	ite	lt
 800de98:	18d2      	addlt	r2, r2, r3
 800de9a:	1b9e      	subge	r6, r3, r6
 800de9c:	9b04      	ldr	r3, [sp, #16]
 800de9e:	bfbc      	itt	lt
 800dea0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dea2:	2600      	movlt	r6, #0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bfb7      	itett	lt
 800dea8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800deac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800deb0:	1a9d      	sublt	r5, r3, r2
 800deb2:	2300      	movlt	r3, #0
 800deb4:	e741      	b.n	800dd3a <_dtoa_r+0x742>
 800deb6:	9e08      	ldr	r6, [sp, #32]
 800deb8:	9d05      	ldr	r5, [sp, #20]
 800deba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800debc:	e748      	b.n	800dd50 <_dtoa_r+0x758>
 800debe:	9a08      	ldr	r2, [sp, #32]
 800dec0:	e770      	b.n	800dda4 <_dtoa_r+0x7ac>
 800dec2:	9b07      	ldr	r3, [sp, #28]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	dc19      	bgt.n	800defc <_dtoa_r+0x904>
 800dec8:	9b02      	ldr	r3, [sp, #8]
 800deca:	b9bb      	cbnz	r3, 800defc <_dtoa_r+0x904>
 800decc:	9b03      	ldr	r3, [sp, #12]
 800dece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ded2:	b99b      	cbnz	r3, 800defc <_dtoa_r+0x904>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800deda:	0d1b      	lsrs	r3, r3, #20
 800dedc:	051b      	lsls	r3, r3, #20
 800dede:	b183      	cbz	r3, 800df02 <_dtoa_r+0x90a>
 800dee0:	9b05      	ldr	r3, [sp, #20]
 800dee2:	3301      	adds	r3, #1
 800dee4:	9305      	str	r3, [sp, #20]
 800dee6:	9b06      	ldr	r3, [sp, #24]
 800dee8:	3301      	adds	r3, #1
 800deea:	9306      	str	r3, [sp, #24]
 800deec:	f04f 0801 	mov.w	r8, #1
 800def0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800def2:	2b00      	cmp	r3, #0
 800def4:	f47f af6f 	bne.w	800ddd6 <_dtoa_r+0x7de>
 800def8:	2001      	movs	r0, #1
 800defa:	e774      	b.n	800dde6 <_dtoa_r+0x7ee>
 800defc:	f04f 0800 	mov.w	r8, #0
 800df00:	e7f6      	b.n	800def0 <_dtoa_r+0x8f8>
 800df02:	4698      	mov	r8, r3
 800df04:	e7f4      	b.n	800def0 <_dtoa_r+0x8f8>
 800df06:	d082      	beq.n	800de0e <_dtoa_r+0x816>
 800df08:	9a05      	ldr	r2, [sp, #20]
 800df0a:	331c      	adds	r3, #28
 800df0c:	441a      	add	r2, r3
 800df0e:	9205      	str	r2, [sp, #20]
 800df10:	9a06      	ldr	r2, [sp, #24]
 800df12:	441a      	add	r2, r3
 800df14:	441d      	add	r5, r3
 800df16:	9206      	str	r2, [sp, #24]
 800df18:	e779      	b.n	800de0e <_dtoa_r+0x816>
 800df1a:	4603      	mov	r3, r0
 800df1c:	e7f4      	b.n	800df08 <_dtoa_r+0x910>
 800df1e:	9b04      	ldr	r3, [sp, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	dc37      	bgt.n	800df94 <_dtoa_r+0x99c>
 800df24:	9b07      	ldr	r3, [sp, #28]
 800df26:	2b02      	cmp	r3, #2
 800df28:	dd34      	ble.n	800df94 <_dtoa_r+0x99c>
 800df2a:	9b04      	ldr	r3, [sp, #16]
 800df2c:	9301      	str	r3, [sp, #4]
 800df2e:	9b01      	ldr	r3, [sp, #4]
 800df30:	b963      	cbnz	r3, 800df4c <_dtoa_r+0x954>
 800df32:	4631      	mov	r1, r6
 800df34:	2205      	movs	r2, #5
 800df36:	4620      	mov	r0, r4
 800df38:	f000 f9fe 	bl	800e338 <__multadd>
 800df3c:	4601      	mov	r1, r0
 800df3e:	4606      	mov	r6, r0
 800df40:	4650      	mov	r0, sl
 800df42:	f000 fc5d 	bl	800e800 <__mcmp>
 800df46:	2800      	cmp	r0, #0
 800df48:	f73f adbb 	bgt.w	800dac2 <_dtoa_r+0x4ca>
 800df4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df4e:	9d00      	ldr	r5, [sp, #0]
 800df50:	ea6f 0b03 	mvn.w	fp, r3
 800df54:	f04f 0800 	mov.w	r8, #0
 800df58:	4631      	mov	r1, r6
 800df5a:	4620      	mov	r0, r4
 800df5c:	f000 f9ca 	bl	800e2f4 <_Bfree>
 800df60:	2f00      	cmp	r7, #0
 800df62:	f43f aeab 	beq.w	800dcbc <_dtoa_r+0x6c4>
 800df66:	f1b8 0f00 	cmp.w	r8, #0
 800df6a:	d005      	beq.n	800df78 <_dtoa_r+0x980>
 800df6c:	45b8      	cmp	r8, r7
 800df6e:	d003      	beq.n	800df78 <_dtoa_r+0x980>
 800df70:	4641      	mov	r1, r8
 800df72:	4620      	mov	r0, r4
 800df74:	f000 f9be 	bl	800e2f4 <_Bfree>
 800df78:	4639      	mov	r1, r7
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 f9ba 	bl	800e2f4 <_Bfree>
 800df80:	e69c      	b.n	800dcbc <_dtoa_r+0x6c4>
 800df82:	2600      	movs	r6, #0
 800df84:	4637      	mov	r7, r6
 800df86:	e7e1      	b.n	800df4c <_dtoa_r+0x954>
 800df88:	46bb      	mov	fp, r7
 800df8a:	4637      	mov	r7, r6
 800df8c:	e599      	b.n	800dac2 <_dtoa_r+0x4ca>
 800df8e:	bf00      	nop
 800df90:	40240000 	.word	0x40240000
 800df94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df96:	2b00      	cmp	r3, #0
 800df98:	f000 80c8 	beq.w	800e12c <_dtoa_r+0xb34>
 800df9c:	9b04      	ldr	r3, [sp, #16]
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	2d00      	cmp	r5, #0
 800dfa2:	dd05      	ble.n	800dfb0 <_dtoa_r+0x9b8>
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	462a      	mov	r2, r5
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 fbbd 	bl	800e728 <__lshift>
 800dfae:	4607      	mov	r7, r0
 800dfb0:	f1b8 0f00 	cmp.w	r8, #0
 800dfb4:	d05b      	beq.n	800e06e <_dtoa_r+0xa76>
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 f95b 	bl	800e274 <_Balloc>
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	b928      	cbnz	r0, 800dfce <_dtoa_r+0x9d6>
 800dfc2:	4b83      	ldr	r3, [pc, #524]	; (800e1d0 <_dtoa_r+0xbd8>)
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dfca:	f7ff bb2e 	b.w	800d62a <_dtoa_r+0x32>
 800dfce:	693a      	ldr	r2, [r7, #16]
 800dfd0:	3202      	adds	r2, #2
 800dfd2:	0092      	lsls	r2, r2, #2
 800dfd4:	f107 010c 	add.w	r1, r7, #12
 800dfd8:	300c      	adds	r0, #12
 800dfda:	f7ff fa6e 	bl	800d4ba <memcpy>
 800dfde:	2201      	movs	r2, #1
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fba0 	bl	800e728 <__lshift>
 800dfe8:	9b00      	ldr	r3, [sp, #0]
 800dfea:	3301      	adds	r3, #1
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dff2:	4413      	add	r3, r2
 800dff4:	9308      	str	r3, [sp, #32]
 800dff6:	9b02      	ldr	r3, [sp, #8]
 800dff8:	f003 0301 	and.w	r3, r3, #1
 800dffc:	46b8      	mov	r8, r7
 800dffe:	9306      	str	r3, [sp, #24]
 800e000:	4607      	mov	r7, r0
 800e002:	9b04      	ldr	r3, [sp, #16]
 800e004:	4631      	mov	r1, r6
 800e006:	3b01      	subs	r3, #1
 800e008:	4650      	mov	r0, sl
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	f7ff fa6a 	bl	800d4e4 <quorem>
 800e010:	4641      	mov	r1, r8
 800e012:	9002      	str	r0, [sp, #8]
 800e014:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e018:	4650      	mov	r0, sl
 800e01a:	f000 fbf1 	bl	800e800 <__mcmp>
 800e01e:	463a      	mov	r2, r7
 800e020:	9005      	str	r0, [sp, #20]
 800e022:	4631      	mov	r1, r6
 800e024:	4620      	mov	r0, r4
 800e026:	f000 fc07 	bl	800e838 <__mdiff>
 800e02a:	68c2      	ldr	r2, [r0, #12]
 800e02c:	4605      	mov	r5, r0
 800e02e:	bb02      	cbnz	r2, 800e072 <_dtoa_r+0xa7a>
 800e030:	4601      	mov	r1, r0
 800e032:	4650      	mov	r0, sl
 800e034:	f000 fbe4 	bl	800e800 <__mcmp>
 800e038:	4602      	mov	r2, r0
 800e03a:	4629      	mov	r1, r5
 800e03c:	4620      	mov	r0, r4
 800e03e:	9209      	str	r2, [sp, #36]	; 0x24
 800e040:	f000 f958 	bl	800e2f4 <_Bfree>
 800e044:	9b07      	ldr	r3, [sp, #28]
 800e046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e048:	9d04      	ldr	r5, [sp, #16]
 800e04a:	ea43 0102 	orr.w	r1, r3, r2
 800e04e:	9b06      	ldr	r3, [sp, #24]
 800e050:	4319      	orrs	r1, r3
 800e052:	d110      	bne.n	800e076 <_dtoa_r+0xa7e>
 800e054:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e058:	d029      	beq.n	800e0ae <_dtoa_r+0xab6>
 800e05a:	9b05      	ldr	r3, [sp, #20]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	dd02      	ble.n	800e066 <_dtoa_r+0xa6e>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	f883 9000 	strb.w	r9, [r3]
 800e06c:	e774      	b.n	800df58 <_dtoa_r+0x960>
 800e06e:	4638      	mov	r0, r7
 800e070:	e7ba      	b.n	800dfe8 <_dtoa_r+0x9f0>
 800e072:	2201      	movs	r2, #1
 800e074:	e7e1      	b.n	800e03a <_dtoa_r+0xa42>
 800e076:	9b05      	ldr	r3, [sp, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	db04      	blt.n	800e086 <_dtoa_r+0xa8e>
 800e07c:	9907      	ldr	r1, [sp, #28]
 800e07e:	430b      	orrs	r3, r1
 800e080:	9906      	ldr	r1, [sp, #24]
 800e082:	430b      	orrs	r3, r1
 800e084:	d120      	bne.n	800e0c8 <_dtoa_r+0xad0>
 800e086:	2a00      	cmp	r2, #0
 800e088:	dded      	ble.n	800e066 <_dtoa_r+0xa6e>
 800e08a:	4651      	mov	r1, sl
 800e08c:	2201      	movs	r2, #1
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 fb4a 	bl	800e728 <__lshift>
 800e094:	4631      	mov	r1, r6
 800e096:	4682      	mov	sl, r0
 800e098:	f000 fbb2 	bl	800e800 <__mcmp>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	dc03      	bgt.n	800e0a8 <_dtoa_r+0xab0>
 800e0a0:	d1e1      	bne.n	800e066 <_dtoa_r+0xa6e>
 800e0a2:	f019 0f01 	tst.w	r9, #1
 800e0a6:	d0de      	beq.n	800e066 <_dtoa_r+0xa6e>
 800e0a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0ac:	d1d8      	bne.n	800e060 <_dtoa_r+0xa68>
 800e0ae:	9a01      	ldr	r2, [sp, #4]
 800e0b0:	2339      	movs	r3, #57	; 0x39
 800e0b2:	7013      	strb	r3, [r2, #0]
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	461d      	mov	r5, r3
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0be:	2a39      	cmp	r2, #57	; 0x39
 800e0c0:	d06c      	beq.n	800e19c <_dtoa_r+0xba4>
 800e0c2:	3201      	adds	r2, #1
 800e0c4:	701a      	strb	r2, [r3, #0]
 800e0c6:	e747      	b.n	800df58 <_dtoa_r+0x960>
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	dd07      	ble.n	800e0dc <_dtoa_r+0xae4>
 800e0cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0d0:	d0ed      	beq.n	800e0ae <_dtoa_r+0xab6>
 800e0d2:	9a01      	ldr	r2, [sp, #4]
 800e0d4:	f109 0301 	add.w	r3, r9, #1
 800e0d8:	7013      	strb	r3, [r2, #0]
 800e0da:	e73d      	b.n	800df58 <_dtoa_r+0x960>
 800e0dc:	9b04      	ldr	r3, [sp, #16]
 800e0de:	9a08      	ldr	r2, [sp, #32]
 800e0e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d043      	beq.n	800e170 <_dtoa_r+0xb78>
 800e0e8:	4651      	mov	r1, sl
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	220a      	movs	r2, #10
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 f922 	bl	800e338 <__multadd>
 800e0f4:	45b8      	cmp	r8, r7
 800e0f6:	4682      	mov	sl, r0
 800e0f8:	f04f 0300 	mov.w	r3, #0
 800e0fc:	f04f 020a 	mov.w	r2, #10
 800e100:	4641      	mov	r1, r8
 800e102:	4620      	mov	r0, r4
 800e104:	d107      	bne.n	800e116 <_dtoa_r+0xb1e>
 800e106:	f000 f917 	bl	800e338 <__multadd>
 800e10a:	4680      	mov	r8, r0
 800e10c:	4607      	mov	r7, r0
 800e10e:	9b04      	ldr	r3, [sp, #16]
 800e110:	3301      	adds	r3, #1
 800e112:	9304      	str	r3, [sp, #16]
 800e114:	e775      	b.n	800e002 <_dtoa_r+0xa0a>
 800e116:	f000 f90f 	bl	800e338 <__multadd>
 800e11a:	4639      	mov	r1, r7
 800e11c:	4680      	mov	r8, r0
 800e11e:	2300      	movs	r3, #0
 800e120:	220a      	movs	r2, #10
 800e122:	4620      	mov	r0, r4
 800e124:	f000 f908 	bl	800e338 <__multadd>
 800e128:	4607      	mov	r7, r0
 800e12a:	e7f0      	b.n	800e10e <_dtoa_r+0xb16>
 800e12c:	9b04      	ldr	r3, [sp, #16]
 800e12e:	9301      	str	r3, [sp, #4]
 800e130:	9d00      	ldr	r5, [sp, #0]
 800e132:	4631      	mov	r1, r6
 800e134:	4650      	mov	r0, sl
 800e136:	f7ff f9d5 	bl	800d4e4 <quorem>
 800e13a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e13e:	9b00      	ldr	r3, [sp, #0]
 800e140:	f805 9b01 	strb.w	r9, [r5], #1
 800e144:	1aea      	subs	r2, r5, r3
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	4293      	cmp	r3, r2
 800e14a:	dd07      	ble.n	800e15c <_dtoa_r+0xb64>
 800e14c:	4651      	mov	r1, sl
 800e14e:	2300      	movs	r3, #0
 800e150:	220a      	movs	r2, #10
 800e152:	4620      	mov	r0, r4
 800e154:	f000 f8f0 	bl	800e338 <__multadd>
 800e158:	4682      	mov	sl, r0
 800e15a:	e7ea      	b.n	800e132 <_dtoa_r+0xb3a>
 800e15c:	9b01      	ldr	r3, [sp, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	bfc8      	it	gt
 800e162:	461d      	movgt	r5, r3
 800e164:	9b00      	ldr	r3, [sp, #0]
 800e166:	bfd8      	it	le
 800e168:	2501      	movle	r5, #1
 800e16a:	441d      	add	r5, r3
 800e16c:	f04f 0800 	mov.w	r8, #0
 800e170:	4651      	mov	r1, sl
 800e172:	2201      	movs	r2, #1
 800e174:	4620      	mov	r0, r4
 800e176:	f000 fad7 	bl	800e728 <__lshift>
 800e17a:	4631      	mov	r1, r6
 800e17c:	4682      	mov	sl, r0
 800e17e:	f000 fb3f 	bl	800e800 <__mcmp>
 800e182:	2800      	cmp	r0, #0
 800e184:	dc96      	bgt.n	800e0b4 <_dtoa_r+0xabc>
 800e186:	d102      	bne.n	800e18e <_dtoa_r+0xb96>
 800e188:	f019 0f01 	tst.w	r9, #1
 800e18c:	d192      	bne.n	800e0b4 <_dtoa_r+0xabc>
 800e18e:	462b      	mov	r3, r5
 800e190:	461d      	mov	r5, r3
 800e192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e196:	2a30      	cmp	r2, #48	; 0x30
 800e198:	d0fa      	beq.n	800e190 <_dtoa_r+0xb98>
 800e19a:	e6dd      	b.n	800df58 <_dtoa_r+0x960>
 800e19c:	9a00      	ldr	r2, [sp, #0]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d189      	bne.n	800e0b6 <_dtoa_r+0xabe>
 800e1a2:	f10b 0b01 	add.w	fp, fp, #1
 800e1a6:	2331      	movs	r3, #49	; 0x31
 800e1a8:	e796      	b.n	800e0d8 <_dtoa_r+0xae0>
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <_dtoa_r+0xbdc>)
 800e1ac:	f7ff ba99 	b.w	800d6e2 <_dtoa_r+0xea>
 800e1b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f47f aa6d 	bne.w	800d692 <_dtoa_r+0x9a>
 800e1b8:	4b07      	ldr	r3, [pc, #28]	; (800e1d8 <_dtoa_r+0xbe0>)
 800e1ba:	f7ff ba92 	b.w	800d6e2 <_dtoa_r+0xea>
 800e1be:	9b01      	ldr	r3, [sp, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	dcb5      	bgt.n	800e130 <_dtoa_r+0xb38>
 800e1c4:	9b07      	ldr	r3, [sp, #28]
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	f73f aeb1 	bgt.w	800df2e <_dtoa_r+0x936>
 800e1cc:	e7b0      	b.n	800e130 <_dtoa_r+0xb38>
 800e1ce:	bf00      	nop
 800e1d0:	08010f36 	.word	0x08010f36
 800e1d4:	08010e91 	.word	0x08010e91
 800e1d8:	08010eba 	.word	0x08010eba

0800e1dc <_free_r>:
 800e1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1de:	2900      	cmp	r1, #0
 800e1e0:	d044      	beq.n	800e26c <_free_r+0x90>
 800e1e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1e6:	9001      	str	r0, [sp, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e1ee:	bfb8      	it	lt
 800e1f0:	18e4      	addlt	r4, r4, r3
 800e1f2:	f7fe f827 	bl	800c244 <__malloc_lock>
 800e1f6:	4a1e      	ldr	r2, [pc, #120]	; (800e270 <_free_r+0x94>)
 800e1f8:	9801      	ldr	r0, [sp, #4]
 800e1fa:	6813      	ldr	r3, [r2, #0]
 800e1fc:	b933      	cbnz	r3, 800e20c <_free_r+0x30>
 800e1fe:	6063      	str	r3, [r4, #4]
 800e200:	6014      	str	r4, [r2, #0]
 800e202:	b003      	add	sp, #12
 800e204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e208:	f7fe b822 	b.w	800c250 <__malloc_unlock>
 800e20c:	42a3      	cmp	r3, r4
 800e20e:	d908      	bls.n	800e222 <_free_r+0x46>
 800e210:	6825      	ldr	r5, [r4, #0]
 800e212:	1961      	adds	r1, r4, r5
 800e214:	428b      	cmp	r3, r1
 800e216:	bf01      	itttt	eq
 800e218:	6819      	ldreq	r1, [r3, #0]
 800e21a:	685b      	ldreq	r3, [r3, #4]
 800e21c:	1949      	addeq	r1, r1, r5
 800e21e:	6021      	streq	r1, [r4, #0]
 800e220:	e7ed      	b.n	800e1fe <_free_r+0x22>
 800e222:	461a      	mov	r2, r3
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	b10b      	cbz	r3, 800e22c <_free_r+0x50>
 800e228:	42a3      	cmp	r3, r4
 800e22a:	d9fa      	bls.n	800e222 <_free_r+0x46>
 800e22c:	6811      	ldr	r1, [r2, #0]
 800e22e:	1855      	adds	r5, r2, r1
 800e230:	42a5      	cmp	r5, r4
 800e232:	d10b      	bne.n	800e24c <_free_r+0x70>
 800e234:	6824      	ldr	r4, [r4, #0]
 800e236:	4421      	add	r1, r4
 800e238:	1854      	adds	r4, r2, r1
 800e23a:	42a3      	cmp	r3, r4
 800e23c:	6011      	str	r1, [r2, #0]
 800e23e:	d1e0      	bne.n	800e202 <_free_r+0x26>
 800e240:	681c      	ldr	r4, [r3, #0]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	6053      	str	r3, [r2, #4]
 800e246:	440c      	add	r4, r1
 800e248:	6014      	str	r4, [r2, #0]
 800e24a:	e7da      	b.n	800e202 <_free_r+0x26>
 800e24c:	d902      	bls.n	800e254 <_free_r+0x78>
 800e24e:	230c      	movs	r3, #12
 800e250:	6003      	str	r3, [r0, #0]
 800e252:	e7d6      	b.n	800e202 <_free_r+0x26>
 800e254:	6825      	ldr	r5, [r4, #0]
 800e256:	1961      	adds	r1, r4, r5
 800e258:	428b      	cmp	r3, r1
 800e25a:	bf04      	itt	eq
 800e25c:	6819      	ldreq	r1, [r3, #0]
 800e25e:	685b      	ldreq	r3, [r3, #4]
 800e260:	6063      	str	r3, [r4, #4]
 800e262:	bf04      	itt	eq
 800e264:	1949      	addeq	r1, r1, r5
 800e266:	6021      	streq	r1, [r4, #0]
 800e268:	6054      	str	r4, [r2, #4]
 800e26a:	e7ca      	b.n	800e202 <_free_r+0x26>
 800e26c:	b003      	add	sp, #12
 800e26e:	bd30      	pop	{r4, r5, pc}
 800e270:	20001f90 	.word	0x20001f90

0800e274 <_Balloc>:
 800e274:	b570      	push	{r4, r5, r6, lr}
 800e276:	69c6      	ldr	r6, [r0, #28]
 800e278:	4604      	mov	r4, r0
 800e27a:	460d      	mov	r5, r1
 800e27c:	b976      	cbnz	r6, 800e29c <_Balloc+0x28>
 800e27e:	2010      	movs	r0, #16
 800e280:	f7fd ff38 	bl	800c0f4 <malloc>
 800e284:	4602      	mov	r2, r0
 800e286:	61e0      	str	r0, [r4, #28]
 800e288:	b920      	cbnz	r0, 800e294 <_Balloc+0x20>
 800e28a:	4b18      	ldr	r3, [pc, #96]	; (800e2ec <_Balloc+0x78>)
 800e28c:	4818      	ldr	r0, [pc, #96]	; (800e2f0 <_Balloc+0x7c>)
 800e28e:	216b      	movs	r1, #107	; 0x6b
 800e290:	f001 fcea 	bl	800fc68 <__assert_func>
 800e294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e298:	6006      	str	r6, [r0, #0]
 800e29a:	60c6      	str	r6, [r0, #12]
 800e29c:	69e6      	ldr	r6, [r4, #28]
 800e29e:	68f3      	ldr	r3, [r6, #12]
 800e2a0:	b183      	cbz	r3, 800e2c4 <_Balloc+0x50>
 800e2a2:	69e3      	ldr	r3, [r4, #28]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2aa:	b9b8      	cbnz	r0, 800e2dc <_Balloc+0x68>
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	fa01 f605 	lsl.w	r6, r1, r5
 800e2b2:	1d72      	adds	r2, r6, #5
 800e2b4:	0092      	lsls	r2, r2, #2
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f001 fcf4 	bl	800fca4 <_calloc_r>
 800e2bc:	b160      	cbz	r0, 800e2d8 <_Balloc+0x64>
 800e2be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2c2:	e00e      	b.n	800e2e2 <_Balloc+0x6e>
 800e2c4:	2221      	movs	r2, #33	; 0x21
 800e2c6:	2104      	movs	r1, #4
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f001 fceb 	bl	800fca4 <_calloc_r>
 800e2ce:	69e3      	ldr	r3, [r4, #28]
 800e2d0:	60f0      	str	r0, [r6, #12]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1e4      	bne.n	800e2a2 <_Balloc+0x2e>
 800e2d8:	2000      	movs	r0, #0
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	6802      	ldr	r2, [r0, #0]
 800e2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2e8:	e7f7      	b.n	800e2da <_Balloc+0x66>
 800e2ea:	bf00      	nop
 800e2ec:	08010ec7 	.word	0x08010ec7
 800e2f0:	08010f47 	.word	0x08010f47

0800e2f4 <_Bfree>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	69c6      	ldr	r6, [r0, #28]
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	b976      	cbnz	r6, 800e31c <_Bfree+0x28>
 800e2fe:	2010      	movs	r0, #16
 800e300:	f7fd fef8 	bl	800c0f4 <malloc>
 800e304:	4602      	mov	r2, r0
 800e306:	61e8      	str	r0, [r5, #28]
 800e308:	b920      	cbnz	r0, 800e314 <_Bfree+0x20>
 800e30a:	4b09      	ldr	r3, [pc, #36]	; (800e330 <_Bfree+0x3c>)
 800e30c:	4809      	ldr	r0, [pc, #36]	; (800e334 <_Bfree+0x40>)
 800e30e:	218f      	movs	r1, #143	; 0x8f
 800e310:	f001 fcaa 	bl	800fc68 <__assert_func>
 800e314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e318:	6006      	str	r6, [r0, #0]
 800e31a:	60c6      	str	r6, [r0, #12]
 800e31c:	b13c      	cbz	r4, 800e32e <_Bfree+0x3a>
 800e31e:	69eb      	ldr	r3, [r5, #28]
 800e320:	6862      	ldr	r2, [r4, #4]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e328:	6021      	str	r1, [r4, #0]
 800e32a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e32e:	bd70      	pop	{r4, r5, r6, pc}
 800e330:	08010ec7 	.word	0x08010ec7
 800e334:	08010f47 	.word	0x08010f47

0800e338 <__multadd>:
 800e338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33c:	690d      	ldr	r5, [r1, #16]
 800e33e:	4607      	mov	r7, r0
 800e340:	460c      	mov	r4, r1
 800e342:	461e      	mov	r6, r3
 800e344:	f101 0c14 	add.w	ip, r1, #20
 800e348:	2000      	movs	r0, #0
 800e34a:	f8dc 3000 	ldr.w	r3, [ip]
 800e34e:	b299      	uxth	r1, r3
 800e350:	fb02 6101 	mla	r1, r2, r1, r6
 800e354:	0c1e      	lsrs	r6, r3, #16
 800e356:	0c0b      	lsrs	r3, r1, #16
 800e358:	fb02 3306 	mla	r3, r2, r6, r3
 800e35c:	b289      	uxth	r1, r1
 800e35e:	3001      	adds	r0, #1
 800e360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e364:	4285      	cmp	r5, r0
 800e366:	f84c 1b04 	str.w	r1, [ip], #4
 800e36a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e36e:	dcec      	bgt.n	800e34a <__multadd+0x12>
 800e370:	b30e      	cbz	r6, 800e3b6 <__multadd+0x7e>
 800e372:	68a3      	ldr	r3, [r4, #8]
 800e374:	42ab      	cmp	r3, r5
 800e376:	dc19      	bgt.n	800e3ac <__multadd+0x74>
 800e378:	6861      	ldr	r1, [r4, #4]
 800e37a:	4638      	mov	r0, r7
 800e37c:	3101      	adds	r1, #1
 800e37e:	f7ff ff79 	bl	800e274 <_Balloc>
 800e382:	4680      	mov	r8, r0
 800e384:	b928      	cbnz	r0, 800e392 <__multadd+0x5a>
 800e386:	4602      	mov	r2, r0
 800e388:	4b0c      	ldr	r3, [pc, #48]	; (800e3bc <__multadd+0x84>)
 800e38a:	480d      	ldr	r0, [pc, #52]	; (800e3c0 <__multadd+0x88>)
 800e38c:	21ba      	movs	r1, #186	; 0xba
 800e38e:	f001 fc6b 	bl	800fc68 <__assert_func>
 800e392:	6922      	ldr	r2, [r4, #16]
 800e394:	3202      	adds	r2, #2
 800e396:	f104 010c 	add.w	r1, r4, #12
 800e39a:	0092      	lsls	r2, r2, #2
 800e39c:	300c      	adds	r0, #12
 800e39e:	f7ff f88c 	bl	800d4ba <memcpy>
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	f7ff ffa5 	bl	800e2f4 <_Bfree>
 800e3aa:	4644      	mov	r4, r8
 800e3ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3b0:	3501      	adds	r5, #1
 800e3b2:	615e      	str	r6, [r3, #20]
 800e3b4:	6125      	str	r5, [r4, #16]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3bc:	08010f36 	.word	0x08010f36
 800e3c0:	08010f47 	.word	0x08010f47

0800e3c4 <__s2b>:
 800e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	460c      	mov	r4, r1
 800e3ca:	4615      	mov	r5, r2
 800e3cc:	461f      	mov	r7, r3
 800e3ce:	2209      	movs	r2, #9
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3d8:	2100      	movs	r1, #0
 800e3da:	2201      	movs	r2, #1
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	db09      	blt.n	800e3f4 <__s2b+0x30>
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7ff ff47 	bl	800e274 <_Balloc>
 800e3e6:	b940      	cbnz	r0, 800e3fa <__s2b+0x36>
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	4b19      	ldr	r3, [pc, #100]	; (800e450 <__s2b+0x8c>)
 800e3ec:	4819      	ldr	r0, [pc, #100]	; (800e454 <__s2b+0x90>)
 800e3ee:	21d3      	movs	r1, #211	; 0xd3
 800e3f0:	f001 fc3a 	bl	800fc68 <__assert_func>
 800e3f4:	0052      	lsls	r2, r2, #1
 800e3f6:	3101      	adds	r1, #1
 800e3f8:	e7f0      	b.n	800e3dc <__s2b+0x18>
 800e3fa:	9b08      	ldr	r3, [sp, #32]
 800e3fc:	6143      	str	r3, [r0, #20]
 800e3fe:	2d09      	cmp	r5, #9
 800e400:	f04f 0301 	mov.w	r3, #1
 800e404:	6103      	str	r3, [r0, #16]
 800e406:	dd16      	ble.n	800e436 <__s2b+0x72>
 800e408:	f104 0909 	add.w	r9, r4, #9
 800e40c:	46c8      	mov	r8, r9
 800e40e:	442c      	add	r4, r5
 800e410:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e414:	4601      	mov	r1, r0
 800e416:	3b30      	subs	r3, #48	; 0x30
 800e418:	220a      	movs	r2, #10
 800e41a:	4630      	mov	r0, r6
 800e41c:	f7ff ff8c 	bl	800e338 <__multadd>
 800e420:	45a0      	cmp	r8, r4
 800e422:	d1f5      	bne.n	800e410 <__s2b+0x4c>
 800e424:	f1a5 0408 	sub.w	r4, r5, #8
 800e428:	444c      	add	r4, r9
 800e42a:	1b2d      	subs	r5, r5, r4
 800e42c:	1963      	adds	r3, r4, r5
 800e42e:	42bb      	cmp	r3, r7
 800e430:	db04      	blt.n	800e43c <__s2b+0x78>
 800e432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e436:	340a      	adds	r4, #10
 800e438:	2509      	movs	r5, #9
 800e43a:	e7f6      	b.n	800e42a <__s2b+0x66>
 800e43c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e440:	4601      	mov	r1, r0
 800e442:	3b30      	subs	r3, #48	; 0x30
 800e444:	220a      	movs	r2, #10
 800e446:	4630      	mov	r0, r6
 800e448:	f7ff ff76 	bl	800e338 <__multadd>
 800e44c:	e7ee      	b.n	800e42c <__s2b+0x68>
 800e44e:	bf00      	nop
 800e450:	08010f36 	.word	0x08010f36
 800e454:	08010f47 	.word	0x08010f47

0800e458 <__hi0bits>:
 800e458:	0c03      	lsrs	r3, r0, #16
 800e45a:	041b      	lsls	r3, r3, #16
 800e45c:	b9d3      	cbnz	r3, 800e494 <__hi0bits+0x3c>
 800e45e:	0400      	lsls	r0, r0, #16
 800e460:	2310      	movs	r3, #16
 800e462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e466:	bf04      	itt	eq
 800e468:	0200      	lsleq	r0, r0, #8
 800e46a:	3308      	addeq	r3, #8
 800e46c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e470:	bf04      	itt	eq
 800e472:	0100      	lsleq	r0, r0, #4
 800e474:	3304      	addeq	r3, #4
 800e476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e47a:	bf04      	itt	eq
 800e47c:	0080      	lsleq	r0, r0, #2
 800e47e:	3302      	addeq	r3, #2
 800e480:	2800      	cmp	r0, #0
 800e482:	db05      	blt.n	800e490 <__hi0bits+0x38>
 800e484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e488:	f103 0301 	add.w	r3, r3, #1
 800e48c:	bf08      	it	eq
 800e48e:	2320      	moveq	r3, #32
 800e490:	4618      	mov	r0, r3
 800e492:	4770      	bx	lr
 800e494:	2300      	movs	r3, #0
 800e496:	e7e4      	b.n	800e462 <__hi0bits+0xa>

0800e498 <__lo0bits>:
 800e498:	6803      	ldr	r3, [r0, #0]
 800e49a:	f013 0207 	ands.w	r2, r3, #7
 800e49e:	d00c      	beq.n	800e4ba <__lo0bits+0x22>
 800e4a0:	07d9      	lsls	r1, r3, #31
 800e4a2:	d422      	bmi.n	800e4ea <__lo0bits+0x52>
 800e4a4:	079a      	lsls	r2, r3, #30
 800e4a6:	bf49      	itett	mi
 800e4a8:	085b      	lsrmi	r3, r3, #1
 800e4aa:	089b      	lsrpl	r3, r3, #2
 800e4ac:	6003      	strmi	r3, [r0, #0]
 800e4ae:	2201      	movmi	r2, #1
 800e4b0:	bf5c      	itt	pl
 800e4b2:	6003      	strpl	r3, [r0, #0]
 800e4b4:	2202      	movpl	r2, #2
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	4770      	bx	lr
 800e4ba:	b299      	uxth	r1, r3
 800e4bc:	b909      	cbnz	r1, 800e4c2 <__lo0bits+0x2a>
 800e4be:	0c1b      	lsrs	r3, r3, #16
 800e4c0:	2210      	movs	r2, #16
 800e4c2:	b2d9      	uxtb	r1, r3
 800e4c4:	b909      	cbnz	r1, 800e4ca <__lo0bits+0x32>
 800e4c6:	3208      	adds	r2, #8
 800e4c8:	0a1b      	lsrs	r3, r3, #8
 800e4ca:	0719      	lsls	r1, r3, #28
 800e4cc:	bf04      	itt	eq
 800e4ce:	091b      	lsreq	r3, r3, #4
 800e4d0:	3204      	addeq	r2, #4
 800e4d2:	0799      	lsls	r1, r3, #30
 800e4d4:	bf04      	itt	eq
 800e4d6:	089b      	lsreq	r3, r3, #2
 800e4d8:	3202      	addeq	r2, #2
 800e4da:	07d9      	lsls	r1, r3, #31
 800e4dc:	d403      	bmi.n	800e4e6 <__lo0bits+0x4e>
 800e4de:	085b      	lsrs	r3, r3, #1
 800e4e0:	f102 0201 	add.w	r2, r2, #1
 800e4e4:	d003      	beq.n	800e4ee <__lo0bits+0x56>
 800e4e6:	6003      	str	r3, [r0, #0]
 800e4e8:	e7e5      	b.n	800e4b6 <__lo0bits+0x1e>
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	e7e3      	b.n	800e4b6 <__lo0bits+0x1e>
 800e4ee:	2220      	movs	r2, #32
 800e4f0:	e7e1      	b.n	800e4b6 <__lo0bits+0x1e>
	...

0800e4f4 <__i2b>:
 800e4f4:	b510      	push	{r4, lr}
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	2101      	movs	r1, #1
 800e4fa:	f7ff febb 	bl	800e274 <_Balloc>
 800e4fe:	4602      	mov	r2, r0
 800e500:	b928      	cbnz	r0, 800e50e <__i2b+0x1a>
 800e502:	4b05      	ldr	r3, [pc, #20]	; (800e518 <__i2b+0x24>)
 800e504:	4805      	ldr	r0, [pc, #20]	; (800e51c <__i2b+0x28>)
 800e506:	f240 1145 	movw	r1, #325	; 0x145
 800e50a:	f001 fbad 	bl	800fc68 <__assert_func>
 800e50e:	2301      	movs	r3, #1
 800e510:	6144      	str	r4, [r0, #20]
 800e512:	6103      	str	r3, [r0, #16]
 800e514:	bd10      	pop	{r4, pc}
 800e516:	bf00      	nop
 800e518:	08010f36 	.word	0x08010f36
 800e51c:	08010f47 	.word	0x08010f47

0800e520 <__multiply>:
 800e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	4691      	mov	r9, r2
 800e526:	690a      	ldr	r2, [r1, #16]
 800e528:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	bfb8      	it	lt
 800e530:	460b      	movlt	r3, r1
 800e532:	460c      	mov	r4, r1
 800e534:	bfbc      	itt	lt
 800e536:	464c      	movlt	r4, r9
 800e538:	4699      	movlt	r9, r3
 800e53a:	6927      	ldr	r7, [r4, #16]
 800e53c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	6861      	ldr	r1, [r4, #4]
 800e544:	eb07 060a 	add.w	r6, r7, sl
 800e548:	42b3      	cmp	r3, r6
 800e54a:	b085      	sub	sp, #20
 800e54c:	bfb8      	it	lt
 800e54e:	3101      	addlt	r1, #1
 800e550:	f7ff fe90 	bl	800e274 <_Balloc>
 800e554:	b930      	cbnz	r0, 800e564 <__multiply+0x44>
 800e556:	4602      	mov	r2, r0
 800e558:	4b44      	ldr	r3, [pc, #272]	; (800e66c <__multiply+0x14c>)
 800e55a:	4845      	ldr	r0, [pc, #276]	; (800e670 <__multiply+0x150>)
 800e55c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e560:	f001 fb82 	bl	800fc68 <__assert_func>
 800e564:	f100 0514 	add.w	r5, r0, #20
 800e568:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e56c:	462b      	mov	r3, r5
 800e56e:	2200      	movs	r2, #0
 800e570:	4543      	cmp	r3, r8
 800e572:	d321      	bcc.n	800e5b8 <__multiply+0x98>
 800e574:	f104 0314 	add.w	r3, r4, #20
 800e578:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e57c:	f109 0314 	add.w	r3, r9, #20
 800e580:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e584:	9202      	str	r2, [sp, #8]
 800e586:	1b3a      	subs	r2, r7, r4
 800e588:	3a15      	subs	r2, #21
 800e58a:	f022 0203 	bic.w	r2, r2, #3
 800e58e:	3204      	adds	r2, #4
 800e590:	f104 0115 	add.w	r1, r4, #21
 800e594:	428f      	cmp	r7, r1
 800e596:	bf38      	it	cc
 800e598:	2204      	movcc	r2, #4
 800e59a:	9201      	str	r2, [sp, #4]
 800e59c:	9a02      	ldr	r2, [sp, #8]
 800e59e:	9303      	str	r3, [sp, #12]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d80c      	bhi.n	800e5be <__multiply+0x9e>
 800e5a4:	2e00      	cmp	r6, #0
 800e5a6:	dd03      	ble.n	800e5b0 <__multiply+0x90>
 800e5a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d05b      	beq.n	800e668 <__multiply+0x148>
 800e5b0:	6106      	str	r6, [r0, #16]
 800e5b2:	b005      	add	sp, #20
 800e5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b8:	f843 2b04 	str.w	r2, [r3], #4
 800e5bc:	e7d8      	b.n	800e570 <__multiply+0x50>
 800e5be:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5c2:	f1ba 0f00 	cmp.w	sl, #0
 800e5c6:	d024      	beq.n	800e612 <__multiply+0xf2>
 800e5c8:	f104 0e14 	add.w	lr, r4, #20
 800e5cc:	46a9      	mov	r9, r5
 800e5ce:	f04f 0c00 	mov.w	ip, #0
 800e5d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5d6:	f8d9 1000 	ldr.w	r1, [r9]
 800e5da:	fa1f fb82 	uxth.w	fp, r2
 800e5de:	b289      	uxth	r1, r1
 800e5e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e5ec:	4461      	add	r1, ip
 800e5ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5fa:	b289      	uxth	r1, r1
 800e5fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e600:	4577      	cmp	r7, lr
 800e602:	f849 1b04 	str.w	r1, [r9], #4
 800e606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e60a:	d8e2      	bhi.n	800e5d2 <__multiply+0xb2>
 800e60c:	9a01      	ldr	r2, [sp, #4]
 800e60e:	f845 c002 	str.w	ip, [r5, r2]
 800e612:	9a03      	ldr	r2, [sp, #12]
 800e614:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e618:	3304      	adds	r3, #4
 800e61a:	f1b9 0f00 	cmp.w	r9, #0
 800e61e:	d021      	beq.n	800e664 <__multiply+0x144>
 800e620:	6829      	ldr	r1, [r5, #0]
 800e622:	f104 0c14 	add.w	ip, r4, #20
 800e626:	46ae      	mov	lr, r5
 800e628:	f04f 0a00 	mov.w	sl, #0
 800e62c:	f8bc b000 	ldrh.w	fp, [ip]
 800e630:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e634:	fb09 220b 	mla	r2, r9, fp, r2
 800e638:	4452      	add	r2, sl
 800e63a:	b289      	uxth	r1, r1
 800e63c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e640:	f84e 1b04 	str.w	r1, [lr], #4
 800e644:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e648:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e64c:	f8be 1000 	ldrh.w	r1, [lr]
 800e650:	fb09 110a 	mla	r1, r9, sl, r1
 800e654:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e658:	4567      	cmp	r7, ip
 800e65a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e65e:	d8e5      	bhi.n	800e62c <__multiply+0x10c>
 800e660:	9a01      	ldr	r2, [sp, #4]
 800e662:	50a9      	str	r1, [r5, r2]
 800e664:	3504      	adds	r5, #4
 800e666:	e799      	b.n	800e59c <__multiply+0x7c>
 800e668:	3e01      	subs	r6, #1
 800e66a:	e79b      	b.n	800e5a4 <__multiply+0x84>
 800e66c:	08010f36 	.word	0x08010f36
 800e670:	08010f47 	.word	0x08010f47

0800e674 <__pow5mult>:
 800e674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e678:	4615      	mov	r5, r2
 800e67a:	f012 0203 	ands.w	r2, r2, #3
 800e67e:	4606      	mov	r6, r0
 800e680:	460f      	mov	r7, r1
 800e682:	d007      	beq.n	800e694 <__pow5mult+0x20>
 800e684:	4c25      	ldr	r4, [pc, #148]	; (800e71c <__pow5mult+0xa8>)
 800e686:	3a01      	subs	r2, #1
 800e688:	2300      	movs	r3, #0
 800e68a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e68e:	f7ff fe53 	bl	800e338 <__multadd>
 800e692:	4607      	mov	r7, r0
 800e694:	10ad      	asrs	r5, r5, #2
 800e696:	d03d      	beq.n	800e714 <__pow5mult+0xa0>
 800e698:	69f4      	ldr	r4, [r6, #28]
 800e69a:	b97c      	cbnz	r4, 800e6bc <__pow5mult+0x48>
 800e69c:	2010      	movs	r0, #16
 800e69e:	f7fd fd29 	bl	800c0f4 <malloc>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	61f0      	str	r0, [r6, #28]
 800e6a6:	b928      	cbnz	r0, 800e6b4 <__pow5mult+0x40>
 800e6a8:	4b1d      	ldr	r3, [pc, #116]	; (800e720 <__pow5mult+0xac>)
 800e6aa:	481e      	ldr	r0, [pc, #120]	; (800e724 <__pow5mult+0xb0>)
 800e6ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e6b0:	f001 fada 	bl	800fc68 <__assert_func>
 800e6b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6b8:	6004      	str	r4, [r0, #0]
 800e6ba:	60c4      	str	r4, [r0, #12]
 800e6bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e6c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6c4:	b94c      	cbnz	r4, 800e6da <__pow5mult+0x66>
 800e6c6:	f240 2171 	movw	r1, #625	; 0x271
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7ff ff12 	bl	800e4f4 <__i2b>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	6003      	str	r3, [r0, #0]
 800e6da:	f04f 0900 	mov.w	r9, #0
 800e6de:	07eb      	lsls	r3, r5, #31
 800e6e0:	d50a      	bpl.n	800e6f8 <__pow5mult+0x84>
 800e6e2:	4639      	mov	r1, r7
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7ff ff1a 	bl	800e520 <__multiply>
 800e6ec:	4639      	mov	r1, r7
 800e6ee:	4680      	mov	r8, r0
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7ff fdff 	bl	800e2f4 <_Bfree>
 800e6f6:	4647      	mov	r7, r8
 800e6f8:	106d      	asrs	r5, r5, #1
 800e6fa:	d00b      	beq.n	800e714 <__pow5mult+0xa0>
 800e6fc:	6820      	ldr	r0, [r4, #0]
 800e6fe:	b938      	cbnz	r0, 800e710 <__pow5mult+0x9c>
 800e700:	4622      	mov	r2, r4
 800e702:	4621      	mov	r1, r4
 800e704:	4630      	mov	r0, r6
 800e706:	f7ff ff0b 	bl	800e520 <__multiply>
 800e70a:	6020      	str	r0, [r4, #0]
 800e70c:	f8c0 9000 	str.w	r9, [r0]
 800e710:	4604      	mov	r4, r0
 800e712:	e7e4      	b.n	800e6de <__pow5mult+0x6a>
 800e714:	4638      	mov	r0, r7
 800e716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e71a:	bf00      	nop
 800e71c:	08011090 	.word	0x08011090
 800e720:	08010ec7 	.word	0x08010ec7
 800e724:	08010f47 	.word	0x08010f47

0800e728 <__lshift>:
 800e728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e72c:	460c      	mov	r4, r1
 800e72e:	6849      	ldr	r1, [r1, #4]
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e736:	68a3      	ldr	r3, [r4, #8]
 800e738:	4607      	mov	r7, r0
 800e73a:	4691      	mov	r9, r2
 800e73c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e740:	f108 0601 	add.w	r6, r8, #1
 800e744:	42b3      	cmp	r3, r6
 800e746:	db0b      	blt.n	800e760 <__lshift+0x38>
 800e748:	4638      	mov	r0, r7
 800e74a:	f7ff fd93 	bl	800e274 <_Balloc>
 800e74e:	4605      	mov	r5, r0
 800e750:	b948      	cbnz	r0, 800e766 <__lshift+0x3e>
 800e752:	4602      	mov	r2, r0
 800e754:	4b28      	ldr	r3, [pc, #160]	; (800e7f8 <__lshift+0xd0>)
 800e756:	4829      	ldr	r0, [pc, #164]	; (800e7fc <__lshift+0xd4>)
 800e758:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e75c:	f001 fa84 	bl	800fc68 <__assert_func>
 800e760:	3101      	adds	r1, #1
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	e7ee      	b.n	800e744 <__lshift+0x1c>
 800e766:	2300      	movs	r3, #0
 800e768:	f100 0114 	add.w	r1, r0, #20
 800e76c:	f100 0210 	add.w	r2, r0, #16
 800e770:	4618      	mov	r0, r3
 800e772:	4553      	cmp	r3, sl
 800e774:	db33      	blt.n	800e7de <__lshift+0xb6>
 800e776:	6920      	ldr	r0, [r4, #16]
 800e778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e77c:	f104 0314 	add.w	r3, r4, #20
 800e780:	f019 091f 	ands.w	r9, r9, #31
 800e784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e788:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e78c:	d02b      	beq.n	800e7e6 <__lshift+0xbe>
 800e78e:	f1c9 0e20 	rsb	lr, r9, #32
 800e792:	468a      	mov	sl, r1
 800e794:	2200      	movs	r2, #0
 800e796:	6818      	ldr	r0, [r3, #0]
 800e798:	fa00 f009 	lsl.w	r0, r0, r9
 800e79c:	4310      	orrs	r0, r2
 800e79e:	f84a 0b04 	str.w	r0, [sl], #4
 800e7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a6:	459c      	cmp	ip, r3
 800e7a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e7ac:	d8f3      	bhi.n	800e796 <__lshift+0x6e>
 800e7ae:	ebac 0304 	sub.w	r3, ip, r4
 800e7b2:	3b15      	subs	r3, #21
 800e7b4:	f023 0303 	bic.w	r3, r3, #3
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	f104 0015 	add.w	r0, r4, #21
 800e7be:	4584      	cmp	ip, r0
 800e7c0:	bf38      	it	cc
 800e7c2:	2304      	movcc	r3, #4
 800e7c4:	50ca      	str	r2, [r1, r3]
 800e7c6:	b10a      	cbz	r2, 800e7cc <__lshift+0xa4>
 800e7c8:	f108 0602 	add.w	r6, r8, #2
 800e7cc:	3e01      	subs	r6, #1
 800e7ce:	4638      	mov	r0, r7
 800e7d0:	612e      	str	r6, [r5, #16]
 800e7d2:	4621      	mov	r1, r4
 800e7d4:	f7ff fd8e 	bl	800e2f4 <_Bfree>
 800e7d8:	4628      	mov	r0, r5
 800e7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	e7c5      	b.n	800e772 <__lshift+0x4a>
 800e7e6:	3904      	subs	r1, #4
 800e7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7f0:	459c      	cmp	ip, r3
 800e7f2:	d8f9      	bhi.n	800e7e8 <__lshift+0xc0>
 800e7f4:	e7ea      	b.n	800e7cc <__lshift+0xa4>
 800e7f6:	bf00      	nop
 800e7f8:	08010f36 	.word	0x08010f36
 800e7fc:	08010f47 	.word	0x08010f47

0800e800 <__mcmp>:
 800e800:	b530      	push	{r4, r5, lr}
 800e802:	6902      	ldr	r2, [r0, #16]
 800e804:	690c      	ldr	r4, [r1, #16]
 800e806:	1b12      	subs	r2, r2, r4
 800e808:	d10e      	bne.n	800e828 <__mcmp+0x28>
 800e80a:	f100 0314 	add.w	r3, r0, #20
 800e80e:	3114      	adds	r1, #20
 800e810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e81c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e820:	42a5      	cmp	r5, r4
 800e822:	d003      	beq.n	800e82c <__mcmp+0x2c>
 800e824:	d305      	bcc.n	800e832 <__mcmp+0x32>
 800e826:	2201      	movs	r2, #1
 800e828:	4610      	mov	r0, r2
 800e82a:	bd30      	pop	{r4, r5, pc}
 800e82c:	4283      	cmp	r3, r0
 800e82e:	d3f3      	bcc.n	800e818 <__mcmp+0x18>
 800e830:	e7fa      	b.n	800e828 <__mcmp+0x28>
 800e832:	f04f 32ff 	mov.w	r2, #4294967295
 800e836:	e7f7      	b.n	800e828 <__mcmp+0x28>

0800e838 <__mdiff>:
 800e838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83c:	460c      	mov	r4, r1
 800e83e:	4606      	mov	r6, r0
 800e840:	4611      	mov	r1, r2
 800e842:	4620      	mov	r0, r4
 800e844:	4690      	mov	r8, r2
 800e846:	f7ff ffdb 	bl	800e800 <__mcmp>
 800e84a:	1e05      	subs	r5, r0, #0
 800e84c:	d110      	bne.n	800e870 <__mdiff+0x38>
 800e84e:	4629      	mov	r1, r5
 800e850:	4630      	mov	r0, r6
 800e852:	f7ff fd0f 	bl	800e274 <_Balloc>
 800e856:	b930      	cbnz	r0, 800e866 <__mdiff+0x2e>
 800e858:	4b3a      	ldr	r3, [pc, #232]	; (800e944 <__mdiff+0x10c>)
 800e85a:	4602      	mov	r2, r0
 800e85c:	f240 2137 	movw	r1, #567	; 0x237
 800e860:	4839      	ldr	r0, [pc, #228]	; (800e948 <__mdiff+0x110>)
 800e862:	f001 fa01 	bl	800fc68 <__assert_func>
 800e866:	2301      	movs	r3, #1
 800e868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e86c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e870:	bfa4      	itt	ge
 800e872:	4643      	movge	r3, r8
 800e874:	46a0      	movge	r8, r4
 800e876:	4630      	mov	r0, r6
 800e878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e87c:	bfa6      	itte	ge
 800e87e:	461c      	movge	r4, r3
 800e880:	2500      	movge	r5, #0
 800e882:	2501      	movlt	r5, #1
 800e884:	f7ff fcf6 	bl	800e274 <_Balloc>
 800e888:	b920      	cbnz	r0, 800e894 <__mdiff+0x5c>
 800e88a:	4b2e      	ldr	r3, [pc, #184]	; (800e944 <__mdiff+0x10c>)
 800e88c:	4602      	mov	r2, r0
 800e88e:	f240 2145 	movw	r1, #581	; 0x245
 800e892:	e7e5      	b.n	800e860 <__mdiff+0x28>
 800e894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e898:	6926      	ldr	r6, [r4, #16]
 800e89a:	60c5      	str	r5, [r0, #12]
 800e89c:	f104 0914 	add.w	r9, r4, #20
 800e8a0:	f108 0514 	add.w	r5, r8, #20
 800e8a4:	f100 0e14 	add.w	lr, r0, #20
 800e8a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e8ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8b0:	f108 0210 	add.w	r2, r8, #16
 800e8b4:	46f2      	mov	sl, lr
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8c0:	fa11 f88b 	uxtah	r8, r1, fp
 800e8c4:	b299      	uxth	r1, r3
 800e8c6:	0c1b      	lsrs	r3, r3, #16
 800e8c8:	eba8 0801 	sub.w	r8, r8, r1
 800e8cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8d4:	fa1f f888 	uxth.w	r8, r8
 800e8d8:	1419      	asrs	r1, r3, #16
 800e8da:	454e      	cmp	r6, r9
 800e8dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8e0:	f84a 3b04 	str.w	r3, [sl], #4
 800e8e4:	d8e8      	bhi.n	800e8b8 <__mdiff+0x80>
 800e8e6:	1b33      	subs	r3, r6, r4
 800e8e8:	3b15      	subs	r3, #21
 800e8ea:	f023 0303 	bic.w	r3, r3, #3
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	3415      	adds	r4, #21
 800e8f2:	42a6      	cmp	r6, r4
 800e8f4:	bf38      	it	cc
 800e8f6:	2304      	movcc	r3, #4
 800e8f8:	441d      	add	r5, r3
 800e8fa:	4473      	add	r3, lr
 800e8fc:	469e      	mov	lr, r3
 800e8fe:	462e      	mov	r6, r5
 800e900:	4566      	cmp	r6, ip
 800e902:	d30e      	bcc.n	800e922 <__mdiff+0xea>
 800e904:	f10c 0203 	add.w	r2, ip, #3
 800e908:	1b52      	subs	r2, r2, r5
 800e90a:	f022 0203 	bic.w	r2, r2, #3
 800e90e:	3d03      	subs	r5, #3
 800e910:	45ac      	cmp	ip, r5
 800e912:	bf38      	it	cc
 800e914:	2200      	movcc	r2, #0
 800e916:	4413      	add	r3, r2
 800e918:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e91c:	b17a      	cbz	r2, 800e93e <__mdiff+0x106>
 800e91e:	6107      	str	r7, [r0, #16]
 800e920:	e7a4      	b.n	800e86c <__mdiff+0x34>
 800e922:	f856 8b04 	ldr.w	r8, [r6], #4
 800e926:	fa11 f288 	uxtah	r2, r1, r8
 800e92a:	1414      	asrs	r4, r2, #16
 800e92c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e930:	b292      	uxth	r2, r2
 800e932:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e936:	f84e 2b04 	str.w	r2, [lr], #4
 800e93a:	1421      	asrs	r1, r4, #16
 800e93c:	e7e0      	b.n	800e900 <__mdiff+0xc8>
 800e93e:	3f01      	subs	r7, #1
 800e940:	e7ea      	b.n	800e918 <__mdiff+0xe0>
 800e942:	bf00      	nop
 800e944:	08010f36 	.word	0x08010f36
 800e948:	08010f47 	.word	0x08010f47

0800e94c <__ulp>:
 800e94c:	b082      	sub	sp, #8
 800e94e:	ed8d 0b00 	vstr	d0, [sp]
 800e952:	9a01      	ldr	r2, [sp, #4]
 800e954:	4b0f      	ldr	r3, [pc, #60]	; (800e994 <__ulp+0x48>)
 800e956:	4013      	ands	r3, r2
 800e958:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dc08      	bgt.n	800e972 <__ulp+0x26>
 800e960:	425b      	negs	r3, r3
 800e962:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e966:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e96a:	da04      	bge.n	800e976 <__ulp+0x2a>
 800e96c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e970:	4113      	asrs	r3, r2
 800e972:	2200      	movs	r2, #0
 800e974:	e008      	b.n	800e988 <__ulp+0x3c>
 800e976:	f1a2 0314 	sub.w	r3, r2, #20
 800e97a:	2b1e      	cmp	r3, #30
 800e97c:	bfda      	itte	le
 800e97e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e982:	40da      	lsrle	r2, r3
 800e984:	2201      	movgt	r2, #1
 800e986:	2300      	movs	r3, #0
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	ec41 0b10 	vmov	d0, r0, r1
 800e990:	b002      	add	sp, #8
 800e992:	4770      	bx	lr
 800e994:	7ff00000 	.word	0x7ff00000

0800e998 <__b2d>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	6906      	ldr	r6, [r0, #16]
 800e99e:	f100 0814 	add.w	r8, r0, #20
 800e9a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e9a6:	1f37      	subs	r7, r6, #4
 800e9a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e9ac:	4610      	mov	r0, r2
 800e9ae:	f7ff fd53 	bl	800e458 <__hi0bits>
 800e9b2:	f1c0 0320 	rsb	r3, r0, #32
 800e9b6:	280a      	cmp	r0, #10
 800e9b8:	600b      	str	r3, [r1, #0]
 800e9ba:	491b      	ldr	r1, [pc, #108]	; (800ea28 <__b2d+0x90>)
 800e9bc:	dc15      	bgt.n	800e9ea <__b2d+0x52>
 800e9be:	f1c0 0c0b 	rsb	ip, r0, #11
 800e9c2:	fa22 f30c 	lsr.w	r3, r2, ip
 800e9c6:	45b8      	cmp	r8, r7
 800e9c8:	ea43 0501 	orr.w	r5, r3, r1
 800e9cc:	bf34      	ite	cc
 800e9ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9d2:	2300      	movcs	r3, #0
 800e9d4:	3015      	adds	r0, #21
 800e9d6:	fa02 f000 	lsl.w	r0, r2, r0
 800e9da:	fa23 f30c 	lsr.w	r3, r3, ip
 800e9de:	4303      	orrs	r3, r0
 800e9e0:	461c      	mov	r4, r3
 800e9e2:	ec45 4b10 	vmov	d0, r4, r5
 800e9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ea:	45b8      	cmp	r8, r7
 800e9ec:	bf3a      	itte	cc
 800e9ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9f2:	f1a6 0708 	subcc.w	r7, r6, #8
 800e9f6:	2300      	movcs	r3, #0
 800e9f8:	380b      	subs	r0, #11
 800e9fa:	d012      	beq.n	800ea22 <__b2d+0x8a>
 800e9fc:	f1c0 0120 	rsb	r1, r0, #32
 800ea00:	fa23 f401 	lsr.w	r4, r3, r1
 800ea04:	4082      	lsls	r2, r0
 800ea06:	4322      	orrs	r2, r4
 800ea08:	4547      	cmp	r7, r8
 800ea0a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ea0e:	bf8c      	ite	hi
 800ea10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ea14:	2200      	movls	r2, #0
 800ea16:	4083      	lsls	r3, r0
 800ea18:	40ca      	lsrs	r2, r1
 800ea1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	e7de      	b.n	800e9e0 <__b2d+0x48>
 800ea22:	ea42 0501 	orr.w	r5, r2, r1
 800ea26:	e7db      	b.n	800e9e0 <__b2d+0x48>
 800ea28:	3ff00000 	.word	0x3ff00000

0800ea2c <__d2b>:
 800ea2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea30:	460f      	mov	r7, r1
 800ea32:	2101      	movs	r1, #1
 800ea34:	ec59 8b10 	vmov	r8, r9, d0
 800ea38:	4616      	mov	r6, r2
 800ea3a:	f7ff fc1b 	bl	800e274 <_Balloc>
 800ea3e:	4604      	mov	r4, r0
 800ea40:	b930      	cbnz	r0, 800ea50 <__d2b+0x24>
 800ea42:	4602      	mov	r2, r0
 800ea44:	4b24      	ldr	r3, [pc, #144]	; (800ead8 <__d2b+0xac>)
 800ea46:	4825      	ldr	r0, [pc, #148]	; (800eadc <__d2b+0xb0>)
 800ea48:	f240 310f 	movw	r1, #783	; 0x30f
 800ea4c:	f001 f90c 	bl	800fc68 <__assert_func>
 800ea50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea58:	bb2d      	cbnz	r5, 800eaa6 <__d2b+0x7a>
 800ea5a:	9301      	str	r3, [sp, #4]
 800ea5c:	f1b8 0300 	subs.w	r3, r8, #0
 800ea60:	d026      	beq.n	800eab0 <__d2b+0x84>
 800ea62:	4668      	mov	r0, sp
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	f7ff fd17 	bl	800e498 <__lo0bits>
 800ea6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea6e:	b1e8      	cbz	r0, 800eaac <__d2b+0x80>
 800ea70:	f1c0 0320 	rsb	r3, r0, #32
 800ea74:	fa02 f303 	lsl.w	r3, r2, r3
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	40c2      	lsrs	r2, r0
 800ea7c:	6163      	str	r3, [r4, #20]
 800ea7e:	9201      	str	r2, [sp, #4]
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	61a3      	str	r3, [r4, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bf14      	ite	ne
 800ea88:	2202      	movne	r2, #2
 800ea8a:	2201      	moveq	r2, #1
 800ea8c:	6122      	str	r2, [r4, #16]
 800ea8e:	b1bd      	cbz	r5, 800eac0 <__d2b+0x94>
 800ea90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea94:	4405      	add	r5, r0
 800ea96:	603d      	str	r5, [r7, #0]
 800ea98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea9c:	6030      	str	r0, [r6, #0]
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	b003      	add	sp, #12
 800eaa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaaa:	e7d6      	b.n	800ea5a <__d2b+0x2e>
 800eaac:	6161      	str	r1, [r4, #20]
 800eaae:	e7e7      	b.n	800ea80 <__d2b+0x54>
 800eab0:	a801      	add	r0, sp, #4
 800eab2:	f7ff fcf1 	bl	800e498 <__lo0bits>
 800eab6:	9b01      	ldr	r3, [sp, #4]
 800eab8:	6163      	str	r3, [r4, #20]
 800eaba:	3020      	adds	r0, #32
 800eabc:	2201      	movs	r2, #1
 800eabe:	e7e5      	b.n	800ea8c <__d2b+0x60>
 800eac0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eac4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eac8:	6038      	str	r0, [r7, #0]
 800eaca:	6918      	ldr	r0, [r3, #16]
 800eacc:	f7ff fcc4 	bl	800e458 <__hi0bits>
 800ead0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ead4:	e7e2      	b.n	800ea9c <__d2b+0x70>
 800ead6:	bf00      	nop
 800ead8:	08010f36 	.word	0x08010f36
 800eadc:	08010f47 	.word	0x08010f47

0800eae0 <__ratio>:
 800eae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	4688      	mov	r8, r1
 800eae6:	4669      	mov	r1, sp
 800eae8:	4681      	mov	r9, r0
 800eaea:	f7ff ff55 	bl	800e998 <__b2d>
 800eaee:	a901      	add	r1, sp, #4
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	ec55 4b10 	vmov	r4, r5, d0
 800eaf6:	f7ff ff4f 	bl	800e998 <__b2d>
 800eafa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eafe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb02:	eba3 0c02 	sub.w	ip, r3, r2
 800eb06:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb10:	ec51 0b10 	vmov	r0, r1, d0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bfd6      	itet	le
 800eb18:	460a      	movle	r2, r1
 800eb1a:	462a      	movgt	r2, r5
 800eb1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb20:	468b      	mov	fp, r1
 800eb22:	462f      	mov	r7, r5
 800eb24:	bfd4      	ite	le
 800eb26:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb2e:	4620      	mov	r0, r4
 800eb30:	ee10 2a10 	vmov	r2, s0
 800eb34:	465b      	mov	r3, fp
 800eb36:	4639      	mov	r1, r7
 800eb38:	f7f1 fe88 	bl	800084c <__aeabi_ddiv>
 800eb3c:	ec41 0b10 	vmov	d0, r0, r1
 800eb40:	b003      	add	sp, #12
 800eb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb46 <__copybits>:
 800eb46:	3901      	subs	r1, #1
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	1149      	asrs	r1, r1, #5
 800eb4c:	6914      	ldr	r4, [r2, #16]
 800eb4e:	3101      	adds	r1, #1
 800eb50:	f102 0314 	add.w	r3, r2, #20
 800eb54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb5c:	1f05      	subs	r5, r0, #4
 800eb5e:	42a3      	cmp	r3, r4
 800eb60:	d30c      	bcc.n	800eb7c <__copybits+0x36>
 800eb62:	1aa3      	subs	r3, r4, r2
 800eb64:	3b11      	subs	r3, #17
 800eb66:	f023 0303 	bic.w	r3, r3, #3
 800eb6a:	3211      	adds	r2, #17
 800eb6c:	42a2      	cmp	r2, r4
 800eb6e:	bf88      	it	hi
 800eb70:	2300      	movhi	r3, #0
 800eb72:	4418      	add	r0, r3
 800eb74:	2300      	movs	r3, #0
 800eb76:	4288      	cmp	r0, r1
 800eb78:	d305      	bcc.n	800eb86 <__copybits+0x40>
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
 800eb7c:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb80:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb84:	e7eb      	b.n	800eb5e <__copybits+0x18>
 800eb86:	f840 3b04 	str.w	r3, [r0], #4
 800eb8a:	e7f4      	b.n	800eb76 <__copybits+0x30>

0800eb8c <__any_on>:
 800eb8c:	f100 0214 	add.w	r2, r0, #20
 800eb90:	6900      	ldr	r0, [r0, #16]
 800eb92:	114b      	asrs	r3, r1, #5
 800eb94:	4298      	cmp	r0, r3
 800eb96:	b510      	push	{r4, lr}
 800eb98:	db11      	blt.n	800ebbe <__any_on+0x32>
 800eb9a:	dd0a      	ble.n	800ebb2 <__any_on+0x26>
 800eb9c:	f011 011f 	ands.w	r1, r1, #31
 800eba0:	d007      	beq.n	800ebb2 <__any_on+0x26>
 800eba2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eba6:	fa24 f001 	lsr.w	r0, r4, r1
 800ebaa:	fa00 f101 	lsl.w	r1, r0, r1
 800ebae:	428c      	cmp	r4, r1
 800ebb0:	d10b      	bne.n	800ebca <__any_on+0x3e>
 800ebb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d803      	bhi.n	800ebc2 <__any_on+0x36>
 800ebba:	2000      	movs	r0, #0
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	e7f7      	b.n	800ebb2 <__any_on+0x26>
 800ebc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebc6:	2900      	cmp	r1, #0
 800ebc8:	d0f5      	beq.n	800ebb6 <__any_on+0x2a>
 800ebca:	2001      	movs	r0, #1
 800ebcc:	e7f6      	b.n	800ebbc <__any_on+0x30>

0800ebce <sulp>:
 800ebce:	b570      	push	{r4, r5, r6, lr}
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	460d      	mov	r5, r1
 800ebd4:	ec45 4b10 	vmov	d0, r4, r5
 800ebd8:	4616      	mov	r6, r2
 800ebda:	f7ff feb7 	bl	800e94c <__ulp>
 800ebde:	ec51 0b10 	vmov	r0, r1, d0
 800ebe2:	b17e      	cbz	r6, 800ec04 <sulp+0x36>
 800ebe4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ebe8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	dd09      	ble.n	800ec04 <sulp+0x36>
 800ebf0:	051b      	lsls	r3, r3, #20
 800ebf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ebf6:	2400      	movs	r4, #0
 800ebf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	462b      	mov	r3, r5
 800ec00:	f7f1 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ec04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec08 <_strtod_l>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	ed2d 8b02 	vpush	{d8}
 800ec10:	b09b      	sub	sp, #108	; 0x6c
 800ec12:	4604      	mov	r4, r0
 800ec14:	9213      	str	r2, [sp, #76]	; 0x4c
 800ec16:	2200      	movs	r2, #0
 800ec18:	9216      	str	r2, [sp, #88]	; 0x58
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	f04f 0800 	mov.w	r8, #0
 800ec20:	f04f 0900 	mov.w	r9, #0
 800ec24:	460a      	mov	r2, r1
 800ec26:	9215      	str	r2, [sp, #84]	; 0x54
 800ec28:	7811      	ldrb	r1, [r2, #0]
 800ec2a:	292b      	cmp	r1, #43	; 0x2b
 800ec2c:	d04c      	beq.n	800ecc8 <_strtod_l+0xc0>
 800ec2e:	d83a      	bhi.n	800eca6 <_strtod_l+0x9e>
 800ec30:	290d      	cmp	r1, #13
 800ec32:	d834      	bhi.n	800ec9e <_strtod_l+0x96>
 800ec34:	2908      	cmp	r1, #8
 800ec36:	d834      	bhi.n	800eca2 <_strtod_l+0x9a>
 800ec38:	2900      	cmp	r1, #0
 800ec3a:	d03d      	beq.n	800ecb8 <_strtod_l+0xb0>
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	920a      	str	r2, [sp, #40]	; 0x28
 800ec40:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ec42:	7832      	ldrb	r2, [r6, #0]
 800ec44:	2a30      	cmp	r2, #48	; 0x30
 800ec46:	f040 80b4 	bne.w	800edb2 <_strtod_l+0x1aa>
 800ec4a:	7872      	ldrb	r2, [r6, #1]
 800ec4c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ec50:	2a58      	cmp	r2, #88	; 0x58
 800ec52:	d170      	bne.n	800ed36 <_strtod_l+0x12e>
 800ec54:	9302      	str	r3, [sp, #8]
 800ec56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	ab16      	add	r3, sp, #88	; 0x58
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	4a8e      	ldr	r2, [pc, #568]	; (800ee98 <_strtod_l+0x290>)
 800ec60:	ab17      	add	r3, sp, #92	; 0x5c
 800ec62:	a915      	add	r1, sp, #84	; 0x54
 800ec64:	4620      	mov	r0, r4
 800ec66:	f001 f89b 	bl	800fda0 <__gethex>
 800ec6a:	f010 070f 	ands.w	r7, r0, #15
 800ec6e:	4605      	mov	r5, r0
 800ec70:	d005      	beq.n	800ec7e <_strtod_l+0x76>
 800ec72:	2f06      	cmp	r7, #6
 800ec74:	d12a      	bne.n	800eccc <_strtod_l+0xc4>
 800ec76:	3601      	adds	r6, #1
 800ec78:	2300      	movs	r3, #0
 800ec7a:	9615      	str	r6, [sp, #84]	; 0x54
 800ec7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ec7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f040 857f 	bne.w	800f784 <_strtod_l+0xb7c>
 800ec86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec88:	b1db      	cbz	r3, 800ecc2 <_strtod_l+0xba>
 800ec8a:	4642      	mov	r2, r8
 800ec8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec90:	ec43 2b10 	vmov	d0, r2, r3
 800ec94:	b01b      	add	sp, #108	; 0x6c
 800ec96:	ecbd 8b02 	vpop	{d8}
 800ec9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9e:	2920      	cmp	r1, #32
 800eca0:	d1cc      	bne.n	800ec3c <_strtod_l+0x34>
 800eca2:	3201      	adds	r2, #1
 800eca4:	e7bf      	b.n	800ec26 <_strtod_l+0x1e>
 800eca6:	292d      	cmp	r1, #45	; 0x2d
 800eca8:	d1c8      	bne.n	800ec3c <_strtod_l+0x34>
 800ecaa:	2101      	movs	r1, #1
 800ecac:	910a      	str	r1, [sp, #40]	; 0x28
 800ecae:	1c51      	adds	r1, r2, #1
 800ecb0:	9115      	str	r1, [sp, #84]	; 0x54
 800ecb2:	7852      	ldrb	r2, [r2, #1]
 800ecb4:	2a00      	cmp	r2, #0
 800ecb6:	d1c3      	bne.n	800ec40 <_strtod_l+0x38>
 800ecb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecba:	9515      	str	r5, [sp, #84]	; 0x54
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f040 855f 	bne.w	800f780 <_strtod_l+0xb78>
 800ecc2:	4642      	mov	r2, r8
 800ecc4:	464b      	mov	r3, r9
 800ecc6:	e7e3      	b.n	800ec90 <_strtod_l+0x88>
 800ecc8:	2100      	movs	r1, #0
 800ecca:	e7ef      	b.n	800ecac <_strtod_l+0xa4>
 800eccc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ecce:	b13a      	cbz	r2, 800ece0 <_strtod_l+0xd8>
 800ecd0:	2135      	movs	r1, #53	; 0x35
 800ecd2:	a818      	add	r0, sp, #96	; 0x60
 800ecd4:	f7ff ff37 	bl	800eb46 <__copybits>
 800ecd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f7ff fb0a 	bl	800e2f4 <_Bfree>
 800ece0:	3f01      	subs	r7, #1
 800ece2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ece4:	2f04      	cmp	r7, #4
 800ece6:	d806      	bhi.n	800ecf6 <_strtod_l+0xee>
 800ece8:	e8df f007 	tbb	[pc, r7]
 800ecec:	201d0314 	.word	0x201d0314
 800ecf0:	14          	.byte	0x14
 800ecf1:	00          	.byte	0x00
 800ecf2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ecf6:	05e9      	lsls	r1, r5, #23
 800ecf8:	bf48      	it	mi
 800ecfa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ecfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed02:	0d1b      	lsrs	r3, r3, #20
 800ed04:	051b      	lsls	r3, r3, #20
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1b9      	bne.n	800ec7e <_strtod_l+0x76>
 800ed0a:	f7fe fba9 	bl	800d460 <__errno>
 800ed0e:	2322      	movs	r3, #34	; 0x22
 800ed10:	6003      	str	r3, [r0, #0]
 800ed12:	e7b4      	b.n	800ec7e <_strtod_l+0x76>
 800ed14:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ed18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ed24:	e7e7      	b.n	800ecf6 <_strtod_l+0xee>
 800ed26:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eea0 <_strtod_l+0x298>
 800ed2a:	e7e4      	b.n	800ecf6 <_strtod_l+0xee>
 800ed2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ed30:	f04f 38ff 	mov.w	r8, #4294967295
 800ed34:	e7df      	b.n	800ecf6 <_strtod_l+0xee>
 800ed36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed38:	1c5a      	adds	r2, r3, #1
 800ed3a:	9215      	str	r2, [sp, #84]	; 0x54
 800ed3c:	785b      	ldrb	r3, [r3, #1]
 800ed3e:	2b30      	cmp	r3, #48	; 0x30
 800ed40:	d0f9      	beq.n	800ed36 <_strtod_l+0x12e>
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d09b      	beq.n	800ec7e <_strtod_l+0x76>
 800ed46:	2301      	movs	r3, #1
 800ed48:	f04f 0a00 	mov.w	sl, #0
 800ed4c:	9304      	str	r3, [sp, #16]
 800ed4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed50:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ed56:	46d3      	mov	fp, sl
 800ed58:	220a      	movs	r2, #10
 800ed5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ed5c:	7806      	ldrb	r6, [r0, #0]
 800ed5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ed62:	b2d9      	uxtb	r1, r3
 800ed64:	2909      	cmp	r1, #9
 800ed66:	d926      	bls.n	800edb6 <_strtod_l+0x1ae>
 800ed68:	494c      	ldr	r1, [pc, #304]	; (800ee9c <_strtod_l+0x294>)
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f000 ff62 	bl	800fc34 <strncmp>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d030      	beq.n	800edd6 <_strtod_l+0x1ce>
 800ed74:	2000      	movs	r0, #0
 800ed76:	4632      	mov	r2, r6
 800ed78:	9005      	str	r0, [sp, #20]
 800ed7a:	465e      	mov	r6, fp
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2a65      	cmp	r2, #101	; 0x65
 800ed80:	d001      	beq.n	800ed86 <_strtod_l+0x17e>
 800ed82:	2a45      	cmp	r2, #69	; 0x45
 800ed84:	d113      	bne.n	800edae <_strtod_l+0x1a6>
 800ed86:	b91e      	cbnz	r6, 800ed90 <_strtod_l+0x188>
 800ed88:	9a04      	ldr	r2, [sp, #16]
 800ed8a:	4302      	orrs	r2, r0
 800ed8c:	d094      	beq.n	800ecb8 <_strtod_l+0xb0>
 800ed8e:	2600      	movs	r6, #0
 800ed90:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ed92:	1c6a      	adds	r2, r5, #1
 800ed94:	9215      	str	r2, [sp, #84]	; 0x54
 800ed96:	786a      	ldrb	r2, [r5, #1]
 800ed98:	2a2b      	cmp	r2, #43	; 0x2b
 800ed9a:	d074      	beq.n	800ee86 <_strtod_l+0x27e>
 800ed9c:	2a2d      	cmp	r2, #45	; 0x2d
 800ed9e:	d078      	beq.n	800ee92 <_strtod_l+0x28a>
 800eda0:	f04f 0c00 	mov.w	ip, #0
 800eda4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800eda8:	2909      	cmp	r1, #9
 800edaa:	d97f      	bls.n	800eeac <_strtod_l+0x2a4>
 800edac:	9515      	str	r5, [sp, #84]	; 0x54
 800edae:	2700      	movs	r7, #0
 800edb0:	e09e      	b.n	800eef0 <_strtod_l+0x2e8>
 800edb2:	2300      	movs	r3, #0
 800edb4:	e7c8      	b.n	800ed48 <_strtod_l+0x140>
 800edb6:	f1bb 0f08 	cmp.w	fp, #8
 800edba:	bfd8      	it	le
 800edbc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800edbe:	f100 0001 	add.w	r0, r0, #1
 800edc2:	bfda      	itte	le
 800edc4:	fb02 3301 	mlale	r3, r2, r1, r3
 800edc8:	9309      	strle	r3, [sp, #36]	; 0x24
 800edca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800edce:	f10b 0b01 	add.w	fp, fp, #1
 800edd2:	9015      	str	r0, [sp, #84]	; 0x54
 800edd4:	e7c1      	b.n	800ed5a <_strtod_l+0x152>
 800edd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edd8:	1c5a      	adds	r2, r3, #1
 800edda:	9215      	str	r2, [sp, #84]	; 0x54
 800eddc:	785a      	ldrb	r2, [r3, #1]
 800edde:	f1bb 0f00 	cmp.w	fp, #0
 800ede2:	d037      	beq.n	800ee54 <_strtod_l+0x24c>
 800ede4:	9005      	str	r0, [sp, #20]
 800ede6:	465e      	mov	r6, fp
 800ede8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800edec:	2b09      	cmp	r3, #9
 800edee:	d912      	bls.n	800ee16 <_strtod_l+0x20e>
 800edf0:	2301      	movs	r3, #1
 800edf2:	e7c4      	b.n	800ed7e <_strtod_l+0x176>
 800edf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	9215      	str	r2, [sp, #84]	; 0x54
 800edfa:	785a      	ldrb	r2, [r3, #1]
 800edfc:	3001      	adds	r0, #1
 800edfe:	2a30      	cmp	r2, #48	; 0x30
 800ee00:	d0f8      	beq.n	800edf4 <_strtod_l+0x1ec>
 800ee02:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ee06:	2b08      	cmp	r3, #8
 800ee08:	f200 84c1 	bhi.w	800f78e <_strtod_l+0xb86>
 800ee0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee0e:	9005      	str	r0, [sp, #20]
 800ee10:	2000      	movs	r0, #0
 800ee12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee14:	4606      	mov	r6, r0
 800ee16:	3a30      	subs	r2, #48	; 0x30
 800ee18:	f100 0301 	add.w	r3, r0, #1
 800ee1c:	d014      	beq.n	800ee48 <_strtod_l+0x240>
 800ee1e:	9905      	ldr	r1, [sp, #20]
 800ee20:	4419      	add	r1, r3
 800ee22:	9105      	str	r1, [sp, #20]
 800ee24:	4633      	mov	r3, r6
 800ee26:	eb00 0c06 	add.w	ip, r0, r6
 800ee2a:	210a      	movs	r1, #10
 800ee2c:	4563      	cmp	r3, ip
 800ee2e:	d113      	bne.n	800ee58 <_strtod_l+0x250>
 800ee30:	1833      	adds	r3, r6, r0
 800ee32:	2b08      	cmp	r3, #8
 800ee34:	f106 0601 	add.w	r6, r6, #1
 800ee38:	4406      	add	r6, r0
 800ee3a:	dc1a      	bgt.n	800ee72 <_strtod_l+0x26a>
 800ee3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee3e:	230a      	movs	r3, #10
 800ee40:	fb03 2301 	mla	r3, r3, r1, r2
 800ee44:	9309      	str	r3, [sp, #36]	; 0x24
 800ee46:	2300      	movs	r3, #0
 800ee48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ee4a:	1c51      	adds	r1, r2, #1
 800ee4c:	9115      	str	r1, [sp, #84]	; 0x54
 800ee4e:	7852      	ldrb	r2, [r2, #1]
 800ee50:	4618      	mov	r0, r3
 800ee52:	e7c9      	b.n	800ede8 <_strtod_l+0x1e0>
 800ee54:	4658      	mov	r0, fp
 800ee56:	e7d2      	b.n	800edfe <_strtod_l+0x1f6>
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	f103 0301 	add.w	r3, r3, #1
 800ee5e:	dc03      	bgt.n	800ee68 <_strtod_l+0x260>
 800ee60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee62:	434f      	muls	r7, r1
 800ee64:	9709      	str	r7, [sp, #36]	; 0x24
 800ee66:	e7e1      	b.n	800ee2c <_strtod_l+0x224>
 800ee68:	2b10      	cmp	r3, #16
 800ee6a:	bfd8      	it	le
 800ee6c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ee70:	e7dc      	b.n	800ee2c <_strtod_l+0x224>
 800ee72:	2e10      	cmp	r6, #16
 800ee74:	bfdc      	itt	le
 800ee76:	230a      	movle	r3, #10
 800ee78:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ee7c:	e7e3      	b.n	800ee46 <_strtod_l+0x23e>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9305      	str	r3, [sp, #20]
 800ee82:	2301      	movs	r3, #1
 800ee84:	e780      	b.n	800ed88 <_strtod_l+0x180>
 800ee86:	f04f 0c00 	mov.w	ip, #0
 800ee8a:	1caa      	adds	r2, r5, #2
 800ee8c:	9215      	str	r2, [sp, #84]	; 0x54
 800ee8e:	78aa      	ldrb	r2, [r5, #2]
 800ee90:	e788      	b.n	800eda4 <_strtod_l+0x19c>
 800ee92:	f04f 0c01 	mov.w	ip, #1
 800ee96:	e7f8      	b.n	800ee8a <_strtod_l+0x282>
 800ee98:	080110a0 	.word	0x080110a0
 800ee9c:	0801109c 	.word	0x0801109c
 800eea0:	7ff00000 	.word	0x7ff00000
 800eea4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eea6:	1c51      	adds	r1, r2, #1
 800eea8:	9115      	str	r1, [sp, #84]	; 0x54
 800eeaa:	7852      	ldrb	r2, [r2, #1]
 800eeac:	2a30      	cmp	r2, #48	; 0x30
 800eeae:	d0f9      	beq.n	800eea4 <_strtod_l+0x29c>
 800eeb0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eeb4:	2908      	cmp	r1, #8
 800eeb6:	f63f af7a 	bhi.w	800edae <_strtod_l+0x1a6>
 800eeba:	3a30      	subs	r2, #48	; 0x30
 800eebc:	9208      	str	r2, [sp, #32]
 800eebe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eec0:	920c      	str	r2, [sp, #48]	; 0x30
 800eec2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eec4:	1c57      	adds	r7, r2, #1
 800eec6:	9715      	str	r7, [sp, #84]	; 0x54
 800eec8:	7852      	ldrb	r2, [r2, #1]
 800eeca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800eece:	f1be 0f09 	cmp.w	lr, #9
 800eed2:	d938      	bls.n	800ef46 <_strtod_l+0x33e>
 800eed4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eed6:	1a7f      	subs	r7, r7, r1
 800eed8:	2f08      	cmp	r7, #8
 800eeda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800eede:	dc03      	bgt.n	800eee8 <_strtod_l+0x2e0>
 800eee0:	9908      	ldr	r1, [sp, #32]
 800eee2:	428f      	cmp	r7, r1
 800eee4:	bfa8      	it	ge
 800eee6:	460f      	movge	r7, r1
 800eee8:	f1bc 0f00 	cmp.w	ip, #0
 800eeec:	d000      	beq.n	800eef0 <_strtod_l+0x2e8>
 800eeee:	427f      	negs	r7, r7
 800eef0:	2e00      	cmp	r6, #0
 800eef2:	d14f      	bne.n	800ef94 <_strtod_l+0x38c>
 800eef4:	9904      	ldr	r1, [sp, #16]
 800eef6:	4301      	orrs	r1, r0
 800eef8:	f47f aec1 	bne.w	800ec7e <_strtod_l+0x76>
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f47f aedb 	bne.w	800ecb8 <_strtod_l+0xb0>
 800ef02:	2a69      	cmp	r2, #105	; 0x69
 800ef04:	d029      	beq.n	800ef5a <_strtod_l+0x352>
 800ef06:	dc26      	bgt.n	800ef56 <_strtod_l+0x34e>
 800ef08:	2a49      	cmp	r2, #73	; 0x49
 800ef0a:	d026      	beq.n	800ef5a <_strtod_l+0x352>
 800ef0c:	2a4e      	cmp	r2, #78	; 0x4e
 800ef0e:	f47f aed3 	bne.w	800ecb8 <_strtod_l+0xb0>
 800ef12:	499b      	ldr	r1, [pc, #620]	; (800f180 <_strtod_l+0x578>)
 800ef14:	a815      	add	r0, sp, #84	; 0x54
 800ef16:	f001 f983 	bl	8010220 <__match>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	f43f aecc 	beq.w	800ecb8 <_strtod_l+0xb0>
 800ef20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b28      	cmp	r3, #40	; 0x28
 800ef26:	d12f      	bne.n	800ef88 <_strtod_l+0x380>
 800ef28:	4996      	ldr	r1, [pc, #600]	; (800f184 <_strtod_l+0x57c>)
 800ef2a:	aa18      	add	r2, sp, #96	; 0x60
 800ef2c:	a815      	add	r0, sp, #84	; 0x54
 800ef2e:	f001 f98b 	bl	8010248 <__hexnan>
 800ef32:	2805      	cmp	r0, #5
 800ef34:	d128      	bne.n	800ef88 <_strtod_l+0x380>
 800ef36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ef3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ef40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ef44:	e69b      	b.n	800ec7e <_strtod_l+0x76>
 800ef46:	9f08      	ldr	r7, [sp, #32]
 800ef48:	210a      	movs	r1, #10
 800ef4a:	fb01 2107 	mla	r1, r1, r7, r2
 800ef4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ef52:	9208      	str	r2, [sp, #32]
 800ef54:	e7b5      	b.n	800eec2 <_strtod_l+0x2ba>
 800ef56:	2a6e      	cmp	r2, #110	; 0x6e
 800ef58:	e7d9      	b.n	800ef0e <_strtod_l+0x306>
 800ef5a:	498b      	ldr	r1, [pc, #556]	; (800f188 <_strtod_l+0x580>)
 800ef5c:	a815      	add	r0, sp, #84	; 0x54
 800ef5e:	f001 f95f 	bl	8010220 <__match>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	f43f aea8 	beq.w	800ecb8 <_strtod_l+0xb0>
 800ef68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef6a:	4988      	ldr	r1, [pc, #544]	; (800f18c <_strtod_l+0x584>)
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	a815      	add	r0, sp, #84	; 0x54
 800ef70:	9315      	str	r3, [sp, #84]	; 0x54
 800ef72:	f001 f955 	bl	8010220 <__match>
 800ef76:	b910      	cbnz	r0, 800ef7e <_strtod_l+0x376>
 800ef78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	9315      	str	r3, [sp, #84]	; 0x54
 800ef7e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f19c <_strtod_l+0x594>
 800ef82:	f04f 0800 	mov.w	r8, #0
 800ef86:	e67a      	b.n	800ec7e <_strtod_l+0x76>
 800ef88:	4881      	ldr	r0, [pc, #516]	; (800f190 <_strtod_l+0x588>)
 800ef8a:	f000 fe65 	bl	800fc58 <nan>
 800ef8e:	ec59 8b10 	vmov	r8, r9, d0
 800ef92:	e674      	b.n	800ec7e <_strtod_l+0x76>
 800ef94:	9b05      	ldr	r3, [sp, #20]
 800ef96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef98:	1afb      	subs	r3, r7, r3
 800ef9a:	f1bb 0f00 	cmp.w	fp, #0
 800ef9e:	bf08      	it	eq
 800efa0:	46b3      	moveq	fp, r6
 800efa2:	2e10      	cmp	r6, #16
 800efa4:	9308      	str	r3, [sp, #32]
 800efa6:	4635      	mov	r5, r6
 800efa8:	bfa8      	it	ge
 800efaa:	2510      	movge	r5, #16
 800efac:	f7f1 faaa 	bl	8000504 <__aeabi_ui2d>
 800efb0:	2e09      	cmp	r6, #9
 800efb2:	4680      	mov	r8, r0
 800efb4:	4689      	mov	r9, r1
 800efb6:	dd13      	ble.n	800efe0 <_strtod_l+0x3d8>
 800efb8:	4b76      	ldr	r3, [pc, #472]	; (800f194 <_strtod_l+0x58c>)
 800efba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800efbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800efc2:	f7f1 fb19 	bl	80005f8 <__aeabi_dmul>
 800efc6:	4680      	mov	r8, r0
 800efc8:	4650      	mov	r0, sl
 800efca:	4689      	mov	r9, r1
 800efcc:	f7f1 fa9a 	bl	8000504 <__aeabi_ui2d>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4640      	mov	r0, r8
 800efd6:	4649      	mov	r1, r9
 800efd8:	f7f1 f958 	bl	800028c <__adddf3>
 800efdc:	4680      	mov	r8, r0
 800efde:	4689      	mov	r9, r1
 800efe0:	2e0f      	cmp	r6, #15
 800efe2:	dc38      	bgt.n	800f056 <_strtod_l+0x44e>
 800efe4:	9b08      	ldr	r3, [sp, #32]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f43f ae49 	beq.w	800ec7e <_strtod_l+0x76>
 800efec:	dd24      	ble.n	800f038 <_strtod_l+0x430>
 800efee:	2b16      	cmp	r3, #22
 800eff0:	dc0b      	bgt.n	800f00a <_strtod_l+0x402>
 800eff2:	4968      	ldr	r1, [pc, #416]	; (800f194 <_strtod_l+0x58c>)
 800eff4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800effc:	4642      	mov	r2, r8
 800effe:	464b      	mov	r3, r9
 800f000:	f7f1 fafa 	bl	80005f8 <__aeabi_dmul>
 800f004:	4680      	mov	r8, r0
 800f006:	4689      	mov	r9, r1
 800f008:	e639      	b.n	800ec7e <_strtod_l+0x76>
 800f00a:	9a08      	ldr	r2, [sp, #32]
 800f00c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f010:	4293      	cmp	r3, r2
 800f012:	db20      	blt.n	800f056 <_strtod_l+0x44e>
 800f014:	4c5f      	ldr	r4, [pc, #380]	; (800f194 <_strtod_l+0x58c>)
 800f016:	f1c6 060f 	rsb	r6, r6, #15
 800f01a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f01e:	4642      	mov	r2, r8
 800f020:	464b      	mov	r3, r9
 800f022:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f026:	f7f1 fae7 	bl	80005f8 <__aeabi_dmul>
 800f02a:	9b08      	ldr	r3, [sp, #32]
 800f02c:	1b9e      	subs	r6, r3, r6
 800f02e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f032:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f036:	e7e3      	b.n	800f000 <_strtod_l+0x3f8>
 800f038:	9b08      	ldr	r3, [sp, #32]
 800f03a:	3316      	adds	r3, #22
 800f03c:	db0b      	blt.n	800f056 <_strtod_l+0x44e>
 800f03e:	9b05      	ldr	r3, [sp, #20]
 800f040:	1bdf      	subs	r7, r3, r7
 800f042:	4b54      	ldr	r3, [pc, #336]	; (800f194 <_strtod_l+0x58c>)
 800f044:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f04c:	4640      	mov	r0, r8
 800f04e:	4649      	mov	r1, r9
 800f050:	f7f1 fbfc 	bl	800084c <__aeabi_ddiv>
 800f054:	e7d6      	b.n	800f004 <_strtod_l+0x3fc>
 800f056:	9b08      	ldr	r3, [sp, #32]
 800f058:	1b75      	subs	r5, r6, r5
 800f05a:	441d      	add	r5, r3
 800f05c:	2d00      	cmp	r5, #0
 800f05e:	dd70      	ble.n	800f142 <_strtod_l+0x53a>
 800f060:	f015 030f 	ands.w	r3, r5, #15
 800f064:	d00a      	beq.n	800f07c <_strtod_l+0x474>
 800f066:	494b      	ldr	r1, [pc, #300]	; (800f194 <_strtod_l+0x58c>)
 800f068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f06c:	4642      	mov	r2, r8
 800f06e:	464b      	mov	r3, r9
 800f070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f074:	f7f1 fac0 	bl	80005f8 <__aeabi_dmul>
 800f078:	4680      	mov	r8, r0
 800f07a:	4689      	mov	r9, r1
 800f07c:	f035 050f 	bics.w	r5, r5, #15
 800f080:	d04d      	beq.n	800f11e <_strtod_l+0x516>
 800f082:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f086:	dd22      	ble.n	800f0ce <_strtod_l+0x4c6>
 800f088:	2500      	movs	r5, #0
 800f08a:	46ab      	mov	fp, r5
 800f08c:	9509      	str	r5, [sp, #36]	; 0x24
 800f08e:	9505      	str	r5, [sp, #20]
 800f090:	2322      	movs	r3, #34	; 0x22
 800f092:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f19c <_strtod_l+0x594>
 800f096:	6023      	str	r3, [r4, #0]
 800f098:	f04f 0800 	mov.w	r8, #0
 800f09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f43f aded 	beq.w	800ec7e <_strtod_l+0x76>
 800f0a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f7ff f924 	bl	800e2f4 <_Bfree>
 800f0ac:	9905      	ldr	r1, [sp, #20]
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f7ff f920 	bl	800e2f4 <_Bfree>
 800f0b4:	4659      	mov	r1, fp
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f7ff f91c 	bl	800e2f4 <_Bfree>
 800f0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f7ff f918 	bl	800e2f4 <_Bfree>
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f7ff f914 	bl	800e2f4 <_Bfree>
 800f0cc:	e5d7      	b.n	800ec7e <_strtod_l+0x76>
 800f0ce:	4b32      	ldr	r3, [pc, #200]	; (800f198 <_strtod_l+0x590>)
 800f0d0:	9304      	str	r3, [sp, #16]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	112d      	asrs	r5, r5, #4
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	4649      	mov	r1, r9
 800f0da:	469a      	mov	sl, r3
 800f0dc:	2d01      	cmp	r5, #1
 800f0de:	dc21      	bgt.n	800f124 <_strtod_l+0x51c>
 800f0e0:	b10b      	cbz	r3, 800f0e6 <_strtod_l+0x4de>
 800f0e2:	4680      	mov	r8, r0
 800f0e4:	4689      	mov	r9, r1
 800f0e6:	492c      	ldr	r1, [pc, #176]	; (800f198 <_strtod_l+0x590>)
 800f0e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f0ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f0f0:	4642      	mov	r2, r8
 800f0f2:	464b      	mov	r3, r9
 800f0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0f8:	f7f1 fa7e 	bl	80005f8 <__aeabi_dmul>
 800f0fc:	4b27      	ldr	r3, [pc, #156]	; (800f19c <_strtod_l+0x594>)
 800f0fe:	460a      	mov	r2, r1
 800f100:	400b      	ands	r3, r1
 800f102:	4927      	ldr	r1, [pc, #156]	; (800f1a0 <_strtod_l+0x598>)
 800f104:	428b      	cmp	r3, r1
 800f106:	4680      	mov	r8, r0
 800f108:	d8be      	bhi.n	800f088 <_strtod_l+0x480>
 800f10a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f10e:	428b      	cmp	r3, r1
 800f110:	bf86      	itte	hi
 800f112:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f1a4 <_strtod_l+0x59c>
 800f116:	f04f 38ff 	movhi.w	r8, #4294967295
 800f11a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f11e:	2300      	movs	r3, #0
 800f120:	9304      	str	r3, [sp, #16]
 800f122:	e07b      	b.n	800f21c <_strtod_l+0x614>
 800f124:	07ea      	lsls	r2, r5, #31
 800f126:	d505      	bpl.n	800f134 <_strtod_l+0x52c>
 800f128:	9b04      	ldr	r3, [sp, #16]
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f7f1 fa63 	bl	80005f8 <__aeabi_dmul>
 800f132:	2301      	movs	r3, #1
 800f134:	9a04      	ldr	r2, [sp, #16]
 800f136:	3208      	adds	r2, #8
 800f138:	f10a 0a01 	add.w	sl, sl, #1
 800f13c:	106d      	asrs	r5, r5, #1
 800f13e:	9204      	str	r2, [sp, #16]
 800f140:	e7cc      	b.n	800f0dc <_strtod_l+0x4d4>
 800f142:	d0ec      	beq.n	800f11e <_strtod_l+0x516>
 800f144:	426d      	negs	r5, r5
 800f146:	f015 020f 	ands.w	r2, r5, #15
 800f14a:	d00a      	beq.n	800f162 <_strtod_l+0x55a>
 800f14c:	4b11      	ldr	r3, [pc, #68]	; (800f194 <_strtod_l+0x58c>)
 800f14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f152:	4640      	mov	r0, r8
 800f154:	4649      	mov	r1, r9
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	f7f1 fb77 	bl	800084c <__aeabi_ddiv>
 800f15e:	4680      	mov	r8, r0
 800f160:	4689      	mov	r9, r1
 800f162:	112d      	asrs	r5, r5, #4
 800f164:	d0db      	beq.n	800f11e <_strtod_l+0x516>
 800f166:	2d1f      	cmp	r5, #31
 800f168:	dd1e      	ble.n	800f1a8 <_strtod_l+0x5a0>
 800f16a:	2500      	movs	r5, #0
 800f16c:	46ab      	mov	fp, r5
 800f16e:	9509      	str	r5, [sp, #36]	; 0x24
 800f170:	9505      	str	r5, [sp, #20]
 800f172:	2322      	movs	r3, #34	; 0x22
 800f174:	f04f 0800 	mov.w	r8, #0
 800f178:	f04f 0900 	mov.w	r9, #0
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	e78d      	b.n	800f09c <_strtod_l+0x494>
 800f180:	08010e8e 	.word	0x08010e8e
 800f184:	080110b4 	.word	0x080110b4
 800f188:	08010e86 	.word	0x08010e86
 800f18c:	08010ebd 	.word	0x08010ebd
 800f190:	08011144 	.word	0x08011144
 800f194:	08010fc8 	.word	0x08010fc8
 800f198:	08010fa0 	.word	0x08010fa0
 800f19c:	7ff00000 	.word	0x7ff00000
 800f1a0:	7ca00000 	.word	0x7ca00000
 800f1a4:	7fefffff 	.word	0x7fefffff
 800f1a8:	f015 0310 	ands.w	r3, r5, #16
 800f1ac:	bf18      	it	ne
 800f1ae:	236a      	movne	r3, #106	; 0x6a
 800f1b0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f554 <_strtod_l+0x94c>
 800f1b4:	9304      	str	r3, [sp, #16]
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	07ea      	lsls	r2, r5, #31
 800f1be:	d504      	bpl.n	800f1ca <_strtod_l+0x5c2>
 800f1c0:	e9da 2300 	ldrd	r2, r3, [sl]
 800f1c4:	f7f1 fa18 	bl	80005f8 <__aeabi_dmul>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	106d      	asrs	r5, r5, #1
 800f1cc:	f10a 0a08 	add.w	sl, sl, #8
 800f1d0:	d1f4      	bne.n	800f1bc <_strtod_l+0x5b4>
 800f1d2:	b10b      	cbz	r3, 800f1d8 <_strtod_l+0x5d0>
 800f1d4:	4680      	mov	r8, r0
 800f1d6:	4689      	mov	r9, r1
 800f1d8:	9b04      	ldr	r3, [sp, #16]
 800f1da:	b1bb      	cbz	r3, 800f20c <_strtod_l+0x604>
 800f1dc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f1e0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	dd10      	ble.n	800f20c <_strtod_l+0x604>
 800f1ea:	2b1f      	cmp	r3, #31
 800f1ec:	f340 811e 	ble.w	800f42c <_strtod_l+0x824>
 800f1f0:	2b34      	cmp	r3, #52	; 0x34
 800f1f2:	bfde      	ittt	le
 800f1f4:	f04f 33ff 	movle.w	r3, #4294967295
 800f1f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f1fc:	4093      	lslle	r3, r2
 800f1fe:	f04f 0800 	mov.w	r8, #0
 800f202:	bfcc      	ite	gt
 800f204:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f208:	ea03 0901 	andle.w	r9, r3, r1
 800f20c:	2200      	movs	r2, #0
 800f20e:	2300      	movs	r3, #0
 800f210:	4640      	mov	r0, r8
 800f212:	4649      	mov	r1, r9
 800f214:	f7f1 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d1a6      	bne.n	800f16a <_strtod_l+0x562>
 800f21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f222:	4633      	mov	r3, r6
 800f224:	465a      	mov	r2, fp
 800f226:	4620      	mov	r0, r4
 800f228:	f7ff f8cc 	bl	800e3c4 <__s2b>
 800f22c:	9009      	str	r0, [sp, #36]	; 0x24
 800f22e:	2800      	cmp	r0, #0
 800f230:	f43f af2a 	beq.w	800f088 <_strtod_l+0x480>
 800f234:	9a08      	ldr	r2, [sp, #32]
 800f236:	9b05      	ldr	r3, [sp, #20]
 800f238:	2a00      	cmp	r2, #0
 800f23a:	eba3 0307 	sub.w	r3, r3, r7
 800f23e:	bfa8      	it	ge
 800f240:	2300      	movge	r3, #0
 800f242:	930c      	str	r3, [sp, #48]	; 0x30
 800f244:	2500      	movs	r5, #0
 800f246:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f24a:	9312      	str	r3, [sp, #72]	; 0x48
 800f24c:	46ab      	mov	fp, r5
 800f24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f250:	4620      	mov	r0, r4
 800f252:	6859      	ldr	r1, [r3, #4]
 800f254:	f7ff f80e 	bl	800e274 <_Balloc>
 800f258:	9005      	str	r0, [sp, #20]
 800f25a:	2800      	cmp	r0, #0
 800f25c:	f43f af18 	beq.w	800f090 <_strtod_l+0x488>
 800f260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f262:	691a      	ldr	r2, [r3, #16]
 800f264:	3202      	adds	r2, #2
 800f266:	f103 010c 	add.w	r1, r3, #12
 800f26a:	0092      	lsls	r2, r2, #2
 800f26c:	300c      	adds	r0, #12
 800f26e:	f7fe f924 	bl	800d4ba <memcpy>
 800f272:	ec49 8b10 	vmov	d0, r8, r9
 800f276:	aa18      	add	r2, sp, #96	; 0x60
 800f278:	a917      	add	r1, sp, #92	; 0x5c
 800f27a:	4620      	mov	r0, r4
 800f27c:	f7ff fbd6 	bl	800ea2c <__d2b>
 800f280:	ec49 8b18 	vmov	d8, r8, r9
 800f284:	9016      	str	r0, [sp, #88]	; 0x58
 800f286:	2800      	cmp	r0, #0
 800f288:	f43f af02 	beq.w	800f090 <_strtod_l+0x488>
 800f28c:	2101      	movs	r1, #1
 800f28e:	4620      	mov	r0, r4
 800f290:	f7ff f930 	bl	800e4f4 <__i2b>
 800f294:	4683      	mov	fp, r0
 800f296:	2800      	cmp	r0, #0
 800f298:	f43f aefa 	beq.w	800f090 <_strtod_l+0x488>
 800f29c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f29e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f2a0:	2e00      	cmp	r6, #0
 800f2a2:	bfab      	itete	ge
 800f2a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f2a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f2a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f2aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f2ae:	bfac      	ite	ge
 800f2b0:	eb06 0a03 	addge.w	sl, r6, r3
 800f2b4:	1b9f      	sublt	r7, r3, r6
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	1af6      	subs	r6, r6, r3
 800f2ba:	4416      	add	r6, r2
 800f2bc:	4ba0      	ldr	r3, [pc, #640]	; (800f540 <_strtod_l+0x938>)
 800f2be:	3e01      	subs	r6, #1
 800f2c0:	429e      	cmp	r6, r3
 800f2c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f2c6:	f280 80c4 	bge.w	800f452 <_strtod_l+0x84a>
 800f2ca:	1b9b      	subs	r3, r3, r6
 800f2cc:	2b1f      	cmp	r3, #31
 800f2ce:	eba2 0203 	sub.w	r2, r2, r3
 800f2d2:	f04f 0101 	mov.w	r1, #1
 800f2d6:	f300 80b0 	bgt.w	800f43a <_strtod_l+0x832>
 800f2da:	fa01 f303 	lsl.w	r3, r1, r3
 800f2de:	930e      	str	r3, [sp, #56]	; 0x38
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	930d      	str	r3, [sp, #52]	; 0x34
 800f2e4:	eb0a 0602 	add.w	r6, sl, r2
 800f2e8:	9b04      	ldr	r3, [sp, #16]
 800f2ea:	45b2      	cmp	sl, r6
 800f2ec:	4417      	add	r7, r2
 800f2ee:	441f      	add	r7, r3
 800f2f0:	4653      	mov	r3, sl
 800f2f2:	bfa8      	it	ge
 800f2f4:	4633      	movge	r3, r6
 800f2f6:	42bb      	cmp	r3, r7
 800f2f8:	bfa8      	it	ge
 800f2fa:	463b      	movge	r3, r7
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfc2      	ittt	gt
 800f300:	1af6      	subgt	r6, r6, r3
 800f302:	1aff      	subgt	r7, r7, r3
 800f304:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	dd17      	ble.n	800f33e <_strtod_l+0x736>
 800f30e:	4659      	mov	r1, fp
 800f310:	461a      	mov	r2, r3
 800f312:	4620      	mov	r0, r4
 800f314:	f7ff f9ae 	bl	800e674 <__pow5mult>
 800f318:	4683      	mov	fp, r0
 800f31a:	2800      	cmp	r0, #0
 800f31c:	f43f aeb8 	beq.w	800f090 <_strtod_l+0x488>
 800f320:	4601      	mov	r1, r0
 800f322:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f324:	4620      	mov	r0, r4
 800f326:	f7ff f8fb 	bl	800e520 <__multiply>
 800f32a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f32c:	2800      	cmp	r0, #0
 800f32e:	f43f aeaf 	beq.w	800f090 <_strtod_l+0x488>
 800f332:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f334:	4620      	mov	r0, r4
 800f336:	f7fe ffdd 	bl	800e2f4 <_Bfree>
 800f33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f33c:	9316      	str	r3, [sp, #88]	; 0x58
 800f33e:	2e00      	cmp	r6, #0
 800f340:	f300 808c 	bgt.w	800f45c <_strtod_l+0x854>
 800f344:	9b08      	ldr	r3, [sp, #32]
 800f346:	2b00      	cmp	r3, #0
 800f348:	dd08      	ble.n	800f35c <_strtod_l+0x754>
 800f34a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f34c:	9905      	ldr	r1, [sp, #20]
 800f34e:	4620      	mov	r0, r4
 800f350:	f7ff f990 	bl	800e674 <__pow5mult>
 800f354:	9005      	str	r0, [sp, #20]
 800f356:	2800      	cmp	r0, #0
 800f358:	f43f ae9a 	beq.w	800f090 <_strtod_l+0x488>
 800f35c:	2f00      	cmp	r7, #0
 800f35e:	dd08      	ble.n	800f372 <_strtod_l+0x76a>
 800f360:	9905      	ldr	r1, [sp, #20]
 800f362:	463a      	mov	r2, r7
 800f364:	4620      	mov	r0, r4
 800f366:	f7ff f9df 	bl	800e728 <__lshift>
 800f36a:	9005      	str	r0, [sp, #20]
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f43f ae8f 	beq.w	800f090 <_strtod_l+0x488>
 800f372:	f1ba 0f00 	cmp.w	sl, #0
 800f376:	dd08      	ble.n	800f38a <_strtod_l+0x782>
 800f378:	4659      	mov	r1, fp
 800f37a:	4652      	mov	r2, sl
 800f37c:	4620      	mov	r0, r4
 800f37e:	f7ff f9d3 	bl	800e728 <__lshift>
 800f382:	4683      	mov	fp, r0
 800f384:	2800      	cmp	r0, #0
 800f386:	f43f ae83 	beq.w	800f090 <_strtod_l+0x488>
 800f38a:	9a05      	ldr	r2, [sp, #20]
 800f38c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f38e:	4620      	mov	r0, r4
 800f390:	f7ff fa52 	bl	800e838 <__mdiff>
 800f394:	4605      	mov	r5, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	f43f ae7a 	beq.w	800f090 <_strtod_l+0x488>
 800f39c:	68c3      	ldr	r3, [r0, #12]
 800f39e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	60c3      	str	r3, [r0, #12]
 800f3a4:	4659      	mov	r1, fp
 800f3a6:	f7ff fa2b 	bl	800e800 <__mcmp>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	da60      	bge.n	800f470 <_strtod_l+0x868>
 800f3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3b0:	ea53 0308 	orrs.w	r3, r3, r8
 800f3b4:	f040 8084 	bne.w	800f4c0 <_strtod_l+0x8b8>
 800f3b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d17f      	bne.n	800f4c0 <_strtod_l+0x8b8>
 800f3c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f3c4:	0d1b      	lsrs	r3, r3, #20
 800f3c6:	051b      	lsls	r3, r3, #20
 800f3c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f3cc:	d978      	bls.n	800f4c0 <_strtod_l+0x8b8>
 800f3ce:	696b      	ldr	r3, [r5, #20]
 800f3d0:	b913      	cbnz	r3, 800f3d8 <_strtod_l+0x7d0>
 800f3d2:	692b      	ldr	r3, [r5, #16]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	dd73      	ble.n	800f4c0 <_strtod_l+0x8b8>
 800f3d8:	4629      	mov	r1, r5
 800f3da:	2201      	movs	r2, #1
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f7ff f9a3 	bl	800e728 <__lshift>
 800f3e2:	4659      	mov	r1, fp
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	f7ff fa0b 	bl	800e800 <__mcmp>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	dd68      	ble.n	800f4c0 <_strtod_l+0x8b8>
 800f3ee:	9904      	ldr	r1, [sp, #16]
 800f3f0:	4a54      	ldr	r2, [pc, #336]	; (800f544 <_strtod_l+0x93c>)
 800f3f2:	464b      	mov	r3, r9
 800f3f4:	2900      	cmp	r1, #0
 800f3f6:	f000 8084 	beq.w	800f502 <_strtod_l+0x8fa>
 800f3fa:	ea02 0109 	and.w	r1, r2, r9
 800f3fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f402:	dc7e      	bgt.n	800f502 <_strtod_l+0x8fa>
 800f404:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f408:	f77f aeb3 	ble.w	800f172 <_strtod_l+0x56a>
 800f40c:	4b4e      	ldr	r3, [pc, #312]	; (800f548 <_strtod_l+0x940>)
 800f40e:	4640      	mov	r0, r8
 800f410:	4649      	mov	r1, r9
 800f412:	2200      	movs	r2, #0
 800f414:	f7f1 f8f0 	bl	80005f8 <__aeabi_dmul>
 800f418:	4b4a      	ldr	r3, [pc, #296]	; (800f544 <_strtod_l+0x93c>)
 800f41a:	400b      	ands	r3, r1
 800f41c:	4680      	mov	r8, r0
 800f41e:	4689      	mov	r9, r1
 800f420:	2b00      	cmp	r3, #0
 800f422:	f47f ae3f 	bne.w	800f0a4 <_strtod_l+0x49c>
 800f426:	2322      	movs	r3, #34	; 0x22
 800f428:	6023      	str	r3, [r4, #0]
 800f42a:	e63b      	b.n	800f0a4 <_strtod_l+0x49c>
 800f42c:	f04f 32ff 	mov.w	r2, #4294967295
 800f430:	fa02 f303 	lsl.w	r3, r2, r3
 800f434:	ea03 0808 	and.w	r8, r3, r8
 800f438:	e6e8      	b.n	800f20c <_strtod_l+0x604>
 800f43a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f43e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f442:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f446:	36e2      	adds	r6, #226	; 0xe2
 800f448:	fa01 f306 	lsl.w	r3, r1, r6
 800f44c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f450:	e748      	b.n	800f2e4 <_strtod_l+0x6dc>
 800f452:	2100      	movs	r1, #0
 800f454:	2301      	movs	r3, #1
 800f456:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f45a:	e743      	b.n	800f2e4 <_strtod_l+0x6dc>
 800f45c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f45e:	4632      	mov	r2, r6
 800f460:	4620      	mov	r0, r4
 800f462:	f7ff f961 	bl	800e728 <__lshift>
 800f466:	9016      	str	r0, [sp, #88]	; 0x58
 800f468:	2800      	cmp	r0, #0
 800f46a:	f47f af6b 	bne.w	800f344 <_strtod_l+0x73c>
 800f46e:	e60f      	b.n	800f090 <_strtod_l+0x488>
 800f470:	46ca      	mov	sl, r9
 800f472:	d171      	bne.n	800f558 <_strtod_l+0x950>
 800f474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f476:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f47a:	b352      	cbz	r2, 800f4d2 <_strtod_l+0x8ca>
 800f47c:	4a33      	ldr	r2, [pc, #204]	; (800f54c <_strtod_l+0x944>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d12a      	bne.n	800f4d8 <_strtod_l+0x8d0>
 800f482:	9b04      	ldr	r3, [sp, #16]
 800f484:	4641      	mov	r1, r8
 800f486:	b1fb      	cbz	r3, 800f4c8 <_strtod_l+0x8c0>
 800f488:	4b2e      	ldr	r3, [pc, #184]	; (800f544 <_strtod_l+0x93c>)
 800f48a:	ea09 0303 	and.w	r3, r9, r3
 800f48e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f492:	f04f 32ff 	mov.w	r2, #4294967295
 800f496:	d81a      	bhi.n	800f4ce <_strtod_l+0x8c6>
 800f498:	0d1b      	lsrs	r3, r3, #20
 800f49a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f49e:	fa02 f303 	lsl.w	r3, r2, r3
 800f4a2:	4299      	cmp	r1, r3
 800f4a4:	d118      	bne.n	800f4d8 <_strtod_l+0x8d0>
 800f4a6:	4b2a      	ldr	r3, [pc, #168]	; (800f550 <_strtod_l+0x948>)
 800f4a8:	459a      	cmp	sl, r3
 800f4aa:	d102      	bne.n	800f4b2 <_strtod_l+0x8aa>
 800f4ac:	3101      	adds	r1, #1
 800f4ae:	f43f adef 	beq.w	800f090 <_strtod_l+0x488>
 800f4b2:	4b24      	ldr	r3, [pc, #144]	; (800f544 <_strtod_l+0x93c>)
 800f4b4:	ea0a 0303 	and.w	r3, sl, r3
 800f4b8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f4bc:	f04f 0800 	mov.w	r8, #0
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1a2      	bne.n	800f40c <_strtod_l+0x804>
 800f4c6:	e5ed      	b.n	800f0a4 <_strtod_l+0x49c>
 800f4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4cc:	e7e9      	b.n	800f4a2 <_strtod_l+0x89a>
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	e7e7      	b.n	800f4a2 <_strtod_l+0x89a>
 800f4d2:	ea53 0308 	orrs.w	r3, r3, r8
 800f4d6:	d08a      	beq.n	800f3ee <_strtod_l+0x7e6>
 800f4d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4da:	b1e3      	cbz	r3, 800f516 <_strtod_l+0x90e>
 800f4dc:	ea13 0f0a 	tst.w	r3, sl
 800f4e0:	d0ee      	beq.n	800f4c0 <_strtod_l+0x8b8>
 800f4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4e4:	9a04      	ldr	r2, [sp, #16]
 800f4e6:	4640      	mov	r0, r8
 800f4e8:	4649      	mov	r1, r9
 800f4ea:	b1c3      	cbz	r3, 800f51e <_strtod_l+0x916>
 800f4ec:	f7ff fb6f 	bl	800ebce <sulp>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	ec51 0b18 	vmov	r0, r1, d8
 800f4f8:	f7f0 fec8 	bl	800028c <__adddf3>
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	e7de      	b.n	800f4c0 <_strtod_l+0x8b8>
 800f502:	4013      	ands	r3, r2
 800f504:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f508:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f50c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f510:	f04f 38ff 	mov.w	r8, #4294967295
 800f514:	e7d4      	b.n	800f4c0 <_strtod_l+0x8b8>
 800f516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f518:	ea13 0f08 	tst.w	r3, r8
 800f51c:	e7e0      	b.n	800f4e0 <_strtod_l+0x8d8>
 800f51e:	f7ff fb56 	bl	800ebce <sulp>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	ec51 0b18 	vmov	r0, r1, d8
 800f52a:	f7f0 fead 	bl	8000288 <__aeabi_dsub>
 800f52e:	2200      	movs	r2, #0
 800f530:	2300      	movs	r3, #0
 800f532:	4680      	mov	r8, r0
 800f534:	4689      	mov	r9, r1
 800f536:	f7f1 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d0c0      	beq.n	800f4c0 <_strtod_l+0x8b8>
 800f53e:	e618      	b.n	800f172 <_strtod_l+0x56a>
 800f540:	fffffc02 	.word	0xfffffc02
 800f544:	7ff00000 	.word	0x7ff00000
 800f548:	39500000 	.word	0x39500000
 800f54c:	000fffff 	.word	0x000fffff
 800f550:	7fefffff 	.word	0x7fefffff
 800f554:	080110c8 	.word	0x080110c8
 800f558:	4659      	mov	r1, fp
 800f55a:	4628      	mov	r0, r5
 800f55c:	f7ff fac0 	bl	800eae0 <__ratio>
 800f560:	ec57 6b10 	vmov	r6, r7, d0
 800f564:	ee10 0a10 	vmov	r0, s0
 800f568:	2200      	movs	r2, #0
 800f56a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f56e:	4639      	mov	r1, r7
 800f570:	f7f1 fabe 	bl	8000af0 <__aeabi_dcmple>
 800f574:	2800      	cmp	r0, #0
 800f576:	d071      	beq.n	800f65c <_strtod_l+0xa54>
 800f578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d17c      	bne.n	800f678 <_strtod_l+0xa70>
 800f57e:	f1b8 0f00 	cmp.w	r8, #0
 800f582:	d15a      	bne.n	800f63a <_strtod_l+0xa32>
 800f584:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d15d      	bne.n	800f648 <_strtod_l+0xa40>
 800f58c:	4b90      	ldr	r3, [pc, #576]	; (800f7d0 <_strtod_l+0xbc8>)
 800f58e:	2200      	movs	r2, #0
 800f590:	4630      	mov	r0, r6
 800f592:	4639      	mov	r1, r7
 800f594:	f7f1 faa2 	bl	8000adc <__aeabi_dcmplt>
 800f598:	2800      	cmp	r0, #0
 800f59a:	d15c      	bne.n	800f656 <_strtod_l+0xa4e>
 800f59c:	4630      	mov	r0, r6
 800f59e:	4639      	mov	r1, r7
 800f5a0:	4b8c      	ldr	r3, [pc, #560]	; (800f7d4 <_strtod_l+0xbcc>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f7f1 f828 	bl	80005f8 <__aeabi_dmul>
 800f5a8:	4606      	mov	r6, r0
 800f5aa:	460f      	mov	r7, r1
 800f5ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f5b0:	9606      	str	r6, [sp, #24]
 800f5b2:	9307      	str	r3, [sp, #28]
 800f5b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f5bc:	4b86      	ldr	r3, [pc, #536]	; (800f7d8 <_strtod_l+0xbd0>)
 800f5be:	ea0a 0303 	and.w	r3, sl, r3
 800f5c2:	930d      	str	r3, [sp, #52]	; 0x34
 800f5c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5c6:	4b85      	ldr	r3, [pc, #532]	; (800f7dc <_strtod_l+0xbd4>)
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	f040 8090 	bne.w	800f6ee <_strtod_l+0xae6>
 800f5ce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f5d2:	ec49 8b10 	vmov	d0, r8, r9
 800f5d6:	f7ff f9b9 	bl	800e94c <__ulp>
 800f5da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5de:	ec51 0b10 	vmov	r0, r1, d0
 800f5e2:	f7f1 f809 	bl	80005f8 <__aeabi_dmul>
 800f5e6:	4642      	mov	r2, r8
 800f5e8:	464b      	mov	r3, r9
 800f5ea:	f7f0 fe4f 	bl	800028c <__adddf3>
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4979      	ldr	r1, [pc, #484]	; (800f7d8 <_strtod_l+0xbd0>)
 800f5f2:	4a7b      	ldr	r2, [pc, #492]	; (800f7e0 <_strtod_l+0xbd8>)
 800f5f4:	4019      	ands	r1, r3
 800f5f6:	4291      	cmp	r1, r2
 800f5f8:	4680      	mov	r8, r0
 800f5fa:	d944      	bls.n	800f686 <_strtod_l+0xa7e>
 800f5fc:	ee18 2a90 	vmov	r2, s17
 800f600:	4b78      	ldr	r3, [pc, #480]	; (800f7e4 <_strtod_l+0xbdc>)
 800f602:	429a      	cmp	r2, r3
 800f604:	d104      	bne.n	800f610 <_strtod_l+0xa08>
 800f606:	ee18 3a10 	vmov	r3, s16
 800f60a:	3301      	adds	r3, #1
 800f60c:	f43f ad40 	beq.w	800f090 <_strtod_l+0x488>
 800f610:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800f7e4 <_strtod_l+0xbdc>
 800f614:	f04f 38ff 	mov.w	r8, #4294967295
 800f618:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f61a:	4620      	mov	r0, r4
 800f61c:	f7fe fe6a 	bl	800e2f4 <_Bfree>
 800f620:	9905      	ldr	r1, [sp, #20]
 800f622:	4620      	mov	r0, r4
 800f624:	f7fe fe66 	bl	800e2f4 <_Bfree>
 800f628:	4659      	mov	r1, fp
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7fe fe62 	bl	800e2f4 <_Bfree>
 800f630:	4629      	mov	r1, r5
 800f632:	4620      	mov	r0, r4
 800f634:	f7fe fe5e 	bl	800e2f4 <_Bfree>
 800f638:	e609      	b.n	800f24e <_strtod_l+0x646>
 800f63a:	f1b8 0f01 	cmp.w	r8, #1
 800f63e:	d103      	bne.n	800f648 <_strtod_l+0xa40>
 800f640:	f1b9 0f00 	cmp.w	r9, #0
 800f644:	f43f ad95 	beq.w	800f172 <_strtod_l+0x56a>
 800f648:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800f7a0 <_strtod_l+0xb98>
 800f64c:	4f60      	ldr	r7, [pc, #384]	; (800f7d0 <_strtod_l+0xbc8>)
 800f64e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f652:	2600      	movs	r6, #0
 800f654:	e7ae      	b.n	800f5b4 <_strtod_l+0x9ac>
 800f656:	4f5f      	ldr	r7, [pc, #380]	; (800f7d4 <_strtod_l+0xbcc>)
 800f658:	2600      	movs	r6, #0
 800f65a:	e7a7      	b.n	800f5ac <_strtod_l+0x9a4>
 800f65c:	4b5d      	ldr	r3, [pc, #372]	; (800f7d4 <_strtod_l+0xbcc>)
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	2200      	movs	r2, #0
 800f664:	f7f0 ffc8 	bl	80005f8 <__aeabi_dmul>
 800f668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f66a:	4606      	mov	r6, r0
 800f66c:	460f      	mov	r7, r1
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d09c      	beq.n	800f5ac <_strtod_l+0x9a4>
 800f672:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f676:	e79d      	b.n	800f5b4 <_strtod_l+0x9ac>
 800f678:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f7a8 <_strtod_l+0xba0>
 800f67c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f680:	ec57 6b17 	vmov	r6, r7, d7
 800f684:	e796      	b.n	800f5b4 <_strtod_l+0x9ac>
 800f686:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f68a:	9b04      	ldr	r3, [sp, #16]
 800f68c:	46ca      	mov	sl, r9
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1c2      	bne.n	800f618 <_strtod_l+0xa10>
 800f692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f698:	0d1b      	lsrs	r3, r3, #20
 800f69a:	051b      	lsls	r3, r3, #20
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d1bb      	bne.n	800f618 <_strtod_l+0xa10>
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	f7f1 fb08 	bl	8000cb8 <__aeabi_d2lz>
 800f6a8:	f7f0 ff78 	bl	800059c <__aeabi_l2d>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	4639      	mov	r1, r7
 800f6b4:	f7f0 fde8 	bl	8000288 <__aeabi_dsub>
 800f6b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f6ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6be:	ea43 0308 	orr.w	r3, r3, r8
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	4606      	mov	r6, r0
 800f6c6:	460f      	mov	r7, r1
 800f6c8:	d054      	beq.n	800f774 <_strtod_l+0xb6c>
 800f6ca:	a339      	add	r3, pc, #228	; (adr r3, 800f7b0 <_strtod_l+0xba8>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f1 fa04 	bl	8000adc <__aeabi_dcmplt>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	f47f ace5 	bne.w	800f0a4 <_strtod_l+0x49c>
 800f6da:	a337      	add	r3, pc, #220	; (adr r3, 800f7b8 <_strtod_l+0xbb0>)
 800f6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	4639      	mov	r1, r7
 800f6e4:	f7f1 fa18 	bl	8000b18 <__aeabi_dcmpgt>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	d095      	beq.n	800f618 <_strtod_l+0xa10>
 800f6ec:	e4da      	b.n	800f0a4 <_strtod_l+0x49c>
 800f6ee:	9b04      	ldr	r3, [sp, #16]
 800f6f0:	b333      	cbz	r3, 800f740 <_strtod_l+0xb38>
 800f6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f6f8:	d822      	bhi.n	800f740 <_strtod_l+0xb38>
 800f6fa:	a331      	add	r3, pc, #196	; (adr r3, 800f7c0 <_strtod_l+0xbb8>)
 800f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f700:	4630      	mov	r0, r6
 800f702:	4639      	mov	r1, r7
 800f704:	f7f1 f9f4 	bl	8000af0 <__aeabi_dcmple>
 800f708:	b1a0      	cbz	r0, 800f734 <_strtod_l+0xb2c>
 800f70a:	4639      	mov	r1, r7
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7f1 fa4b 	bl	8000ba8 <__aeabi_d2uiz>
 800f712:	2801      	cmp	r0, #1
 800f714:	bf38      	it	cc
 800f716:	2001      	movcc	r0, #1
 800f718:	f7f0 fef4 	bl	8000504 <__aeabi_ui2d>
 800f71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f71e:	4606      	mov	r6, r0
 800f720:	460f      	mov	r7, r1
 800f722:	bb23      	cbnz	r3, 800f76e <_strtod_l+0xb66>
 800f724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f728:	9010      	str	r0, [sp, #64]	; 0x40
 800f72a:	9311      	str	r3, [sp, #68]	; 0x44
 800f72c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f730:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f738:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f73c:	1a9b      	subs	r3, r3, r2
 800f73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f740:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f744:	eeb0 0a48 	vmov.f32	s0, s16
 800f748:	eef0 0a68 	vmov.f32	s1, s17
 800f74c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f750:	f7ff f8fc 	bl	800e94c <__ulp>
 800f754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f758:	ec53 2b10 	vmov	r2, r3, d0
 800f75c:	f7f0 ff4c 	bl	80005f8 <__aeabi_dmul>
 800f760:	ec53 2b18 	vmov	r2, r3, d8
 800f764:	f7f0 fd92 	bl	800028c <__adddf3>
 800f768:	4680      	mov	r8, r0
 800f76a:	4689      	mov	r9, r1
 800f76c:	e78d      	b.n	800f68a <_strtod_l+0xa82>
 800f76e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f772:	e7db      	b.n	800f72c <_strtod_l+0xb24>
 800f774:	a314      	add	r3, pc, #80	; (adr r3, 800f7c8 <_strtod_l+0xbc0>)
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	f7f1 f9af 	bl	8000adc <__aeabi_dcmplt>
 800f77e:	e7b3      	b.n	800f6e8 <_strtod_l+0xae0>
 800f780:	2300      	movs	r3, #0
 800f782:	930a      	str	r3, [sp, #40]	; 0x28
 800f784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f788:	6013      	str	r3, [r2, #0]
 800f78a:	f7ff ba7c 	b.w	800ec86 <_strtod_l+0x7e>
 800f78e:	2a65      	cmp	r2, #101	; 0x65
 800f790:	f43f ab75 	beq.w	800ee7e <_strtod_l+0x276>
 800f794:	2a45      	cmp	r2, #69	; 0x45
 800f796:	f43f ab72 	beq.w	800ee7e <_strtod_l+0x276>
 800f79a:	2301      	movs	r3, #1
 800f79c:	f7ff bbaa 	b.w	800eef4 <_strtod_l+0x2ec>
 800f7a0:	00000000 	.word	0x00000000
 800f7a4:	bff00000 	.word	0xbff00000
 800f7a8:	00000000 	.word	0x00000000
 800f7ac:	3ff00000 	.word	0x3ff00000
 800f7b0:	94a03595 	.word	0x94a03595
 800f7b4:	3fdfffff 	.word	0x3fdfffff
 800f7b8:	35afe535 	.word	0x35afe535
 800f7bc:	3fe00000 	.word	0x3fe00000
 800f7c0:	ffc00000 	.word	0xffc00000
 800f7c4:	41dfffff 	.word	0x41dfffff
 800f7c8:	94a03595 	.word	0x94a03595
 800f7cc:	3fcfffff 	.word	0x3fcfffff
 800f7d0:	3ff00000 	.word	0x3ff00000
 800f7d4:	3fe00000 	.word	0x3fe00000
 800f7d8:	7ff00000 	.word	0x7ff00000
 800f7dc:	7fe00000 	.word	0x7fe00000
 800f7e0:	7c9fffff 	.word	0x7c9fffff
 800f7e4:	7fefffff 	.word	0x7fefffff

0800f7e8 <_strtod_r>:
 800f7e8:	4b01      	ldr	r3, [pc, #4]	; (800f7f0 <_strtod_r+0x8>)
 800f7ea:	f7ff ba0d 	b.w	800ec08 <_strtod_l>
 800f7ee:	bf00      	nop
 800f7f0:	20000070 	.word	0x20000070

0800f7f4 <__ssputs_r>:
 800f7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7f8:	688e      	ldr	r6, [r1, #8]
 800f7fa:	461f      	mov	r7, r3
 800f7fc:	42be      	cmp	r6, r7
 800f7fe:	680b      	ldr	r3, [r1, #0]
 800f800:	4682      	mov	sl, r0
 800f802:	460c      	mov	r4, r1
 800f804:	4690      	mov	r8, r2
 800f806:	d82c      	bhi.n	800f862 <__ssputs_r+0x6e>
 800f808:	898a      	ldrh	r2, [r1, #12]
 800f80a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f80e:	d026      	beq.n	800f85e <__ssputs_r+0x6a>
 800f810:	6965      	ldr	r5, [r4, #20]
 800f812:	6909      	ldr	r1, [r1, #16]
 800f814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f818:	eba3 0901 	sub.w	r9, r3, r1
 800f81c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f820:	1c7b      	adds	r3, r7, #1
 800f822:	444b      	add	r3, r9
 800f824:	106d      	asrs	r5, r5, #1
 800f826:	429d      	cmp	r5, r3
 800f828:	bf38      	it	cc
 800f82a:	461d      	movcc	r5, r3
 800f82c:	0553      	lsls	r3, r2, #21
 800f82e:	d527      	bpl.n	800f880 <__ssputs_r+0x8c>
 800f830:	4629      	mov	r1, r5
 800f832:	f7fc fc87 	bl	800c144 <_malloc_r>
 800f836:	4606      	mov	r6, r0
 800f838:	b360      	cbz	r0, 800f894 <__ssputs_r+0xa0>
 800f83a:	6921      	ldr	r1, [r4, #16]
 800f83c:	464a      	mov	r2, r9
 800f83e:	f7fd fe3c 	bl	800d4ba <memcpy>
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f84c:	81a3      	strh	r3, [r4, #12]
 800f84e:	6126      	str	r6, [r4, #16]
 800f850:	6165      	str	r5, [r4, #20]
 800f852:	444e      	add	r6, r9
 800f854:	eba5 0509 	sub.w	r5, r5, r9
 800f858:	6026      	str	r6, [r4, #0]
 800f85a:	60a5      	str	r5, [r4, #8]
 800f85c:	463e      	mov	r6, r7
 800f85e:	42be      	cmp	r6, r7
 800f860:	d900      	bls.n	800f864 <__ssputs_r+0x70>
 800f862:	463e      	mov	r6, r7
 800f864:	6820      	ldr	r0, [r4, #0]
 800f866:	4632      	mov	r2, r6
 800f868:	4641      	mov	r1, r8
 800f86a:	f000 f9c9 	bl	800fc00 <memmove>
 800f86e:	68a3      	ldr	r3, [r4, #8]
 800f870:	1b9b      	subs	r3, r3, r6
 800f872:	60a3      	str	r3, [r4, #8]
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	4433      	add	r3, r6
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	2000      	movs	r0, #0
 800f87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f880:	462a      	mov	r2, r5
 800f882:	f000 fd8e 	bl	80103a2 <_realloc_r>
 800f886:	4606      	mov	r6, r0
 800f888:	2800      	cmp	r0, #0
 800f88a:	d1e0      	bne.n	800f84e <__ssputs_r+0x5a>
 800f88c:	6921      	ldr	r1, [r4, #16]
 800f88e:	4650      	mov	r0, sl
 800f890:	f7fe fca4 	bl	800e1dc <_free_r>
 800f894:	230c      	movs	r3, #12
 800f896:	f8ca 3000 	str.w	r3, [sl]
 800f89a:	89a3      	ldrh	r3, [r4, #12]
 800f89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a6:	e7e9      	b.n	800f87c <__ssputs_r+0x88>

0800f8a8 <_svfiprintf_r>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	4698      	mov	r8, r3
 800f8ae:	898b      	ldrh	r3, [r1, #12]
 800f8b0:	061b      	lsls	r3, r3, #24
 800f8b2:	b09d      	sub	sp, #116	; 0x74
 800f8b4:	4607      	mov	r7, r0
 800f8b6:	460d      	mov	r5, r1
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	d50e      	bpl.n	800f8da <_svfiprintf_r+0x32>
 800f8bc:	690b      	ldr	r3, [r1, #16]
 800f8be:	b963      	cbnz	r3, 800f8da <_svfiprintf_r+0x32>
 800f8c0:	2140      	movs	r1, #64	; 0x40
 800f8c2:	f7fc fc3f 	bl	800c144 <_malloc_r>
 800f8c6:	6028      	str	r0, [r5, #0]
 800f8c8:	6128      	str	r0, [r5, #16]
 800f8ca:	b920      	cbnz	r0, 800f8d6 <_svfiprintf_r+0x2e>
 800f8cc:	230c      	movs	r3, #12
 800f8ce:	603b      	str	r3, [r7, #0]
 800f8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8d4:	e0d0      	b.n	800fa78 <_svfiprintf_r+0x1d0>
 800f8d6:	2340      	movs	r3, #64	; 0x40
 800f8d8:	616b      	str	r3, [r5, #20]
 800f8da:	2300      	movs	r3, #0
 800f8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f8de:	2320      	movs	r3, #32
 800f8e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8e8:	2330      	movs	r3, #48	; 0x30
 800f8ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fa90 <_svfiprintf_r+0x1e8>
 800f8ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8f2:	f04f 0901 	mov.w	r9, #1
 800f8f6:	4623      	mov	r3, r4
 800f8f8:	469a      	mov	sl, r3
 800f8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8fe:	b10a      	cbz	r2, 800f904 <_svfiprintf_r+0x5c>
 800f900:	2a25      	cmp	r2, #37	; 0x25
 800f902:	d1f9      	bne.n	800f8f8 <_svfiprintf_r+0x50>
 800f904:	ebba 0b04 	subs.w	fp, sl, r4
 800f908:	d00b      	beq.n	800f922 <_svfiprintf_r+0x7a>
 800f90a:	465b      	mov	r3, fp
 800f90c:	4622      	mov	r2, r4
 800f90e:	4629      	mov	r1, r5
 800f910:	4638      	mov	r0, r7
 800f912:	f7ff ff6f 	bl	800f7f4 <__ssputs_r>
 800f916:	3001      	adds	r0, #1
 800f918:	f000 80a9 	beq.w	800fa6e <_svfiprintf_r+0x1c6>
 800f91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f91e:	445a      	add	r2, fp
 800f920:	9209      	str	r2, [sp, #36]	; 0x24
 800f922:	f89a 3000 	ldrb.w	r3, [sl]
 800f926:	2b00      	cmp	r3, #0
 800f928:	f000 80a1 	beq.w	800fa6e <_svfiprintf_r+0x1c6>
 800f92c:	2300      	movs	r3, #0
 800f92e:	f04f 32ff 	mov.w	r2, #4294967295
 800f932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f936:	f10a 0a01 	add.w	sl, sl, #1
 800f93a:	9304      	str	r3, [sp, #16]
 800f93c:	9307      	str	r3, [sp, #28]
 800f93e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f942:	931a      	str	r3, [sp, #104]	; 0x68
 800f944:	4654      	mov	r4, sl
 800f946:	2205      	movs	r2, #5
 800f948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f94c:	4850      	ldr	r0, [pc, #320]	; (800fa90 <_svfiprintf_r+0x1e8>)
 800f94e:	f7f0 fc3f 	bl	80001d0 <memchr>
 800f952:	9a04      	ldr	r2, [sp, #16]
 800f954:	b9d8      	cbnz	r0, 800f98e <_svfiprintf_r+0xe6>
 800f956:	06d0      	lsls	r0, r2, #27
 800f958:	bf44      	itt	mi
 800f95a:	2320      	movmi	r3, #32
 800f95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f960:	0711      	lsls	r1, r2, #28
 800f962:	bf44      	itt	mi
 800f964:	232b      	movmi	r3, #43	; 0x2b
 800f966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f96a:	f89a 3000 	ldrb.w	r3, [sl]
 800f96e:	2b2a      	cmp	r3, #42	; 0x2a
 800f970:	d015      	beq.n	800f99e <_svfiprintf_r+0xf6>
 800f972:	9a07      	ldr	r2, [sp, #28]
 800f974:	4654      	mov	r4, sl
 800f976:	2000      	movs	r0, #0
 800f978:	f04f 0c0a 	mov.w	ip, #10
 800f97c:	4621      	mov	r1, r4
 800f97e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f982:	3b30      	subs	r3, #48	; 0x30
 800f984:	2b09      	cmp	r3, #9
 800f986:	d94d      	bls.n	800fa24 <_svfiprintf_r+0x17c>
 800f988:	b1b0      	cbz	r0, 800f9b8 <_svfiprintf_r+0x110>
 800f98a:	9207      	str	r2, [sp, #28]
 800f98c:	e014      	b.n	800f9b8 <_svfiprintf_r+0x110>
 800f98e:	eba0 0308 	sub.w	r3, r0, r8
 800f992:	fa09 f303 	lsl.w	r3, r9, r3
 800f996:	4313      	orrs	r3, r2
 800f998:	9304      	str	r3, [sp, #16]
 800f99a:	46a2      	mov	sl, r4
 800f99c:	e7d2      	b.n	800f944 <_svfiprintf_r+0x9c>
 800f99e:	9b03      	ldr	r3, [sp, #12]
 800f9a0:	1d19      	adds	r1, r3, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	9103      	str	r1, [sp, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	bfbb      	ittet	lt
 800f9aa:	425b      	neglt	r3, r3
 800f9ac:	f042 0202 	orrlt.w	r2, r2, #2
 800f9b0:	9307      	strge	r3, [sp, #28]
 800f9b2:	9307      	strlt	r3, [sp, #28]
 800f9b4:	bfb8      	it	lt
 800f9b6:	9204      	strlt	r2, [sp, #16]
 800f9b8:	7823      	ldrb	r3, [r4, #0]
 800f9ba:	2b2e      	cmp	r3, #46	; 0x2e
 800f9bc:	d10c      	bne.n	800f9d8 <_svfiprintf_r+0x130>
 800f9be:	7863      	ldrb	r3, [r4, #1]
 800f9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800f9c2:	d134      	bne.n	800fa2e <_svfiprintf_r+0x186>
 800f9c4:	9b03      	ldr	r3, [sp, #12]
 800f9c6:	1d1a      	adds	r2, r3, #4
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	9203      	str	r2, [sp, #12]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bfb8      	it	lt
 800f9d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9d4:	3402      	adds	r4, #2
 800f9d6:	9305      	str	r3, [sp, #20]
 800f9d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800faa0 <_svfiprintf_r+0x1f8>
 800f9dc:	7821      	ldrb	r1, [r4, #0]
 800f9de:	2203      	movs	r2, #3
 800f9e0:	4650      	mov	r0, sl
 800f9e2:	f7f0 fbf5 	bl	80001d0 <memchr>
 800f9e6:	b138      	cbz	r0, 800f9f8 <_svfiprintf_r+0x150>
 800f9e8:	9b04      	ldr	r3, [sp, #16]
 800f9ea:	eba0 000a 	sub.w	r0, r0, sl
 800f9ee:	2240      	movs	r2, #64	; 0x40
 800f9f0:	4082      	lsls	r2, r0
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	3401      	adds	r4, #1
 800f9f6:	9304      	str	r3, [sp, #16]
 800f9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9fc:	4825      	ldr	r0, [pc, #148]	; (800fa94 <_svfiprintf_r+0x1ec>)
 800f9fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa02:	2206      	movs	r2, #6
 800fa04:	f7f0 fbe4 	bl	80001d0 <memchr>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d038      	beq.n	800fa7e <_svfiprintf_r+0x1d6>
 800fa0c:	4b22      	ldr	r3, [pc, #136]	; (800fa98 <_svfiprintf_r+0x1f0>)
 800fa0e:	bb1b      	cbnz	r3, 800fa58 <_svfiprintf_r+0x1b0>
 800fa10:	9b03      	ldr	r3, [sp, #12]
 800fa12:	3307      	adds	r3, #7
 800fa14:	f023 0307 	bic.w	r3, r3, #7
 800fa18:	3308      	adds	r3, #8
 800fa1a:	9303      	str	r3, [sp, #12]
 800fa1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa1e:	4433      	add	r3, r6
 800fa20:	9309      	str	r3, [sp, #36]	; 0x24
 800fa22:	e768      	b.n	800f8f6 <_svfiprintf_r+0x4e>
 800fa24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa28:	460c      	mov	r4, r1
 800fa2a:	2001      	movs	r0, #1
 800fa2c:	e7a6      	b.n	800f97c <_svfiprintf_r+0xd4>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	3401      	adds	r4, #1
 800fa32:	9305      	str	r3, [sp, #20]
 800fa34:	4619      	mov	r1, r3
 800fa36:	f04f 0c0a 	mov.w	ip, #10
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa40:	3a30      	subs	r2, #48	; 0x30
 800fa42:	2a09      	cmp	r2, #9
 800fa44:	d903      	bls.n	800fa4e <_svfiprintf_r+0x1a6>
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d0c6      	beq.n	800f9d8 <_svfiprintf_r+0x130>
 800fa4a:	9105      	str	r1, [sp, #20]
 800fa4c:	e7c4      	b.n	800f9d8 <_svfiprintf_r+0x130>
 800fa4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa52:	4604      	mov	r4, r0
 800fa54:	2301      	movs	r3, #1
 800fa56:	e7f0      	b.n	800fa3a <_svfiprintf_r+0x192>
 800fa58:	ab03      	add	r3, sp, #12
 800fa5a:	9300      	str	r3, [sp, #0]
 800fa5c:	462a      	mov	r2, r5
 800fa5e:	4b0f      	ldr	r3, [pc, #60]	; (800fa9c <_svfiprintf_r+0x1f4>)
 800fa60:	a904      	add	r1, sp, #16
 800fa62:	4638      	mov	r0, r7
 800fa64:	f7fc fd28 	bl	800c4b8 <_printf_float>
 800fa68:	1c42      	adds	r2, r0, #1
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	d1d6      	bne.n	800fa1c <_svfiprintf_r+0x174>
 800fa6e:	89ab      	ldrh	r3, [r5, #12]
 800fa70:	065b      	lsls	r3, r3, #25
 800fa72:	f53f af2d 	bmi.w	800f8d0 <_svfiprintf_r+0x28>
 800fa76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa78:	b01d      	add	sp, #116	; 0x74
 800fa7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa7e:	ab03      	add	r3, sp, #12
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	462a      	mov	r2, r5
 800fa84:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <_svfiprintf_r+0x1f4>)
 800fa86:	a904      	add	r1, sp, #16
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7fc ffb9 	bl	800ca00 <_printf_i>
 800fa8e:	e7eb      	b.n	800fa68 <_svfiprintf_r+0x1c0>
 800fa90:	080110f0 	.word	0x080110f0
 800fa94:	080110fa 	.word	0x080110fa
 800fa98:	0800c4b9 	.word	0x0800c4b9
 800fa9c:	0800f7f5 	.word	0x0800f7f5
 800faa0:	080110f6 	.word	0x080110f6

0800faa4 <__sflush_r>:
 800faa4:	898a      	ldrh	r2, [r1, #12]
 800faa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faaa:	4605      	mov	r5, r0
 800faac:	0710      	lsls	r0, r2, #28
 800faae:	460c      	mov	r4, r1
 800fab0:	d458      	bmi.n	800fb64 <__sflush_r+0xc0>
 800fab2:	684b      	ldr	r3, [r1, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	dc05      	bgt.n	800fac4 <__sflush_r+0x20>
 800fab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800faba:	2b00      	cmp	r3, #0
 800fabc:	dc02      	bgt.n	800fac4 <__sflush_r+0x20>
 800fabe:	2000      	movs	r0, #0
 800fac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fac6:	2e00      	cmp	r6, #0
 800fac8:	d0f9      	beq.n	800fabe <__sflush_r+0x1a>
 800faca:	2300      	movs	r3, #0
 800facc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fad0:	682f      	ldr	r7, [r5, #0]
 800fad2:	6a21      	ldr	r1, [r4, #32]
 800fad4:	602b      	str	r3, [r5, #0]
 800fad6:	d032      	beq.n	800fb3e <__sflush_r+0x9a>
 800fad8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fada:	89a3      	ldrh	r3, [r4, #12]
 800fadc:	075a      	lsls	r2, r3, #29
 800fade:	d505      	bpl.n	800faec <__sflush_r+0x48>
 800fae0:	6863      	ldr	r3, [r4, #4]
 800fae2:	1ac0      	subs	r0, r0, r3
 800fae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fae6:	b10b      	cbz	r3, 800faec <__sflush_r+0x48>
 800fae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800faea:	1ac0      	subs	r0, r0, r3
 800faec:	2300      	movs	r3, #0
 800faee:	4602      	mov	r2, r0
 800faf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800faf2:	6a21      	ldr	r1, [r4, #32]
 800faf4:	4628      	mov	r0, r5
 800faf6:	47b0      	blx	r6
 800faf8:	1c43      	adds	r3, r0, #1
 800fafa:	89a3      	ldrh	r3, [r4, #12]
 800fafc:	d106      	bne.n	800fb0c <__sflush_r+0x68>
 800fafe:	6829      	ldr	r1, [r5, #0]
 800fb00:	291d      	cmp	r1, #29
 800fb02:	d82b      	bhi.n	800fb5c <__sflush_r+0xb8>
 800fb04:	4a29      	ldr	r2, [pc, #164]	; (800fbac <__sflush_r+0x108>)
 800fb06:	410a      	asrs	r2, r1
 800fb08:	07d6      	lsls	r6, r2, #31
 800fb0a:	d427      	bmi.n	800fb5c <__sflush_r+0xb8>
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	6062      	str	r2, [r4, #4]
 800fb10:	04d9      	lsls	r1, r3, #19
 800fb12:	6922      	ldr	r2, [r4, #16]
 800fb14:	6022      	str	r2, [r4, #0]
 800fb16:	d504      	bpl.n	800fb22 <__sflush_r+0x7e>
 800fb18:	1c42      	adds	r2, r0, #1
 800fb1a:	d101      	bne.n	800fb20 <__sflush_r+0x7c>
 800fb1c:	682b      	ldr	r3, [r5, #0]
 800fb1e:	b903      	cbnz	r3, 800fb22 <__sflush_r+0x7e>
 800fb20:	6560      	str	r0, [r4, #84]	; 0x54
 800fb22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb24:	602f      	str	r7, [r5, #0]
 800fb26:	2900      	cmp	r1, #0
 800fb28:	d0c9      	beq.n	800fabe <__sflush_r+0x1a>
 800fb2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb2e:	4299      	cmp	r1, r3
 800fb30:	d002      	beq.n	800fb38 <__sflush_r+0x94>
 800fb32:	4628      	mov	r0, r5
 800fb34:	f7fe fb52 	bl	800e1dc <_free_r>
 800fb38:	2000      	movs	r0, #0
 800fb3a:	6360      	str	r0, [r4, #52]	; 0x34
 800fb3c:	e7c0      	b.n	800fac0 <__sflush_r+0x1c>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	4628      	mov	r0, r5
 800fb42:	47b0      	blx	r6
 800fb44:	1c41      	adds	r1, r0, #1
 800fb46:	d1c8      	bne.n	800fada <__sflush_r+0x36>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d0c5      	beq.n	800fada <__sflush_r+0x36>
 800fb4e:	2b1d      	cmp	r3, #29
 800fb50:	d001      	beq.n	800fb56 <__sflush_r+0xb2>
 800fb52:	2b16      	cmp	r3, #22
 800fb54:	d101      	bne.n	800fb5a <__sflush_r+0xb6>
 800fb56:	602f      	str	r7, [r5, #0]
 800fb58:	e7b1      	b.n	800fabe <__sflush_r+0x1a>
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	e7ad      	b.n	800fac0 <__sflush_r+0x1c>
 800fb64:	690f      	ldr	r7, [r1, #16]
 800fb66:	2f00      	cmp	r7, #0
 800fb68:	d0a9      	beq.n	800fabe <__sflush_r+0x1a>
 800fb6a:	0793      	lsls	r3, r2, #30
 800fb6c:	680e      	ldr	r6, [r1, #0]
 800fb6e:	bf08      	it	eq
 800fb70:	694b      	ldreq	r3, [r1, #20]
 800fb72:	600f      	str	r7, [r1, #0]
 800fb74:	bf18      	it	ne
 800fb76:	2300      	movne	r3, #0
 800fb78:	eba6 0807 	sub.w	r8, r6, r7
 800fb7c:	608b      	str	r3, [r1, #8]
 800fb7e:	f1b8 0f00 	cmp.w	r8, #0
 800fb82:	dd9c      	ble.n	800fabe <__sflush_r+0x1a>
 800fb84:	6a21      	ldr	r1, [r4, #32]
 800fb86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb88:	4643      	mov	r3, r8
 800fb8a:	463a      	mov	r2, r7
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	47b0      	blx	r6
 800fb90:	2800      	cmp	r0, #0
 800fb92:	dc06      	bgt.n	800fba2 <__sflush_r+0xfe>
 800fb94:	89a3      	ldrh	r3, [r4, #12]
 800fb96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fba0:	e78e      	b.n	800fac0 <__sflush_r+0x1c>
 800fba2:	4407      	add	r7, r0
 800fba4:	eba8 0800 	sub.w	r8, r8, r0
 800fba8:	e7e9      	b.n	800fb7e <__sflush_r+0xda>
 800fbaa:	bf00      	nop
 800fbac:	dfbffffe 	.word	0xdfbffffe

0800fbb0 <_fflush_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	690b      	ldr	r3, [r1, #16]
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	460c      	mov	r4, r1
 800fbb8:	b913      	cbnz	r3, 800fbc0 <_fflush_r+0x10>
 800fbba:	2500      	movs	r5, #0
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	b118      	cbz	r0, 800fbca <_fflush_r+0x1a>
 800fbc2:	6a03      	ldr	r3, [r0, #32]
 800fbc4:	b90b      	cbnz	r3, 800fbca <_fflush_r+0x1a>
 800fbc6:	f7fd fad9 	bl	800d17c <__sinit>
 800fbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0f3      	beq.n	800fbba <_fflush_r+0xa>
 800fbd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbd4:	07d0      	lsls	r0, r2, #31
 800fbd6:	d404      	bmi.n	800fbe2 <_fflush_r+0x32>
 800fbd8:	0599      	lsls	r1, r3, #22
 800fbda:	d402      	bmi.n	800fbe2 <_fflush_r+0x32>
 800fbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbde:	f7fd fc6a 	bl	800d4b6 <__retarget_lock_acquire_recursive>
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	f7ff ff5d 	bl	800faa4 <__sflush_r>
 800fbea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbec:	07da      	lsls	r2, r3, #31
 800fbee:	4605      	mov	r5, r0
 800fbf0:	d4e4      	bmi.n	800fbbc <_fflush_r+0xc>
 800fbf2:	89a3      	ldrh	r3, [r4, #12]
 800fbf4:	059b      	lsls	r3, r3, #22
 800fbf6:	d4e1      	bmi.n	800fbbc <_fflush_r+0xc>
 800fbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbfa:	f7fd fc5d 	bl	800d4b8 <__retarget_lock_release_recursive>
 800fbfe:	e7dd      	b.n	800fbbc <_fflush_r+0xc>

0800fc00 <memmove>:
 800fc00:	4288      	cmp	r0, r1
 800fc02:	b510      	push	{r4, lr}
 800fc04:	eb01 0402 	add.w	r4, r1, r2
 800fc08:	d902      	bls.n	800fc10 <memmove+0x10>
 800fc0a:	4284      	cmp	r4, r0
 800fc0c:	4623      	mov	r3, r4
 800fc0e:	d807      	bhi.n	800fc20 <memmove+0x20>
 800fc10:	1e43      	subs	r3, r0, #1
 800fc12:	42a1      	cmp	r1, r4
 800fc14:	d008      	beq.n	800fc28 <memmove+0x28>
 800fc16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc1e:	e7f8      	b.n	800fc12 <memmove+0x12>
 800fc20:	4402      	add	r2, r0
 800fc22:	4601      	mov	r1, r0
 800fc24:	428a      	cmp	r2, r1
 800fc26:	d100      	bne.n	800fc2a <memmove+0x2a>
 800fc28:	bd10      	pop	{r4, pc}
 800fc2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc32:	e7f7      	b.n	800fc24 <memmove+0x24>

0800fc34 <strncmp>:
 800fc34:	b510      	push	{r4, lr}
 800fc36:	b16a      	cbz	r2, 800fc54 <strncmp+0x20>
 800fc38:	3901      	subs	r1, #1
 800fc3a:	1884      	adds	r4, r0, r2
 800fc3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d103      	bne.n	800fc50 <strncmp+0x1c>
 800fc48:	42a0      	cmp	r0, r4
 800fc4a:	d001      	beq.n	800fc50 <strncmp+0x1c>
 800fc4c:	2a00      	cmp	r2, #0
 800fc4e:	d1f5      	bne.n	800fc3c <strncmp+0x8>
 800fc50:	1ad0      	subs	r0, r2, r3
 800fc52:	bd10      	pop	{r4, pc}
 800fc54:	4610      	mov	r0, r2
 800fc56:	e7fc      	b.n	800fc52 <strncmp+0x1e>

0800fc58 <nan>:
 800fc58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc60 <nan+0x8>
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	00000000 	.word	0x00000000
 800fc64:	7ff80000 	.word	0x7ff80000

0800fc68 <__assert_func>:
 800fc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc6a:	4614      	mov	r4, r2
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	4b09      	ldr	r3, [pc, #36]	; (800fc94 <__assert_func+0x2c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4605      	mov	r5, r0
 800fc74:	68d8      	ldr	r0, [r3, #12]
 800fc76:	b14c      	cbz	r4, 800fc8c <__assert_func+0x24>
 800fc78:	4b07      	ldr	r3, [pc, #28]	; (800fc98 <__assert_func+0x30>)
 800fc7a:	9100      	str	r1, [sp, #0]
 800fc7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc80:	4906      	ldr	r1, [pc, #24]	; (800fc9c <__assert_func+0x34>)
 800fc82:	462b      	mov	r3, r5
 800fc84:	f000 fbca 	bl	801041c <fiprintf>
 800fc88:	f000 fbda 	bl	8010440 <abort>
 800fc8c:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <__assert_func+0x38>)
 800fc8e:	461c      	mov	r4, r3
 800fc90:	e7f3      	b.n	800fc7a <__assert_func+0x12>
 800fc92:	bf00      	nop
 800fc94:	2000006c 	.word	0x2000006c
 800fc98:	08011109 	.word	0x08011109
 800fc9c:	08011116 	.word	0x08011116
 800fca0:	08011144 	.word	0x08011144

0800fca4 <_calloc_r>:
 800fca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fca6:	fba1 2402 	umull	r2, r4, r1, r2
 800fcaa:	b94c      	cbnz	r4, 800fcc0 <_calloc_r+0x1c>
 800fcac:	4611      	mov	r1, r2
 800fcae:	9201      	str	r2, [sp, #4]
 800fcb0:	f7fc fa48 	bl	800c144 <_malloc_r>
 800fcb4:	9a01      	ldr	r2, [sp, #4]
 800fcb6:	4605      	mov	r5, r0
 800fcb8:	b930      	cbnz	r0, 800fcc8 <_calloc_r+0x24>
 800fcba:	4628      	mov	r0, r5
 800fcbc:	b003      	add	sp, #12
 800fcbe:	bd30      	pop	{r4, r5, pc}
 800fcc0:	220c      	movs	r2, #12
 800fcc2:	6002      	str	r2, [r0, #0]
 800fcc4:	2500      	movs	r5, #0
 800fcc6:	e7f8      	b.n	800fcba <_calloc_r+0x16>
 800fcc8:	4621      	mov	r1, r4
 800fcca:	f7fd faf0 	bl	800d2ae <memset>
 800fcce:	e7f4      	b.n	800fcba <_calloc_r+0x16>

0800fcd0 <rshift>:
 800fcd0:	6903      	ldr	r3, [r0, #16]
 800fcd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fcd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcda:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fcde:	f100 0414 	add.w	r4, r0, #20
 800fce2:	dd45      	ble.n	800fd70 <rshift+0xa0>
 800fce4:	f011 011f 	ands.w	r1, r1, #31
 800fce8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fcec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fcf0:	d10c      	bne.n	800fd0c <rshift+0x3c>
 800fcf2:	f100 0710 	add.w	r7, r0, #16
 800fcf6:	4629      	mov	r1, r5
 800fcf8:	42b1      	cmp	r1, r6
 800fcfa:	d334      	bcc.n	800fd66 <rshift+0x96>
 800fcfc:	1a9b      	subs	r3, r3, r2
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	1eea      	subs	r2, r5, #3
 800fd02:	4296      	cmp	r6, r2
 800fd04:	bf38      	it	cc
 800fd06:	2300      	movcc	r3, #0
 800fd08:	4423      	add	r3, r4
 800fd0a:	e015      	b.n	800fd38 <rshift+0x68>
 800fd0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd10:	f1c1 0820 	rsb	r8, r1, #32
 800fd14:	40cf      	lsrs	r7, r1
 800fd16:	f105 0e04 	add.w	lr, r5, #4
 800fd1a:	46a1      	mov	r9, r4
 800fd1c:	4576      	cmp	r6, lr
 800fd1e:	46f4      	mov	ip, lr
 800fd20:	d815      	bhi.n	800fd4e <rshift+0x7e>
 800fd22:	1a9a      	subs	r2, r3, r2
 800fd24:	0092      	lsls	r2, r2, #2
 800fd26:	3a04      	subs	r2, #4
 800fd28:	3501      	adds	r5, #1
 800fd2a:	42ae      	cmp	r6, r5
 800fd2c:	bf38      	it	cc
 800fd2e:	2200      	movcc	r2, #0
 800fd30:	18a3      	adds	r3, r4, r2
 800fd32:	50a7      	str	r7, [r4, r2]
 800fd34:	b107      	cbz	r7, 800fd38 <rshift+0x68>
 800fd36:	3304      	adds	r3, #4
 800fd38:	1b1a      	subs	r2, r3, r4
 800fd3a:	42a3      	cmp	r3, r4
 800fd3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd40:	bf08      	it	eq
 800fd42:	2300      	moveq	r3, #0
 800fd44:	6102      	str	r2, [r0, #16]
 800fd46:	bf08      	it	eq
 800fd48:	6143      	streq	r3, [r0, #20]
 800fd4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd4e:	f8dc c000 	ldr.w	ip, [ip]
 800fd52:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd56:	ea4c 0707 	orr.w	r7, ip, r7
 800fd5a:	f849 7b04 	str.w	r7, [r9], #4
 800fd5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd62:	40cf      	lsrs	r7, r1
 800fd64:	e7da      	b.n	800fd1c <rshift+0x4c>
 800fd66:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd6e:	e7c3      	b.n	800fcf8 <rshift+0x28>
 800fd70:	4623      	mov	r3, r4
 800fd72:	e7e1      	b.n	800fd38 <rshift+0x68>

0800fd74 <__hexdig_fun>:
 800fd74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fd78:	2b09      	cmp	r3, #9
 800fd7a:	d802      	bhi.n	800fd82 <__hexdig_fun+0xe>
 800fd7c:	3820      	subs	r0, #32
 800fd7e:	b2c0      	uxtb	r0, r0
 800fd80:	4770      	bx	lr
 800fd82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fd86:	2b05      	cmp	r3, #5
 800fd88:	d801      	bhi.n	800fd8e <__hexdig_fun+0x1a>
 800fd8a:	3847      	subs	r0, #71	; 0x47
 800fd8c:	e7f7      	b.n	800fd7e <__hexdig_fun+0xa>
 800fd8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fd92:	2b05      	cmp	r3, #5
 800fd94:	d801      	bhi.n	800fd9a <__hexdig_fun+0x26>
 800fd96:	3827      	subs	r0, #39	; 0x27
 800fd98:	e7f1      	b.n	800fd7e <__hexdig_fun+0xa>
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	4770      	bx	lr
	...

0800fda0 <__gethex>:
 800fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda4:	4617      	mov	r7, r2
 800fda6:	680a      	ldr	r2, [r1, #0]
 800fda8:	b085      	sub	sp, #20
 800fdaa:	f102 0b02 	add.w	fp, r2, #2
 800fdae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fdb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fdb6:	4681      	mov	r9, r0
 800fdb8:	468a      	mov	sl, r1
 800fdba:	9302      	str	r3, [sp, #8]
 800fdbc:	32fe      	adds	r2, #254	; 0xfe
 800fdbe:	eb02 030b 	add.w	r3, r2, fp
 800fdc2:	46d8      	mov	r8, fp
 800fdc4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fdc8:	9301      	str	r3, [sp, #4]
 800fdca:	2830      	cmp	r0, #48	; 0x30
 800fdcc:	d0f7      	beq.n	800fdbe <__gethex+0x1e>
 800fdce:	f7ff ffd1 	bl	800fd74 <__hexdig_fun>
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d138      	bne.n	800fe4a <__gethex+0xaa>
 800fdd8:	49a7      	ldr	r1, [pc, #668]	; (8010078 <__gethex+0x2d8>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	4640      	mov	r0, r8
 800fdde:	f7ff ff29 	bl	800fc34 <strncmp>
 800fde2:	4606      	mov	r6, r0
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d169      	bne.n	800febc <__gethex+0x11c>
 800fde8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fdec:	465d      	mov	r5, fp
 800fdee:	f7ff ffc1 	bl	800fd74 <__hexdig_fun>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d064      	beq.n	800fec0 <__gethex+0x120>
 800fdf6:	465a      	mov	r2, fp
 800fdf8:	7810      	ldrb	r0, [r2, #0]
 800fdfa:	2830      	cmp	r0, #48	; 0x30
 800fdfc:	4690      	mov	r8, r2
 800fdfe:	f102 0201 	add.w	r2, r2, #1
 800fe02:	d0f9      	beq.n	800fdf8 <__gethex+0x58>
 800fe04:	f7ff ffb6 	bl	800fd74 <__hexdig_fun>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	fab0 f480 	clz	r4, r0
 800fe0e:	0964      	lsrs	r4, r4, #5
 800fe10:	465e      	mov	r6, fp
 800fe12:	9301      	str	r3, [sp, #4]
 800fe14:	4642      	mov	r2, r8
 800fe16:	4615      	mov	r5, r2
 800fe18:	3201      	adds	r2, #1
 800fe1a:	7828      	ldrb	r0, [r5, #0]
 800fe1c:	f7ff ffaa 	bl	800fd74 <__hexdig_fun>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d1f8      	bne.n	800fe16 <__gethex+0x76>
 800fe24:	4994      	ldr	r1, [pc, #592]	; (8010078 <__gethex+0x2d8>)
 800fe26:	2201      	movs	r2, #1
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f7ff ff03 	bl	800fc34 <strncmp>
 800fe2e:	b978      	cbnz	r0, 800fe50 <__gethex+0xb0>
 800fe30:	b946      	cbnz	r6, 800fe44 <__gethex+0xa4>
 800fe32:	1c6e      	adds	r6, r5, #1
 800fe34:	4632      	mov	r2, r6
 800fe36:	4615      	mov	r5, r2
 800fe38:	3201      	adds	r2, #1
 800fe3a:	7828      	ldrb	r0, [r5, #0]
 800fe3c:	f7ff ff9a 	bl	800fd74 <__hexdig_fun>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	d1f8      	bne.n	800fe36 <__gethex+0x96>
 800fe44:	1b73      	subs	r3, r6, r5
 800fe46:	009e      	lsls	r6, r3, #2
 800fe48:	e004      	b.n	800fe54 <__gethex+0xb4>
 800fe4a:	2400      	movs	r4, #0
 800fe4c:	4626      	mov	r6, r4
 800fe4e:	e7e1      	b.n	800fe14 <__gethex+0x74>
 800fe50:	2e00      	cmp	r6, #0
 800fe52:	d1f7      	bne.n	800fe44 <__gethex+0xa4>
 800fe54:	782b      	ldrb	r3, [r5, #0]
 800fe56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe5a:	2b50      	cmp	r3, #80	; 0x50
 800fe5c:	d13d      	bne.n	800feda <__gethex+0x13a>
 800fe5e:	786b      	ldrb	r3, [r5, #1]
 800fe60:	2b2b      	cmp	r3, #43	; 0x2b
 800fe62:	d02f      	beq.n	800fec4 <__gethex+0x124>
 800fe64:	2b2d      	cmp	r3, #45	; 0x2d
 800fe66:	d031      	beq.n	800fecc <__gethex+0x12c>
 800fe68:	1c69      	adds	r1, r5, #1
 800fe6a:	f04f 0b00 	mov.w	fp, #0
 800fe6e:	7808      	ldrb	r0, [r1, #0]
 800fe70:	f7ff ff80 	bl	800fd74 <__hexdig_fun>
 800fe74:	1e42      	subs	r2, r0, #1
 800fe76:	b2d2      	uxtb	r2, r2
 800fe78:	2a18      	cmp	r2, #24
 800fe7a:	d82e      	bhi.n	800feda <__gethex+0x13a>
 800fe7c:	f1a0 0210 	sub.w	r2, r0, #16
 800fe80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fe84:	f7ff ff76 	bl	800fd74 <__hexdig_fun>
 800fe88:	f100 3cff 	add.w	ip, r0, #4294967295
 800fe8c:	fa5f fc8c 	uxtb.w	ip, ip
 800fe90:	f1bc 0f18 	cmp.w	ip, #24
 800fe94:	d91d      	bls.n	800fed2 <__gethex+0x132>
 800fe96:	f1bb 0f00 	cmp.w	fp, #0
 800fe9a:	d000      	beq.n	800fe9e <__gethex+0xfe>
 800fe9c:	4252      	negs	r2, r2
 800fe9e:	4416      	add	r6, r2
 800fea0:	f8ca 1000 	str.w	r1, [sl]
 800fea4:	b1dc      	cbz	r4, 800fede <__gethex+0x13e>
 800fea6:	9b01      	ldr	r3, [sp, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	bf14      	ite	ne
 800feac:	f04f 0800 	movne.w	r8, #0
 800feb0:	f04f 0806 	moveq.w	r8, #6
 800feb4:	4640      	mov	r0, r8
 800feb6:	b005      	add	sp, #20
 800feb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800febc:	4645      	mov	r5, r8
 800febe:	4626      	mov	r6, r4
 800fec0:	2401      	movs	r4, #1
 800fec2:	e7c7      	b.n	800fe54 <__gethex+0xb4>
 800fec4:	f04f 0b00 	mov.w	fp, #0
 800fec8:	1ca9      	adds	r1, r5, #2
 800feca:	e7d0      	b.n	800fe6e <__gethex+0xce>
 800fecc:	f04f 0b01 	mov.w	fp, #1
 800fed0:	e7fa      	b.n	800fec8 <__gethex+0x128>
 800fed2:	230a      	movs	r3, #10
 800fed4:	fb03 0002 	mla	r0, r3, r2, r0
 800fed8:	e7d0      	b.n	800fe7c <__gethex+0xdc>
 800feda:	4629      	mov	r1, r5
 800fedc:	e7e0      	b.n	800fea0 <__gethex+0x100>
 800fede:	eba5 0308 	sub.w	r3, r5, r8
 800fee2:	3b01      	subs	r3, #1
 800fee4:	4621      	mov	r1, r4
 800fee6:	2b07      	cmp	r3, #7
 800fee8:	dc0a      	bgt.n	800ff00 <__gethex+0x160>
 800feea:	4648      	mov	r0, r9
 800feec:	f7fe f9c2 	bl	800e274 <_Balloc>
 800fef0:	4604      	mov	r4, r0
 800fef2:	b940      	cbnz	r0, 800ff06 <__gethex+0x166>
 800fef4:	4b61      	ldr	r3, [pc, #388]	; (801007c <__gethex+0x2dc>)
 800fef6:	4602      	mov	r2, r0
 800fef8:	21e4      	movs	r1, #228	; 0xe4
 800fefa:	4861      	ldr	r0, [pc, #388]	; (8010080 <__gethex+0x2e0>)
 800fefc:	f7ff feb4 	bl	800fc68 <__assert_func>
 800ff00:	3101      	adds	r1, #1
 800ff02:	105b      	asrs	r3, r3, #1
 800ff04:	e7ef      	b.n	800fee6 <__gethex+0x146>
 800ff06:	f100 0a14 	add.w	sl, r0, #20
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	495a      	ldr	r1, [pc, #360]	; (8010078 <__gethex+0x2d8>)
 800ff0e:	f8cd a004 	str.w	sl, [sp, #4]
 800ff12:	469b      	mov	fp, r3
 800ff14:	45a8      	cmp	r8, r5
 800ff16:	d342      	bcc.n	800ff9e <__gethex+0x1fe>
 800ff18:	9801      	ldr	r0, [sp, #4]
 800ff1a:	f840 bb04 	str.w	fp, [r0], #4
 800ff1e:	eba0 000a 	sub.w	r0, r0, sl
 800ff22:	1080      	asrs	r0, r0, #2
 800ff24:	6120      	str	r0, [r4, #16]
 800ff26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ff2a:	4658      	mov	r0, fp
 800ff2c:	f7fe fa94 	bl	800e458 <__hi0bits>
 800ff30:	683d      	ldr	r5, [r7, #0]
 800ff32:	eba8 0000 	sub.w	r0, r8, r0
 800ff36:	42a8      	cmp	r0, r5
 800ff38:	dd59      	ble.n	800ffee <__gethex+0x24e>
 800ff3a:	eba0 0805 	sub.w	r8, r0, r5
 800ff3e:	4641      	mov	r1, r8
 800ff40:	4620      	mov	r0, r4
 800ff42:	f7fe fe23 	bl	800eb8c <__any_on>
 800ff46:	4683      	mov	fp, r0
 800ff48:	b1b8      	cbz	r0, 800ff7a <__gethex+0x1da>
 800ff4a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ff4e:	1159      	asrs	r1, r3, #5
 800ff50:	f003 021f 	and.w	r2, r3, #31
 800ff54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ff58:	f04f 0b01 	mov.w	fp, #1
 800ff5c:	fa0b f202 	lsl.w	r2, fp, r2
 800ff60:	420a      	tst	r2, r1
 800ff62:	d00a      	beq.n	800ff7a <__gethex+0x1da>
 800ff64:	455b      	cmp	r3, fp
 800ff66:	dd06      	ble.n	800ff76 <__gethex+0x1d6>
 800ff68:	f1a8 0102 	sub.w	r1, r8, #2
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7fe fe0d 	bl	800eb8c <__any_on>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d138      	bne.n	800ffe8 <__gethex+0x248>
 800ff76:	f04f 0b02 	mov.w	fp, #2
 800ff7a:	4641      	mov	r1, r8
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	f7ff fea7 	bl	800fcd0 <rshift>
 800ff82:	4446      	add	r6, r8
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	42b3      	cmp	r3, r6
 800ff88:	da41      	bge.n	801000e <__gethex+0x26e>
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	4648      	mov	r0, r9
 800ff8e:	f7fe f9b1 	bl	800e2f4 <_Bfree>
 800ff92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff94:	2300      	movs	r3, #0
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ff9c:	e78a      	b.n	800feb4 <__gethex+0x114>
 800ff9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ffa2:	2a2e      	cmp	r2, #46	; 0x2e
 800ffa4:	d014      	beq.n	800ffd0 <__gethex+0x230>
 800ffa6:	2b20      	cmp	r3, #32
 800ffa8:	d106      	bne.n	800ffb8 <__gethex+0x218>
 800ffaa:	9b01      	ldr	r3, [sp, #4]
 800ffac:	f843 bb04 	str.w	fp, [r3], #4
 800ffb0:	f04f 0b00 	mov.w	fp, #0
 800ffb4:	9301      	str	r3, [sp, #4]
 800ffb6:	465b      	mov	r3, fp
 800ffb8:	7828      	ldrb	r0, [r5, #0]
 800ffba:	9303      	str	r3, [sp, #12]
 800ffbc:	f7ff feda 	bl	800fd74 <__hexdig_fun>
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	f000 000f 	and.w	r0, r0, #15
 800ffc6:	4098      	lsls	r0, r3
 800ffc8:	ea4b 0b00 	orr.w	fp, fp, r0
 800ffcc:	3304      	adds	r3, #4
 800ffce:	e7a1      	b.n	800ff14 <__gethex+0x174>
 800ffd0:	45a8      	cmp	r8, r5
 800ffd2:	d8e8      	bhi.n	800ffa6 <__gethex+0x206>
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	9303      	str	r3, [sp, #12]
 800ffda:	f7ff fe2b 	bl	800fc34 <strncmp>
 800ffde:	4926      	ldr	r1, [pc, #152]	; (8010078 <__gethex+0x2d8>)
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d1df      	bne.n	800ffa6 <__gethex+0x206>
 800ffe6:	e795      	b.n	800ff14 <__gethex+0x174>
 800ffe8:	f04f 0b03 	mov.w	fp, #3
 800ffec:	e7c5      	b.n	800ff7a <__gethex+0x1da>
 800ffee:	da0b      	bge.n	8010008 <__gethex+0x268>
 800fff0:	eba5 0800 	sub.w	r8, r5, r0
 800fff4:	4621      	mov	r1, r4
 800fff6:	4642      	mov	r2, r8
 800fff8:	4648      	mov	r0, r9
 800fffa:	f7fe fb95 	bl	800e728 <__lshift>
 800fffe:	eba6 0608 	sub.w	r6, r6, r8
 8010002:	4604      	mov	r4, r0
 8010004:	f100 0a14 	add.w	sl, r0, #20
 8010008:	f04f 0b00 	mov.w	fp, #0
 801000c:	e7ba      	b.n	800ff84 <__gethex+0x1e4>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	42b3      	cmp	r3, r6
 8010012:	dd73      	ble.n	80100fc <__gethex+0x35c>
 8010014:	1b9e      	subs	r6, r3, r6
 8010016:	42b5      	cmp	r5, r6
 8010018:	dc34      	bgt.n	8010084 <__gethex+0x2e4>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2b02      	cmp	r3, #2
 801001e:	d023      	beq.n	8010068 <__gethex+0x2c8>
 8010020:	2b03      	cmp	r3, #3
 8010022:	d025      	beq.n	8010070 <__gethex+0x2d0>
 8010024:	2b01      	cmp	r3, #1
 8010026:	d115      	bne.n	8010054 <__gethex+0x2b4>
 8010028:	42b5      	cmp	r5, r6
 801002a:	d113      	bne.n	8010054 <__gethex+0x2b4>
 801002c:	2d01      	cmp	r5, #1
 801002e:	d10b      	bne.n	8010048 <__gethex+0x2a8>
 8010030:	9a02      	ldr	r2, [sp, #8]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	2301      	movs	r3, #1
 8010038:	6123      	str	r3, [r4, #16]
 801003a:	f8ca 3000 	str.w	r3, [sl]
 801003e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010040:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010044:	601c      	str	r4, [r3, #0]
 8010046:	e735      	b.n	800feb4 <__gethex+0x114>
 8010048:	1e69      	subs	r1, r5, #1
 801004a:	4620      	mov	r0, r4
 801004c:	f7fe fd9e 	bl	800eb8c <__any_on>
 8010050:	2800      	cmp	r0, #0
 8010052:	d1ed      	bne.n	8010030 <__gethex+0x290>
 8010054:	4621      	mov	r1, r4
 8010056:	4648      	mov	r0, r9
 8010058:	f7fe f94c 	bl	800e2f4 <_Bfree>
 801005c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801005e:	2300      	movs	r3, #0
 8010060:	6013      	str	r3, [r2, #0]
 8010062:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010066:	e725      	b.n	800feb4 <__gethex+0x114>
 8010068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801006a:	2b00      	cmp	r3, #0
 801006c:	d1f2      	bne.n	8010054 <__gethex+0x2b4>
 801006e:	e7df      	b.n	8010030 <__gethex+0x290>
 8010070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010072:	2b00      	cmp	r3, #0
 8010074:	d1dc      	bne.n	8010030 <__gethex+0x290>
 8010076:	e7ed      	b.n	8010054 <__gethex+0x2b4>
 8010078:	0801109c 	.word	0x0801109c
 801007c:	08010f36 	.word	0x08010f36
 8010080:	08011145 	.word	0x08011145
 8010084:	f106 38ff 	add.w	r8, r6, #4294967295
 8010088:	f1bb 0f00 	cmp.w	fp, #0
 801008c:	d133      	bne.n	80100f6 <__gethex+0x356>
 801008e:	f1b8 0f00 	cmp.w	r8, #0
 8010092:	d004      	beq.n	801009e <__gethex+0x2fe>
 8010094:	4641      	mov	r1, r8
 8010096:	4620      	mov	r0, r4
 8010098:	f7fe fd78 	bl	800eb8c <__any_on>
 801009c:	4683      	mov	fp, r0
 801009e:	ea4f 1268 	mov.w	r2, r8, asr #5
 80100a2:	2301      	movs	r3, #1
 80100a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80100a8:	f008 081f 	and.w	r8, r8, #31
 80100ac:	fa03 f308 	lsl.w	r3, r3, r8
 80100b0:	4213      	tst	r3, r2
 80100b2:	4631      	mov	r1, r6
 80100b4:	4620      	mov	r0, r4
 80100b6:	bf18      	it	ne
 80100b8:	f04b 0b02 	orrne.w	fp, fp, #2
 80100bc:	1bad      	subs	r5, r5, r6
 80100be:	f7ff fe07 	bl	800fcd0 <rshift>
 80100c2:	687e      	ldr	r6, [r7, #4]
 80100c4:	f04f 0802 	mov.w	r8, #2
 80100c8:	f1bb 0f00 	cmp.w	fp, #0
 80100cc:	d04a      	beq.n	8010164 <__gethex+0x3c4>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d016      	beq.n	8010102 <__gethex+0x362>
 80100d4:	2b03      	cmp	r3, #3
 80100d6:	d018      	beq.n	801010a <__gethex+0x36a>
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d109      	bne.n	80100f0 <__gethex+0x350>
 80100dc:	f01b 0f02 	tst.w	fp, #2
 80100e0:	d006      	beq.n	80100f0 <__gethex+0x350>
 80100e2:	f8da 3000 	ldr.w	r3, [sl]
 80100e6:	ea4b 0b03 	orr.w	fp, fp, r3
 80100ea:	f01b 0f01 	tst.w	fp, #1
 80100ee:	d10f      	bne.n	8010110 <__gethex+0x370>
 80100f0:	f048 0810 	orr.w	r8, r8, #16
 80100f4:	e036      	b.n	8010164 <__gethex+0x3c4>
 80100f6:	f04f 0b01 	mov.w	fp, #1
 80100fa:	e7d0      	b.n	801009e <__gethex+0x2fe>
 80100fc:	f04f 0801 	mov.w	r8, #1
 8010100:	e7e2      	b.n	80100c8 <__gethex+0x328>
 8010102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010104:	f1c3 0301 	rsb	r3, r3, #1
 8010108:	930f      	str	r3, [sp, #60]	; 0x3c
 801010a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801010c:	2b00      	cmp	r3, #0
 801010e:	d0ef      	beq.n	80100f0 <__gethex+0x350>
 8010110:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010114:	f104 0214 	add.w	r2, r4, #20
 8010118:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010122:	2300      	movs	r3, #0
 8010124:	4694      	mov	ip, r2
 8010126:	f852 1b04 	ldr.w	r1, [r2], #4
 801012a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801012e:	d01e      	beq.n	801016e <__gethex+0x3ce>
 8010130:	3101      	adds	r1, #1
 8010132:	f8cc 1000 	str.w	r1, [ip]
 8010136:	f1b8 0f02 	cmp.w	r8, #2
 801013a:	f104 0214 	add.w	r2, r4, #20
 801013e:	d13d      	bne.n	80101bc <__gethex+0x41c>
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	3b01      	subs	r3, #1
 8010144:	42ab      	cmp	r3, r5
 8010146:	d10b      	bne.n	8010160 <__gethex+0x3c0>
 8010148:	1169      	asrs	r1, r5, #5
 801014a:	2301      	movs	r3, #1
 801014c:	f005 051f 	and.w	r5, r5, #31
 8010150:	fa03 f505 	lsl.w	r5, r3, r5
 8010154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010158:	421d      	tst	r5, r3
 801015a:	bf18      	it	ne
 801015c:	f04f 0801 	movne.w	r8, #1
 8010160:	f048 0820 	orr.w	r8, r8, #32
 8010164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010166:	601c      	str	r4, [r3, #0]
 8010168:	9b02      	ldr	r3, [sp, #8]
 801016a:	601e      	str	r6, [r3, #0]
 801016c:	e6a2      	b.n	800feb4 <__gethex+0x114>
 801016e:	4290      	cmp	r0, r2
 8010170:	f842 3c04 	str.w	r3, [r2, #-4]
 8010174:	d8d6      	bhi.n	8010124 <__gethex+0x384>
 8010176:	68a2      	ldr	r2, [r4, #8]
 8010178:	4593      	cmp	fp, r2
 801017a:	db17      	blt.n	80101ac <__gethex+0x40c>
 801017c:	6861      	ldr	r1, [r4, #4]
 801017e:	4648      	mov	r0, r9
 8010180:	3101      	adds	r1, #1
 8010182:	f7fe f877 	bl	800e274 <_Balloc>
 8010186:	4682      	mov	sl, r0
 8010188:	b918      	cbnz	r0, 8010192 <__gethex+0x3f2>
 801018a:	4b1b      	ldr	r3, [pc, #108]	; (80101f8 <__gethex+0x458>)
 801018c:	4602      	mov	r2, r0
 801018e:	2184      	movs	r1, #132	; 0x84
 8010190:	e6b3      	b.n	800fefa <__gethex+0x15a>
 8010192:	6922      	ldr	r2, [r4, #16]
 8010194:	3202      	adds	r2, #2
 8010196:	f104 010c 	add.w	r1, r4, #12
 801019a:	0092      	lsls	r2, r2, #2
 801019c:	300c      	adds	r0, #12
 801019e:	f7fd f98c 	bl	800d4ba <memcpy>
 80101a2:	4621      	mov	r1, r4
 80101a4:	4648      	mov	r0, r9
 80101a6:	f7fe f8a5 	bl	800e2f4 <_Bfree>
 80101aa:	4654      	mov	r4, sl
 80101ac:	6922      	ldr	r2, [r4, #16]
 80101ae:	1c51      	adds	r1, r2, #1
 80101b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80101b4:	6121      	str	r1, [r4, #16]
 80101b6:	2101      	movs	r1, #1
 80101b8:	6151      	str	r1, [r2, #20]
 80101ba:	e7bc      	b.n	8010136 <__gethex+0x396>
 80101bc:	6921      	ldr	r1, [r4, #16]
 80101be:	4559      	cmp	r1, fp
 80101c0:	dd0b      	ble.n	80101da <__gethex+0x43a>
 80101c2:	2101      	movs	r1, #1
 80101c4:	4620      	mov	r0, r4
 80101c6:	f7ff fd83 	bl	800fcd0 <rshift>
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	3601      	adds	r6, #1
 80101ce:	42b3      	cmp	r3, r6
 80101d0:	f6ff aedb 	blt.w	800ff8a <__gethex+0x1ea>
 80101d4:	f04f 0801 	mov.w	r8, #1
 80101d8:	e7c2      	b.n	8010160 <__gethex+0x3c0>
 80101da:	f015 051f 	ands.w	r5, r5, #31
 80101de:	d0f9      	beq.n	80101d4 <__gethex+0x434>
 80101e0:	9b01      	ldr	r3, [sp, #4]
 80101e2:	441a      	add	r2, r3
 80101e4:	f1c5 0520 	rsb	r5, r5, #32
 80101e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80101ec:	f7fe f934 	bl	800e458 <__hi0bits>
 80101f0:	42a8      	cmp	r0, r5
 80101f2:	dbe6      	blt.n	80101c2 <__gethex+0x422>
 80101f4:	e7ee      	b.n	80101d4 <__gethex+0x434>
 80101f6:	bf00      	nop
 80101f8:	08010f36 	.word	0x08010f36

080101fc <L_shift>:
 80101fc:	f1c2 0208 	rsb	r2, r2, #8
 8010200:	0092      	lsls	r2, r2, #2
 8010202:	b570      	push	{r4, r5, r6, lr}
 8010204:	f1c2 0620 	rsb	r6, r2, #32
 8010208:	6843      	ldr	r3, [r0, #4]
 801020a:	6804      	ldr	r4, [r0, #0]
 801020c:	fa03 f506 	lsl.w	r5, r3, r6
 8010210:	432c      	orrs	r4, r5
 8010212:	40d3      	lsrs	r3, r2
 8010214:	6004      	str	r4, [r0, #0]
 8010216:	f840 3f04 	str.w	r3, [r0, #4]!
 801021a:	4288      	cmp	r0, r1
 801021c:	d3f4      	bcc.n	8010208 <L_shift+0xc>
 801021e:	bd70      	pop	{r4, r5, r6, pc}

08010220 <__match>:
 8010220:	b530      	push	{r4, r5, lr}
 8010222:	6803      	ldr	r3, [r0, #0]
 8010224:	3301      	adds	r3, #1
 8010226:	f811 4b01 	ldrb.w	r4, [r1], #1
 801022a:	b914      	cbnz	r4, 8010232 <__match+0x12>
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	2001      	movs	r0, #1
 8010230:	bd30      	pop	{r4, r5, pc}
 8010232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010236:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801023a:	2d19      	cmp	r5, #25
 801023c:	bf98      	it	ls
 801023e:	3220      	addls	r2, #32
 8010240:	42a2      	cmp	r2, r4
 8010242:	d0f0      	beq.n	8010226 <__match+0x6>
 8010244:	2000      	movs	r0, #0
 8010246:	e7f3      	b.n	8010230 <__match+0x10>

08010248 <__hexnan>:
 8010248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	680b      	ldr	r3, [r1, #0]
 801024e:	6801      	ldr	r1, [r0, #0]
 8010250:	115e      	asrs	r6, r3, #5
 8010252:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010256:	f013 031f 	ands.w	r3, r3, #31
 801025a:	b087      	sub	sp, #28
 801025c:	bf18      	it	ne
 801025e:	3604      	addne	r6, #4
 8010260:	2500      	movs	r5, #0
 8010262:	1f37      	subs	r7, r6, #4
 8010264:	4682      	mov	sl, r0
 8010266:	4690      	mov	r8, r2
 8010268:	9301      	str	r3, [sp, #4]
 801026a:	f846 5c04 	str.w	r5, [r6, #-4]
 801026e:	46b9      	mov	r9, r7
 8010270:	463c      	mov	r4, r7
 8010272:	9502      	str	r5, [sp, #8]
 8010274:	46ab      	mov	fp, r5
 8010276:	784a      	ldrb	r2, [r1, #1]
 8010278:	1c4b      	adds	r3, r1, #1
 801027a:	9303      	str	r3, [sp, #12]
 801027c:	b342      	cbz	r2, 80102d0 <__hexnan+0x88>
 801027e:	4610      	mov	r0, r2
 8010280:	9105      	str	r1, [sp, #20]
 8010282:	9204      	str	r2, [sp, #16]
 8010284:	f7ff fd76 	bl	800fd74 <__hexdig_fun>
 8010288:	2800      	cmp	r0, #0
 801028a:	d14f      	bne.n	801032c <__hexnan+0xe4>
 801028c:	9a04      	ldr	r2, [sp, #16]
 801028e:	9905      	ldr	r1, [sp, #20]
 8010290:	2a20      	cmp	r2, #32
 8010292:	d818      	bhi.n	80102c6 <__hexnan+0x7e>
 8010294:	9b02      	ldr	r3, [sp, #8]
 8010296:	459b      	cmp	fp, r3
 8010298:	dd13      	ble.n	80102c2 <__hexnan+0x7a>
 801029a:	454c      	cmp	r4, r9
 801029c:	d206      	bcs.n	80102ac <__hexnan+0x64>
 801029e:	2d07      	cmp	r5, #7
 80102a0:	dc04      	bgt.n	80102ac <__hexnan+0x64>
 80102a2:	462a      	mov	r2, r5
 80102a4:	4649      	mov	r1, r9
 80102a6:	4620      	mov	r0, r4
 80102a8:	f7ff ffa8 	bl	80101fc <L_shift>
 80102ac:	4544      	cmp	r4, r8
 80102ae:	d950      	bls.n	8010352 <__hexnan+0x10a>
 80102b0:	2300      	movs	r3, #0
 80102b2:	f1a4 0904 	sub.w	r9, r4, #4
 80102b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80102ba:	f8cd b008 	str.w	fp, [sp, #8]
 80102be:	464c      	mov	r4, r9
 80102c0:	461d      	mov	r5, r3
 80102c2:	9903      	ldr	r1, [sp, #12]
 80102c4:	e7d7      	b.n	8010276 <__hexnan+0x2e>
 80102c6:	2a29      	cmp	r2, #41	; 0x29
 80102c8:	d155      	bne.n	8010376 <__hexnan+0x12e>
 80102ca:	3102      	adds	r1, #2
 80102cc:	f8ca 1000 	str.w	r1, [sl]
 80102d0:	f1bb 0f00 	cmp.w	fp, #0
 80102d4:	d04f      	beq.n	8010376 <__hexnan+0x12e>
 80102d6:	454c      	cmp	r4, r9
 80102d8:	d206      	bcs.n	80102e8 <__hexnan+0xa0>
 80102da:	2d07      	cmp	r5, #7
 80102dc:	dc04      	bgt.n	80102e8 <__hexnan+0xa0>
 80102de:	462a      	mov	r2, r5
 80102e0:	4649      	mov	r1, r9
 80102e2:	4620      	mov	r0, r4
 80102e4:	f7ff ff8a 	bl	80101fc <L_shift>
 80102e8:	4544      	cmp	r4, r8
 80102ea:	d934      	bls.n	8010356 <__hexnan+0x10e>
 80102ec:	f1a8 0204 	sub.w	r2, r8, #4
 80102f0:	4623      	mov	r3, r4
 80102f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80102f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80102fa:	429f      	cmp	r7, r3
 80102fc:	d2f9      	bcs.n	80102f2 <__hexnan+0xaa>
 80102fe:	1b3b      	subs	r3, r7, r4
 8010300:	f023 0303 	bic.w	r3, r3, #3
 8010304:	3304      	adds	r3, #4
 8010306:	3e03      	subs	r6, #3
 8010308:	3401      	adds	r4, #1
 801030a:	42a6      	cmp	r6, r4
 801030c:	bf38      	it	cc
 801030e:	2304      	movcc	r3, #4
 8010310:	4443      	add	r3, r8
 8010312:	2200      	movs	r2, #0
 8010314:	f843 2b04 	str.w	r2, [r3], #4
 8010318:	429f      	cmp	r7, r3
 801031a:	d2fb      	bcs.n	8010314 <__hexnan+0xcc>
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	b91b      	cbnz	r3, 8010328 <__hexnan+0xe0>
 8010320:	4547      	cmp	r7, r8
 8010322:	d126      	bne.n	8010372 <__hexnan+0x12a>
 8010324:	2301      	movs	r3, #1
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	2005      	movs	r0, #5
 801032a:	e025      	b.n	8010378 <__hexnan+0x130>
 801032c:	3501      	adds	r5, #1
 801032e:	2d08      	cmp	r5, #8
 8010330:	f10b 0b01 	add.w	fp, fp, #1
 8010334:	dd06      	ble.n	8010344 <__hexnan+0xfc>
 8010336:	4544      	cmp	r4, r8
 8010338:	d9c3      	bls.n	80102c2 <__hexnan+0x7a>
 801033a:	2300      	movs	r3, #0
 801033c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010340:	2501      	movs	r5, #1
 8010342:	3c04      	subs	r4, #4
 8010344:	6822      	ldr	r2, [r4, #0]
 8010346:	f000 000f 	and.w	r0, r0, #15
 801034a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801034e:	6020      	str	r0, [r4, #0]
 8010350:	e7b7      	b.n	80102c2 <__hexnan+0x7a>
 8010352:	2508      	movs	r5, #8
 8010354:	e7b5      	b.n	80102c2 <__hexnan+0x7a>
 8010356:	9b01      	ldr	r3, [sp, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d0df      	beq.n	801031c <__hexnan+0xd4>
 801035c:	f1c3 0320 	rsb	r3, r3, #32
 8010360:	f04f 32ff 	mov.w	r2, #4294967295
 8010364:	40da      	lsrs	r2, r3
 8010366:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801036a:	4013      	ands	r3, r2
 801036c:	f846 3c04 	str.w	r3, [r6, #-4]
 8010370:	e7d4      	b.n	801031c <__hexnan+0xd4>
 8010372:	3f04      	subs	r7, #4
 8010374:	e7d2      	b.n	801031c <__hexnan+0xd4>
 8010376:	2004      	movs	r0, #4
 8010378:	b007      	add	sp, #28
 801037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801037e <__ascii_mbtowc>:
 801037e:	b082      	sub	sp, #8
 8010380:	b901      	cbnz	r1, 8010384 <__ascii_mbtowc+0x6>
 8010382:	a901      	add	r1, sp, #4
 8010384:	b142      	cbz	r2, 8010398 <__ascii_mbtowc+0x1a>
 8010386:	b14b      	cbz	r3, 801039c <__ascii_mbtowc+0x1e>
 8010388:	7813      	ldrb	r3, [r2, #0]
 801038a:	600b      	str	r3, [r1, #0]
 801038c:	7812      	ldrb	r2, [r2, #0]
 801038e:	1e10      	subs	r0, r2, #0
 8010390:	bf18      	it	ne
 8010392:	2001      	movne	r0, #1
 8010394:	b002      	add	sp, #8
 8010396:	4770      	bx	lr
 8010398:	4610      	mov	r0, r2
 801039a:	e7fb      	b.n	8010394 <__ascii_mbtowc+0x16>
 801039c:	f06f 0001 	mvn.w	r0, #1
 80103a0:	e7f8      	b.n	8010394 <__ascii_mbtowc+0x16>

080103a2 <_realloc_r>:
 80103a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a6:	4680      	mov	r8, r0
 80103a8:	4614      	mov	r4, r2
 80103aa:	460e      	mov	r6, r1
 80103ac:	b921      	cbnz	r1, 80103b8 <_realloc_r+0x16>
 80103ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103b2:	4611      	mov	r1, r2
 80103b4:	f7fb bec6 	b.w	800c144 <_malloc_r>
 80103b8:	b92a      	cbnz	r2, 80103c6 <_realloc_r+0x24>
 80103ba:	f7fd ff0f 	bl	800e1dc <_free_r>
 80103be:	4625      	mov	r5, r4
 80103c0:	4628      	mov	r0, r5
 80103c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c6:	f000 f842 	bl	801044e <_malloc_usable_size_r>
 80103ca:	4284      	cmp	r4, r0
 80103cc:	4607      	mov	r7, r0
 80103ce:	d802      	bhi.n	80103d6 <_realloc_r+0x34>
 80103d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103d4:	d812      	bhi.n	80103fc <_realloc_r+0x5a>
 80103d6:	4621      	mov	r1, r4
 80103d8:	4640      	mov	r0, r8
 80103da:	f7fb feb3 	bl	800c144 <_malloc_r>
 80103de:	4605      	mov	r5, r0
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d0ed      	beq.n	80103c0 <_realloc_r+0x1e>
 80103e4:	42bc      	cmp	r4, r7
 80103e6:	4622      	mov	r2, r4
 80103e8:	4631      	mov	r1, r6
 80103ea:	bf28      	it	cs
 80103ec:	463a      	movcs	r2, r7
 80103ee:	f7fd f864 	bl	800d4ba <memcpy>
 80103f2:	4631      	mov	r1, r6
 80103f4:	4640      	mov	r0, r8
 80103f6:	f7fd fef1 	bl	800e1dc <_free_r>
 80103fa:	e7e1      	b.n	80103c0 <_realloc_r+0x1e>
 80103fc:	4635      	mov	r5, r6
 80103fe:	e7df      	b.n	80103c0 <_realloc_r+0x1e>

08010400 <__ascii_wctomb>:
 8010400:	b149      	cbz	r1, 8010416 <__ascii_wctomb+0x16>
 8010402:	2aff      	cmp	r2, #255	; 0xff
 8010404:	bf85      	ittet	hi
 8010406:	238a      	movhi	r3, #138	; 0x8a
 8010408:	6003      	strhi	r3, [r0, #0]
 801040a:	700a      	strbls	r2, [r1, #0]
 801040c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010410:	bf98      	it	ls
 8010412:	2001      	movls	r0, #1
 8010414:	4770      	bx	lr
 8010416:	4608      	mov	r0, r1
 8010418:	4770      	bx	lr
	...

0801041c <fiprintf>:
 801041c:	b40e      	push	{r1, r2, r3}
 801041e:	b503      	push	{r0, r1, lr}
 8010420:	4601      	mov	r1, r0
 8010422:	ab03      	add	r3, sp, #12
 8010424:	4805      	ldr	r0, [pc, #20]	; (801043c <fiprintf+0x20>)
 8010426:	f853 2b04 	ldr.w	r2, [r3], #4
 801042a:	6800      	ldr	r0, [r0, #0]
 801042c:	9301      	str	r3, [sp, #4]
 801042e:	f000 f83f 	bl	80104b0 <_vfiprintf_r>
 8010432:	b002      	add	sp, #8
 8010434:	f85d eb04 	ldr.w	lr, [sp], #4
 8010438:	b003      	add	sp, #12
 801043a:	4770      	bx	lr
 801043c:	2000006c 	.word	0x2000006c

08010440 <abort>:
 8010440:	b508      	push	{r3, lr}
 8010442:	2006      	movs	r0, #6
 8010444:	f000 fa0c 	bl	8010860 <raise>
 8010448:	2001      	movs	r0, #1
 801044a:	f7f2 fab1 	bl	80029b0 <_exit>

0801044e <_malloc_usable_size_r>:
 801044e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010452:	1f18      	subs	r0, r3, #4
 8010454:	2b00      	cmp	r3, #0
 8010456:	bfbc      	itt	lt
 8010458:	580b      	ldrlt	r3, [r1, r0]
 801045a:	18c0      	addlt	r0, r0, r3
 801045c:	4770      	bx	lr

0801045e <__sfputc_r>:
 801045e:	6893      	ldr	r3, [r2, #8]
 8010460:	3b01      	subs	r3, #1
 8010462:	2b00      	cmp	r3, #0
 8010464:	b410      	push	{r4}
 8010466:	6093      	str	r3, [r2, #8]
 8010468:	da08      	bge.n	801047c <__sfputc_r+0x1e>
 801046a:	6994      	ldr	r4, [r2, #24]
 801046c:	42a3      	cmp	r3, r4
 801046e:	db01      	blt.n	8010474 <__sfputc_r+0x16>
 8010470:	290a      	cmp	r1, #10
 8010472:	d103      	bne.n	801047c <__sfputc_r+0x1e>
 8010474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010478:	f000 b934 	b.w	80106e4 <__swbuf_r>
 801047c:	6813      	ldr	r3, [r2, #0]
 801047e:	1c58      	adds	r0, r3, #1
 8010480:	6010      	str	r0, [r2, #0]
 8010482:	7019      	strb	r1, [r3, #0]
 8010484:	4608      	mov	r0, r1
 8010486:	f85d 4b04 	ldr.w	r4, [sp], #4
 801048a:	4770      	bx	lr

0801048c <__sfputs_r>:
 801048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048e:	4606      	mov	r6, r0
 8010490:	460f      	mov	r7, r1
 8010492:	4614      	mov	r4, r2
 8010494:	18d5      	adds	r5, r2, r3
 8010496:	42ac      	cmp	r4, r5
 8010498:	d101      	bne.n	801049e <__sfputs_r+0x12>
 801049a:	2000      	movs	r0, #0
 801049c:	e007      	b.n	80104ae <__sfputs_r+0x22>
 801049e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a2:	463a      	mov	r2, r7
 80104a4:	4630      	mov	r0, r6
 80104a6:	f7ff ffda 	bl	801045e <__sfputc_r>
 80104aa:	1c43      	adds	r3, r0, #1
 80104ac:	d1f3      	bne.n	8010496 <__sfputs_r+0xa>
 80104ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104b0 <_vfiprintf_r>:
 80104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	460d      	mov	r5, r1
 80104b6:	b09d      	sub	sp, #116	; 0x74
 80104b8:	4614      	mov	r4, r2
 80104ba:	4698      	mov	r8, r3
 80104bc:	4606      	mov	r6, r0
 80104be:	b118      	cbz	r0, 80104c8 <_vfiprintf_r+0x18>
 80104c0:	6a03      	ldr	r3, [r0, #32]
 80104c2:	b90b      	cbnz	r3, 80104c8 <_vfiprintf_r+0x18>
 80104c4:	f7fc fe5a 	bl	800d17c <__sinit>
 80104c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104ca:	07d9      	lsls	r1, r3, #31
 80104cc:	d405      	bmi.n	80104da <_vfiprintf_r+0x2a>
 80104ce:	89ab      	ldrh	r3, [r5, #12]
 80104d0:	059a      	lsls	r2, r3, #22
 80104d2:	d402      	bmi.n	80104da <_vfiprintf_r+0x2a>
 80104d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104d6:	f7fc ffee 	bl	800d4b6 <__retarget_lock_acquire_recursive>
 80104da:	89ab      	ldrh	r3, [r5, #12]
 80104dc:	071b      	lsls	r3, r3, #28
 80104de:	d501      	bpl.n	80104e4 <_vfiprintf_r+0x34>
 80104e0:	692b      	ldr	r3, [r5, #16]
 80104e2:	b99b      	cbnz	r3, 801050c <_vfiprintf_r+0x5c>
 80104e4:	4629      	mov	r1, r5
 80104e6:	4630      	mov	r0, r6
 80104e8:	f000 f93a 	bl	8010760 <__swsetup_r>
 80104ec:	b170      	cbz	r0, 801050c <_vfiprintf_r+0x5c>
 80104ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104f0:	07dc      	lsls	r4, r3, #31
 80104f2:	d504      	bpl.n	80104fe <_vfiprintf_r+0x4e>
 80104f4:	f04f 30ff 	mov.w	r0, #4294967295
 80104f8:	b01d      	add	sp, #116	; 0x74
 80104fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fe:	89ab      	ldrh	r3, [r5, #12]
 8010500:	0598      	lsls	r0, r3, #22
 8010502:	d4f7      	bmi.n	80104f4 <_vfiprintf_r+0x44>
 8010504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010506:	f7fc ffd7 	bl	800d4b8 <__retarget_lock_release_recursive>
 801050a:	e7f3      	b.n	80104f4 <_vfiprintf_r+0x44>
 801050c:	2300      	movs	r3, #0
 801050e:	9309      	str	r3, [sp, #36]	; 0x24
 8010510:	2320      	movs	r3, #32
 8010512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010516:	f8cd 800c 	str.w	r8, [sp, #12]
 801051a:	2330      	movs	r3, #48	; 0x30
 801051c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80106d0 <_vfiprintf_r+0x220>
 8010520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010524:	f04f 0901 	mov.w	r9, #1
 8010528:	4623      	mov	r3, r4
 801052a:	469a      	mov	sl, r3
 801052c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010530:	b10a      	cbz	r2, 8010536 <_vfiprintf_r+0x86>
 8010532:	2a25      	cmp	r2, #37	; 0x25
 8010534:	d1f9      	bne.n	801052a <_vfiprintf_r+0x7a>
 8010536:	ebba 0b04 	subs.w	fp, sl, r4
 801053a:	d00b      	beq.n	8010554 <_vfiprintf_r+0xa4>
 801053c:	465b      	mov	r3, fp
 801053e:	4622      	mov	r2, r4
 8010540:	4629      	mov	r1, r5
 8010542:	4630      	mov	r0, r6
 8010544:	f7ff ffa2 	bl	801048c <__sfputs_r>
 8010548:	3001      	adds	r0, #1
 801054a:	f000 80a9 	beq.w	80106a0 <_vfiprintf_r+0x1f0>
 801054e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010550:	445a      	add	r2, fp
 8010552:	9209      	str	r2, [sp, #36]	; 0x24
 8010554:	f89a 3000 	ldrb.w	r3, [sl]
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 80a1 	beq.w	80106a0 <_vfiprintf_r+0x1f0>
 801055e:	2300      	movs	r3, #0
 8010560:	f04f 32ff 	mov.w	r2, #4294967295
 8010564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010568:	f10a 0a01 	add.w	sl, sl, #1
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	9307      	str	r3, [sp, #28]
 8010570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010574:	931a      	str	r3, [sp, #104]	; 0x68
 8010576:	4654      	mov	r4, sl
 8010578:	2205      	movs	r2, #5
 801057a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801057e:	4854      	ldr	r0, [pc, #336]	; (80106d0 <_vfiprintf_r+0x220>)
 8010580:	f7ef fe26 	bl	80001d0 <memchr>
 8010584:	9a04      	ldr	r2, [sp, #16]
 8010586:	b9d8      	cbnz	r0, 80105c0 <_vfiprintf_r+0x110>
 8010588:	06d1      	lsls	r1, r2, #27
 801058a:	bf44      	itt	mi
 801058c:	2320      	movmi	r3, #32
 801058e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010592:	0713      	lsls	r3, r2, #28
 8010594:	bf44      	itt	mi
 8010596:	232b      	movmi	r3, #43	; 0x2b
 8010598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801059c:	f89a 3000 	ldrb.w	r3, [sl]
 80105a0:	2b2a      	cmp	r3, #42	; 0x2a
 80105a2:	d015      	beq.n	80105d0 <_vfiprintf_r+0x120>
 80105a4:	9a07      	ldr	r2, [sp, #28]
 80105a6:	4654      	mov	r4, sl
 80105a8:	2000      	movs	r0, #0
 80105aa:	f04f 0c0a 	mov.w	ip, #10
 80105ae:	4621      	mov	r1, r4
 80105b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105b4:	3b30      	subs	r3, #48	; 0x30
 80105b6:	2b09      	cmp	r3, #9
 80105b8:	d94d      	bls.n	8010656 <_vfiprintf_r+0x1a6>
 80105ba:	b1b0      	cbz	r0, 80105ea <_vfiprintf_r+0x13a>
 80105bc:	9207      	str	r2, [sp, #28]
 80105be:	e014      	b.n	80105ea <_vfiprintf_r+0x13a>
 80105c0:	eba0 0308 	sub.w	r3, r0, r8
 80105c4:	fa09 f303 	lsl.w	r3, r9, r3
 80105c8:	4313      	orrs	r3, r2
 80105ca:	9304      	str	r3, [sp, #16]
 80105cc:	46a2      	mov	sl, r4
 80105ce:	e7d2      	b.n	8010576 <_vfiprintf_r+0xc6>
 80105d0:	9b03      	ldr	r3, [sp, #12]
 80105d2:	1d19      	adds	r1, r3, #4
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	9103      	str	r1, [sp, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	bfbb      	ittet	lt
 80105dc:	425b      	neglt	r3, r3
 80105de:	f042 0202 	orrlt.w	r2, r2, #2
 80105e2:	9307      	strge	r3, [sp, #28]
 80105e4:	9307      	strlt	r3, [sp, #28]
 80105e6:	bfb8      	it	lt
 80105e8:	9204      	strlt	r2, [sp, #16]
 80105ea:	7823      	ldrb	r3, [r4, #0]
 80105ec:	2b2e      	cmp	r3, #46	; 0x2e
 80105ee:	d10c      	bne.n	801060a <_vfiprintf_r+0x15a>
 80105f0:	7863      	ldrb	r3, [r4, #1]
 80105f2:	2b2a      	cmp	r3, #42	; 0x2a
 80105f4:	d134      	bne.n	8010660 <_vfiprintf_r+0x1b0>
 80105f6:	9b03      	ldr	r3, [sp, #12]
 80105f8:	1d1a      	adds	r2, r3, #4
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	9203      	str	r2, [sp, #12]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	bfb8      	it	lt
 8010602:	f04f 33ff 	movlt.w	r3, #4294967295
 8010606:	3402      	adds	r4, #2
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80106e0 <_vfiprintf_r+0x230>
 801060e:	7821      	ldrb	r1, [r4, #0]
 8010610:	2203      	movs	r2, #3
 8010612:	4650      	mov	r0, sl
 8010614:	f7ef fddc 	bl	80001d0 <memchr>
 8010618:	b138      	cbz	r0, 801062a <_vfiprintf_r+0x17a>
 801061a:	9b04      	ldr	r3, [sp, #16]
 801061c:	eba0 000a 	sub.w	r0, r0, sl
 8010620:	2240      	movs	r2, #64	; 0x40
 8010622:	4082      	lsls	r2, r0
 8010624:	4313      	orrs	r3, r2
 8010626:	3401      	adds	r4, #1
 8010628:	9304      	str	r3, [sp, #16]
 801062a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801062e:	4829      	ldr	r0, [pc, #164]	; (80106d4 <_vfiprintf_r+0x224>)
 8010630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010634:	2206      	movs	r2, #6
 8010636:	f7ef fdcb 	bl	80001d0 <memchr>
 801063a:	2800      	cmp	r0, #0
 801063c:	d03f      	beq.n	80106be <_vfiprintf_r+0x20e>
 801063e:	4b26      	ldr	r3, [pc, #152]	; (80106d8 <_vfiprintf_r+0x228>)
 8010640:	bb1b      	cbnz	r3, 801068a <_vfiprintf_r+0x1da>
 8010642:	9b03      	ldr	r3, [sp, #12]
 8010644:	3307      	adds	r3, #7
 8010646:	f023 0307 	bic.w	r3, r3, #7
 801064a:	3308      	adds	r3, #8
 801064c:	9303      	str	r3, [sp, #12]
 801064e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010650:	443b      	add	r3, r7
 8010652:	9309      	str	r3, [sp, #36]	; 0x24
 8010654:	e768      	b.n	8010528 <_vfiprintf_r+0x78>
 8010656:	fb0c 3202 	mla	r2, ip, r2, r3
 801065a:	460c      	mov	r4, r1
 801065c:	2001      	movs	r0, #1
 801065e:	e7a6      	b.n	80105ae <_vfiprintf_r+0xfe>
 8010660:	2300      	movs	r3, #0
 8010662:	3401      	adds	r4, #1
 8010664:	9305      	str	r3, [sp, #20]
 8010666:	4619      	mov	r1, r3
 8010668:	f04f 0c0a 	mov.w	ip, #10
 801066c:	4620      	mov	r0, r4
 801066e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010672:	3a30      	subs	r2, #48	; 0x30
 8010674:	2a09      	cmp	r2, #9
 8010676:	d903      	bls.n	8010680 <_vfiprintf_r+0x1d0>
 8010678:	2b00      	cmp	r3, #0
 801067a:	d0c6      	beq.n	801060a <_vfiprintf_r+0x15a>
 801067c:	9105      	str	r1, [sp, #20]
 801067e:	e7c4      	b.n	801060a <_vfiprintf_r+0x15a>
 8010680:	fb0c 2101 	mla	r1, ip, r1, r2
 8010684:	4604      	mov	r4, r0
 8010686:	2301      	movs	r3, #1
 8010688:	e7f0      	b.n	801066c <_vfiprintf_r+0x1bc>
 801068a:	ab03      	add	r3, sp, #12
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	462a      	mov	r2, r5
 8010690:	4b12      	ldr	r3, [pc, #72]	; (80106dc <_vfiprintf_r+0x22c>)
 8010692:	a904      	add	r1, sp, #16
 8010694:	4630      	mov	r0, r6
 8010696:	f7fb ff0f 	bl	800c4b8 <_printf_float>
 801069a:	4607      	mov	r7, r0
 801069c:	1c78      	adds	r0, r7, #1
 801069e:	d1d6      	bne.n	801064e <_vfiprintf_r+0x19e>
 80106a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106a2:	07d9      	lsls	r1, r3, #31
 80106a4:	d405      	bmi.n	80106b2 <_vfiprintf_r+0x202>
 80106a6:	89ab      	ldrh	r3, [r5, #12]
 80106a8:	059a      	lsls	r2, r3, #22
 80106aa:	d402      	bmi.n	80106b2 <_vfiprintf_r+0x202>
 80106ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ae:	f7fc ff03 	bl	800d4b8 <__retarget_lock_release_recursive>
 80106b2:	89ab      	ldrh	r3, [r5, #12]
 80106b4:	065b      	lsls	r3, r3, #25
 80106b6:	f53f af1d 	bmi.w	80104f4 <_vfiprintf_r+0x44>
 80106ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106bc:	e71c      	b.n	80104f8 <_vfiprintf_r+0x48>
 80106be:	ab03      	add	r3, sp, #12
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	462a      	mov	r2, r5
 80106c4:	4b05      	ldr	r3, [pc, #20]	; (80106dc <_vfiprintf_r+0x22c>)
 80106c6:	a904      	add	r1, sp, #16
 80106c8:	4630      	mov	r0, r6
 80106ca:	f7fc f999 	bl	800ca00 <_printf_i>
 80106ce:	e7e4      	b.n	801069a <_vfiprintf_r+0x1ea>
 80106d0:	080110f0 	.word	0x080110f0
 80106d4:	080110fa 	.word	0x080110fa
 80106d8:	0800c4b9 	.word	0x0800c4b9
 80106dc:	0801048d 	.word	0x0801048d
 80106e0:	080110f6 	.word	0x080110f6

080106e4 <__swbuf_r>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	460e      	mov	r6, r1
 80106e8:	4614      	mov	r4, r2
 80106ea:	4605      	mov	r5, r0
 80106ec:	b118      	cbz	r0, 80106f6 <__swbuf_r+0x12>
 80106ee:	6a03      	ldr	r3, [r0, #32]
 80106f0:	b90b      	cbnz	r3, 80106f6 <__swbuf_r+0x12>
 80106f2:	f7fc fd43 	bl	800d17c <__sinit>
 80106f6:	69a3      	ldr	r3, [r4, #24]
 80106f8:	60a3      	str	r3, [r4, #8]
 80106fa:	89a3      	ldrh	r3, [r4, #12]
 80106fc:	071a      	lsls	r2, r3, #28
 80106fe:	d525      	bpl.n	801074c <__swbuf_r+0x68>
 8010700:	6923      	ldr	r3, [r4, #16]
 8010702:	b31b      	cbz	r3, 801074c <__swbuf_r+0x68>
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	6922      	ldr	r2, [r4, #16]
 8010708:	1a98      	subs	r0, r3, r2
 801070a:	6963      	ldr	r3, [r4, #20]
 801070c:	b2f6      	uxtb	r6, r6
 801070e:	4283      	cmp	r3, r0
 8010710:	4637      	mov	r7, r6
 8010712:	dc04      	bgt.n	801071e <__swbuf_r+0x3a>
 8010714:	4621      	mov	r1, r4
 8010716:	4628      	mov	r0, r5
 8010718:	f7ff fa4a 	bl	800fbb0 <_fflush_r>
 801071c:	b9e0      	cbnz	r0, 8010758 <__swbuf_r+0x74>
 801071e:	68a3      	ldr	r3, [r4, #8]
 8010720:	3b01      	subs	r3, #1
 8010722:	60a3      	str	r3, [r4, #8]
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	1c5a      	adds	r2, r3, #1
 8010728:	6022      	str	r2, [r4, #0]
 801072a:	701e      	strb	r6, [r3, #0]
 801072c:	6962      	ldr	r2, [r4, #20]
 801072e:	1c43      	adds	r3, r0, #1
 8010730:	429a      	cmp	r2, r3
 8010732:	d004      	beq.n	801073e <__swbuf_r+0x5a>
 8010734:	89a3      	ldrh	r3, [r4, #12]
 8010736:	07db      	lsls	r3, r3, #31
 8010738:	d506      	bpl.n	8010748 <__swbuf_r+0x64>
 801073a:	2e0a      	cmp	r6, #10
 801073c:	d104      	bne.n	8010748 <__swbuf_r+0x64>
 801073e:	4621      	mov	r1, r4
 8010740:	4628      	mov	r0, r5
 8010742:	f7ff fa35 	bl	800fbb0 <_fflush_r>
 8010746:	b938      	cbnz	r0, 8010758 <__swbuf_r+0x74>
 8010748:	4638      	mov	r0, r7
 801074a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801074c:	4621      	mov	r1, r4
 801074e:	4628      	mov	r0, r5
 8010750:	f000 f806 	bl	8010760 <__swsetup_r>
 8010754:	2800      	cmp	r0, #0
 8010756:	d0d5      	beq.n	8010704 <__swbuf_r+0x20>
 8010758:	f04f 37ff 	mov.w	r7, #4294967295
 801075c:	e7f4      	b.n	8010748 <__swbuf_r+0x64>
	...

08010760 <__swsetup_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4b2a      	ldr	r3, [pc, #168]	; (801080c <__swsetup_r+0xac>)
 8010764:	4605      	mov	r5, r0
 8010766:	6818      	ldr	r0, [r3, #0]
 8010768:	460c      	mov	r4, r1
 801076a:	b118      	cbz	r0, 8010774 <__swsetup_r+0x14>
 801076c:	6a03      	ldr	r3, [r0, #32]
 801076e:	b90b      	cbnz	r3, 8010774 <__swsetup_r+0x14>
 8010770:	f7fc fd04 	bl	800d17c <__sinit>
 8010774:	89a3      	ldrh	r3, [r4, #12]
 8010776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801077a:	0718      	lsls	r0, r3, #28
 801077c:	d422      	bmi.n	80107c4 <__swsetup_r+0x64>
 801077e:	06d9      	lsls	r1, r3, #27
 8010780:	d407      	bmi.n	8010792 <__swsetup_r+0x32>
 8010782:	2309      	movs	r3, #9
 8010784:	602b      	str	r3, [r5, #0]
 8010786:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801078a:	81a3      	strh	r3, [r4, #12]
 801078c:	f04f 30ff 	mov.w	r0, #4294967295
 8010790:	e034      	b.n	80107fc <__swsetup_r+0x9c>
 8010792:	0758      	lsls	r0, r3, #29
 8010794:	d512      	bpl.n	80107bc <__swsetup_r+0x5c>
 8010796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010798:	b141      	cbz	r1, 80107ac <__swsetup_r+0x4c>
 801079a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801079e:	4299      	cmp	r1, r3
 80107a0:	d002      	beq.n	80107a8 <__swsetup_r+0x48>
 80107a2:	4628      	mov	r0, r5
 80107a4:	f7fd fd1a 	bl	800e1dc <_free_r>
 80107a8:	2300      	movs	r3, #0
 80107aa:	6363      	str	r3, [r4, #52]	; 0x34
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107b2:	81a3      	strh	r3, [r4, #12]
 80107b4:	2300      	movs	r3, #0
 80107b6:	6063      	str	r3, [r4, #4]
 80107b8:	6923      	ldr	r3, [r4, #16]
 80107ba:	6023      	str	r3, [r4, #0]
 80107bc:	89a3      	ldrh	r3, [r4, #12]
 80107be:	f043 0308 	orr.w	r3, r3, #8
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	6923      	ldr	r3, [r4, #16]
 80107c6:	b94b      	cbnz	r3, 80107dc <__swsetup_r+0x7c>
 80107c8:	89a3      	ldrh	r3, [r4, #12]
 80107ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107d2:	d003      	beq.n	80107dc <__swsetup_r+0x7c>
 80107d4:	4621      	mov	r1, r4
 80107d6:	4628      	mov	r0, r5
 80107d8:	f000 f884 	bl	80108e4 <__smakebuf_r>
 80107dc:	89a0      	ldrh	r0, [r4, #12]
 80107de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107e2:	f010 0301 	ands.w	r3, r0, #1
 80107e6:	d00a      	beq.n	80107fe <__swsetup_r+0x9e>
 80107e8:	2300      	movs	r3, #0
 80107ea:	60a3      	str	r3, [r4, #8]
 80107ec:	6963      	ldr	r3, [r4, #20]
 80107ee:	425b      	negs	r3, r3
 80107f0:	61a3      	str	r3, [r4, #24]
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	b943      	cbnz	r3, 8010808 <__swsetup_r+0xa8>
 80107f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107fa:	d1c4      	bne.n	8010786 <__swsetup_r+0x26>
 80107fc:	bd38      	pop	{r3, r4, r5, pc}
 80107fe:	0781      	lsls	r1, r0, #30
 8010800:	bf58      	it	pl
 8010802:	6963      	ldrpl	r3, [r4, #20]
 8010804:	60a3      	str	r3, [r4, #8]
 8010806:	e7f4      	b.n	80107f2 <__swsetup_r+0x92>
 8010808:	2000      	movs	r0, #0
 801080a:	e7f7      	b.n	80107fc <__swsetup_r+0x9c>
 801080c:	2000006c 	.word	0x2000006c

08010810 <_raise_r>:
 8010810:	291f      	cmp	r1, #31
 8010812:	b538      	push	{r3, r4, r5, lr}
 8010814:	4604      	mov	r4, r0
 8010816:	460d      	mov	r5, r1
 8010818:	d904      	bls.n	8010824 <_raise_r+0x14>
 801081a:	2316      	movs	r3, #22
 801081c:	6003      	str	r3, [r0, #0]
 801081e:	f04f 30ff 	mov.w	r0, #4294967295
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010826:	b112      	cbz	r2, 801082e <_raise_r+0x1e>
 8010828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801082c:	b94b      	cbnz	r3, 8010842 <_raise_r+0x32>
 801082e:	4620      	mov	r0, r4
 8010830:	f000 f830 	bl	8010894 <_getpid_r>
 8010834:	462a      	mov	r2, r5
 8010836:	4601      	mov	r1, r0
 8010838:	4620      	mov	r0, r4
 801083a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801083e:	f000 b817 	b.w	8010870 <_kill_r>
 8010842:	2b01      	cmp	r3, #1
 8010844:	d00a      	beq.n	801085c <_raise_r+0x4c>
 8010846:	1c59      	adds	r1, r3, #1
 8010848:	d103      	bne.n	8010852 <_raise_r+0x42>
 801084a:	2316      	movs	r3, #22
 801084c:	6003      	str	r3, [r0, #0]
 801084e:	2001      	movs	r0, #1
 8010850:	e7e7      	b.n	8010822 <_raise_r+0x12>
 8010852:	2400      	movs	r4, #0
 8010854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010858:	4628      	mov	r0, r5
 801085a:	4798      	blx	r3
 801085c:	2000      	movs	r0, #0
 801085e:	e7e0      	b.n	8010822 <_raise_r+0x12>

08010860 <raise>:
 8010860:	4b02      	ldr	r3, [pc, #8]	; (801086c <raise+0xc>)
 8010862:	4601      	mov	r1, r0
 8010864:	6818      	ldr	r0, [r3, #0]
 8010866:	f7ff bfd3 	b.w	8010810 <_raise_r>
 801086a:	bf00      	nop
 801086c:	2000006c 	.word	0x2000006c

08010870 <_kill_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4d07      	ldr	r5, [pc, #28]	; (8010890 <_kill_r+0x20>)
 8010874:	2300      	movs	r3, #0
 8010876:	4604      	mov	r4, r0
 8010878:	4608      	mov	r0, r1
 801087a:	4611      	mov	r1, r2
 801087c:	602b      	str	r3, [r5, #0]
 801087e:	f7f2 f887 	bl	8002990 <_kill>
 8010882:	1c43      	adds	r3, r0, #1
 8010884:	d102      	bne.n	801088c <_kill_r+0x1c>
 8010886:	682b      	ldr	r3, [r5, #0]
 8010888:	b103      	cbz	r3, 801088c <_kill_r+0x1c>
 801088a:	6023      	str	r3, [r4, #0]
 801088c:	bd38      	pop	{r3, r4, r5, pc}
 801088e:	bf00      	nop
 8010890:	200020d4 	.word	0x200020d4

08010894 <_getpid_r>:
 8010894:	f7f2 b874 	b.w	8002980 <_getpid>

08010898 <__swhatbuf_r>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	460c      	mov	r4, r1
 801089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a0:	2900      	cmp	r1, #0
 80108a2:	b096      	sub	sp, #88	; 0x58
 80108a4:	4615      	mov	r5, r2
 80108a6:	461e      	mov	r6, r3
 80108a8:	da0d      	bge.n	80108c6 <__swhatbuf_r+0x2e>
 80108aa:	89a3      	ldrh	r3, [r4, #12]
 80108ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80108b0:	f04f 0100 	mov.w	r1, #0
 80108b4:	bf0c      	ite	eq
 80108b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80108ba:	2340      	movne	r3, #64	; 0x40
 80108bc:	2000      	movs	r0, #0
 80108be:	6031      	str	r1, [r6, #0]
 80108c0:	602b      	str	r3, [r5, #0]
 80108c2:	b016      	add	sp, #88	; 0x58
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
 80108c6:	466a      	mov	r2, sp
 80108c8:	f000 f848 	bl	801095c <_fstat_r>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	dbec      	blt.n	80108aa <__swhatbuf_r+0x12>
 80108d0:	9901      	ldr	r1, [sp, #4]
 80108d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80108d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80108da:	4259      	negs	r1, r3
 80108dc:	4159      	adcs	r1, r3
 80108de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108e2:	e7eb      	b.n	80108bc <__swhatbuf_r+0x24>

080108e4 <__smakebuf_r>:
 80108e4:	898b      	ldrh	r3, [r1, #12]
 80108e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108e8:	079d      	lsls	r5, r3, #30
 80108ea:	4606      	mov	r6, r0
 80108ec:	460c      	mov	r4, r1
 80108ee:	d507      	bpl.n	8010900 <__smakebuf_r+0x1c>
 80108f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	6123      	str	r3, [r4, #16]
 80108f8:	2301      	movs	r3, #1
 80108fa:	6163      	str	r3, [r4, #20]
 80108fc:	b002      	add	sp, #8
 80108fe:	bd70      	pop	{r4, r5, r6, pc}
 8010900:	ab01      	add	r3, sp, #4
 8010902:	466a      	mov	r2, sp
 8010904:	f7ff ffc8 	bl	8010898 <__swhatbuf_r>
 8010908:	9900      	ldr	r1, [sp, #0]
 801090a:	4605      	mov	r5, r0
 801090c:	4630      	mov	r0, r6
 801090e:	f7fb fc19 	bl	800c144 <_malloc_r>
 8010912:	b948      	cbnz	r0, 8010928 <__smakebuf_r+0x44>
 8010914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010918:	059a      	lsls	r2, r3, #22
 801091a:	d4ef      	bmi.n	80108fc <__smakebuf_r+0x18>
 801091c:	f023 0303 	bic.w	r3, r3, #3
 8010920:	f043 0302 	orr.w	r3, r3, #2
 8010924:	81a3      	strh	r3, [r4, #12]
 8010926:	e7e3      	b.n	80108f0 <__smakebuf_r+0xc>
 8010928:	89a3      	ldrh	r3, [r4, #12]
 801092a:	6020      	str	r0, [r4, #0]
 801092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010930:	81a3      	strh	r3, [r4, #12]
 8010932:	9b00      	ldr	r3, [sp, #0]
 8010934:	6163      	str	r3, [r4, #20]
 8010936:	9b01      	ldr	r3, [sp, #4]
 8010938:	6120      	str	r0, [r4, #16]
 801093a:	b15b      	cbz	r3, 8010954 <__smakebuf_r+0x70>
 801093c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010940:	4630      	mov	r0, r6
 8010942:	f000 f81d 	bl	8010980 <_isatty_r>
 8010946:	b128      	cbz	r0, 8010954 <__smakebuf_r+0x70>
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	f023 0303 	bic.w	r3, r3, #3
 801094e:	f043 0301 	orr.w	r3, r3, #1
 8010952:	81a3      	strh	r3, [r4, #12]
 8010954:	89a3      	ldrh	r3, [r4, #12]
 8010956:	431d      	orrs	r5, r3
 8010958:	81a5      	strh	r5, [r4, #12]
 801095a:	e7cf      	b.n	80108fc <__smakebuf_r+0x18>

0801095c <_fstat_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d07      	ldr	r5, [pc, #28]	; (801097c <_fstat_r+0x20>)
 8010960:	2300      	movs	r3, #0
 8010962:	4604      	mov	r4, r0
 8010964:	4608      	mov	r0, r1
 8010966:	4611      	mov	r1, r2
 8010968:	602b      	str	r3, [r5, #0]
 801096a:	f7f2 f870 	bl	8002a4e <_fstat>
 801096e:	1c43      	adds	r3, r0, #1
 8010970:	d102      	bne.n	8010978 <_fstat_r+0x1c>
 8010972:	682b      	ldr	r3, [r5, #0]
 8010974:	b103      	cbz	r3, 8010978 <_fstat_r+0x1c>
 8010976:	6023      	str	r3, [r4, #0]
 8010978:	bd38      	pop	{r3, r4, r5, pc}
 801097a:	bf00      	nop
 801097c:	200020d4 	.word	0x200020d4

08010980 <_isatty_r>:
 8010980:	b538      	push	{r3, r4, r5, lr}
 8010982:	4d06      	ldr	r5, [pc, #24]	; (801099c <_isatty_r+0x1c>)
 8010984:	2300      	movs	r3, #0
 8010986:	4604      	mov	r4, r0
 8010988:	4608      	mov	r0, r1
 801098a:	602b      	str	r3, [r5, #0]
 801098c:	f7f2 f86f 	bl	8002a6e <_isatty>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d102      	bne.n	801099a <_isatty_r+0x1a>
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	b103      	cbz	r3, 801099a <_isatty_r+0x1a>
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	bd38      	pop	{r3, r4, r5, pc}
 801099c:	200020d4 	.word	0x200020d4

080109a0 <sqrtf>:
 80109a0:	b508      	push	{r3, lr}
 80109a2:	ed2d 8b02 	vpush	{d8}
 80109a6:	eeb0 8a40 	vmov.f32	s16, s0
 80109aa:	f000 f817 	bl	80109dc <__ieee754_sqrtf>
 80109ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80109b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b6:	d60c      	bvs.n	80109d2 <sqrtf+0x32>
 80109b8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80109d8 <sqrtf+0x38>
 80109bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80109c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c4:	d505      	bpl.n	80109d2 <sqrtf+0x32>
 80109c6:	f7fc fd4b 	bl	800d460 <__errno>
 80109ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80109ce:	2321      	movs	r3, #33	; 0x21
 80109d0:	6003      	str	r3, [r0, #0]
 80109d2:	ecbd 8b02 	vpop	{d8}
 80109d6:	bd08      	pop	{r3, pc}
 80109d8:	00000000 	.word	0x00000000

080109dc <__ieee754_sqrtf>:
 80109dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80109e0:	4770      	bx	lr
	...

080109e4 <_init>:
 80109e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e6:	bf00      	nop
 80109e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ea:	bc08      	pop	{r3}
 80109ec:	469e      	mov	lr, r3
 80109ee:	4770      	bx	lr

080109f0 <_fini>:
 80109f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f2:	bf00      	nop
 80109f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109f6:	bc08      	pop	{r3}
 80109f8:	469e      	mov	lr, r3
 80109fa:	4770      	bx	lr
