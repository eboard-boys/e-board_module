
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800c708  0800c708  0001c708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cce0  0800cce0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cce0  0800cce0  0001cce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cce8  0800cce8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cce8  0800cce8  0001cce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccec  0800ccec  0001ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ccf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200001d4  0800cec4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800cec4  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d22  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd0  00000000  00000000  00038f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0003bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001221  00000000  00000000  0003d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a52e  00000000  00000000  0003e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b724  00000000  00000000  00068d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b0db  00000000  00000000  000844c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000792c  00000000  00000000  0018f5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00196ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6f0 	.word	0x0800c6f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c6f0 	.word	0x0800c6f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b090      	sub	sp, #64	; 0x40
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 ffa5 	bl	8001f44 <HAL_Init>

  /* USER CODE BEGIN Init */
  char msg[50];
  int pot;
  int Throttle;
  Speed = 0;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <main+0x78>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f83e 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fa6a 	bl	80014dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001008:	f000 fa38 	bl	800147c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800100c:	f000 f98e 	bl	800132c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001010:	f000 f888 	bl	8001124 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001014:	f000 f8fc 	bl	8001210 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001018:	f000 f93a 	bl	8001290 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800101c:	f000 f9fe 	bl	800141c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001020:	4812      	ldr	r0, [pc, #72]	; (800106c <main+0x7c>)
 8001022:	f001 fb41 	bl	80026a8 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001026:	210c      	movs	r1, #12
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <main+0x80>)
 800102a:	f004 fef3 	bl	8005e14 <HAL_TIM_PWM_Start>
  Lora_Init();
 800102e:	f000 fabb 	bl	80015a8 <Lora_Init>
  MPU_6050_Init();
 8001032:	f000 fb29 	bl	8001688 <MPU_6050_Init>
  HAL_TIM_Base_Start(&htim2);
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <main+0x84>)
 8001038:	f004 fe22 	bl	8005c80 <HAL_TIM_Base_Start>
  float sec = 0;
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
	//HAL_ADC_Start(&hadc1);
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	//pot = HAL_ADC_GetValue(&hadc1);

	Throttle = 80;
 8001042:	2350      	movs	r3, #80	; 0x50
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM3->CCR4 = Throttle;
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <main+0x88>)
 8001048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104a:	6413      	str	r3, [r2, #64]	; 0x40

	sprintf(msg, "p%i", Throttle);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001050:	490a      	ldr	r1, [pc, #40]	; (800107c <main+0x8c>)
 8001052:	4618      	mov	r0, r3
 8001054:	f007 feac 	bl	8008db0 <siprintf>
	Lora_Send_Data(msg);
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fae4 	bl	8001628 <Lora_Send_Data>
	HAL_Delay(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f000 ffeb 	bl	800203c <HAL_Delay>
	Throttle = 80;
 8001066:	e7ec      	b.n	8001042 <main+0x52>
 8001068:	20000458 	.word	0x20000458
 800106c:	200001f0 	.word	0x200001f0
 8001070:	200002f4 	.word	0x200002f4
 8001074:	200002a8 	.word	0x200002a8
 8001078:	40000400 	.word	0x40000400
 800107c:	0800c708 	.word	0x0800c708

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2244      	movs	r2, #68	; 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f007 fef1 	bl	8008e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a6:	f003 fa81 	bl	80045ac <HAL_PWREx_ControlVoltageScaling>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b0:	f000 fc0c 	bl	80018cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010be:	2310      	movs	r3, #16
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c6:	2302      	movs	r3, #2
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010d2:	2307      	movs	r3, #7
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fab8 	bl	8004658 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ee:	f000 fbed 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fe80 	bl	8004e10 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001116:	f000 fbd9 	bl	80018cc <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	; 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001148:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <MX_ADC1_Init+0xe4>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_ADC1_Init+0xe0>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_ADC1_Init+0xe0>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001166:	2204      	movs	r2, #4
 8001168:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_ADC1_Init+0xe0>)
 800116c:	2200      	movs	r2, #0
 800116e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001172:	2200      	movs	r2, #0
 8001174:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001178:	2201      	movs	r2, #1
 800117a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0xe0>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_ADC1_Init+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_ADC1_Init+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_ADC1_Init+0xe0>)
 800119a:	2200      	movs	r2, #0
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_ADC1_Init+0xe0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a6:	4817      	ldr	r0, [pc, #92]	; (8001204 <MX_ADC1_Init+0xe0>)
 80011a8:	f001 f92e 	bl	8002408 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011b2:	f000 fb8b 	bl	80018cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4810      	ldr	r0, [pc, #64]	; (8001204 <MX_ADC1_Init+0xe0>)
 80011c2:	f001 ffc9 	bl	8003158 <HAL_ADCEx_MultiModeConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011cc:	f000 fb7e 	bl	80018cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_ADC1_Init+0xe8>)
 80011d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d4:	2306      	movs	r3, #6
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011dc:	237f      	movs	r3, #127	; 0x7f
 80011de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e0:	2304      	movs	r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_ADC1_Init+0xe0>)
 80011ee:	f001 fb15 	bl	800281c <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011f8:	f000 fb68 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001f0 	.word	0x200001f0
 8001208:	50040000 	.word	0x50040000
 800120c:	04300002 	.word	0x04300002

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_I2C1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_I2C1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_I2C1_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <MX_I2C1_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_I2C1_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <MX_I2C1_Init+0x74>)
 800124c:	f002 fb86 	bl	800395c <HAL_I2C_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001256:	f000 fb39 	bl	80018cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <MX_I2C1_Init+0x74>)
 800125e:	f003 f8ff 	bl	8004460 <HAL_I2CEx_ConfigAnalogFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 fb30 	bl	80018cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_I2C1_Init+0x74>)
 8001270:	f003 f941 	bl	80044f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 fb27 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000254 	.word	0x20000254
 8001288:	40005400 	.word	0x40005400
 800128c:	10909cec 	.word	0x10909cec

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_TIM2_Init+0x98>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM2_Init+0x98>)
 80012b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM2_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_TIM2_Init+0x98>)
 80012c6:	f240 623f 	movw	r2, #1599	; 0x63f
 80012ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_TIM2_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_TIM2_Init+0x98>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d8:	4813      	ldr	r0, [pc, #76]	; (8001328 <MX_TIM2_Init+0x98>)
 80012da:	f004 fc79 	bl	8005bd0 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012e4:	f000 faf2 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_TIM2_Init+0x98>)
 80012f6:	f004 ffa7 	bl	8006248 <HAL_TIM_ConfigClockSource>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001300:	f000 fae4 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_TIM2_Init+0x98>)
 8001312:	f005 fc93 	bl	8006c3c <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800131c:	f000 fad6 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200002a8 	.word	0x200002a8

0800132c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001360:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <MX_TIM3_Init+0xec>)
 8001362:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800136a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <MX_TIM3_Init+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001374:	f240 623f 	movw	r2, #1599	; 0x63f
 8001378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_TIM3_Init+0xe8>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001386:	4823      	ldr	r0, [pc, #140]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001388:	f004 fc22 	bl	8005bd0 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 fa9b 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a0:	4619      	mov	r1, r3
 80013a2:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013a4:	f004 ff50 	bl	8006248 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013ae:	f000 fa8d 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013b4:	f004 fccc 	bl	8005d50 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013be:	f000 fa85 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4810      	ldr	r0, [pc, #64]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013d2:	f005 fc33 	bl	8006c3c <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80013dc:	f000 fa76 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	220c      	movs	r2, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM3_Init+0xe8>)
 80013f8:	f004 fe12 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001402:	f000 fa63 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM3_Init+0xe8>)
 8001408:	f000 fb84 	bl	8001b14 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3738      	adds	r7, #56	; 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200002f4 	.word	0x200002f4
 8001418:	40000400 	.word	0x40000400

0800141c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <MX_USART1_UART_Init+0x5c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART1_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART1_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART1_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART1_UART_Init+0x58>)
 8001460:	f005 fc74 	bl	8006d4c <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 fa2f 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000340 	.word	0x20000340
 8001478:	40013800 	.word	0x40013800

0800147c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 8001482:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <MX_USART2_UART_Init+0x5c>)
 8001484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART2_UART_Init+0x58>)
 80014c0:	f005 fc44 	bl	8006d4c <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ca:	f000 f9ff 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003c8 	.word	0x200003c8
 80014d8:	40004400 	.word	0x40004400

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_GPIO_Init+0xc4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <MX_GPIO_Init+0xc4>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_GPIO_Init+0xc4>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_GPIO_Init+0xc4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_GPIO_Init+0xc4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f002 f9e7 	bl	800392c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001564:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <MX_GPIO_Init+0xc8>)
 8001576:	f002 f82f 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157a:	2320      	movs	r3, #32
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f002 f820 	bl	80035d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000800 	.word	0x48000800

080015a8 <Lora_Init>:

/* USER CODE BEGIN 4 */

void Lora_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09a      	sub	sp, #104	; 0x68
 80015ac:	af00      	add	r7, sp, #0
	char msg[100] = "";
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	2260      	movs	r2, #96	; 0x60
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f007 fc5b 	bl	8008e76 <memset>
	sprintf(msg, "AT+ADDRESS=24\r\n");
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4916      	ldr	r1, [pc, #88]	; (800161c <Lora_Init+0x74>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 fbf3 	bl	8008db0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe4f 	bl	8000270 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	1d39      	adds	r1, r7, #4
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	4810      	ldr	r0, [pc, #64]	; (8001620 <Lora_Init+0x78>)
 80015de:	f005 fc03 	bl	8006de8 <HAL_UART_Transmit>
	HAL_Delay(500);
 80015e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e6:	f000 fd29 	bl	800203c <HAL_Delay>

	sprintf(msg, "AT+ADDRESS?\r\n");
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	490d      	ldr	r1, [pc, #52]	; (8001624 <Lora_Init+0x7c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f007 fbde 	bl	8008db0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe3a 	bl	8000270 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	1d39      	adds	r1, r7, #4
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <Lora_Init+0x78>)
 8001608:	f005 fbee 	bl	8006de8 <HAL_UART_Transmit>
	HAL_Delay(500);
 800160c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001610:	f000 fd14 	bl	800203c <HAL_Delay>
}
 8001614:	bf00      	nop
 8001616:	3768      	adds	r7, #104	; 0x68
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	0800c70c 	.word	0x0800c70c
 8001620:	20000340 	.word	0x20000340
 8001624:	0800c71c 	.word	0x0800c71c

08001628 <Lora_Send_Data>:

void Lora_Send_Data(char data[])
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09e      	sub	sp, #120	; 0x78
 800162c:	af02      	add	r7, sp, #8
 800162e:	6078      	str	r0, [r7, #4]
	char msg[100] = "";
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2260      	movs	r2, #96	; 0x60
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f007 fc1a 	bl	8008e76 <memset>
	sprintf(msg, "AT+SEND=,%i,%i,%s", ESP_LORA_ADDRESS, strlen(data), data);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7fe fe14 	bl	8000270 <strlen>
 8001648:	4602      	mov	r2, r0
 800164a:	f107 000c 	add.w	r0, r7, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	2219      	movs	r2, #25
 8001656:	490a      	ldr	r1, [pc, #40]	; (8001680 <Lora_Send_Data+0x58>)
 8001658:	f007 fbaa 	bl	8008db0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe05 	bl	8000270 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 010c 	add.w	r1, r7, #12
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <Lora_Send_Data+0x5c>)
 8001674:	f005 fbb8 	bl	8006de8 <HAL_UART_Transmit>
}
 8001678:	bf00      	nop
 800167a:	3770      	adds	r7, #112	; 0x70
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	0800c72c 	.word	0x0800c72c
 8001684:	20000340 	.word	0x20000340

08001688 <MPU_6050_Init>:

void MPU_6050_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	76fb      	strb	r3, [r7, #27]
	//uint8_t data = 0;
	//ret = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
	uint8_t data = 0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	71fb      	strb	r3, [r7, #7]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001696:	2332      	movs	r3, #50	; 0x32
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2301      	movs	r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	226b      	movs	r2, #107	; 0x6b
 80016a6:	21d0      	movs	r1, #208	; 0xd0
 80016a8:	487c      	ldr	r0, [pc, #496]	; (800189c <MPU_6050_Init+0x214>)
 80016aa:	f002 f9f3 	bl	8003a94 <HAL_I2C_Mem_Write>
 80016ae:	4603      	mov	r3, r0
 80016b0:	76fb      	strb	r3, [r7, #27]
	if (ret != HAL_OK)
 80016b2:	7efb      	ldrb	r3, [r7, #27]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <MPU_6050_Init+0x3e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing MPU_6050\n", strlen("Error Initializing MPU_6050\n"), I2C_DELAY);
 80016b8:	2332      	movs	r3, #50	; 0x32
 80016ba:	221c      	movs	r2, #28
 80016bc:	4978      	ldr	r1, [pc, #480]	; (80018a0 <MPU_6050_Init+0x218>)
 80016be:	4879      	ldr	r0, [pc, #484]	; (80018a4 <MPU_6050_Init+0x21c>)
 80016c0:	f005 fb92 	bl	8006de8 <HAL_UART_Transmit>
 80016c4:	e037      	b.n	8001736 <MPU_6050_Init+0xae>
	}
	else
	{
		data = 0x08;
 80016c6:	2308      	movs	r3, #8
 80016c8:	71fb      	strb	r3, [r7, #7]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, GYRO_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 80016ca:	2332      	movs	r3, #50	; 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	221b      	movs	r2, #27
 80016da:	21d0      	movs	r1, #208	; 0xd0
 80016dc:	486f      	ldr	r0, [pc, #444]	; (800189c <MPU_6050_Init+0x214>)
 80016de:	f002 f9d9 	bl	8003a94 <HAL_I2C_Mem_Write>
 80016e2:	4603      	mov	r3, r0
 80016e4:	76fb      	strb	r3, [r7, #27]
		if (ret != HAL_OK)
 80016e6:	7efb      	ldrb	r3, [r7, #27]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <MPU_6050_Init+0x72>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing Gyro\n", strlen("Error Initializing Gyro\n"), I2C_DELAY);
 80016ec:	2332      	movs	r3, #50	; 0x32
 80016ee:	2218      	movs	r2, #24
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <MPU_6050_Init+0x220>)
 80016f2:	486c      	ldr	r0, [pc, #432]	; (80018a4 <MPU_6050_Init+0x21c>)
 80016f4:	f005 fb78 	bl	8006de8 <HAL_UART_Transmit>
 80016f8:	e01d      	b.n	8001736 <MPU_6050_Init+0xae>
		}
		else
		{
			ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, ACCEL_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 80016fa:	2332      	movs	r3, #50	; 0x32
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2301      	movs	r3, #1
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	221c      	movs	r2, #28
 800170a:	21d0      	movs	r1, #208	; 0xd0
 800170c:	4863      	ldr	r0, [pc, #396]	; (800189c <MPU_6050_Init+0x214>)
 800170e:	f002 f9c1 	bl	8003a94 <HAL_I2C_Mem_Write>
 8001712:	4603      	mov	r3, r0
 8001714:	76fb      	strb	r3, [r7, #27]
			if (ret != HAL_OK)
 8001716:	7efb      	ldrb	r3, [r7, #27]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <MPU_6050_Init+0xa2>
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing Accel\n", strlen("Error Initializing Accel\n"), I2C_DELAY);
 800171c:	2332      	movs	r3, #50	; 0x32
 800171e:	2219      	movs	r2, #25
 8001720:	4962      	ldr	r1, [pc, #392]	; (80018ac <MPU_6050_Init+0x224>)
 8001722:	4860      	ldr	r0, [pc, #384]	; (80018a4 <MPU_6050_Init+0x21c>)
 8001724:	f005 fb60 	bl	8006de8 <HAL_UART_Transmit>
 8001728:	e005      	b.n	8001736 <MPU_6050_Init+0xae>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"Initialized MPU_6050!\n", strlen("Initialized MPU_6050!\n"), I2C_DELAY);
 800172a:	2332      	movs	r3, #50	; 0x32
 800172c:	2216      	movs	r2, #22
 800172e:	4960      	ldr	r1, [pc, #384]	; (80018b0 <MPU_6050_Init+0x228>)
 8001730:	485c      	ldr	r0, [pc, #368]	; (80018a4 <MPU_6050_Init+0x21c>)
 8001732:	f005 fb59 	bl	8006de8 <HAL_UART_Transmit>
			}
		}
	}

	int x = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
	AccelErrorX = 0;
 800173a:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <MPU_6050_Init+0x22c>)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
	AccelErrorY = 0;
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <MPU_6050_Init+0x230>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	AccelErrorZ = 0;
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <MPU_6050_Init+0x234>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	int16_t dAccX;
	int16_t dAccY;
	int16_t dAccZ;
	while (x < 100)
 8001752:	e07d      	b.n	8001850 <MPU_6050_Init+0x1c8>
	{
		HAL_I2C_Mem_Read(&hi2c1, MPU_6050_ADDR, ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 6, I2C_DELAY);
 8001754:	2332      	movs	r3, #50	; 0x32
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2306      	movs	r3, #6
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <MPU_6050_Init+0x238>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	223b      	movs	r2, #59	; 0x3b
 8001764:	21d0      	movs	r1, #208	; 0xd0
 8001766:	484d      	ldr	r0, [pc, #308]	; (800189c <MPU_6050_Init+0x214>)
 8001768:	f002 faa8 	bl	8003cbc <HAL_I2C_Mem_Read>
		dAccX = ((int16_t)buf[0] << 8) | (buf[1]);
 800176c:	4b54      	ldr	r3, [pc, #336]	; (80018c0 <MPU_6050_Init+0x238>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <MPU_6050_Init+0x238>)
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	b21b      	sxth	r3, r3
 800177a:	4313      	orrs	r3, r2
 800177c:	833b      	strh	r3, [r7, #24]
		dAccY = ((int16_t)buf[2] << 8) | (buf[3]);
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <MPU_6050_Init+0x238>)
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <MPU_6050_Init+0x238>)
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	82fb      	strh	r3, [r7, #22]
		dAccZ = ((int16_t)buf[4] << 8) | (buf[5]);
 8001790:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <MPU_6050_Init+0x238>)
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <MPU_6050_Init+0x238>)
 800179a:	795b      	ldrb	r3, [r3, #5]
 800179c:	b21b      	sxth	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	82bb      	strh	r3, [r7, #20]

		float AccX = dAccX / 8192.0;
 80017a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe febc 	bl	8000524 <__aeabi_i2d>
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <MPU_6050_Init+0x23c>)
 80017b2:	f7ff f84b 	bl	800084c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fa13 	bl	8000be8 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]
		float AccY = dAccY / 8192.0;
 80017c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe feaa 	bl	8000524 <__aeabi_i2d>
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <MPU_6050_Init+0x23c>)
 80017d6:	f7ff f839 	bl	800084c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa01 	bl	8000be8 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60fb      	str	r3, [r7, #12]
		float AccZ = dAccZ / 8192.0;
 80017ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <MPU_6050_Init+0x23c>)
 80017fa:	f7ff f827 	bl	800084c <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9ef 	bl	8000be8 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	60bb      	str	r3, [r7, #8]
		AccelErrorX += AccX;
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <MPU_6050_Init+0x22c>)
 8001810:	ed93 7a00 	vldr	s14, [r3]
 8001814:	edd7 7a04 	vldr	s15, [r7, #16]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <MPU_6050_Init+0x22c>)
 800181e:	edc3 7a00 	vstr	s15, [r3]
		AccelErrorY += AccY;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MPU_6050_Init+0x230>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MPU_6050_Init+0x230>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		AccelErrorZ += AccZ;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MPU_6050_Init+0x234>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MPU_6050_Init+0x234>)
 8001846:	edc3 7a00 	vstr	s15, [r3]
		x++;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
	while (x < 100)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b63      	cmp	r3, #99	; 0x63
 8001854:	f77f af7e 	ble.w	8001754 <MPU_6050_Init+0xcc>
	}

	AccelErrorX = AccelErrorX / 100;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MPU_6050_Init+0x22c>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80018c8 <MPU_6050_Init+0x240>
 8001862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MPU_6050_Init+0x22c>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
	AccelErrorY = AccelErrorY / 100;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MPU_6050_Init+0x230>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	eddf 6a15 	vldr	s13, [pc, #84]	; 80018c8 <MPU_6050_Init+0x240>
 8001876:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MPU_6050_Init+0x230>)
 800187c:	edc3 7a00 	vstr	s15, [r3]
	AccelErrorZ = AccelErrorZ / 100;
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MPU_6050_Init+0x234>)
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	eddf 6a10 	vldr	s13, [pc, #64]	; 80018c8 <MPU_6050_Init+0x240>
 800188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MPU_6050_Init+0x234>)
 8001890:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001894:	bf00      	nop
}
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000254 	.word	0x20000254
 80018a0:	0800c740 	.word	0x0800c740
 80018a4:	200003c8 	.word	0x200003c8
 80018a8:	0800c760 	.word	0x0800c760
 80018ac:	0800c77c 	.word	0x0800c77c
 80018b0:	0800c798 	.word	0x0800c798
 80018b4:	2000045c 	.word	0x2000045c
 80018b8:	20000460 	.word	0x20000460
 80018bc:	20000464 	.word	0x20000464
 80018c0:	20000450 	.word	0x20000450
 80018c4:	40c00000 	.word	0x40c00000
 80018c8:	42c80000 	.word	0x42c80000

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <Error_Handler+0x8>
	...

080018d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_MspInit+0x44>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_MspInit+0x44>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x44>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x44>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0ac      	sub	sp, #176	; 0xb0
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2288      	movs	r2, #136	; 0x88
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f007 fa98 	bl	8008e76 <memset>
  if(hadc->Instance==ADC1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_ADC_MspInit+0xc8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d146      	bne.n	80019de <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001954:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800195a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001962:	2301      	movs	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001966:	2308      	movs	r3, #8
 8001968:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800196a:	2307      	movs	r3, #7
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001972:	2302      	movs	r3, #2
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f003 fc69 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800198c:	f7ff ff9e 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_ADC_MspInit+0xcc>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_ADC_MspInit+0xcc>)
 8001996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_ADC_MspInit+0xcc>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_ADC_MspInit+0xcc>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_ADC_MspInit+0xcc>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_ADC_MspInit+0xcc>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019c6:	230b      	movs	r3, #11
 80019c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_ADC_MspInit+0xd0>)
 80019da:	f001 fdfd 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	37b0      	adds	r7, #176	; 0xb0
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	50040000 	.word	0x50040000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	48000800 	.word	0x48000800

080019f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0ac      	sub	sp, #176	; 0xb0
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2288      	movs	r2, #136	; 0x88
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fa2e 	bl	8008e76 <memset>
  if(hi2c->Instance==I2C1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_I2C_MspInit+0xb0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d13b      	bne.n	8001a9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a24:	2340      	movs	r3, #64	; 0x40
 8001a26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4618      	mov	r0, r3
 8001a32:	f003 fc11 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a3c:	f7ff ff46 	bl	80018cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_I2C_MspInit+0xb4>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <HAL_I2C_MspInit+0xb4>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_I2C_MspInit+0xb4>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a72:	2304      	movs	r3, #4
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480b      	ldr	r0, [pc, #44]	; (8001aac <HAL_I2C_MspInit+0xb8>)
 8001a80:	f001 fdaa 	bl	80035d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_I2C_MspInit+0xb4>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_I2C_MspInit+0xb4>)
 8001a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_I2C_MspInit+0xb4>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	37b0      	adds	r7, #176	; 0xb0
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000400 	.word	0x48000400

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d10c      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ada:	e010      	b.n	8001afe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_TIM_Base_MspInit+0x60>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10b      	bne.n	8001afe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6593      	str	r3, [r2, #88]	; 0x58
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40000400 	.word	0x40000400

08001b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_TIM_MspPostInit+0x64>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11c      	bne.n	8001b70 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_MspPostInit+0x68>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	f001 fd34 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000800 	.word	0x48000800

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0ae      	sub	sp, #184	; 0xb8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2288      	movs	r2, #136	; 0x88
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f007 f966 	bl	8008e76 <memset>
  if(huart->Instance==USART1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a47      	ldr	r2, [pc, #284]	; (8001ccc <HAL_UART_MspInit+0x148>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d145      	bne.n	8001c40 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fb49 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bcc:	f7ff fe7e 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd4:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bda:	6613      	str	r3, [r2, #96]	; 0x60
 8001bdc:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2a:	f001 fcd5 	bl	80035d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2025      	movs	r0, #37	; 0x25
 8001c34:	f001 fc1b 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c38:	2025      	movs	r0, #37	; 0x25
 8001c3a:	f001 fc34 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c3e:	e040      	b.n	8001cc2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_UART_MspInit+0x150>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d13b      	bne.n	8001cc2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fafe 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c62:	f7ff fe33 	bl	80018cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_UART_MspInit+0x14c>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c96:	230c      	movs	r3, #12
 8001c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f001 fc8b 	bl	80035d8 <HAL_GPIO_Init>
}
 8001cc2:	bf00      	nop
 8001cc4:	37b8      	adds	r7, #184	; 0xb8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <NMI_Handler+0x4>

08001cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d24:	f000 f96a 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <USART1_IRQHandler+0x10>)
 8001d32:	f005 f8e3 	bl	8006efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000340 	.word	0x20000340

08001d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return 1;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_kill>:

int _kill(int pid, int sig)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d5a:	f007 f8df 	bl	8008f1c <__errno>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2216      	movs	r2, #22
 8001d62:	601a      	str	r2, [r3, #0]
  return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_exit>:

void _exit (int status)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffe7 	bl	8001d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d82:	e7fe      	b.n	8001d82 <_exit+0x12>

08001d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e00a      	b.n	8001dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d96:	f3af 8000 	nop.w
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf0      	blt.n	8001d96 <_read+0x12>
  }

  return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e009      	b.n	8001de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf1      	blt.n	8001dd0 <_write+0x12>
  }
  return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_close>:

int _close(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_isatty>:

int _isatty(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f007 f844 	bl	8008f1c <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20018000 	.word	0x20018000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	20000468 	.word	0x20000468
 8001ec8:	200005c0 	.word	0x200005c0

08001ecc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <SystemInit+0x20>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <SystemInit+0x20>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef4:	f7ff ffea 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	; (8001f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <LoopForever+0xe>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	; (8001f3c <LoopForever+0x16>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f007 f803 	bl	8008f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f22:	f7ff f865 	bl	8000ff0 <main>

08001f26 <LoopForever>:

LoopForever:
    b LoopForever
 8001f26:	e7fe      	b.n	8001f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f34:	0800ccf0 	.word	0x0800ccf0
  ldr r2, =_sbss
 8001f38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f3c:	200005bc 	.word	0x200005bc

08001f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_Init+0x3c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_Init+0x3c>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f001 fa7c 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 f80f 	bl	8001f84 <HAL_InitTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	e001      	b.n	8001f76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f72:	f7ff fcb1 	bl	80018d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f76:	79fb      	ldrb	r3, [r7, #7]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d023      	beq.n	8001fe0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_InitTick+0x70>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fa87 	bl	80034c2 <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d809      	bhi.n	8001fd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f001 fa51 	bl	800346e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_InitTick+0x74>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e004      	b.n	8001fe4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e001      	b.n	8001fe4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008
 8002020:	2000046c 	.word	0x2000046c

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000046c 	.word	0x2000046c

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff ffee 	bl	8002024 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffde 	bl	8002024 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000008 	.word	0x20000008

08002084 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	609a      	str	r2, [r3, #8]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3360      	adds	r3, #96	; 0x60
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <LL_ADC_SetOffset+0x44>)
 800210e:	4013      	ands	r3, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	4313      	orrs	r3, r2
 800211c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002124:	bf00      	nop
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	03fff000 	.word	0x03fff000

08002134 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	461a      	mov	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3360      	adds	r3, #96	; 0x60
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002196:	b480      	push	{r7}
 8002198:	b087      	sub	sp, #28
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3330      	adds	r3, #48	; 0x30
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	211f      	movs	r1, #31
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	f003 011f 	and.w	r1, r3, #31
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3314      	adds	r3, #20
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	0e5b      	lsrs	r3, r3, #25
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0d1b      	lsrs	r3, r3, #20
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2107      	movs	r1, #7
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	401a      	ands	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	0d1b      	lsrs	r3, r3, #20
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	431a      	orrs	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0318 	and.w	r3, r3, #24
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002268:	40d9      	lsrs	r1, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	400b      	ands	r3, r1
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	431a      	orrs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	0007ffff 	.word	0x0007ffff

0800228c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 031f 	and.w	r3, r3, #31
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002330:	d101      	bne.n	8002336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <LL_ADC_IsEnabled+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_ADC_IsEnabled+0x1a>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a6:	f043 0204 	orr.w	r2, r3, #4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d101      	bne.n	80023f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e130      	b.n	8002684 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fa75 	bl	8001920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff3f 	bl	80022cc <LL_ADC_IsDeepPowerDownEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff25 	bl	80022a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff5a 	bl	800231c <LL_ADC_IsInternalRegulatorEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff3e 	bl	80022f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002478:	4b84      	ldr	r3, [pc, #528]	; (800268c <HAL_ADC_Init+0x284>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	4a84      	ldr	r2, [pc, #528]	; (8002690 <HAL_ADC_Init+0x288>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800248c:	e002      	b.n	8002494 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff3c 	bl	800231c <LL_ADC_IsInternalRegulatorEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f043 0210 	orr.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	f043 0201 	orr.w	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff75 	bl	80023ba <LL_ADC_REG_IsConversionOngoing>
 80024d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80c9 	bne.w	8002672 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 80c5 	bne.w	8002672 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024f0:	f043 0202 	orr.w	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff35 	bl	800236c <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d115      	bne.n	8002534 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002508:	4862      	ldr	r0, [pc, #392]	; (8002694 <HAL_ADC_Init+0x28c>)
 800250a:	f7ff ff2f 	bl	800236c <LL_ADC_IsEnabled>
 800250e:	4604      	mov	r4, r0
 8002510:	4861      	ldr	r0, [pc, #388]	; (8002698 <HAL_ADC_Init+0x290>)
 8002512:	f7ff ff2b 	bl	800236c <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	431c      	orrs	r4, r3
 800251a:	4860      	ldr	r0, [pc, #384]	; (800269c <HAL_ADC_Init+0x294>)
 800251c:	f7ff ff26 	bl	800236c <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	4323      	orrs	r3, r4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4619      	mov	r1, r3
 800252e:	485c      	ldr	r0, [pc, #368]	; (80026a0 <HAL_ADC_Init+0x298>)
 8002530:	f7ff fda8 	bl	8002084 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e5b      	ldrb	r3, [r3, #25]
 8002538:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800253e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002544:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800254a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002552:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d106      	bne.n	8002570 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	3b01      	subs	r3, #1
 8002568:	045b      	lsls	r3, r3, #17
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_ADC_Init+0x29c>)
 8002594:	4013      	ands	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	430b      	orrs	r3, r1
 800259e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff1b 	bl	80023e0 <LL_ADC_INJ_IsConversionOngoing>
 80025aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13d      	bne.n	800262e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d13a      	bne.n	800262e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025bc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d4:	f023 0302 	bic.w	r3, r3, #2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	69b9      	ldr	r1, [r7, #24]
 80025de:	430b      	orrs	r3, r1
 80025e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d118      	bne.n	800261e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025f6:	f023 0304 	bic.w	r3, r3, #4
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800260e:	430a      	orrs	r2, r1
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	611a      	str	r2, [r3, #16]
 800261c:	e007      	b.n	800262e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10c      	bne.n	8002650 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f023 010f 	bic.w	r1, r3, #15
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
 800264e:	e007      	b.n	8002660 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 020f 	bic.w	r2, r2, #15
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f023 0303 	bic.w	r3, r3, #3
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
 8002670:	e007      	b.n	8002682 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002682:	7ffb      	ldrb	r3, [r7, #31]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	20000000 	.word	0x20000000
 8002690:	053e2d63 	.word	0x053e2d63
 8002694:	50040000 	.word	0x50040000
 8002698:	50040100 	.word	0x50040100
 800269c:	50040200 	.word	0x50040200
 80026a0:	50040300 	.word	0x50040300
 80026a4:	fff0c007 	.word	0xfff0c007

080026a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b0:	4857      	ldr	r0, [pc, #348]	; (8002810 <HAL_ADC_Start+0x168>)
 80026b2:	f7ff fdeb 	bl	800228c <LL_ADC_GetMultimode>
 80026b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fe7c 	bl	80023ba <LL_ADC_REG_IsConversionOngoing>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 809c 	bne.w	8002802 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_Start+0x30>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e097      	b.n	8002808 <HAL_ADC_Start+0x160>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fc8d 	bl	8003000 <ADC_Enable>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 8083 	bne.w	80027f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a42      	ldr	r2, [pc, #264]	; (8002814 <HAL_ADC_Start+0x16c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d002      	beq.n	8002716 <HAL_ADC_Start+0x6e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	e000      	b.n	8002718 <HAL_ADC_Start+0x70>
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_ADC_Start+0x170>)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	4293      	cmp	r3, r2
 800271e:	d002      	beq.n	8002726 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	d106      	bne.n	800274e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f023 0206 	bic.w	r2, r3, #6
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	; 0x58
 800274c:	e002      	b.n	8002754 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	221c      	movs	r2, #28
 800275a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <HAL_ADC_Start+0x16c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d002      	beq.n	8002774 <HAL_ADC_Start+0xcc>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e000      	b.n	8002776 <HAL_ADC_Start+0xce>
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_ADC_Start+0x170>)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	4293      	cmp	r3, r2
 800277c:	d008      	beq.n	8002790 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d002      	beq.n	8002790 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d114      	bne.n	80027ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fded 	bl	8002392 <LL_ADC_REG_StartConversion>
 80027b8:	e025      	b.n	8002806 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_ADC_Start+0x16c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d002      	beq.n	80027d6 <HAL_ADC_Start+0x12e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_Start+0x130>
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_Start+0x170>)
 80027d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00f      	beq.n	8002806 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
 80027f6:	e006      	b.n	8002806 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002800:	e001      	b.n	8002806 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	50040300 	.word	0x50040300
 8002814:	50040100 	.word	0x50040100
 8002818:	50040000 	.word	0x50040000

0800281c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b0b6      	sub	sp, #216	; 0xd8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x22>
 800283a:	2302      	movs	r3, #2
 800283c:	e3c9      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x7b6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fdb5 	bl	80023ba <LL_ADC_REG_IsConversionOngoing>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 83aa 	bne.w	8002fac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d824      	bhi.n	80028b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	3b02      	subs	r3, #2
 800286e:	2b03      	cmp	r3, #3
 8002870:	d81b      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x8e>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_ADC_ConfigChannel+0x5c>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	08002891 	.word	0x08002891
 8002880:	08002899 	.word	0x08002899
 8002884:	080028a1 	.word	0x080028a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002888:	230c      	movs	r3, #12
 800288a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800288e:	e010      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002890:	2312      	movs	r3, #18
 8002892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002896:	e00c      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002898:	2318      	movs	r3, #24
 800289a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800289e:	e008      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028a8:	e003      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028aa:	2306      	movs	r3, #6
 80028ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80028c0:	f7ff fc69 	bl	8002196 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fd76 	bl	80023ba <LL_ADC_REG_IsConversionOngoing>
 80028ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fd82 	bl	80023e0 <LL_ADC_INJ_IsConversionOngoing>
 80028dc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 81a4 	bne.w	8002c32 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 819f 	bne.w	8002c32 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	461a      	mov	r2, r3
 8002902:	f7ff fc74 	bl	80021ee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d00a      	beq.n	800293e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6919      	ldr	r1, [r3, #16]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002938:	f7ff fbd8 	bl	80020ec <LL_ADC_SetOffset>
 800293c:	e179      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fbf5 	bl	8002134 <LL_ADC_GetOffsetChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_ADC_ConfigChannel+0x14e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fbea 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	e01e      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x18c>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fbdf 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800298c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e004      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800299c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1a4>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	e018      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x1d6>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80029d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80029dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e004      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80029e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fbae 	bl	8002160 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fb92 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x214>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fb87 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	f003 021f 	and.w	r2, r3, #31
 8002a2e:	e01e      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x252>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fb7c 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a5e:	2320      	movs	r3, #32
 8002a60:	e004      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x26a>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	e018      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x29c>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e004      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d106      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fb4b 	bl	8002160 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fb2f 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x2da>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fb24 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	e01e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x318>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2102      	movs	r1, #2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fb19 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e004      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x330>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	e014      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x35a>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e004      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d106      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff faec 	bl	8002160 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fad0 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x398>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fac5 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	e017      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x3c8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2103      	movs	r1, #3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff faba 	bl	8002134 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e003      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x3e0>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	e011      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x404>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fa97 	bl	8002160 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fb98 	bl	800236c <LL_ADC_IsEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8140 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f7ff faf7 	bl	8002244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4a8f      	ldr	r2, [pc, #572]	; (8002e98 <HAL_ADC_ConfigChannel+0x67c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	f040 8131 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x46e>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	bf94      	ite	ls
 8002c82:	2301      	movls	r3, #1
 8002c84:	2300      	movhi	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e019      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x4a2>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	bf94      	ite	ls
 8002cb8:	2301      	movls	r3, #1
 8002cba:	2300      	movhi	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d079      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4c2>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cdc:	e015      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x4ee>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e003      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	069b      	lsls	r3, r3, #26
 8002d06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x50e>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	e017      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x53e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x564>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	0e9b      	lsrs	r3, r3, #26
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	e018      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x596>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d98:	2320      	movs	r3, #32
 8002d9a:	e003      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db2:	430b      	orrs	r3, r1
 8002db4:	e081      	b.n	8002eba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x5b6>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd0:	e015      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x5e2>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002dea:	2320      	movs	r3, #32
 8002dec:	e003      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	069b      	lsls	r3, r3, #26
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x602>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	e017      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x632>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	ea42 0103 	orr.w	r1, r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x65e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	3301      	adds	r3, #1
 8002e66:	f003 021f 	and.w	r2, r3, #31
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	3b1e      	subs	r3, #30
 8002e72:	051b      	lsls	r3, r3, #20
 8002e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e78:	e01e      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x69c>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	60fb      	str	r3, [r7, #12]
  return result;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e006      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x688>
 8002e96:	bf00      	nop
 8002e98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 021f 	and.w	r2, r3, #31
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	051b      	lsls	r3, r3, #20
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7ff f995 	bl	80021ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <HAL_ADC_ConfigChannel+0x7c0>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d07a      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed0:	4843      	ldr	r0, [pc, #268]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ed2:	f7ff f8fd 	bl	80020d0 <LL_ADC_GetCommonPathInternalCh>
 8002ed6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a41      	ldr	r2, [pc, #260]	; (8002fe4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d12c      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d126      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_ADC_ConfigChannel+0x6e8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <HAL_ADC_ConfigChannel+0x7d0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d15d      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4834      	ldr	r0, [pc, #208]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f10:	f7ff f8cb 	bl	80020aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f14:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	4a36      	ldr	r2, [pc, #216]	; (8002ff4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f2e:	e002      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f9      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f3c:	e040      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2d      	ldr	r2, [pc, #180]	; (8002ff8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d118      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d112      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x74c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_ADC_ConfigChannel+0x7d0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d12d      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f70:	4619      	mov	r1, r3
 8002f72:	481b      	ldr	r0, [pc, #108]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f74:	f7ff f899 	bl	80020aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f78:	e024      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_ADC_ConfigChannel+0x7e0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d120      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11a      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d115      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480e      	ldr	r0, [pc, #56]	; (8002fe0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fa6:	f7ff f880 	bl	80020aa <LL_ADC_SetCommonPathInternalCh>
 8002faa:	e00c      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002fbe:	e002      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	37d8      	adds	r7, #216	; 0xd8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	80080000 	.word	0x80080000
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	c7520000 	.word	0xc7520000
 8002fe8:	50040000 	.word	0x50040000
 8002fec:	50040200 	.word	0x50040200
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	053e2d63 	.word	0x053e2d63
 8002ff8:	cb840000 	.word	0xcb840000
 8002ffc:	80000001 	.word	0x80000001

08003000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f9ab 	bl	800236c <LL_ADC_IsEnabled>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d169      	bne.n	80030f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <ADC_Enable+0xfc>)
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f043 0210 	orr.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e055      	b.n	80030f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f97a 	bl	8002344 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003050:	482b      	ldr	r0, [pc, #172]	; (8003100 <ADC_Enable+0x100>)
 8003052:	f7ff f83d 	bl	80020d0 <LL_ADC_GetCommonPathInternalCh>
 8003056:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <ADC_Enable+0x104>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	4a28      	ldr	r2, [pc, #160]	; (8003108 <ADC_Enable+0x108>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800307a:	e002      	b.n	8003082 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	3b01      	subs	r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003088:	f7fe ffcc 	bl	8002024 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800308e:	e028      	b.n	80030e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f969 	bl	800236c <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f94d 	bl	8002344 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030aa:	f7fe ffbb 	bl	8002024 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d914      	bls.n	80030e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d00d      	beq.n	80030e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e007      	b.n	80030f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d1cf      	bne.n	8003090 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	8000003f 	.word	0x8000003f
 8003100:	50040300 	.word	0x50040300
 8003104:	20000000 	.word	0x20000000
 8003108:	053e2d63 	.word	0x053e2d63

0800310c <LL_ADC_IsEnabled>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <LL_ADC_IsEnabled+0x18>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <LL_ADC_IsEnabled+0x1a>
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_REG_IsConversionOngoing>:
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d101      	bne.n	800314a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b09f      	sub	sp, #124	; 0x7c
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003172:	2302      	movs	r3, #2
 8003174:	e093      	b.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800317e:	2300      	movs	r3, #0
 8003180:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003182:	2300      	movs	r3, #0
 8003184:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d102      	bne.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003190:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	e001      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e072      	b.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ffb9 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 80031c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ffb3 	bl	8003132 <LL_ADC_REG_IsConversionOngoing>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d154      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80031d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d151      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80031da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d02c      	beq.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80031e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031f6:	035b      	lsls	r3, r3, #13
 80031f8:	430b      	orrs	r3, r1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003200:	4829      	ldr	r0, [pc, #164]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003202:	f7ff ff83 	bl	800310c <LL_ADC_IsEnabled>
 8003206:	4604      	mov	r4, r0
 8003208:	4828      	ldr	r0, [pc, #160]	; (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800320a:	f7ff ff7f 	bl	800310c <LL_ADC_IsEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	431c      	orrs	r4, r3
 8003212:	4828      	ldr	r0, [pc, #160]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003214:	f7ff ff7a 	bl	800310c <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d137      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003228:	f023 030f 	bic.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	6811      	ldr	r1, [r2, #0]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	6892      	ldr	r2, [r2, #8]
 8003234:	430a      	orrs	r2, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800323c:	e028      	b.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800323e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800324a:	4817      	ldr	r0, [pc, #92]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800324c:	f7ff ff5e 	bl	800310c <LL_ADC_IsEnabled>
 8003250:	4604      	mov	r4, r0
 8003252:	4816      	ldr	r0, [pc, #88]	; (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003254:	f7ff ff5a 	bl	800310c <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	431c      	orrs	r4, r3
 800325c:	4815      	ldr	r0, [pc, #84]	; (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800325e:	f7ff ff55 	bl	800310c <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	4323      	orrs	r3, r4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d112      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003278:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800327a:	e009      	b.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800328e:	e000      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003290:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800329a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800329e:	4618      	mov	r0, r3
 80032a0:	377c      	adds	r7, #124	; 0x7c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	50040000 	.word	0x50040000
 80032ac:	50040100 	.word	0x50040100
 80032b0:	50040300 	.word	0x50040300
 80032b4:	50040200 	.word	0x50040200

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff29 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff3e 	bl	8003300 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff31 	bl	800331c <__NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffa2 	bl	8003414 <SysTick_Config>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d008      	beq.n	8003504 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e022      	b.n	800354a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 020e 	bic.w	r2, r2, #14
 8003512:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f003 021c 	and.w	r2, r3, #28
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d005      	beq.n	800357a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e029      	b.n	80035ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 020e 	bic.w	r2, r2, #14
 8003588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 021c 	and.w	r2, r3, #28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
    }
  }
  return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e6:	e17f      	b.n	80038e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8171 	beq.w	80038e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d005      	beq.n	8003618 <HAL_GPIO_Init+0x40>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d130      	bne.n	800367a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800364e:	2201      	movs	r2, #1
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 0201 	and.w	r2, r3, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d118      	bne.n	80036b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800368c:	2201      	movs	r2, #1
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	08db      	lsrs	r3, r3, #3
 80036a2:	f003 0201 	and.w	r2, r3, #1
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d017      	beq.n	80036f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d123      	bne.n	8003748 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	08da      	lsrs	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3208      	adds	r2, #8
 8003742:	6939      	ldr	r1, [r7, #16]
 8003744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0203 	and.w	r2, r3, #3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80ac 	beq.w	80038e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_GPIO_Init+0x330>)
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_GPIO_Init+0x330>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6613      	str	r3, [r2, #96]	; 0x60
 8003796:	4b5c      	ldr	r3, [pc, #368]	; (8003908 <HAL_GPIO_Init+0x330>)
 8003798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037a2:	4a5a      	ldr	r2, [pc, #360]	; (800390c <HAL_GPIO_Init+0x334>)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037cc:	d025      	beq.n	800381a <HAL_GPIO_Init+0x242>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4f      	ldr	r2, [pc, #316]	; (8003910 <HAL_GPIO_Init+0x338>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <HAL_GPIO_Init+0x23e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4e      	ldr	r2, [pc, #312]	; (8003914 <HAL_GPIO_Init+0x33c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d019      	beq.n	8003812 <HAL_GPIO_Init+0x23a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4d      	ldr	r2, [pc, #308]	; (8003918 <HAL_GPIO_Init+0x340>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_GPIO_Init+0x236>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4c      	ldr	r2, [pc, #304]	; (800391c <HAL_GPIO_Init+0x344>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_GPIO_Init+0x232>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_GPIO_Init+0x348>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <HAL_GPIO_Init+0x22e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <HAL_GPIO_Init+0x34c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_GPIO_Init+0x22a>
 80037fe:	2306      	movs	r3, #6
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x244>
 8003802:	2307      	movs	r3, #7
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x244>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x244>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x244>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x244>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x244>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x244>
 800381a:	2300      	movs	r3, #0
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800382c:	4937      	ldr	r1, [pc, #220]	; (800390c <HAL_GPIO_Init+0x334>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_GPIO_Init+0x350>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800385e:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_GPIO_Init+0x350>)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <HAL_GPIO_Init+0x350>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <HAL_GPIO_Init+0x350>)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_GPIO_Init+0x350>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	43db      	mvns	r3, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_GPIO_Init+0x350>)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_GPIO_Init+0x350>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <HAL_GPIO_Init+0x350>)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3301      	adds	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f47f ae78 	bne.w	80035e8 <HAL_GPIO_Init+0x10>
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	40010000 	.word	0x40010000
 8003910:	48000400 	.word	0x48000400
 8003914:	48000800 	.word	0x48000800
 8003918:	48000c00 	.word	0x48000c00
 800391c:	48001000 	.word	0x48001000
 8003920:	48001400 	.word	0x48001400
 8003924:	48001800 	.word	0x48001800
 8003928:	40010400 	.word	0x40010400

0800392c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
 8003938:	4613      	mov	r3, r2
 800393a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800393c:	787b      	ldrb	r3, [r7, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003948:	e002      	b.n	8003950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e08d      	b.n	8003a8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe f836 	bl	80019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	e006      	b.n	80039e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d108      	bne.n	80039fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	e007      	b.n	8003a0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69d9      	ldr	r1, [r3, #28]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	4608      	mov	r0, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	817b      	strh	r3, [r7, #10]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	813b      	strh	r3, [r7, #8]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	f040 80f9 	bne.w	8003cae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x34>
 8003ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0ed      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2C_Mem_Write+0x4e>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0e6      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aea:	f7fe fa9b 	bl	8002024 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2319      	movs	r3, #25
 8003af6:	2201      	movs	r2, #1
 8003af8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fac3 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0d1      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2221      	movs	r2, #33	; 0x21
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a3a      	ldr	r2, [r7, #32]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b34:	88f8      	ldrh	r0, [r7, #6]
 8003b36:	893a      	ldrh	r2, [r7, #8]
 8003b38:	8979      	ldrh	r1, [r7, #10]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4603      	mov	r3, r0
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f9d3 	bl	8003ef0 <I2C_RequestMemoryWrite>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0a9      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2bff      	cmp	r3, #255	; 0xff
 8003b64:	d90e      	bls.n	8003b84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fc3d 	bl	80043fc <I2C_TransferConfig>
 8003b82:	e00f      	b.n	8003ba4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	8979      	ldrh	r1, [r7, #10]
 8003b96:	2300      	movs	r3, #0
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fc2c 	bl	80043fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fabc 	bl	8004126 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e07b      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d034      	beq.n	8003c5c <HAL_I2C_Mem_Write+0x1c8>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d130      	bne.n	8003c5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fa3f 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e04d      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2bff      	cmp	r3, #255	; 0xff
 8003c1c:	d90e      	bls.n	8003c3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	8979      	ldrh	r1, [r7, #10]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fbe1 	bl	80043fc <I2C_TransferConfig>
 8003c3a:	e00f      	b.n	8003c5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fbd0 	bl	80043fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d19e      	bne.n	8003ba4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 faa2 	bl	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e01a      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_I2C_Mem_Write+0x224>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fe00e800 	.word	0xfe00e800

08003cbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	813b      	strh	r3, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	f040 80fd 	bne.w	8003ede <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_I2C_Mem_Read+0x34>
 8003cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0f1      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Mem_Read+0x4e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0ea      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d12:	f7fe f987 	bl	8002024 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2319      	movs	r3, #25
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f9af 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0d5      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2222      	movs	r2, #34	; 0x22
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d5c:	88f8      	ldrh	r0, [r7, #6]
 8003d5e:	893a      	ldrh	r2, [r7, #8]
 8003d60:	8979      	ldrh	r1, [r7, #10]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f913 	bl	8003f98 <I2C_RequestMemoryRead>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0ad      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2bff      	cmp	r3, #255	; 0xff
 8003d8c:	d90e      	bls.n	8003dac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_I2C_Mem_Read+0x22c>)
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fb29 	bl	80043fc <I2C_TransferConfig>
 8003daa:	e00f      	b.n	8003dcc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_I2C_Mem_Read+0x22c>)
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fb18 	bl	80043fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f956 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07c      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d034      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x1d0>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d130      	bne.n	8003e8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	2200      	movs	r2, #0
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f927 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e04d      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2bff      	cmp	r3, #255	; 0xff
 8003e4c:	d90e      	bls.n	8003e6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	22ff      	movs	r2, #255	; 0xff
 8003e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	8979      	ldrh	r1, [r7, #10]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fac9 	bl	80043fc <I2C_TransferConfig>
 8003e6a:	e00f      	b.n	8003e8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	8979      	ldrh	r1, [r7, #10]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fab8 	bl	80043fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d19a      	bne.n	8003dcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f98a 	bl	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e01a      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_I2C_Mem_Read+0x230>)
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	80002400 	.word	0x80002400
 8003eec:	fe00e800 	.word	0xfe00e800

08003ef0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	460b      	mov	r3, r1
 8003f04:	813b      	strh	r3, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	8979      	ldrh	r1, [r7, #10]
 8003f10:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <I2C_RequestMemoryWrite+0xa4>)
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa6f 	bl	80043fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	69b9      	ldr	r1, [r7, #24]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f8ff 	bl	8004126 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e02c      	b.n	8003f8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f38:	893b      	ldrh	r3, [r7, #8]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	629a      	str	r2, [r3, #40]	; 0x28
 8003f42:	e015      	b.n	8003f70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f44:	893b      	ldrh	r3, [r7, #8]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f8e5 	bl	8004126 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e012      	b.n	8003f8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f66:	893b      	ldrh	r3, [r7, #8]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f884 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	80002000 	.word	0x80002000

08003f98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	817b      	strh	r3, [r7, #10]
 8003faa:	460b      	mov	r3, r1
 8003fac:	813b      	strh	r3, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	4b20      	ldr	r3, [pc, #128]	; (800403c <I2C_RequestMemoryRead+0xa4>)
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fa1c 	bl	80043fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8ac 	bl	8004126 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e02c      	b.n	8004032 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d105      	bne.n	8003fea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fde:	893b      	ldrh	r3, [r7, #8]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe8:	e015      	b.n	8004016 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f892 	bl	8004126 <I2C_WaitOnTXISFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e012      	b.n	8004032 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2200      	movs	r2, #0
 800401e:	2140      	movs	r1, #64	; 0x40
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f831 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	80002000 	.word	0x80002000

08004040 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d103      	bne.n	800405e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d007      	beq.n	800407c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	619a      	str	r2, [r3, #24]
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004098:	e031      	b.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d02d      	beq.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a2:	f7fd ffbf 	bl	8002024 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d122      	bne.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d113      	bne.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e00f      	b.n	800411e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	429a      	cmp	r2, r3
 800411a:	d0be      	beq.n	800409a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004132:	e033      	b.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f87f 	bl	800423c <I2C_IsErrorOccurred>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e031      	b.n	80041ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d025      	beq.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fd ff68 	bl	8002024 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11a      	bne.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	d013      	beq.n	800419c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e007      	b.n	80041ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d1c4      	bne.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c0:	e02f      	b.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f838 	bl	800423c <I2C_IsErrorOccurred>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e02d      	b.n	8004232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7fd ff25 	bl	8002024 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d11a      	bne.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d013      	beq.n	8004222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e007      	b.n	8004232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b20      	cmp	r3, #32
 800422e:	d1c8      	bne.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d068      	beq.n	800433a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2210      	movs	r2, #16
 800426e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004270:	e049      	b.n	8004306 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d045      	beq.n	8004306 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800427a:	f7fd fed3 	bl	8002024 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <I2C_IsErrorOccurred+0x54>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d13a      	bne.n	8004306 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d121      	bne.n	80042f8 <I2C_IsErrorOccurred+0xbc>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ba:	d01d      	beq.n	80042f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d01a      	beq.n	80042f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042d2:	f7fd fea7 	bl	8002024 <HAL_GetTick>
 80042d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042d8:	e00e      	b.n	80042f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042da:	f7fd fea3 	bl	8002024 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b19      	cmp	r3, #25
 80042e6:	d907      	bls.n	80042f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f043 0320 	orr.w	r3, r3, #32
 80042ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80042f6:	e006      	b.n	8004306 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b20      	cmp	r3, #32
 8004304:	d1e9      	bne.n	80042da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b20      	cmp	r3, #32
 8004312:	d003      	beq.n	800431c <I2C_IsErrorOccurred+0xe0>
 8004314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0aa      	beq.n	8004272 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800431c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004320:	2b00      	cmp	r3, #0
 8004322:	d103      	bne.n	800432c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2220      	movs	r2, #32
 800432a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800435c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f043 0308 	orr.w	r3, r3, #8
 8004374:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800437e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f043 0302 	orr.w	r3, r3, #2
 8004396:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01c      	beq.n	80043ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fe45 	bl	8004040 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <I2C_IsErrorOccurred+0x1bc>)
 80043c2:	400b      	ands	r3, r1
 80043c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	fe00e800 	.word	0xfe00e800

080043fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	4613      	mov	r3, r2
 800440c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004414:	7a7b      	ldrb	r3, [r7, #9]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800441c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	4313      	orrs	r3, r2
 8004426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800442a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	0d5b      	lsrs	r3, r3, #21
 8004436:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <I2C_TransferConfig+0x60>)
 800443c:	430b      	orrs	r3, r1
 800443e:	43db      	mvns	r3, r3
 8004440:	ea02 0103 	and.w	r1, r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	03ff63ff 	.word	0x03ff63ff

08004460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b20      	cmp	r3, #32
 8004474:	d138      	bne.n	80044e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004480:	2302      	movs	r3, #2
 8004482:	e032      	b.n	80044ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b20      	cmp	r3, #32
 800450a:	d139      	bne.n	8004580 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004516:	2302      	movs	r3, #2
 8004518:	e033      	b.n	8004582 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2224      	movs	r2, #36	; 0x24
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004548:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40007000 	.word	0x40007000

080045ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ba:	d130      	bne.n	800461e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c8:	d038      	beq.n	800463c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045d2:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2232      	movs	r2, #50	; 0x32
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	0c9b      	lsrs	r3, r3, #18
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f0:	e002      	b.n	80045f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004604:	d102      	bne.n	800460c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f2      	bne.n	80045f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d110      	bne.n	800463c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e00f      	b.n	800463e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d007      	beq.n	800463c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800462c:	4b07      	ldr	r3, [pc, #28]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004634:	4a05      	ldr	r2, [pc, #20]	; (800464c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800463a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40007000 	.word	0x40007000
 8004650:	20000000 	.word	0x20000000
 8004654:	431bde83 	.word	0x431bde83

08004658 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e3ca      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466a:	4b97      	ldr	r3, [pc, #604]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004674:	4b94      	ldr	r3, [pc, #592]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80e4 	beq.w	8004854 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_RCC_OscConfig+0x4a>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	f040 808b 	bne.w	80047b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b01      	cmp	r3, #1
 800469e:	f040 8087 	bne.w	80047b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046a2:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_RCC_OscConfig+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e3a2      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	4b82      	ldr	r3, [pc, #520]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <HAL_RCC_OscConfig+0x7c>
 80046ca:	4b7f      	ldr	r3, [pc, #508]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d2:	e005      	b.n	80046e0 <HAL_RCC_OscConfig+0x88>
 80046d4:	4b7c      	ldr	r3, [pc, #496]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80046d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d223      	bcs.n	800472c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fd55 	bl	8005198 <RCC_SetFlashLatencyFromMSIRange>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e383      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046f8:	4b73      	ldr	r3, [pc, #460]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a72      	ldr	r2, [pc, #456]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80046fe:	f043 0308 	orr.w	r3, r3, #8
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b70      	ldr	r3, [pc, #448]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	496d      	ldr	r1, [pc, #436]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004716:	4b6c      	ldr	r3, [pc, #432]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	4968      	ldr	r1, [pc, #416]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
 800472a:	e025      	b.n	8004778 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800472c:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004732:	f043 0308 	orr.w	r3, r3, #8
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4960      	ldr	r1, [pc, #384]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800474a:	4b5f      	ldr	r3, [pc, #380]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	495b      	ldr	r1, [pc, #364]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fd15 	bl	8005198 <RCC_SetFlashLatencyFromMSIRange>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e343      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004778:	f000 fc4a 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b52      	ldr	r3, [pc, #328]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	4950      	ldr	r1, [pc, #320]	; (80048cc <HAL_RCC_OscConfig+0x274>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	4a4e      	ldr	r2, [pc, #312]	; (80048d0 <HAL_RCC_OscConfig+0x278>)
 8004796:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004798:	4b4e      	ldr	r3, [pc, #312]	; (80048d4 <HAL_RCC_OscConfig+0x27c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd fbf1 	bl	8001f84 <HAL_InitTick>
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d052      	beq.n	8004852 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	e327      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d032      	beq.n	800481e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047b8:	4b43      	ldr	r3, [pc, #268]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a42      	ldr	r2, [pc, #264]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047c4:	f7fd fc2e 	bl	8002024 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047cc:	f7fd fc2a 	bl	8002024 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e310      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047de:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ea:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a36      	ldr	r2, [pc, #216]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80047f0:	f043 0308 	orr.w	r3, r3, #8
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	4931      	ldr	r1, [pc, #196]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004808:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	492c      	ldr	r1, [pc, #176]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	e01a      	b.n	8004854 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800481e:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800482a:	f7fd fbfb 	bl	8002024 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004832:	f7fd fbf7 	bl	8002024 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e2dd      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004844:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x1da>
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004852:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d074      	beq.n	800494a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x21a>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d10e      	bne.n	800488a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d10b      	bne.n	800488a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d064      	beq.n	8004948 <HAL_RCC_OscConfig+0x2f0>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d160      	bne.n	8004948 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e2ba      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x24a>
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 800489a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e026      	b.n	80048f0 <HAL_RCC_OscConfig+0x298>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048aa:	d115      	bne.n	80048d8 <HAL_RCC_OscConfig+0x280>
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80048b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a02      	ldr	r2, [pc, #8]	; (80048c8 <HAL_RCC_OscConfig+0x270>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e014      	b.n	80048f0 <HAL_RCC_OscConfig+0x298>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	0800c86c 	.word	0x0800c86c
 80048d0:	20000000 	.word	0x20000000
 80048d4:	20000004 	.word	0x20000004
 80048d8:	4ba0      	ldr	r3, [pc, #640]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a9f      	ldr	r2, [pc, #636]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80048de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b9d      	ldr	r3, [pc, #628]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a9c      	ldr	r2, [pc, #624]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fd fb94 	bl	8002024 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004900:	f7fd fb90 	bl	8002024 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	; 0x64
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e276      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004912:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x2a8>
 800491e:	e014      	b.n	800494a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fd fb80 	bl	8002024 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004928:	f7fd fb7c 	bl	8002024 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	; 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e262      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800493a:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x2d0>
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d060      	beq.n	8004a18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d005      	beq.n	8004968 <HAL_RCC_OscConfig+0x310>
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	d119      	bne.n	8004996 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d116      	bne.n	8004996 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004968:	4b7c      	ldr	r3, [pc, #496]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_OscConfig+0x328>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e23f      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004980:	4b76      	ldr	r3, [pc, #472]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	4973      	ldr	r1, [pc, #460]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004994:	e040      	b.n	8004a18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d023      	beq.n	80049e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499e:	4b6f      	ldr	r3, [pc, #444]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6e      	ldr	r2, [pc, #440]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fb3b 	bl	8002024 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b2:	f7fd fb37 	bl	8002024 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e21d      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c4:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d0:	4b62      	ldr	r3, [pc, #392]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	495f      	ldr	r1, [pc, #380]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
 80049e4:	e018      	b.n	8004a18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a5c      	ldr	r2, [pc, #368]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 80049ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fd fb17 	bl	8002024 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fa:	f7fd fb13 	bl	8002024 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e1f9      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03c      	beq.n	8004a9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01c      	beq.n	8004a66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2c:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a32:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd faf2 	bl	8002024 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a44:	f7fd faee 	bl	8002024 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1d4      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ef      	beq.n	8004a44 <HAL_RCC_OscConfig+0x3ec>
 8004a64:	e01b      	b.n	8004a9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a66:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6c:	4a3b      	ldr	r2, [pc, #236]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fd fad5 	bl	8002024 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fd fad1 	bl	8002024 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e1b7      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a90:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ef      	bne.n	8004a7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80a6 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aac:	2300      	movs	r3, #0
 8004aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ab0:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10d      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004abc:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad8:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <HAL_RCC_OscConfig+0x508>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d118      	bne.n	8004b16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae4:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_RCC_OscConfig+0x508>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_RCC_OscConfig+0x508>)
 8004aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af0:	f7fd fa98 	bl	8002024 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af8:	f7fd fa94 	bl	8002024 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e17a      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <HAL_RCC_OscConfig+0x508>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d108      	bne.n	8004b30 <HAL_RCC_OscConfig+0x4d8>
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b2e:	e029      	b.n	8004b84 <HAL_RCC_OscConfig+0x52c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d115      	bne.n	8004b64 <HAL_RCC_OscConfig+0x50c>
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004b40:	f043 0304 	orr.w	r3, r3, #4
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	4a03      	ldr	r2, [pc, #12]	; (8004b5c <HAL_RCC_OscConfig+0x504>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b58:	e014      	b.n	8004b84 <HAL_RCC_OscConfig+0x52c>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40007000 	.word	0x40007000
 8004b64:	4b9c      	ldr	r3, [pc, #624]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	4a9b      	ldr	r2, [pc, #620]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b74:	4b98      	ldr	r3, [pc, #608]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a97      	ldr	r2, [pc, #604]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d016      	beq.n	8004bba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fd fa4a 	bl	8002024 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b94:	f7fd fa46 	bl	8002024 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e12a      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004baa:	4b8b      	ldr	r3, [pc, #556]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ed      	beq.n	8004b94 <HAL_RCC_OscConfig+0x53c>
 8004bb8:	e015      	b.n	8004be6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bba:	f7fd fa33 	bl	8002024 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fd fa2f 	bl	8002024 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e113      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd8:	4b7f      	ldr	r3, [pc, #508]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ed      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bec:	4b7a      	ldr	r3, [pc, #488]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	4a79      	ldr	r2, [pc, #484]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80fe 	beq.w	8004dfe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	f040 80d0 	bne.w	8004dac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c0c:	4b72      	ldr	r3, [pc, #456]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0203 	and.w	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d130      	bne.n	8004c82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d127      	bne.n	8004c82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c4c:	2a07      	cmp	r2, #7
 8004c4e:	bf14      	ite	ne
 8004c50:	2201      	movne	r2, #1
 8004c52:	2200      	moveq	r2, #0
 8004c54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d113      	bne.n	8004c82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	3b01      	subs	r3, #1
 8004c68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d06e      	beq.n	8004d60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d069      	beq.n	8004d5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c88:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c94:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0ad      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ca4:	4b4c      	ldr	r3, [pc, #304]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a4b      	ldr	r2, [pc, #300]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb0:	f7fd f9b8 	bl	8002024 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fd f9b4 	bl	8002024 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e09a      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cca:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd6:	4b40      	ldr	r3, [pc, #256]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <HAL_RCC_OscConfig+0x784>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	0112      	lsls	r2, r2, #4
 8004cea:	4311      	orrs	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cf0:	0212      	lsls	r2, r2, #8
 8004cf2:	4311      	orrs	r1, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cf8:	0852      	lsrs	r2, r2, #1
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	0552      	lsls	r2, r2, #21
 8004cfe:	4311      	orrs	r1, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d04:	0852      	lsrs	r2, r2, #1
 8004d06:	3a01      	subs	r2, #1
 8004d08:	0652      	lsls	r2, r2, #25
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d10:	0912      	lsrs	r2, r2, #4
 8004d12:	0452      	lsls	r2, r2, #17
 8004d14:	430a      	orrs	r2, r1
 8004d16:	4930      	ldr	r1, [pc, #192]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d1c:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d34:	f7fd f976 	bl	8002024 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fd f972 	bl	8002024 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e058      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4e:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d5a:	e050      	b.n	8004dfe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e04f      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d60:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d148      	bne.n	8004dfe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d78:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d84:	f7fd f94e 	bl	8002024 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fd f94a 	bl	8002024 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e030      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x734>
 8004daa:	e028      	b.n	8004dfe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b0c      	cmp	r3, #12
 8004db0:	d023      	beq.n	8004dfa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <HAL_RCC_OscConfig+0x780>)
 8004db8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fd f931 	bl	8002024 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc4:	e00c      	b.n	8004de0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd f92d 	bl	8002024 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d905      	bls.n	8004de0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e013      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <HAL_RCC_OscConfig+0x7b0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ec      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_OscConfig+0x7b0>)
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4905      	ldr	r1, [pc, #20]	; (8004e08 <HAL_RCC_OscConfig+0x7b0>)
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_OscConfig+0x7b4>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	60cb      	str	r3, [r1, #12]
 8004df8:	e001      	b.n	8004dfe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	feeefffc 	.word	0xfeeefffc

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0e7      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b75      	ldr	r3, [pc, #468]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d910      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b72      	ldr	r3, [pc, #456]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 0207 	bic.w	r2, r3, #7
 8004e3a:	4970      	ldr	r1, [pc, #448]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b6e      	ldr	r3, [pc, #440]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0cf      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4b66      	ldr	r3, [pc, #408]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d908      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e70:	4b63      	ldr	r3, [pc, #396]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4960      	ldr	r1, [pc, #384]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d04c      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d121      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0a6      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eae:	4b54      	ldr	r3, [pc, #336]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e09a      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ec6:	4b4e      	ldr	r3, [pc, #312]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e08e      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed6:	4b4a      	ldr	r3, [pc, #296]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e086      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b46      	ldr	r3, [pc, #280]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4943      	ldr	r1, [pc, #268]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fd f894 	bl	8002024 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fd f890 	bl	8002024 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e06e      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b3a      	ldr	r3, [pc, #232]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d208      	bcs.n	8004f56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	492b      	ldr	r1, [pc, #172]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d210      	bcs.n	8004f86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 0207 	bic.w	r2, r3, #7
 8004f6c:	4923      	ldr	r1, [pc, #140]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f74:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_RCC_ClockConfig+0x1ec>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d001      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e036      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	4918      	ldr	r1, [pc, #96]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4910      	ldr	r1, [pc, #64]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fc4:	f000 f824 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_RCC_ClockConfig+0x1f0>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	490b      	ldr	r1, [pc, #44]	; (8005004 <HAL_RCC_ClockConfig+0x1f4>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	4a09      	ldr	r2, [pc, #36]	; (8005008 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fe4:	4b09      	ldr	r3, [pc, #36]	; (800500c <HAL_RCC_ClockConfig+0x1fc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fc ffcb 	bl	8001f84 <HAL_InitTick>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40022000 	.word	0x40022000
 8005000:	40021000 	.word	0x40021000
 8005004:	0800c86c 	.word	0x0800c86c
 8005008:	20000000 	.word	0x20000000
 800500c:	20000004 	.word	0x20000004

08005010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501e:	4b3e      	ldr	r3, [pc, #248]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005028:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x34>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d121      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d11e      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005044:	4b34      	ldr	r3, [pc, #208]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005050:	4b31      	ldr	r3, [pc, #196]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	e005      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800506c:	4a2b      	ldr	r2, [pc, #172]	; (800511c <HAL_RCC_GetSysClockFreq+0x10c>)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10d      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d102      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005088:	4b25      	ldr	r3, [pc, #148]	; (8005120 <HAL_RCC_GetSysClockFreq+0x110>)
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e004      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d101      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005094:	4b23      	ldr	r3, [pc, #140]	; (8005124 <HAL_RCC_GetSysClockFreq+0x114>)
 8005096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d134      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d003      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d003      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0xac>
 80050b4:	e005      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_RCC_GetSysClockFreq+0x110>)
 80050b8:	617b      	str	r3, [r7, #20]
      break;
 80050ba:	e005      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_RCC_GetSysClockFreq+0x114>)
 80050be:	617b      	str	r3, [r7, #20]
      break;
 80050c0:	e002      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	617b      	str	r3, [r7, #20]
      break;
 80050c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	3301      	adds	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	fb03 f202 	mul.w	r2, r3, r2
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	0e5b      	lsrs	r3, r3, #25
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	3301      	adds	r3, #1
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005108:	69bb      	ldr	r3, [r7, #24]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3724      	adds	r7, #36	; 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	0800c884 	.word	0x0800c884
 8005120:	00f42400 	.word	0x00f42400
 8005124:	007a1200 	.word	0x007a1200

08005128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_GetHCLKFreq+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000000 	.word	0x20000000

08005140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005144:	f7ff fff0 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	0800c87c 	.word	0x0800c87c

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005170:	f7ff ffda 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0adb      	lsrs	r3, r3, #11
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4904      	ldr	r1, [pc, #16]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000
 8005194:	0800c87c 	.word	0x0800c87c

08005198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051b0:	f7ff f9ee 	bl	8004590 <HAL_PWREx_GetVoltageRange>
 80051b4:	6178      	str	r0, [r7, #20]
 80051b6:	e014      	b.n	80051e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4a24      	ldr	r2, [pc, #144]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	; 0x58
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051d0:	f7ff f9de 	bl	8004590 <HAL_PWREx_GetVoltageRange>
 80051d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e8:	d10b      	bne.n	8005202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b80      	cmp	r3, #128	; 0x80
 80051ee:	d919      	bls.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2ba0      	cmp	r3, #160	; 0xa0
 80051f4:	d902      	bls.n	80051fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051f6:	2302      	movs	r3, #2
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e013      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051fc:	2301      	movs	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e010      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b80      	cmp	r3, #128	; 0x80
 8005206:	d902      	bls.n	800520e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005208:	2303      	movs	r3, #3
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	e00a      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b80      	cmp	r3, #128	; 0x80
 8005212:	d102      	bne.n	800521a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005214:	2302      	movs	r3, #2
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	e004      	b.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b70      	cmp	r3, #112	; 0x70
 800521e:	d101      	bne.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005220:	2301      	movs	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 0207 	bic.w	r2, r3, #7
 800522c:	4909      	ldr	r1, [pc, #36]	; (8005254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	40022000 	.word	0x40022000

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005260:	2300      	movs	r3, #0
 8005262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005264:	2300      	movs	r3, #0
 8005266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005270:	2b00      	cmp	r3, #0
 8005272:	d041      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005278:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800527c:	d02a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800527e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005282:	d824      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005288:	d008      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800528a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528e:	d81e      	bhi.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005298:	d010      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800529a:	e018      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800529c:	4b86      	ldr	r3, [pc, #536]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4a85      	ldr	r2, [pc, #532]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052a8:	e015      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3304      	adds	r3, #4
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fabb 	bl	800582c <RCCEx_PLLSAI1_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052ba:	e00c      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3320      	adds	r3, #32
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fba6 	bl	8005a14 <RCCEx_PLLSAI2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052cc:	e003      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	74fb      	strb	r3, [r7, #19]
      break;
 80052d2:	e000      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052dc:	4b76      	ldr	r3, [pc, #472]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ea:	4973      	ldr	r1, [pc, #460]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052f2:	e001      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d041      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005308:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800530c:	d02a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800530e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005312:	d824      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005318:	d008      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800531a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800531e:	d81e      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005328:	d010      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800532a:	e018      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800532c:	4b62      	ldr	r3, [pc, #392]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a61      	ldr	r2, [pc, #388]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005338:	e015      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fa73 	bl	800582c <RCCEx_PLLSAI1_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800534a:	e00c      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3320      	adds	r3, #32
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fb5e 	bl	8005a14 <RCCEx_PLLSAI2_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	74fb      	strb	r3, [r7, #19]
      break;
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800536c:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800537a:	494f      	ldr	r1, [pc, #316]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005382:	e001      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a0 	beq.w	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005396:	2300      	movs	r3, #0
 8005398:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800539a:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b0:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6593      	str	r3, [r2, #88]	; 0x58
 80053bc:	4b3e      	ldr	r3, [pc, #248]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c8:	2301      	movs	r3, #1
 80053ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053cc:	4b3b      	ldr	r3, [pc, #236]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3a      	ldr	r2, [pc, #232]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d8:	f7fc fe24 	bl	8002024 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053de:	e009      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fc fe20 	bl	8002024 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	74fb      	strb	r3, [r7, #19]
        break;
 80053f2:	e005      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053f4:	4b31      	ldr	r3, [pc, #196]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ef      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d15c      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005410:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01f      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	d019      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005430:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fc fddf 	bl	8002024 <HAL_GetTick>
 8005466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005468:	e00b      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546a:	f7fc fddb 	bl	8002024 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	4293      	cmp	r3, r2
 800547a:	d902      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	74fb      	strb	r3, [r7, #19]
            break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005482:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ec      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a6:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054ae:	e009      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	74bb      	strb	r3, [r7, #18]
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	7cfb      	ldrb	r3, [r7, #19]
 80054c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c4:	7c7b      	ldrb	r3, [r7, #17]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4b9e      	ldr	r3, [pc, #632]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	4a9d      	ldr	r2, [pc, #628]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054e2:	4b98      	ldr	r3, [pc, #608]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	f023 0203 	bic.w	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	4994      	ldr	r1, [pc, #592]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005504:	4b8f      	ldr	r3, [pc, #572]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f023 020c 	bic.w	r2, r3, #12
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	498c      	ldr	r1, [pc, #560]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005526:	4b87      	ldr	r3, [pc, #540]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	4983      	ldr	r1, [pc, #524]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005548:	4b7e      	ldr	r3, [pc, #504]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	497b      	ldr	r1, [pc, #492]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800556a:	4b76      	ldr	r3, [pc, #472]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	4972      	ldr	r1, [pc, #456]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800558c:	4b6d      	ldr	r3, [pc, #436]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	496a      	ldr	r1, [pc, #424]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ae:	4b65      	ldr	r3, [pc, #404]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	4961      	ldr	r1, [pc, #388]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055d0:	4b5c      	ldr	r3, [pc, #368]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	4959      	ldr	r1, [pc, #356]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f2:	4b54      	ldr	r3, [pc, #336]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	4950      	ldr	r1, [pc, #320]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005614:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	4948      	ldr	r1, [pc, #288]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005636:	4b43      	ldr	r3, [pc, #268]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	493f      	ldr	r1, [pc, #252]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d028      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005658:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005666:	4937      	ldr	r1, [pc, #220]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005676:	d106      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b32      	ldr	r3, [pc, #200]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a31      	ldr	r2, [pc, #196]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
 8005684:	e011      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800568e:	d10c      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f8c8 	bl	800582c <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d028      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	491f      	ldr	r1, [pc, #124]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d4:	d106      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d6:	4b1b      	ldr	r3, [pc, #108]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e0:	60d3      	str	r3, [r2, #12]
 80056e2:	e011      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3304      	adds	r3, #4
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f899 	bl	800582c <RCCEx_PLLSAI1_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005704:	7cfb      	ldrb	r3, [r7, #19]
 8005706:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02b      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005722:	4908      	ldr	r1, [pc, #32]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005732:	d109      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a02      	ldr	r2, [pc, #8]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
 8005740:	e014      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005750:	d10c      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f867 	bl	800582c <RCCEx_PLLSAI1_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d02f      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005786:	4928      	ldr	r1, [pc, #160]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005796:	d10d      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	2102      	movs	r1, #2
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f844 	bl	800582c <RCCEx_PLLSAI1_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d014      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	74bb      	strb	r3, [r7, #18]
 80057b2:	e011      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3320      	adds	r3, #32
 80057c2:	2102      	movs	r1, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 f925 	bl	8005a14 <RCCEx_PLLSAI2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ce:	7cfb      	ldrb	r3, [r7, #19]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057e4:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f2:	490d      	ldr	r1, [pc, #52]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005816:	4904      	ldr	r1, [pc, #16]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800581e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000

0800582c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800583a:	4b75      	ldr	r3, [pc, #468]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005846:	4b72      	ldr	r3, [pc, #456]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0203 	and.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d10d      	bne.n	8005872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
       ||
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800585e:	4b6c      	ldr	r3, [pc, #432]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
       ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d047      	beq.n	8005902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
 8005876:	e044      	b.n	8005902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d018      	beq.n	80058b2 <RCCEx_PLLSAI1_Config+0x86>
 8005880:	2b03      	cmp	r3, #3
 8005882:	d825      	bhi.n	80058d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005884:	2b01      	cmp	r3, #1
 8005886:	d002      	beq.n	800588e <RCCEx_PLLSAI1_Config+0x62>
 8005888:	2b02      	cmp	r3, #2
 800588a:	d009      	beq.n	80058a0 <RCCEx_PLLSAI1_Config+0x74>
 800588c:	e020      	b.n	80058d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800588e:	4b60      	ldr	r3, [pc, #384]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11d      	bne.n	80058d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800589e:	e01a      	b.n	80058d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058a0:	4b5b      	ldr	r3, [pc, #364]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d116      	bne.n	80058da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b0:	e013      	b.n	80058da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058b2:	4b57      	ldr	r3, [pc, #348]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10f      	bne.n	80058de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058be:	4b54      	ldr	r3, [pc, #336]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ce:	e006      	b.n	80058de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      break;
 80058d4:	e004      	b.n	80058e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058d6:	bf00      	nop
 80058d8:	e002      	b.n	80058e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058de:	bf00      	nop
    }

    if(status == HAL_OK)
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058e6:	4b4a      	ldr	r3, [pc, #296]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6819      	ldr	r1, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	430b      	orrs	r3, r1
 80058fc:	4944      	ldr	r1, [pc, #272]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d17d      	bne.n	8005a04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005908:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fc fb86 	bl	8002024 <HAL_GetTick>
 8005918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800591a:	e009      	b.n	8005930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800591c:	f7fc fb82 	bl	8002024 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d902      	bls.n	8005930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	73fb      	strb	r3, [r7, #15]
        break;
 800592e:	e005      	b.n	800593c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005930:	4b37      	ldr	r3, [pc, #220]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ef      	bne.n	800591c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d160      	bne.n	8005a04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d111      	bne.n	800596c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005948:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6892      	ldr	r2, [r2, #8]
 8005958:	0211      	lsls	r1, r2, #8
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68d2      	ldr	r2, [r2, #12]
 800595e:	0912      	lsrs	r2, r2, #4
 8005960:	0452      	lsls	r2, r2, #17
 8005962:	430a      	orrs	r2, r1
 8005964:	492a      	ldr	r1, [pc, #168]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005966:	4313      	orrs	r3, r2
 8005968:	610b      	str	r3, [r1, #16]
 800596a:	e027      	b.n	80059bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d112      	bne.n	8005998 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005972:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800597a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	0211      	lsls	r1, r2, #8
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6912      	ldr	r2, [r2, #16]
 8005988:	0852      	lsrs	r2, r2, #1
 800598a:	3a01      	subs	r2, #1
 800598c:	0552      	lsls	r2, r2, #21
 800598e:	430a      	orrs	r2, r1
 8005990:	491f      	ldr	r1, [pc, #124]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	610b      	str	r3, [r1, #16]
 8005996:	e011      	b.n	80059bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005998:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6892      	ldr	r2, [r2, #8]
 80059a8:	0211      	lsls	r1, r2, #8
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6952      	ldr	r2, [r2, #20]
 80059ae:	0852      	lsrs	r2, r2, #1
 80059b0:	3a01      	subs	r2, #1
 80059b2:	0652      	lsls	r2, r2, #25
 80059b4:	430a      	orrs	r2, r1
 80059b6:	4916      	ldr	r1, [pc, #88]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059bc:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fc fb2c 	bl	8002024 <HAL_GetTick>
 80059cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ce:	e009      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059d0:	f7fc fb28 	bl	8002024 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d902      	bls.n	80059e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	73fb      	strb	r3, [r7, #15]
          break;
 80059e2:	e005      	b.n	80059f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ef      	beq.n	80059d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	4904      	ldr	r1, [pc, #16]	; (8005a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40021000 	.word	0x40021000

08005a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a22:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d018      	beq.n	8005a60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a2e:	4b67      	ldr	r3, [pc, #412]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0203 	and.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d10d      	bne.n	8005a5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
       ||
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a46:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
       ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d047      	beq.n	8005aea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	73fb      	strb	r3, [r7, #15]
 8005a5e:	e044      	b.n	8005aea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d018      	beq.n	8005a9a <RCCEx_PLLSAI2_Config+0x86>
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d825      	bhi.n	8005ab8 <RCCEx_PLLSAI2_Config+0xa4>
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d002      	beq.n	8005a76 <RCCEx_PLLSAI2_Config+0x62>
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d009      	beq.n	8005a88 <RCCEx_PLLSAI2_Config+0x74>
 8005a74:	e020      	b.n	8005ab8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a76:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11d      	bne.n	8005abe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a86:	e01a      	b.n	8005abe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a88:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d116      	bne.n	8005ac2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a98:	e013      	b.n	8005ac2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a9a:	4b4c      	ldr	r3, [pc, #304]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10f      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aa6:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ab6:	e006      	b.n	8005ac6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      break;
 8005abc:	e004      	b.n	8005ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10d      	bne.n	8005aea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ace:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	4939      	ldr	r1, [pc, #228]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d167      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005af0:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a35      	ldr	r2, [pc, #212]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fc fa92 	bl	8002024 <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b02:	e009      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b04:	f7fc fa8e 	bl	8002024 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d902      	bls.n	8005b18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	73fb      	strb	r3, [r7, #15]
        break;
 8005b16:	e005      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b18:	4b2c      	ldr	r3, [pc, #176]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ef      	bne.n	8005b04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d14a      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d111      	bne.n	8005b54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b30:	4b26      	ldr	r3, [pc, #152]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6892      	ldr	r2, [r2, #8]
 8005b40:	0211      	lsls	r1, r2, #8
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68d2      	ldr	r2, [r2, #12]
 8005b46:	0912      	lsrs	r2, r2, #4
 8005b48:	0452      	lsls	r2, r2, #17
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	491f      	ldr	r1, [pc, #124]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	614b      	str	r3, [r1, #20]
 8005b52:	e011      	b.n	8005b78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6892      	ldr	r2, [r2, #8]
 8005b64:	0211      	lsls	r1, r2, #8
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6912      	ldr	r2, [r2, #16]
 8005b6a:	0852      	lsrs	r2, r2, #1
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	0652      	lsls	r2, r2, #25
 8005b70:	430a      	orrs	r2, r1
 8005b72:	4916      	ldr	r1, [pc, #88]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b78:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b84:	f7fc fa4e 	bl	8002024 <HAL_GetTick>
 8005b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b8a:	e009      	b.n	8005ba0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b8c:	f7fc fa4a 	bl	8002024 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d902      	bls.n	8005ba0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b9e:	e005      	b.n	8005bac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ef      	beq.n	8005b8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	4904      	ldr	r1, [pc, #16]	; (8005bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000

08005bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e049      	b.n	8005c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fb ff5a 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f000 fbe4 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d001      	beq.n	8005c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e047      	b.n	8005d28 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a23      	ldr	r2, [pc, #140]	; (8005d34 <HAL_TIM_Base_Start+0xb4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_TIM_Base_Start+0x66>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d018      	beq.n	8005ce6 <HAL_TIM_Base_Start+0x66>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_TIM_Base_Start+0xb8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_TIM_Base_Start+0x66>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_TIM_Base_Start+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_TIM_Base_Start+0x66>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_TIM_Base_Start+0xc0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_TIM_Base_Start+0x66>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <HAL_TIM_Base_Start+0xc4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_TIM_Base_Start+0x66>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <HAL_TIM_Base_Start+0xc8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d115      	bne.n	8005d12 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <HAL_TIM_Base_Start+0xcc>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b06      	cmp	r3, #6
 8005cf6:	d015      	beq.n	8005d24 <HAL_TIM_Base_Start+0xa4>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfe:	d011      	beq.n	8005d24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	e008      	b.n	8005d24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e000      	b.n	8005d26 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40013400 	.word	0x40013400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e049      	b.n	8005df6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f841 	bl	8005dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f000 fb24 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x24>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e03c      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x3e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e02f      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x58>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e022      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d109      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x72>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e015      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x8c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e09c      	b.n	8005ff4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	e01b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xe6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xf6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fe68 	bl	8006bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a35      	ldr	r2, [pc, #212]	; (8005ffc <HAL_TIM_PWM_Start+0x1e8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a34      	ldr	r2, [pc, #208]	; (8006000 <HAL_TIM_PWM_Start+0x1ec>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a32      	ldr	r2, [pc, #200]	; (8006004 <HAL_TIM_PWM_Start+0x1f0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a31      	ldr	r2, [pc, #196]	; (8006008 <HAL_TIM_PWM_Start+0x1f4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_TIM_PWM_Start+0x13e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a2f      	ldr	r2, [pc, #188]	; (800600c <HAL_TIM_PWM_Start+0x1f8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_PWM_Start+0x142>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <HAL_TIM_PWM_Start+0x144>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <HAL_TIM_PWM_Start+0x1e8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01d      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x19e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d018      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x19e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a22      	ldr	r2, [pc, #136]	; (8006010 <HAL_TIM_PWM_Start+0x1fc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x19e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <HAL_TIM_PWM_Start+0x200>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x19e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1f      	ldr	r2, [pc, #124]	; (8006018 <HAL_TIM_PWM_Start+0x204>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x19e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_TIM_PWM_Start+0x1ec>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x19e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIM_PWM_Start+0x1f0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d115      	bne.n	8005fde <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	4b18      	ldr	r3, [pc, #96]	; (800601c <HAL_TIM_PWM_Start+0x208>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b06      	cmp	r3, #6
 8005fc2:	d015      	beq.n	8005ff0 <HAL_TIM_PWM_Start+0x1dc>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fca:	d011      	beq.n	8005ff0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fdc:	e008      	b.n	8005ff0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e000      	b.n	8005ff2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40013400 	.word	0x40013400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	00010007 	.word	0x00010007

08006020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800603a:	2302      	movs	r3, #2
 800603c:	e0ff      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b14      	cmp	r3, #20
 800604a:	f200 80f0 	bhi.w	800622e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	080060a9 	.word	0x080060a9
 8006058:	0800622f 	.word	0x0800622f
 800605c:	0800622f 	.word	0x0800622f
 8006060:	0800622f 	.word	0x0800622f
 8006064:	080060e9 	.word	0x080060e9
 8006068:	0800622f 	.word	0x0800622f
 800606c:	0800622f 	.word	0x0800622f
 8006070:	0800622f 	.word	0x0800622f
 8006074:	0800612b 	.word	0x0800612b
 8006078:	0800622f 	.word	0x0800622f
 800607c:	0800622f 	.word	0x0800622f
 8006080:	0800622f 	.word	0x0800622f
 8006084:	0800616b 	.word	0x0800616b
 8006088:	0800622f 	.word	0x0800622f
 800608c:	0800622f 	.word	0x0800622f
 8006090:	0800622f 	.word	0x0800622f
 8006094:	080061ad 	.word	0x080061ad
 8006098:	0800622f 	.word	0x0800622f
 800609c:	0800622f 	.word	0x0800622f
 80060a0:	0800622f 	.word	0x0800622f
 80060a4:	080061ed 	.word	0x080061ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fa2e 	bl	8006510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6999      	ldr	r1, [r3, #24]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	619a      	str	r2, [r3, #24]
      break;
 80060e6:	e0a5      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fa9e 	bl	8006630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6999      	ldr	r1, [r3, #24]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	619a      	str	r2, [r3, #24]
      break;
 8006128:	e084      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fb07 	bl	8006744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0208 	orr.w	r2, r2, #8
 8006144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0204 	bic.w	r2, r2, #4
 8006154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69d9      	ldr	r1, [r3, #28]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	61da      	str	r2, [r3, #28]
      break;
 8006168:	e064      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fb6f 	bl	8006854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69d9      	ldr	r1, [r3, #28]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	021a      	lsls	r2, r3, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	61da      	str	r2, [r3, #28]
      break;
 80061aa:	e043      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fbb8 	bl	8006928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0208 	orr.w	r2, r2, #8
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0204 	bic.w	r2, r2, #4
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ea:	e023      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fbfc 	bl	80069f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800622c:	e002      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
      break;
 8006232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop

08006248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIM_ConfigClockSource+0x1c>
 8006260:	2302      	movs	r3, #2
 8006262:	e0b6      	b.n	80063d2 <HAL_TIM_ConfigClockSource+0x18a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800628e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a0:	d03e      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0xd8>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	f200 8087 	bhi.w	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	f000 8086 	beq.w	80063be <HAL_TIM_ConfigClockSource+0x176>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	d87f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062b8:	2b70      	cmp	r3, #112	; 0x70
 80062ba:	d01a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0xaa>
 80062bc:	2b70      	cmp	r3, #112	; 0x70
 80062be:	d87b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062c0:	2b60      	cmp	r3, #96	; 0x60
 80062c2:	d050      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x11e>
 80062c4:	2b60      	cmp	r3, #96	; 0x60
 80062c6:	d877      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062c8:	2b50      	cmp	r3, #80	; 0x50
 80062ca:	d03c      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0xfe>
 80062cc:	2b50      	cmp	r3, #80	; 0x50
 80062ce:	d873      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d058      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x13e>
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d86f      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062d8:	2b30      	cmp	r3, #48	; 0x30
 80062da:	d064      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15e>
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d86b      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d060      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15e>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d867      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d05c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15e>
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d05a      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x15e>
 80062f0:	e062      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006302:	f000 fc55 	bl	8006bb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	609a      	str	r2, [r3, #8]
      break;
 800631e:	e04f      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006330:	f000 fc3e 	bl	8006bb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006342:	609a      	str	r2, [r3, #8]
      break;
 8006344:	e03c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	461a      	mov	r2, r3
 8006354:	f000 fbb2 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2150      	movs	r1, #80	; 0x50
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fc0b 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006364:	e02c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006372:	461a      	mov	r2, r3
 8006374:	f000 fbd1 	bl	8006b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2160      	movs	r1, #96	; 0x60
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fbfb 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006384:	e01c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006392:	461a      	mov	r2, r3
 8006394:	f000 fb92 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2140      	movs	r1, #64	; 0x40
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fbeb 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 80063a4:	e00c      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f000 fbe2 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 80063b6:	e003      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a40      	ldr	r2, [pc, #256]	; (80064f0 <TIM_Base_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fa:	d00f      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3d      	ldr	r2, [pc, #244]	; (80064f4 <TIM_Base_SetConfig+0x118>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3c      	ldr	r2, [pc, #240]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a3b      	ldr	r2, [pc, #236]	; (80064fc <TIM_Base_SetConfig+0x120>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a3a      	ldr	r2, [pc, #232]	; (8006500 <TIM_Base_SetConfig+0x124>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d108      	bne.n	800642e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <TIM_Base_SetConfig+0x114>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01f      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d01b      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2c      	ldr	r2, [pc, #176]	; (80064f4 <TIM_Base_SetConfig+0x118>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d017      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2b      	ldr	r2, [pc, #172]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2a      	ldr	r2, [pc, #168]	; (80064fc <TIM_Base_SetConfig+0x120>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00f      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a29      	ldr	r2, [pc, #164]	; (8006500 <TIM_Base_SetConfig+0x124>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00b      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a28      	ldr	r2, [pc, #160]	; (8006504 <TIM_Base_SetConfig+0x128>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a27      	ldr	r2, [pc, #156]	; (8006508 <TIM_Base_SetConfig+0x12c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a26      	ldr	r2, [pc, #152]	; (800650c <TIM_Base_SetConfig+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d108      	bne.n	8006488 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a10      	ldr	r2, [pc, #64]	; (80064f0 <TIM_Base_SetConfig+0x114>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00f      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <TIM_Base_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a11      	ldr	r2, [pc, #68]	; (8006504 <TIM_Base_SetConfig+0x128>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a10      	ldr	r2, [pc, #64]	; (8006508 <TIM_Base_SetConfig+0x12c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a0f      	ldr	r2, [pc, #60]	; (800650c <TIM_Base_SetConfig+0x130>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	615a      	str	r2, [r3, #20]
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800

08006510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f023 0201 	bic.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 0302 	bic.w	r3, r3, #2
 800655c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a2c      	ldr	r2, [pc, #176]	; (800661c <TIM_OC1_SetConfig+0x10c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2b      	ldr	r2, [pc, #172]	; (8006620 <TIM_OC1_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2a      	ldr	r2, [pc, #168]	; (8006624 <TIM_OC1_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a29      	ldr	r2, [pc, #164]	; (8006628 <TIM_OC1_SetConfig+0x118>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a28      	ldr	r2, [pc, #160]	; (800662c <TIM_OC1_SetConfig+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0308 	bic.w	r3, r3, #8
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0304 	bic.w	r3, r3, #4
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	; (800661c <TIM_OC1_SetConfig+0x10c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00f      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <TIM_OC1_SetConfig+0x110>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a19      	ldr	r2, [pc, #100]	; (8006624 <TIM_OC1_SetConfig+0x114>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <TIM_OC1_SetConfig+0x118>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a17      	ldr	r2, [pc, #92]	; (800662c <TIM_OC1_SetConfig+0x11c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d111      	bne.n	80065f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40013400 	.word	0x40013400
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800

08006630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f023 0210 	bic.w	r2, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a28      	ldr	r2, [pc, #160]	; (8006730 <TIM_OC2_SetConfig+0x100>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_OC2_SetConfig+0x6c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a27      	ldr	r2, [pc, #156]	; (8006734 <TIM_OC2_SetConfig+0x104>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10d      	bne.n	80066b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <TIM_OC2_SetConfig+0x100>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00f      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <TIM_OC2_SetConfig+0x104>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <TIM_OC2_SetConfig+0x108>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1a      	ldr	r2, [pc, #104]	; (800673c <TIM_OC2_SetConfig+0x10c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a19      	ldr	r2, [pc, #100]	; (8006740 <TIM_OC2_SetConfig+0x110>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d113      	bne.n	8006708 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a27      	ldr	r2, [pc, #156]	; (8006840 <TIM_OC3_SetConfig+0xfc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC3_SetConfig+0x6a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a26      	ldr	r2, [pc, #152]	; (8006844 <TIM_OC3_SetConfig+0x100>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <TIM_OC3_SetConfig+0xfc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <TIM_OC3_SetConfig+0x100>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <TIM_OC3_SetConfig+0x104>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <TIM_OC3_SetConfig+0x108>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a18      	ldr	r2, [pc, #96]	; (8006850 <TIM_OC3_SetConfig+0x10c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	031b      	lsls	r3, r3, #12
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <TIM_OC4_SetConfig+0xc0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <TIM_OC4_SetConfig+0xc4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <TIM_OC4_SetConfig+0xc8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <TIM_OC4_SetConfig+0xcc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a14      	ldr	r2, [pc, #80]	; (8006924 <TIM_OC4_SetConfig+0xd0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d109      	bne.n	80068ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	019b      	lsls	r3, r3, #6
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800696c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC5_SetConfig+0xb4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00f      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC5_SetConfig+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00b      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC5_SetConfig+0xbc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d007      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <TIM_OC5_SetConfig+0xc0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d003      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <TIM_OC5_SetConfig+0xc4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d109      	bne.n	80069b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	40014800 	.word	0x40014800

080069f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	051b      	lsls	r3, r3, #20
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC6_SetConfig+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00f      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC6_SetConfig+0xbc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <TIM_OC6_SetConfig+0xc0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <TIM_OC6_SetConfig+0xc4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <TIM_OC6_SetConfig+0xc8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800

08006abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 030a 	bic.w	r3, r3, #10
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f023 0210 	bic.w	r2, r3, #16
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	031b      	lsls	r3, r3, #12
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f043 0307 	orr.w	r3, r3, #7
 8006b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	609a      	str	r2, [r3, #8]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	021a      	lsls	r2, r3, #8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	609a      	str	r2, [r3, #8]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	2201      	movs	r2, #1
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	43db      	mvns	r3, r3
 8006c12:	401a      	ands	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1a      	ldr	r2, [r3, #32]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	fa01 f303 	lsl.w	r3, r1, r3
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e068      	b.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a2e      	ldr	r2, [pc, #184]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1e      	ldr	r2, [pc, #120]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01d      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d018      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1a      	ldr	r2, [pc, #104]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00e      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a14      	ldr	r2, [pc, #80]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10c      	bne.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40014000 	.word	0x40014000

08006d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e040      	b.n	8006de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa ff08 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2224      	movs	r2, #36	; 0x24
 8006d78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fe74 	bl	8007a80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fbb9 	bl	8007510 <UART_SetConfig>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e01b      	b.n	8006de0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fef3 	bl	8007bc4 <UART_CheckIdleState>
 8006dde:	4603      	mov	r3, r0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	; 0x28
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d178      	bne.n	8006ef2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <HAL_UART_Transmit+0x24>
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e071      	b.n	8006ef4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2221      	movs	r2, #33	; 0x21
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e1e:	f7fb f901 	bl	8002024 <HAL_GetTick>
 8006e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d108      	bne.n	8006e50 <HAL_UART_Transmit+0x68>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e003      	b.n	8006e58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e58:	e030      	b.n	8006ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2200      	movs	r2, #0
 8006e62:	2180      	movs	r1, #128	; 0x80
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 ff55 	bl	8007d14 <UART_WaitOnFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e03c      	b.n	8006ef4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10b      	bne.n	8006e98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	3302      	adds	r3, #2
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	e008      	b.n	8006eaa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	b292      	uxth	r2, r2
 8006ea2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1c8      	bne.n	8006e5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 ff1e 	bl	8007d14 <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e005      	b.n	8006ef4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	e000      	b.n	8006ef4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ef2:	2302      	movs	r3, #2
  }
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b0ba      	sub	sp, #232	; 0xe8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f26:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d115      	bne.n	8006f64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00f      	beq.n	8006f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 82ae 	beq.w	80074b6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
      }
      return;
 8006f62:	e2a8      	b.n	80074b6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8117 	beq.w	800719c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f7e:	4b85      	ldr	r3, [pc, #532]	; (8007194 <HAL_UART_IRQHandler+0x298>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 810a 	beq.w	800719c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d011      	beq.n	8006fb8 <HAL_UART_IRQHandler+0xbc>
 8006f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fae:	f043 0201 	orr.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d011      	beq.n	8006fe8 <HAL_UART_IRQHandler+0xec>
 8006fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fde:	f043 0204 	orr.w	r2, r3, #4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d011      	beq.n	8007018 <HAL_UART_IRQHandler+0x11c>
 8006ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2204      	movs	r2, #4
 8007006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700e:	f043 0202 	orr.w	r2, r3, #2
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d017      	beq.n	8007054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2208      	movs	r2, #8
 8007042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800704a:	f043 0208 	orr.w	r2, r3, #8
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <HAL_UART_IRQHandler+0x18a>
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8214 	beq.w	80074ba <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00d      	beq.n	80070ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d005      	beq.n	80070de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d04f      	beq.n	800717e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fe7f 	bl	8007de2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d141      	bne.n	8007176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800710c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800711e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800712a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1d9      	bne.n	80070f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007142:	2b00      	cmp	r3, #0
 8007144:	d013      	beq.n	800716e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714a:	4a13      	ldr	r2, [pc, #76]	; (8007198 <HAL_UART_IRQHandler+0x29c>)
 800714c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007152:	4618      	mov	r0, r3
 8007154:	f7fc f9ff 	bl	8003556 <HAL_DMA_Abort_IT>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d017      	beq.n	800718e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716c:	e00f      	b.n	800718e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9b8 	bl	80074e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007174:	e00b      	b.n	800718e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f9b4 	bl	80074e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717c:	e007      	b.n	800718e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f9b0 	bl	80074e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800718c:	e195      	b.n	80074ba <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718e:	bf00      	nop
    return;
 8007190:	e193      	b.n	80074ba <HAL_UART_IRQHandler+0x5be>
 8007192:	bf00      	nop
 8007194:	04000120 	.word	0x04000120
 8007198:	08007eab 	.word	0x08007eab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	f040 814e 	bne.w	8007442 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8147 	beq.w	8007442 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8140 	beq.w	8007442 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2210      	movs	r2, #16
 80071c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	f040 80b8 	bne.w	800734a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8167 	beq.w	80074be <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f080 815f 	bcs.w	80074be <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 8086 	bne.w	8007328 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800724a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800725e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1da      	bne.n	800721c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800728a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800728e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800729c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e1      	bne.n	8007266 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e3      	bne.n	80072a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f8:	f023 0310 	bic.w	r3, r3, #16
 80072fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800730a:	65bb      	str	r3, [r7, #88]	; 0x58
 800730c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e4      	bne.n	80072e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007322:	4618      	mov	r0, r3
 8007324:	f7fc f8d9 	bl	80034da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800733a:	b29b      	uxth	r3, r3
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b29b      	uxth	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f8d8 	bl	80074f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007348:	e0b9      	b.n	80074be <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007356:	b29b      	uxth	r3, r3
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80ab 	beq.w	80074c2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800736c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80a6 	beq.w	80074c2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800738a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007398:	647b      	str	r3, [r7, #68]	; 0x44
 800739a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800739e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e4      	bne.n	8007376 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	623b      	str	r3, [r7, #32]
   return(result);
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073d0:	633a      	str	r2, [r7, #48]	; 0x30
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e3      	bne.n	80073ac <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	60fb      	str	r3, [r7, #12]
   return(result);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 0310 	bic.w	r3, r3, #16
 800740c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	617b      	str	r3, [r7, #20]
   return(result);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e4      	bne.n	80073f8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f85c 	bl	80074f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007440:	e03f      	b.n	80074c2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <HAL_UART_IRQHandler+0x570>
 800744e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007462:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fd60 	bl	8007f2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800746a:	e02d      	b.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00e      	beq.n	8007496 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01c      	beq.n	80074c6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
    }
    return;
 8007494:	e017      	b.n	80074c6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d012      	beq.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00c      	beq.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fd11 	bl	8007ed6 <UART_EndTransmit_IT>
    return;
 80074b4:	e008      	b.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80074b6:	bf00      	nop
 80074b8:	e006      	b.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80074ba:	bf00      	nop
 80074bc:	e004      	b.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80074be:	bf00      	nop
 80074c0:	e002      	b.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80074c2:	bf00      	nop
 80074c4:	e000      	b.n	80074c8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80074c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80074c8:	37e8      	adds	r7, #232	; 0xe8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007514:	b08a      	sub	sp, #40	; 0x28
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	431a      	orrs	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	4313      	orrs	r3, r2
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4ba4      	ldr	r3, [pc, #656]	; (80077d0 <UART_SetConfig+0x2c0>)
 8007540:	4013      	ands	r3, r2
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007548:	430b      	orrs	r3, r1
 800754a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a99      	ldr	r2, [pc, #612]	; (80077d4 <UART_SetConfig+0x2c4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007578:	4313      	orrs	r3, r2
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758c:	430a      	orrs	r2, r1
 800758e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a90      	ldr	r2, [pc, #576]	; (80077d8 <UART_SetConfig+0x2c8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d126      	bne.n	80075e8 <UART_SetConfig+0xd8>
 800759a:	4b90      	ldr	r3, [pc, #576]	; (80077dc <UART_SetConfig+0x2cc>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d81b      	bhi.n	80075e0 <UART_SetConfig+0xd0>
 80075a8:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <UART_SetConfig+0xa0>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	080075c1 	.word	0x080075c1
 80075b4:	080075d1 	.word	0x080075d1
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075d9 	.word	0x080075d9
 80075c0:	2301      	movs	r3, #1
 80075c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c6:	e116      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80075c8:	2302      	movs	r3, #2
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ce:	e112      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80075d0:	2304      	movs	r3, #4
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d6:	e10e      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80075d8:	2308      	movs	r3, #8
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075de:	e10a      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80075e0:	2310      	movs	r3, #16
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075e6:	e106      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a7c      	ldr	r2, [pc, #496]	; (80077e0 <UART_SetConfig+0x2d0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d138      	bne.n	8007664 <UART_SetConfig+0x154>
 80075f2:	4b7a      	ldr	r3, [pc, #488]	; (80077dc <UART_SetConfig+0x2cc>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	f003 030c 	and.w	r3, r3, #12
 80075fc:	2b0c      	cmp	r3, #12
 80075fe:	d82d      	bhi.n	800765c <UART_SetConfig+0x14c>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <UART_SetConfig+0xf8>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	0800763d 	.word	0x0800763d
 800760c:	0800765d 	.word	0x0800765d
 8007610:	0800765d 	.word	0x0800765d
 8007614:	0800765d 	.word	0x0800765d
 8007618:	0800764d 	.word	0x0800764d
 800761c:	0800765d 	.word	0x0800765d
 8007620:	0800765d 	.word	0x0800765d
 8007624:	0800765d 	.word	0x0800765d
 8007628:	08007645 	.word	0x08007645
 800762c:	0800765d 	.word	0x0800765d
 8007630:	0800765d 	.word	0x0800765d
 8007634:	0800765d 	.word	0x0800765d
 8007638:	08007655 	.word	0x08007655
 800763c:	2300      	movs	r3, #0
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007642:	e0d8      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007644:	2302      	movs	r3, #2
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764a:	e0d4      	b.n	80077f6 <UART_SetConfig+0x2e6>
 800764c:	2304      	movs	r3, #4
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007652:	e0d0      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765a:	e0cc      	b.n	80077f6 <UART_SetConfig+0x2e6>
 800765c:	2310      	movs	r3, #16
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007662:	e0c8      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a5e      	ldr	r2, [pc, #376]	; (80077e4 <UART_SetConfig+0x2d4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d125      	bne.n	80076ba <UART_SetConfig+0x1aa>
 800766e:	4b5b      	ldr	r3, [pc, #364]	; (80077dc <UART_SetConfig+0x2cc>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d016      	beq.n	80076aa <UART_SetConfig+0x19a>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d818      	bhi.n	80076b2 <UART_SetConfig+0x1a2>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d00a      	beq.n	800769a <UART_SetConfig+0x18a>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d814      	bhi.n	80076b2 <UART_SetConfig+0x1a2>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <UART_SetConfig+0x182>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d008      	beq.n	80076a2 <UART_SetConfig+0x192>
 8007690:	e00f      	b.n	80076b2 <UART_SetConfig+0x1a2>
 8007692:	2300      	movs	r3, #0
 8007694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007698:	e0ad      	b.n	80077f6 <UART_SetConfig+0x2e6>
 800769a:	2302      	movs	r3, #2
 800769c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a0:	e0a9      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80076a2:	2304      	movs	r3, #4
 80076a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a8:	e0a5      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80076aa:	2308      	movs	r3, #8
 80076ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b0:	e0a1      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80076b2:	2310      	movs	r3, #16
 80076b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b8:	e09d      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a4a      	ldr	r2, [pc, #296]	; (80077e8 <UART_SetConfig+0x2d8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d125      	bne.n	8007710 <UART_SetConfig+0x200>
 80076c4:	4b45      	ldr	r3, [pc, #276]	; (80077dc <UART_SetConfig+0x2cc>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076ce:	2bc0      	cmp	r3, #192	; 0xc0
 80076d0:	d016      	beq.n	8007700 <UART_SetConfig+0x1f0>
 80076d2:	2bc0      	cmp	r3, #192	; 0xc0
 80076d4:	d818      	bhi.n	8007708 <UART_SetConfig+0x1f8>
 80076d6:	2b80      	cmp	r3, #128	; 0x80
 80076d8:	d00a      	beq.n	80076f0 <UART_SetConfig+0x1e0>
 80076da:	2b80      	cmp	r3, #128	; 0x80
 80076dc:	d814      	bhi.n	8007708 <UART_SetConfig+0x1f8>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <UART_SetConfig+0x1d8>
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d008      	beq.n	80076f8 <UART_SetConfig+0x1e8>
 80076e6:	e00f      	b.n	8007708 <UART_SetConfig+0x1f8>
 80076e8:	2300      	movs	r3, #0
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ee:	e082      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80076f0:	2302      	movs	r3, #2
 80076f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f6:	e07e      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80076f8:	2304      	movs	r3, #4
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fe:	e07a      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007700:	2308      	movs	r3, #8
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007706:	e076      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007708:	2310      	movs	r3, #16
 800770a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770e:	e072      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a35      	ldr	r2, [pc, #212]	; (80077ec <UART_SetConfig+0x2dc>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d12a      	bne.n	8007770 <UART_SetConfig+0x260>
 800771a:	4b30      	ldr	r3, [pc, #192]	; (80077dc <UART_SetConfig+0x2cc>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007728:	d01a      	beq.n	8007760 <UART_SetConfig+0x250>
 800772a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800772e:	d81b      	bhi.n	8007768 <UART_SetConfig+0x258>
 8007730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007734:	d00c      	beq.n	8007750 <UART_SetConfig+0x240>
 8007736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800773a:	d815      	bhi.n	8007768 <UART_SetConfig+0x258>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <UART_SetConfig+0x238>
 8007740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007744:	d008      	beq.n	8007758 <UART_SetConfig+0x248>
 8007746:	e00f      	b.n	8007768 <UART_SetConfig+0x258>
 8007748:	2300      	movs	r3, #0
 800774a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774e:	e052      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007750:	2302      	movs	r3, #2
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007756:	e04e      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007758:	2304      	movs	r3, #4
 800775a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775e:	e04a      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007760:	2308      	movs	r3, #8
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007766:	e046      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007768:	2310      	movs	r3, #16
 800776a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776e:	e042      	b.n	80077f6 <UART_SetConfig+0x2e6>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <UART_SetConfig+0x2c4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d13a      	bne.n	80077f0 <UART_SetConfig+0x2e0>
 800777a:	4b18      	ldr	r3, [pc, #96]	; (80077dc <UART_SetConfig+0x2cc>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007788:	d01a      	beq.n	80077c0 <UART_SetConfig+0x2b0>
 800778a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800778e:	d81b      	bhi.n	80077c8 <UART_SetConfig+0x2b8>
 8007790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007794:	d00c      	beq.n	80077b0 <UART_SetConfig+0x2a0>
 8007796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779a:	d815      	bhi.n	80077c8 <UART_SetConfig+0x2b8>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <UART_SetConfig+0x298>
 80077a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a4:	d008      	beq.n	80077b8 <UART_SetConfig+0x2a8>
 80077a6:	e00f      	b.n	80077c8 <UART_SetConfig+0x2b8>
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ae:	e022      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80077b0:	2302      	movs	r3, #2
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b6:	e01e      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80077b8:	2304      	movs	r3, #4
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077be:	e01a      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80077c0:	2308      	movs	r3, #8
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c6:	e016      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80077c8:	2310      	movs	r3, #16
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ce:	e012      	b.n	80077f6 <UART_SetConfig+0x2e6>
 80077d0:	efff69f3 	.word	0xefff69f3
 80077d4:	40008000 	.word	0x40008000
 80077d8:	40013800 	.word	0x40013800
 80077dc:	40021000 	.word	0x40021000
 80077e0:	40004400 	.word	0x40004400
 80077e4:	40004800 	.word	0x40004800
 80077e8:	40004c00 	.word	0x40004c00
 80077ec:	40005000 	.word	0x40005000
 80077f0:	2310      	movs	r3, #16
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a9f      	ldr	r2, [pc, #636]	; (8007a78 <UART_SetConfig+0x568>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d17a      	bne.n	80078f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007804:	2b08      	cmp	r3, #8
 8007806:	d824      	bhi.n	8007852 <UART_SetConfig+0x342>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0x300>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007835 	.word	0x08007835
 8007814:	08007853 	.word	0x08007853
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007853 	.word	0x08007853
 8007820:	08007843 	.word	0x08007843
 8007824:	08007853 	.word	0x08007853
 8007828:	08007853 	.word	0x08007853
 800782c:	08007853 	.word	0x08007853
 8007830:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fd fc84 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8007838:	61f8      	str	r0, [r7, #28]
        break;
 800783a:	e010      	b.n	800785e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b8f      	ldr	r3, [pc, #572]	; (8007a7c <UART_SetConfig+0x56c>)
 800783e:	61fb      	str	r3, [r7, #28]
        break;
 8007840:	e00d      	b.n	800785e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fd fbe5 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8007846:	61f8      	str	r0, [r7, #28]
        break;
 8007848:	e009      	b.n	800785e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784e:	61fb      	str	r3, [r7, #28]
        break;
 8007850:	e005      	b.n	800785e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800785c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80fb 	beq.w	8007a5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	429a      	cmp	r2, r3
 8007874:	d305      	bcc.n	8007882 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	429a      	cmp	r2, r3
 8007880:	d903      	bls.n	800788a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007888:	e0e8      	b.n	8007a5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	2200      	movs	r2, #0
 800788e:	461c      	mov	r4, r3
 8007890:	4615      	mov	r5, r2
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	022b      	lsls	r3, r5, #8
 800789c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078a0:	0222      	lsls	r2, r4, #8
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	6849      	ldr	r1, [r1, #4]
 80078a6:	0849      	lsrs	r1, r1, #1
 80078a8:	2000      	movs	r0, #0
 80078aa:	4688      	mov	r8, r1
 80078ac:	4681      	mov	r9, r0
 80078ae:	eb12 0a08 	adds.w	sl, r2, r8
 80078b2:	eb43 0b09 	adc.w	fp, r3, r9
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c4:	4650      	mov	r0, sl
 80078c6:	4659      	mov	r1, fp
 80078c8:	f7f9 f9de 	bl	8000c88 <__aeabi_uldivmod>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4613      	mov	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078da:	d308      	bcc.n	80078ee <UART_SetConfig+0x3de>
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e2:	d204      	bcs.n	80078ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	60da      	str	r2, [r3, #12]
 80078ec:	e0b6      	b.n	8007a5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078f4:	e0b2      	b.n	8007a5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fe:	d15e      	bne.n	80079be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007900:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007904:	2b08      	cmp	r3, #8
 8007906:	d828      	bhi.n	800795a <UART_SetConfig+0x44a>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x400>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007935 	.word	0x08007935
 8007914:	0800793d 	.word	0x0800793d
 8007918:	08007945 	.word	0x08007945
 800791c:	0800795b 	.word	0x0800795b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800795b 	.word	0x0800795b
 8007928:	0800795b 	.word	0x0800795b
 800792c:	0800795b 	.word	0x0800795b
 8007930:	08007953 	.word	0x08007953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007934:	f7fd fc04 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8007938:	61f8      	str	r0, [r7, #28]
        break;
 800793a:	e014      	b.n	8007966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800793c:	f7fd fc16 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 8007940:	61f8      	str	r0, [r7, #28]
        break;
 8007942:	e010      	b.n	8007966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007944:	4b4d      	ldr	r3, [pc, #308]	; (8007a7c <UART_SetConfig+0x56c>)
 8007946:	61fb      	str	r3, [r7, #28]
        break;
 8007948:	e00d      	b.n	8007966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800794a:	f7fd fb61 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 800794e:	61f8      	str	r0, [r7, #28]
        break;
 8007950:	e009      	b.n	8007966 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007956:	61fb      	str	r3, [r7, #28]
        break;
 8007958:	e005      	b.n	8007966 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d077      	beq.n	8007a5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	005a      	lsls	r2, r3, #1
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	441a      	add	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b0f      	cmp	r3, #15
 8007986:	d916      	bls.n	80079b6 <UART_SetConfig+0x4a6>
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798e:	d212      	bcs.n	80079b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f023 030f 	bic.w	r3, r3, #15
 8007998:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	8afa      	ldrh	r2, [r7, #22]
 80079b2:	60da      	str	r2, [r3, #12]
 80079b4:	e052      	b.n	8007a5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079bc:	e04e      	b.n	8007a5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d827      	bhi.n	8007a16 <UART_SetConfig+0x506>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <UART_SetConfig+0x4bc>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f9 	.word	0x080079f9
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	08007a17 	.word	0x08007a17
 80079dc:	08007a07 	.word	0x08007a07
 80079e0:	08007a17 	.word	0x08007a17
 80079e4:	08007a17 	.word	0x08007a17
 80079e8:	08007a17 	.word	0x08007a17
 80079ec:	08007a0f 	.word	0x08007a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f0:	f7fd fba6 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 80079f4:	61f8      	str	r0, [r7, #28]
        break;
 80079f6:	e014      	b.n	8007a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fd fbb8 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 80079fc:	61f8      	str	r0, [r7, #28]
        break;
 80079fe:	e010      	b.n	8007a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <UART_SetConfig+0x56c>)
 8007a02:	61fb      	str	r3, [r7, #28]
        break;
 8007a04:	e00d      	b.n	8007a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a06:	f7fd fb03 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8007a0a:	61f8      	str	r0, [r7, #28]
        break;
 8007a0c:	e009      	b.n	8007a22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a12:	61fb      	str	r3, [r7, #28]
        break;
 8007a14:	e005      	b.n	8007a22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a20:	bf00      	nop
    }

    if (pclk != 0U)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d019      	beq.n	8007a5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	085a      	lsrs	r2, r3, #1
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	441a      	add	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b0f      	cmp	r3, #15
 8007a40:	d909      	bls.n	8007a56 <UART_SetConfig+0x546>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d205      	bcs.n	8007a56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e002      	b.n	8007a5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3728      	adds	r7, #40	; 0x28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a76:	bf00      	nop
 8007a78:	40008000 	.word	0x40008000
 8007a7c:	00f42400 	.word	0x00f42400

08007a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01a      	beq.n	8007b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b7e:	d10a      	bne.n	8007b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	605a      	str	r2, [r3, #4]
  }
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b098      	sub	sp, #96	; 0x60
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bd4:	f7fa fa26 	bl	8002024 <HAL_GetTick>
 8007bd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d12e      	bne.n	8007c46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f88c 	bl	8007d14 <UART_WaitOnFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d021      	beq.n	8007c46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c16:	653b      	str	r3, [r7, #80]	; 0x50
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c20:	647b      	str	r3, [r7, #68]	; 0x44
 8007c22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e6      	bne.n	8007c02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e062      	b.n	8007d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d149      	bne.n	8007ce8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f856 	bl	8007d14 <UART_WaitOnFlagUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03c      	beq.n	8007ce8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e6      	bne.n	8007c6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc0:	61fa      	str	r2, [r7, #28]
 8007cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	69b9      	ldr	r1, [r7, #24]
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e5      	bne.n	8007ca0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e011      	b.n	8007d0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3758      	adds	r7, #88	; 0x58
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d24:	e049      	b.n	8007dba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2c:	d045      	beq.n	8007dba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2e:	f7fa f979 	bl	8002024 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d302      	bcc.n	8007d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e048      	b.n	8007dda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d031      	beq.n	8007dba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d110      	bne.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2208      	movs	r2, #8
 8007d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f838 	bl	8007de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2208      	movs	r2, #8
 8007d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e029      	b.n	8007dda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d94:	d111      	bne.n	8007dba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f81e 	bl	8007de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e00f      	b.n	8007dda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	bf0c      	ite	eq
 8007dca:	2301      	moveq	r3, #1
 8007dcc:	2300      	movne	r3, #0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d0a6      	beq.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b095      	sub	sp, #84	; 0x54
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
 8007e0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e6      	bne.n	8007dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3308      	adds	r3, #8
 8007e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f023 0301 	bic.w	r3, r3, #1
 8007e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e5      	bne.n	8007e1c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d118      	bne.n	8007e8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f023 0310 	bic.w	r3, r3, #16
 8007e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e76:	61bb      	str	r3, [r7, #24]
 8007e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6979      	ldr	r1, [r7, #20]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	613b      	str	r3, [r7, #16]
   return(result);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e6      	bne.n	8007e58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e9e:	bf00      	nop
 8007ea0:	3754      	adds	r7, #84	; 0x54
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff fb0b 	bl	80074e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b088      	sub	sp, #32
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6979      	ldr	r1, [r7, #20]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fad7 	bl	80074d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f22:	bf00      	nop
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <__cvt>:
 8007f3e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f42:	ec55 4b10 	vmov	r4, r5, d0
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	460e      	mov	r6, r1
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	bfbb      	ittet	lt
 8007f50:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f54:	461d      	movlt	r5, r3
 8007f56:	2300      	movge	r3, #0
 8007f58:	232d      	movlt	r3, #45	; 0x2d
 8007f5a:	700b      	strb	r3, [r1, #0]
 8007f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f5e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f62:	4691      	mov	r9, r2
 8007f64:	f023 0820 	bic.w	r8, r3, #32
 8007f68:	bfbc      	itt	lt
 8007f6a:	4622      	movlt	r2, r4
 8007f6c:	4614      	movlt	r4, r2
 8007f6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f72:	d005      	beq.n	8007f80 <__cvt+0x42>
 8007f74:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f78:	d100      	bne.n	8007f7c <__cvt+0x3e>
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	e000      	b.n	8007f82 <__cvt+0x44>
 8007f80:	2103      	movs	r1, #3
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	ab02      	add	r3, sp, #8
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	ec45 4b10 	vmov	d0, r4, r5
 8007f8e:	4653      	mov	r3, sl
 8007f90:	4632      	mov	r2, r6
 8007f92:	f001 f881 	bl	8009098 <_dtoa_r>
 8007f96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	d102      	bne.n	8007fa4 <__cvt+0x66>
 8007f9e:	f019 0f01 	tst.w	r9, #1
 8007fa2:	d022      	beq.n	8007fea <__cvt+0xac>
 8007fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fa8:	eb07 0906 	add.w	r9, r7, r6
 8007fac:	d110      	bne.n	8007fd0 <__cvt+0x92>
 8007fae:	783b      	ldrb	r3, [r7, #0]
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	d10a      	bne.n	8007fca <__cvt+0x8c>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f7f8 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc0:	b918      	cbnz	r0, 8007fca <__cvt+0x8c>
 8007fc2:	f1c6 0601 	rsb	r6, r6, #1
 8007fc6:	f8ca 6000 	str.w	r6, [sl]
 8007fca:	f8da 3000 	ldr.w	r3, [sl]
 8007fce:	4499      	add	r9, r3
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fdc:	b108      	cbz	r0, 8007fe2 <__cvt+0xa4>
 8007fde:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fe2:	2230      	movs	r2, #48	; 0x30
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	454b      	cmp	r3, r9
 8007fe8:	d307      	bcc.n	8007ffa <__cvt+0xbc>
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fee:	1bdb      	subs	r3, r3, r7
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	b004      	add	sp, #16
 8007ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffa:	1c59      	adds	r1, r3, #1
 8007ffc:	9103      	str	r1, [sp, #12]
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e7f0      	b.n	8007fe4 <__cvt+0xa6>

08008002 <__exponent>:
 8008002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008004:	4603      	mov	r3, r0
 8008006:	2900      	cmp	r1, #0
 8008008:	bfb8      	it	lt
 800800a:	4249      	neglt	r1, r1
 800800c:	f803 2b02 	strb.w	r2, [r3], #2
 8008010:	bfb4      	ite	lt
 8008012:	222d      	movlt	r2, #45	; 0x2d
 8008014:	222b      	movge	r2, #43	; 0x2b
 8008016:	2909      	cmp	r1, #9
 8008018:	7042      	strb	r2, [r0, #1]
 800801a:	dd2a      	ble.n	8008072 <__exponent+0x70>
 800801c:	f10d 0207 	add.w	r2, sp, #7
 8008020:	4617      	mov	r7, r2
 8008022:	260a      	movs	r6, #10
 8008024:	4694      	mov	ip, r2
 8008026:	fb91 f5f6 	sdiv	r5, r1, r6
 800802a:	fb06 1415 	mls	r4, r6, r5, r1
 800802e:	3430      	adds	r4, #48	; 0x30
 8008030:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008034:	460c      	mov	r4, r1
 8008036:	2c63      	cmp	r4, #99	; 0x63
 8008038:	f102 32ff 	add.w	r2, r2, #4294967295
 800803c:	4629      	mov	r1, r5
 800803e:	dcf1      	bgt.n	8008024 <__exponent+0x22>
 8008040:	3130      	adds	r1, #48	; 0x30
 8008042:	f1ac 0402 	sub.w	r4, ip, #2
 8008046:	f802 1c01 	strb.w	r1, [r2, #-1]
 800804a:	1c41      	adds	r1, r0, #1
 800804c:	4622      	mov	r2, r4
 800804e:	42ba      	cmp	r2, r7
 8008050:	d30a      	bcc.n	8008068 <__exponent+0x66>
 8008052:	f10d 0209 	add.w	r2, sp, #9
 8008056:	eba2 020c 	sub.w	r2, r2, ip
 800805a:	42bc      	cmp	r4, r7
 800805c:	bf88      	it	hi
 800805e:	2200      	movhi	r2, #0
 8008060:	4413      	add	r3, r2
 8008062:	1a18      	subs	r0, r3, r0
 8008064:	b003      	add	sp, #12
 8008066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008068:	f812 5b01 	ldrb.w	r5, [r2], #1
 800806c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008070:	e7ed      	b.n	800804e <__exponent+0x4c>
 8008072:	2330      	movs	r3, #48	; 0x30
 8008074:	3130      	adds	r1, #48	; 0x30
 8008076:	7083      	strb	r3, [r0, #2]
 8008078:	70c1      	strb	r1, [r0, #3]
 800807a:	1d03      	adds	r3, r0, #4
 800807c:	e7f1      	b.n	8008062 <__exponent+0x60>
	...

08008080 <_printf_float>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	ed2d 8b02 	vpush	{d8}
 8008088:	b08d      	sub	sp, #52	; 0x34
 800808a:	460c      	mov	r4, r1
 800808c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008090:	4616      	mov	r6, r2
 8008092:	461f      	mov	r7, r3
 8008094:	4605      	mov	r5, r0
 8008096:	f000 fef7 	bl	8008e88 <_localeconv_r>
 800809a:	f8d0 a000 	ldr.w	sl, [r0]
 800809e:	4650      	mov	r0, sl
 80080a0:	f7f8 f8e6 	bl	8000270 <strlen>
 80080a4:	2300      	movs	r3, #0
 80080a6:	930a      	str	r3, [sp, #40]	; 0x28
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	9305      	str	r3, [sp, #20]
 80080ac:	f8d8 3000 	ldr.w	r3, [r8]
 80080b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080b4:	3307      	adds	r3, #7
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	f103 0208 	add.w	r2, r3, #8
 80080be:	f8c8 2000 	str.w	r2, [r8]
 80080c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80080d0:	ee08 0a10 	vmov	s16, r0
 80080d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80080d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080dc:	4b9e      	ldr	r3, [pc, #632]	; (8008358 <_printf_float+0x2d8>)
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	f7f8 fd23 	bl	8000b2c <__aeabi_dcmpun>
 80080e6:	bb88      	cbnz	r0, 800814c <_printf_float+0xcc>
 80080e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ec:	4b9a      	ldr	r3, [pc, #616]	; (8008358 <_printf_float+0x2d8>)
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295
 80080f2:	f7f8 fcfd 	bl	8000af0 <__aeabi_dcmple>
 80080f6:	bb48      	cbnz	r0, 800814c <_printf_float+0xcc>
 80080f8:	2200      	movs	r2, #0
 80080fa:	2300      	movs	r3, #0
 80080fc:	4640      	mov	r0, r8
 80080fe:	4649      	mov	r1, r9
 8008100:	f7f8 fcec 	bl	8000adc <__aeabi_dcmplt>
 8008104:	b110      	cbz	r0, 800810c <_printf_float+0x8c>
 8008106:	232d      	movs	r3, #45	; 0x2d
 8008108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800810c:	4a93      	ldr	r2, [pc, #588]	; (800835c <_printf_float+0x2dc>)
 800810e:	4b94      	ldr	r3, [pc, #592]	; (8008360 <_printf_float+0x2e0>)
 8008110:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008114:	bf94      	ite	ls
 8008116:	4690      	movls	r8, r2
 8008118:	4698      	movhi	r8, r3
 800811a:	2303      	movs	r3, #3
 800811c:	6123      	str	r3, [r4, #16]
 800811e:	9b05      	ldr	r3, [sp, #20]
 8008120:	f023 0304 	bic.w	r3, r3, #4
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	f04f 0900 	mov.w	r9, #0
 800812a:	9700      	str	r7, [sp, #0]
 800812c:	4633      	mov	r3, r6
 800812e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008130:	4621      	mov	r1, r4
 8008132:	4628      	mov	r0, r5
 8008134:	f000 f9da 	bl	80084ec <_printf_common>
 8008138:	3001      	adds	r0, #1
 800813a:	f040 8090 	bne.w	800825e <_printf_float+0x1de>
 800813e:	f04f 30ff 	mov.w	r0, #4294967295
 8008142:	b00d      	add	sp, #52	; 0x34
 8008144:	ecbd 8b02 	vpop	{d8}
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	4642      	mov	r2, r8
 800814e:	464b      	mov	r3, r9
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 fcea 	bl	8000b2c <__aeabi_dcmpun>
 8008158:	b140      	cbz	r0, 800816c <_printf_float+0xec>
 800815a:	464b      	mov	r3, r9
 800815c:	2b00      	cmp	r3, #0
 800815e:	bfbc      	itt	lt
 8008160:	232d      	movlt	r3, #45	; 0x2d
 8008162:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008166:	4a7f      	ldr	r2, [pc, #508]	; (8008364 <_printf_float+0x2e4>)
 8008168:	4b7f      	ldr	r3, [pc, #508]	; (8008368 <_printf_float+0x2e8>)
 800816a:	e7d1      	b.n	8008110 <_printf_float+0x90>
 800816c:	6863      	ldr	r3, [r4, #4]
 800816e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008172:	9206      	str	r2, [sp, #24]
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	d13f      	bne.n	80081f8 <_printf_float+0x178>
 8008178:	2306      	movs	r3, #6
 800817a:	6063      	str	r3, [r4, #4]
 800817c:	9b05      	ldr	r3, [sp, #20]
 800817e:	6861      	ldr	r1, [r4, #4]
 8008180:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008184:	2300      	movs	r3, #0
 8008186:	9303      	str	r3, [sp, #12]
 8008188:	ab0a      	add	r3, sp, #40	; 0x28
 800818a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800818e:	ab09      	add	r3, sp, #36	; 0x24
 8008190:	ec49 8b10 	vmov	d0, r8, r9
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800819c:	4628      	mov	r0, r5
 800819e:	f7ff fece 	bl	8007f3e <__cvt>
 80081a2:	9b06      	ldr	r3, [sp, #24]
 80081a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081a6:	2b47      	cmp	r3, #71	; 0x47
 80081a8:	4680      	mov	r8, r0
 80081aa:	d108      	bne.n	80081be <_printf_float+0x13e>
 80081ac:	1cc8      	adds	r0, r1, #3
 80081ae:	db02      	blt.n	80081b6 <_printf_float+0x136>
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	4299      	cmp	r1, r3
 80081b4:	dd41      	ble.n	800823a <_printf_float+0x1ba>
 80081b6:	f1ab 0302 	sub.w	r3, fp, #2
 80081ba:	fa5f fb83 	uxtb.w	fp, r3
 80081be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081c2:	d820      	bhi.n	8008206 <_printf_float+0x186>
 80081c4:	3901      	subs	r1, #1
 80081c6:	465a      	mov	r2, fp
 80081c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081cc:	9109      	str	r1, [sp, #36]	; 0x24
 80081ce:	f7ff ff18 	bl	8008002 <__exponent>
 80081d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d4:	1813      	adds	r3, r2, r0
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	4681      	mov	r9, r0
 80081da:	6123      	str	r3, [r4, #16]
 80081dc:	dc02      	bgt.n	80081e4 <_printf_float+0x164>
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	07d2      	lsls	r2, r2, #31
 80081e2:	d501      	bpl.n	80081e8 <_printf_float+0x168>
 80081e4:	3301      	adds	r3, #1
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d09c      	beq.n	800812a <_printf_float+0xaa>
 80081f0:	232d      	movs	r3, #45	; 0x2d
 80081f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f6:	e798      	b.n	800812a <_printf_float+0xaa>
 80081f8:	9a06      	ldr	r2, [sp, #24]
 80081fa:	2a47      	cmp	r2, #71	; 0x47
 80081fc:	d1be      	bne.n	800817c <_printf_float+0xfc>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1bc      	bne.n	800817c <_printf_float+0xfc>
 8008202:	2301      	movs	r3, #1
 8008204:	e7b9      	b.n	800817a <_printf_float+0xfa>
 8008206:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800820a:	d118      	bne.n	800823e <_printf_float+0x1be>
 800820c:	2900      	cmp	r1, #0
 800820e:	6863      	ldr	r3, [r4, #4]
 8008210:	dd0b      	ble.n	800822a <_printf_float+0x1aa>
 8008212:	6121      	str	r1, [r4, #16]
 8008214:	b913      	cbnz	r3, 800821c <_printf_float+0x19c>
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	07d0      	lsls	r0, r2, #31
 800821a:	d502      	bpl.n	8008222 <_printf_float+0x1a2>
 800821c:	3301      	adds	r3, #1
 800821e:	440b      	add	r3, r1
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	65a1      	str	r1, [r4, #88]	; 0x58
 8008224:	f04f 0900 	mov.w	r9, #0
 8008228:	e7de      	b.n	80081e8 <_printf_float+0x168>
 800822a:	b913      	cbnz	r3, 8008232 <_printf_float+0x1b2>
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	07d2      	lsls	r2, r2, #31
 8008230:	d501      	bpl.n	8008236 <_printf_float+0x1b6>
 8008232:	3302      	adds	r3, #2
 8008234:	e7f4      	b.n	8008220 <_printf_float+0x1a0>
 8008236:	2301      	movs	r3, #1
 8008238:	e7f2      	b.n	8008220 <_printf_float+0x1a0>
 800823a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800823e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008240:	4299      	cmp	r1, r3
 8008242:	db05      	blt.n	8008250 <_printf_float+0x1d0>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	6121      	str	r1, [r4, #16]
 8008248:	07d8      	lsls	r0, r3, #31
 800824a:	d5ea      	bpl.n	8008222 <_printf_float+0x1a2>
 800824c:	1c4b      	adds	r3, r1, #1
 800824e:	e7e7      	b.n	8008220 <_printf_float+0x1a0>
 8008250:	2900      	cmp	r1, #0
 8008252:	bfd4      	ite	le
 8008254:	f1c1 0202 	rsble	r2, r1, #2
 8008258:	2201      	movgt	r2, #1
 800825a:	4413      	add	r3, r2
 800825c:	e7e0      	b.n	8008220 <_printf_float+0x1a0>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	055a      	lsls	r2, r3, #21
 8008262:	d407      	bmi.n	8008274 <_printf_float+0x1f4>
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	4642      	mov	r2, r8
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	d12c      	bne.n	80082cc <_printf_float+0x24c>
 8008272:	e764      	b.n	800813e <_printf_float+0xbe>
 8008274:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008278:	f240 80e0 	bls.w	800843c <_printf_float+0x3bc>
 800827c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	f7f8 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008288:	2800      	cmp	r0, #0
 800828a:	d034      	beq.n	80082f6 <_printf_float+0x276>
 800828c:	4a37      	ldr	r2, [pc, #220]	; (800836c <_printf_float+0x2ec>)
 800828e:	2301      	movs	r3, #1
 8008290:	4631      	mov	r1, r6
 8008292:	4628      	mov	r0, r5
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	f43f af51 	beq.w	800813e <_printf_float+0xbe>
 800829c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082a0:	429a      	cmp	r2, r3
 80082a2:	db02      	blt.n	80082aa <_printf_float+0x22a>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	07d8      	lsls	r0, r3, #31
 80082a8:	d510      	bpl.n	80082cc <_printf_float+0x24c>
 80082aa:	ee18 3a10 	vmov	r3, s16
 80082ae:	4652      	mov	r2, sl
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	f43f af41 	beq.w	800813e <_printf_float+0xbe>
 80082bc:	f04f 0800 	mov.w	r8, #0
 80082c0:	f104 091a 	add.w	r9, r4, #26
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	3b01      	subs	r3, #1
 80082c8:	4543      	cmp	r3, r8
 80082ca:	dc09      	bgt.n	80082e0 <_printf_float+0x260>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	079b      	lsls	r3, r3, #30
 80082d0:	f100 8107 	bmi.w	80084e2 <_printf_float+0x462>
 80082d4:	68e0      	ldr	r0, [r4, #12]
 80082d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082d8:	4298      	cmp	r0, r3
 80082da:	bfb8      	it	lt
 80082dc:	4618      	movlt	r0, r3
 80082de:	e730      	b.n	8008142 <_printf_float+0xc2>
 80082e0:	2301      	movs	r3, #1
 80082e2:	464a      	mov	r2, r9
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f af27 	beq.w	800813e <_printf_float+0xbe>
 80082f0:	f108 0801 	add.w	r8, r8, #1
 80082f4:	e7e6      	b.n	80082c4 <_printf_float+0x244>
 80082f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dc39      	bgt.n	8008370 <_printf_float+0x2f0>
 80082fc:	4a1b      	ldr	r2, [pc, #108]	; (800836c <_printf_float+0x2ec>)
 80082fe:	2301      	movs	r3, #1
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	f43f af19 	beq.w	800813e <_printf_float+0xbe>
 800830c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008310:	4313      	orrs	r3, r2
 8008312:	d102      	bne.n	800831a <_printf_float+0x29a>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	07d9      	lsls	r1, r3, #31
 8008318:	d5d8      	bpl.n	80082cc <_printf_float+0x24c>
 800831a:	ee18 3a10 	vmov	r3, s16
 800831e:	4652      	mov	r2, sl
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	f43f af09 	beq.w	800813e <_printf_float+0xbe>
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	f104 0a1a 	add.w	sl, r4, #26
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	425b      	negs	r3, r3
 8008338:	454b      	cmp	r3, r9
 800833a:	dc01      	bgt.n	8008340 <_printf_float+0x2c0>
 800833c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833e:	e792      	b.n	8008266 <_printf_float+0x1e6>
 8008340:	2301      	movs	r3, #1
 8008342:	4652      	mov	r2, sl
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	f43f aef7 	beq.w	800813e <_printf_float+0xbe>
 8008350:	f109 0901 	add.w	r9, r9, #1
 8008354:	e7ee      	b.n	8008334 <_printf_float+0x2b4>
 8008356:	bf00      	nop
 8008358:	7fefffff 	.word	0x7fefffff
 800835c:	0800c8b4 	.word	0x0800c8b4
 8008360:	0800c8b8 	.word	0x0800c8b8
 8008364:	0800c8bc 	.word	0x0800c8bc
 8008368:	0800c8c0 	.word	0x0800c8c0
 800836c:	0800c8c4 	.word	0x0800c8c4
 8008370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008374:	429a      	cmp	r2, r3
 8008376:	bfa8      	it	ge
 8008378:	461a      	movge	r2, r3
 800837a:	2a00      	cmp	r2, #0
 800837c:	4691      	mov	r9, r2
 800837e:	dc37      	bgt.n	80083f0 <_printf_float+0x370>
 8008380:	f04f 0b00 	mov.w	fp, #0
 8008384:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008388:	f104 021a 	add.w	r2, r4, #26
 800838c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800838e:	9305      	str	r3, [sp, #20]
 8008390:	eba3 0309 	sub.w	r3, r3, r9
 8008394:	455b      	cmp	r3, fp
 8008396:	dc33      	bgt.n	8008400 <_printf_float+0x380>
 8008398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800839c:	429a      	cmp	r2, r3
 800839e:	db3b      	blt.n	8008418 <_printf_float+0x398>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	07da      	lsls	r2, r3, #31
 80083a4:	d438      	bmi.n	8008418 <_printf_float+0x398>
 80083a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80083aa:	eba2 0903 	sub.w	r9, r2, r3
 80083ae:	9b05      	ldr	r3, [sp, #20]
 80083b0:	1ad2      	subs	r2, r2, r3
 80083b2:	4591      	cmp	r9, r2
 80083b4:	bfa8      	it	ge
 80083b6:	4691      	movge	r9, r2
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	dc35      	bgt.n	800842a <_printf_float+0x3aa>
 80083be:	f04f 0800 	mov.w	r8, #0
 80083c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083c6:	f104 0a1a 	add.w	sl, r4, #26
 80083ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	eba3 0309 	sub.w	r3, r3, r9
 80083d4:	4543      	cmp	r3, r8
 80083d6:	f77f af79 	ble.w	80082cc <_printf_float+0x24c>
 80083da:	2301      	movs	r3, #1
 80083dc:	4652      	mov	r2, sl
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	f43f aeaa 	beq.w	800813e <_printf_float+0xbe>
 80083ea:	f108 0801 	add.w	r8, r8, #1
 80083ee:	e7ec      	b.n	80083ca <_printf_float+0x34a>
 80083f0:	4613      	mov	r3, r2
 80083f2:	4631      	mov	r1, r6
 80083f4:	4642      	mov	r2, r8
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	d1c0      	bne.n	8008380 <_printf_float+0x300>
 80083fe:	e69e      	b.n	800813e <_printf_float+0xbe>
 8008400:	2301      	movs	r3, #1
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	9205      	str	r2, [sp, #20]
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	f43f ae97 	beq.w	800813e <_printf_float+0xbe>
 8008410:	9a05      	ldr	r2, [sp, #20]
 8008412:	f10b 0b01 	add.w	fp, fp, #1
 8008416:	e7b9      	b.n	800838c <_printf_float+0x30c>
 8008418:	ee18 3a10 	vmov	r3, s16
 800841c:	4652      	mov	r2, sl
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	d1be      	bne.n	80083a6 <_printf_float+0x326>
 8008428:	e689      	b.n	800813e <_printf_float+0xbe>
 800842a:	9a05      	ldr	r2, [sp, #20]
 800842c:	464b      	mov	r3, r9
 800842e:	4442      	add	r2, r8
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	d1c1      	bne.n	80083be <_printf_float+0x33e>
 800843a:	e680      	b.n	800813e <_printf_float+0xbe>
 800843c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800843e:	2a01      	cmp	r2, #1
 8008440:	dc01      	bgt.n	8008446 <_printf_float+0x3c6>
 8008442:	07db      	lsls	r3, r3, #31
 8008444:	d53a      	bpl.n	80084bc <_printf_float+0x43c>
 8008446:	2301      	movs	r3, #1
 8008448:	4642      	mov	r2, r8
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	f43f ae74 	beq.w	800813e <_printf_float+0xbe>
 8008456:	ee18 3a10 	vmov	r3, s16
 800845a:	4652      	mov	r2, sl
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f ae6b 	beq.w	800813e <_printf_float+0xbe>
 8008468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800846c:	2200      	movs	r2, #0
 800846e:	2300      	movs	r3, #0
 8008470:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008474:	f7f8 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008478:	b9d8      	cbnz	r0, 80084b2 <_printf_float+0x432>
 800847a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800847e:	f108 0201 	add.w	r2, r8, #1
 8008482:	4631      	mov	r1, r6
 8008484:	4628      	mov	r0, r5
 8008486:	47b8      	blx	r7
 8008488:	3001      	adds	r0, #1
 800848a:	d10e      	bne.n	80084aa <_printf_float+0x42a>
 800848c:	e657      	b.n	800813e <_printf_float+0xbe>
 800848e:	2301      	movs	r3, #1
 8008490:	4652      	mov	r2, sl
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f ae50 	beq.w	800813e <_printf_float+0xbe>
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a4:	3b01      	subs	r3, #1
 80084a6:	4543      	cmp	r3, r8
 80084a8:	dcf1      	bgt.n	800848e <_printf_float+0x40e>
 80084aa:	464b      	mov	r3, r9
 80084ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084b0:	e6da      	b.n	8008268 <_printf_float+0x1e8>
 80084b2:	f04f 0800 	mov.w	r8, #0
 80084b6:	f104 0a1a 	add.w	sl, r4, #26
 80084ba:	e7f2      	b.n	80084a2 <_printf_float+0x422>
 80084bc:	2301      	movs	r3, #1
 80084be:	4642      	mov	r2, r8
 80084c0:	e7df      	b.n	8008482 <_printf_float+0x402>
 80084c2:	2301      	movs	r3, #1
 80084c4:	464a      	mov	r2, r9
 80084c6:	4631      	mov	r1, r6
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b8      	blx	r7
 80084cc:	3001      	adds	r0, #1
 80084ce:	f43f ae36 	beq.w	800813e <_printf_float+0xbe>
 80084d2:	f108 0801 	add.w	r8, r8, #1
 80084d6:	68e3      	ldr	r3, [r4, #12]
 80084d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084da:	1a5b      	subs	r3, r3, r1
 80084dc:	4543      	cmp	r3, r8
 80084de:	dcf0      	bgt.n	80084c2 <_printf_float+0x442>
 80084e0:	e6f8      	b.n	80082d4 <_printf_float+0x254>
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	f104 0919 	add.w	r9, r4, #25
 80084ea:	e7f4      	b.n	80084d6 <_printf_float+0x456>

080084ec <_printf_common>:
 80084ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f0:	4616      	mov	r6, r2
 80084f2:	4699      	mov	r9, r3
 80084f4:	688a      	ldr	r2, [r1, #8]
 80084f6:	690b      	ldr	r3, [r1, #16]
 80084f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084fc:	4293      	cmp	r3, r2
 80084fe:	bfb8      	it	lt
 8008500:	4613      	movlt	r3, r2
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008508:	4607      	mov	r7, r0
 800850a:	460c      	mov	r4, r1
 800850c:	b10a      	cbz	r2, 8008512 <_printf_common+0x26>
 800850e:	3301      	adds	r3, #1
 8008510:	6033      	str	r3, [r6, #0]
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	0699      	lsls	r1, r3, #26
 8008516:	bf42      	ittt	mi
 8008518:	6833      	ldrmi	r3, [r6, #0]
 800851a:	3302      	addmi	r3, #2
 800851c:	6033      	strmi	r3, [r6, #0]
 800851e:	6825      	ldr	r5, [r4, #0]
 8008520:	f015 0506 	ands.w	r5, r5, #6
 8008524:	d106      	bne.n	8008534 <_printf_common+0x48>
 8008526:	f104 0a19 	add.w	sl, r4, #25
 800852a:	68e3      	ldr	r3, [r4, #12]
 800852c:	6832      	ldr	r2, [r6, #0]
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	42ab      	cmp	r3, r5
 8008532:	dc26      	bgt.n	8008582 <_printf_common+0x96>
 8008534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008538:	1e13      	subs	r3, r2, #0
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	bf18      	it	ne
 800853e:	2301      	movne	r3, #1
 8008540:	0692      	lsls	r2, r2, #26
 8008542:	d42b      	bmi.n	800859c <_printf_common+0xb0>
 8008544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008548:	4649      	mov	r1, r9
 800854a:	4638      	mov	r0, r7
 800854c:	47c0      	blx	r8
 800854e:	3001      	adds	r0, #1
 8008550:	d01e      	beq.n	8008590 <_printf_common+0xa4>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	6922      	ldr	r2, [r4, #16]
 8008556:	f003 0306 	and.w	r3, r3, #6
 800855a:	2b04      	cmp	r3, #4
 800855c:	bf02      	ittt	eq
 800855e:	68e5      	ldreq	r5, [r4, #12]
 8008560:	6833      	ldreq	r3, [r6, #0]
 8008562:	1aed      	subeq	r5, r5, r3
 8008564:	68a3      	ldr	r3, [r4, #8]
 8008566:	bf0c      	ite	eq
 8008568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800856c:	2500      	movne	r5, #0
 800856e:	4293      	cmp	r3, r2
 8008570:	bfc4      	itt	gt
 8008572:	1a9b      	subgt	r3, r3, r2
 8008574:	18ed      	addgt	r5, r5, r3
 8008576:	2600      	movs	r6, #0
 8008578:	341a      	adds	r4, #26
 800857a:	42b5      	cmp	r5, r6
 800857c:	d11a      	bne.n	80085b4 <_printf_common+0xc8>
 800857e:	2000      	movs	r0, #0
 8008580:	e008      	b.n	8008594 <_printf_common+0xa8>
 8008582:	2301      	movs	r3, #1
 8008584:	4652      	mov	r2, sl
 8008586:	4649      	mov	r1, r9
 8008588:	4638      	mov	r0, r7
 800858a:	47c0      	blx	r8
 800858c:	3001      	adds	r0, #1
 800858e:	d103      	bne.n	8008598 <_printf_common+0xac>
 8008590:	f04f 30ff 	mov.w	r0, #4294967295
 8008594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008598:	3501      	adds	r5, #1
 800859a:	e7c6      	b.n	800852a <_printf_common+0x3e>
 800859c:	18e1      	adds	r1, r4, r3
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	2030      	movs	r0, #48	; 0x30
 80085a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085a6:	4422      	add	r2, r4
 80085a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085b0:	3302      	adds	r3, #2
 80085b2:	e7c7      	b.n	8008544 <_printf_common+0x58>
 80085b4:	2301      	movs	r3, #1
 80085b6:	4622      	mov	r2, r4
 80085b8:	4649      	mov	r1, r9
 80085ba:	4638      	mov	r0, r7
 80085bc:	47c0      	blx	r8
 80085be:	3001      	adds	r0, #1
 80085c0:	d0e6      	beq.n	8008590 <_printf_common+0xa4>
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7d9      	b.n	800857a <_printf_common+0x8e>
	...

080085c8 <_printf_i>:
 80085c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	7e0f      	ldrb	r7, [r1, #24]
 80085ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085d0:	2f78      	cmp	r7, #120	; 0x78
 80085d2:	4691      	mov	r9, r2
 80085d4:	4680      	mov	r8, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	469a      	mov	sl, r3
 80085da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085de:	d807      	bhi.n	80085f0 <_printf_i+0x28>
 80085e0:	2f62      	cmp	r7, #98	; 0x62
 80085e2:	d80a      	bhi.n	80085fa <_printf_i+0x32>
 80085e4:	2f00      	cmp	r7, #0
 80085e6:	f000 80d4 	beq.w	8008792 <_printf_i+0x1ca>
 80085ea:	2f58      	cmp	r7, #88	; 0x58
 80085ec:	f000 80c0 	beq.w	8008770 <_printf_i+0x1a8>
 80085f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085f8:	e03a      	b.n	8008670 <_printf_i+0xa8>
 80085fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085fe:	2b15      	cmp	r3, #21
 8008600:	d8f6      	bhi.n	80085f0 <_printf_i+0x28>
 8008602:	a101      	add	r1, pc, #4	; (adr r1, 8008608 <_printf_i+0x40>)
 8008604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008608:	08008661 	.word	0x08008661
 800860c:	08008675 	.word	0x08008675
 8008610:	080085f1 	.word	0x080085f1
 8008614:	080085f1 	.word	0x080085f1
 8008618:	080085f1 	.word	0x080085f1
 800861c:	080085f1 	.word	0x080085f1
 8008620:	08008675 	.word	0x08008675
 8008624:	080085f1 	.word	0x080085f1
 8008628:	080085f1 	.word	0x080085f1
 800862c:	080085f1 	.word	0x080085f1
 8008630:	080085f1 	.word	0x080085f1
 8008634:	08008779 	.word	0x08008779
 8008638:	080086a1 	.word	0x080086a1
 800863c:	08008733 	.word	0x08008733
 8008640:	080085f1 	.word	0x080085f1
 8008644:	080085f1 	.word	0x080085f1
 8008648:	0800879b 	.word	0x0800879b
 800864c:	080085f1 	.word	0x080085f1
 8008650:	080086a1 	.word	0x080086a1
 8008654:	080085f1 	.word	0x080085f1
 8008658:	080085f1 	.word	0x080085f1
 800865c:	0800873b 	.word	0x0800873b
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	1d1a      	adds	r2, r3, #4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	602a      	str	r2, [r5, #0]
 8008668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800866c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008670:	2301      	movs	r3, #1
 8008672:	e09f      	b.n	80087b4 <_printf_i+0x1ec>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	682b      	ldr	r3, [r5, #0]
 8008678:	0607      	lsls	r7, r0, #24
 800867a:	f103 0104 	add.w	r1, r3, #4
 800867e:	6029      	str	r1, [r5, #0]
 8008680:	d501      	bpl.n	8008686 <_printf_i+0xbe>
 8008682:	681e      	ldr	r6, [r3, #0]
 8008684:	e003      	b.n	800868e <_printf_i+0xc6>
 8008686:	0646      	lsls	r6, r0, #25
 8008688:	d5fb      	bpl.n	8008682 <_printf_i+0xba>
 800868a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800868e:	2e00      	cmp	r6, #0
 8008690:	da03      	bge.n	800869a <_printf_i+0xd2>
 8008692:	232d      	movs	r3, #45	; 0x2d
 8008694:	4276      	negs	r6, r6
 8008696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800869a:	485a      	ldr	r0, [pc, #360]	; (8008804 <_printf_i+0x23c>)
 800869c:	230a      	movs	r3, #10
 800869e:	e012      	b.n	80086c6 <_printf_i+0xfe>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	6820      	ldr	r0, [r4, #0]
 80086a4:	1d19      	adds	r1, r3, #4
 80086a6:	6029      	str	r1, [r5, #0]
 80086a8:	0605      	lsls	r5, r0, #24
 80086aa:	d501      	bpl.n	80086b0 <_printf_i+0xe8>
 80086ac:	681e      	ldr	r6, [r3, #0]
 80086ae:	e002      	b.n	80086b6 <_printf_i+0xee>
 80086b0:	0641      	lsls	r1, r0, #25
 80086b2:	d5fb      	bpl.n	80086ac <_printf_i+0xe4>
 80086b4:	881e      	ldrh	r6, [r3, #0]
 80086b6:	4853      	ldr	r0, [pc, #332]	; (8008804 <_printf_i+0x23c>)
 80086b8:	2f6f      	cmp	r7, #111	; 0x6f
 80086ba:	bf0c      	ite	eq
 80086bc:	2308      	moveq	r3, #8
 80086be:	230a      	movne	r3, #10
 80086c0:	2100      	movs	r1, #0
 80086c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086c6:	6865      	ldr	r5, [r4, #4]
 80086c8:	60a5      	str	r5, [r4, #8]
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	bfa2      	ittt	ge
 80086ce:	6821      	ldrge	r1, [r4, #0]
 80086d0:	f021 0104 	bicge.w	r1, r1, #4
 80086d4:	6021      	strge	r1, [r4, #0]
 80086d6:	b90e      	cbnz	r6, 80086dc <_printf_i+0x114>
 80086d8:	2d00      	cmp	r5, #0
 80086da:	d04b      	beq.n	8008774 <_printf_i+0x1ac>
 80086dc:	4615      	mov	r5, r2
 80086de:	fbb6 f1f3 	udiv	r1, r6, r3
 80086e2:	fb03 6711 	mls	r7, r3, r1, r6
 80086e6:	5dc7      	ldrb	r7, [r0, r7]
 80086e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086ec:	4637      	mov	r7, r6
 80086ee:	42bb      	cmp	r3, r7
 80086f0:	460e      	mov	r6, r1
 80086f2:	d9f4      	bls.n	80086de <_printf_i+0x116>
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d10b      	bne.n	8008710 <_printf_i+0x148>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	07de      	lsls	r6, r3, #31
 80086fc:	d508      	bpl.n	8008710 <_printf_i+0x148>
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	6861      	ldr	r1, [r4, #4]
 8008702:	4299      	cmp	r1, r3
 8008704:	bfde      	ittt	le
 8008706:	2330      	movle	r3, #48	; 0x30
 8008708:	f805 3c01 	strble.w	r3, [r5, #-1]
 800870c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008710:	1b52      	subs	r2, r2, r5
 8008712:	6122      	str	r2, [r4, #16]
 8008714:	f8cd a000 	str.w	sl, [sp]
 8008718:	464b      	mov	r3, r9
 800871a:	aa03      	add	r2, sp, #12
 800871c:	4621      	mov	r1, r4
 800871e:	4640      	mov	r0, r8
 8008720:	f7ff fee4 	bl	80084ec <_printf_common>
 8008724:	3001      	adds	r0, #1
 8008726:	d14a      	bne.n	80087be <_printf_i+0x1f6>
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	b004      	add	sp, #16
 800872e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	f043 0320 	orr.w	r3, r3, #32
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	4833      	ldr	r0, [pc, #204]	; (8008808 <_printf_i+0x240>)
 800873c:	2778      	movs	r7, #120	; 0x78
 800873e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6829      	ldr	r1, [r5, #0]
 8008746:	061f      	lsls	r7, r3, #24
 8008748:	f851 6b04 	ldr.w	r6, [r1], #4
 800874c:	d402      	bmi.n	8008754 <_printf_i+0x18c>
 800874e:	065f      	lsls	r7, r3, #25
 8008750:	bf48      	it	mi
 8008752:	b2b6      	uxthmi	r6, r6
 8008754:	07df      	lsls	r7, r3, #31
 8008756:	bf48      	it	mi
 8008758:	f043 0320 	orrmi.w	r3, r3, #32
 800875c:	6029      	str	r1, [r5, #0]
 800875e:	bf48      	it	mi
 8008760:	6023      	strmi	r3, [r4, #0]
 8008762:	b91e      	cbnz	r6, 800876c <_printf_i+0x1a4>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	f023 0320 	bic.w	r3, r3, #32
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	2310      	movs	r3, #16
 800876e:	e7a7      	b.n	80086c0 <_printf_i+0xf8>
 8008770:	4824      	ldr	r0, [pc, #144]	; (8008804 <_printf_i+0x23c>)
 8008772:	e7e4      	b.n	800873e <_printf_i+0x176>
 8008774:	4615      	mov	r5, r2
 8008776:	e7bd      	b.n	80086f4 <_printf_i+0x12c>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	6826      	ldr	r6, [r4, #0]
 800877c:	6961      	ldr	r1, [r4, #20]
 800877e:	1d18      	adds	r0, r3, #4
 8008780:	6028      	str	r0, [r5, #0]
 8008782:	0635      	lsls	r5, r6, #24
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	d501      	bpl.n	800878c <_printf_i+0x1c4>
 8008788:	6019      	str	r1, [r3, #0]
 800878a:	e002      	b.n	8008792 <_printf_i+0x1ca>
 800878c:	0670      	lsls	r0, r6, #25
 800878e:	d5fb      	bpl.n	8008788 <_printf_i+0x1c0>
 8008790:	8019      	strh	r1, [r3, #0]
 8008792:	2300      	movs	r3, #0
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	4615      	mov	r5, r2
 8008798:	e7bc      	b.n	8008714 <_printf_i+0x14c>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	602a      	str	r2, [r5, #0]
 80087a0:	681d      	ldr	r5, [r3, #0]
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	2100      	movs	r1, #0
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7f7 fd12 	bl	80001d0 <memchr>
 80087ac:	b108      	cbz	r0, 80087b2 <_printf_i+0x1ea>
 80087ae:	1b40      	subs	r0, r0, r5
 80087b0:	6060      	str	r0, [r4, #4]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	2300      	movs	r3, #0
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087bc:	e7aa      	b.n	8008714 <_printf_i+0x14c>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	462a      	mov	r2, r5
 80087c2:	4649      	mov	r1, r9
 80087c4:	4640      	mov	r0, r8
 80087c6:	47d0      	blx	sl
 80087c8:	3001      	adds	r0, #1
 80087ca:	d0ad      	beq.n	8008728 <_printf_i+0x160>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	079b      	lsls	r3, r3, #30
 80087d0:	d413      	bmi.n	80087fa <_printf_i+0x232>
 80087d2:	68e0      	ldr	r0, [r4, #12]
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	4298      	cmp	r0, r3
 80087d8:	bfb8      	it	lt
 80087da:	4618      	movlt	r0, r3
 80087dc:	e7a6      	b.n	800872c <_printf_i+0x164>
 80087de:	2301      	movs	r3, #1
 80087e0:	4632      	mov	r2, r6
 80087e2:	4649      	mov	r1, r9
 80087e4:	4640      	mov	r0, r8
 80087e6:	47d0      	blx	sl
 80087e8:	3001      	adds	r0, #1
 80087ea:	d09d      	beq.n	8008728 <_printf_i+0x160>
 80087ec:	3501      	adds	r5, #1
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	9903      	ldr	r1, [sp, #12]
 80087f2:	1a5b      	subs	r3, r3, r1
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dcf2      	bgt.n	80087de <_printf_i+0x216>
 80087f8:	e7eb      	b.n	80087d2 <_printf_i+0x20a>
 80087fa:	2500      	movs	r5, #0
 80087fc:	f104 0619 	add.w	r6, r4, #25
 8008800:	e7f5      	b.n	80087ee <_printf_i+0x226>
 8008802:	bf00      	nop
 8008804:	0800c8c6 	.word	0x0800c8c6
 8008808:	0800c8d7 	.word	0x0800c8d7

0800880c <_scanf_float>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	b087      	sub	sp, #28
 8008812:	4617      	mov	r7, r2
 8008814:	9303      	str	r3, [sp, #12]
 8008816:	688b      	ldr	r3, [r1, #8]
 8008818:	1e5a      	subs	r2, r3, #1
 800881a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800881e:	bf83      	ittte	hi
 8008820:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008824:	195b      	addhi	r3, r3, r5
 8008826:	9302      	strhi	r3, [sp, #8]
 8008828:	2300      	movls	r3, #0
 800882a:	bf86      	itte	hi
 800882c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008830:	608b      	strhi	r3, [r1, #8]
 8008832:	9302      	strls	r3, [sp, #8]
 8008834:	680b      	ldr	r3, [r1, #0]
 8008836:	468b      	mov	fp, r1
 8008838:	2500      	movs	r5, #0
 800883a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800883e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008842:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008846:	4680      	mov	r8, r0
 8008848:	460c      	mov	r4, r1
 800884a:	465e      	mov	r6, fp
 800884c:	46aa      	mov	sl, r5
 800884e:	46a9      	mov	r9, r5
 8008850:	9501      	str	r5, [sp, #4]
 8008852:	68a2      	ldr	r2, [r4, #8]
 8008854:	b152      	cbz	r2, 800886c <_scanf_float+0x60>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b4e      	cmp	r3, #78	; 0x4e
 800885c:	d864      	bhi.n	8008928 <_scanf_float+0x11c>
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d83c      	bhi.n	80088dc <_scanf_float+0xd0>
 8008862:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008866:	b2c8      	uxtb	r0, r1
 8008868:	280e      	cmp	r0, #14
 800886a:	d93a      	bls.n	80088e2 <_scanf_float+0xd6>
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	d003      	beq.n	800887a <_scanf_float+0x6e>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800887e:	f1ba 0f01 	cmp.w	sl, #1
 8008882:	f200 8113 	bhi.w	8008aac <_scanf_float+0x2a0>
 8008886:	455e      	cmp	r6, fp
 8008888:	f200 8105 	bhi.w	8008a96 <_scanf_float+0x28a>
 800888c:	2501      	movs	r5, #1
 800888e:	4628      	mov	r0, r5
 8008890:	b007      	add	sp, #28
 8008892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008896:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800889a:	2a0d      	cmp	r2, #13
 800889c:	d8e6      	bhi.n	800886c <_scanf_float+0x60>
 800889e:	a101      	add	r1, pc, #4	; (adr r1, 80088a4 <_scanf_float+0x98>)
 80088a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088a4:	080089e3 	.word	0x080089e3
 80088a8:	0800886d 	.word	0x0800886d
 80088ac:	0800886d 	.word	0x0800886d
 80088b0:	0800886d 	.word	0x0800886d
 80088b4:	08008a43 	.word	0x08008a43
 80088b8:	08008a1b 	.word	0x08008a1b
 80088bc:	0800886d 	.word	0x0800886d
 80088c0:	0800886d 	.word	0x0800886d
 80088c4:	080089f1 	.word	0x080089f1
 80088c8:	0800886d 	.word	0x0800886d
 80088cc:	0800886d 	.word	0x0800886d
 80088d0:	0800886d 	.word	0x0800886d
 80088d4:	0800886d 	.word	0x0800886d
 80088d8:	080089a9 	.word	0x080089a9
 80088dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088e0:	e7db      	b.n	800889a <_scanf_float+0x8e>
 80088e2:	290e      	cmp	r1, #14
 80088e4:	d8c2      	bhi.n	800886c <_scanf_float+0x60>
 80088e6:	a001      	add	r0, pc, #4	; (adr r0, 80088ec <_scanf_float+0xe0>)
 80088e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088ec:	0800899b 	.word	0x0800899b
 80088f0:	0800886d 	.word	0x0800886d
 80088f4:	0800899b 	.word	0x0800899b
 80088f8:	08008a2f 	.word	0x08008a2f
 80088fc:	0800886d 	.word	0x0800886d
 8008900:	08008949 	.word	0x08008949
 8008904:	08008985 	.word	0x08008985
 8008908:	08008985 	.word	0x08008985
 800890c:	08008985 	.word	0x08008985
 8008910:	08008985 	.word	0x08008985
 8008914:	08008985 	.word	0x08008985
 8008918:	08008985 	.word	0x08008985
 800891c:	08008985 	.word	0x08008985
 8008920:	08008985 	.word	0x08008985
 8008924:	08008985 	.word	0x08008985
 8008928:	2b6e      	cmp	r3, #110	; 0x6e
 800892a:	d809      	bhi.n	8008940 <_scanf_float+0x134>
 800892c:	2b60      	cmp	r3, #96	; 0x60
 800892e:	d8b2      	bhi.n	8008896 <_scanf_float+0x8a>
 8008930:	2b54      	cmp	r3, #84	; 0x54
 8008932:	d077      	beq.n	8008a24 <_scanf_float+0x218>
 8008934:	2b59      	cmp	r3, #89	; 0x59
 8008936:	d199      	bne.n	800886c <_scanf_float+0x60>
 8008938:	2d07      	cmp	r5, #7
 800893a:	d197      	bne.n	800886c <_scanf_float+0x60>
 800893c:	2508      	movs	r5, #8
 800893e:	e029      	b.n	8008994 <_scanf_float+0x188>
 8008940:	2b74      	cmp	r3, #116	; 0x74
 8008942:	d06f      	beq.n	8008a24 <_scanf_float+0x218>
 8008944:	2b79      	cmp	r3, #121	; 0x79
 8008946:	e7f6      	b.n	8008936 <_scanf_float+0x12a>
 8008948:	6821      	ldr	r1, [r4, #0]
 800894a:	05c8      	lsls	r0, r1, #23
 800894c:	d51a      	bpl.n	8008984 <_scanf_float+0x178>
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008954:	6021      	str	r1, [r4, #0]
 8008956:	f109 0901 	add.w	r9, r9, #1
 800895a:	b11b      	cbz	r3, 8008964 <_scanf_float+0x158>
 800895c:	3b01      	subs	r3, #1
 800895e:	3201      	adds	r2, #1
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	60a2      	str	r2, [r4, #8]
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	3b01      	subs	r3, #1
 8008968:	60a3      	str	r3, [r4, #8]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	3301      	adds	r3, #1
 800896e:	6123      	str	r3, [r4, #16]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3b01      	subs	r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	f340 8084 	ble.w	8008a84 <_scanf_float+0x278>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	e766      	b.n	8008852 <_scanf_float+0x46>
 8008984:	eb1a 0f05 	cmn.w	sl, r5
 8008988:	f47f af70 	bne.w	800886c <_scanf_float+0x60>
 800898c:	6822      	ldr	r2, [r4, #0]
 800898e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008992:	6022      	str	r2, [r4, #0]
 8008994:	f806 3b01 	strb.w	r3, [r6], #1
 8008998:	e7e4      	b.n	8008964 <_scanf_float+0x158>
 800899a:	6822      	ldr	r2, [r4, #0]
 800899c:	0610      	lsls	r0, r2, #24
 800899e:	f57f af65 	bpl.w	800886c <_scanf_float+0x60>
 80089a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a6:	e7f4      	b.n	8008992 <_scanf_float+0x186>
 80089a8:	f1ba 0f00 	cmp.w	sl, #0
 80089ac:	d10e      	bne.n	80089cc <_scanf_float+0x1c0>
 80089ae:	f1b9 0f00 	cmp.w	r9, #0
 80089b2:	d10e      	bne.n	80089d2 <_scanf_float+0x1c6>
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089be:	d108      	bne.n	80089d2 <_scanf_float+0x1c6>
 80089c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	f04f 0a01 	mov.w	sl, #1
 80089ca:	e7e3      	b.n	8008994 <_scanf_float+0x188>
 80089cc:	f1ba 0f02 	cmp.w	sl, #2
 80089d0:	d055      	beq.n	8008a7e <_scanf_float+0x272>
 80089d2:	2d01      	cmp	r5, #1
 80089d4:	d002      	beq.n	80089dc <_scanf_float+0x1d0>
 80089d6:	2d04      	cmp	r5, #4
 80089d8:	f47f af48 	bne.w	800886c <_scanf_float+0x60>
 80089dc:	3501      	adds	r5, #1
 80089de:	b2ed      	uxtb	r5, r5
 80089e0:	e7d8      	b.n	8008994 <_scanf_float+0x188>
 80089e2:	f1ba 0f01 	cmp.w	sl, #1
 80089e6:	f47f af41 	bne.w	800886c <_scanf_float+0x60>
 80089ea:	f04f 0a02 	mov.w	sl, #2
 80089ee:	e7d1      	b.n	8008994 <_scanf_float+0x188>
 80089f0:	b97d      	cbnz	r5, 8008a12 <_scanf_float+0x206>
 80089f2:	f1b9 0f00 	cmp.w	r9, #0
 80089f6:	f47f af3c 	bne.w	8008872 <_scanf_float+0x66>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a04:	f47f af39 	bne.w	800887a <_scanf_float+0x6e>
 8008a08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a0c:	6022      	str	r2, [r4, #0]
 8008a0e:	2501      	movs	r5, #1
 8008a10:	e7c0      	b.n	8008994 <_scanf_float+0x188>
 8008a12:	2d03      	cmp	r5, #3
 8008a14:	d0e2      	beq.n	80089dc <_scanf_float+0x1d0>
 8008a16:	2d05      	cmp	r5, #5
 8008a18:	e7de      	b.n	80089d8 <_scanf_float+0x1cc>
 8008a1a:	2d02      	cmp	r5, #2
 8008a1c:	f47f af26 	bne.w	800886c <_scanf_float+0x60>
 8008a20:	2503      	movs	r5, #3
 8008a22:	e7b7      	b.n	8008994 <_scanf_float+0x188>
 8008a24:	2d06      	cmp	r5, #6
 8008a26:	f47f af21 	bne.w	800886c <_scanf_float+0x60>
 8008a2a:	2507      	movs	r5, #7
 8008a2c:	e7b2      	b.n	8008994 <_scanf_float+0x188>
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	0591      	lsls	r1, r2, #22
 8008a32:	f57f af1b 	bpl.w	800886c <_scanf_float+0x60>
 8008a36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a40:	e7a8      	b.n	8008994 <_scanf_float+0x188>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a4c:	d006      	beq.n	8008a5c <_scanf_float+0x250>
 8008a4e:	0550      	lsls	r0, r2, #21
 8008a50:	f57f af0c 	bpl.w	800886c <_scanf_float+0x60>
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	f43f af0f 	beq.w	800887a <_scanf_float+0x6e>
 8008a5c:	0591      	lsls	r1, r2, #22
 8008a5e:	bf58      	it	pl
 8008a60:	9901      	ldrpl	r1, [sp, #4]
 8008a62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a66:	bf58      	it	pl
 8008a68:	eba9 0101 	subpl.w	r1, r9, r1
 8008a6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a70:	bf58      	it	pl
 8008a72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	f04f 0900 	mov.w	r9, #0
 8008a7c:	e78a      	b.n	8008994 <_scanf_float+0x188>
 8008a7e:	f04f 0a03 	mov.w	sl, #3
 8008a82:	e787      	b.n	8008994 <_scanf_float+0x188>
 8008a84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a88:	4639      	mov	r1, r7
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4798      	blx	r3
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f aedf 	beq.w	8008852 <_scanf_float+0x46>
 8008a94:	e6ea      	b.n	800886c <_scanf_float+0x60>
 8008a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4798      	blx	r3
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	e6ec      	b.n	8008886 <_scanf_float+0x7a>
 8008aac:	1e6b      	subs	r3, r5, #1
 8008aae:	2b06      	cmp	r3, #6
 8008ab0:	d825      	bhi.n	8008afe <_scanf_float+0x2f2>
 8008ab2:	2d02      	cmp	r5, #2
 8008ab4:	d836      	bhi.n	8008b24 <_scanf_float+0x318>
 8008ab6:	455e      	cmp	r6, fp
 8008ab8:	f67f aee8 	bls.w	800888c <_scanf_float+0x80>
 8008abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ac0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ac4:	463a      	mov	r2, r7
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	4798      	blx	r3
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	6123      	str	r3, [r4, #16]
 8008ad0:	e7f1      	b.n	8008ab6 <_scanf_float+0x2aa>
 8008ad2:	9802      	ldr	r0, [sp, #8]
 8008ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008adc:	9002      	str	r0, [sp, #8]
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4798      	blx	r3
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aee:	fa5f fa8a 	uxtb.w	sl, sl
 8008af2:	f1ba 0f02 	cmp.w	sl, #2
 8008af6:	d1ec      	bne.n	8008ad2 <_scanf_float+0x2c6>
 8008af8:	3d03      	subs	r5, #3
 8008afa:	b2ed      	uxtb	r5, r5
 8008afc:	1b76      	subs	r6, r6, r5
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	05da      	lsls	r2, r3, #23
 8008b02:	d52f      	bpl.n	8008b64 <_scanf_float+0x358>
 8008b04:	055b      	lsls	r3, r3, #21
 8008b06:	d510      	bpl.n	8008b2a <_scanf_float+0x31e>
 8008b08:	455e      	cmp	r6, fp
 8008b0a:	f67f aebf 	bls.w	800888c <_scanf_float+0x80>
 8008b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b16:	463a      	mov	r2, r7
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4798      	blx	r3
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	e7f1      	b.n	8008b08 <_scanf_float+0x2fc>
 8008b24:	46aa      	mov	sl, r5
 8008b26:	9602      	str	r6, [sp, #8]
 8008b28:	e7df      	b.n	8008aea <_scanf_float+0x2de>
 8008b2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	2965      	cmp	r1, #101	; 0x65
 8008b32:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b36:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	d00c      	beq.n	8008b58 <_scanf_float+0x34c>
 8008b3e:	2945      	cmp	r1, #69	; 0x45
 8008b40:	d00a      	beq.n	8008b58 <_scanf_float+0x34c>
 8008b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b46:	463a      	mov	r2, r7
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4798      	blx	r3
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	1eb5      	subs	r5, r6, #2
 8008b56:	6123      	str	r3, [r4, #16]
 8008b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b5c:	463a      	mov	r2, r7
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4798      	blx	r3
 8008b62:	462e      	mov	r6, r5
 8008b64:	6825      	ldr	r5, [r4, #0]
 8008b66:	f015 0510 	ands.w	r5, r5, #16
 8008b6a:	d158      	bne.n	8008c1e <_scanf_float+0x412>
 8008b6c:	7035      	strb	r5, [r6, #0]
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b78:	d11c      	bne.n	8008bb4 <_scanf_float+0x3a8>
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	454b      	cmp	r3, r9
 8008b7e:	eba3 0209 	sub.w	r2, r3, r9
 8008b82:	d124      	bne.n	8008bce <_scanf_float+0x3c2>
 8008b84:	2200      	movs	r2, #0
 8008b86:	4659      	mov	r1, fp
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f002 fc31 	bl	800b3f0 <_strtod_r>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	6821      	ldr	r1, [r4, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f011 0f02 	tst.w	r1, #2
 8008b98:	ec57 6b10 	vmov	r6, r7, d0
 8008b9c:	f103 0204 	add.w	r2, r3, #4
 8008ba0:	d020      	beq.n	8008be4 <_scanf_float+0x3d8>
 8008ba2:	9903      	ldr	r1, [sp, #12]
 8008ba4:	600a      	str	r2, [r1, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	e9c3 6700 	strd	r6, r7, [r3]
 8008bac:	68e3      	ldr	r3, [r4, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60e3      	str	r3, [r4, #12]
 8008bb2:	e66c      	b.n	800888e <_scanf_float+0x82>
 8008bb4:	9b04      	ldr	r3, [sp, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0e4      	beq.n	8008b84 <_scanf_float+0x378>
 8008bba:	9905      	ldr	r1, [sp, #20]
 8008bbc:	230a      	movs	r3, #10
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	f002 fc9c 	bl	800b500 <_strtol_r>
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	9e05      	ldr	r6, [sp, #20]
 8008bcc:	1ac2      	subs	r2, r0, r3
 8008bce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008bd2:	429e      	cmp	r6, r3
 8008bd4:	bf28      	it	cs
 8008bd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008bda:	4912      	ldr	r1, [pc, #72]	; (8008c24 <_scanf_float+0x418>)
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f000 f8e7 	bl	8008db0 <siprintf>
 8008be2:	e7cf      	b.n	8008b84 <_scanf_float+0x378>
 8008be4:	f011 0f04 	tst.w	r1, #4
 8008be8:	9903      	ldr	r1, [sp, #12]
 8008bea:	600a      	str	r2, [r1, #0]
 8008bec:	d1db      	bne.n	8008ba6 <_scanf_float+0x39a>
 8008bee:	f8d3 8000 	ldr.w	r8, [r3]
 8008bf2:	ee10 2a10 	vmov	r2, s0
 8008bf6:	ee10 0a10 	vmov	r0, s0
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 ff95 	bl	8000b2c <__aeabi_dcmpun>
 8008c02:	b128      	cbz	r0, 8008c10 <_scanf_float+0x404>
 8008c04:	4808      	ldr	r0, [pc, #32]	; (8008c28 <_scanf_float+0x41c>)
 8008c06:	f000 f9b7 	bl	8008f78 <nanf>
 8008c0a:	ed88 0a00 	vstr	s0, [r8]
 8008c0e:	e7cd      	b.n	8008bac <_scanf_float+0x3a0>
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 ffe8 	bl	8000be8 <__aeabi_d2f>
 8008c18:	f8c8 0000 	str.w	r0, [r8]
 8008c1c:	e7c6      	b.n	8008bac <_scanf_float+0x3a0>
 8008c1e:	2500      	movs	r5, #0
 8008c20:	e635      	b.n	800888e <_scanf_float+0x82>
 8008c22:	bf00      	nop
 8008c24:	0800c8e8 	.word	0x0800c8e8
 8008c28:	0800cc7d 	.word	0x0800cc7d

08008c2c <std>:
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	4604      	mov	r4, r0
 8008c32:	e9c0 3300 	strd	r3, r3, [r0]
 8008c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c3a:	6083      	str	r3, [r0, #8]
 8008c3c:	8181      	strh	r1, [r0, #12]
 8008c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c40:	81c2      	strh	r2, [r0, #14]
 8008c42:	6183      	str	r3, [r0, #24]
 8008c44:	4619      	mov	r1, r3
 8008c46:	2208      	movs	r2, #8
 8008c48:	305c      	adds	r0, #92	; 0x5c
 8008c4a:	f000 f914 	bl	8008e76 <memset>
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <std+0x58>)
 8008c50:	6263      	str	r3, [r4, #36]	; 0x24
 8008c52:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <std+0x5c>)
 8008c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c56:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <std+0x60>)
 8008c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <std+0x64>)
 8008c5c:	6323      	str	r3, [r4, #48]	; 0x30
 8008c5e:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <std+0x68>)
 8008c60:	6224      	str	r4, [r4, #32]
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d006      	beq.n	8008c74 <std+0x48>
 8008c66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c6a:	4294      	cmp	r4, r2
 8008c6c:	d002      	beq.n	8008c74 <std+0x48>
 8008c6e:	33d0      	adds	r3, #208	; 0xd0
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d105      	bne.n	8008c80 <std+0x54>
 8008c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c7c:	f000 b978 	b.w	8008f70 <__retarget_lock_init_recursive>
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	bf00      	nop
 8008c84:	08008df1 	.word	0x08008df1
 8008c88:	08008e13 	.word	0x08008e13
 8008c8c:	08008e4b 	.word	0x08008e4b
 8008c90:	08008e6f 	.word	0x08008e6f
 8008c94:	20000470 	.word	0x20000470

08008c98 <stdio_exit_handler>:
 8008c98:	4a02      	ldr	r2, [pc, #8]	; (8008ca4 <stdio_exit_handler+0xc>)
 8008c9a:	4903      	ldr	r1, [pc, #12]	; (8008ca8 <stdio_exit_handler+0x10>)
 8008c9c:	4803      	ldr	r0, [pc, #12]	; (8008cac <stdio_exit_handler+0x14>)
 8008c9e:	f000 b869 	b.w	8008d74 <_fwalk_sglue>
 8008ca2:	bf00      	nop
 8008ca4:	2000000c 	.word	0x2000000c
 8008ca8:	0800b8c1 	.word	0x0800b8c1
 8008cac:	20000018 	.word	0x20000018

08008cb0 <cleanup_stdio>:
 8008cb0:	6841      	ldr	r1, [r0, #4]
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <cleanup_stdio+0x34>)
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	4604      	mov	r4, r0
 8008cba:	d001      	beq.n	8008cc0 <cleanup_stdio+0x10>
 8008cbc:	f002 fe00 	bl	800b8c0 <_fflush_r>
 8008cc0:	68a1      	ldr	r1, [r4, #8]
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <cleanup_stdio+0x38>)
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d002      	beq.n	8008cce <cleanup_stdio+0x1e>
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f002 fdf9 	bl	800b8c0 <_fflush_r>
 8008cce:	68e1      	ldr	r1, [r4, #12]
 8008cd0:	4b06      	ldr	r3, [pc, #24]	; (8008cec <cleanup_stdio+0x3c>)
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	d004      	beq.n	8008ce0 <cleanup_stdio+0x30>
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cdc:	f002 bdf0 	b.w	800b8c0 <_fflush_r>
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000470 	.word	0x20000470
 8008ce8:	200004d8 	.word	0x200004d8
 8008cec:	20000540 	.word	0x20000540

08008cf0 <global_stdio_init.part.0>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <global_stdio_init.part.0+0x30>)
 8008cf4:	4c0b      	ldr	r4, [pc, #44]	; (8008d24 <global_stdio_init.part.0+0x34>)
 8008cf6:	4a0c      	ldr	r2, [pc, #48]	; (8008d28 <global_stdio_init.part.0+0x38>)
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2104      	movs	r1, #4
 8008d00:	f7ff ff94 	bl	8008c2c <std>
 8008d04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008d08:	2201      	movs	r2, #1
 8008d0a:	2109      	movs	r1, #9
 8008d0c:	f7ff ff8e 	bl	8008c2c <std>
 8008d10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008d14:	2202      	movs	r2, #2
 8008d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1a:	2112      	movs	r1, #18
 8008d1c:	f7ff bf86 	b.w	8008c2c <std>
 8008d20:	200005a8 	.word	0x200005a8
 8008d24:	20000470 	.word	0x20000470
 8008d28:	08008c99 	.word	0x08008c99

08008d2c <__sfp_lock_acquire>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__sfp_lock_acquire+0x8>)
 8008d2e:	f000 b920 	b.w	8008f72 <__retarget_lock_acquire_recursive>
 8008d32:	bf00      	nop
 8008d34:	200005b1 	.word	0x200005b1

08008d38 <__sfp_lock_release>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__sfp_lock_release+0x8>)
 8008d3a:	f000 b91b 	b.w	8008f74 <__retarget_lock_release_recursive>
 8008d3e:	bf00      	nop
 8008d40:	200005b1 	.word	0x200005b1

08008d44 <__sinit>:
 8008d44:	b510      	push	{r4, lr}
 8008d46:	4604      	mov	r4, r0
 8008d48:	f7ff fff0 	bl	8008d2c <__sfp_lock_acquire>
 8008d4c:	6a23      	ldr	r3, [r4, #32]
 8008d4e:	b11b      	cbz	r3, 8008d58 <__sinit+0x14>
 8008d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d54:	f7ff bff0 	b.w	8008d38 <__sfp_lock_release>
 8008d58:	4b04      	ldr	r3, [pc, #16]	; (8008d6c <__sinit+0x28>)
 8008d5a:	6223      	str	r3, [r4, #32]
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <__sinit+0x2c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1f5      	bne.n	8008d50 <__sinit+0xc>
 8008d64:	f7ff ffc4 	bl	8008cf0 <global_stdio_init.part.0>
 8008d68:	e7f2      	b.n	8008d50 <__sinit+0xc>
 8008d6a:	bf00      	nop
 8008d6c:	08008cb1 	.word	0x08008cb1
 8008d70:	200005a8 	.word	0x200005a8

08008d74 <_fwalk_sglue>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	4607      	mov	r7, r0
 8008d7a:	4688      	mov	r8, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	2600      	movs	r6, #0
 8008d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d84:	f1b9 0901 	subs.w	r9, r9, #1
 8008d88:	d505      	bpl.n	8008d96 <_fwalk_sglue+0x22>
 8008d8a:	6824      	ldr	r4, [r4, #0]
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	d1f7      	bne.n	8008d80 <_fwalk_sglue+0xc>
 8008d90:	4630      	mov	r0, r6
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	89ab      	ldrh	r3, [r5, #12]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d907      	bls.n	8008dac <_fwalk_sglue+0x38>
 8008d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008da0:	3301      	adds	r3, #1
 8008da2:	d003      	beq.n	8008dac <_fwalk_sglue+0x38>
 8008da4:	4629      	mov	r1, r5
 8008da6:	4638      	mov	r0, r7
 8008da8:	47c0      	blx	r8
 8008daa:	4306      	orrs	r6, r0
 8008dac:	3568      	adds	r5, #104	; 0x68
 8008dae:	e7e9      	b.n	8008d84 <_fwalk_sglue+0x10>

08008db0 <siprintf>:
 8008db0:	b40e      	push	{r1, r2, r3}
 8008db2:	b500      	push	{lr}
 8008db4:	b09c      	sub	sp, #112	; 0x70
 8008db6:	ab1d      	add	r3, sp, #116	; 0x74
 8008db8:	9002      	str	r0, [sp, #8]
 8008dba:	9006      	str	r0, [sp, #24]
 8008dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dc0:	4809      	ldr	r0, [pc, #36]	; (8008de8 <siprintf+0x38>)
 8008dc2:	9107      	str	r1, [sp, #28]
 8008dc4:	9104      	str	r1, [sp, #16]
 8008dc6:	4909      	ldr	r1, [pc, #36]	; (8008dec <siprintf+0x3c>)
 8008dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	a902      	add	r1, sp, #8
 8008dd4:	f002 fbf0 	bl	800b5b8 <_svfiprintf_r>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	b01c      	add	sp, #112	; 0x70
 8008de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de4:	b003      	add	sp, #12
 8008de6:	4770      	bx	lr
 8008de8:	20000064 	.word	0x20000064
 8008dec:	ffff0208 	.word	0xffff0208

08008df0 <__sread>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	460c      	mov	r4, r1
 8008df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df8:	f000 f86c 	bl	8008ed4 <_read_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	bfab      	itete	ge
 8008e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e02:	89a3      	ldrhlt	r3, [r4, #12]
 8008e04:	181b      	addge	r3, r3, r0
 8008e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e0a:	bfac      	ite	ge
 8008e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e0e:	81a3      	strhlt	r3, [r4, #12]
 8008e10:	bd10      	pop	{r4, pc}

08008e12 <__swrite>:
 8008e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	461f      	mov	r7, r3
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	05db      	lsls	r3, r3, #23
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	4616      	mov	r6, r2
 8008e22:	d505      	bpl.n	8008e30 <__swrite+0x1e>
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	2302      	movs	r3, #2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f000 f840 	bl	8008eb0 <_lseek_r>
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	463b      	mov	r3, r7
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	f000 b857 	b.w	8008ef8 <_write_r>

08008e4a <__sseek>:
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e52:	f000 f82d 	bl	8008eb0 <_lseek_r>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	bf15      	itete	ne
 8008e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e66:	81a3      	strheq	r3, [r4, #12]
 8008e68:	bf18      	it	ne
 8008e6a:	81a3      	strhne	r3, [r4, #12]
 8008e6c:	bd10      	pop	{r4, pc}

08008e6e <__sclose>:
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 b80d 	b.w	8008e90 <_close_r>

08008e76 <memset>:
 8008e76:	4402      	add	r2, r0
 8008e78:	4603      	mov	r3, r0
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d100      	bne.n	8008e80 <memset+0xa>
 8008e7e:	4770      	bx	lr
 8008e80:	f803 1b01 	strb.w	r1, [r3], #1
 8008e84:	e7f9      	b.n	8008e7a <memset+0x4>
	...

08008e88 <_localeconv_r>:
 8008e88:	4800      	ldr	r0, [pc, #0]	; (8008e8c <_localeconv_r+0x4>)
 8008e8a:	4770      	bx	lr
 8008e8c:	20000158 	.word	0x20000158

08008e90 <_close_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d06      	ldr	r5, [pc, #24]	; (8008eac <_close_r+0x1c>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	602b      	str	r3, [r5, #0]
 8008e9c:	f7f8 ffab 	bl	8001df6 <_close>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_close_r+0x1a>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_close_r+0x1a>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	200005ac 	.word	0x200005ac

08008eb0 <_lseek_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d07      	ldr	r5, [pc, #28]	; (8008ed0 <_lseek_r+0x20>)
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	602a      	str	r2, [r5, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f7f8 ffc0 	bl	8001e44 <_lseek>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_lseek_r+0x1e>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_lseek_r+0x1e>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200005ac 	.word	0x200005ac

08008ed4 <_read_r>:
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	4d07      	ldr	r5, [pc, #28]	; (8008ef4 <_read_r+0x20>)
 8008ed8:	4604      	mov	r4, r0
 8008eda:	4608      	mov	r0, r1
 8008edc:	4611      	mov	r1, r2
 8008ede:	2200      	movs	r2, #0
 8008ee0:	602a      	str	r2, [r5, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f7f8 ff4e 	bl	8001d84 <_read>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_read_r+0x1e>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_read_r+0x1e>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	200005ac 	.word	0x200005ac

08008ef8 <_write_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	; (8008f18 <_write_r+0x20>)
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f7f8 ff59 	bl	8001dbe <_write>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_write_r+0x1e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_write_r+0x1e>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	200005ac 	.word	0x200005ac

08008f1c <__errno>:
 8008f1c:	4b01      	ldr	r3, [pc, #4]	; (8008f24 <__errno+0x8>)
 8008f1e:	6818      	ldr	r0, [r3, #0]
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000064 	.word	0x20000064

08008f28 <__libc_init_array>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	4d0d      	ldr	r5, [pc, #52]	; (8008f60 <__libc_init_array+0x38>)
 8008f2c:	4c0d      	ldr	r4, [pc, #52]	; (8008f64 <__libc_init_array+0x3c>)
 8008f2e:	1b64      	subs	r4, r4, r5
 8008f30:	10a4      	asrs	r4, r4, #2
 8008f32:	2600      	movs	r6, #0
 8008f34:	42a6      	cmp	r6, r4
 8008f36:	d109      	bne.n	8008f4c <__libc_init_array+0x24>
 8008f38:	4d0b      	ldr	r5, [pc, #44]	; (8008f68 <__libc_init_array+0x40>)
 8008f3a:	4c0c      	ldr	r4, [pc, #48]	; (8008f6c <__libc_init_array+0x44>)
 8008f3c:	f003 fbd8 	bl	800c6f0 <_init>
 8008f40:	1b64      	subs	r4, r4, r5
 8008f42:	10a4      	asrs	r4, r4, #2
 8008f44:	2600      	movs	r6, #0
 8008f46:	42a6      	cmp	r6, r4
 8008f48:	d105      	bne.n	8008f56 <__libc_init_array+0x2e>
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f50:	4798      	blx	r3
 8008f52:	3601      	adds	r6, #1
 8008f54:	e7ee      	b.n	8008f34 <__libc_init_array+0xc>
 8008f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5a:	4798      	blx	r3
 8008f5c:	3601      	adds	r6, #1
 8008f5e:	e7f2      	b.n	8008f46 <__libc_init_array+0x1e>
 8008f60:	0800cce8 	.word	0x0800cce8
 8008f64:	0800cce8 	.word	0x0800cce8
 8008f68:	0800cce8 	.word	0x0800cce8
 8008f6c:	0800ccec 	.word	0x0800ccec

08008f70 <__retarget_lock_init_recursive>:
 8008f70:	4770      	bx	lr

08008f72 <__retarget_lock_acquire_recursive>:
 8008f72:	4770      	bx	lr

08008f74 <__retarget_lock_release_recursive>:
 8008f74:	4770      	bx	lr
	...

08008f78 <nanf>:
 8008f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f80 <nanf+0x8>
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	7fc00000 	.word	0x7fc00000

08008f84 <quorem>:
 8008f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	6903      	ldr	r3, [r0, #16]
 8008f8a:	690c      	ldr	r4, [r1, #16]
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	4607      	mov	r7, r0
 8008f90:	db7e      	blt.n	8009090 <quorem+0x10c>
 8008f92:	3c01      	subs	r4, #1
 8008f94:	f101 0814 	add.w	r8, r1, #20
 8008f98:	f100 0514 	add.w	r5, r0, #20
 8008f9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008faa:	3301      	adds	r3, #1
 8008fac:	429a      	cmp	r2, r3
 8008fae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fba:	d331      	bcc.n	8009020 <quorem+0x9c>
 8008fbc:	f04f 0e00 	mov.w	lr, #0
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	46ac      	mov	ip, r5
 8008fc4:	46f2      	mov	sl, lr
 8008fc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fca:	b293      	uxth	r3, r2
 8008fcc:	fb06 e303 	mla	r3, r6, r3, lr
 8008fd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fd4:	0c1a      	lsrs	r2, r3, #16
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8008fdc:	f8dc a000 	ldr.w	sl, [ip]
 8008fe0:	fa13 f38a 	uxtah	r3, r3, sl
 8008fe4:	fb06 220e 	mla	r2, r6, lr, r2
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	9b00      	ldr	r3, [sp, #0]
 8008fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ff0:	b292      	uxth	r2, r2
 8008ff2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ffa:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ffe:	4581      	cmp	r9, r0
 8009000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009004:	f84c 3b04 	str.w	r3, [ip], #4
 8009008:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800900c:	d2db      	bcs.n	8008fc6 <quorem+0x42>
 800900e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009012:	b92b      	cbnz	r3, 8009020 <quorem+0x9c>
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	3b04      	subs	r3, #4
 8009018:	429d      	cmp	r5, r3
 800901a:	461a      	mov	r2, r3
 800901c:	d32c      	bcc.n	8009078 <quorem+0xf4>
 800901e:	613c      	str	r4, [r7, #16]
 8009020:	4638      	mov	r0, r7
 8009022:	f001 f9f1 	bl	800a408 <__mcmp>
 8009026:	2800      	cmp	r0, #0
 8009028:	db22      	blt.n	8009070 <quorem+0xec>
 800902a:	3601      	adds	r6, #1
 800902c:	4629      	mov	r1, r5
 800902e:	2000      	movs	r0, #0
 8009030:	f858 2b04 	ldr.w	r2, [r8], #4
 8009034:	f8d1 c000 	ldr.w	ip, [r1]
 8009038:	b293      	uxth	r3, r2
 800903a:	1ac3      	subs	r3, r0, r3
 800903c:	0c12      	lsrs	r2, r2, #16
 800903e:	fa13 f38c 	uxtah	r3, r3, ip
 8009042:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800904a:	b29b      	uxth	r3, r3
 800904c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009050:	45c1      	cmp	r9, r8
 8009052:	f841 3b04 	str.w	r3, [r1], #4
 8009056:	ea4f 4022 	mov.w	r0, r2, asr #16
 800905a:	d2e9      	bcs.n	8009030 <quorem+0xac>
 800905c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009064:	b922      	cbnz	r2, 8009070 <quorem+0xec>
 8009066:	3b04      	subs	r3, #4
 8009068:	429d      	cmp	r5, r3
 800906a:	461a      	mov	r2, r3
 800906c:	d30a      	bcc.n	8009084 <quorem+0x100>
 800906e:	613c      	str	r4, [r7, #16]
 8009070:	4630      	mov	r0, r6
 8009072:	b003      	add	sp, #12
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	6812      	ldr	r2, [r2, #0]
 800907a:	3b04      	subs	r3, #4
 800907c:	2a00      	cmp	r2, #0
 800907e:	d1ce      	bne.n	800901e <quorem+0x9a>
 8009080:	3c01      	subs	r4, #1
 8009082:	e7c9      	b.n	8009018 <quorem+0x94>
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	3b04      	subs	r3, #4
 8009088:	2a00      	cmp	r2, #0
 800908a:	d1f0      	bne.n	800906e <quorem+0xea>
 800908c:	3c01      	subs	r4, #1
 800908e:	e7eb      	b.n	8009068 <quorem+0xe4>
 8009090:	2000      	movs	r0, #0
 8009092:	e7ee      	b.n	8009072 <quorem+0xee>
 8009094:	0000      	movs	r0, r0
	...

08009098 <_dtoa_r>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	ed2d 8b04 	vpush	{d8-d9}
 80090a0:	69c5      	ldr	r5, [r0, #28]
 80090a2:	b093      	sub	sp, #76	; 0x4c
 80090a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090a8:	ec57 6b10 	vmov	r6, r7, d0
 80090ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090b0:	9107      	str	r1, [sp, #28]
 80090b2:	4604      	mov	r4, r0
 80090b4:	920a      	str	r2, [sp, #40]	; 0x28
 80090b6:	930d      	str	r3, [sp, #52]	; 0x34
 80090b8:	b975      	cbnz	r5, 80090d8 <_dtoa_r+0x40>
 80090ba:	2010      	movs	r0, #16
 80090bc:	f000 fe2a 	bl	8009d14 <malloc>
 80090c0:	4602      	mov	r2, r0
 80090c2:	61e0      	str	r0, [r4, #28]
 80090c4:	b920      	cbnz	r0, 80090d0 <_dtoa_r+0x38>
 80090c6:	4bae      	ldr	r3, [pc, #696]	; (8009380 <_dtoa_r+0x2e8>)
 80090c8:	21ef      	movs	r1, #239	; 0xef
 80090ca:	48ae      	ldr	r0, [pc, #696]	; (8009384 <_dtoa_r+0x2ec>)
 80090cc:	f002 fc74 	bl	800b9b8 <__assert_func>
 80090d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090d4:	6005      	str	r5, [r0, #0]
 80090d6:	60c5      	str	r5, [r0, #12]
 80090d8:	69e3      	ldr	r3, [r4, #28]
 80090da:	6819      	ldr	r1, [r3, #0]
 80090dc:	b151      	cbz	r1, 80090f4 <_dtoa_r+0x5c>
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	604a      	str	r2, [r1, #4]
 80090e2:	2301      	movs	r3, #1
 80090e4:	4093      	lsls	r3, r2
 80090e6:	608b      	str	r3, [r1, #8]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 ff07 	bl	8009efc <_Bfree>
 80090ee:	69e3      	ldr	r3, [r4, #28]
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	1e3b      	subs	r3, r7, #0
 80090f6:	bfbb      	ittet	lt
 80090f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090fc:	9303      	strlt	r3, [sp, #12]
 80090fe:	2300      	movge	r3, #0
 8009100:	2201      	movlt	r2, #1
 8009102:	bfac      	ite	ge
 8009104:	f8c8 3000 	strge.w	r3, [r8]
 8009108:	f8c8 2000 	strlt.w	r2, [r8]
 800910c:	4b9e      	ldr	r3, [pc, #632]	; (8009388 <_dtoa_r+0x2f0>)
 800910e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009112:	ea33 0308 	bics.w	r3, r3, r8
 8009116:	d11b      	bne.n	8009150 <_dtoa_r+0xb8>
 8009118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800911a:	f242 730f 	movw	r3, #9999	; 0x270f
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009124:	4333      	orrs	r3, r6
 8009126:	f000 8593 	beq.w	8009c50 <_dtoa_r+0xbb8>
 800912a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800912c:	b963      	cbnz	r3, 8009148 <_dtoa_r+0xb0>
 800912e:	4b97      	ldr	r3, [pc, #604]	; (800938c <_dtoa_r+0x2f4>)
 8009130:	e027      	b.n	8009182 <_dtoa_r+0xea>
 8009132:	4b97      	ldr	r3, [pc, #604]	; (8009390 <_dtoa_r+0x2f8>)
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	9800      	ldr	r0, [sp, #0]
 800913e:	b013      	add	sp, #76	; 0x4c
 8009140:	ecbd 8b04 	vpop	{d8-d9}
 8009144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009148:	4b90      	ldr	r3, [pc, #576]	; (800938c <_dtoa_r+0x2f4>)
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	3303      	adds	r3, #3
 800914e:	e7f3      	b.n	8009138 <_dtoa_r+0xa0>
 8009150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	ec51 0b17 	vmov	r0, r1, d7
 800915a:	eeb0 8a47 	vmov.f32	s16, s14
 800915e:	eef0 8a67 	vmov.f32	s17, s15
 8009162:	2300      	movs	r3, #0
 8009164:	f7f7 fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009168:	4681      	mov	r9, r0
 800916a:	b160      	cbz	r0, 8009186 <_dtoa_r+0xee>
 800916c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800916e:	2301      	movs	r3, #1
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8568 	beq.w	8009c4a <_dtoa_r+0xbb2>
 800917a:	4b86      	ldr	r3, [pc, #536]	; (8009394 <_dtoa_r+0x2fc>)
 800917c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	e7da      	b.n	800913c <_dtoa_r+0xa4>
 8009186:	aa10      	add	r2, sp, #64	; 0x40
 8009188:	a911      	add	r1, sp, #68	; 0x44
 800918a:	4620      	mov	r0, r4
 800918c:	eeb0 0a48 	vmov.f32	s0, s16
 8009190:	eef0 0a68 	vmov.f32	s1, s17
 8009194:	f001 fa4e 	bl	800a634 <__d2b>
 8009198:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800919c:	4682      	mov	sl, r0
 800919e:	2d00      	cmp	r5, #0
 80091a0:	d07f      	beq.n	80092a2 <_dtoa_r+0x20a>
 80091a2:	ee18 3a90 	vmov	r3, s17
 80091a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091ae:	ec51 0b18 	vmov	r0, r1, d8
 80091b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80091be:	4619      	mov	r1, r3
 80091c0:	2200      	movs	r2, #0
 80091c2:	4b75      	ldr	r3, [pc, #468]	; (8009398 <_dtoa_r+0x300>)
 80091c4:	f7f7 f860 	bl	8000288 <__aeabi_dsub>
 80091c8:	a367      	add	r3, pc, #412	; (adr r3, 8009368 <_dtoa_r+0x2d0>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fa13 	bl	80005f8 <__aeabi_dmul>
 80091d2:	a367      	add	r3, pc, #412	; (adr r3, 8009370 <_dtoa_r+0x2d8>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 f858 	bl	800028c <__adddf3>
 80091dc:	4606      	mov	r6, r0
 80091de:	4628      	mov	r0, r5
 80091e0:	460f      	mov	r7, r1
 80091e2:	f7f7 f99f 	bl	8000524 <__aeabi_i2d>
 80091e6:	a364      	add	r3, pc, #400	; (adr r3, 8009378 <_dtoa_r+0x2e0>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f7f7 fa04 	bl	80005f8 <__aeabi_dmul>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 f848 	bl	800028c <__adddf3>
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	f7f7 fcaa 	bl	8000b58 <__aeabi_d2iz>
 8009204:	2200      	movs	r2, #0
 8009206:	4683      	mov	fp, r0
 8009208:	2300      	movs	r3, #0
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 fc65 	bl	8000adc <__aeabi_dcmplt>
 8009212:	b148      	cbz	r0, 8009228 <_dtoa_r+0x190>
 8009214:	4658      	mov	r0, fp
 8009216:	f7f7 f985 	bl	8000524 <__aeabi_i2d>
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	f7f7 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009222:	b908      	cbnz	r0, 8009228 <_dtoa_r+0x190>
 8009224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009228:	f1bb 0f16 	cmp.w	fp, #22
 800922c:	d857      	bhi.n	80092de <_dtoa_r+0x246>
 800922e:	4b5b      	ldr	r3, [pc, #364]	; (800939c <_dtoa_r+0x304>)
 8009230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	ec51 0b18 	vmov	r0, r1, d8
 800923c:	f7f7 fc4e 	bl	8000adc <__aeabi_dcmplt>
 8009240:	2800      	cmp	r0, #0
 8009242:	d04e      	beq.n	80092e2 <_dtoa_r+0x24a>
 8009244:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009248:	2300      	movs	r3, #0
 800924a:	930c      	str	r3, [sp, #48]	; 0x30
 800924c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800924e:	1b5b      	subs	r3, r3, r5
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	bf45      	ittet	mi
 8009254:	f1c3 0301 	rsbmi	r3, r3, #1
 8009258:	9305      	strmi	r3, [sp, #20]
 800925a:	2300      	movpl	r3, #0
 800925c:	2300      	movmi	r3, #0
 800925e:	9206      	str	r2, [sp, #24]
 8009260:	bf54      	ite	pl
 8009262:	9305      	strpl	r3, [sp, #20]
 8009264:	9306      	strmi	r3, [sp, #24]
 8009266:	f1bb 0f00 	cmp.w	fp, #0
 800926a:	db3c      	blt.n	80092e6 <_dtoa_r+0x24e>
 800926c:	9b06      	ldr	r3, [sp, #24]
 800926e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009272:	445b      	add	r3, fp
 8009274:	9306      	str	r3, [sp, #24]
 8009276:	2300      	movs	r3, #0
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	2b09      	cmp	r3, #9
 800927e:	d868      	bhi.n	8009352 <_dtoa_r+0x2ba>
 8009280:	2b05      	cmp	r3, #5
 8009282:	bfc4      	itt	gt
 8009284:	3b04      	subgt	r3, #4
 8009286:	9307      	strgt	r3, [sp, #28]
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	f1a3 0302 	sub.w	r3, r3, #2
 800928e:	bfcc      	ite	gt
 8009290:	2500      	movgt	r5, #0
 8009292:	2501      	movle	r5, #1
 8009294:	2b03      	cmp	r3, #3
 8009296:	f200 8085 	bhi.w	80093a4 <_dtoa_r+0x30c>
 800929a:	e8df f003 	tbb	[pc, r3]
 800929e:	3b2e      	.short	0x3b2e
 80092a0:	5839      	.short	0x5839
 80092a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092a6:	441d      	add	r5, r3
 80092a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	bfc1      	itttt	gt
 80092b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80092b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80092bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80092c0:	bfd6      	itet	le
 80092c2:	f1c3 0320 	rsble	r3, r3, #32
 80092c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80092ca:	fa06 f003 	lslle.w	r0, r6, r3
 80092ce:	f7f7 f919 	bl	8000504 <__aeabi_ui2d>
 80092d2:	2201      	movs	r2, #1
 80092d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80092d8:	3d01      	subs	r5, #1
 80092da:	920e      	str	r2, [sp, #56]	; 0x38
 80092dc:	e76f      	b.n	80091be <_dtoa_r+0x126>
 80092de:	2301      	movs	r3, #1
 80092e0:	e7b3      	b.n	800924a <_dtoa_r+0x1b2>
 80092e2:	900c      	str	r0, [sp, #48]	; 0x30
 80092e4:	e7b2      	b.n	800924c <_dtoa_r+0x1b4>
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	eba3 030b 	sub.w	r3, r3, fp
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	f1cb 0300 	rsb	r3, fp, #0
 80092f2:	9308      	str	r3, [sp, #32]
 80092f4:	2300      	movs	r3, #0
 80092f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f8:	e7bf      	b.n	800927a <_dtoa_r+0x1e2>
 80092fa:	2300      	movs	r3, #0
 80092fc:	9309      	str	r3, [sp, #36]	; 0x24
 80092fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009300:	2b00      	cmp	r3, #0
 8009302:	dc52      	bgt.n	80093aa <_dtoa_r+0x312>
 8009304:	2301      	movs	r3, #1
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	461a      	mov	r2, r3
 800930c:	920a      	str	r2, [sp, #40]	; 0x28
 800930e:	e00b      	b.n	8009328 <_dtoa_r+0x290>
 8009310:	2301      	movs	r3, #1
 8009312:	e7f3      	b.n	80092fc <_dtoa_r+0x264>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	; 0x24
 8009318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931a:	445b      	add	r3, fp
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	3301      	adds	r3, #1
 8009320:	2b01      	cmp	r3, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	bfb8      	it	lt
 8009326:	2301      	movlt	r3, #1
 8009328:	69e0      	ldr	r0, [r4, #28]
 800932a:	2100      	movs	r1, #0
 800932c:	2204      	movs	r2, #4
 800932e:	f102 0614 	add.w	r6, r2, #20
 8009332:	429e      	cmp	r6, r3
 8009334:	d93d      	bls.n	80093b2 <_dtoa_r+0x31a>
 8009336:	6041      	str	r1, [r0, #4]
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fd9f 	bl	8009e7c <_Balloc>
 800933e:	9000      	str	r0, [sp, #0]
 8009340:	2800      	cmp	r0, #0
 8009342:	d139      	bne.n	80093b8 <_dtoa_r+0x320>
 8009344:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <_dtoa_r+0x308>)
 8009346:	4602      	mov	r2, r0
 8009348:	f240 11af 	movw	r1, #431	; 0x1af
 800934c:	e6bd      	b.n	80090ca <_dtoa_r+0x32>
 800934e:	2301      	movs	r3, #1
 8009350:	e7e1      	b.n	8009316 <_dtoa_r+0x27e>
 8009352:	2501      	movs	r5, #1
 8009354:	2300      	movs	r3, #0
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	9509      	str	r5, [sp, #36]	; 0x24
 800935a:	f04f 33ff 	mov.w	r3, #4294967295
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	2200      	movs	r2, #0
 8009364:	2312      	movs	r3, #18
 8009366:	e7d1      	b.n	800930c <_dtoa_r+0x274>
 8009368:	636f4361 	.word	0x636f4361
 800936c:	3fd287a7 	.word	0x3fd287a7
 8009370:	8b60c8b3 	.word	0x8b60c8b3
 8009374:	3fc68a28 	.word	0x3fc68a28
 8009378:	509f79fb 	.word	0x509f79fb
 800937c:	3fd34413 	.word	0x3fd34413
 8009380:	0800c8fa 	.word	0x0800c8fa
 8009384:	0800c911 	.word	0x0800c911
 8009388:	7ff00000 	.word	0x7ff00000
 800938c:	0800c8f6 	.word	0x0800c8f6
 8009390:	0800c8ed 	.word	0x0800c8ed
 8009394:	0800c8c5 	.word	0x0800c8c5
 8009398:	3ff80000 	.word	0x3ff80000
 800939c:	0800ca00 	.word	0x0800ca00
 80093a0:	0800c969 	.word	0x0800c969
 80093a4:	2301      	movs	r3, #1
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	e7d7      	b.n	800935a <_dtoa_r+0x2c2>
 80093aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	e7ba      	b.n	8009328 <_dtoa_r+0x290>
 80093b2:	3101      	adds	r1, #1
 80093b4:	0052      	lsls	r2, r2, #1
 80093b6:	e7ba      	b.n	800932e <_dtoa_r+0x296>
 80093b8:	69e3      	ldr	r3, [r4, #28]
 80093ba:	9a00      	ldr	r2, [sp, #0]
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	2b0e      	cmp	r3, #14
 80093c2:	f200 80a8 	bhi.w	8009516 <_dtoa_r+0x47e>
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	f000 80a5 	beq.w	8009516 <_dtoa_r+0x47e>
 80093cc:	f1bb 0f00 	cmp.w	fp, #0
 80093d0:	dd38      	ble.n	8009444 <_dtoa_r+0x3ac>
 80093d2:	4bc0      	ldr	r3, [pc, #768]	; (80096d4 <_dtoa_r+0x63c>)
 80093d4:	f00b 020f 	and.w	r2, fp, #15
 80093d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80093e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80093e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80093e8:	d019      	beq.n	800941e <_dtoa_r+0x386>
 80093ea:	4bbb      	ldr	r3, [pc, #748]	; (80096d8 <_dtoa_r+0x640>)
 80093ec:	ec51 0b18 	vmov	r0, r1, d8
 80093f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093f4:	f7f7 fa2a 	bl	800084c <__aeabi_ddiv>
 80093f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093fc:	f008 080f 	and.w	r8, r8, #15
 8009400:	2503      	movs	r5, #3
 8009402:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80096d8 <_dtoa_r+0x640>
 8009406:	f1b8 0f00 	cmp.w	r8, #0
 800940a:	d10a      	bne.n	8009422 <_dtoa_r+0x38a>
 800940c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009410:	4632      	mov	r2, r6
 8009412:	463b      	mov	r3, r7
 8009414:	f7f7 fa1a 	bl	800084c <__aeabi_ddiv>
 8009418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800941c:	e02b      	b.n	8009476 <_dtoa_r+0x3de>
 800941e:	2502      	movs	r5, #2
 8009420:	e7ef      	b.n	8009402 <_dtoa_r+0x36a>
 8009422:	f018 0f01 	tst.w	r8, #1
 8009426:	d008      	beq.n	800943a <_dtoa_r+0x3a2>
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009430:	f7f7 f8e2 	bl	80005f8 <__aeabi_dmul>
 8009434:	3501      	adds	r5, #1
 8009436:	4606      	mov	r6, r0
 8009438:	460f      	mov	r7, r1
 800943a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800943e:	f109 0908 	add.w	r9, r9, #8
 8009442:	e7e0      	b.n	8009406 <_dtoa_r+0x36e>
 8009444:	f000 809f 	beq.w	8009586 <_dtoa_r+0x4ee>
 8009448:	f1cb 0600 	rsb	r6, fp, #0
 800944c:	4ba1      	ldr	r3, [pc, #644]	; (80096d4 <_dtoa_r+0x63c>)
 800944e:	4fa2      	ldr	r7, [pc, #648]	; (80096d8 <_dtoa_r+0x640>)
 8009450:	f006 020f 	and.w	r2, r6, #15
 8009454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	ec51 0b18 	vmov	r0, r1, d8
 8009460:	f7f7 f8ca 	bl	80005f8 <__aeabi_dmul>
 8009464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009468:	1136      	asrs	r6, r6, #4
 800946a:	2300      	movs	r3, #0
 800946c:	2502      	movs	r5, #2
 800946e:	2e00      	cmp	r6, #0
 8009470:	d17e      	bne.n	8009570 <_dtoa_r+0x4d8>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1d0      	bne.n	8009418 <_dtoa_r+0x380>
 8009476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009478:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8084 	beq.w	800958a <_dtoa_r+0x4f2>
 8009482:	4b96      	ldr	r3, [pc, #600]	; (80096dc <_dtoa_r+0x644>)
 8009484:	2200      	movs	r2, #0
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 fb27 	bl	8000adc <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d07b      	beq.n	800958a <_dtoa_r+0x4f2>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d078      	beq.n	800958a <_dtoa_r+0x4f2>
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	dd39      	ble.n	8009512 <_dtoa_r+0x47a>
 800949e:	4b90      	ldr	r3, [pc, #576]	; (80096e0 <_dtoa_r+0x648>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 f8a7 	bl	80005f8 <__aeabi_dmul>
 80094aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ae:	9e01      	ldr	r6, [sp, #4]
 80094b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80094b4:	3501      	adds	r5, #1
 80094b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7f7 f832 	bl	8000524 <__aeabi_i2d>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f7 f898 	bl	80005f8 <__aeabi_dmul>
 80094c8:	4b86      	ldr	r3, [pc, #536]	; (80096e4 <_dtoa_r+0x64c>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7f6 fede 	bl	800028c <__adddf3>
 80094d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80094d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d158      	bne.n	8009590 <_dtoa_r+0x4f8>
 80094de:	4b82      	ldr	r3, [pc, #520]	; (80096e8 <_dtoa_r+0x650>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f6 fecf 	bl	8000288 <__aeabi_dsub>
 80094ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ee:	4680      	mov	r8, r0
 80094f0:	4689      	mov	r9, r1
 80094f2:	f7f7 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f040 8296 	bne.w	8009a28 <_dtoa_r+0x990>
 80094fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009500:	4640      	mov	r0, r8
 8009502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009506:	4649      	mov	r1, r9
 8009508:	f7f7 fae8 	bl	8000adc <__aeabi_dcmplt>
 800950c:	2800      	cmp	r0, #0
 800950e:	f040 8289 	bne.w	8009a24 <_dtoa_r+0x98c>
 8009512:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009518:	2b00      	cmp	r3, #0
 800951a:	f2c0 814e 	blt.w	80097ba <_dtoa_r+0x722>
 800951e:	f1bb 0f0e 	cmp.w	fp, #14
 8009522:	f300 814a 	bgt.w	80097ba <_dtoa_r+0x722>
 8009526:	4b6b      	ldr	r3, [pc, #428]	; (80096d4 <_dtoa_r+0x63c>)
 8009528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800952c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	f280 80dc 	bge.w	80096f0 <_dtoa_r+0x658>
 8009538:	9b04      	ldr	r3, [sp, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f300 80d8 	bgt.w	80096f0 <_dtoa_r+0x658>
 8009540:	f040 826f 	bne.w	8009a22 <_dtoa_r+0x98a>
 8009544:	4b68      	ldr	r3, [pc, #416]	; (80096e8 <_dtoa_r+0x650>)
 8009546:	2200      	movs	r2, #0
 8009548:	4640      	mov	r0, r8
 800954a:	4649      	mov	r1, r9
 800954c:	f7f7 f854 	bl	80005f8 <__aeabi_dmul>
 8009550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009554:	f7f7 fad6 	bl	8000b04 <__aeabi_dcmpge>
 8009558:	9e04      	ldr	r6, [sp, #16]
 800955a:	4637      	mov	r7, r6
 800955c:	2800      	cmp	r0, #0
 800955e:	f040 8245 	bne.w	80099ec <_dtoa_r+0x954>
 8009562:	9d00      	ldr	r5, [sp, #0]
 8009564:	2331      	movs	r3, #49	; 0x31
 8009566:	f805 3b01 	strb.w	r3, [r5], #1
 800956a:	f10b 0b01 	add.w	fp, fp, #1
 800956e:	e241      	b.n	80099f4 <_dtoa_r+0x95c>
 8009570:	07f2      	lsls	r2, r6, #31
 8009572:	d505      	bpl.n	8009580 <_dtoa_r+0x4e8>
 8009574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	3501      	adds	r5, #1
 800957e:	2301      	movs	r3, #1
 8009580:	1076      	asrs	r6, r6, #1
 8009582:	3708      	adds	r7, #8
 8009584:	e773      	b.n	800946e <_dtoa_r+0x3d6>
 8009586:	2502      	movs	r5, #2
 8009588:	e775      	b.n	8009476 <_dtoa_r+0x3de>
 800958a:	9e04      	ldr	r6, [sp, #16]
 800958c:	465f      	mov	r7, fp
 800958e:	e792      	b.n	80094b6 <_dtoa_r+0x41e>
 8009590:	9900      	ldr	r1, [sp, #0]
 8009592:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <_dtoa_r+0x63c>)
 8009594:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009598:	4431      	add	r1, r6
 800959a:	9102      	str	r1, [sp, #8]
 800959c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800959e:	eeb0 9a47 	vmov.f32	s18, s14
 80095a2:	eef0 9a67 	vmov.f32	s19, s15
 80095a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095ae:	2900      	cmp	r1, #0
 80095b0:	d044      	beq.n	800963c <_dtoa_r+0x5a4>
 80095b2:	494e      	ldr	r1, [pc, #312]	; (80096ec <_dtoa_r+0x654>)
 80095b4:	2000      	movs	r0, #0
 80095b6:	f7f7 f949 	bl	800084c <__aeabi_ddiv>
 80095ba:	ec53 2b19 	vmov	r2, r3, d9
 80095be:	f7f6 fe63 	bl	8000288 <__aeabi_dsub>
 80095c2:	9d00      	ldr	r5, [sp, #0]
 80095c4:	ec41 0b19 	vmov	d9, r0, r1
 80095c8:	4649      	mov	r1, r9
 80095ca:	4640      	mov	r0, r8
 80095cc:	f7f7 fac4 	bl	8000b58 <__aeabi_d2iz>
 80095d0:	4606      	mov	r6, r0
 80095d2:	f7f6 ffa7 	bl	8000524 <__aeabi_i2d>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4640      	mov	r0, r8
 80095dc:	4649      	mov	r1, r9
 80095de:	f7f6 fe53 	bl	8000288 <__aeabi_dsub>
 80095e2:	3630      	adds	r6, #48	; 0x30
 80095e4:	f805 6b01 	strb.w	r6, [r5], #1
 80095e8:	ec53 2b19 	vmov	r2, r3, d9
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	f7f7 fa74 	bl	8000adc <__aeabi_dcmplt>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d164      	bne.n	80096c2 <_dtoa_r+0x62a>
 80095f8:	4642      	mov	r2, r8
 80095fa:	464b      	mov	r3, r9
 80095fc:	4937      	ldr	r1, [pc, #220]	; (80096dc <_dtoa_r+0x644>)
 80095fe:	2000      	movs	r0, #0
 8009600:	f7f6 fe42 	bl	8000288 <__aeabi_dsub>
 8009604:	ec53 2b19 	vmov	r2, r3, d9
 8009608:	f7f7 fa68 	bl	8000adc <__aeabi_dcmplt>
 800960c:	2800      	cmp	r0, #0
 800960e:	f040 80b6 	bne.w	800977e <_dtoa_r+0x6e6>
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	429d      	cmp	r5, r3
 8009616:	f43f af7c 	beq.w	8009512 <_dtoa_r+0x47a>
 800961a:	4b31      	ldr	r3, [pc, #196]	; (80096e0 <_dtoa_r+0x648>)
 800961c:	ec51 0b19 	vmov	r0, r1, d9
 8009620:	2200      	movs	r2, #0
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	4b2e      	ldr	r3, [pc, #184]	; (80096e0 <_dtoa_r+0x648>)
 8009628:	ec41 0b19 	vmov	d9, r0, r1
 800962c:	2200      	movs	r2, #0
 800962e:	4640      	mov	r0, r8
 8009630:	4649      	mov	r1, r9
 8009632:	f7f6 ffe1 	bl	80005f8 <__aeabi_dmul>
 8009636:	4680      	mov	r8, r0
 8009638:	4689      	mov	r9, r1
 800963a:	e7c5      	b.n	80095c8 <_dtoa_r+0x530>
 800963c:	ec51 0b17 	vmov	r0, r1, d7
 8009640:	f7f6 ffda 	bl	80005f8 <__aeabi_dmul>
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	9d00      	ldr	r5, [sp, #0]
 8009648:	930f      	str	r3, [sp, #60]	; 0x3c
 800964a:	ec41 0b19 	vmov	d9, r0, r1
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	f7f7 fa81 	bl	8000b58 <__aeabi_d2iz>
 8009656:	4606      	mov	r6, r0
 8009658:	f7f6 ff64 	bl	8000524 <__aeabi_i2d>
 800965c:	3630      	adds	r6, #48	; 0x30
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	f7f6 fe0f 	bl	8000288 <__aeabi_dsub>
 800966a:	f805 6b01 	strb.w	r6, [r5], #1
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	429d      	cmp	r5, r3
 8009672:	4680      	mov	r8, r0
 8009674:	4689      	mov	r9, r1
 8009676:	f04f 0200 	mov.w	r2, #0
 800967a:	d124      	bne.n	80096c6 <_dtoa_r+0x62e>
 800967c:	4b1b      	ldr	r3, [pc, #108]	; (80096ec <_dtoa_r+0x654>)
 800967e:	ec51 0b19 	vmov	r0, r1, d9
 8009682:	f7f6 fe03 	bl	800028c <__adddf3>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f7 fa43 	bl	8000b18 <__aeabi_dcmpgt>
 8009692:	2800      	cmp	r0, #0
 8009694:	d173      	bne.n	800977e <_dtoa_r+0x6e6>
 8009696:	ec53 2b19 	vmov	r2, r3, d9
 800969a:	4914      	ldr	r1, [pc, #80]	; (80096ec <_dtoa_r+0x654>)
 800969c:	2000      	movs	r0, #0
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f7 fa17 	bl	8000adc <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f43f af2f 	beq.w	8009512 <_dtoa_r+0x47a>
 80096b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096b6:	1e6b      	subs	r3, r5, #1
 80096b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096be:	2b30      	cmp	r3, #48	; 0x30
 80096c0:	d0f8      	beq.n	80096b4 <_dtoa_r+0x61c>
 80096c2:	46bb      	mov	fp, r7
 80096c4:	e04a      	b.n	800975c <_dtoa_r+0x6c4>
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <_dtoa_r+0x648>)
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	4680      	mov	r8, r0
 80096ce:	4689      	mov	r9, r1
 80096d0:	e7bd      	b.n	800964e <_dtoa_r+0x5b6>
 80096d2:	bf00      	nop
 80096d4:	0800ca00 	.word	0x0800ca00
 80096d8:	0800c9d8 	.word	0x0800c9d8
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	40240000 	.word	0x40240000
 80096e4:	401c0000 	.word	0x401c0000
 80096e8:	40140000 	.word	0x40140000
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096f4:	9d00      	ldr	r5, [sp, #0]
 80096f6:	4642      	mov	r2, r8
 80096f8:	464b      	mov	r3, r9
 80096fa:	4630      	mov	r0, r6
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f7 f8a5 	bl	800084c <__aeabi_ddiv>
 8009702:	f7f7 fa29 	bl	8000b58 <__aeabi_d2iz>
 8009706:	9001      	str	r0, [sp, #4]
 8009708:	f7f6 ff0c 	bl	8000524 <__aeabi_i2d>
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	f7f6 ff72 	bl	80005f8 <__aeabi_dmul>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	f7f6 fdb4 	bl	8000288 <__aeabi_dsub>
 8009720:	9e01      	ldr	r6, [sp, #4]
 8009722:	9f04      	ldr	r7, [sp, #16]
 8009724:	3630      	adds	r6, #48	; 0x30
 8009726:	f805 6b01 	strb.w	r6, [r5], #1
 800972a:	9e00      	ldr	r6, [sp, #0]
 800972c:	1bae      	subs	r6, r5, r6
 800972e:	42b7      	cmp	r7, r6
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	d134      	bne.n	80097a0 <_dtoa_r+0x708>
 8009736:	f7f6 fda9 	bl	800028c <__adddf3>
 800973a:	4642      	mov	r2, r8
 800973c:	464b      	mov	r3, r9
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	f7f7 f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 8009746:	b9c8      	cbnz	r0, 800977c <_dtoa_r+0x6e4>
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f7f7 f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009754:	b110      	cbz	r0, 800975c <_dtoa_r+0x6c4>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	07db      	lsls	r3, r3, #31
 800975a:	d40f      	bmi.n	800977c <_dtoa_r+0x6e4>
 800975c:	4651      	mov	r1, sl
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fbcc 	bl	8009efc <_Bfree>
 8009764:	2300      	movs	r3, #0
 8009766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009768:	702b      	strb	r3, [r5, #0]
 800976a:	f10b 0301 	add.w	r3, fp, #1
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009772:	2b00      	cmp	r3, #0
 8009774:	f43f ace2 	beq.w	800913c <_dtoa_r+0xa4>
 8009778:	601d      	str	r5, [r3, #0]
 800977a:	e4df      	b.n	800913c <_dtoa_r+0xa4>
 800977c:	465f      	mov	r7, fp
 800977e:	462b      	mov	r3, r5
 8009780:	461d      	mov	r5, r3
 8009782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009786:	2a39      	cmp	r2, #57	; 0x39
 8009788:	d106      	bne.n	8009798 <_dtoa_r+0x700>
 800978a:	9a00      	ldr	r2, [sp, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d1f7      	bne.n	8009780 <_dtoa_r+0x6e8>
 8009790:	9900      	ldr	r1, [sp, #0]
 8009792:	2230      	movs	r2, #48	; 0x30
 8009794:	3701      	adds	r7, #1
 8009796:	700a      	strb	r2, [r1, #0]
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	3201      	adds	r2, #1
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e790      	b.n	80096c2 <_dtoa_r+0x62a>
 80097a0:	4ba3      	ldr	r3, [pc, #652]	; (8009a30 <_dtoa_r+0x998>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	f7f7 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d09e      	beq.n	80096f6 <_dtoa_r+0x65e>
 80097b8:	e7d0      	b.n	800975c <_dtoa_r+0x6c4>
 80097ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097bc:	2a00      	cmp	r2, #0
 80097be:	f000 80ca 	beq.w	8009956 <_dtoa_r+0x8be>
 80097c2:	9a07      	ldr	r2, [sp, #28]
 80097c4:	2a01      	cmp	r2, #1
 80097c6:	f300 80ad 	bgt.w	8009924 <_dtoa_r+0x88c>
 80097ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	f000 80a5 	beq.w	800991c <_dtoa_r+0x884>
 80097d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097d6:	9e08      	ldr	r6, [sp, #32]
 80097d8:	9d05      	ldr	r5, [sp, #20]
 80097da:	9a05      	ldr	r2, [sp, #20]
 80097dc:	441a      	add	r2, r3
 80097de:	9205      	str	r2, [sp, #20]
 80097e0:	9a06      	ldr	r2, [sp, #24]
 80097e2:	2101      	movs	r1, #1
 80097e4:	441a      	add	r2, r3
 80097e6:	4620      	mov	r0, r4
 80097e8:	9206      	str	r2, [sp, #24]
 80097ea:	f000 fc87 	bl	800a0fc <__i2b>
 80097ee:	4607      	mov	r7, r0
 80097f0:	b165      	cbz	r5, 800980c <_dtoa_r+0x774>
 80097f2:	9b06      	ldr	r3, [sp, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd09      	ble.n	800980c <_dtoa_r+0x774>
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	9a05      	ldr	r2, [sp, #20]
 80097fc:	bfa8      	it	ge
 80097fe:	462b      	movge	r3, r5
 8009800:	1ad2      	subs	r2, r2, r3
 8009802:	9205      	str	r2, [sp, #20]
 8009804:	9a06      	ldr	r2, [sp, #24]
 8009806:	1aed      	subs	r5, r5, r3
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	9306      	str	r3, [sp, #24]
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	b1f3      	cbz	r3, 800984e <_dtoa_r+0x7b6>
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80a3 	beq.w	800995e <_dtoa_r+0x8c6>
 8009818:	2e00      	cmp	r6, #0
 800981a:	dd10      	ble.n	800983e <_dtoa_r+0x7a6>
 800981c:	4639      	mov	r1, r7
 800981e:	4632      	mov	r2, r6
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fd2b 	bl	800a27c <__pow5mult>
 8009826:	4652      	mov	r2, sl
 8009828:	4601      	mov	r1, r0
 800982a:	4607      	mov	r7, r0
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fc7b 	bl	800a128 <__multiply>
 8009832:	4651      	mov	r1, sl
 8009834:	4680      	mov	r8, r0
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fb60 	bl	8009efc <_Bfree>
 800983c:	46c2      	mov	sl, r8
 800983e:	9b08      	ldr	r3, [sp, #32]
 8009840:	1b9a      	subs	r2, r3, r6
 8009842:	d004      	beq.n	800984e <_dtoa_r+0x7b6>
 8009844:	4651      	mov	r1, sl
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fd18 	bl	800a27c <__pow5mult>
 800984c:	4682      	mov	sl, r0
 800984e:	2101      	movs	r1, #1
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fc53 	bl	800a0fc <__i2b>
 8009856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009858:	2b00      	cmp	r3, #0
 800985a:	4606      	mov	r6, r0
 800985c:	f340 8081 	ble.w	8009962 <_dtoa_r+0x8ca>
 8009860:	461a      	mov	r2, r3
 8009862:	4601      	mov	r1, r0
 8009864:	4620      	mov	r0, r4
 8009866:	f000 fd09 	bl	800a27c <__pow5mult>
 800986a:	9b07      	ldr	r3, [sp, #28]
 800986c:	2b01      	cmp	r3, #1
 800986e:	4606      	mov	r6, r0
 8009870:	dd7a      	ble.n	8009968 <_dtoa_r+0x8d0>
 8009872:	f04f 0800 	mov.w	r8, #0
 8009876:	6933      	ldr	r3, [r6, #16]
 8009878:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800987c:	6918      	ldr	r0, [r3, #16]
 800987e:	f000 fbef 	bl	800a060 <__hi0bits>
 8009882:	f1c0 0020 	rsb	r0, r0, #32
 8009886:	9b06      	ldr	r3, [sp, #24]
 8009888:	4418      	add	r0, r3
 800988a:	f010 001f 	ands.w	r0, r0, #31
 800988e:	f000 8094 	beq.w	80099ba <_dtoa_r+0x922>
 8009892:	f1c0 0320 	rsb	r3, r0, #32
 8009896:	2b04      	cmp	r3, #4
 8009898:	f340 8085 	ble.w	80099a6 <_dtoa_r+0x90e>
 800989c:	9b05      	ldr	r3, [sp, #20]
 800989e:	f1c0 001c 	rsb	r0, r0, #28
 80098a2:	4403      	add	r3, r0
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	9b06      	ldr	r3, [sp, #24]
 80098a8:	4403      	add	r3, r0
 80098aa:	4405      	add	r5, r0
 80098ac:	9306      	str	r3, [sp, #24]
 80098ae:	9b05      	ldr	r3, [sp, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	dd05      	ble.n	80098c0 <_dtoa_r+0x828>
 80098b4:	4651      	mov	r1, sl
 80098b6:	461a      	mov	r2, r3
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fd39 	bl	800a330 <__lshift>
 80098be:	4682      	mov	sl, r0
 80098c0:	9b06      	ldr	r3, [sp, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	dd05      	ble.n	80098d2 <_dtoa_r+0x83a>
 80098c6:	4631      	mov	r1, r6
 80098c8:	461a      	mov	r2, r3
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fd30 	bl	800a330 <__lshift>
 80098d0:	4606      	mov	r6, r0
 80098d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d072      	beq.n	80099be <_dtoa_r+0x926>
 80098d8:	4631      	mov	r1, r6
 80098da:	4650      	mov	r0, sl
 80098dc:	f000 fd94 	bl	800a408 <__mcmp>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	da6c      	bge.n	80099be <_dtoa_r+0x926>
 80098e4:	2300      	movs	r3, #0
 80098e6:	4651      	mov	r1, sl
 80098e8:	220a      	movs	r2, #10
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fb28 	bl	8009f40 <__multadd>
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098f6:	4682      	mov	sl, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 81b0 	beq.w	8009c5e <_dtoa_r+0xbc6>
 80098fe:	2300      	movs	r3, #0
 8009900:	4639      	mov	r1, r7
 8009902:	220a      	movs	r2, #10
 8009904:	4620      	mov	r0, r4
 8009906:	f000 fb1b 	bl	8009f40 <__multadd>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	4607      	mov	r7, r0
 8009910:	f300 8096 	bgt.w	8009a40 <_dtoa_r+0x9a8>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	2b02      	cmp	r3, #2
 8009918:	dc59      	bgt.n	80099ce <_dtoa_r+0x936>
 800991a:	e091      	b.n	8009a40 <_dtoa_r+0x9a8>
 800991c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009922:	e758      	b.n	80097d6 <_dtoa_r+0x73e>
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	1e5e      	subs	r6, r3, #1
 8009928:	9b08      	ldr	r3, [sp, #32]
 800992a:	42b3      	cmp	r3, r6
 800992c:	bfbf      	itttt	lt
 800992e:	9b08      	ldrlt	r3, [sp, #32]
 8009930:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009932:	9608      	strlt	r6, [sp, #32]
 8009934:	1af3      	sublt	r3, r6, r3
 8009936:	bfb4      	ite	lt
 8009938:	18d2      	addlt	r2, r2, r3
 800993a:	1b9e      	subge	r6, r3, r6
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	bfbc      	itt	lt
 8009940:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009942:	2600      	movlt	r6, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	bfb7      	itett	lt
 8009948:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800994c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009950:	1a9d      	sublt	r5, r3, r2
 8009952:	2300      	movlt	r3, #0
 8009954:	e741      	b.n	80097da <_dtoa_r+0x742>
 8009956:	9e08      	ldr	r6, [sp, #32]
 8009958:	9d05      	ldr	r5, [sp, #20]
 800995a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800995c:	e748      	b.n	80097f0 <_dtoa_r+0x758>
 800995e:	9a08      	ldr	r2, [sp, #32]
 8009960:	e770      	b.n	8009844 <_dtoa_r+0x7ac>
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	2b01      	cmp	r3, #1
 8009966:	dc19      	bgt.n	800999c <_dtoa_r+0x904>
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	b9bb      	cbnz	r3, 800999c <_dtoa_r+0x904>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009972:	b99b      	cbnz	r3, 800999c <_dtoa_r+0x904>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800997a:	0d1b      	lsrs	r3, r3, #20
 800997c:	051b      	lsls	r3, r3, #20
 800997e:	b183      	cbz	r3, 80099a2 <_dtoa_r+0x90a>
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	3301      	adds	r3, #1
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	3301      	adds	r3, #1
 800998a:	9306      	str	r3, [sp, #24]
 800998c:	f04f 0801 	mov.w	r8, #1
 8009990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009992:	2b00      	cmp	r3, #0
 8009994:	f47f af6f 	bne.w	8009876 <_dtoa_r+0x7de>
 8009998:	2001      	movs	r0, #1
 800999a:	e774      	b.n	8009886 <_dtoa_r+0x7ee>
 800999c:	f04f 0800 	mov.w	r8, #0
 80099a0:	e7f6      	b.n	8009990 <_dtoa_r+0x8f8>
 80099a2:	4698      	mov	r8, r3
 80099a4:	e7f4      	b.n	8009990 <_dtoa_r+0x8f8>
 80099a6:	d082      	beq.n	80098ae <_dtoa_r+0x816>
 80099a8:	9a05      	ldr	r2, [sp, #20]
 80099aa:	331c      	adds	r3, #28
 80099ac:	441a      	add	r2, r3
 80099ae:	9205      	str	r2, [sp, #20]
 80099b0:	9a06      	ldr	r2, [sp, #24]
 80099b2:	441a      	add	r2, r3
 80099b4:	441d      	add	r5, r3
 80099b6:	9206      	str	r2, [sp, #24]
 80099b8:	e779      	b.n	80098ae <_dtoa_r+0x816>
 80099ba:	4603      	mov	r3, r0
 80099bc:	e7f4      	b.n	80099a8 <_dtoa_r+0x910>
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc37      	bgt.n	8009a34 <_dtoa_r+0x99c>
 80099c4:	9b07      	ldr	r3, [sp, #28]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	dd34      	ble.n	8009a34 <_dtoa_r+0x99c>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	b963      	cbnz	r3, 80099ec <_dtoa_r+0x954>
 80099d2:	4631      	mov	r1, r6
 80099d4:	2205      	movs	r2, #5
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 fab2 	bl	8009f40 <__multadd>
 80099dc:	4601      	mov	r1, r0
 80099de:	4606      	mov	r6, r0
 80099e0:	4650      	mov	r0, sl
 80099e2:	f000 fd11 	bl	800a408 <__mcmp>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f73f adbb 	bgt.w	8009562 <_dtoa_r+0x4ca>
 80099ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ee:	9d00      	ldr	r5, [sp, #0]
 80099f0:	ea6f 0b03 	mvn.w	fp, r3
 80099f4:	f04f 0800 	mov.w	r8, #0
 80099f8:	4631      	mov	r1, r6
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fa7e 	bl	8009efc <_Bfree>
 8009a00:	2f00      	cmp	r7, #0
 8009a02:	f43f aeab 	beq.w	800975c <_dtoa_r+0x6c4>
 8009a06:	f1b8 0f00 	cmp.w	r8, #0
 8009a0a:	d005      	beq.n	8009a18 <_dtoa_r+0x980>
 8009a0c:	45b8      	cmp	r8, r7
 8009a0e:	d003      	beq.n	8009a18 <_dtoa_r+0x980>
 8009a10:	4641      	mov	r1, r8
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fa72 	bl	8009efc <_Bfree>
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 fa6e 	bl	8009efc <_Bfree>
 8009a20:	e69c      	b.n	800975c <_dtoa_r+0x6c4>
 8009a22:	2600      	movs	r6, #0
 8009a24:	4637      	mov	r7, r6
 8009a26:	e7e1      	b.n	80099ec <_dtoa_r+0x954>
 8009a28:	46bb      	mov	fp, r7
 8009a2a:	4637      	mov	r7, r6
 8009a2c:	e599      	b.n	8009562 <_dtoa_r+0x4ca>
 8009a2e:	bf00      	nop
 8009a30:	40240000 	.word	0x40240000
 8009a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80c8 	beq.w	8009bcc <_dtoa_r+0xb34>
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	dd05      	ble.n	8009a50 <_dtoa_r+0x9b8>
 8009a44:	4639      	mov	r1, r7
 8009a46:	462a      	mov	r2, r5
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fc71 	bl	800a330 <__lshift>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	f1b8 0f00 	cmp.w	r8, #0
 8009a54:	d05b      	beq.n	8009b0e <_dtoa_r+0xa76>
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fa0f 	bl	8009e7c <_Balloc>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b928      	cbnz	r0, 8009a6e <_dtoa_r+0x9d6>
 8009a62:	4b83      	ldr	r3, [pc, #524]	; (8009c70 <_dtoa_r+0xbd8>)
 8009a64:	4602      	mov	r2, r0
 8009a66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009a6a:	f7ff bb2e 	b.w	80090ca <_dtoa_r+0x32>
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	3202      	adds	r2, #2
 8009a72:	0092      	lsls	r2, r2, #2
 8009a74:	f107 010c 	add.w	r1, r7, #12
 8009a78:	300c      	adds	r0, #12
 8009a7a:	f001 ff85 	bl	800b988 <memcpy>
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4629      	mov	r1, r5
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fc54 	bl	800a330 <__lshift>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a92:	4413      	add	r3, r2
 8009a94:	9308      	str	r3, [sp, #32]
 8009a96:	9b02      	ldr	r3, [sp, #8]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	46b8      	mov	r8, r7
 8009a9e:	9306      	str	r3, [sp, #24]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	f7ff fa6a 	bl	8008f84 <quorem>
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	9002      	str	r0, [sp, #8]
 8009ab4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ab8:	4650      	mov	r0, sl
 8009aba:	f000 fca5 	bl	800a408 <__mcmp>
 8009abe:	463a      	mov	r2, r7
 8009ac0:	9005      	str	r0, [sp, #20]
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fcbb 	bl	800a440 <__mdiff>
 8009aca:	68c2      	ldr	r2, [r0, #12]
 8009acc:	4605      	mov	r5, r0
 8009ace:	bb02      	cbnz	r2, 8009b12 <_dtoa_r+0xa7a>
 8009ad0:	4601      	mov	r1, r0
 8009ad2:	4650      	mov	r0, sl
 8009ad4:	f000 fc98 	bl	800a408 <__mcmp>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	4629      	mov	r1, r5
 8009adc:	4620      	mov	r0, r4
 8009ade:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae0:	f000 fa0c 	bl	8009efc <_Bfree>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae8:	9d04      	ldr	r5, [sp, #16]
 8009aea:	ea43 0102 	orr.w	r1, r3, r2
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	4319      	orrs	r1, r3
 8009af2:	d110      	bne.n	8009b16 <_dtoa_r+0xa7e>
 8009af4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009af8:	d029      	beq.n	8009b4e <_dtoa_r+0xab6>
 8009afa:	9b05      	ldr	r3, [sp, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dd02      	ble.n	8009b06 <_dtoa_r+0xa6e>
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	f883 9000 	strb.w	r9, [r3]
 8009b0c:	e774      	b.n	80099f8 <_dtoa_r+0x960>
 8009b0e:	4638      	mov	r0, r7
 8009b10:	e7ba      	b.n	8009a88 <_dtoa_r+0x9f0>
 8009b12:	2201      	movs	r2, #1
 8009b14:	e7e1      	b.n	8009ada <_dtoa_r+0xa42>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	db04      	blt.n	8009b26 <_dtoa_r+0xa8e>
 8009b1c:	9907      	ldr	r1, [sp, #28]
 8009b1e:	430b      	orrs	r3, r1
 8009b20:	9906      	ldr	r1, [sp, #24]
 8009b22:	430b      	orrs	r3, r1
 8009b24:	d120      	bne.n	8009b68 <_dtoa_r+0xad0>
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	dded      	ble.n	8009b06 <_dtoa_r+0xa6e>
 8009b2a:	4651      	mov	r1, sl
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 fbfe 	bl	800a330 <__lshift>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4682      	mov	sl, r0
 8009b38:	f000 fc66 	bl	800a408 <__mcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	dc03      	bgt.n	8009b48 <_dtoa_r+0xab0>
 8009b40:	d1e1      	bne.n	8009b06 <_dtoa_r+0xa6e>
 8009b42:	f019 0f01 	tst.w	r9, #1
 8009b46:	d0de      	beq.n	8009b06 <_dtoa_r+0xa6e>
 8009b48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b4c:	d1d8      	bne.n	8009b00 <_dtoa_r+0xa68>
 8009b4e:	9a01      	ldr	r2, [sp, #4]
 8009b50:	2339      	movs	r3, #57	; 0x39
 8009b52:	7013      	strb	r3, [r2, #0]
 8009b54:	462b      	mov	r3, r5
 8009b56:	461d      	mov	r5, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b5e:	2a39      	cmp	r2, #57	; 0x39
 8009b60:	d06c      	beq.n	8009c3c <_dtoa_r+0xba4>
 8009b62:	3201      	adds	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e747      	b.n	80099f8 <_dtoa_r+0x960>
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	dd07      	ble.n	8009b7c <_dtoa_r+0xae4>
 8009b6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b70:	d0ed      	beq.n	8009b4e <_dtoa_r+0xab6>
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	f109 0301 	add.w	r3, r9, #1
 8009b78:	7013      	strb	r3, [r2, #0]
 8009b7a:	e73d      	b.n	80099f8 <_dtoa_r+0x960>
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	9a08      	ldr	r2, [sp, #32]
 8009b80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d043      	beq.n	8009c10 <_dtoa_r+0xb78>
 8009b88:	4651      	mov	r1, sl
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	220a      	movs	r2, #10
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 f9d6 	bl	8009f40 <__multadd>
 8009b94:	45b8      	cmp	r8, r7
 8009b96:	4682      	mov	sl, r0
 8009b98:	f04f 0300 	mov.w	r3, #0
 8009b9c:	f04f 020a 	mov.w	r2, #10
 8009ba0:	4641      	mov	r1, r8
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	d107      	bne.n	8009bb6 <_dtoa_r+0xb1e>
 8009ba6:	f000 f9cb 	bl	8009f40 <__multadd>
 8009baa:	4680      	mov	r8, r0
 8009bac:	4607      	mov	r7, r0
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	e775      	b.n	8009aa2 <_dtoa_r+0xa0a>
 8009bb6:	f000 f9c3 	bl	8009f40 <__multadd>
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	220a      	movs	r2, #10
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 f9bc 	bl	8009f40 <__multadd>
 8009bc8:	4607      	mov	r7, r0
 8009bca:	e7f0      	b.n	8009bae <_dtoa_r+0xb16>
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	9d00      	ldr	r5, [sp, #0]
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	f7ff f9d5 	bl	8008f84 <quorem>
 8009bda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	f805 9b01 	strb.w	r9, [r5], #1
 8009be4:	1aea      	subs	r2, r5, r3
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	dd07      	ble.n	8009bfc <_dtoa_r+0xb64>
 8009bec:	4651      	mov	r1, sl
 8009bee:	2300      	movs	r3, #0
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 f9a4 	bl	8009f40 <__multadd>
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	e7ea      	b.n	8009bd2 <_dtoa_r+0xb3a>
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfc8      	it	gt
 8009c02:	461d      	movgt	r5, r3
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	bfd8      	it	le
 8009c08:	2501      	movle	r5, #1
 8009c0a:	441d      	add	r5, r3
 8009c0c:	f04f 0800 	mov.w	r8, #0
 8009c10:	4651      	mov	r1, sl
 8009c12:	2201      	movs	r2, #1
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fb8b 	bl	800a330 <__lshift>
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	f000 fbf3 	bl	800a408 <__mcmp>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	dc96      	bgt.n	8009b54 <_dtoa_r+0xabc>
 8009c26:	d102      	bne.n	8009c2e <_dtoa_r+0xb96>
 8009c28:	f019 0f01 	tst.w	r9, #1
 8009c2c:	d192      	bne.n	8009b54 <_dtoa_r+0xabc>
 8009c2e:	462b      	mov	r3, r5
 8009c30:	461d      	mov	r5, r3
 8009c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c36:	2a30      	cmp	r2, #48	; 0x30
 8009c38:	d0fa      	beq.n	8009c30 <_dtoa_r+0xb98>
 8009c3a:	e6dd      	b.n	80099f8 <_dtoa_r+0x960>
 8009c3c:	9a00      	ldr	r2, [sp, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d189      	bne.n	8009b56 <_dtoa_r+0xabe>
 8009c42:	f10b 0b01 	add.w	fp, fp, #1
 8009c46:	2331      	movs	r3, #49	; 0x31
 8009c48:	e796      	b.n	8009b78 <_dtoa_r+0xae0>
 8009c4a:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <_dtoa_r+0xbdc>)
 8009c4c:	f7ff ba99 	b.w	8009182 <_dtoa_r+0xea>
 8009c50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f47f aa6d 	bne.w	8009132 <_dtoa_r+0x9a>
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <_dtoa_r+0xbe0>)
 8009c5a:	f7ff ba92 	b.w	8009182 <_dtoa_r+0xea>
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dcb5      	bgt.n	8009bd0 <_dtoa_r+0xb38>
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	f73f aeb1 	bgt.w	80099ce <_dtoa_r+0x936>
 8009c6c:	e7b0      	b.n	8009bd0 <_dtoa_r+0xb38>
 8009c6e:	bf00      	nop
 8009c70:	0800c969 	.word	0x0800c969
 8009c74:	0800c8c4 	.word	0x0800c8c4
 8009c78:	0800c8ed 	.word	0x0800c8ed

08009c7c <_free_r>:
 8009c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	d044      	beq.n	8009d0c <_free_r+0x90>
 8009c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c86:	9001      	str	r0, [sp, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c8e:	bfb8      	it	lt
 8009c90:	18e4      	addlt	r4, r4, r3
 8009c92:	f000 f8e7 	bl	8009e64 <__malloc_lock>
 8009c96:	4a1e      	ldr	r2, [pc, #120]	; (8009d10 <_free_r+0x94>)
 8009c98:	9801      	ldr	r0, [sp, #4]
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	b933      	cbnz	r3, 8009cac <_free_r+0x30>
 8009c9e:	6063      	str	r3, [r4, #4]
 8009ca0:	6014      	str	r4, [r2, #0]
 8009ca2:	b003      	add	sp, #12
 8009ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ca8:	f000 b8e2 	b.w	8009e70 <__malloc_unlock>
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d908      	bls.n	8009cc2 <_free_r+0x46>
 8009cb0:	6825      	ldr	r5, [r4, #0]
 8009cb2:	1961      	adds	r1, r4, r5
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	bf01      	itttt	eq
 8009cb8:	6819      	ldreq	r1, [r3, #0]
 8009cba:	685b      	ldreq	r3, [r3, #4]
 8009cbc:	1949      	addeq	r1, r1, r5
 8009cbe:	6021      	streq	r1, [r4, #0]
 8009cc0:	e7ed      	b.n	8009c9e <_free_r+0x22>
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	b10b      	cbz	r3, 8009ccc <_free_r+0x50>
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	d9fa      	bls.n	8009cc2 <_free_r+0x46>
 8009ccc:	6811      	ldr	r1, [r2, #0]
 8009cce:	1855      	adds	r5, r2, r1
 8009cd0:	42a5      	cmp	r5, r4
 8009cd2:	d10b      	bne.n	8009cec <_free_r+0x70>
 8009cd4:	6824      	ldr	r4, [r4, #0]
 8009cd6:	4421      	add	r1, r4
 8009cd8:	1854      	adds	r4, r2, r1
 8009cda:	42a3      	cmp	r3, r4
 8009cdc:	6011      	str	r1, [r2, #0]
 8009cde:	d1e0      	bne.n	8009ca2 <_free_r+0x26>
 8009ce0:	681c      	ldr	r4, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	6053      	str	r3, [r2, #4]
 8009ce6:	440c      	add	r4, r1
 8009ce8:	6014      	str	r4, [r2, #0]
 8009cea:	e7da      	b.n	8009ca2 <_free_r+0x26>
 8009cec:	d902      	bls.n	8009cf4 <_free_r+0x78>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	6003      	str	r3, [r0, #0]
 8009cf2:	e7d6      	b.n	8009ca2 <_free_r+0x26>
 8009cf4:	6825      	ldr	r5, [r4, #0]
 8009cf6:	1961      	adds	r1, r4, r5
 8009cf8:	428b      	cmp	r3, r1
 8009cfa:	bf04      	itt	eq
 8009cfc:	6819      	ldreq	r1, [r3, #0]
 8009cfe:	685b      	ldreq	r3, [r3, #4]
 8009d00:	6063      	str	r3, [r4, #4]
 8009d02:	bf04      	itt	eq
 8009d04:	1949      	addeq	r1, r1, r5
 8009d06:	6021      	streq	r1, [r4, #0]
 8009d08:	6054      	str	r4, [r2, #4]
 8009d0a:	e7ca      	b.n	8009ca2 <_free_r+0x26>
 8009d0c:	b003      	add	sp, #12
 8009d0e:	bd30      	pop	{r4, r5, pc}
 8009d10:	200005b4 	.word	0x200005b4

08009d14 <malloc>:
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <malloc+0xc>)
 8009d16:	4601      	mov	r1, r0
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	f000 b823 	b.w	8009d64 <_malloc_r>
 8009d1e:	bf00      	nop
 8009d20:	20000064 	.word	0x20000064

08009d24 <sbrk_aligned>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	4e0e      	ldr	r6, [pc, #56]	; (8009d60 <sbrk_aligned+0x3c>)
 8009d28:	460c      	mov	r4, r1
 8009d2a:	6831      	ldr	r1, [r6, #0]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	b911      	cbnz	r1, 8009d36 <sbrk_aligned+0x12>
 8009d30:	f001 fe1a 	bl	800b968 <_sbrk_r>
 8009d34:	6030      	str	r0, [r6, #0]
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f001 fe15 	bl	800b968 <_sbrk_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d00a      	beq.n	8009d58 <sbrk_aligned+0x34>
 8009d42:	1cc4      	adds	r4, r0, #3
 8009d44:	f024 0403 	bic.w	r4, r4, #3
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d007      	beq.n	8009d5c <sbrk_aligned+0x38>
 8009d4c:	1a21      	subs	r1, r4, r0
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f001 fe0a 	bl	800b968 <_sbrk_r>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d101      	bne.n	8009d5c <sbrk_aligned+0x38>
 8009d58:	f04f 34ff 	mov.w	r4, #4294967295
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	200005b8 	.word	0x200005b8

08009d64 <_malloc_r>:
 8009d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	1ccd      	adds	r5, r1, #3
 8009d6a:	f025 0503 	bic.w	r5, r5, #3
 8009d6e:	3508      	adds	r5, #8
 8009d70:	2d0c      	cmp	r5, #12
 8009d72:	bf38      	it	cc
 8009d74:	250c      	movcc	r5, #12
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	4607      	mov	r7, r0
 8009d7a:	db01      	blt.n	8009d80 <_malloc_r+0x1c>
 8009d7c:	42a9      	cmp	r1, r5
 8009d7e:	d905      	bls.n	8009d8c <_malloc_r+0x28>
 8009d80:	230c      	movs	r3, #12
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	2600      	movs	r6, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e60 <_malloc_r+0xfc>
 8009d90:	f000 f868 	bl	8009e64 <__malloc_lock>
 8009d94:	f8d8 3000 	ldr.w	r3, [r8]
 8009d98:	461c      	mov	r4, r3
 8009d9a:	bb5c      	cbnz	r4, 8009df4 <_malloc_r+0x90>
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f7ff ffc0 	bl	8009d24 <sbrk_aligned>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	4604      	mov	r4, r0
 8009da8:	d155      	bne.n	8009e56 <_malloc_r+0xf2>
 8009daa:	f8d8 4000 	ldr.w	r4, [r8]
 8009dae:	4626      	mov	r6, r4
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	d145      	bne.n	8009e40 <_malloc_r+0xdc>
 8009db4:	2c00      	cmp	r4, #0
 8009db6:	d048      	beq.n	8009e4a <_malloc_r+0xe6>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	eb04 0903 	add.w	r9, r4, r3
 8009dc2:	f001 fdd1 	bl	800b968 <_sbrk_r>
 8009dc6:	4581      	cmp	r9, r0
 8009dc8:	d13f      	bne.n	8009e4a <_malloc_r+0xe6>
 8009dca:	6821      	ldr	r1, [r4, #0]
 8009dcc:	1a6d      	subs	r5, r5, r1
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa7 	bl	8009d24 <sbrk_aligned>
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d037      	beq.n	8009e4a <_malloc_r+0xe6>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	442b      	add	r3, r5
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	f8d8 3000 	ldr.w	r3, [r8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d038      	beq.n	8009e5a <_malloc_r+0xf6>
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	42a2      	cmp	r2, r4
 8009dec:	d12b      	bne.n	8009e46 <_malloc_r+0xe2>
 8009dee:	2200      	movs	r2, #0
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	e00f      	b.n	8009e14 <_malloc_r+0xb0>
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	1b52      	subs	r2, r2, r5
 8009df8:	d41f      	bmi.n	8009e3a <_malloc_r+0xd6>
 8009dfa:	2a0b      	cmp	r2, #11
 8009dfc:	d917      	bls.n	8009e2e <_malloc_r+0xca>
 8009dfe:	1961      	adds	r1, r4, r5
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	6025      	str	r5, [r4, #0]
 8009e04:	bf18      	it	ne
 8009e06:	6059      	strne	r1, [r3, #4]
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	bf08      	it	eq
 8009e0c:	f8c8 1000 	streq.w	r1, [r8]
 8009e10:	5162      	str	r2, [r4, r5]
 8009e12:	604b      	str	r3, [r1, #4]
 8009e14:	4638      	mov	r0, r7
 8009e16:	f104 060b 	add.w	r6, r4, #11
 8009e1a:	f000 f829 	bl	8009e70 <__malloc_unlock>
 8009e1e:	f026 0607 	bic.w	r6, r6, #7
 8009e22:	1d23      	adds	r3, r4, #4
 8009e24:	1af2      	subs	r2, r6, r3
 8009e26:	d0ae      	beq.n	8009d86 <_malloc_r+0x22>
 8009e28:	1b9b      	subs	r3, r3, r6
 8009e2a:	50a3      	str	r3, [r4, r2]
 8009e2c:	e7ab      	b.n	8009d86 <_malloc_r+0x22>
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	6862      	ldr	r2, [r4, #4]
 8009e32:	d1dd      	bne.n	8009df0 <_malloc_r+0x8c>
 8009e34:	f8c8 2000 	str.w	r2, [r8]
 8009e38:	e7ec      	b.n	8009e14 <_malloc_r+0xb0>
 8009e3a:	4623      	mov	r3, r4
 8009e3c:	6864      	ldr	r4, [r4, #4]
 8009e3e:	e7ac      	b.n	8009d9a <_malloc_r+0x36>
 8009e40:	4634      	mov	r4, r6
 8009e42:	6876      	ldr	r6, [r6, #4]
 8009e44:	e7b4      	b.n	8009db0 <_malloc_r+0x4c>
 8009e46:	4613      	mov	r3, r2
 8009e48:	e7cc      	b.n	8009de4 <_malloc_r+0x80>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	603b      	str	r3, [r7, #0]
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f000 f80e 	bl	8009e70 <__malloc_unlock>
 8009e54:	e797      	b.n	8009d86 <_malloc_r+0x22>
 8009e56:	6025      	str	r5, [r4, #0]
 8009e58:	e7dc      	b.n	8009e14 <_malloc_r+0xb0>
 8009e5a:	605b      	str	r3, [r3, #4]
 8009e5c:	deff      	udf	#255	; 0xff
 8009e5e:	bf00      	nop
 8009e60:	200005b4 	.word	0x200005b4

08009e64 <__malloc_lock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__malloc_lock+0x8>)
 8009e66:	f7ff b884 	b.w	8008f72 <__retarget_lock_acquire_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	200005b0 	.word	0x200005b0

08009e70 <__malloc_unlock>:
 8009e70:	4801      	ldr	r0, [pc, #4]	; (8009e78 <__malloc_unlock+0x8>)
 8009e72:	f7ff b87f 	b.w	8008f74 <__retarget_lock_release_recursive>
 8009e76:	bf00      	nop
 8009e78:	200005b0 	.word	0x200005b0

08009e7c <_Balloc>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	69c6      	ldr	r6, [r0, #28]
 8009e80:	4604      	mov	r4, r0
 8009e82:	460d      	mov	r5, r1
 8009e84:	b976      	cbnz	r6, 8009ea4 <_Balloc+0x28>
 8009e86:	2010      	movs	r0, #16
 8009e88:	f7ff ff44 	bl	8009d14 <malloc>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	61e0      	str	r0, [r4, #28]
 8009e90:	b920      	cbnz	r0, 8009e9c <_Balloc+0x20>
 8009e92:	4b18      	ldr	r3, [pc, #96]	; (8009ef4 <_Balloc+0x78>)
 8009e94:	4818      	ldr	r0, [pc, #96]	; (8009ef8 <_Balloc+0x7c>)
 8009e96:	216b      	movs	r1, #107	; 0x6b
 8009e98:	f001 fd8e 	bl	800b9b8 <__assert_func>
 8009e9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ea0:	6006      	str	r6, [r0, #0]
 8009ea2:	60c6      	str	r6, [r0, #12]
 8009ea4:	69e6      	ldr	r6, [r4, #28]
 8009ea6:	68f3      	ldr	r3, [r6, #12]
 8009ea8:	b183      	cbz	r3, 8009ecc <_Balloc+0x50>
 8009eaa:	69e3      	ldr	r3, [r4, #28]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009eb2:	b9b8      	cbnz	r0, 8009ee4 <_Balloc+0x68>
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	fa01 f605 	lsl.w	r6, r1, r5
 8009eba:	1d72      	adds	r2, r6, #5
 8009ebc:	0092      	lsls	r2, r2, #2
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f001 fd98 	bl	800b9f4 <_calloc_r>
 8009ec4:	b160      	cbz	r0, 8009ee0 <_Balloc+0x64>
 8009ec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eca:	e00e      	b.n	8009eea <_Balloc+0x6e>
 8009ecc:	2221      	movs	r2, #33	; 0x21
 8009ece:	2104      	movs	r1, #4
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 fd8f 	bl	800b9f4 <_calloc_r>
 8009ed6:	69e3      	ldr	r3, [r4, #28]
 8009ed8:	60f0      	str	r0, [r6, #12]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e4      	bne.n	8009eaa <_Balloc+0x2e>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	6802      	ldr	r2, [r0, #0]
 8009ee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009eea:	2300      	movs	r3, #0
 8009eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ef0:	e7f7      	b.n	8009ee2 <_Balloc+0x66>
 8009ef2:	bf00      	nop
 8009ef4:	0800c8fa 	.word	0x0800c8fa
 8009ef8:	0800c97a 	.word	0x0800c97a

08009efc <_Bfree>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	69c6      	ldr	r6, [r0, #28]
 8009f00:	4605      	mov	r5, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	b976      	cbnz	r6, 8009f24 <_Bfree+0x28>
 8009f06:	2010      	movs	r0, #16
 8009f08:	f7ff ff04 	bl	8009d14 <malloc>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	61e8      	str	r0, [r5, #28]
 8009f10:	b920      	cbnz	r0, 8009f1c <_Bfree+0x20>
 8009f12:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <_Bfree+0x3c>)
 8009f14:	4809      	ldr	r0, [pc, #36]	; (8009f3c <_Bfree+0x40>)
 8009f16:	218f      	movs	r1, #143	; 0x8f
 8009f18:	f001 fd4e 	bl	800b9b8 <__assert_func>
 8009f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f20:	6006      	str	r6, [r0, #0]
 8009f22:	60c6      	str	r6, [r0, #12]
 8009f24:	b13c      	cbz	r4, 8009f36 <_Bfree+0x3a>
 8009f26:	69eb      	ldr	r3, [r5, #28]
 8009f28:	6862      	ldr	r2, [r4, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f30:	6021      	str	r1, [r4, #0]
 8009f32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	0800c8fa 	.word	0x0800c8fa
 8009f3c:	0800c97a 	.word	0x0800c97a

08009f40 <__multadd>:
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	690d      	ldr	r5, [r1, #16]
 8009f46:	4607      	mov	r7, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	461e      	mov	r6, r3
 8009f4c:	f101 0c14 	add.w	ip, r1, #20
 8009f50:	2000      	movs	r0, #0
 8009f52:	f8dc 3000 	ldr.w	r3, [ip]
 8009f56:	b299      	uxth	r1, r3
 8009f58:	fb02 6101 	mla	r1, r2, r1, r6
 8009f5c:	0c1e      	lsrs	r6, r3, #16
 8009f5e:	0c0b      	lsrs	r3, r1, #16
 8009f60:	fb02 3306 	mla	r3, r2, r6, r3
 8009f64:	b289      	uxth	r1, r1
 8009f66:	3001      	adds	r0, #1
 8009f68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f6c:	4285      	cmp	r5, r0
 8009f6e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f76:	dcec      	bgt.n	8009f52 <__multadd+0x12>
 8009f78:	b30e      	cbz	r6, 8009fbe <__multadd+0x7e>
 8009f7a:	68a3      	ldr	r3, [r4, #8]
 8009f7c:	42ab      	cmp	r3, r5
 8009f7e:	dc19      	bgt.n	8009fb4 <__multadd+0x74>
 8009f80:	6861      	ldr	r1, [r4, #4]
 8009f82:	4638      	mov	r0, r7
 8009f84:	3101      	adds	r1, #1
 8009f86:	f7ff ff79 	bl	8009e7c <_Balloc>
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	b928      	cbnz	r0, 8009f9a <__multadd+0x5a>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <__multadd+0x84>)
 8009f92:	480d      	ldr	r0, [pc, #52]	; (8009fc8 <__multadd+0x88>)
 8009f94:	21ba      	movs	r1, #186	; 0xba
 8009f96:	f001 fd0f 	bl	800b9b8 <__assert_func>
 8009f9a:	6922      	ldr	r2, [r4, #16]
 8009f9c:	3202      	adds	r2, #2
 8009f9e:	f104 010c 	add.w	r1, r4, #12
 8009fa2:	0092      	lsls	r2, r2, #2
 8009fa4:	300c      	adds	r0, #12
 8009fa6:	f001 fcef 	bl	800b988 <memcpy>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4638      	mov	r0, r7
 8009fae:	f7ff ffa5 	bl	8009efc <_Bfree>
 8009fb2:	4644      	mov	r4, r8
 8009fb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fb8:	3501      	adds	r5, #1
 8009fba:	615e      	str	r6, [r3, #20]
 8009fbc:	6125      	str	r5, [r4, #16]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc4:	0800c969 	.word	0x0800c969
 8009fc8:	0800c97a 	.word	0x0800c97a

08009fcc <__s2b>:
 8009fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	4615      	mov	r5, r2
 8009fd4:	461f      	mov	r7, r3
 8009fd6:	2209      	movs	r2, #9
 8009fd8:	3308      	adds	r3, #8
 8009fda:	4606      	mov	r6, r0
 8009fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	db09      	blt.n	8009ffc <__s2b+0x30>
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff ff47 	bl	8009e7c <_Balloc>
 8009fee:	b940      	cbnz	r0, 800a002 <__s2b+0x36>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	4b19      	ldr	r3, [pc, #100]	; (800a058 <__s2b+0x8c>)
 8009ff4:	4819      	ldr	r0, [pc, #100]	; (800a05c <__s2b+0x90>)
 8009ff6:	21d3      	movs	r1, #211	; 0xd3
 8009ff8:	f001 fcde 	bl	800b9b8 <__assert_func>
 8009ffc:	0052      	lsls	r2, r2, #1
 8009ffe:	3101      	adds	r1, #1
 800a000:	e7f0      	b.n	8009fe4 <__s2b+0x18>
 800a002:	9b08      	ldr	r3, [sp, #32]
 800a004:	6143      	str	r3, [r0, #20]
 800a006:	2d09      	cmp	r5, #9
 800a008:	f04f 0301 	mov.w	r3, #1
 800a00c:	6103      	str	r3, [r0, #16]
 800a00e:	dd16      	ble.n	800a03e <__s2b+0x72>
 800a010:	f104 0909 	add.w	r9, r4, #9
 800a014:	46c8      	mov	r8, r9
 800a016:	442c      	add	r4, r5
 800a018:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a01c:	4601      	mov	r1, r0
 800a01e:	3b30      	subs	r3, #48	; 0x30
 800a020:	220a      	movs	r2, #10
 800a022:	4630      	mov	r0, r6
 800a024:	f7ff ff8c 	bl	8009f40 <__multadd>
 800a028:	45a0      	cmp	r8, r4
 800a02a:	d1f5      	bne.n	800a018 <__s2b+0x4c>
 800a02c:	f1a5 0408 	sub.w	r4, r5, #8
 800a030:	444c      	add	r4, r9
 800a032:	1b2d      	subs	r5, r5, r4
 800a034:	1963      	adds	r3, r4, r5
 800a036:	42bb      	cmp	r3, r7
 800a038:	db04      	blt.n	800a044 <__s2b+0x78>
 800a03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03e:	340a      	adds	r4, #10
 800a040:	2509      	movs	r5, #9
 800a042:	e7f6      	b.n	800a032 <__s2b+0x66>
 800a044:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a048:	4601      	mov	r1, r0
 800a04a:	3b30      	subs	r3, #48	; 0x30
 800a04c:	220a      	movs	r2, #10
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ff76 	bl	8009f40 <__multadd>
 800a054:	e7ee      	b.n	800a034 <__s2b+0x68>
 800a056:	bf00      	nop
 800a058:	0800c969 	.word	0x0800c969
 800a05c:	0800c97a 	.word	0x0800c97a

0800a060 <__hi0bits>:
 800a060:	0c03      	lsrs	r3, r0, #16
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	b9d3      	cbnz	r3, 800a09c <__hi0bits+0x3c>
 800a066:	0400      	lsls	r0, r0, #16
 800a068:	2310      	movs	r3, #16
 800a06a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a06e:	bf04      	itt	eq
 800a070:	0200      	lsleq	r0, r0, #8
 800a072:	3308      	addeq	r3, #8
 800a074:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a078:	bf04      	itt	eq
 800a07a:	0100      	lsleq	r0, r0, #4
 800a07c:	3304      	addeq	r3, #4
 800a07e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a082:	bf04      	itt	eq
 800a084:	0080      	lsleq	r0, r0, #2
 800a086:	3302      	addeq	r3, #2
 800a088:	2800      	cmp	r0, #0
 800a08a:	db05      	blt.n	800a098 <__hi0bits+0x38>
 800a08c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a090:	f103 0301 	add.w	r3, r3, #1
 800a094:	bf08      	it	eq
 800a096:	2320      	moveq	r3, #32
 800a098:	4618      	mov	r0, r3
 800a09a:	4770      	bx	lr
 800a09c:	2300      	movs	r3, #0
 800a09e:	e7e4      	b.n	800a06a <__hi0bits+0xa>

0800a0a0 <__lo0bits>:
 800a0a0:	6803      	ldr	r3, [r0, #0]
 800a0a2:	f013 0207 	ands.w	r2, r3, #7
 800a0a6:	d00c      	beq.n	800a0c2 <__lo0bits+0x22>
 800a0a8:	07d9      	lsls	r1, r3, #31
 800a0aa:	d422      	bmi.n	800a0f2 <__lo0bits+0x52>
 800a0ac:	079a      	lsls	r2, r3, #30
 800a0ae:	bf49      	itett	mi
 800a0b0:	085b      	lsrmi	r3, r3, #1
 800a0b2:	089b      	lsrpl	r3, r3, #2
 800a0b4:	6003      	strmi	r3, [r0, #0]
 800a0b6:	2201      	movmi	r2, #1
 800a0b8:	bf5c      	itt	pl
 800a0ba:	6003      	strpl	r3, [r0, #0]
 800a0bc:	2202      	movpl	r2, #2
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4770      	bx	lr
 800a0c2:	b299      	uxth	r1, r3
 800a0c4:	b909      	cbnz	r1, 800a0ca <__lo0bits+0x2a>
 800a0c6:	0c1b      	lsrs	r3, r3, #16
 800a0c8:	2210      	movs	r2, #16
 800a0ca:	b2d9      	uxtb	r1, r3
 800a0cc:	b909      	cbnz	r1, 800a0d2 <__lo0bits+0x32>
 800a0ce:	3208      	adds	r2, #8
 800a0d0:	0a1b      	lsrs	r3, r3, #8
 800a0d2:	0719      	lsls	r1, r3, #28
 800a0d4:	bf04      	itt	eq
 800a0d6:	091b      	lsreq	r3, r3, #4
 800a0d8:	3204      	addeq	r2, #4
 800a0da:	0799      	lsls	r1, r3, #30
 800a0dc:	bf04      	itt	eq
 800a0de:	089b      	lsreq	r3, r3, #2
 800a0e0:	3202      	addeq	r2, #2
 800a0e2:	07d9      	lsls	r1, r3, #31
 800a0e4:	d403      	bmi.n	800a0ee <__lo0bits+0x4e>
 800a0e6:	085b      	lsrs	r3, r3, #1
 800a0e8:	f102 0201 	add.w	r2, r2, #1
 800a0ec:	d003      	beq.n	800a0f6 <__lo0bits+0x56>
 800a0ee:	6003      	str	r3, [r0, #0]
 800a0f0:	e7e5      	b.n	800a0be <__lo0bits+0x1e>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	e7e3      	b.n	800a0be <__lo0bits+0x1e>
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	e7e1      	b.n	800a0be <__lo0bits+0x1e>
	...

0800a0fc <__i2b>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	460c      	mov	r4, r1
 800a100:	2101      	movs	r1, #1
 800a102:	f7ff febb 	bl	8009e7c <_Balloc>
 800a106:	4602      	mov	r2, r0
 800a108:	b928      	cbnz	r0, 800a116 <__i2b+0x1a>
 800a10a:	4b05      	ldr	r3, [pc, #20]	; (800a120 <__i2b+0x24>)
 800a10c:	4805      	ldr	r0, [pc, #20]	; (800a124 <__i2b+0x28>)
 800a10e:	f240 1145 	movw	r1, #325	; 0x145
 800a112:	f001 fc51 	bl	800b9b8 <__assert_func>
 800a116:	2301      	movs	r3, #1
 800a118:	6144      	str	r4, [r0, #20]
 800a11a:	6103      	str	r3, [r0, #16]
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	bf00      	nop
 800a120:	0800c969 	.word	0x0800c969
 800a124:	0800c97a 	.word	0x0800c97a

0800a128 <__multiply>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	4691      	mov	r9, r2
 800a12e:	690a      	ldr	r2, [r1, #16]
 800a130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a134:	429a      	cmp	r2, r3
 800a136:	bfb8      	it	lt
 800a138:	460b      	movlt	r3, r1
 800a13a:	460c      	mov	r4, r1
 800a13c:	bfbc      	itt	lt
 800a13e:	464c      	movlt	r4, r9
 800a140:	4699      	movlt	r9, r3
 800a142:	6927      	ldr	r7, [r4, #16]
 800a144:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a148:	68a3      	ldr	r3, [r4, #8]
 800a14a:	6861      	ldr	r1, [r4, #4]
 800a14c:	eb07 060a 	add.w	r6, r7, sl
 800a150:	42b3      	cmp	r3, r6
 800a152:	b085      	sub	sp, #20
 800a154:	bfb8      	it	lt
 800a156:	3101      	addlt	r1, #1
 800a158:	f7ff fe90 	bl	8009e7c <_Balloc>
 800a15c:	b930      	cbnz	r0, 800a16c <__multiply+0x44>
 800a15e:	4602      	mov	r2, r0
 800a160:	4b44      	ldr	r3, [pc, #272]	; (800a274 <__multiply+0x14c>)
 800a162:	4845      	ldr	r0, [pc, #276]	; (800a278 <__multiply+0x150>)
 800a164:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a168:	f001 fc26 	bl	800b9b8 <__assert_func>
 800a16c:	f100 0514 	add.w	r5, r0, #20
 800a170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a174:	462b      	mov	r3, r5
 800a176:	2200      	movs	r2, #0
 800a178:	4543      	cmp	r3, r8
 800a17a:	d321      	bcc.n	800a1c0 <__multiply+0x98>
 800a17c:	f104 0314 	add.w	r3, r4, #20
 800a180:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a184:	f109 0314 	add.w	r3, r9, #20
 800a188:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a18c:	9202      	str	r2, [sp, #8]
 800a18e:	1b3a      	subs	r2, r7, r4
 800a190:	3a15      	subs	r2, #21
 800a192:	f022 0203 	bic.w	r2, r2, #3
 800a196:	3204      	adds	r2, #4
 800a198:	f104 0115 	add.w	r1, r4, #21
 800a19c:	428f      	cmp	r7, r1
 800a19e:	bf38      	it	cc
 800a1a0:	2204      	movcc	r2, #4
 800a1a2:	9201      	str	r2, [sp, #4]
 800a1a4:	9a02      	ldr	r2, [sp, #8]
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d80c      	bhi.n	800a1c6 <__multiply+0x9e>
 800a1ac:	2e00      	cmp	r6, #0
 800a1ae:	dd03      	ble.n	800a1b8 <__multiply+0x90>
 800a1b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d05b      	beq.n	800a270 <__multiply+0x148>
 800a1b8:	6106      	str	r6, [r0, #16]
 800a1ba:	b005      	add	sp, #20
 800a1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c0:	f843 2b04 	str.w	r2, [r3], #4
 800a1c4:	e7d8      	b.n	800a178 <__multiply+0x50>
 800a1c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1ca:	f1ba 0f00 	cmp.w	sl, #0
 800a1ce:	d024      	beq.n	800a21a <__multiply+0xf2>
 800a1d0:	f104 0e14 	add.w	lr, r4, #20
 800a1d4:	46a9      	mov	r9, r5
 800a1d6:	f04f 0c00 	mov.w	ip, #0
 800a1da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1de:	f8d9 1000 	ldr.w	r1, [r9]
 800a1e2:	fa1f fb82 	uxth.w	fp, r2
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1f4:	4461      	add	r1, ip
 800a1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a202:	b289      	uxth	r1, r1
 800a204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a208:	4577      	cmp	r7, lr
 800a20a:	f849 1b04 	str.w	r1, [r9], #4
 800a20e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a212:	d8e2      	bhi.n	800a1da <__multiply+0xb2>
 800a214:	9a01      	ldr	r2, [sp, #4]
 800a216:	f845 c002 	str.w	ip, [r5, r2]
 800a21a:	9a03      	ldr	r2, [sp, #12]
 800a21c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a220:	3304      	adds	r3, #4
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	d021      	beq.n	800a26c <__multiply+0x144>
 800a228:	6829      	ldr	r1, [r5, #0]
 800a22a:	f104 0c14 	add.w	ip, r4, #20
 800a22e:	46ae      	mov	lr, r5
 800a230:	f04f 0a00 	mov.w	sl, #0
 800a234:	f8bc b000 	ldrh.w	fp, [ip]
 800a238:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a23c:	fb09 220b 	mla	r2, r9, fp, r2
 800a240:	4452      	add	r2, sl
 800a242:	b289      	uxth	r1, r1
 800a244:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a248:	f84e 1b04 	str.w	r1, [lr], #4
 800a24c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a254:	f8be 1000 	ldrh.w	r1, [lr]
 800a258:	fb09 110a 	mla	r1, r9, sl, r1
 800a25c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a260:	4567      	cmp	r7, ip
 800a262:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a266:	d8e5      	bhi.n	800a234 <__multiply+0x10c>
 800a268:	9a01      	ldr	r2, [sp, #4]
 800a26a:	50a9      	str	r1, [r5, r2]
 800a26c:	3504      	adds	r5, #4
 800a26e:	e799      	b.n	800a1a4 <__multiply+0x7c>
 800a270:	3e01      	subs	r6, #1
 800a272:	e79b      	b.n	800a1ac <__multiply+0x84>
 800a274:	0800c969 	.word	0x0800c969
 800a278:	0800c97a 	.word	0x0800c97a

0800a27c <__pow5mult>:
 800a27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a280:	4615      	mov	r5, r2
 800a282:	f012 0203 	ands.w	r2, r2, #3
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	d007      	beq.n	800a29c <__pow5mult+0x20>
 800a28c:	4c25      	ldr	r4, [pc, #148]	; (800a324 <__pow5mult+0xa8>)
 800a28e:	3a01      	subs	r2, #1
 800a290:	2300      	movs	r3, #0
 800a292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a296:	f7ff fe53 	bl	8009f40 <__multadd>
 800a29a:	4607      	mov	r7, r0
 800a29c:	10ad      	asrs	r5, r5, #2
 800a29e:	d03d      	beq.n	800a31c <__pow5mult+0xa0>
 800a2a0:	69f4      	ldr	r4, [r6, #28]
 800a2a2:	b97c      	cbnz	r4, 800a2c4 <__pow5mult+0x48>
 800a2a4:	2010      	movs	r0, #16
 800a2a6:	f7ff fd35 	bl	8009d14 <malloc>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	61f0      	str	r0, [r6, #28]
 800a2ae:	b928      	cbnz	r0, 800a2bc <__pow5mult+0x40>
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <__pow5mult+0xac>)
 800a2b2:	481e      	ldr	r0, [pc, #120]	; (800a32c <__pow5mult+0xb0>)
 800a2b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a2b8:	f001 fb7e 	bl	800b9b8 <__assert_func>
 800a2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2c0:	6004      	str	r4, [r0, #0]
 800a2c2:	60c4      	str	r4, [r0, #12]
 800a2c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2cc:	b94c      	cbnz	r4, 800a2e2 <__pow5mult+0x66>
 800a2ce:	f240 2171 	movw	r1, #625	; 0x271
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ff12 	bl	800a0fc <__i2b>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2de:	4604      	mov	r4, r0
 800a2e0:	6003      	str	r3, [r0, #0]
 800a2e2:	f04f 0900 	mov.w	r9, #0
 800a2e6:	07eb      	lsls	r3, r5, #31
 800a2e8:	d50a      	bpl.n	800a300 <__pow5mult+0x84>
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff ff1a 	bl	800a128 <__multiply>
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	4680      	mov	r8, r0
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff fdff 	bl	8009efc <_Bfree>
 800a2fe:	4647      	mov	r7, r8
 800a300:	106d      	asrs	r5, r5, #1
 800a302:	d00b      	beq.n	800a31c <__pow5mult+0xa0>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	b938      	cbnz	r0, 800a318 <__pow5mult+0x9c>
 800a308:	4622      	mov	r2, r4
 800a30a:	4621      	mov	r1, r4
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7ff ff0b 	bl	800a128 <__multiply>
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	f8c0 9000 	str.w	r9, [r0]
 800a318:	4604      	mov	r4, r0
 800a31a:	e7e4      	b.n	800a2e6 <__pow5mult+0x6a>
 800a31c:	4638      	mov	r0, r7
 800a31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a322:	bf00      	nop
 800a324:	0800cac8 	.word	0x0800cac8
 800a328:	0800c8fa 	.word	0x0800c8fa
 800a32c:	0800c97a 	.word	0x0800c97a

0800a330 <__lshift>:
 800a330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a334:	460c      	mov	r4, r1
 800a336:	6849      	ldr	r1, [r1, #4]
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	4607      	mov	r7, r0
 800a342:	4691      	mov	r9, r2
 800a344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a348:	f108 0601 	add.w	r6, r8, #1
 800a34c:	42b3      	cmp	r3, r6
 800a34e:	db0b      	blt.n	800a368 <__lshift+0x38>
 800a350:	4638      	mov	r0, r7
 800a352:	f7ff fd93 	bl	8009e7c <_Balloc>
 800a356:	4605      	mov	r5, r0
 800a358:	b948      	cbnz	r0, 800a36e <__lshift+0x3e>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b28      	ldr	r3, [pc, #160]	; (800a400 <__lshift+0xd0>)
 800a35e:	4829      	ldr	r0, [pc, #164]	; (800a404 <__lshift+0xd4>)
 800a360:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a364:	f001 fb28 	bl	800b9b8 <__assert_func>
 800a368:	3101      	adds	r1, #1
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	e7ee      	b.n	800a34c <__lshift+0x1c>
 800a36e:	2300      	movs	r3, #0
 800a370:	f100 0114 	add.w	r1, r0, #20
 800a374:	f100 0210 	add.w	r2, r0, #16
 800a378:	4618      	mov	r0, r3
 800a37a:	4553      	cmp	r3, sl
 800a37c:	db33      	blt.n	800a3e6 <__lshift+0xb6>
 800a37e:	6920      	ldr	r0, [r4, #16]
 800a380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a384:	f104 0314 	add.w	r3, r4, #20
 800a388:	f019 091f 	ands.w	r9, r9, #31
 800a38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a394:	d02b      	beq.n	800a3ee <__lshift+0xbe>
 800a396:	f1c9 0e20 	rsb	lr, r9, #32
 800a39a:	468a      	mov	sl, r1
 800a39c:	2200      	movs	r2, #0
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a3a4:	4310      	orrs	r0, r2
 800a3a6:	f84a 0b04 	str.w	r0, [sl], #4
 800a3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ae:	459c      	cmp	ip, r3
 800a3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3b4:	d8f3      	bhi.n	800a39e <__lshift+0x6e>
 800a3b6:	ebac 0304 	sub.w	r3, ip, r4
 800a3ba:	3b15      	subs	r3, #21
 800a3bc:	f023 0303 	bic.w	r3, r3, #3
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	f104 0015 	add.w	r0, r4, #21
 800a3c6:	4584      	cmp	ip, r0
 800a3c8:	bf38      	it	cc
 800a3ca:	2304      	movcc	r3, #4
 800a3cc:	50ca      	str	r2, [r1, r3]
 800a3ce:	b10a      	cbz	r2, 800a3d4 <__lshift+0xa4>
 800a3d0:	f108 0602 	add.w	r6, r8, #2
 800a3d4:	3e01      	subs	r6, #1
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	612e      	str	r6, [r5, #16]
 800a3da:	4621      	mov	r1, r4
 800a3dc:	f7ff fd8e 	bl	8009efc <_Bfree>
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	e7c5      	b.n	800a37a <__lshift+0x4a>
 800a3ee:	3904      	subs	r1, #4
 800a3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3f8:	459c      	cmp	ip, r3
 800a3fa:	d8f9      	bhi.n	800a3f0 <__lshift+0xc0>
 800a3fc:	e7ea      	b.n	800a3d4 <__lshift+0xa4>
 800a3fe:	bf00      	nop
 800a400:	0800c969 	.word	0x0800c969
 800a404:	0800c97a 	.word	0x0800c97a

0800a408 <__mcmp>:
 800a408:	b530      	push	{r4, r5, lr}
 800a40a:	6902      	ldr	r2, [r0, #16]
 800a40c:	690c      	ldr	r4, [r1, #16]
 800a40e:	1b12      	subs	r2, r2, r4
 800a410:	d10e      	bne.n	800a430 <__mcmp+0x28>
 800a412:	f100 0314 	add.w	r3, r0, #20
 800a416:	3114      	adds	r1, #20
 800a418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a41c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a428:	42a5      	cmp	r5, r4
 800a42a:	d003      	beq.n	800a434 <__mcmp+0x2c>
 800a42c:	d305      	bcc.n	800a43a <__mcmp+0x32>
 800a42e:	2201      	movs	r2, #1
 800a430:	4610      	mov	r0, r2
 800a432:	bd30      	pop	{r4, r5, pc}
 800a434:	4283      	cmp	r3, r0
 800a436:	d3f3      	bcc.n	800a420 <__mcmp+0x18>
 800a438:	e7fa      	b.n	800a430 <__mcmp+0x28>
 800a43a:	f04f 32ff 	mov.w	r2, #4294967295
 800a43e:	e7f7      	b.n	800a430 <__mcmp+0x28>

0800a440 <__mdiff>:
 800a440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	460c      	mov	r4, r1
 800a446:	4606      	mov	r6, r0
 800a448:	4611      	mov	r1, r2
 800a44a:	4620      	mov	r0, r4
 800a44c:	4690      	mov	r8, r2
 800a44e:	f7ff ffdb 	bl	800a408 <__mcmp>
 800a452:	1e05      	subs	r5, r0, #0
 800a454:	d110      	bne.n	800a478 <__mdiff+0x38>
 800a456:	4629      	mov	r1, r5
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff fd0f 	bl	8009e7c <_Balloc>
 800a45e:	b930      	cbnz	r0, 800a46e <__mdiff+0x2e>
 800a460:	4b3a      	ldr	r3, [pc, #232]	; (800a54c <__mdiff+0x10c>)
 800a462:	4602      	mov	r2, r0
 800a464:	f240 2137 	movw	r1, #567	; 0x237
 800a468:	4839      	ldr	r0, [pc, #228]	; (800a550 <__mdiff+0x110>)
 800a46a:	f001 faa5 	bl	800b9b8 <__assert_func>
 800a46e:	2301      	movs	r3, #1
 800a470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	bfa4      	itt	ge
 800a47a:	4643      	movge	r3, r8
 800a47c:	46a0      	movge	r8, r4
 800a47e:	4630      	mov	r0, r6
 800a480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a484:	bfa6      	itte	ge
 800a486:	461c      	movge	r4, r3
 800a488:	2500      	movge	r5, #0
 800a48a:	2501      	movlt	r5, #1
 800a48c:	f7ff fcf6 	bl	8009e7c <_Balloc>
 800a490:	b920      	cbnz	r0, 800a49c <__mdiff+0x5c>
 800a492:	4b2e      	ldr	r3, [pc, #184]	; (800a54c <__mdiff+0x10c>)
 800a494:	4602      	mov	r2, r0
 800a496:	f240 2145 	movw	r1, #581	; 0x245
 800a49a:	e7e5      	b.n	800a468 <__mdiff+0x28>
 800a49c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4a0:	6926      	ldr	r6, [r4, #16]
 800a4a2:	60c5      	str	r5, [r0, #12]
 800a4a4:	f104 0914 	add.w	r9, r4, #20
 800a4a8:	f108 0514 	add.w	r5, r8, #20
 800a4ac:	f100 0e14 	add.w	lr, r0, #20
 800a4b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4b8:	f108 0210 	add.w	r2, r8, #16
 800a4bc:	46f2      	mov	sl, lr
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4c8:	fa11 f88b 	uxtah	r8, r1, fp
 800a4cc:	b299      	uxth	r1, r3
 800a4ce:	0c1b      	lsrs	r3, r3, #16
 800a4d0:	eba8 0801 	sub.w	r8, r8, r1
 800a4d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4dc:	fa1f f888 	uxth.w	r8, r8
 800a4e0:	1419      	asrs	r1, r3, #16
 800a4e2:	454e      	cmp	r6, r9
 800a4e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4e8:	f84a 3b04 	str.w	r3, [sl], #4
 800a4ec:	d8e8      	bhi.n	800a4c0 <__mdiff+0x80>
 800a4ee:	1b33      	subs	r3, r6, r4
 800a4f0:	3b15      	subs	r3, #21
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	3415      	adds	r4, #21
 800a4fa:	42a6      	cmp	r6, r4
 800a4fc:	bf38      	it	cc
 800a4fe:	2304      	movcc	r3, #4
 800a500:	441d      	add	r5, r3
 800a502:	4473      	add	r3, lr
 800a504:	469e      	mov	lr, r3
 800a506:	462e      	mov	r6, r5
 800a508:	4566      	cmp	r6, ip
 800a50a:	d30e      	bcc.n	800a52a <__mdiff+0xea>
 800a50c:	f10c 0203 	add.w	r2, ip, #3
 800a510:	1b52      	subs	r2, r2, r5
 800a512:	f022 0203 	bic.w	r2, r2, #3
 800a516:	3d03      	subs	r5, #3
 800a518:	45ac      	cmp	ip, r5
 800a51a:	bf38      	it	cc
 800a51c:	2200      	movcc	r2, #0
 800a51e:	4413      	add	r3, r2
 800a520:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a524:	b17a      	cbz	r2, 800a546 <__mdiff+0x106>
 800a526:	6107      	str	r7, [r0, #16]
 800a528:	e7a4      	b.n	800a474 <__mdiff+0x34>
 800a52a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a52e:	fa11 f288 	uxtah	r2, r1, r8
 800a532:	1414      	asrs	r4, r2, #16
 800a534:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a538:	b292      	uxth	r2, r2
 800a53a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a53e:	f84e 2b04 	str.w	r2, [lr], #4
 800a542:	1421      	asrs	r1, r4, #16
 800a544:	e7e0      	b.n	800a508 <__mdiff+0xc8>
 800a546:	3f01      	subs	r7, #1
 800a548:	e7ea      	b.n	800a520 <__mdiff+0xe0>
 800a54a:	bf00      	nop
 800a54c:	0800c969 	.word	0x0800c969
 800a550:	0800c97a 	.word	0x0800c97a

0800a554 <__ulp>:
 800a554:	b082      	sub	sp, #8
 800a556:	ed8d 0b00 	vstr	d0, [sp]
 800a55a:	9a01      	ldr	r2, [sp, #4]
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <__ulp+0x48>)
 800a55e:	4013      	ands	r3, r2
 800a560:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a564:	2b00      	cmp	r3, #0
 800a566:	dc08      	bgt.n	800a57a <__ulp+0x26>
 800a568:	425b      	negs	r3, r3
 800a56a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a56e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a572:	da04      	bge.n	800a57e <__ulp+0x2a>
 800a574:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a578:	4113      	asrs	r3, r2
 800a57a:	2200      	movs	r2, #0
 800a57c:	e008      	b.n	800a590 <__ulp+0x3c>
 800a57e:	f1a2 0314 	sub.w	r3, r2, #20
 800a582:	2b1e      	cmp	r3, #30
 800a584:	bfda      	itte	le
 800a586:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a58a:	40da      	lsrle	r2, r3
 800a58c:	2201      	movgt	r2, #1
 800a58e:	2300      	movs	r3, #0
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	ec41 0b10 	vmov	d0, r0, r1
 800a598:	b002      	add	sp, #8
 800a59a:	4770      	bx	lr
 800a59c:	7ff00000 	.word	0x7ff00000

0800a5a0 <__b2d>:
 800a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	6906      	ldr	r6, [r0, #16]
 800a5a6:	f100 0814 	add.w	r8, r0, #20
 800a5aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5ae:	1f37      	subs	r7, r6, #4
 800a5b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f7ff fd53 	bl	800a060 <__hi0bits>
 800a5ba:	f1c0 0320 	rsb	r3, r0, #32
 800a5be:	280a      	cmp	r0, #10
 800a5c0:	600b      	str	r3, [r1, #0]
 800a5c2:	491b      	ldr	r1, [pc, #108]	; (800a630 <__b2d+0x90>)
 800a5c4:	dc15      	bgt.n	800a5f2 <__b2d+0x52>
 800a5c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5ce:	45b8      	cmp	r8, r7
 800a5d0:	ea43 0501 	orr.w	r5, r3, r1
 800a5d4:	bf34      	ite	cc
 800a5d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5da:	2300      	movcs	r3, #0
 800a5dc:	3015      	adds	r0, #21
 800a5de:	fa02 f000 	lsl.w	r0, r2, r0
 800a5e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5e6:	4303      	orrs	r3, r0
 800a5e8:	461c      	mov	r4, r3
 800a5ea:	ec45 4b10 	vmov	d0, r4, r5
 800a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f2:	45b8      	cmp	r8, r7
 800a5f4:	bf3a      	itte	cc
 800a5f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5fe:	2300      	movcs	r3, #0
 800a600:	380b      	subs	r0, #11
 800a602:	d012      	beq.n	800a62a <__b2d+0x8a>
 800a604:	f1c0 0120 	rsb	r1, r0, #32
 800a608:	fa23 f401 	lsr.w	r4, r3, r1
 800a60c:	4082      	lsls	r2, r0
 800a60e:	4322      	orrs	r2, r4
 800a610:	4547      	cmp	r7, r8
 800a612:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a616:	bf8c      	ite	hi
 800a618:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a61c:	2200      	movls	r2, #0
 800a61e:	4083      	lsls	r3, r0
 800a620:	40ca      	lsrs	r2, r1
 800a622:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a626:	4313      	orrs	r3, r2
 800a628:	e7de      	b.n	800a5e8 <__b2d+0x48>
 800a62a:	ea42 0501 	orr.w	r5, r2, r1
 800a62e:	e7db      	b.n	800a5e8 <__b2d+0x48>
 800a630:	3ff00000 	.word	0x3ff00000

0800a634 <__d2b>:
 800a634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a638:	460f      	mov	r7, r1
 800a63a:	2101      	movs	r1, #1
 800a63c:	ec59 8b10 	vmov	r8, r9, d0
 800a640:	4616      	mov	r6, r2
 800a642:	f7ff fc1b 	bl	8009e7c <_Balloc>
 800a646:	4604      	mov	r4, r0
 800a648:	b930      	cbnz	r0, 800a658 <__d2b+0x24>
 800a64a:	4602      	mov	r2, r0
 800a64c:	4b24      	ldr	r3, [pc, #144]	; (800a6e0 <__d2b+0xac>)
 800a64e:	4825      	ldr	r0, [pc, #148]	; (800a6e4 <__d2b+0xb0>)
 800a650:	f240 310f 	movw	r1, #783	; 0x30f
 800a654:	f001 f9b0 	bl	800b9b8 <__assert_func>
 800a658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a660:	bb2d      	cbnz	r5, 800a6ae <__d2b+0x7a>
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	f1b8 0300 	subs.w	r3, r8, #0
 800a668:	d026      	beq.n	800a6b8 <__d2b+0x84>
 800a66a:	4668      	mov	r0, sp
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	f7ff fd17 	bl	800a0a0 <__lo0bits>
 800a672:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a676:	b1e8      	cbz	r0, 800a6b4 <__d2b+0x80>
 800a678:	f1c0 0320 	rsb	r3, r0, #32
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	430b      	orrs	r3, r1
 800a682:	40c2      	lsrs	r2, r0
 800a684:	6163      	str	r3, [r4, #20]
 800a686:	9201      	str	r2, [sp, #4]
 800a688:	9b01      	ldr	r3, [sp, #4]
 800a68a:	61a3      	str	r3, [r4, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bf14      	ite	ne
 800a690:	2202      	movne	r2, #2
 800a692:	2201      	moveq	r2, #1
 800a694:	6122      	str	r2, [r4, #16]
 800a696:	b1bd      	cbz	r5, 800a6c8 <__d2b+0x94>
 800a698:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a69c:	4405      	add	r5, r0
 800a69e:	603d      	str	r5, [r7, #0]
 800a6a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6a4:	6030      	str	r0, [r6, #0]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	b003      	add	sp, #12
 800a6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6b2:	e7d6      	b.n	800a662 <__d2b+0x2e>
 800a6b4:	6161      	str	r1, [r4, #20]
 800a6b6:	e7e7      	b.n	800a688 <__d2b+0x54>
 800a6b8:	a801      	add	r0, sp, #4
 800a6ba:	f7ff fcf1 	bl	800a0a0 <__lo0bits>
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	6163      	str	r3, [r4, #20]
 800a6c2:	3020      	adds	r0, #32
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	e7e5      	b.n	800a694 <__d2b+0x60>
 800a6c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6d0:	6038      	str	r0, [r7, #0]
 800a6d2:	6918      	ldr	r0, [r3, #16]
 800a6d4:	f7ff fcc4 	bl	800a060 <__hi0bits>
 800a6d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6dc:	e7e2      	b.n	800a6a4 <__d2b+0x70>
 800a6de:	bf00      	nop
 800a6e0:	0800c969 	.word	0x0800c969
 800a6e4:	0800c97a 	.word	0x0800c97a

0800a6e8 <__ratio>:
 800a6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4688      	mov	r8, r1
 800a6ee:	4669      	mov	r1, sp
 800a6f0:	4681      	mov	r9, r0
 800a6f2:	f7ff ff55 	bl	800a5a0 <__b2d>
 800a6f6:	a901      	add	r1, sp, #4
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	ec55 4b10 	vmov	r4, r5, d0
 800a6fe:	f7ff ff4f 	bl	800a5a0 <__b2d>
 800a702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a706:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a70a:	eba3 0c02 	sub.w	ip, r3, r2
 800a70e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a718:	ec51 0b10 	vmov	r0, r1, d0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfd6      	itet	le
 800a720:	460a      	movle	r2, r1
 800a722:	462a      	movgt	r2, r5
 800a724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a728:	468b      	mov	fp, r1
 800a72a:	462f      	mov	r7, r5
 800a72c:	bfd4      	ite	le
 800a72e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a736:	4620      	mov	r0, r4
 800a738:	ee10 2a10 	vmov	r2, s0
 800a73c:	465b      	mov	r3, fp
 800a73e:	4639      	mov	r1, r7
 800a740:	f7f6 f884 	bl	800084c <__aeabi_ddiv>
 800a744:	ec41 0b10 	vmov	d0, r0, r1
 800a748:	b003      	add	sp, #12
 800a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a74e <__copybits>:
 800a74e:	3901      	subs	r1, #1
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	1149      	asrs	r1, r1, #5
 800a754:	6914      	ldr	r4, [r2, #16]
 800a756:	3101      	adds	r1, #1
 800a758:	f102 0314 	add.w	r3, r2, #20
 800a75c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a760:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a764:	1f05      	subs	r5, r0, #4
 800a766:	42a3      	cmp	r3, r4
 800a768:	d30c      	bcc.n	800a784 <__copybits+0x36>
 800a76a:	1aa3      	subs	r3, r4, r2
 800a76c:	3b11      	subs	r3, #17
 800a76e:	f023 0303 	bic.w	r3, r3, #3
 800a772:	3211      	adds	r2, #17
 800a774:	42a2      	cmp	r2, r4
 800a776:	bf88      	it	hi
 800a778:	2300      	movhi	r3, #0
 800a77a:	4418      	add	r0, r3
 800a77c:	2300      	movs	r3, #0
 800a77e:	4288      	cmp	r0, r1
 800a780:	d305      	bcc.n	800a78e <__copybits+0x40>
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	f853 6b04 	ldr.w	r6, [r3], #4
 800a788:	f845 6f04 	str.w	r6, [r5, #4]!
 800a78c:	e7eb      	b.n	800a766 <__copybits+0x18>
 800a78e:	f840 3b04 	str.w	r3, [r0], #4
 800a792:	e7f4      	b.n	800a77e <__copybits+0x30>

0800a794 <__any_on>:
 800a794:	f100 0214 	add.w	r2, r0, #20
 800a798:	6900      	ldr	r0, [r0, #16]
 800a79a:	114b      	asrs	r3, r1, #5
 800a79c:	4298      	cmp	r0, r3
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	db11      	blt.n	800a7c6 <__any_on+0x32>
 800a7a2:	dd0a      	ble.n	800a7ba <__any_on+0x26>
 800a7a4:	f011 011f 	ands.w	r1, r1, #31
 800a7a8:	d007      	beq.n	800a7ba <__any_on+0x26>
 800a7aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7ae:	fa24 f001 	lsr.w	r0, r4, r1
 800a7b2:	fa00 f101 	lsl.w	r1, r0, r1
 800a7b6:	428c      	cmp	r4, r1
 800a7b8:	d10b      	bne.n	800a7d2 <__any_on+0x3e>
 800a7ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d803      	bhi.n	800a7ca <__any_on+0x36>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	bd10      	pop	{r4, pc}
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	e7f7      	b.n	800a7ba <__any_on+0x26>
 800a7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	d0f5      	beq.n	800a7be <__any_on+0x2a>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	e7f6      	b.n	800a7c4 <__any_on+0x30>

0800a7d6 <sulp>:
 800a7d6:	b570      	push	{r4, r5, r6, lr}
 800a7d8:	4604      	mov	r4, r0
 800a7da:	460d      	mov	r5, r1
 800a7dc:	ec45 4b10 	vmov	d0, r4, r5
 800a7e0:	4616      	mov	r6, r2
 800a7e2:	f7ff feb7 	bl	800a554 <__ulp>
 800a7e6:	ec51 0b10 	vmov	r0, r1, d0
 800a7ea:	b17e      	cbz	r6, 800a80c <sulp+0x36>
 800a7ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dd09      	ble.n	800a80c <sulp+0x36>
 800a7f8:	051b      	lsls	r3, r3, #20
 800a7fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a7fe:	2400      	movs	r4, #0
 800a800:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a804:	4622      	mov	r2, r4
 800a806:	462b      	mov	r3, r5
 800a808:	f7f5 fef6 	bl	80005f8 <__aeabi_dmul>
 800a80c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a810 <_strtod_l>:
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	ed2d 8b02 	vpush	{d8}
 800a818:	b09b      	sub	sp, #108	; 0x6c
 800a81a:	4604      	mov	r4, r0
 800a81c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a81e:	2200      	movs	r2, #0
 800a820:	9216      	str	r2, [sp, #88]	; 0x58
 800a822:	460d      	mov	r5, r1
 800a824:	f04f 0800 	mov.w	r8, #0
 800a828:	f04f 0900 	mov.w	r9, #0
 800a82c:	460a      	mov	r2, r1
 800a82e:	9215      	str	r2, [sp, #84]	; 0x54
 800a830:	7811      	ldrb	r1, [r2, #0]
 800a832:	292b      	cmp	r1, #43	; 0x2b
 800a834:	d04c      	beq.n	800a8d0 <_strtod_l+0xc0>
 800a836:	d83a      	bhi.n	800a8ae <_strtod_l+0x9e>
 800a838:	290d      	cmp	r1, #13
 800a83a:	d834      	bhi.n	800a8a6 <_strtod_l+0x96>
 800a83c:	2908      	cmp	r1, #8
 800a83e:	d834      	bhi.n	800a8aa <_strtod_l+0x9a>
 800a840:	2900      	cmp	r1, #0
 800a842:	d03d      	beq.n	800a8c0 <_strtod_l+0xb0>
 800a844:	2200      	movs	r2, #0
 800a846:	920a      	str	r2, [sp, #40]	; 0x28
 800a848:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a84a:	7832      	ldrb	r2, [r6, #0]
 800a84c:	2a30      	cmp	r2, #48	; 0x30
 800a84e:	f040 80b4 	bne.w	800a9ba <_strtod_l+0x1aa>
 800a852:	7872      	ldrb	r2, [r6, #1]
 800a854:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a858:	2a58      	cmp	r2, #88	; 0x58
 800a85a:	d170      	bne.n	800a93e <_strtod_l+0x12e>
 800a85c:	9302      	str	r3, [sp, #8]
 800a85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	ab16      	add	r3, sp, #88	; 0x58
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	4a8e      	ldr	r2, [pc, #568]	; (800aaa0 <_strtod_l+0x290>)
 800a868:	ab17      	add	r3, sp, #92	; 0x5c
 800a86a:	a915      	add	r1, sp, #84	; 0x54
 800a86c:	4620      	mov	r0, r4
 800a86e:	f001 f93f 	bl	800baf0 <__gethex>
 800a872:	f010 070f 	ands.w	r7, r0, #15
 800a876:	4605      	mov	r5, r0
 800a878:	d005      	beq.n	800a886 <_strtod_l+0x76>
 800a87a:	2f06      	cmp	r7, #6
 800a87c:	d12a      	bne.n	800a8d4 <_strtod_l+0xc4>
 800a87e:	3601      	adds	r6, #1
 800a880:	2300      	movs	r3, #0
 800a882:	9615      	str	r6, [sp, #84]	; 0x54
 800a884:	930a      	str	r3, [sp, #40]	; 0x28
 800a886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f040 857f 	bne.w	800b38c <_strtod_l+0xb7c>
 800a88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a890:	b1db      	cbz	r3, 800a8ca <_strtod_l+0xba>
 800a892:	4642      	mov	r2, r8
 800a894:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a898:	ec43 2b10 	vmov	d0, r2, r3
 800a89c:	b01b      	add	sp, #108	; 0x6c
 800a89e:	ecbd 8b02 	vpop	{d8}
 800a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a6:	2920      	cmp	r1, #32
 800a8a8:	d1cc      	bne.n	800a844 <_strtod_l+0x34>
 800a8aa:	3201      	adds	r2, #1
 800a8ac:	e7bf      	b.n	800a82e <_strtod_l+0x1e>
 800a8ae:	292d      	cmp	r1, #45	; 0x2d
 800a8b0:	d1c8      	bne.n	800a844 <_strtod_l+0x34>
 800a8b2:	2101      	movs	r1, #1
 800a8b4:	910a      	str	r1, [sp, #40]	; 0x28
 800a8b6:	1c51      	adds	r1, r2, #1
 800a8b8:	9115      	str	r1, [sp, #84]	; 0x54
 800a8ba:	7852      	ldrb	r2, [r2, #1]
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	d1c3      	bne.n	800a848 <_strtod_l+0x38>
 800a8c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8c2:	9515      	str	r5, [sp, #84]	; 0x54
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 855f 	bne.w	800b388 <_strtod_l+0xb78>
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	e7e3      	b.n	800a898 <_strtod_l+0x88>
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	e7ef      	b.n	800a8b4 <_strtod_l+0xa4>
 800a8d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8d6:	b13a      	cbz	r2, 800a8e8 <_strtod_l+0xd8>
 800a8d8:	2135      	movs	r1, #53	; 0x35
 800a8da:	a818      	add	r0, sp, #96	; 0x60
 800a8dc:	f7ff ff37 	bl	800a74e <__copybits>
 800a8e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f7ff fb0a 	bl	8009efc <_Bfree>
 800a8e8:	3f01      	subs	r7, #1
 800a8ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a8ec:	2f04      	cmp	r7, #4
 800a8ee:	d806      	bhi.n	800a8fe <_strtod_l+0xee>
 800a8f0:	e8df f007 	tbb	[pc, r7]
 800a8f4:	201d0314 	.word	0x201d0314
 800a8f8:	14          	.byte	0x14
 800a8f9:	00          	.byte	0x00
 800a8fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a8fe:	05e9      	lsls	r1, r5, #23
 800a900:	bf48      	it	mi
 800a902:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a906:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a90a:	0d1b      	lsrs	r3, r3, #20
 800a90c:	051b      	lsls	r3, r3, #20
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1b9      	bne.n	800a886 <_strtod_l+0x76>
 800a912:	f7fe fb03 	bl	8008f1c <__errno>
 800a916:	2322      	movs	r3, #34	; 0x22
 800a918:	6003      	str	r3, [r0, #0]
 800a91a:	e7b4      	b.n	800a886 <_strtod_l+0x76>
 800a91c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a920:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a924:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a928:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a92c:	e7e7      	b.n	800a8fe <_strtod_l+0xee>
 800a92e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aaa8 <_strtod_l+0x298>
 800a932:	e7e4      	b.n	800a8fe <_strtod_l+0xee>
 800a934:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a938:	f04f 38ff 	mov.w	r8, #4294967295
 800a93c:	e7df      	b.n	800a8fe <_strtod_l+0xee>
 800a93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	9215      	str	r2, [sp, #84]	; 0x54
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	2b30      	cmp	r3, #48	; 0x30
 800a948:	d0f9      	beq.n	800a93e <_strtod_l+0x12e>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d09b      	beq.n	800a886 <_strtod_l+0x76>
 800a94e:	2301      	movs	r3, #1
 800a950:	f04f 0a00 	mov.w	sl, #0
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a958:	930b      	str	r3, [sp, #44]	; 0x2c
 800a95a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a95e:	46d3      	mov	fp, sl
 800a960:	220a      	movs	r2, #10
 800a962:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a964:	7806      	ldrb	r6, [r0, #0]
 800a966:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a96a:	b2d9      	uxtb	r1, r3
 800a96c:	2909      	cmp	r1, #9
 800a96e:	d926      	bls.n	800a9be <_strtod_l+0x1ae>
 800a970:	494c      	ldr	r1, [pc, #304]	; (800aaa4 <_strtod_l+0x294>)
 800a972:	2201      	movs	r2, #1
 800a974:	f000 ffe6 	bl	800b944 <strncmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d030      	beq.n	800a9de <_strtod_l+0x1ce>
 800a97c:	2000      	movs	r0, #0
 800a97e:	4632      	mov	r2, r6
 800a980:	9005      	str	r0, [sp, #20]
 800a982:	465e      	mov	r6, fp
 800a984:	4603      	mov	r3, r0
 800a986:	2a65      	cmp	r2, #101	; 0x65
 800a988:	d001      	beq.n	800a98e <_strtod_l+0x17e>
 800a98a:	2a45      	cmp	r2, #69	; 0x45
 800a98c:	d113      	bne.n	800a9b6 <_strtod_l+0x1a6>
 800a98e:	b91e      	cbnz	r6, 800a998 <_strtod_l+0x188>
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	4302      	orrs	r2, r0
 800a994:	d094      	beq.n	800a8c0 <_strtod_l+0xb0>
 800a996:	2600      	movs	r6, #0
 800a998:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a99a:	1c6a      	adds	r2, r5, #1
 800a99c:	9215      	str	r2, [sp, #84]	; 0x54
 800a99e:	786a      	ldrb	r2, [r5, #1]
 800a9a0:	2a2b      	cmp	r2, #43	; 0x2b
 800a9a2:	d074      	beq.n	800aa8e <_strtod_l+0x27e>
 800a9a4:	2a2d      	cmp	r2, #45	; 0x2d
 800a9a6:	d078      	beq.n	800aa9a <_strtod_l+0x28a>
 800a9a8:	f04f 0c00 	mov.w	ip, #0
 800a9ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a9b0:	2909      	cmp	r1, #9
 800a9b2:	d97f      	bls.n	800aab4 <_strtod_l+0x2a4>
 800a9b4:	9515      	str	r5, [sp, #84]	; 0x54
 800a9b6:	2700      	movs	r7, #0
 800a9b8:	e09e      	b.n	800aaf8 <_strtod_l+0x2e8>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e7c8      	b.n	800a950 <_strtod_l+0x140>
 800a9be:	f1bb 0f08 	cmp.w	fp, #8
 800a9c2:	bfd8      	it	le
 800a9c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a9c6:	f100 0001 	add.w	r0, r0, #1
 800a9ca:	bfda      	itte	le
 800a9cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9d0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a9d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a9d6:	f10b 0b01 	add.w	fp, fp, #1
 800a9da:	9015      	str	r0, [sp, #84]	; 0x54
 800a9dc:	e7c1      	b.n	800a962 <_strtod_l+0x152>
 800a9de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	9215      	str	r2, [sp, #84]	; 0x54
 800a9e4:	785a      	ldrb	r2, [r3, #1]
 800a9e6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ea:	d037      	beq.n	800aa5c <_strtod_l+0x24c>
 800a9ec:	9005      	str	r0, [sp, #20]
 800a9ee:	465e      	mov	r6, fp
 800a9f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a9f4:	2b09      	cmp	r3, #9
 800a9f6:	d912      	bls.n	800aa1e <_strtod_l+0x20e>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e7c4      	b.n	800a986 <_strtod_l+0x176>
 800a9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	9215      	str	r2, [sp, #84]	; 0x54
 800aa02:	785a      	ldrb	r2, [r3, #1]
 800aa04:	3001      	adds	r0, #1
 800aa06:	2a30      	cmp	r2, #48	; 0x30
 800aa08:	d0f8      	beq.n	800a9fc <_strtod_l+0x1ec>
 800aa0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa0e:	2b08      	cmp	r3, #8
 800aa10:	f200 84c1 	bhi.w	800b396 <_strtod_l+0xb86>
 800aa14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa16:	9005      	str	r0, [sp, #20]
 800aa18:	2000      	movs	r0, #0
 800aa1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	3a30      	subs	r2, #48	; 0x30
 800aa20:	f100 0301 	add.w	r3, r0, #1
 800aa24:	d014      	beq.n	800aa50 <_strtod_l+0x240>
 800aa26:	9905      	ldr	r1, [sp, #20]
 800aa28:	4419      	add	r1, r3
 800aa2a:	9105      	str	r1, [sp, #20]
 800aa2c:	4633      	mov	r3, r6
 800aa2e:	eb00 0c06 	add.w	ip, r0, r6
 800aa32:	210a      	movs	r1, #10
 800aa34:	4563      	cmp	r3, ip
 800aa36:	d113      	bne.n	800aa60 <_strtod_l+0x250>
 800aa38:	1833      	adds	r3, r6, r0
 800aa3a:	2b08      	cmp	r3, #8
 800aa3c:	f106 0601 	add.w	r6, r6, #1
 800aa40:	4406      	add	r6, r0
 800aa42:	dc1a      	bgt.n	800aa7a <_strtod_l+0x26a>
 800aa44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa46:	230a      	movs	r3, #10
 800aa48:	fb03 2301 	mla	r3, r3, r1, r2
 800aa4c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa52:	1c51      	adds	r1, r2, #1
 800aa54:	9115      	str	r1, [sp, #84]	; 0x54
 800aa56:	7852      	ldrb	r2, [r2, #1]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	e7c9      	b.n	800a9f0 <_strtod_l+0x1e0>
 800aa5c:	4658      	mov	r0, fp
 800aa5e:	e7d2      	b.n	800aa06 <_strtod_l+0x1f6>
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	f103 0301 	add.w	r3, r3, #1
 800aa66:	dc03      	bgt.n	800aa70 <_strtod_l+0x260>
 800aa68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa6a:	434f      	muls	r7, r1
 800aa6c:	9709      	str	r7, [sp, #36]	; 0x24
 800aa6e:	e7e1      	b.n	800aa34 <_strtod_l+0x224>
 800aa70:	2b10      	cmp	r3, #16
 800aa72:	bfd8      	it	le
 800aa74:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aa78:	e7dc      	b.n	800aa34 <_strtod_l+0x224>
 800aa7a:	2e10      	cmp	r6, #16
 800aa7c:	bfdc      	itt	le
 800aa7e:	230a      	movle	r3, #10
 800aa80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aa84:	e7e3      	b.n	800aa4e <_strtod_l+0x23e>
 800aa86:	2300      	movs	r3, #0
 800aa88:	9305      	str	r3, [sp, #20]
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e780      	b.n	800a990 <_strtod_l+0x180>
 800aa8e:	f04f 0c00 	mov.w	ip, #0
 800aa92:	1caa      	adds	r2, r5, #2
 800aa94:	9215      	str	r2, [sp, #84]	; 0x54
 800aa96:	78aa      	ldrb	r2, [r5, #2]
 800aa98:	e788      	b.n	800a9ac <_strtod_l+0x19c>
 800aa9a:	f04f 0c01 	mov.w	ip, #1
 800aa9e:	e7f8      	b.n	800aa92 <_strtod_l+0x282>
 800aaa0:	0800cad8 	.word	0x0800cad8
 800aaa4:	0800cad4 	.word	0x0800cad4
 800aaa8:	7ff00000 	.word	0x7ff00000
 800aaac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aaae:	1c51      	adds	r1, r2, #1
 800aab0:	9115      	str	r1, [sp, #84]	; 0x54
 800aab2:	7852      	ldrb	r2, [r2, #1]
 800aab4:	2a30      	cmp	r2, #48	; 0x30
 800aab6:	d0f9      	beq.n	800aaac <_strtod_l+0x29c>
 800aab8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aabc:	2908      	cmp	r1, #8
 800aabe:	f63f af7a 	bhi.w	800a9b6 <_strtod_l+0x1a6>
 800aac2:	3a30      	subs	r2, #48	; 0x30
 800aac4:	9208      	str	r2, [sp, #32]
 800aac6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aac8:	920c      	str	r2, [sp, #48]	; 0x30
 800aaca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aacc:	1c57      	adds	r7, r2, #1
 800aace:	9715      	str	r7, [sp, #84]	; 0x54
 800aad0:	7852      	ldrb	r2, [r2, #1]
 800aad2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aad6:	f1be 0f09 	cmp.w	lr, #9
 800aada:	d938      	bls.n	800ab4e <_strtod_l+0x33e>
 800aadc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aade:	1a7f      	subs	r7, r7, r1
 800aae0:	2f08      	cmp	r7, #8
 800aae2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aae6:	dc03      	bgt.n	800aaf0 <_strtod_l+0x2e0>
 800aae8:	9908      	ldr	r1, [sp, #32]
 800aaea:	428f      	cmp	r7, r1
 800aaec:	bfa8      	it	ge
 800aaee:	460f      	movge	r7, r1
 800aaf0:	f1bc 0f00 	cmp.w	ip, #0
 800aaf4:	d000      	beq.n	800aaf8 <_strtod_l+0x2e8>
 800aaf6:	427f      	negs	r7, r7
 800aaf8:	2e00      	cmp	r6, #0
 800aafa:	d14f      	bne.n	800ab9c <_strtod_l+0x38c>
 800aafc:	9904      	ldr	r1, [sp, #16]
 800aafe:	4301      	orrs	r1, r0
 800ab00:	f47f aec1 	bne.w	800a886 <_strtod_l+0x76>
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f47f aedb 	bne.w	800a8c0 <_strtod_l+0xb0>
 800ab0a:	2a69      	cmp	r2, #105	; 0x69
 800ab0c:	d029      	beq.n	800ab62 <_strtod_l+0x352>
 800ab0e:	dc26      	bgt.n	800ab5e <_strtod_l+0x34e>
 800ab10:	2a49      	cmp	r2, #73	; 0x49
 800ab12:	d026      	beq.n	800ab62 <_strtod_l+0x352>
 800ab14:	2a4e      	cmp	r2, #78	; 0x4e
 800ab16:	f47f aed3 	bne.w	800a8c0 <_strtod_l+0xb0>
 800ab1a:	499b      	ldr	r1, [pc, #620]	; (800ad88 <_strtod_l+0x578>)
 800ab1c:	a815      	add	r0, sp, #84	; 0x54
 800ab1e:	f001 fa27 	bl	800bf70 <__match>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	f43f aecc 	beq.w	800a8c0 <_strtod_l+0xb0>
 800ab28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b28      	cmp	r3, #40	; 0x28
 800ab2e:	d12f      	bne.n	800ab90 <_strtod_l+0x380>
 800ab30:	4996      	ldr	r1, [pc, #600]	; (800ad8c <_strtod_l+0x57c>)
 800ab32:	aa18      	add	r2, sp, #96	; 0x60
 800ab34:	a815      	add	r0, sp, #84	; 0x54
 800ab36:	f001 fa2f 	bl	800bf98 <__hexnan>
 800ab3a:	2805      	cmp	r0, #5
 800ab3c:	d128      	bne.n	800ab90 <_strtod_l+0x380>
 800ab3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ab48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ab4c:	e69b      	b.n	800a886 <_strtod_l+0x76>
 800ab4e:	9f08      	ldr	r7, [sp, #32]
 800ab50:	210a      	movs	r1, #10
 800ab52:	fb01 2107 	mla	r1, r1, r7, r2
 800ab56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ab5a:	9208      	str	r2, [sp, #32]
 800ab5c:	e7b5      	b.n	800aaca <_strtod_l+0x2ba>
 800ab5e:	2a6e      	cmp	r2, #110	; 0x6e
 800ab60:	e7d9      	b.n	800ab16 <_strtod_l+0x306>
 800ab62:	498b      	ldr	r1, [pc, #556]	; (800ad90 <_strtod_l+0x580>)
 800ab64:	a815      	add	r0, sp, #84	; 0x54
 800ab66:	f001 fa03 	bl	800bf70 <__match>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	f43f aea8 	beq.w	800a8c0 <_strtod_l+0xb0>
 800ab70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab72:	4988      	ldr	r1, [pc, #544]	; (800ad94 <_strtod_l+0x584>)
 800ab74:	3b01      	subs	r3, #1
 800ab76:	a815      	add	r0, sp, #84	; 0x54
 800ab78:	9315      	str	r3, [sp, #84]	; 0x54
 800ab7a:	f001 f9f9 	bl	800bf70 <__match>
 800ab7e:	b910      	cbnz	r0, 800ab86 <_strtod_l+0x376>
 800ab80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab82:	3301      	adds	r3, #1
 800ab84:	9315      	str	r3, [sp, #84]	; 0x54
 800ab86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ada4 <_strtod_l+0x594>
 800ab8a:	f04f 0800 	mov.w	r8, #0
 800ab8e:	e67a      	b.n	800a886 <_strtod_l+0x76>
 800ab90:	4881      	ldr	r0, [pc, #516]	; (800ad98 <_strtod_l+0x588>)
 800ab92:	f000 ff09 	bl	800b9a8 <nan>
 800ab96:	ec59 8b10 	vmov	r8, r9, d0
 800ab9a:	e674      	b.n	800a886 <_strtod_l+0x76>
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba0:	1afb      	subs	r3, r7, r3
 800aba2:	f1bb 0f00 	cmp.w	fp, #0
 800aba6:	bf08      	it	eq
 800aba8:	46b3      	moveq	fp, r6
 800abaa:	2e10      	cmp	r6, #16
 800abac:	9308      	str	r3, [sp, #32]
 800abae:	4635      	mov	r5, r6
 800abb0:	bfa8      	it	ge
 800abb2:	2510      	movge	r5, #16
 800abb4:	f7f5 fca6 	bl	8000504 <__aeabi_ui2d>
 800abb8:	2e09      	cmp	r6, #9
 800abba:	4680      	mov	r8, r0
 800abbc:	4689      	mov	r9, r1
 800abbe:	dd13      	ble.n	800abe8 <_strtod_l+0x3d8>
 800abc0:	4b76      	ldr	r3, [pc, #472]	; (800ad9c <_strtod_l+0x58c>)
 800abc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800abc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abca:	f7f5 fd15 	bl	80005f8 <__aeabi_dmul>
 800abce:	4680      	mov	r8, r0
 800abd0:	4650      	mov	r0, sl
 800abd2:	4689      	mov	r9, r1
 800abd4:	f7f5 fc96 	bl	8000504 <__aeabi_ui2d>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4640      	mov	r0, r8
 800abde:	4649      	mov	r1, r9
 800abe0:	f7f5 fb54 	bl	800028c <__adddf3>
 800abe4:	4680      	mov	r8, r0
 800abe6:	4689      	mov	r9, r1
 800abe8:	2e0f      	cmp	r6, #15
 800abea:	dc38      	bgt.n	800ac5e <_strtod_l+0x44e>
 800abec:	9b08      	ldr	r3, [sp, #32]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f43f ae49 	beq.w	800a886 <_strtod_l+0x76>
 800abf4:	dd24      	ble.n	800ac40 <_strtod_l+0x430>
 800abf6:	2b16      	cmp	r3, #22
 800abf8:	dc0b      	bgt.n	800ac12 <_strtod_l+0x402>
 800abfa:	4968      	ldr	r1, [pc, #416]	; (800ad9c <_strtod_l+0x58c>)
 800abfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	4689      	mov	r9, r1
 800ac10:	e639      	b.n	800a886 <_strtod_l+0x76>
 800ac12:	9a08      	ldr	r2, [sp, #32]
 800ac14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	db20      	blt.n	800ac5e <_strtod_l+0x44e>
 800ac1c:	4c5f      	ldr	r4, [pc, #380]	; (800ad9c <_strtod_l+0x58c>)
 800ac1e:	f1c6 060f 	rsb	r6, r6, #15
 800ac22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac2e:	f7f5 fce3 	bl	80005f8 <__aeabi_dmul>
 800ac32:	9b08      	ldr	r3, [sp, #32]
 800ac34:	1b9e      	subs	r6, r3, r6
 800ac36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ac3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac3e:	e7e3      	b.n	800ac08 <_strtod_l+0x3f8>
 800ac40:	9b08      	ldr	r3, [sp, #32]
 800ac42:	3316      	adds	r3, #22
 800ac44:	db0b      	blt.n	800ac5e <_strtod_l+0x44e>
 800ac46:	9b05      	ldr	r3, [sp, #20]
 800ac48:	1bdf      	subs	r7, r3, r7
 800ac4a:	4b54      	ldr	r3, [pc, #336]	; (800ad9c <_strtod_l+0x58c>)
 800ac4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ac50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac54:	4640      	mov	r0, r8
 800ac56:	4649      	mov	r1, r9
 800ac58:	f7f5 fdf8 	bl	800084c <__aeabi_ddiv>
 800ac5c:	e7d6      	b.n	800ac0c <_strtod_l+0x3fc>
 800ac5e:	9b08      	ldr	r3, [sp, #32]
 800ac60:	1b75      	subs	r5, r6, r5
 800ac62:	441d      	add	r5, r3
 800ac64:	2d00      	cmp	r5, #0
 800ac66:	dd70      	ble.n	800ad4a <_strtod_l+0x53a>
 800ac68:	f015 030f 	ands.w	r3, r5, #15
 800ac6c:	d00a      	beq.n	800ac84 <_strtod_l+0x474>
 800ac6e:	494b      	ldr	r1, [pc, #300]	; (800ad9c <_strtod_l+0x58c>)
 800ac70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac74:	4642      	mov	r2, r8
 800ac76:	464b      	mov	r3, r9
 800ac78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	4680      	mov	r8, r0
 800ac82:	4689      	mov	r9, r1
 800ac84:	f035 050f 	bics.w	r5, r5, #15
 800ac88:	d04d      	beq.n	800ad26 <_strtod_l+0x516>
 800ac8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ac8e:	dd22      	ble.n	800acd6 <_strtod_l+0x4c6>
 800ac90:	2500      	movs	r5, #0
 800ac92:	46ab      	mov	fp, r5
 800ac94:	9509      	str	r5, [sp, #36]	; 0x24
 800ac96:	9505      	str	r5, [sp, #20]
 800ac98:	2322      	movs	r3, #34	; 0x22
 800ac9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ada4 <_strtod_l+0x594>
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	f04f 0800 	mov.w	r8, #0
 800aca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f43f aded 	beq.w	800a886 <_strtod_l+0x76>
 800acac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acae:	4620      	mov	r0, r4
 800acb0:	f7ff f924 	bl	8009efc <_Bfree>
 800acb4:	9905      	ldr	r1, [sp, #20]
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff f920 	bl	8009efc <_Bfree>
 800acbc:	4659      	mov	r1, fp
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff f91c 	bl	8009efc <_Bfree>
 800acc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7ff f918 	bl	8009efc <_Bfree>
 800accc:	4629      	mov	r1, r5
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff f914 	bl	8009efc <_Bfree>
 800acd4:	e5d7      	b.n	800a886 <_strtod_l+0x76>
 800acd6:	4b32      	ldr	r3, [pc, #200]	; (800ada0 <_strtod_l+0x590>)
 800acd8:	9304      	str	r3, [sp, #16]
 800acda:	2300      	movs	r3, #0
 800acdc:	112d      	asrs	r5, r5, #4
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	469a      	mov	sl, r3
 800ace4:	2d01      	cmp	r5, #1
 800ace6:	dc21      	bgt.n	800ad2c <_strtod_l+0x51c>
 800ace8:	b10b      	cbz	r3, 800acee <_strtod_l+0x4de>
 800acea:	4680      	mov	r8, r0
 800acec:	4689      	mov	r9, r1
 800acee:	492c      	ldr	r1, [pc, #176]	; (800ada0 <_strtod_l+0x590>)
 800acf0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800acf4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800acf8:	4642      	mov	r2, r8
 800acfa:	464b      	mov	r3, r9
 800acfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad00:	f7f5 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ad04:	4b27      	ldr	r3, [pc, #156]	; (800ada4 <_strtod_l+0x594>)
 800ad06:	460a      	mov	r2, r1
 800ad08:	400b      	ands	r3, r1
 800ad0a:	4927      	ldr	r1, [pc, #156]	; (800ada8 <_strtod_l+0x598>)
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	4680      	mov	r8, r0
 800ad10:	d8be      	bhi.n	800ac90 <_strtod_l+0x480>
 800ad12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad16:	428b      	cmp	r3, r1
 800ad18:	bf86      	itte	hi
 800ad1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800adac <_strtod_l+0x59c>
 800ad1e:	f04f 38ff 	movhi.w	r8, #4294967295
 800ad22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ad26:	2300      	movs	r3, #0
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	e07b      	b.n	800ae24 <_strtod_l+0x614>
 800ad2c:	07ea      	lsls	r2, r5, #31
 800ad2e:	d505      	bpl.n	800ad3c <_strtod_l+0x52c>
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	3208      	adds	r2, #8
 800ad40:	f10a 0a01 	add.w	sl, sl, #1
 800ad44:	106d      	asrs	r5, r5, #1
 800ad46:	9204      	str	r2, [sp, #16]
 800ad48:	e7cc      	b.n	800ace4 <_strtod_l+0x4d4>
 800ad4a:	d0ec      	beq.n	800ad26 <_strtod_l+0x516>
 800ad4c:	426d      	negs	r5, r5
 800ad4e:	f015 020f 	ands.w	r2, r5, #15
 800ad52:	d00a      	beq.n	800ad6a <_strtod_l+0x55a>
 800ad54:	4b11      	ldr	r3, [pc, #68]	; (800ad9c <_strtod_l+0x58c>)
 800ad56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fd73 	bl	800084c <__aeabi_ddiv>
 800ad66:	4680      	mov	r8, r0
 800ad68:	4689      	mov	r9, r1
 800ad6a:	112d      	asrs	r5, r5, #4
 800ad6c:	d0db      	beq.n	800ad26 <_strtod_l+0x516>
 800ad6e:	2d1f      	cmp	r5, #31
 800ad70:	dd1e      	ble.n	800adb0 <_strtod_l+0x5a0>
 800ad72:	2500      	movs	r5, #0
 800ad74:	46ab      	mov	fp, r5
 800ad76:	9509      	str	r5, [sp, #36]	; 0x24
 800ad78:	9505      	str	r5, [sp, #20]
 800ad7a:	2322      	movs	r3, #34	; 0x22
 800ad7c:	f04f 0800 	mov.w	r8, #0
 800ad80:	f04f 0900 	mov.w	r9, #0
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	e78d      	b.n	800aca4 <_strtod_l+0x494>
 800ad88:	0800c8c1 	.word	0x0800c8c1
 800ad8c:	0800caec 	.word	0x0800caec
 800ad90:	0800c8b9 	.word	0x0800c8b9
 800ad94:	0800c8f0 	.word	0x0800c8f0
 800ad98:	0800cc7d 	.word	0x0800cc7d
 800ad9c:	0800ca00 	.word	0x0800ca00
 800ada0:	0800c9d8 	.word	0x0800c9d8
 800ada4:	7ff00000 	.word	0x7ff00000
 800ada8:	7ca00000 	.word	0x7ca00000
 800adac:	7fefffff 	.word	0x7fefffff
 800adb0:	f015 0310 	ands.w	r3, r5, #16
 800adb4:	bf18      	it	ne
 800adb6:	236a      	movne	r3, #106	; 0x6a
 800adb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b15c <_strtod_l+0x94c>
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	4640      	mov	r0, r8
 800adc0:	4649      	mov	r1, r9
 800adc2:	2300      	movs	r3, #0
 800adc4:	07ea      	lsls	r2, r5, #31
 800adc6:	d504      	bpl.n	800add2 <_strtod_l+0x5c2>
 800adc8:	e9da 2300 	ldrd	r2, r3, [sl]
 800adcc:	f7f5 fc14 	bl	80005f8 <__aeabi_dmul>
 800add0:	2301      	movs	r3, #1
 800add2:	106d      	asrs	r5, r5, #1
 800add4:	f10a 0a08 	add.w	sl, sl, #8
 800add8:	d1f4      	bne.n	800adc4 <_strtod_l+0x5b4>
 800adda:	b10b      	cbz	r3, 800ade0 <_strtod_l+0x5d0>
 800addc:	4680      	mov	r8, r0
 800adde:	4689      	mov	r9, r1
 800ade0:	9b04      	ldr	r3, [sp, #16]
 800ade2:	b1bb      	cbz	r3, 800ae14 <_strtod_l+0x604>
 800ade4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ade8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800adec:	2b00      	cmp	r3, #0
 800adee:	4649      	mov	r1, r9
 800adf0:	dd10      	ble.n	800ae14 <_strtod_l+0x604>
 800adf2:	2b1f      	cmp	r3, #31
 800adf4:	f340 811e 	ble.w	800b034 <_strtod_l+0x824>
 800adf8:	2b34      	cmp	r3, #52	; 0x34
 800adfa:	bfde      	ittt	le
 800adfc:	f04f 33ff 	movle.w	r3, #4294967295
 800ae00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ae04:	4093      	lslle	r3, r2
 800ae06:	f04f 0800 	mov.w	r8, #0
 800ae0a:	bfcc      	ite	gt
 800ae0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ae10:	ea03 0901 	andle.w	r9, r3, r1
 800ae14:	2200      	movs	r2, #0
 800ae16:	2300      	movs	r3, #0
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	f7f5 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d1a6      	bne.n	800ad72 <_strtod_l+0x562>
 800ae24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	465a      	mov	r2, fp
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff f8cc 	bl	8009fcc <__s2b>
 800ae34:	9009      	str	r0, [sp, #36]	; 0x24
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f43f af2a 	beq.w	800ac90 <_strtod_l+0x480>
 800ae3c:	9a08      	ldr	r2, [sp, #32]
 800ae3e:	9b05      	ldr	r3, [sp, #20]
 800ae40:	2a00      	cmp	r2, #0
 800ae42:	eba3 0307 	sub.w	r3, r3, r7
 800ae46:	bfa8      	it	ge
 800ae48:	2300      	movge	r3, #0
 800ae4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae4c:	2500      	movs	r5, #0
 800ae4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae52:	9312      	str	r3, [sp, #72]	; 0x48
 800ae54:	46ab      	mov	fp, r5
 800ae56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae58:	4620      	mov	r0, r4
 800ae5a:	6859      	ldr	r1, [r3, #4]
 800ae5c:	f7ff f80e 	bl	8009e7c <_Balloc>
 800ae60:	9005      	str	r0, [sp, #20]
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f43f af18 	beq.w	800ac98 <_strtod_l+0x488>
 800ae68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	3202      	adds	r2, #2
 800ae6e:	f103 010c 	add.w	r1, r3, #12
 800ae72:	0092      	lsls	r2, r2, #2
 800ae74:	300c      	adds	r0, #12
 800ae76:	f000 fd87 	bl	800b988 <memcpy>
 800ae7a:	ec49 8b10 	vmov	d0, r8, r9
 800ae7e:	aa18      	add	r2, sp, #96	; 0x60
 800ae80:	a917      	add	r1, sp, #92	; 0x5c
 800ae82:	4620      	mov	r0, r4
 800ae84:	f7ff fbd6 	bl	800a634 <__d2b>
 800ae88:	ec49 8b18 	vmov	d8, r8, r9
 800ae8c:	9016      	str	r0, [sp, #88]	; 0x58
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f43f af02 	beq.w	800ac98 <_strtod_l+0x488>
 800ae94:	2101      	movs	r1, #1
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff f930 	bl	800a0fc <__i2b>
 800ae9c:	4683      	mov	fp, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f43f aefa 	beq.w	800ac98 <_strtod_l+0x488>
 800aea4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aea6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	bfab      	itete	ge
 800aeac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aeae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aeb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aeb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aeb6:	bfac      	ite	ge
 800aeb8:	eb06 0a03 	addge.w	sl, r6, r3
 800aebc:	1b9f      	sublt	r7, r3, r6
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	1af6      	subs	r6, r6, r3
 800aec2:	4416      	add	r6, r2
 800aec4:	4ba0      	ldr	r3, [pc, #640]	; (800b148 <_strtod_l+0x938>)
 800aec6:	3e01      	subs	r6, #1
 800aec8:	429e      	cmp	r6, r3
 800aeca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aece:	f280 80c4 	bge.w	800b05a <_strtod_l+0x84a>
 800aed2:	1b9b      	subs	r3, r3, r6
 800aed4:	2b1f      	cmp	r3, #31
 800aed6:	eba2 0203 	sub.w	r2, r2, r3
 800aeda:	f04f 0101 	mov.w	r1, #1
 800aede:	f300 80b0 	bgt.w	800b042 <_strtod_l+0x832>
 800aee2:	fa01 f303 	lsl.w	r3, r1, r3
 800aee6:	930e      	str	r3, [sp, #56]	; 0x38
 800aee8:	2300      	movs	r3, #0
 800aeea:	930d      	str	r3, [sp, #52]	; 0x34
 800aeec:	eb0a 0602 	add.w	r6, sl, r2
 800aef0:	9b04      	ldr	r3, [sp, #16]
 800aef2:	45b2      	cmp	sl, r6
 800aef4:	4417      	add	r7, r2
 800aef6:	441f      	add	r7, r3
 800aef8:	4653      	mov	r3, sl
 800aefa:	bfa8      	it	ge
 800aefc:	4633      	movge	r3, r6
 800aefe:	42bb      	cmp	r3, r7
 800af00:	bfa8      	it	ge
 800af02:	463b      	movge	r3, r7
 800af04:	2b00      	cmp	r3, #0
 800af06:	bfc2      	ittt	gt
 800af08:	1af6      	subgt	r6, r6, r3
 800af0a:	1aff      	subgt	r7, r7, r3
 800af0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800af10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af12:	2b00      	cmp	r3, #0
 800af14:	dd17      	ble.n	800af46 <_strtod_l+0x736>
 800af16:	4659      	mov	r1, fp
 800af18:	461a      	mov	r2, r3
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff f9ae 	bl	800a27c <__pow5mult>
 800af20:	4683      	mov	fp, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	f43f aeb8 	beq.w	800ac98 <_strtod_l+0x488>
 800af28:	4601      	mov	r1, r0
 800af2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7ff f8fb 	bl	800a128 <__multiply>
 800af32:	900b      	str	r0, [sp, #44]	; 0x2c
 800af34:	2800      	cmp	r0, #0
 800af36:	f43f aeaf 	beq.w	800ac98 <_strtod_l+0x488>
 800af3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af3c:	4620      	mov	r0, r4
 800af3e:	f7fe ffdd 	bl	8009efc <_Bfree>
 800af42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af44:	9316      	str	r3, [sp, #88]	; 0x58
 800af46:	2e00      	cmp	r6, #0
 800af48:	f300 808c 	bgt.w	800b064 <_strtod_l+0x854>
 800af4c:	9b08      	ldr	r3, [sp, #32]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dd08      	ble.n	800af64 <_strtod_l+0x754>
 800af52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af54:	9905      	ldr	r1, [sp, #20]
 800af56:	4620      	mov	r0, r4
 800af58:	f7ff f990 	bl	800a27c <__pow5mult>
 800af5c:	9005      	str	r0, [sp, #20]
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f ae9a 	beq.w	800ac98 <_strtod_l+0x488>
 800af64:	2f00      	cmp	r7, #0
 800af66:	dd08      	ble.n	800af7a <_strtod_l+0x76a>
 800af68:	9905      	ldr	r1, [sp, #20]
 800af6a:	463a      	mov	r2, r7
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7ff f9df 	bl	800a330 <__lshift>
 800af72:	9005      	str	r0, [sp, #20]
 800af74:	2800      	cmp	r0, #0
 800af76:	f43f ae8f 	beq.w	800ac98 <_strtod_l+0x488>
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	dd08      	ble.n	800af92 <_strtod_l+0x782>
 800af80:	4659      	mov	r1, fp
 800af82:	4652      	mov	r2, sl
 800af84:	4620      	mov	r0, r4
 800af86:	f7ff f9d3 	bl	800a330 <__lshift>
 800af8a:	4683      	mov	fp, r0
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f43f ae83 	beq.w	800ac98 <_strtod_l+0x488>
 800af92:	9a05      	ldr	r2, [sp, #20]
 800af94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af96:	4620      	mov	r0, r4
 800af98:	f7ff fa52 	bl	800a440 <__mdiff>
 800af9c:	4605      	mov	r5, r0
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f43f ae7a 	beq.w	800ac98 <_strtod_l+0x488>
 800afa4:	68c3      	ldr	r3, [r0, #12]
 800afa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa8:	2300      	movs	r3, #0
 800afaa:	60c3      	str	r3, [r0, #12]
 800afac:	4659      	mov	r1, fp
 800afae:	f7ff fa2b 	bl	800a408 <__mcmp>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	da60      	bge.n	800b078 <_strtod_l+0x868>
 800afb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb8:	ea53 0308 	orrs.w	r3, r3, r8
 800afbc:	f040 8084 	bne.w	800b0c8 <_strtod_l+0x8b8>
 800afc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d17f      	bne.n	800b0c8 <_strtod_l+0x8b8>
 800afc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afcc:	0d1b      	lsrs	r3, r3, #20
 800afce:	051b      	lsls	r3, r3, #20
 800afd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800afd4:	d978      	bls.n	800b0c8 <_strtod_l+0x8b8>
 800afd6:	696b      	ldr	r3, [r5, #20]
 800afd8:	b913      	cbnz	r3, 800afe0 <_strtod_l+0x7d0>
 800afda:	692b      	ldr	r3, [r5, #16]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	dd73      	ble.n	800b0c8 <_strtod_l+0x8b8>
 800afe0:	4629      	mov	r1, r5
 800afe2:	2201      	movs	r2, #1
 800afe4:	4620      	mov	r0, r4
 800afe6:	f7ff f9a3 	bl	800a330 <__lshift>
 800afea:	4659      	mov	r1, fp
 800afec:	4605      	mov	r5, r0
 800afee:	f7ff fa0b 	bl	800a408 <__mcmp>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	dd68      	ble.n	800b0c8 <_strtod_l+0x8b8>
 800aff6:	9904      	ldr	r1, [sp, #16]
 800aff8:	4a54      	ldr	r2, [pc, #336]	; (800b14c <_strtod_l+0x93c>)
 800affa:	464b      	mov	r3, r9
 800affc:	2900      	cmp	r1, #0
 800affe:	f000 8084 	beq.w	800b10a <_strtod_l+0x8fa>
 800b002:	ea02 0109 	and.w	r1, r2, r9
 800b006:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b00a:	dc7e      	bgt.n	800b10a <_strtod_l+0x8fa>
 800b00c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b010:	f77f aeb3 	ble.w	800ad7a <_strtod_l+0x56a>
 800b014:	4b4e      	ldr	r3, [pc, #312]	; (800b150 <_strtod_l+0x940>)
 800b016:	4640      	mov	r0, r8
 800b018:	4649      	mov	r1, r9
 800b01a:	2200      	movs	r2, #0
 800b01c:	f7f5 faec 	bl	80005f8 <__aeabi_dmul>
 800b020:	4b4a      	ldr	r3, [pc, #296]	; (800b14c <_strtod_l+0x93c>)
 800b022:	400b      	ands	r3, r1
 800b024:	4680      	mov	r8, r0
 800b026:	4689      	mov	r9, r1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f47f ae3f 	bne.w	800acac <_strtod_l+0x49c>
 800b02e:	2322      	movs	r3, #34	; 0x22
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	e63b      	b.n	800acac <_strtod_l+0x49c>
 800b034:	f04f 32ff 	mov.w	r2, #4294967295
 800b038:	fa02 f303 	lsl.w	r3, r2, r3
 800b03c:	ea03 0808 	and.w	r8, r3, r8
 800b040:	e6e8      	b.n	800ae14 <_strtod_l+0x604>
 800b042:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b046:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b04a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b04e:	36e2      	adds	r6, #226	; 0xe2
 800b050:	fa01 f306 	lsl.w	r3, r1, r6
 800b054:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b058:	e748      	b.n	800aeec <_strtod_l+0x6dc>
 800b05a:	2100      	movs	r1, #0
 800b05c:	2301      	movs	r3, #1
 800b05e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b062:	e743      	b.n	800aeec <_strtod_l+0x6dc>
 800b064:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b066:	4632      	mov	r2, r6
 800b068:	4620      	mov	r0, r4
 800b06a:	f7ff f961 	bl	800a330 <__lshift>
 800b06e:	9016      	str	r0, [sp, #88]	; 0x58
 800b070:	2800      	cmp	r0, #0
 800b072:	f47f af6b 	bne.w	800af4c <_strtod_l+0x73c>
 800b076:	e60f      	b.n	800ac98 <_strtod_l+0x488>
 800b078:	46ca      	mov	sl, r9
 800b07a:	d171      	bne.n	800b160 <_strtod_l+0x950>
 800b07c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b07e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b082:	b352      	cbz	r2, 800b0da <_strtod_l+0x8ca>
 800b084:	4a33      	ldr	r2, [pc, #204]	; (800b154 <_strtod_l+0x944>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d12a      	bne.n	800b0e0 <_strtod_l+0x8d0>
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	4641      	mov	r1, r8
 800b08e:	b1fb      	cbz	r3, 800b0d0 <_strtod_l+0x8c0>
 800b090:	4b2e      	ldr	r3, [pc, #184]	; (800b14c <_strtod_l+0x93c>)
 800b092:	ea09 0303 	and.w	r3, r9, r3
 800b096:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b09a:	f04f 32ff 	mov.w	r2, #4294967295
 800b09e:	d81a      	bhi.n	800b0d6 <_strtod_l+0x8c6>
 800b0a0:	0d1b      	lsrs	r3, r3, #20
 800b0a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0aa:	4299      	cmp	r1, r3
 800b0ac:	d118      	bne.n	800b0e0 <_strtod_l+0x8d0>
 800b0ae:	4b2a      	ldr	r3, [pc, #168]	; (800b158 <_strtod_l+0x948>)
 800b0b0:	459a      	cmp	sl, r3
 800b0b2:	d102      	bne.n	800b0ba <_strtod_l+0x8aa>
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	f43f adef 	beq.w	800ac98 <_strtod_l+0x488>
 800b0ba:	4b24      	ldr	r3, [pc, #144]	; (800b14c <_strtod_l+0x93c>)
 800b0bc:	ea0a 0303 	and.w	r3, sl, r3
 800b0c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b0c4:	f04f 0800 	mov.w	r8, #0
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1a2      	bne.n	800b014 <_strtod_l+0x804>
 800b0ce:	e5ed      	b.n	800acac <_strtod_l+0x49c>
 800b0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d4:	e7e9      	b.n	800b0aa <_strtod_l+0x89a>
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	e7e7      	b.n	800b0aa <_strtod_l+0x89a>
 800b0da:	ea53 0308 	orrs.w	r3, r3, r8
 800b0de:	d08a      	beq.n	800aff6 <_strtod_l+0x7e6>
 800b0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0e2:	b1e3      	cbz	r3, 800b11e <_strtod_l+0x90e>
 800b0e4:	ea13 0f0a 	tst.w	r3, sl
 800b0e8:	d0ee      	beq.n	800b0c8 <_strtod_l+0x8b8>
 800b0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ec:	9a04      	ldr	r2, [sp, #16]
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	b1c3      	cbz	r3, 800b126 <_strtod_l+0x916>
 800b0f4:	f7ff fb6f 	bl	800a7d6 <sulp>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	ec51 0b18 	vmov	r0, r1, d8
 800b100:	f7f5 f8c4 	bl	800028c <__adddf3>
 800b104:	4680      	mov	r8, r0
 800b106:	4689      	mov	r9, r1
 800b108:	e7de      	b.n	800b0c8 <_strtod_l+0x8b8>
 800b10a:	4013      	ands	r3, r2
 800b10c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b110:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b114:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b118:	f04f 38ff 	mov.w	r8, #4294967295
 800b11c:	e7d4      	b.n	800b0c8 <_strtod_l+0x8b8>
 800b11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b120:	ea13 0f08 	tst.w	r3, r8
 800b124:	e7e0      	b.n	800b0e8 <_strtod_l+0x8d8>
 800b126:	f7ff fb56 	bl	800a7d6 <sulp>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	ec51 0b18 	vmov	r0, r1, d8
 800b132:	f7f5 f8a9 	bl	8000288 <__aeabi_dsub>
 800b136:	2200      	movs	r2, #0
 800b138:	2300      	movs	r3, #0
 800b13a:	4680      	mov	r8, r0
 800b13c:	4689      	mov	r9, r1
 800b13e:	f7f5 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b142:	2800      	cmp	r0, #0
 800b144:	d0c0      	beq.n	800b0c8 <_strtod_l+0x8b8>
 800b146:	e618      	b.n	800ad7a <_strtod_l+0x56a>
 800b148:	fffffc02 	.word	0xfffffc02
 800b14c:	7ff00000 	.word	0x7ff00000
 800b150:	39500000 	.word	0x39500000
 800b154:	000fffff 	.word	0x000fffff
 800b158:	7fefffff 	.word	0x7fefffff
 800b15c:	0800cb00 	.word	0x0800cb00
 800b160:	4659      	mov	r1, fp
 800b162:	4628      	mov	r0, r5
 800b164:	f7ff fac0 	bl	800a6e8 <__ratio>
 800b168:	ec57 6b10 	vmov	r6, r7, d0
 800b16c:	ee10 0a10 	vmov	r0, s0
 800b170:	2200      	movs	r2, #0
 800b172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b176:	4639      	mov	r1, r7
 800b178:	f7f5 fcba 	bl	8000af0 <__aeabi_dcmple>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d071      	beq.n	800b264 <_strtod_l+0xa54>
 800b180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b182:	2b00      	cmp	r3, #0
 800b184:	d17c      	bne.n	800b280 <_strtod_l+0xa70>
 800b186:	f1b8 0f00 	cmp.w	r8, #0
 800b18a:	d15a      	bne.n	800b242 <_strtod_l+0xa32>
 800b18c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b190:	2b00      	cmp	r3, #0
 800b192:	d15d      	bne.n	800b250 <_strtod_l+0xa40>
 800b194:	4b90      	ldr	r3, [pc, #576]	; (800b3d8 <_strtod_l+0xbc8>)
 800b196:	2200      	movs	r2, #0
 800b198:	4630      	mov	r0, r6
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d15c      	bne.n	800b25e <_strtod_l+0xa4e>
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4b8c      	ldr	r3, [pc, #560]	; (800b3dc <_strtod_l+0xbcc>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f7f5 fa24 	bl	80005f8 <__aeabi_dmul>
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b1b8:	9606      	str	r6, [sp, #24]
 800b1ba:	9307      	str	r3, [sp, #28]
 800b1bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1c4:	4b86      	ldr	r3, [pc, #536]	; (800b3e0 <_strtod_l+0xbd0>)
 800b1c6:	ea0a 0303 	and.w	r3, sl, r3
 800b1ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b1cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1ce:	4b85      	ldr	r3, [pc, #532]	; (800b3e4 <_strtod_l+0xbd4>)
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	f040 8090 	bne.w	800b2f6 <_strtod_l+0xae6>
 800b1d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b1da:	ec49 8b10 	vmov	d0, r8, r9
 800b1de:	f7ff f9b9 	bl	800a554 <__ulp>
 800b1e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1e6:	ec51 0b10 	vmov	r0, r1, d0
 800b1ea:	f7f5 fa05 	bl	80005f8 <__aeabi_dmul>
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	f7f5 f84b 	bl	800028c <__adddf3>
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4979      	ldr	r1, [pc, #484]	; (800b3e0 <_strtod_l+0xbd0>)
 800b1fa:	4a7b      	ldr	r2, [pc, #492]	; (800b3e8 <_strtod_l+0xbd8>)
 800b1fc:	4019      	ands	r1, r3
 800b1fe:	4291      	cmp	r1, r2
 800b200:	4680      	mov	r8, r0
 800b202:	d944      	bls.n	800b28e <_strtod_l+0xa7e>
 800b204:	ee18 2a90 	vmov	r2, s17
 800b208:	4b78      	ldr	r3, [pc, #480]	; (800b3ec <_strtod_l+0xbdc>)
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d104      	bne.n	800b218 <_strtod_l+0xa08>
 800b20e:	ee18 3a10 	vmov	r3, s16
 800b212:	3301      	adds	r3, #1
 800b214:	f43f ad40 	beq.w	800ac98 <_strtod_l+0x488>
 800b218:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b3ec <_strtod_l+0xbdc>
 800b21c:	f04f 38ff 	mov.w	r8, #4294967295
 800b220:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b222:	4620      	mov	r0, r4
 800b224:	f7fe fe6a 	bl	8009efc <_Bfree>
 800b228:	9905      	ldr	r1, [sp, #20]
 800b22a:	4620      	mov	r0, r4
 800b22c:	f7fe fe66 	bl	8009efc <_Bfree>
 800b230:	4659      	mov	r1, fp
 800b232:	4620      	mov	r0, r4
 800b234:	f7fe fe62 	bl	8009efc <_Bfree>
 800b238:	4629      	mov	r1, r5
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7fe fe5e 	bl	8009efc <_Bfree>
 800b240:	e609      	b.n	800ae56 <_strtod_l+0x646>
 800b242:	f1b8 0f01 	cmp.w	r8, #1
 800b246:	d103      	bne.n	800b250 <_strtod_l+0xa40>
 800b248:	f1b9 0f00 	cmp.w	r9, #0
 800b24c:	f43f ad95 	beq.w	800ad7a <_strtod_l+0x56a>
 800b250:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b3a8 <_strtod_l+0xb98>
 800b254:	4f60      	ldr	r7, [pc, #384]	; (800b3d8 <_strtod_l+0xbc8>)
 800b256:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b25a:	2600      	movs	r6, #0
 800b25c:	e7ae      	b.n	800b1bc <_strtod_l+0x9ac>
 800b25e:	4f5f      	ldr	r7, [pc, #380]	; (800b3dc <_strtod_l+0xbcc>)
 800b260:	2600      	movs	r6, #0
 800b262:	e7a7      	b.n	800b1b4 <_strtod_l+0x9a4>
 800b264:	4b5d      	ldr	r3, [pc, #372]	; (800b3dc <_strtod_l+0xbcc>)
 800b266:	4630      	mov	r0, r6
 800b268:	4639      	mov	r1, r7
 800b26a:	2200      	movs	r2, #0
 800b26c:	f7f5 f9c4 	bl	80005f8 <__aeabi_dmul>
 800b270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d09c      	beq.n	800b1b4 <_strtod_l+0x9a4>
 800b27a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b27e:	e79d      	b.n	800b1bc <_strtod_l+0x9ac>
 800b280:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b3b0 <_strtod_l+0xba0>
 800b284:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b288:	ec57 6b17 	vmov	r6, r7, d7
 800b28c:	e796      	b.n	800b1bc <_strtod_l+0x9ac>
 800b28e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b292:	9b04      	ldr	r3, [sp, #16]
 800b294:	46ca      	mov	sl, r9
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1c2      	bne.n	800b220 <_strtod_l+0xa10>
 800b29a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2a0:	0d1b      	lsrs	r3, r3, #20
 800b2a2:	051b      	lsls	r3, r3, #20
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d1bb      	bne.n	800b220 <_strtod_l+0xa10>
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 fd04 	bl	8000cb8 <__aeabi_d2lz>
 800b2b0:	f7f5 f974 	bl	800059c <__aeabi_l2d>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f4 ffe4 	bl	8000288 <__aeabi_dsub>
 800b2c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2c6:	ea43 0308 	orr.w	r3, r3, r8
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	460f      	mov	r7, r1
 800b2d0:	d054      	beq.n	800b37c <_strtod_l+0xb6c>
 800b2d2:	a339      	add	r3, pc, #228	; (adr r3, 800b3b8 <_strtod_l+0xba8>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f5 fc00 	bl	8000adc <__aeabi_dcmplt>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	f47f ace5 	bne.w	800acac <_strtod_l+0x49c>
 800b2e2:	a337      	add	r3, pc, #220	; (adr r3, 800b3c0 <_strtod_l+0xbb0>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 fc14 	bl	8000b18 <__aeabi_dcmpgt>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d095      	beq.n	800b220 <_strtod_l+0xa10>
 800b2f4:	e4da      	b.n	800acac <_strtod_l+0x49c>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	b333      	cbz	r3, 800b348 <_strtod_l+0xb38>
 800b2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b300:	d822      	bhi.n	800b348 <_strtod_l+0xb38>
 800b302:	a331      	add	r3, pc, #196	; (adr r3, 800b3c8 <_strtod_l+0xbb8>)
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	4630      	mov	r0, r6
 800b30a:	4639      	mov	r1, r7
 800b30c:	f7f5 fbf0 	bl	8000af0 <__aeabi_dcmple>
 800b310:	b1a0      	cbz	r0, 800b33c <_strtod_l+0xb2c>
 800b312:	4639      	mov	r1, r7
 800b314:	4630      	mov	r0, r6
 800b316:	f7f5 fc47 	bl	8000ba8 <__aeabi_d2uiz>
 800b31a:	2801      	cmp	r0, #1
 800b31c:	bf38      	it	cc
 800b31e:	2001      	movcc	r0, #1
 800b320:	f7f5 f8f0 	bl	8000504 <__aeabi_ui2d>
 800b324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	bb23      	cbnz	r3, 800b376 <_strtod_l+0xb66>
 800b32c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b330:	9010      	str	r0, [sp, #64]	; 0x40
 800b332:	9311      	str	r3, [sp, #68]	; 0x44
 800b334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b338:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b33e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b340:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	930f      	str	r3, [sp, #60]	; 0x3c
 800b348:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b34c:	eeb0 0a48 	vmov.f32	s0, s16
 800b350:	eef0 0a68 	vmov.f32	s1, s17
 800b354:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b358:	f7ff f8fc 	bl	800a554 <__ulp>
 800b35c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b360:	ec53 2b10 	vmov	r2, r3, d0
 800b364:	f7f5 f948 	bl	80005f8 <__aeabi_dmul>
 800b368:	ec53 2b18 	vmov	r2, r3, d8
 800b36c:	f7f4 ff8e 	bl	800028c <__adddf3>
 800b370:	4680      	mov	r8, r0
 800b372:	4689      	mov	r9, r1
 800b374:	e78d      	b.n	800b292 <_strtod_l+0xa82>
 800b376:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b37a:	e7db      	b.n	800b334 <_strtod_l+0xb24>
 800b37c:	a314      	add	r3, pc, #80	; (adr r3, 800b3d0 <_strtod_l+0xbc0>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f5 fbab 	bl	8000adc <__aeabi_dcmplt>
 800b386:	e7b3      	b.n	800b2f0 <_strtod_l+0xae0>
 800b388:	2300      	movs	r3, #0
 800b38a:	930a      	str	r3, [sp, #40]	; 0x28
 800b38c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	f7ff ba7c 	b.w	800a88e <_strtod_l+0x7e>
 800b396:	2a65      	cmp	r2, #101	; 0x65
 800b398:	f43f ab75 	beq.w	800aa86 <_strtod_l+0x276>
 800b39c:	2a45      	cmp	r2, #69	; 0x45
 800b39e:	f43f ab72 	beq.w	800aa86 <_strtod_l+0x276>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f7ff bbaa 	b.w	800aafc <_strtod_l+0x2ec>
 800b3a8:	00000000 	.word	0x00000000
 800b3ac:	bff00000 	.word	0xbff00000
 800b3b0:	00000000 	.word	0x00000000
 800b3b4:	3ff00000 	.word	0x3ff00000
 800b3b8:	94a03595 	.word	0x94a03595
 800b3bc:	3fdfffff 	.word	0x3fdfffff
 800b3c0:	35afe535 	.word	0x35afe535
 800b3c4:	3fe00000 	.word	0x3fe00000
 800b3c8:	ffc00000 	.word	0xffc00000
 800b3cc:	41dfffff 	.word	0x41dfffff
 800b3d0:	94a03595 	.word	0x94a03595
 800b3d4:	3fcfffff 	.word	0x3fcfffff
 800b3d8:	3ff00000 	.word	0x3ff00000
 800b3dc:	3fe00000 	.word	0x3fe00000
 800b3e0:	7ff00000 	.word	0x7ff00000
 800b3e4:	7fe00000 	.word	0x7fe00000
 800b3e8:	7c9fffff 	.word	0x7c9fffff
 800b3ec:	7fefffff 	.word	0x7fefffff

0800b3f0 <_strtod_r>:
 800b3f0:	4b01      	ldr	r3, [pc, #4]	; (800b3f8 <_strtod_r+0x8>)
 800b3f2:	f7ff ba0d 	b.w	800a810 <_strtod_l>
 800b3f6:	bf00      	nop
 800b3f8:	20000068 	.word	0x20000068

0800b3fc <_strtol_l.constprop.0>:
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b402:	d001      	beq.n	800b408 <_strtol_l.constprop.0+0xc>
 800b404:	2b24      	cmp	r3, #36	; 0x24
 800b406:	d906      	bls.n	800b416 <_strtol_l.constprop.0+0x1a>
 800b408:	f7fd fd88 	bl	8008f1c <__errno>
 800b40c:	2316      	movs	r3, #22
 800b40e:	6003      	str	r3, [r0, #0]
 800b410:	2000      	movs	r0, #0
 800b412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b416:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4fc <_strtol_l.constprop.0+0x100>
 800b41a:	460d      	mov	r5, r1
 800b41c:	462e      	mov	r6, r5
 800b41e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b422:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b426:	f017 0708 	ands.w	r7, r7, #8
 800b42a:	d1f7      	bne.n	800b41c <_strtol_l.constprop.0+0x20>
 800b42c:	2c2d      	cmp	r4, #45	; 0x2d
 800b42e:	d132      	bne.n	800b496 <_strtol_l.constprop.0+0x9a>
 800b430:	782c      	ldrb	r4, [r5, #0]
 800b432:	2701      	movs	r7, #1
 800b434:	1cb5      	adds	r5, r6, #2
 800b436:	2b00      	cmp	r3, #0
 800b438:	d05b      	beq.n	800b4f2 <_strtol_l.constprop.0+0xf6>
 800b43a:	2b10      	cmp	r3, #16
 800b43c:	d109      	bne.n	800b452 <_strtol_l.constprop.0+0x56>
 800b43e:	2c30      	cmp	r4, #48	; 0x30
 800b440:	d107      	bne.n	800b452 <_strtol_l.constprop.0+0x56>
 800b442:	782c      	ldrb	r4, [r5, #0]
 800b444:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b448:	2c58      	cmp	r4, #88	; 0x58
 800b44a:	d14d      	bne.n	800b4e8 <_strtol_l.constprop.0+0xec>
 800b44c:	786c      	ldrb	r4, [r5, #1]
 800b44e:	2310      	movs	r3, #16
 800b450:	3502      	adds	r5, #2
 800b452:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b456:	f108 38ff 	add.w	r8, r8, #4294967295
 800b45a:	f04f 0e00 	mov.w	lr, #0
 800b45e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b462:	4676      	mov	r6, lr
 800b464:	fb03 8a19 	mls	sl, r3, r9, r8
 800b468:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b46c:	f1bc 0f09 	cmp.w	ip, #9
 800b470:	d816      	bhi.n	800b4a0 <_strtol_l.constprop.0+0xa4>
 800b472:	4664      	mov	r4, ip
 800b474:	42a3      	cmp	r3, r4
 800b476:	dd24      	ble.n	800b4c2 <_strtol_l.constprop.0+0xc6>
 800b478:	f1be 3fff 	cmp.w	lr, #4294967295
 800b47c:	d008      	beq.n	800b490 <_strtol_l.constprop.0+0x94>
 800b47e:	45b1      	cmp	r9, r6
 800b480:	d31c      	bcc.n	800b4bc <_strtol_l.constprop.0+0xc0>
 800b482:	d101      	bne.n	800b488 <_strtol_l.constprop.0+0x8c>
 800b484:	45a2      	cmp	sl, r4
 800b486:	db19      	blt.n	800b4bc <_strtol_l.constprop.0+0xc0>
 800b488:	fb06 4603 	mla	r6, r6, r3, r4
 800b48c:	f04f 0e01 	mov.w	lr, #1
 800b490:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b494:	e7e8      	b.n	800b468 <_strtol_l.constprop.0+0x6c>
 800b496:	2c2b      	cmp	r4, #43	; 0x2b
 800b498:	bf04      	itt	eq
 800b49a:	782c      	ldrbeq	r4, [r5, #0]
 800b49c:	1cb5      	addeq	r5, r6, #2
 800b49e:	e7ca      	b.n	800b436 <_strtol_l.constprop.0+0x3a>
 800b4a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b4a4:	f1bc 0f19 	cmp.w	ip, #25
 800b4a8:	d801      	bhi.n	800b4ae <_strtol_l.constprop.0+0xb2>
 800b4aa:	3c37      	subs	r4, #55	; 0x37
 800b4ac:	e7e2      	b.n	800b474 <_strtol_l.constprop.0+0x78>
 800b4ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4b2:	f1bc 0f19 	cmp.w	ip, #25
 800b4b6:	d804      	bhi.n	800b4c2 <_strtol_l.constprop.0+0xc6>
 800b4b8:	3c57      	subs	r4, #87	; 0x57
 800b4ba:	e7db      	b.n	800b474 <_strtol_l.constprop.0+0x78>
 800b4bc:	f04f 3eff 	mov.w	lr, #4294967295
 800b4c0:	e7e6      	b.n	800b490 <_strtol_l.constprop.0+0x94>
 800b4c2:	f1be 3fff 	cmp.w	lr, #4294967295
 800b4c6:	d105      	bne.n	800b4d4 <_strtol_l.constprop.0+0xd8>
 800b4c8:	2322      	movs	r3, #34	; 0x22
 800b4ca:	6003      	str	r3, [r0, #0]
 800b4cc:	4646      	mov	r6, r8
 800b4ce:	b942      	cbnz	r2, 800b4e2 <_strtol_l.constprop.0+0xe6>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	e79e      	b.n	800b412 <_strtol_l.constprop.0+0x16>
 800b4d4:	b107      	cbz	r7, 800b4d8 <_strtol_l.constprop.0+0xdc>
 800b4d6:	4276      	negs	r6, r6
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	d0f9      	beq.n	800b4d0 <_strtol_l.constprop.0+0xd4>
 800b4dc:	f1be 0f00 	cmp.w	lr, #0
 800b4e0:	d000      	beq.n	800b4e4 <_strtol_l.constprop.0+0xe8>
 800b4e2:	1e69      	subs	r1, r5, #1
 800b4e4:	6011      	str	r1, [r2, #0]
 800b4e6:	e7f3      	b.n	800b4d0 <_strtol_l.constprop.0+0xd4>
 800b4e8:	2430      	movs	r4, #48	; 0x30
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1b1      	bne.n	800b452 <_strtol_l.constprop.0+0x56>
 800b4ee:	2308      	movs	r3, #8
 800b4f0:	e7af      	b.n	800b452 <_strtol_l.constprop.0+0x56>
 800b4f2:	2c30      	cmp	r4, #48	; 0x30
 800b4f4:	d0a5      	beq.n	800b442 <_strtol_l.constprop.0+0x46>
 800b4f6:	230a      	movs	r3, #10
 800b4f8:	e7ab      	b.n	800b452 <_strtol_l.constprop.0+0x56>
 800b4fa:	bf00      	nop
 800b4fc:	0800cb29 	.word	0x0800cb29

0800b500 <_strtol_r>:
 800b500:	f7ff bf7c 	b.w	800b3fc <_strtol_l.constprop.0>

0800b504 <__ssputs_r>:
 800b504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b508:	688e      	ldr	r6, [r1, #8]
 800b50a:	461f      	mov	r7, r3
 800b50c:	42be      	cmp	r6, r7
 800b50e:	680b      	ldr	r3, [r1, #0]
 800b510:	4682      	mov	sl, r0
 800b512:	460c      	mov	r4, r1
 800b514:	4690      	mov	r8, r2
 800b516:	d82c      	bhi.n	800b572 <__ssputs_r+0x6e>
 800b518:	898a      	ldrh	r2, [r1, #12]
 800b51a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b51e:	d026      	beq.n	800b56e <__ssputs_r+0x6a>
 800b520:	6965      	ldr	r5, [r4, #20]
 800b522:	6909      	ldr	r1, [r1, #16]
 800b524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b528:	eba3 0901 	sub.w	r9, r3, r1
 800b52c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b530:	1c7b      	adds	r3, r7, #1
 800b532:	444b      	add	r3, r9
 800b534:	106d      	asrs	r5, r5, #1
 800b536:	429d      	cmp	r5, r3
 800b538:	bf38      	it	cc
 800b53a:	461d      	movcc	r5, r3
 800b53c:	0553      	lsls	r3, r2, #21
 800b53e:	d527      	bpl.n	800b590 <__ssputs_r+0x8c>
 800b540:	4629      	mov	r1, r5
 800b542:	f7fe fc0f 	bl	8009d64 <_malloc_r>
 800b546:	4606      	mov	r6, r0
 800b548:	b360      	cbz	r0, 800b5a4 <__ssputs_r+0xa0>
 800b54a:	6921      	ldr	r1, [r4, #16]
 800b54c:	464a      	mov	r2, r9
 800b54e:	f000 fa1b 	bl	800b988 <memcpy>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	6126      	str	r6, [r4, #16]
 800b560:	6165      	str	r5, [r4, #20]
 800b562:	444e      	add	r6, r9
 800b564:	eba5 0509 	sub.w	r5, r5, r9
 800b568:	6026      	str	r6, [r4, #0]
 800b56a:	60a5      	str	r5, [r4, #8]
 800b56c:	463e      	mov	r6, r7
 800b56e:	42be      	cmp	r6, r7
 800b570:	d900      	bls.n	800b574 <__ssputs_r+0x70>
 800b572:	463e      	mov	r6, r7
 800b574:	6820      	ldr	r0, [r4, #0]
 800b576:	4632      	mov	r2, r6
 800b578:	4641      	mov	r1, r8
 800b57a:	f000 f9c9 	bl	800b910 <memmove>
 800b57e:	68a3      	ldr	r3, [r4, #8]
 800b580:	1b9b      	subs	r3, r3, r6
 800b582:	60a3      	str	r3, [r4, #8]
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	4433      	add	r3, r6
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	2000      	movs	r0, #0
 800b58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b590:	462a      	mov	r2, r5
 800b592:	f000 fdae 	bl	800c0f2 <_realloc_r>
 800b596:	4606      	mov	r6, r0
 800b598:	2800      	cmp	r0, #0
 800b59a:	d1e0      	bne.n	800b55e <__ssputs_r+0x5a>
 800b59c:	6921      	ldr	r1, [r4, #16]
 800b59e:	4650      	mov	r0, sl
 800b5a0:	f7fe fb6c 	bl	8009c7c <_free_r>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	f8ca 3000 	str.w	r3, [sl]
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b0:	81a3      	strh	r3, [r4, #12]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	e7e9      	b.n	800b58c <__ssputs_r+0x88>

0800b5b8 <_svfiprintf_r>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	4698      	mov	r8, r3
 800b5be:	898b      	ldrh	r3, [r1, #12]
 800b5c0:	061b      	lsls	r3, r3, #24
 800b5c2:	b09d      	sub	sp, #116	; 0x74
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	460d      	mov	r5, r1
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	d50e      	bpl.n	800b5ea <_svfiprintf_r+0x32>
 800b5cc:	690b      	ldr	r3, [r1, #16]
 800b5ce:	b963      	cbnz	r3, 800b5ea <_svfiprintf_r+0x32>
 800b5d0:	2140      	movs	r1, #64	; 0x40
 800b5d2:	f7fe fbc7 	bl	8009d64 <_malloc_r>
 800b5d6:	6028      	str	r0, [r5, #0]
 800b5d8:	6128      	str	r0, [r5, #16]
 800b5da:	b920      	cbnz	r0, 800b5e6 <_svfiprintf_r+0x2e>
 800b5dc:	230c      	movs	r3, #12
 800b5de:	603b      	str	r3, [r7, #0]
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	e0d0      	b.n	800b788 <_svfiprintf_r+0x1d0>
 800b5e6:	2340      	movs	r3, #64	; 0x40
 800b5e8:	616b      	str	r3, [r5, #20]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ee:	2320      	movs	r3, #32
 800b5f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5f8:	2330      	movs	r3, #48	; 0x30
 800b5fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7a0 <_svfiprintf_r+0x1e8>
 800b5fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b602:	f04f 0901 	mov.w	r9, #1
 800b606:	4623      	mov	r3, r4
 800b608:	469a      	mov	sl, r3
 800b60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b60e:	b10a      	cbz	r2, 800b614 <_svfiprintf_r+0x5c>
 800b610:	2a25      	cmp	r2, #37	; 0x25
 800b612:	d1f9      	bne.n	800b608 <_svfiprintf_r+0x50>
 800b614:	ebba 0b04 	subs.w	fp, sl, r4
 800b618:	d00b      	beq.n	800b632 <_svfiprintf_r+0x7a>
 800b61a:	465b      	mov	r3, fp
 800b61c:	4622      	mov	r2, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	4638      	mov	r0, r7
 800b622:	f7ff ff6f 	bl	800b504 <__ssputs_r>
 800b626:	3001      	adds	r0, #1
 800b628:	f000 80a9 	beq.w	800b77e <_svfiprintf_r+0x1c6>
 800b62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b62e:	445a      	add	r2, fp
 800b630:	9209      	str	r2, [sp, #36]	; 0x24
 800b632:	f89a 3000 	ldrb.w	r3, [sl]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 80a1 	beq.w	800b77e <_svfiprintf_r+0x1c6>
 800b63c:	2300      	movs	r3, #0
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295
 800b642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b646:	f10a 0a01 	add.w	sl, sl, #1
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	9307      	str	r3, [sp, #28]
 800b64e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b652:	931a      	str	r3, [sp, #104]	; 0x68
 800b654:	4654      	mov	r4, sl
 800b656:	2205      	movs	r2, #5
 800b658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65c:	4850      	ldr	r0, [pc, #320]	; (800b7a0 <_svfiprintf_r+0x1e8>)
 800b65e:	f7f4 fdb7 	bl	80001d0 <memchr>
 800b662:	9a04      	ldr	r2, [sp, #16]
 800b664:	b9d8      	cbnz	r0, 800b69e <_svfiprintf_r+0xe6>
 800b666:	06d0      	lsls	r0, r2, #27
 800b668:	bf44      	itt	mi
 800b66a:	2320      	movmi	r3, #32
 800b66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b670:	0711      	lsls	r1, r2, #28
 800b672:	bf44      	itt	mi
 800b674:	232b      	movmi	r3, #43	; 0x2b
 800b676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b67a:	f89a 3000 	ldrb.w	r3, [sl]
 800b67e:	2b2a      	cmp	r3, #42	; 0x2a
 800b680:	d015      	beq.n	800b6ae <_svfiprintf_r+0xf6>
 800b682:	9a07      	ldr	r2, [sp, #28]
 800b684:	4654      	mov	r4, sl
 800b686:	2000      	movs	r0, #0
 800b688:	f04f 0c0a 	mov.w	ip, #10
 800b68c:	4621      	mov	r1, r4
 800b68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b692:	3b30      	subs	r3, #48	; 0x30
 800b694:	2b09      	cmp	r3, #9
 800b696:	d94d      	bls.n	800b734 <_svfiprintf_r+0x17c>
 800b698:	b1b0      	cbz	r0, 800b6c8 <_svfiprintf_r+0x110>
 800b69a:	9207      	str	r2, [sp, #28]
 800b69c:	e014      	b.n	800b6c8 <_svfiprintf_r+0x110>
 800b69e:	eba0 0308 	sub.w	r3, r0, r8
 800b6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	46a2      	mov	sl, r4
 800b6ac:	e7d2      	b.n	800b654 <_svfiprintf_r+0x9c>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	1d19      	adds	r1, r3, #4
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	9103      	str	r1, [sp, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bfbb      	ittet	lt
 800b6ba:	425b      	neglt	r3, r3
 800b6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c0:	9307      	strge	r3, [sp, #28]
 800b6c2:	9307      	strlt	r3, [sp, #28]
 800b6c4:	bfb8      	it	lt
 800b6c6:	9204      	strlt	r2, [sp, #16]
 800b6c8:	7823      	ldrb	r3, [r4, #0]
 800b6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b6cc:	d10c      	bne.n	800b6e8 <_svfiprintf_r+0x130>
 800b6ce:	7863      	ldrb	r3, [r4, #1]
 800b6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d2:	d134      	bne.n	800b73e <_svfiprintf_r+0x186>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	1d1a      	adds	r2, r3, #4
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	9203      	str	r2, [sp, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfb8      	it	lt
 800b6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6e4:	3402      	adds	r4, #2
 800b6e6:	9305      	str	r3, [sp, #20]
 800b6e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b7b0 <_svfiprintf_r+0x1f8>
 800b6ec:	7821      	ldrb	r1, [r4, #0]
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	f7f4 fd6d 	bl	80001d0 <memchr>
 800b6f6:	b138      	cbz	r0, 800b708 <_svfiprintf_r+0x150>
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	eba0 000a 	sub.w	r0, r0, sl
 800b6fe:	2240      	movs	r2, #64	; 0x40
 800b700:	4082      	lsls	r2, r0
 800b702:	4313      	orrs	r3, r2
 800b704:	3401      	adds	r4, #1
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70c:	4825      	ldr	r0, [pc, #148]	; (800b7a4 <_svfiprintf_r+0x1ec>)
 800b70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b712:	2206      	movs	r2, #6
 800b714:	f7f4 fd5c 	bl	80001d0 <memchr>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d038      	beq.n	800b78e <_svfiprintf_r+0x1d6>
 800b71c:	4b22      	ldr	r3, [pc, #136]	; (800b7a8 <_svfiprintf_r+0x1f0>)
 800b71e:	bb1b      	cbnz	r3, 800b768 <_svfiprintf_r+0x1b0>
 800b720:	9b03      	ldr	r3, [sp, #12]
 800b722:	3307      	adds	r3, #7
 800b724:	f023 0307 	bic.w	r3, r3, #7
 800b728:	3308      	adds	r3, #8
 800b72a:	9303      	str	r3, [sp, #12]
 800b72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b72e:	4433      	add	r3, r6
 800b730:	9309      	str	r3, [sp, #36]	; 0x24
 800b732:	e768      	b.n	800b606 <_svfiprintf_r+0x4e>
 800b734:	fb0c 3202 	mla	r2, ip, r2, r3
 800b738:	460c      	mov	r4, r1
 800b73a:	2001      	movs	r0, #1
 800b73c:	e7a6      	b.n	800b68c <_svfiprintf_r+0xd4>
 800b73e:	2300      	movs	r3, #0
 800b740:	3401      	adds	r4, #1
 800b742:	9305      	str	r3, [sp, #20]
 800b744:	4619      	mov	r1, r3
 800b746:	f04f 0c0a 	mov.w	ip, #10
 800b74a:	4620      	mov	r0, r4
 800b74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b750:	3a30      	subs	r2, #48	; 0x30
 800b752:	2a09      	cmp	r2, #9
 800b754:	d903      	bls.n	800b75e <_svfiprintf_r+0x1a6>
 800b756:	2b00      	cmp	r3, #0
 800b758:	d0c6      	beq.n	800b6e8 <_svfiprintf_r+0x130>
 800b75a:	9105      	str	r1, [sp, #20]
 800b75c:	e7c4      	b.n	800b6e8 <_svfiprintf_r+0x130>
 800b75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b762:	4604      	mov	r4, r0
 800b764:	2301      	movs	r3, #1
 800b766:	e7f0      	b.n	800b74a <_svfiprintf_r+0x192>
 800b768:	ab03      	add	r3, sp, #12
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	462a      	mov	r2, r5
 800b76e:	4b0f      	ldr	r3, [pc, #60]	; (800b7ac <_svfiprintf_r+0x1f4>)
 800b770:	a904      	add	r1, sp, #16
 800b772:	4638      	mov	r0, r7
 800b774:	f7fc fc84 	bl	8008080 <_printf_float>
 800b778:	1c42      	adds	r2, r0, #1
 800b77a:	4606      	mov	r6, r0
 800b77c:	d1d6      	bne.n	800b72c <_svfiprintf_r+0x174>
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	065b      	lsls	r3, r3, #25
 800b782:	f53f af2d 	bmi.w	800b5e0 <_svfiprintf_r+0x28>
 800b786:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b788:	b01d      	add	sp, #116	; 0x74
 800b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78e:	ab03      	add	r3, sp, #12
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	462a      	mov	r2, r5
 800b794:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <_svfiprintf_r+0x1f4>)
 800b796:	a904      	add	r1, sp, #16
 800b798:	4638      	mov	r0, r7
 800b79a:	f7fc ff15 	bl	80085c8 <_printf_i>
 800b79e:	e7eb      	b.n	800b778 <_svfiprintf_r+0x1c0>
 800b7a0:	0800cc29 	.word	0x0800cc29
 800b7a4:	0800cc33 	.word	0x0800cc33
 800b7a8:	08008081 	.word	0x08008081
 800b7ac:	0800b505 	.word	0x0800b505
 800b7b0:	0800cc2f 	.word	0x0800cc2f

0800b7b4 <__sflush_r>:
 800b7b4:	898a      	ldrh	r2, [r1, #12]
 800b7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	0710      	lsls	r0, r2, #28
 800b7be:	460c      	mov	r4, r1
 800b7c0:	d458      	bmi.n	800b874 <__sflush_r+0xc0>
 800b7c2:	684b      	ldr	r3, [r1, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dc05      	bgt.n	800b7d4 <__sflush_r+0x20>
 800b7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	dc02      	bgt.n	800b7d4 <__sflush_r+0x20>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d0f9      	beq.n	800b7ce <__sflush_r+0x1a>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7e0:	682f      	ldr	r7, [r5, #0]
 800b7e2:	6a21      	ldr	r1, [r4, #32]
 800b7e4:	602b      	str	r3, [r5, #0]
 800b7e6:	d032      	beq.n	800b84e <__sflush_r+0x9a>
 800b7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	075a      	lsls	r2, r3, #29
 800b7ee:	d505      	bpl.n	800b7fc <__sflush_r+0x48>
 800b7f0:	6863      	ldr	r3, [r4, #4]
 800b7f2:	1ac0      	subs	r0, r0, r3
 800b7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7f6:	b10b      	cbz	r3, 800b7fc <__sflush_r+0x48>
 800b7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7fa:	1ac0      	subs	r0, r0, r3
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	4602      	mov	r2, r0
 800b800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b802:	6a21      	ldr	r1, [r4, #32]
 800b804:	4628      	mov	r0, r5
 800b806:	47b0      	blx	r6
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	d106      	bne.n	800b81c <__sflush_r+0x68>
 800b80e:	6829      	ldr	r1, [r5, #0]
 800b810:	291d      	cmp	r1, #29
 800b812:	d82b      	bhi.n	800b86c <__sflush_r+0xb8>
 800b814:	4a29      	ldr	r2, [pc, #164]	; (800b8bc <__sflush_r+0x108>)
 800b816:	410a      	asrs	r2, r1
 800b818:	07d6      	lsls	r6, r2, #31
 800b81a:	d427      	bmi.n	800b86c <__sflush_r+0xb8>
 800b81c:	2200      	movs	r2, #0
 800b81e:	6062      	str	r2, [r4, #4]
 800b820:	04d9      	lsls	r1, r3, #19
 800b822:	6922      	ldr	r2, [r4, #16]
 800b824:	6022      	str	r2, [r4, #0]
 800b826:	d504      	bpl.n	800b832 <__sflush_r+0x7e>
 800b828:	1c42      	adds	r2, r0, #1
 800b82a:	d101      	bne.n	800b830 <__sflush_r+0x7c>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b903      	cbnz	r3, 800b832 <__sflush_r+0x7e>
 800b830:	6560      	str	r0, [r4, #84]	; 0x54
 800b832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b834:	602f      	str	r7, [r5, #0]
 800b836:	2900      	cmp	r1, #0
 800b838:	d0c9      	beq.n	800b7ce <__sflush_r+0x1a>
 800b83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b83e:	4299      	cmp	r1, r3
 800b840:	d002      	beq.n	800b848 <__sflush_r+0x94>
 800b842:	4628      	mov	r0, r5
 800b844:	f7fe fa1a 	bl	8009c7c <_free_r>
 800b848:	2000      	movs	r0, #0
 800b84a:	6360      	str	r0, [r4, #52]	; 0x34
 800b84c:	e7c0      	b.n	800b7d0 <__sflush_r+0x1c>
 800b84e:	2301      	movs	r3, #1
 800b850:	4628      	mov	r0, r5
 800b852:	47b0      	blx	r6
 800b854:	1c41      	adds	r1, r0, #1
 800b856:	d1c8      	bne.n	800b7ea <__sflush_r+0x36>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0c5      	beq.n	800b7ea <__sflush_r+0x36>
 800b85e:	2b1d      	cmp	r3, #29
 800b860:	d001      	beq.n	800b866 <__sflush_r+0xb2>
 800b862:	2b16      	cmp	r3, #22
 800b864:	d101      	bne.n	800b86a <__sflush_r+0xb6>
 800b866:	602f      	str	r7, [r5, #0]
 800b868:	e7b1      	b.n	800b7ce <__sflush_r+0x1a>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	e7ad      	b.n	800b7d0 <__sflush_r+0x1c>
 800b874:	690f      	ldr	r7, [r1, #16]
 800b876:	2f00      	cmp	r7, #0
 800b878:	d0a9      	beq.n	800b7ce <__sflush_r+0x1a>
 800b87a:	0793      	lsls	r3, r2, #30
 800b87c:	680e      	ldr	r6, [r1, #0]
 800b87e:	bf08      	it	eq
 800b880:	694b      	ldreq	r3, [r1, #20]
 800b882:	600f      	str	r7, [r1, #0]
 800b884:	bf18      	it	ne
 800b886:	2300      	movne	r3, #0
 800b888:	eba6 0807 	sub.w	r8, r6, r7
 800b88c:	608b      	str	r3, [r1, #8]
 800b88e:	f1b8 0f00 	cmp.w	r8, #0
 800b892:	dd9c      	ble.n	800b7ce <__sflush_r+0x1a>
 800b894:	6a21      	ldr	r1, [r4, #32]
 800b896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b898:	4643      	mov	r3, r8
 800b89a:	463a      	mov	r2, r7
 800b89c:	4628      	mov	r0, r5
 800b89e:	47b0      	blx	r6
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	dc06      	bgt.n	800b8b2 <__sflush_r+0xfe>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	e78e      	b.n	800b7d0 <__sflush_r+0x1c>
 800b8b2:	4407      	add	r7, r0
 800b8b4:	eba8 0800 	sub.w	r8, r8, r0
 800b8b8:	e7e9      	b.n	800b88e <__sflush_r+0xda>
 800b8ba:	bf00      	nop
 800b8bc:	dfbffffe 	.word	0xdfbffffe

0800b8c0 <_fflush_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	690b      	ldr	r3, [r1, #16]
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	b913      	cbnz	r3, 800b8d0 <_fflush_r+0x10>
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	b118      	cbz	r0, 800b8da <_fflush_r+0x1a>
 800b8d2:	6a03      	ldr	r3, [r0, #32]
 800b8d4:	b90b      	cbnz	r3, 800b8da <_fflush_r+0x1a>
 800b8d6:	f7fd fa35 	bl	8008d44 <__sinit>
 800b8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0f3      	beq.n	800b8ca <_fflush_r+0xa>
 800b8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8e4:	07d0      	lsls	r0, r2, #31
 800b8e6:	d404      	bmi.n	800b8f2 <_fflush_r+0x32>
 800b8e8:	0599      	lsls	r1, r3, #22
 800b8ea:	d402      	bmi.n	800b8f2 <_fflush_r+0x32>
 800b8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8ee:	f7fd fb40 	bl	8008f72 <__retarget_lock_acquire_recursive>
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	f7ff ff5d 	bl	800b7b4 <__sflush_r>
 800b8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8fc:	07da      	lsls	r2, r3, #31
 800b8fe:	4605      	mov	r5, r0
 800b900:	d4e4      	bmi.n	800b8cc <_fflush_r+0xc>
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	059b      	lsls	r3, r3, #22
 800b906:	d4e1      	bmi.n	800b8cc <_fflush_r+0xc>
 800b908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b90a:	f7fd fb33 	bl	8008f74 <__retarget_lock_release_recursive>
 800b90e:	e7dd      	b.n	800b8cc <_fflush_r+0xc>

0800b910 <memmove>:
 800b910:	4288      	cmp	r0, r1
 800b912:	b510      	push	{r4, lr}
 800b914:	eb01 0402 	add.w	r4, r1, r2
 800b918:	d902      	bls.n	800b920 <memmove+0x10>
 800b91a:	4284      	cmp	r4, r0
 800b91c:	4623      	mov	r3, r4
 800b91e:	d807      	bhi.n	800b930 <memmove+0x20>
 800b920:	1e43      	subs	r3, r0, #1
 800b922:	42a1      	cmp	r1, r4
 800b924:	d008      	beq.n	800b938 <memmove+0x28>
 800b926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b92e:	e7f8      	b.n	800b922 <memmove+0x12>
 800b930:	4402      	add	r2, r0
 800b932:	4601      	mov	r1, r0
 800b934:	428a      	cmp	r2, r1
 800b936:	d100      	bne.n	800b93a <memmove+0x2a>
 800b938:	bd10      	pop	{r4, pc}
 800b93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b942:	e7f7      	b.n	800b934 <memmove+0x24>

0800b944 <strncmp>:
 800b944:	b510      	push	{r4, lr}
 800b946:	b16a      	cbz	r2, 800b964 <strncmp+0x20>
 800b948:	3901      	subs	r1, #1
 800b94a:	1884      	adds	r4, r0, r2
 800b94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b954:	429a      	cmp	r2, r3
 800b956:	d103      	bne.n	800b960 <strncmp+0x1c>
 800b958:	42a0      	cmp	r0, r4
 800b95a:	d001      	beq.n	800b960 <strncmp+0x1c>
 800b95c:	2a00      	cmp	r2, #0
 800b95e:	d1f5      	bne.n	800b94c <strncmp+0x8>
 800b960:	1ad0      	subs	r0, r2, r3
 800b962:	bd10      	pop	{r4, pc}
 800b964:	4610      	mov	r0, r2
 800b966:	e7fc      	b.n	800b962 <strncmp+0x1e>

0800b968 <_sbrk_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4d06      	ldr	r5, [pc, #24]	; (800b984 <_sbrk_r+0x1c>)
 800b96c:	2300      	movs	r3, #0
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	602b      	str	r3, [r5, #0]
 800b974:	f7f6 fa74 	bl	8001e60 <_sbrk>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	d102      	bne.n	800b982 <_sbrk_r+0x1a>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	b103      	cbz	r3, 800b982 <_sbrk_r+0x1a>
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	200005ac 	.word	0x200005ac

0800b988 <memcpy>:
 800b988:	440a      	add	r2, r1
 800b98a:	4291      	cmp	r1, r2
 800b98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b990:	d100      	bne.n	800b994 <memcpy+0xc>
 800b992:	4770      	bx	lr
 800b994:	b510      	push	{r4, lr}
 800b996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b99e:	4291      	cmp	r1, r2
 800b9a0:	d1f9      	bne.n	800b996 <memcpy+0xe>
 800b9a2:	bd10      	pop	{r4, pc}
 800b9a4:	0000      	movs	r0, r0
	...

0800b9a8 <nan>:
 800b9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9b0 <nan+0x8>
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	7ff80000 	.word	0x7ff80000

0800b9b8 <__assert_func>:
 800b9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9ba:	4614      	mov	r4, r2
 800b9bc:	461a      	mov	r2, r3
 800b9be:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <__assert_func+0x2c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	68d8      	ldr	r0, [r3, #12]
 800b9c6:	b14c      	cbz	r4, 800b9dc <__assert_func+0x24>
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <__assert_func+0x30>)
 800b9ca:	9100      	str	r1, [sp, #0]
 800b9cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9d0:	4906      	ldr	r1, [pc, #24]	; (800b9ec <__assert_func+0x34>)
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	f000 fbca 	bl	800c16c <fiprintf>
 800b9d8:	f000 fbda 	bl	800c190 <abort>
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <__assert_func+0x38>)
 800b9de:	461c      	mov	r4, r3
 800b9e0:	e7f3      	b.n	800b9ca <__assert_func+0x12>
 800b9e2:	bf00      	nop
 800b9e4:	20000064 	.word	0x20000064
 800b9e8:	0800cc42 	.word	0x0800cc42
 800b9ec:	0800cc4f 	.word	0x0800cc4f
 800b9f0:	0800cc7d 	.word	0x0800cc7d

0800b9f4 <_calloc_r>:
 800b9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9f6:	fba1 2402 	umull	r2, r4, r1, r2
 800b9fa:	b94c      	cbnz	r4, 800ba10 <_calloc_r+0x1c>
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	9201      	str	r2, [sp, #4]
 800ba00:	f7fe f9b0 	bl	8009d64 <_malloc_r>
 800ba04:	9a01      	ldr	r2, [sp, #4]
 800ba06:	4605      	mov	r5, r0
 800ba08:	b930      	cbnz	r0, 800ba18 <_calloc_r+0x24>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	b003      	add	sp, #12
 800ba0e:	bd30      	pop	{r4, r5, pc}
 800ba10:	220c      	movs	r2, #12
 800ba12:	6002      	str	r2, [r0, #0]
 800ba14:	2500      	movs	r5, #0
 800ba16:	e7f8      	b.n	800ba0a <_calloc_r+0x16>
 800ba18:	4621      	mov	r1, r4
 800ba1a:	f7fd fa2c 	bl	8008e76 <memset>
 800ba1e:	e7f4      	b.n	800ba0a <_calloc_r+0x16>

0800ba20 <rshift>:
 800ba20:	6903      	ldr	r3, [r0, #16]
 800ba22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba2e:	f100 0414 	add.w	r4, r0, #20
 800ba32:	dd45      	ble.n	800bac0 <rshift+0xa0>
 800ba34:	f011 011f 	ands.w	r1, r1, #31
 800ba38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba40:	d10c      	bne.n	800ba5c <rshift+0x3c>
 800ba42:	f100 0710 	add.w	r7, r0, #16
 800ba46:	4629      	mov	r1, r5
 800ba48:	42b1      	cmp	r1, r6
 800ba4a:	d334      	bcc.n	800bab6 <rshift+0x96>
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	1eea      	subs	r2, r5, #3
 800ba52:	4296      	cmp	r6, r2
 800ba54:	bf38      	it	cc
 800ba56:	2300      	movcc	r3, #0
 800ba58:	4423      	add	r3, r4
 800ba5a:	e015      	b.n	800ba88 <rshift+0x68>
 800ba5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba60:	f1c1 0820 	rsb	r8, r1, #32
 800ba64:	40cf      	lsrs	r7, r1
 800ba66:	f105 0e04 	add.w	lr, r5, #4
 800ba6a:	46a1      	mov	r9, r4
 800ba6c:	4576      	cmp	r6, lr
 800ba6e:	46f4      	mov	ip, lr
 800ba70:	d815      	bhi.n	800ba9e <rshift+0x7e>
 800ba72:	1a9a      	subs	r2, r3, r2
 800ba74:	0092      	lsls	r2, r2, #2
 800ba76:	3a04      	subs	r2, #4
 800ba78:	3501      	adds	r5, #1
 800ba7a:	42ae      	cmp	r6, r5
 800ba7c:	bf38      	it	cc
 800ba7e:	2200      	movcc	r2, #0
 800ba80:	18a3      	adds	r3, r4, r2
 800ba82:	50a7      	str	r7, [r4, r2]
 800ba84:	b107      	cbz	r7, 800ba88 <rshift+0x68>
 800ba86:	3304      	adds	r3, #4
 800ba88:	1b1a      	subs	r2, r3, r4
 800ba8a:	42a3      	cmp	r3, r4
 800ba8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba90:	bf08      	it	eq
 800ba92:	2300      	moveq	r3, #0
 800ba94:	6102      	str	r2, [r0, #16]
 800ba96:	bf08      	it	eq
 800ba98:	6143      	streq	r3, [r0, #20]
 800ba9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba9e:	f8dc c000 	ldr.w	ip, [ip]
 800baa2:	fa0c fc08 	lsl.w	ip, ip, r8
 800baa6:	ea4c 0707 	orr.w	r7, ip, r7
 800baaa:	f849 7b04 	str.w	r7, [r9], #4
 800baae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bab2:	40cf      	lsrs	r7, r1
 800bab4:	e7da      	b.n	800ba6c <rshift+0x4c>
 800bab6:	f851 cb04 	ldr.w	ip, [r1], #4
 800baba:	f847 cf04 	str.w	ip, [r7, #4]!
 800babe:	e7c3      	b.n	800ba48 <rshift+0x28>
 800bac0:	4623      	mov	r3, r4
 800bac2:	e7e1      	b.n	800ba88 <rshift+0x68>

0800bac4 <__hexdig_fun>:
 800bac4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bac8:	2b09      	cmp	r3, #9
 800baca:	d802      	bhi.n	800bad2 <__hexdig_fun+0xe>
 800bacc:	3820      	subs	r0, #32
 800bace:	b2c0      	uxtb	r0, r0
 800bad0:	4770      	bx	lr
 800bad2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bad6:	2b05      	cmp	r3, #5
 800bad8:	d801      	bhi.n	800bade <__hexdig_fun+0x1a>
 800bada:	3847      	subs	r0, #71	; 0x47
 800badc:	e7f7      	b.n	800bace <__hexdig_fun+0xa>
 800bade:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d801      	bhi.n	800baea <__hexdig_fun+0x26>
 800bae6:	3827      	subs	r0, #39	; 0x27
 800bae8:	e7f1      	b.n	800bace <__hexdig_fun+0xa>
 800baea:	2000      	movs	r0, #0
 800baec:	4770      	bx	lr
	...

0800baf0 <__gethex>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	4617      	mov	r7, r2
 800baf6:	680a      	ldr	r2, [r1, #0]
 800baf8:	b085      	sub	sp, #20
 800bafa:	f102 0b02 	add.w	fp, r2, #2
 800bafe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb06:	4681      	mov	r9, r0
 800bb08:	468a      	mov	sl, r1
 800bb0a:	9302      	str	r3, [sp, #8]
 800bb0c:	32fe      	adds	r2, #254	; 0xfe
 800bb0e:	eb02 030b 	add.w	r3, r2, fp
 800bb12:	46d8      	mov	r8, fp
 800bb14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	2830      	cmp	r0, #48	; 0x30
 800bb1c:	d0f7      	beq.n	800bb0e <__gethex+0x1e>
 800bb1e:	f7ff ffd1 	bl	800bac4 <__hexdig_fun>
 800bb22:	4604      	mov	r4, r0
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d138      	bne.n	800bb9a <__gethex+0xaa>
 800bb28:	49a7      	ldr	r1, [pc, #668]	; (800bdc8 <__gethex+0x2d8>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	f7ff ff09 	bl	800b944 <strncmp>
 800bb32:	4606      	mov	r6, r0
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d169      	bne.n	800bc0c <__gethex+0x11c>
 800bb38:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bb3c:	465d      	mov	r5, fp
 800bb3e:	f7ff ffc1 	bl	800bac4 <__hexdig_fun>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d064      	beq.n	800bc10 <__gethex+0x120>
 800bb46:	465a      	mov	r2, fp
 800bb48:	7810      	ldrb	r0, [r2, #0]
 800bb4a:	2830      	cmp	r0, #48	; 0x30
 800bb4c:	4690      	mov	r8, r2
 800bb4e:	f102 0201 	add.w	r2, r2, #1
 800bb52:	d0f9      	beq.n	800bb48 <__gethex+0x58>
 800bb54:	f7ff ffb6 	bl	800bac4 <__hexdig_fun>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	fab0 f480 	clz	r4, r0
 800bb5e:	0964      	lsrs	r4, r4, #5
 800bb60:	465e      	mov	r6, fp
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	4642      	mov	r2, r8
 800bb66:	4615      	mov	r5, r2
 800bb68:	3201      	adds	r2, #1
 800bb6a:	7828      	ldrb	r0, [r5, #0]
 800bb6c:	f7ff ffaa 	bl	800bac4 <__hexdig_fun>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d1f8      	bne.n	800bb66 <__gethex+0x76>
 800bb74:	4994      	ldr	r1, [pc, #592]	; (800bdc8 <__gethex+0x2d8>)
 800bb76:	2201      	movs	r2, #1
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7ff fee3 	bl	800b944 <strncmp>
 800bb7e:	b978      	cbnz	r0, 800bba0 <__gethex+0xb0>
 800bb80:	b946      	cbnz	r6, 800bb94 <__gethex+0xa4>
 800bb82:	1c6e      	adds	r6, r5, #1
 800bb84:	4632      	mov	r2, r6
 800bb86:	4615      	mov	r5, r2
 800bb88:	3201      	adds	r2, #1
 800bb8a:	7828      	ldrb	r0, [r5, #0]
 800bb8c:	f7ff ff9a 	bl	800bac4 <__hexdig_fun>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d1f8      	bne.n	800bb86 <__gethex+0x96>
 800bb94:	1b73      	subs	r3, r6, r5
 800bb96:	009e      	lsls	r6, r3, #2
 800bb98:	e004      	b.n	800bba4 <__gethex+0xb4>
 800bb9a:	2400      	movs	r4, #0
 800bb9c:	4626      	mov	r6, r4
 800bb9e:	e7e1      	b.n	800bb64 <__gethex+0x74>
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	d1f7      	bne.n	800bb94 <__gethex+0xa4>
 800bba4:	782b      	ldrb	r3, [r5, #0]
 800bba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbaa:	2b50      	cmp	r3, #80	; 0x50
 800bbac:	d13d      	bne.n	800bc2a <__gethex+0x13a>
 800bbae:	786b      	ldrb	r3, [r5, #1]
 800bbb0:	2b2b      	cmp	r3, #43	; 0x2b
 800bbb2:	d02f      	beq.n	800bc14 <__gethex+0x124>
 800bbb4:	2b2d      	cmp	r3, #45	; 0x2d
 800bbb6:	d031      	beq.n	800bc1c <__gethex+0x12c>
 800bbb8:	1c69      	adds	r1, r5, #1
 800bbba:	f04f 0b00 	mov.w	fp, #0
 800bbbe:	7808      	ldrb	r0, [r1, #0]
 800bbc0:	f7ff ff80 	bl	800bac4 <__hexdig_fun>
 800bbc4:	1e42      	subs	r2, r0, #1
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	2a18      	cmp	r2, #24
 800bbca:	d82e      	bhi.n	800bc2a <__gethex+0x13a>
 800bbcc:	f1a0 0210 	sub.w	r2, r0, #16
 800bbd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbd4:	f7ff ff76 	bl	800bac4 <__hexdig_fun>
 800bbd8:	f100 3cff 	add.w	ip, r0, #4294967295
 800bbdc:	fa5f fc8c 	uxtb.w	ip, ip
 800bbe0:	f1bc 0f18 	cmp.w	ip, #24
 800bbe4:	d91d      	bls.n	800bc22 <__gethex+0x132>
 800bbe6:	f1bb 0f00 	cmp.w	fp, #0
 800bbea:	d000      	beq.n	800bbee <__gethex+0xfe>
 800bbec:	4252      	negs	r2, r2
 800bbee:	4416      	add	r6, r2
 800bbf0:	f8ca 1000 	str.w	r1, [sl]
 800bbf4:	b1dc      	cbz	r4, 800bc2e <__gethex+0x13e>
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bf14      	ite	ne
 800bbfc:	f04f 0800 	movne.w	r8, #0
 800bc00:	f04f 0806 	moveq.w	r8, #6
 800bc04:	4640      	mov	r0, r8
 800bc06:	b005      	add	sp, #20
 800bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0c:	4645      	mov	r5, r8
 800bc0e:	4626      	mov	r6, r4
 800bc10:	2401      	movs	r4, #1
 800bc12:	e7c7      	b.n	800bba4 <__gethex+0xb4>
 800bc14:	f04f 0b00 	mov.w	fp, #0
 800bc18:	1ca9      	adds	r1, r5, #2
 800bc1a:	e7d0      	b.n	800bbbe <__gethex+0xce>
 800bc1c:	f04f 0b01 	mov.w	fp, #1
 800bc20:	e7fa      	b.n	800bc18 <__gethex+0x128>
 800bc22:	230a      	movs	r3, #10
 800bc24:	fb03 0002 	mla	r0, r3, r2, r0
 800bc28:	e7d0      	b.n	800bbcc <__gethex+0xdc>
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	e7e0      	b.n	800bbf0 <__gethex+0x100>
 800bc2e:	eba5 0308 	sub.w	r3, r5, r8
 800bc32:	3b01      	subs	r3, #1
 800bc34:	4621      	mov	r1, r4
 800bc36:	2b07      	cmp	r3, #7
 800bc38:	dc0a      	bgt.n	800bc50 <__gethex+0x160>
 800bc3a:	4648      	mov	r0, r9
 800bc3c:	f7fe f91e 	bl	8009e7c <_Balloc>
 800bc40:	4604      	mov	r4, r0
 800bc42:	b940      	cbnz	r0, 800bc56 <__gethex+0x166>
 800bc44:	4b61      	ldr	r3, [pc, #388]	; (800bdcc <__gethex+0x2dc>)
 800bc46:	4602      	mov	r2, r0
 800bc48:	21e4      	movs	r1, #228	; 0xe4
 800bc4a:	4861      	ldr	r0, [pc, #388]	; (800bdd0 <__gethex+0x2e0>)
 800bc4c:	f7ff feb4 	bl	800b9b8 <__assert_func>
 800bc50:	3101      	adds	r1, #1
 800bc52:	105b      	asrs	r3, r3, #1
 800bc54:	e7ef      	b.n	800bc36 <__gethex+0x146>
 800bc56:	f100 0a14 	add.w	sl, r0, #20
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	495a      	ldr	r1, [pc, #360]	; (800bdc8 <__gethex+0x2d8>)
 800bc5e:	f8cd a004 	str.w	sl, [sp, #4]
 800bc62:	469b      	mov	fp, r3
 800bc64:	45a8      	cmp	r8, r5
 800bc66:	d342      	bcc.n	800bcee <__gethex+0x1fe>
 800bc68:	9801      	ldr	r0, [sp, #4]
 800bc6a:	f840 bb04 	str.w	fp, [r0], #4
 800bc6e:	eba0 000a 	sub.w	r0, r0, sl
 800bc72:	1080      	asrs	r0, r0, #2
 800bc74:	6120      	str	r0, [r4, #16]
 800bc76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bc7a:	4658      	mov	r0, fp
 800bc7c:	f7fe f9f0 	bl	800a060 <__hi0bits>
 800bc80:	683d      	ldr	r5, [r7, #0]
 800bc82:	eba8 0000 	sub.w	r0, r8, r0
 800bc86:	42a8      	cmp	r0, r5
 800bc88:	dd59      	ble.n	800bd3e <__gethex+0x24e>
 800bc8a:	eba0 0805 	sub.w	r8, r0, r5
 800bc8e:	4641      	mov	r1, r8
 800bc90:	4620      	mov	r0, r4
 800bc92:	f7fe fd7f 	bl	800a794 <__any_on>
 800bc96:	4683      	mov	fp, r0
 800bc98:	b1b8      	cbz	r0, 800bcca <__gethex+0x1da>
 800bc9a:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc9e:	1159      	asrs	r1, r3, #5
 800bca0:	f003 021f 	and.w	r2, r3, #31
 800bca4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bca8:	f04f 0b01 	mov.w	fp, #1
 800bcac:	fa0b f202 	lsl.w	r2, fp, r2
 800bcb0:	420a      	tst	r2, r1
 800bcb2:	d00a      	beq.n	800bcca <__gethex+0x1da>
 800bcb4:	455b      	cmp	r3, fp
 800bcb6:	dd06      	ble.n	800bcc6 <__gethex+0x1d6>
 800bcb8:	f1a8 0102 	sub.w	r1, r8, #2
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7fe fd69 	bl	800a794 <__any_on>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d138      	bne.n	800bd38 <__gethex+0x248>
 800bcc6:	f04f 0b02 	mov.w	fp, #2
 800bcca:	4641      	mov	r1, r8
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7ff fea7 	bl	800ba20 <rshift>
 800bcd2:	4446      	add	r6, r8
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	42b3      	cmp	r3, r6
 800bcd8:	da41      	bge.n	800bd5e <__gethex+0x26e>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4648      	mov	r0, r9
 800bcde:	f7fe f90d 	bl	8009efc <_Bfree>
 800bce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bce4:	2300      	movs	r3, #0
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bcec:	e78a      	b.n	800bc04 <__gethex+0x114>
 800bcee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bcf2:	2a2e      	cmp	r2, #46	; 0x2e
 800bcf4:	d014      	beq.n	800bd20 <__gethex+0x230>
 800bcf6:	2b20      	cmp	r3, #32
 800bcf8:	d106      	bne.n	800bd08 <__gethex+0x218>
 800bcfa:	9b01      	ldr	r3, [sp, #4]
 800bcfc:	f843 bb04 	str.w	fp, [r3], #4
 800bd00:	f04f 0b00 	mov.w	fp, #0
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	465b      	mov	r3, fp
 800bd08:	7828      	ldrb	r0, [r5, #0]
 800bd0a:	9303      	str	r3, [sp, #12]
 800bd0c:	f7ff feda 	bl	800bac4 <__hexdig_fun>
 800bd10:	9b03      	ldr	r3, [sp, #12]
 800bd12:	f000 000f 	and.w	r0, r0, #15
 800bd16:	4098      	lsls	r0, r3
 800bd18:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	e7a1      	b.n	800bc64 <__gethex+0x174>
 800bd20:	45a8      	cmp	r8, r5
 800bd22:	d8e8      	bhi.n	800bcf6 <__gethex+0x206>
 800bd24:	2201      	movs	r2, #1
 800bd26:	4628      	mov	r0, r5
 800bd28:	9303      	str	r3, [sp, #12]
 800bd2a:	f7ff fe0b 	bl	800b944 <strncmp>
 800bd2e:	4926      	ldr	r1, [pc, #152]	; (800bdc8 <__gethex+0x2d8>)
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d1df      	bne.n	800bcf6 <__gethex+0x206>
 800bd36:	e795      	b.n	800bc64 <__gethex+0x174>
 800bd38:	f04f 0b03 	mov.w	fp, #3
 800bd3c:	e7c5      	b.n	800bcca <__gethex+0x1da>
 800bd3e:	da0b      	bge.n	800bd58 <__gethex+0x268>
 800bd40:	eba5 0800 	sub.w	r8, r5, r0
 800bd44:	4621      	mov	r1, r4
 800bd46:	4642      	mov	r2, r8
 800bd48:	4648      	mov	r0, r9
 800bd4a:	f7fe faf1 	bl	800a330 <__lshift>
 800bd4e:	eba6 0608 	sub.w	r6, r6, r8
 800bd52:	4604      	mov	r4, r0
 800bd54:	f100 0a14 	add.w	sl, r0, #20
 800bd58:	f04f 0b00 	mov.w	fp, #0
 800bd5c:	e7ba      	b.n	800bcd4 <__gethex+0x1e4>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	42b3      	cmp	r3, r6
 800bd62:	dd73      	ble.n	800be4c <__gethex+0x35c>
 800bd64:	1b9e      	subs	r6, r3, r6
 800bd66:	42b5      	cmp	r5, r6
 800bd68:	dc34      	bgt.n	800bdd4 <__gethex+0x2e4>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d023      	beq.n	800bdb8 <__gethex+0x2c8>
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d025      	beq.n	800bdc0 <__gethex+0x2d0>
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d115      	bne.n	800bda4 <__gethex+0x2b4>
 800bd78:	42b5      	cmp	r5, r6
 800bd7a:	d113      	bne.n	800bda4 <__gethex+0x2b4>
 800bd7c:	2d01      	cmp	r5, #1
 800bd7e:	d10b      	bne.n	800bd98 <__gethex+0x2a8>
 800bd80:	9a02      	ldr	r2, [sp, #8]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	2301      	movs	r3, #1
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	f8ca 3000 	str.w	r3, [sl]
 800bd8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd90:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bd94:	601c      	str	r4, [r3, #0]
 800bd96:	e735      	b.n	800bc04 <__gethex+0x114>
 800bd98:	1e69      	subs	r1, r5, #1
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7fe fcfa 	bl	800a794 <__any_on>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1ed      	bne.n	800bd80 <__gethex+0x290>
 800bda4:	4621      	mov	r1, r4
 800bda6:	4648      	mov	r0, r9
 800bda8:	f7fe f8a8 	bl	8009efc <_Bfree>
 800bdac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdae:	2300      	movs	r3, #0
 800bdb0:	6013      	str	r3, [r2, #0]
 800bdb2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bdb6:	e725      	b.n	800bc04 <__gethex+0x114>
 800bdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1f2      	bne.n	800bda4 <__gethex+0x2b4>
 800bdbe:	e7df      	b.n	800bd80 <__gethex+0x290>
 800bdc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1dc      	bne.n	800bd80 <__gethex+0x290>
 800bdc6:	e7ed      	b.n	800bda4 <__gethex+0x2b4>
 800bdc8:	0800cad4 	.word	0x0800cad4
 800bdcc:	0800c969 	.word	0x0800c969
 800bdd0:	0800cc7e 	.word	0x0800cc7e
 800bdd4:	f106 38ff 	add.w	r8, r6, #4294967295
 800bdd8:	f1bb 0f00 	cmp.w	fp, #0
 800bddc:	d133      	bne.n	800be46 <__gethex+0x356>
 800bdde:	f1b8 0f00 	cmp.w	r8, #0
 800bde2:	d004      	beq.n	800bdee <__gethex+0x2fe>
 800bde4:	4641      	mov	r1, r8
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7fe fcd4 	bl	800a794 <__any_on>
 800bdec:	4683      	mov	fp, r0
 800bdee:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bdf8:	f008 081f 	and.w	r8, r8, #31
 800bdfc:	fa03 f308 	lsl.w	r3, r3, r8
 800be00:	4213      	tst	r3, r2
 800be02:	4631      	mov	r1, r6
 800be04:	4620      	mov	r0, r4
 800be06:	bf18      	it	ne
 800be08:	f04b 0b02 	orrne.w	fp, fp, #2
 800be0c:	1bad      	subs	r5, r5, r6
 800be0e:	f7ff fe07 	bl	800ba20 <rshift>
 800be12:	687e      	ldr	r6, [r7, #4]
 800be14:	f04f 0802 	mov.w	r8, #2
 800be18:	f1bb 0f00 	cmp.w	fp, #0
 800be1c:	d04a      	beq.n	800beb4 <__gethex+0x3c4>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d016      	beq.n	800be52 <__gethex+0x362>
 800be24:	2b03      	cmp	r3, #3
 800be26:	d018      	beq.n	800be5a <__gethex+0x36a>
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d109      	bne.n	800be40 <__gethex+0x350>
 800be2c:	f01b 0f02 	tst.w	fp, #2
 800be30:	d006      	beq.n	800be40 <__gethex+0x350>
 800be32:	f8da 3000 	ldr.w	r3, [sl]
 800be36:	ea4b 0b03 	orr.w	fp, fp, r3
 800be3a:	f01b 0f01 	tst.w	fp, #1
 800be3e:	d10f      	bne.n	800be60 <__gethex+0x370>
 800be40:	f048 0810 	orr.w	r8, r8, #16
 800be44:	e036      	b.n	800beb4 <__gethex+0x3c4>
 800be46:	f04f 0b01 	mov.w	fp, #1
 800be4a:	e7d0      	b.n	800bdee <__gethex+0x2fe>
 800be4c:	f04f 0801 	mov.w	r8, #1
 800be50:	e7e2      	b.n	800be18 <__gethex+0x328>
 800be52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be54:	f1c3 0301 	rsb	r3, r3, #1
 800be58:	930f      	str	r3, [sp, #60]	; 0x3c
 800be5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0ef      	beq.n	800be40 <__gethex+0x350>
 800be60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be64:	f104 0214 	add.w	r2, r4, #20
 800be68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800be6c:	9301      	str	r3, [sp, #4]
 800be6e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800be72:	2300      	movs	r3, #0
 800be74:	4694      	mov	ip, r2
 800be76:	f852 1b04 	ldr.w	r1, [r2], #4
 800be7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800be7e:	d01e      	beq.n	800bebe <__gethex+0x3ce>
 800be80:	3101      	adds	r1, #1
 800be82:	f8cc 1000 	str.w	r1, [ip]
 800be86:	f1b8 0f02 	cmp.w	r8, #2
 800be8a:	f104 0214 	add.w	r2, r4, #20
 800be8e:	d13d      	bne.n	800bf0c <__gethex+0x41c>
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	3b01      	subs	r3, #1
 800be94:	42ab      	cmp	r3, r5
 800be96:	d10b      	bne.n	800beb0 <__gethex+0x3c0>
 800be98:	1169      	asrs	r1, r5, #5
 800be9a:	2301      	movs	r3, #1
 800be9c:	f005 051f 	and.w	r5, r5, #31
 800bea0:	fa03 f505 	lsl.w	r5, r3, r5
 800bea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bea8:	421d      	tst	r5, r3
 800beaa:	bf18      	it	ne
 800beac:	f04f 0801 	movne.w	r8, #1
 800beb0:	f048 0820 	orr.w	r8, r8, #32
 800beb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beb6:	601c      	str	r4, [r3, #0]
 800beb8:	9b02      	ldr	r3, [sp, #8]
 800beba:	601e      	str	r6, [r3, #0]
 800bebc:	e6a2      	b.n	800bc04 <__gethex+0x114>
 800bebe:	4290      	cmp	r0, r2
 800bec0:	f842 3c04 	str.w	r3, [r2, #-4]
 800bec4:	d8d6      	bhi.n	800be74 <__gethex+0x384>
 800bec6:	68a2      	ldr	r2, [r4, #8]
 800bec8:	4593      	cmp	fp, r2
 800beca:	db17      	blt.n	800befc <__gethex+0x40c>
 800becc:	6861      	ldr	r1, [r4, #4]
 800bece:	4648      	mov	r0, r9
 800bed0:	3101      	adds	r1, #1
 800bed2:	f7fd ffd3 	bl	8009e7c <_Balloc>
 800bed6:	4682      	mov	sl, r0
 800bed8:	b918      	cbnz	r0, 800bee2 <__gethex+0x3f2>
 800beda:	4b1b      	ldr	r3, [pc, #108]	; (800bf48 <__gethex+0x458>)
 800bedc:	4602      	mov	r2, r0
 800bede:	2184      	movs	r1, #132	; 0x84
 800bee0:	e6b3      	b.n	800bc4a <__gethex+0x15a>
 800bee2:	6922      	ldr	r2, [r4, #16]
 800bee4:	3202      	adds	r2, #2
 800bee6:	f104 010c 	add.w	r1, r4, #12
 800beea:	0092      	lsls	r2, r2, #2
 800beec:	300c      	adds	r0, #12
 800beee:	f7ff fd4b 	bl	800b988 <memcpy>
 800bef2:	4621      	mov	r1, r4
 800bef4:	4648      	mov	r0, r9
 800bef6:	f7fe f801 	bl	8009efc <_Bfree>
 800befa:	4654      	mov	r4, sl
 800befc:	6922      	ldr	r2, [r4, #16]
 800befe:	1c51      	adds	r1, r2, #1
 800bf00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf04:	6121      	str	r1, [r4, #16]
 800bf06:	2101      	movs	r1, #1
 800bf08:	6151      	str	r1, [r2, #20]
 800bf0a:	e7bc      	b.n	800be86 <__gethex+0x396>
 800bf0c:	6921      	ldr	r1, [r4, #16]
 800bf0e:	4559      	cmp	r1, fp
 800bf10:	dd0b      	ble.n	800bf2a <__gethex+0x43a>
 800bf12:	2101      	movs	r1, #1
 800bf14:	4620      	mov	r0, r4
 800bf16:	f7ff fd83 	bl	800ba20 <rshift>
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	3601      	adds	r6, #1
 800bf1e:	42b3      	cmp	r3, r6
 800bf20:	f6ff aedb 	blt.w	800bcda <__gethex+0x1ea>
 800bf24:	f04f 0801 	mov.w	r8, #1
 800bf28:	e7c2      	b.n	800beb0 <__gethex+0x3c0>
 800bf2a:	f015 051f 	ands.w	r5, r5, #31
 800bf2e:	d0f9      	beq.n	800bf24 <__gethex+0x434>
 800bf30:	9b01      	ldr	r3, [sp, #4]
 800bf32:	441a      	add	r2, r3
 800bf34:	f1c5 0520 	rsb	r5, r5, #32
 800bf38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bf3c:	f7fe f890 	bl	800a060 <__hi0bits>
 800bf40:	42a8      	cmp	r0, r5
 800bf42:	dbe6      	blt.n	800bf12 <__gethex+0x422>
 800bf44:	e7ee      	b.n	800bf24 <__gethex+0x434>
 800bf46:	bf00      	nop
 800bf48:	0800c969 	.word	0x0800c969

0800bf4c <L_shift>:
 800bf4c:	f1c2 0208 	rsb	r2, r2, #8
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	b570      	push	{r4, r5, r6, lr}
 800bf54:	f1c2 0620 	rsb	r6, r2, #32
 800bf58:	6843      	ldr	r3, [r0, #4]
 800bf5a:	6804      	ldr	r4, [r0, #0]
 800bf5c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf60:	432c      	orrs	r4, r5
 800bf62:	40d3      	lsrs	r3, r2
 800bf64:	6004      	str	r4, [r0, #0]
 800bf66:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf6a:	4288      	cmp	r0, r1
 800bf6c:	d3f4      	bcc.n	800bf58 <L_shift+0xc>
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}

0800bf70 <__match>:
 800bf70:	b530      	push	{r4, r5, lr}
 800bf72:	6803      	ldr	r3, [r0, #0]
 800bf74:	3301      	adds	r3, #1
 800bf76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf7a:	b914      	cbnz	r4, 800bf82 <__match+0x12>
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	2001      	movs	r0, #1
 800bf80:	bd30      	pop	{r4, r5, pc}
 800bf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf8a:	2d19      	cmp	r5, #25
 800bf8c:	bf98      	it	ls
 800bf8e:	3220      	addls	r2, #32
 800bf90:	42a2      	cmp	r2, r4
 800bf92:	d0f0      	beq.n	800bf76 <__match+0x6>
 800bf94:	2000      	movs	r0, #0
 800bf96:	e7f3      	b.n	800bf80 <__match+0x10>

0800bf98 <__hexnan>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	680b      	ldr	r3, [r1, #0]
 800bf9e:	6801      	ldr	r1, [r0, #0]
 800bfa0:	115e      	asrs	r6, r3, #5
 800bfa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfa6:	f013 031f 	ands.w	r3, r3, #31
 800bfaa:	b087      	sub	sp, #28
 800bfac:	bf18      	it	ne
 800bfae:	3604      	addne	r6, #4
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	1f37      	subs	r7, r6, #4
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	4690      	mov	r8, r2
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfbe:	46b9      	mov	r9, r7
 800bfc0:	463c      	mov	r4, r7
 800bfc2:	9502      	str	r5, [sp, #8]
 800bfc4:	46ab      	mov	fp, r5
 800bfc6:	784a      	ldrb	r2, [r1, #1]
 800bfc8:	1c4b      	adds	r3, r1, #1
 800bfca:	9303      	str	r3, [sp, #12]
 800bfcc:	b342      	cbz	r2, 800c020 <__hexnan+0x88>
 800bfce:	4610      	mov	r0, r2
 800bfd0:	9105      	str	r1, [sp, #20]
 800bfd2:	9204      	str	r2, [sp, #16]
 800bfd4:	f7ff fd76 	bl	800bac4 <__hexdig_fun>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d14f      	bne.n	800c07c <__hexnan+0xe4>
 800bfdc:	9a04      	ldr	r2, [sp, #16]
 800bfde:	9905      	ldr	r1, [sp, #20]
 800bfe0:	2a20      	cmp	r2, #32
 800bfe2:	d818      	bhi.n	800c016 <__hexnan+0x7e>
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	459b      	cmp	fp, r3
 800bfe8:	dd13      	ble.n	800c012 <__hexnan+0x7a>
 800bfea:	454c      	cmp	r4, r9
 800bfec:	d206      	bcs.n	800bffc <__hexnan+0x64>
 800bfee:	2d07      	cmp	r5, #7
 800bff0:	dc04      	bgt.n	800bffc <__hexnan+0x64>
 800bff2:	462a      	mov	r2, r5
 800bff4:	4649      	mov	r1, r9
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff ffa8 	bl	800bf4c <L_shift>
 800bffc:	4544      	cmp	r4, r8
 800bffe:	d950      	bls.n	800c0a2 <__hexnan+0x10a>
 800c000:	2300      	movs	r3, #0
 800c002:	f1a4 0904 	sub.w	r9, r4, #4
 800c006:	f844 3c04 	str.w	r3, [r4, #-4]
 800c00a:	f8cd b008 	str.w	fp, [sp, #8]
 800c00e:	464c      	mov	r4, r9
 800c010:	461d      	mov	r5, r3
 800c012:	9903      	ldr	r1, [sp, #12]
 800c014:	e7d7      	b.n	800bfc6 <__hexnan+0x2e>
 800c016:	2a29      	cmp	r2, #41	; 0x29
 800c018:	d155      	bne.n	800c0c6 <__hexnan+0x12e>
 800c01a:	3102      	adds	r1, #2
 800c01c:	f8ca 1000 	str.w	r1, [sl]
 800c020:	f1bb 0f00 	cmp.w	fp, #0
 800c024:	d04f      	beq.n	800c0c6 <__hexnan+0x12e>
 800c026:	454c      	cmp	r4, r9
 800c028:	d206      	bcs.n	800c038 <__hexnan+0xa0>
 800c02a:	2d07      	cmp	r5, #7
 800c02c:	dc04      	bgt.n	800c038 <__hexnan+0xa0>
 800c02e:	462a      	mov	r2, r5
 800c030:	4649      	mov	r1, r9
 800c032:	4620      	mov	r0, r4
 800c034:	f7ff ff8a 	bl	800bf4c <L_shift>
 800c038:	4544      	cmp	r4, r8
 800c03a:	d934      	bls.n	800c0a6 <__hexnan+0x10e>
 800c03c:	f1a8 0204 	sub.w	r2, r8, #4
 800c040:	4623      	mov	r3, r4
 800c042:	f853 1b04 	ldr.w	r1, [r3], #4
 800c046:	f842 1f04 	str.w	r1, [r2, #4]!
 800c04a:	429f      	cmp	r7, r3
 800c04c:	d2f9      	bcs.n	800c042 <__hexnan+0xaa>
 800c04e:	1b3b      	subs	r3, r7, r4
 800c050:	f023 0303 	bic.w	r3, r3, #3
 800c054:	3304      	adds	r3, #4
 800c056:	3e03      	subs	r6, #3
 800c058:	3401      	adds	r4, #1
 800c05a:	42a6      	cmp	r6, r4
 800c05c:	bf38      	it	cc
 800c05e:	2304      	movcc	r3, #4
 800c060:	4443      	add	r3, r8
 800c062:	2200      	movs	r2, #0
 800c064:	f843 2b04 	str.w	r2, [r3], #4
 800c068:	429f      	cmp	r7, r3
 800c06a:	d2fb      	bcs.n	800c064 <__hexnan+0xcc>
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	b91b      	cbnz	r3, 800c078 <__hexnan+0xe0>
 800c070:	4547      	cmp	r7, r8
 800c072:	d126      	bne.n	800c0c2 <__hexnan+0x12a>
 800c074:	2301      	movs	r3, #1
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	2005      	movs	r0, #5
 800c07a:	e025      	b.n	800c0c8 <__hexnan+0x130>
 800c07c:	3501      	adds	r5, #1
 800c07e:	2d08      	cmp	r5, #8
 800c080:	f10b 0b01 	add.w	fp, fp, #1
 800c084:	dd06      	ble.n	800c094 <__hexnan+0xfc>
 800c086:	4544      	cmp	r4, r8
 800c088:	d9c3      	bls.n	800c012 <__hexnan+0x7a>
 800c08a:	2300      	movs	r3, #0
 800c08c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c090:	2501      	movs	r5, #1
 800c092:	3c04      	subs	r4, #4
 800c094:	6822      	ldr	r2, [r4, #0]
 800c096:	f000 000f 	and.w	r0, r0, #15
 800c09a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c09e:	6020      	str	r0, [r4, #0]
 800c0a0:	e7b7      	b.n	800c012 <__hexnan+0x7a>
 800c0a2:	2508      	movs	r5, #8
 800c0a4:	e7b5      	b.n	800c012 <__hexnan+0x7a>
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d0df      	beq.n	800c06c <__hexnan+0xd4>
 800c0ac:	f1c3 0320 	rsb	r3, r3, #32
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b4:	40da      	lsrs	r2, r3
 800c0b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0c0:	e7d4      	b.n	800c06c <__hexnan+0xd4>
 800c0c2:	3f04      	subs	r7, #4
 800c0c4:	e7d2      	b.n	800c06c <__hexnan+0xd4>
 800c0c6:	2004      	movs	r0, #4
 800c0c8:	b007      	add	sp, #28
 800c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0ce <__ascii_mbtowc>:
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	b901      	cbnz	r1, 800c0d4 <__ascii_mbtowc+0x6>
 800c0d2:	a901      	add	r1, sp, #4
 800c0d4:	b142      	cbz	r2, 800c0e8 <__ascii_mbtowc+0x1a>
 800c0d6:	b14b      	cbz	r3, 800c0ec <__ascii_mbtowc+0x1e>
 800c0d8:	7813      	ldrb	r3, [r2, #0]
 800c0da:	600b      	str	r3, [r1, #0]
 800c0dc:	7812      	ldrb	r2, [r2, #0]
 800c0de:	1e10      	subs	r0, r2, #0
 800c0e0:	bf18      	it	ne
 800c0e2:	2001      	movne	r0, #1
 800c0e4:	b002      	add	sp, #8
 800c0e6:	4770      	bx	lr
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	e7fb      	b.n	800c0e4 <__ascii_mbtowc+0x16>
 800c0ec:	f06f 0001 	mvn.w	r0, #1
 800c0f0:	e7f8      	b.n	800c0e4 <__ascii_mbtowc+0x16>

0800c0f2 <_realloc_r>:
 800c0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	4614      	mov	r4, r2
 800c0fa:	460e      	mov	r6, r1
 800c0fc:	b921      	cbnz	r1, 800c108 <_realloc_r+0x16>
 800c0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	4611      	mov	r1, r2
 800c104:	f7fd be2e 	b.w	8009d64 <_malloc_r>
 800c108:	b92a      	cbnz	r2, 800c116 <_realloc_r+0x24>
 800c10a:	f7fd fdb7 	bl	8009c7c <_free_r>
 800c10e:	4625      	mov	r5, r4
 800c110:	4628      	mov	r0, r5
 800c112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c116:	f000 f842 	bl	800c19e <_malloc_usable_size_r>
 800c11a:	4284      	cmp	r4, r0
 800c11c:	4607      	mov	r7, r0
 800c11e:	d802      	bhi.n	800c126 <_realloc_r+0x34>
 800c120:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c124:	d812      	bhi.n	800c14c <_realloc_r+0x5a>
 800c126:	4621      	mov	r1, r4
 800c128:	4640      	mov	r0, r8
 800c12a:	f7fd fe1b 	bl	8009d64 <_malloc_r>
 800c12e:	4605      	mov	r5, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d0ed      	beq.n	800c110 <_realloc_r+0x1e>
 800c134:	42bc      	cmp	r4, r7
 800c136:	4622      	mov	r2, r4
 800c138:	4631      	mov	r1, r6
 800c13a:	bf28      	it	cs
 800c13c:	463a      	movcs	r2, r7
 800c13e:	f7ff fc23 	bl	800b988 <memcpy>
 800c142:	4631      	mov	r1, r6
 800c144:	4640      	mov	r0, r8
 800c146:	f7fd fd99 	bl	8009c7c <_free_r>
 800c14a:	e7e1      	b.n	800c110 <_realloc_r+0x1e>
 800c14c:	4635      	mov	r5, r6
 800c14e:	e7df      	b.n	800c110 <_realloc_r+0x1e>

0800c150 <__ascii_wctomb>:
 800c150:	b149      	cbz	r1, 800c166 <__ascii_wctomb+0x16>
 800c152:	2aff      	cmp	r2, #255	; 0xff
 800c154:	bf85      	ittet	hi
 800c156:	238a      	movhi	r3, #138	; 0x8a
 800c158:	6003      	strhi	r3, [r0, #0]
 800c15a:	700a      	strbls	r2, [r1, #0]
 800c15c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c160:	bf98      	it	ls
 800c162:	2001      	movls	r0, #1
 800c164:	4770      	bx	lr
 800c166:	4608      	mov	r0, r1
 800c168:	4770      	bx	lr
	...

0800c16c <fiprintf>:
 800c16c:	b40e      	push	{r1, r2, r3}
 800c16e:	b503      	push	{r0, r1, lr}
 800c170:	4601      	mov	r1, r0
 800c172:	ab03      	add	r3, sp, #12
 800c174:	4805      	ldr	r0, [pc, #20]	; (800c18c <fiprintf+0x20>)
 800c176:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	f000 f83f 	bl	800c200 <_vfiprintf_r>
 800c182:	b002      	add	sp, #8
 800c184:	f85d eb04 	ldr.w	lr, [sp], #4
 800c188:	b003      	add	sp, #12
 800c18a:	4770      	bx	lr
 800c18c:	20000064 	.word	0x20000064

0800c190 <abort>:
 800c190:	b508      	push	{r3, lr}
 800c192:	2006      	movs	r0, #6
 800c194:	f000 fa0c 	bl	800c5b0 <raise>
 800c198:	2001      	movs	r0, #1
 800c19a:	f7f5 fde9 	bl	8001d70 <_exit>

0800c19e <_malloc_usable_size_r>:
 800c19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1a2:	1f18      	subs	r0, r3, #4
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	bfbc      	itt	lt
 800c1a8:	580b      	ldrlt	r3, [r1, r0]
 800c1aa:	18c0      	addlt	r0, r0, r3
 800c1ac:	4770      	bx	lr

0800c1ae <__sfputc_r>:
 800c1ae:	6893      	ldr	r3, [r2, #8]
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	b410      	push	{r4}
 800c1b6:	6093      	str	r3, [r2, #8]
 800c1b8:	da08      	bge.n	800c1cc <__sfputc_r+0x1e>
 800c1ba:	6994      	ldr	r4, [r2, #24]
 800c1bc:	42a3      	cmp	r3, r4
 800c1be:	db01      	blt.n	800c1c4 <__sfputc_r+0x16>
 800c1c0:	290a      	cmp	r1, #10
 800c1c2:	d103      	bne.n	800c1cc <__sfputc_r+0x1e>
 800c1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1c8:	f000 b934 	b.w	800c434 <__swbuf_r>
 800c1cc:	6813      	ldr	r3, [r2, #0]
 800c1ce:	1c58      	adds	r0, r3, #1
 800c1d0:	6010      	str	r0, [r2, #0]
 800c1d2:	7019      	strb	r1, [r3, #0]
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <__sfputs_r>:
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1de:	4606      	mov	r6, r0
 800c1e0:	460f      	mov	r7, r1
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	18d5      	adds	r5, r2, r3
 800c1e6:	42ac      	cmp	r4, r5
 800c1e8:	d101      	bne.n	800c1ee <__sfputs_r+0x12>
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	e007      	b.n	800c1fe <__sfputs_r+0x22>
 800c1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f2:	463a      	mov	r2, r7
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f7ff ffda 	bl	800c1ae <__sfputc_r>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d1f3      	bne.n	800c1e6 <__sfputs_r+0xa>
 800c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c200 <_vfiprintf_r>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	460d      	mov	r5, r1
 800c206:	b09d      	sub	sp, #116	; 0x74
 800c208:	4614      	mov	r4, r2
 800c20a:	4698      	mov	r8, r3
 800c20c:	4606      	mov	r6, r0
 800c20e:	b118      	cbz	r0, 800c218 <_vfiprintf_r+0x18>
 800c210:	6a03      	ldr	r3, [r0, #32]
 800c212:	b90b      	cbnz	r3, 800c218 <_vfiprintf_r+0x18>
 800c214:	f7fc fd96 	bl	8008d44 <__sinit>
 800c218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c21a:	07d9      	lsls	r1, r3, #31
 800c21c:	d405      	bmi.n	800c22a <_vfiprintf_r+0x2a>
 800c21e:	89ab      	ldrh	r3, [r5, #12]
 800c220:	059a      	lsls	r2, r3, #22
 800c222:	d402      	bmi.n	800c22a <_vfiprintf_r+0x2a>
 800c224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c226:	f7fc fea4 	bl	8008f72 <__retarget_lock_acquire_recursive>
 800c22a:	89ab      	ldrh	r3, [r5, #12]
 800c22c:	071b      	lsls	r3, r3, #28
 800c22e:	d501      	bpl.n	800c234 <_vfiprintf_r+0x34>
 800c230:	692b      	ldr	r3, [r5, #16]
 800c232:	b99b      	cbnz	r3, 800c25c <_vfiprintf_r+0x5c>
 800c234:	4629      	mov	r1, r5
 800c236:	4630      	mov	r0, r6
 800c238:	f000 f93a 	bl	800c4b0 <__swsetup_r>
 800c23c:	b170      	cbz	r0, 800c25c <_vfiprintf_r+0x5c>
 800c23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c240:	07dc      	lsls	r4, r3, #31
 800c242:	d504      	bpl.n	800c24e <_vfiprintf_r+0x4e>
 800c244:	f04f 30ff 	mov.w	r0, #4294967295
 800c248:	b01d      	add	sp, #116	; 0x74
 800c24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24e:	89ab      	ldrh	r3, [r5, #12]
 800c250:	0598      	lsls	r0, r3, #22
 800c252:	d4f7      	bmi.n	800c244 <_vfiprintf_r+0x44>
 800c254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c256:	f7fc fe8d 	bl	8008f74 <__retarget_lock_release_recursive>
 800c25a:	e7f3      	b.n	800c244 <_vfiprintf_r+0x44>
 800c25c:	2300      	movs	r3, #0
 800c25e:	9309      	str	r3, [sp, #36]	; 0x24
 800c260:	2320      	movs	r3, #32
 800c262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c266:	f8cd 800c 	str.w	r8, [sp, #12]
 800c26a:	2330      	movs	r3, #48	; 0x30
 800c26c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c420 <_vfiprintf_r+0x220>
 800c270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c274:	f04f 0901 	mov.w	r9, #1
 800c278:	4623      	mov	r3, r4
 800c27a:	469a      	mov	sl, r3
 800c27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c280:	b10a      	cbz	r2, 800c286 <_vfiprintf_r+0x86>
 800c282:	2a25      	cmp	r2, #37	; 0x25
 800c284:	d1f9      	bne.n	800c27a <_vfiprintf_r+0x7a>
 800c286:	ebba 0b04 	subs.w	fp, sl, r4
 800c28a:	d00b      	beq.n	800c2a4 <_vfiprintf_r+0xa4>
 800c28c:	465b      	mov	r3, fp
 800c28e:	4622      	mov	r2, r4
 800c290:	4629      	mov	r1, r5
 800c292:	4630      	mov	r0, r6
 800c294:	f7ff ffa2 	bl	800c1dc <__sfputs_r>
 800c298:	3001      	adds	r0, #1
 800c29a:	f000 80a9 	beq.w	800c3f0 <_vfiprintf_r+0x1f0>
 800c29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2a0:	445a      	add	r2, fp
 800c2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 80a1 	beq.w	800c3f0 <_vfiprintf_r+0x1f0>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b8:	f10a 0a01 	add.w	sl, sl, #1
 800c2bc:	9304      	str	r3, [sp, #16]
 800c2be:	9307      	str	r3, [sp, #28]
 800c2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c6:	4654      	mov	r4, sl
 800c2c8:	2205      	movs	r2, #5
 800c2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ce:	4854      	ldr	r0, [pc, #336]	; (800c420 <_vfiprintf_r+0x220>)
 800c2d0:	f7f3 ff7e 	bl	80001d0 <memchr>
 800c2d4:	9a04      	ldr	r2, [sp, #16]
 800c2d6:	b9d8      	cbnz	r0, 800c310 <_vfiprintf_r+0x110>
 800c2d8:	06d1      	lsls	r1, r2, #27
 800c2da:	bf44      	itt	mi
 800c2dc:	2320      	movmi	r3, #32
 800c2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e2:	0713      	lsls	r3, r2, #28
 800c2e4:	bf44      	itt	mi
 800c2e6:	232b      	movmi	r3, #43	; 0x2b
 800c2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f2:	d015      	beq.n	800c320 <_vfiprintf_r+0x120>
 800c2f4:	9a07      	ldr	r2, [sp, #28]
 800c2f6:	4654      	mov	r4, sl
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	f04f 0c0a 	mov.w	ip, #10
 800c2fe:	4621      	mov	r1, r4
 800c300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c304:	3b30      	subs	r3, #48	; 0x30
 800c306:	2b09      	cmp	r3, #9
 800c308:	d94d      	bls.n	800c3a6 <_vfiprintf_r+0x1a6>
 800c30a:	b1b0      	cbz	r0, 800c33a <_vfiprintf_r+0x13a>
 800c30c:	9207      	str	r2, [sp, #28]
 800c30e:	e014      	b.n	800c33a <_vfiprintf_r+0x13a>
 800c310:	eba0 0308 	sub.w	r3, r0, r8
 800c314:	fa09 f303 	lsl.w	r3, r9, r3
 800c318:	4313      	orrs	r3, r2
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	46a2      	mov	sl, r4
 800c31e:	e7d2      	b.n	800c2c6 <_vfiprintf_r+0xc6>
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	1d19      	adds	r1, r3, #4
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	9103      	str	r1, [sp, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	bfbb      	ittet	lt
 800c32c:	425b      	neglt	r3, r3
 800c32e:	f042 0202 	orrlt.w	r2, r2, #2
 800c332:	9307      	strge	r3, [sp, #28]
 800c334:	9307      	strlt	r3, [sp, #28]
 800c336:	bfb8      	it	lt
 800c338:	9204      	strlt	r2, [sp, #16]
 800c33a:	7823      	ldrb	r3, [r4, #0]
 800c33c:	2b2e      	cmp	r3, #46	; 0x2e
 800c33e:	d10c      	bne.n	800c35a <_vfiprintf_r+0x15a>
 800c340:	7863      	ldrb	r3, [r4, #1]
 800c342:	2b2a      	cmp	r3, #42	; 0x2a
 800c344:	d134      	bne.n	800c3b0 <_vfiprintf_r+0x1b0>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	1d1a      	adds	r2, r3, #4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	9203      	str	r2, [sp, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfb8      	it	lt
 800c352:	f04f 33ff 	movlt.w	r3, #4294967295
 800c356:	3402      	adds	r4, #2
 800c358:	9305      	str	r3, [sp, #20]
 800c35a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c430 <_vfiprintf_r+0x230>
 800c35e:	7821      	ldrb	r1, [r4, #0]
 800c360:	2203      	movs	r2, #3
 800c362:	4650      	mov	r0, sl
 800c364:	f7f3 ff34 	bl	80001d0 <memchr>
 800c368:	b138      	cbz	r0, 800c37a <_vfiprintf_r+0x17a>
 800c36a:	9b04      	ldr	r3, [sp, #16]
 800c36c:	eba0 000a 	sub.w	r0, r0, sl
 800c370:	2240      	movs	r2, #64	; 0x40
 800c372:	4082      	lsls	r2, r0
 800c374:	4313      	orrs	r3, r2
 800c376:	3401      	adds	r4, #1
 800c378:	9304      	str	r3, [sp, #16]
 800c37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37e:	4829      	ldr	r0, [pc, #164]	; (800c424 <_vfiprintf_r+0x224>)
 800c380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c384:	2206      	movs	r2, #6
 800c386:	f7f3 ff23 	bl	80001d0 <memchr>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d03f      	beq.n	800c40e <_vfiprintf_r+0x20e>
 800c38e:	4b26      	ldr	r3, [pc, #152]	; (800c428 <_vfiprintf_r+0x228>)
 800c390:	bb1b      	cbnz	r3, 800c3da <_vfiprintf_r+0x1da>
 800c392:	9b03      	ldr	r3, [sp, #12]
 800c394:	3307      	adds	r3, #7
 800c396:	f023 0307 	bic.w	r3, r3, #7
 800c39a:	3308      	adds	r3, #8
 800c39c:	9303      	str	r3, [sp, #12]
 800c39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a0:	443b      	add	r3, r7
 800c3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a4:	e768      	b.n	800c278 <_vfiprintf_r+0x78>
 800c3a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	e7a6      	b.n	800c2fe <_vfiprintf_r+0xfe>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	9305      	str	r3, [sp, #20]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	f04f 0c0a 	mov.w	ip, #10
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c2:	3a30      	subs	r2, #48	; 0x30
 800c3c4:	2a09      	cmp	r2, #9
 800c3c6:	d903      	bls.n	800c3d0 <_vfiprintf_r+0x1d0>
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0c6      	beq.n	800c35a <_vfiprintf_r+0x15a>
 800c3cc:	9105      	str	r1, [sp, #20]
 800c3ce:	e7c4      	b.n	800c35a <_vfiprintf_r+0x15a>
 800c3d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e7f0      	b.n	800c3bc <_vfiprintf_r+0x1bc>
 800c3da:	ab03      	add	r3, sp, #12
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	462a      	mov	r2, r5
 800c3e0:	4b12      	ldr	r3, [pc, #72]	; (800c42c <_vfiprintf_r+0x22c>)
 800c3e2:	a904      	add	r1, sp, #16
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f7fb fe4b 	bl	8008080 <_printf_float>
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	1c78      	adds	r0, r7, #1
 800c3ee:	d1d6      	bne.n	800c39e <_vfiprintf_r+0x19e>
 800c3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f2:	07d9      	lsls	r1, r3, #31
 800c3f4:	d405      	bmi.n	800c402 <_vfiprintf_r+0x202>
 800c3f6:	89ab      	ldrh	r3, [r5, #12]
 800c3f8:	059a      	lsls	r2, r3, #22
 800c3fa:	d402      	bmi.n	800c402 <_vfiprintf_r+0x202>
 800c3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3fe:	f7fc fdb9 	bl	8008f74 <__retarget_lock_release_recursive>
 800c402:	89ab      	ldrh	r3, [r5, #12]
 800c404:	065b      	lsls	r3, r3, #25
 800c406:	f53f af1d 	bmi.w	800c244 <_vfiprintf_r+0x44>
 800c40a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c40c:	e71c      	b.n	800c248 <_vfiprintf_r+0x48>
 800c40e:	ab03      	add	r3, sp, #12
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	462a      	mov	r2, r5
 800c414:	4b05      	ldr	r3, [pc, #20]	; (800c42c <_vfiprintf_r+0x22c>)
 800c416:	a904      	add	r1, sp, #16
 800c418:	4630      	mov	r0, r6
 800c41a:	f7fc f8d5 	bl	80085c8 <_printf_i>
 800c41e:	e7e4      	b.n	800c3ea <_vfiprintf_r+0x1ea>
 800c420:	0800cc29 	.word	0x0800cc29
 800c424:	0800cc33 	.word	0x0800cc33
 800c428:	08008081 	.word	0x08008081
 800c42c:	0800c1dd 	.word	0x0800c1dd
 800c430:	0800cc2f 	.word	0x0800cc2f

0800c434 <__swbuf_r>:
 800c434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c436:	460e      	mov	r6, r1
 800c438:	4614      	mov	r4, r2
 800c43a:	4605      	mov	r5, r0
 800c43c:	b118      	cbz	r0, 800c446 <__swbuf_r+0x12>
 800c43e:	6a03      	ldr	r3, [r0, #32]
 800c440:	b90b      	cbnz	r3, 800c446 <__swbuf_r+0x12>
 800c442:	f7fc fc7f 	bl	8008d44 <__sinit>
 800c446:	69a3      	ldr	r3, [r4, #24]
 800c448:	60a3      	str	r3, [r4, #8]
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	071a      	lsls	r2, r3, #28
 800c44e:	d525      	bpl.n	800c49c <__swbuf_r+0x68>
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	b31b      	cbz	r3, 800c49c <__swbuf_r+0x68>
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	6922      	ldr	r2, [r4, #16]
 800c458:	1a98      	subs	r0, r3, r2
 800c45a:	6963      	ldr	r3, [r4, #20]
 800c45c:	b2f6      	uxtb	r6, r6
 800c45e:	4283      	cmp	r3, r0
 800c460:	4637      	mov	r7, r6
 800c462:	dc04      	bgt.n	800c46e <__swbuf_r+0x3a>
 800c464:	4621      	mov	r1, r4
 800c466:	4628      	mov	r0, r5
 800c468:	f7ff fa2a 	bl	800b8c0 <_fflush_r>
 800c46c:	b9e0      	cbnz	r0, 800c4a8 <__swbuf_r+0x74>
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	3b01      	subs	r3, #1
 800c472:	60a3      	str	r3, [r4, #8]
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	6022      	str	r2, [r4, #0]
 800c47a:	701e      	strb	r6, [r3, #0]
 800c47c:	6962      	ldr	r2, [r4, #20]
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	429a      	cmp	r2, r3
 800c482:	d004      	beq.n	800c48e <__swbuf_r+0x5a>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	07db      	lsls	r3, r3, #31
 800c488:	d506      	bpl.n	800c498 <__swbuf_r+0x64>
 800c48a:	2e0a      	cmp	r6, #10
 800c48c:	d104      	bne.n	800c498 <__swbuf_r+0x64>
 800c48e:	4621      	mov	r1, r4
 800c490:	4628      	mov	r0, r5
 800c492:	f7ff fa15 	bl	800b8c0 <_fflush_r>
 800c496:	b938      	cbnz	r0, 800c4a8 <__swbuf_r+0x74>
 800c498:	4638      	mov	r0, r7
 800c49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c49c:	4621      	mov	r1, r4
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 f806 	bl	800c4b0 <__swsetup_r>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0d5      	beq.n	800c454 <__swbuf_r+0x20>
 800c4a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c4ac:	e7f4      	b.n	800c498 <__swbuf_r+0x64>
	...

0800c4b0 <__swsetup_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4b2a      	ldr	r3, [pc, #168]	; (800c55c <__swsetup_r+0xac>)
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	b118      	cbz	r0, 800c4c4 <__swsetup_r+0x14>
 800c4bc:	6a03      	ldr	r3, [r0, #32]
 800c4be:	b90b      	cbnz	r3, 800c4c4 <__swsetup_r+0x14>
 800c4c0:	f7fc fc40 	bl	8008d44 <__sinit>
 800c4c4:	89a3      	ldrh	r3, [r4, #12]
 800c4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ca:	0718      	lsls	r0, r3, #28
 800c4cc:	d422      	bmi.n	800c514 <__swsetup_r+0x64>
 800c4ce:	06d9      	lsls	r1, r3, #27
 800c4d0:	d407      	bmi.n	800c4e2 <__swsetup_r+0x32>
 800c4d2:	2309      	movs	r3, #9
 800c4d4:	602b      	str	r3, [r5, #0]
 800c4d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	e034      	b.n	800c54c <__swsetup_r+0x9c>
 800c4e2:	0758      	lsls	r0, r3, #29
 800c4e4:	d512      	bpl.n	800c50c <__swsetup_r+0x5c>
 800c4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e8:	b141      	cbz	r1, 800c4fc <__swsetup_r+0x4c>
 800c4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	d002      	beq.n	800c4f8 <__swsetup_r+0x48>
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f7fd fbc2 	bl	8009c7c <_free_r>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	6363      	str	r3, [r4, #52]	; 0x34
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c502:	81a3      	strh	r3, [r4, #12]
 800c504:	2300      	movs	r3, #0
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	f043 0308 	orr.w	r3, r3, #8
 800c512:	81a3      	strh	r3, [r4, #12]
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	b94b      	cbnz	r3, 800c52c <__swsetup_r+0x7c>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c522:	d003      	beq.n	800c52c <__swsetup_r+0x7c>
 800c524:	4621      	mov	r1, r4
 800c526:	4628      	mov	r0, r5
 800c528:	f000 f884 	bl	800c634 <__smakebuf_r>
 800c52c:	89a0      	ldrh	r0, [r4, #12]
 800c52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c532:	f010 0301 	ands.w	r3, r0, #1
 800c536:	d00a      	beq.n	800c54e <__swsetup_r+0x9e>
 800c538:	2300      	movs	r3, #0
 800c53a:	60a3      	str	r3, [r4, #8]
 800c53c:	6963      	ldr	r3, [r4, #20]
 800c53e:	425b      	negs	r3, r3
 800c540:	61a3      	str	r3, [r4, #24]
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	b943      	cbnz	r3, 800c558 <__swsetup_r+0xa8>
 800c546:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c54a:	d1c4      	bne.n	800c4d6 <__swsetup_r+0x26>
 800c54c:	bd38      	pop	{r3, r4, r5, pc}
 800c54e:	0781      	lsls	r1, r0, #30
 800c550:	bf58      	it	pl
 800c552:	6963      	ldrpl	r3, [r4, #20]
 800c554:	60a3      	str	r3, [r4, #8]
 800c556:	e7f4      	b.n	800c542 <__swsetup_r+0x92>
 800c558:	2000      	movs	r0, #0
 800c55a:	e7f7      	b.n	800c54c <__swsetup_r+0x9c>
 800c55c:	20000064 	.word	0x20000064

0800c560 <_raise_r>:
 800c560:	291f      	cmp	r1, #31
 800c562:	b538      	push	{r3, r4, r5, lr}
 800c564:	4604      	mov	r4, r0
 800c566:	460d      	mov	r5, r1
 800c568:	d904      	bls.n	800c574 <_raise_r+0x14>
 800c56a:	2316      	movs	r3, #22
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	f04f 30ff 	mov.w	r0, #4294967295
 800c572:	bd38      	pop	{r3, r4, r5, pc}
 800c574:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c576:	b112      	cbz	r2, 800c57e <_raise_r+0x1e>
 800c578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c57c:	b94b      	cbnz	r3, 800c592 <_raise_r+0x32>
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 f830 	bl	800c5e4 <_getpid_r>
 800c584:	462a      	mov	r2, r5
 800c586:	4601      	mov	r1, r0
 800c588:	4620      	mov	r0, r4
 800c58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c58e:	f000 b817 	b.w	800c5c0 <_kill_r>
 800c592:	2b01      	cmp	r3, #1
 800c594:	d00a      	beq.n	800c5ac <_raise_r+0x4c>
 800c596:	1c59      	adds	r1, r3, #1
 800c598:	d103      	bne.n	800c5a2 <_raise_r+0x42>
 800c59a:	2316      	movs	r3, #22
 800c59c:	6003      	str	r3, [r0, #0]
 800c59e:	2001      	movs	r0, #1
 800c5a0:	e7e7      	b.n	800c572 <_raise_r+0x12>
 800c5a2:	2400      	movs	r4, #0
 800c5a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	4798      	blx	r3
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e7e0      	b.n	800c572 <_raise_r+0x12>

0800c5b0 <raise>:
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <raise+0xc>)
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	f7ff bfd3 	b.w	800c560 <_raise_r>
 800c5ba:	bf00      	nop
 800c5bc:	20000064 	.word	0x20000064

0800c5c0 <_kill_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d07      	ldr	r5, [pc, #28]	; (800c5e0 <_kill_r+0x20>)
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	602b      	str	r3, [r5, #0]
 800c5ce:	f7f5 fbbf 	bl	8001d50 <_kill>
 800c5d2:	1c43      	adds	r3, r0, #1
 800c5d4:	d102      	bne.n	800c5dc <_kill_r+0x1c>
 800c5d6:	682b      	ldr	r3, [r5, #0]
 800c5d8:	b103      	cbz	r3, 800c5dc <_kill_r+0x1c>
 800c5da:	6023      	str	r3, [r4, #0]
 800c5dc:	bd38      	pop	{r3, r4, r5, pc}
 800c5de:	bf00      	nop
 800c5e0:	200005ac 	.word	0x200005ac

0800c5e4 <_getpid_r>:
 800c5e4:	f7f5 bbac 	b.w	8001d40 <_getpid>

0800c5e8 <__swhatbuf_r>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f0:	2900      	cmp	r1, #0
 800c5f2:	b096      	sub	sp, #88	; 0x58
 800c5f4:	4615      	mov	r5, r2
 800c5f6:	461e      	mov	r6, r3
 800c5f8:	da0d      	bge.n	800c616 <__swhatbuf_r+0x2e>
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c600:	f04f 0100 	mov.w	r1, #0
 800c604:	bf0c      	ite	eq
 800c606:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c60a:	2340      	movne	r3, #64	; 0x40
 800c60c:	2000      	movs	r0, #0
 800c60e:	6031      	str	r1, [r6, #0]
 800c610:	602b      	str	r3, [r5, #0]
 800c612:	b016      	add	sp, #88	; 0x58
 800c614:	bd70      	pop	{r4, r5, r6, pc}
 800c616:	466a      	mov	r2, sp
 800c618:	f000 f848 	bl	800c6ac <_fstat_r>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	dbec      	blt.n	800c5fa <__swhatbuf_r+0x12>
 800c620:	9901      	ldr	r1, [sp, #4]
 800c622:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c626:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c62a:	4259      	negs	r1, r3
 800c62c:	4159      	adcs	r1, r3
 800c62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c632:	e7eb      	b.n	800c60c <__swhatbuf_r+0x24>

0800c634 <__smakebuf_r>:
 800c634:	898b      	ldrh	r3, [r1, #12]
 800c636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c638:	079d      	lsls	r5, r3, #30
 800c63a:	4606      	mov	r6, r0
 800c63c:	460c      	mov	r4, r1
 800c63e:	d507      	bpl.n	800c650 <__smakebuf_r+0x1c>
 800c640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	6123      	str	r3, [r4, #16]
 800c648:	2301      	movs	r3, #1
 800c64a:	6163      	str	r3, [r4, #20]
 800c64c:	b002      	add	sp, #8
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	ab01      	add	r3, sp, #4
 800c652:	466a      	mov	r2, sp
 800c654:	f7ff ffc8 	bl	800c5e8 <__swhatbuf_r>
 800c658:	9900      	ldr	r1, [sp, #0]
 800c65a:	4605      	mov	r5, r0
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7fd fb81 	bl	8009d64 <_malloc_r>
 800c662:	b948      	cbnz	r0, 800c678 <__smakebuf_r+0x44>
 800c664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c668:	059a      	lsls	r2, r3, #22
 800c66a:	d4ef      	bmi.n	800c64c <__smakebuf_r+0x18>
 800c66c:	f023 0303 	bic.w	r3, r3, #3
 800c670:	f043 0302 	orr.w	r3, r3, #2
 800c674:	81a3      	strh	r3, [r4, #12]
 800c676:	e7e3      	b.n	800c640 <__smakebuf_r+0xc>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	6020      	str	r0, [r4, #0]
 800c67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c680:	81a3      	strh	r3, [r4, #12]
 800c682:	9b00      	ldr	r3, [sp, #0]
 800c684:	6163      	str	r3, [r4, #20]
 800c686:	9b01      	ldr	r3, [sp, #4]
 800c688:	6120      	str	r0, [r4, #16]
 800c68a:	b15b      	cbz	r3, 800c6a4 <__smakebuf_r+0x70>
 800c68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c690:	4630      	mov	r0, r6
 800c692:	f000 f81d 	bl	800c6d0 <_isatty_r>
 800c696:	b128      	cbz	r0, 800c6a4 <__smakebuf_r+0x70>
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	f023 0303 	bic.w	r3, r3, #3
 800c69e:	f043 0301 	orr.w	r3, r3, #1
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	431d      	orrs	r5, r3
 800c6a8:	81a5      	strh	r5, [r4, #12]
 800c6aa:	e7cf      	b.n	800c64c <__smakebuf_r+0x18>

0800c6ac <_fstat_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4d07      	ldr	r5, [pc, #28]	; (800c6cc <_fstat_r+0x20>)
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	f7f5 fba8 	bl	8001e0e <_fstat>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	d102      	bne.n	800c6c8 <_fstat_r+0x1c>
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	b103      	cbz	r3, 800c6c8 <_fstat_r+0x1c>
 800c6c6:	6023      	str	r3, [r4, #0]
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ca:	bf00      	nop
 800c6cc:	200005ac 	.word	0x200005ac

0800c6d0 <_isatty_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4d06      	ldr	r5, [pc, #24]	; (800c6ec <_isatty_r+0x1c>)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	602b      	str	r3, [r5, #0]
 800c6dc:	f7f5 fba7 	bl	8001e2e <_isatty>
 800c6e0:	1c43      	adds	r3, r0, #1
 800c6e2:	d102      	bne.n	800c6ea <_isatty_r+0x1a>
 800c6e4:	682b      	ldr	r3, [r5, #0]
 800c6e6:	b103      	cbz	r3, 800c6ea <_isatty_r+0x1a>
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	bd38      	pop	{r3, r4, r5, pc}
 800c6ec:	200005ac 	.word	0x200005ac

0800c6f0 <_init>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	bf00      	nop
 800c6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f6:	bc08      	pop	{r3}
 800c6f8:	469e      	mov	lr, r3
 800c6fa:	4770      	bx	lr

0800c6fc <_fini>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	bf00      	nop
 800c700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c702:	bc08      	pop	{r3}
 800c704:	469e      	mov	lr, r3
 800c706:	4770      	bx	lr
