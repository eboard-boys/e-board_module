
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800bc78  0800bc78  0001bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c208  0800c208  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c210  0800c210  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c210  0800c210  0001c210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c214  0800c214  0001c214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001d4  0800c3ec  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800c3ec  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018cf4  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb0  00000000  00000000  00038f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0003bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001214  00000000  00000000  0003d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a528  00000000  00000000  0003e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6d1  00000000  00000000  00068d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b0b7  00000000  00000000  000843fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078e0  00000000  00000000  0018f4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00196d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc60 	.word	0x0800bc60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800bc60 	.word	0x0800bc60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b090      	sub	sp, #64	; 0x40
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fe3f 	bl	8001c78 <HAL_Init>

  /* USER CODE BEGIN Init */
  char msg[50];
  int pot;
  int Throttle;
  Speed = 0;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <main+0xc8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f86a 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fa96 	bl	8001534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001008:	f000 fa64 	bl	80014d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800100c:	f000 f9ba 	bl	8001384 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001010:	f000 f8b4 	bl	800117c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001014:	f000 f928 	bl	8001268 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001018:	f000 f966 	bl	80012e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800101c:	f000 fa2a 	bl	8001474 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001020:	4826      	ldr	r0, [pc, #152]	; (80010bc <main+0xcc>)
 8001022:	f001 f9fd 	bl	8002420 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001026:	210c      	movs	r1, #12
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <main+0xd0>)
 800102a:	f004 f9ad 	bl	8005388 <HAL_TIM_PWM_Start>
  //MPU_6050_Init();
  HAL_TIM_Base_Start(&htim2);
 800102e:	4825      	ldr	r0, [pc, #148]	; (80010c4 <main+0xd4>)
 8001030:	f004 f8e0 	bl	80051f4 <HAL_TIM_Base_Start>
  float sec = 0;
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 800103a:	4820      	ldr	r0, [pc, #128]	; (80010bc <main+0xcc>)
 800103c:	f001 f9f0 	bl	8002420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	481d      	ldr	r0, [pc, #116]	; (80010bc <main+0xcc>)
 8001046:	f001 faa5 	bl	8002594 <HAL_ADC_PollForConversion>
	pot = HAL_ADC_GetValue(&hadc1);
 800104a:	481c      	ldr	r0, [pc, #112]	; (80010bc <main+0xcc>)
 800104c:	f001 fb7a 	bl	8002744 <HAL_ADC_GetValue>
 8001050:	4603      	mov	r3, r0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c

	pot = (pot - 1500) / 30;
 8001054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001056:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <main+0xd8>)
 800105c:	fb82 1203 	smull	r1, r2, r2, r3
 8001060:	441a      	add	r2, r3
 8001062:	1112      	asrs	r2, r2, #4
 8001064:	17db      	asrs	r3, r3, #31
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (pot < 0)
 800106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106c:	2b00      	cmp	r3, #0
 800106e:	da02      	bge.n	8001076 <main+0x86>
	{
		pot = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001074:	e004      	b.n	8001080 <main+0x90>
	}
	else if (pot > 80)
 8001076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001078:	2b50      	cmp	r3, #80	; 0x50
 800107a:	dd01      	ble.n	8001080 <main+0x90>
	{
		pot = 80;
 800107c:	2350      	movs	r3, #80	; 0x50
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}



	//Get_Speed();
	sprintf(msg, "Pot: %i\r\n", pot);
 8001080:	463b      	mov	r3, r7
 8001082:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001084:	4911      	ldr	r1, [pc, #68]	; (80010cc <main+0xdc>)
 8001086:	4618      	mov	r0, r3
 8001088:	f007 f94c 	bl	8008324 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800108c:	463b      	mov	r3, r7
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8ee 	bl	8000270 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	4639      	mov	r1, r7
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <main+0xe0>)
 80010a0:	f005 f95c 	bl	800635c <HAL_UART_Transmit>

	//if (HAL_UART_Receive(&huart1, &pot, 1, HAL_MAX_DELAY) == HAL_OK) {
	Throttle = pot + 80;
 80010a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010a6:	3350      	adds	r3, #80	; 0x50
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
	TIM3->CCR4 = Throttle;
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <main+0xe4>)
 80010ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
	//} else {
	    // Error handling if data reception fails
	//}
	HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 fe5d 	bl	8001d70 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 80010b6:	e7c0      	b.n	800103a <main+0x4a>
 80010b8:	20000450 	.word	0x20000450
 80010bc:	200001f0 	.word	0x200001f0
 80010c0:	200002f4 	.word	0x200002f4
 80010c4:	200002a8 	.word	0x200002a8
 80010c8:	88888889 	.word	0x88888889
 80010cc:	0800bc78 	.word	0x0800bc78
 80010d0:	200003c8 	.word	0x200003c8
 80010d4:	40000400 	.word	0x40000400

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b096      	sub	sp, #88	; 0x58
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2244      	movs	r2, #68	; 0x44
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 f97f 	bl	80083ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fe:	f002 fd0f 	bl	8003b20 <HAL_PWREx_ControlVoltageScaling>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001108:	f000 fa7a 	bl	8001600 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001126:	230a      	movs	r3, #10
 8001128:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800112a:	2307      	movs	r3, #7
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fd46 	bl	8003bcc <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001146:	f000 fa5b 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2303      	movs	r3, #3
 8001150:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	2104      	movs	r1, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f003 f90e 	bl	8004384 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800116e:	f000 fa47 	bl	8001600 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3758      	adds	r7, #88	; 0x58
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <MX_ADC1_Init+0xe0>)
 80011a0:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <MX_ADC1_Init+0xe4>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_ADC1_Init+0xe0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_ADC1_Init+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_ADC1_Init+0xe0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_ADC1_Init+0xe0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_ADC1_Init+0xe0>)
 80011be:	2204      	movs	r2, #4
 80011c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_ADC1_Init+0xe0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_ADC1_Init+0xe0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_ADC1_Init+0xe0>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_ADC1_Init+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_ADC1_Init+0xe0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_ADC1_Init+0xe0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_ADC1_Init+0xe0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_ADC1_Init+0xe0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_ADC1_Init+0xe0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <MX_ADC1_Init+0xe0>)
 8001200:	f000 ffbe 	bl	8002180 <HAL_ADC_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800120a:	f000 f9f9 	bl	8001600 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <MX_ADC1_Init+0xe0>)
 800121a:	f001 ff3f 	bl	800309c <HAL_ADCEx_MultiModeConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001224:	f000 f9ec 	bl	8001600 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_ADC1_Init+0xe8>)
 800122a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122c:	2306      	movs	r3, #6
 800122e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001234:	237f      	movs	r3, #127	; 0x7f
 8001236:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001238:	2304      	movs	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_ADC1_Init+0xe0>)
 8001246:	f001 fa8b 	bl	8002760 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001250:	f000 f9d6 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001f0 	.word	0x200001f0
 8001260:	50040000 	.word	0x50040000
 8001264:	04300002 	.word	0x04300002

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_I2C1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_I2C1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_I2C1_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_I2C1_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	f002 fafc 	bl	80038a0 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f000 f9a7 	bl	8001600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <MX_I2C1_Init+0x74>)
 80012b6:	f002 fb8e 	bl	80039d6 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f000 f99e 	bl	8001600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_I2C1_Init+0x74>)
 80012c8:	f002 fbd0 	bl	8003a6c <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f995 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000254 	.word	0x20000254
 80012e0:	40005400 	.word	0x40005400
 80012e4:	10909cec 	.word	0x10909cec

080012e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <MX_TIM2_Init+0x98>)
 8001308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_TIM2_Init+0x98>)
 8001310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_TIM2_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_TIM2_Init+0x98>)
 800131e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_TIM2_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM2_Init+0x98>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM2_Init+0x98>)
 8001332:	f003 ff07 	bl	8005144 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800133c:	f000 f960 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_TIM2_Init+0x98>)
 800134e:	f004 fa35 	bl	80057bc <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001358:	f000 f952 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_TIM2_Init+0x98>)
 800136a:	f004 ff21 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001374:	f000 f944 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002a8 	.word	0x200002a8

08001384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <MX_TIM3_Init+0xe8>)
 80013b8:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <MX_TIM3_Init+0xec>)
 80013ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <MX_TIM3_Init+0xe8>)
 80013be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <MX_TIM3_Init+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <MX_TIM3_Init+0xe8>)
 80013cc:	f240 623f 	movw	r2, #1599	; 0x63f
 80013d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <MX_TIM3_Init+0xe8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_TIM3_Init+0xe8>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013de:	4823      	ldr	r0, [pc, #140]	; (800146c <MX_TIM3_Init+0xe8>)
 80013e0:	f003 feb0 	bl	8005144 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80013ea:	f000 f909 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f8:	4619      	mov	r1, r3
 80013fa:	481c      	ldr	r0, [pc, #112]	; (800146c <MX_TIM3_Init+0xe8>)
 80013fc:	f004 f9de 	bl	80057bc <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001406:	f000 f8fb 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800140a:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_TIM3_Init+0xe8>)
 800140c:	f003 ff5a 	bl	80052c4 <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001416:	f000 f8f3 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <MX_TIM3_Init+0xe8>)
 800142a:	f004 fec1 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001434:	f000 f8e4 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	220c      	movs	r2, #12
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM3_Init+0xe8>)
 8001450:	f004 f8a0 	bl	8005594 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800145a:	f000 f8d1 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM3_Init+0xe8>)
 8001460:	f000 f9f2 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002f4 	.word	0x200002f4
 8001470:	40000400 	.word	0x40000400

08001474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USART1_UART_Init+0x58>)
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 800147c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_USART1_UART_Init+0x58>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART1_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_USART1_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART1_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART1_UART_Init+0x58>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART1_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART1_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART1_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART1_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART1_UART_Init+0x58>)
 80014b8:	f004 ff02 	bl	80062c0 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014c2:	f000 f89d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000340 	.word	0x20000340
 80014d0:	40013800 	.word	0x40013800

080014d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <MX_USART2_UART_Init+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001518:	f004 fed2 	bl	80062c0 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001522:	f000 f86d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200003c8 	.word	0x200003c8
 8001530:	40004400 	.word	0x40004400

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_GPIO_Init+0xc4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_GPIO_Init+0xc4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <MX_GPIO_Init+0xc4>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_GPIO_Init+0xc4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b2:	f002 f95d 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <MX_GPIO_Init+0xc8>)
 80015ce:	f001 ffa5 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015d2:	2320      	movs	r3, #32
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f001 ff96 	bl	800351c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	48000800 	.word	0x48000800

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_MspInit+0x44>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6613      	str	r3, [r2, #96]	; 0x60
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_MspInit+0x44>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_MspInit+0x44>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x44>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6593      	str	r3, [r2, #88]	; 0x58
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x44>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ac      	sub	sp, #176	; 0xb0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2288      	movs	r2, #136	; 0x88
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 feb8 	bl	80083ea <memset>
  if(hadc->Instance==ADC1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_ADC_MspInit+0xc8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d146      	bne.n	8001712 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001688:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800168a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800168e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800169a:	2308      	movs	r3, #8
 800169c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800169e:	2307      	movs	r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f889 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016c0:	f7ff ff9e 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_ADC_MspInit+0xcc>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_ADC_MspInit+0xcc>)
 80016ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_ADC_MspInit+0xcc>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_ADC_MspInit+0xcc>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_ADC_MspInit+0xcc>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_ADC_MspInit+0xcc>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016fa:	230b      	movs	r3, #11
 80016fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_ADC_MspInit+0xd0>)
 800170e:	f001 ff05 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	37b0      	adds	r7, #176	; 0xb0
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	50040000 	.word	0x50040000
 8001720:	40021000 	.word	0x40021000
 8001724:	48000800 	.word	0x48000800

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0ac      	sub	sp, #176	; 0xb0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2288      	movs	r2, #136	; 0x88
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f006 fe4e 	bl	80083ea <memset>
  if(hi2c->Instance==I2C1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_I2C_MspInit+0xb0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d13b      	bne.n	80017d0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4618      	mov	r0, r3
 8001766:	f003 f831 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff ff46 	bl	8001600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800178c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	4619      	mov	r1, r3
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <HAL_I2C_MspInit+0xb8>)
 80017b4:	f001 feb2 	bl	800351c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	6593      	str	r3, [r2, #88]	; 0x58
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	37b0      	adds	r7, #176	; 0xb0
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400

080017e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f4:	d10c      	bne.n	8001810 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_TIM_Base_MspInit+0x5c>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_TIM_Base_MspInit+0x5c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_TIM_Base_MspInit+0x5c>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800180e:	e010      	b.n	8001832 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_TIM_Base_MspInit+0x60>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10b      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x5c>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_TIM_Base_MspInit+0x5c>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6593      	str	r3, [r2, #88]	; 0x58
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_TIM_Base_MspInit+0x5c>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	40000400 	.word	0x40000400

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_TIM_MspPostInit+0x64>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d11c      	bne.n	80018a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_TIM_MspPostInit+0x68>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <HAL_TIM_MspPostInit+0x68>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_TIM_MspPostInit+0x68>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001886:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001894:	2302      	movs	r3, #2
 8001896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <HAL_TIM_MspPostInit+0x6c>)
 80018a0:	f001 fe3c 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000800 	.word	0x48000800

080018b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0ae      	sub	sp, #184	; 0xb8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	2288      	movs	r2, #136	; 0x88
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f006 fd86 	bl	80083ea <memset>
  if(huart->Instance==USART1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_UART_MspInit+0x148>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d145      	bne.n	8001974 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ec:	2300      	movs	r3, #0
 80018ee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 ff69 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001900:	f7ff fe7e 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 800190a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190e:	6613      	str	r3, [r2, #96]	; 0x60
 8001910:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001934:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194e:	2307      	movs	r3, #7
 8001950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f001 fddd 	bl	800351c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2025      	movs	r0, #37	; 0x25
 8001968:	f001 fd23 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800196c:	2025      	movs	r0, #37	; 0x25
 800196e:	f001 fd3c 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001972:	e040      	b.n	80019f6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a23      	ldr	r2, [pc, #140]	; (8001a08 <HAL_UART_MspInit+0x150>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d13b      	bne.n	80019f6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800197e:	2302      	movs	r3, #2
 8001980:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001982:	2300      	movs	r3, #0
 8001984:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4618      	mov	r0, r3
 800198c:	f002 ff1e 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001996:	f7ff fe33 	bl	8001600 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_UART_MspInit+0x14c>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ca:	230c      	movs	r3, #12
 80019cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e2:	2307      	movs	r3, #7
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f001 fd93 	bl	800351c <HAL_GPIO_Init>
}
 80019f6:	bf00      	nop
 80019f8:	37b8      	adds	r7, #184	; 0xb8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40004400 	.word	0x40004400

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f96a 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART1_IRQHandler+0x10>)
 8001a66:	f004 fd03 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000340 	.word	0x20000340

08001a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return 1;
 8001a78:	2301      	movs	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a8e:	f006 fcff 	bl	8008490 <__errno>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2216      	movs	r2, #22
 8001a96:	601a      	str	r2, [r3, #0]
  return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_exit>:

void _exit (int status)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe7 	bl	8001a84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab6:	e7fe      	b.n	8001ab6 <_exit+0x12>

08001ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e00a      	b.n	8001ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aca:	f3af 8000 	nop.w
 8001ace:	4601      	mov	r1, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf0      	blt.n	8001aca <_read+0x12>
  }

  return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e009      	b.n	8001b18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf1      	blt.n	8001b04 <_write+0x12>
  }
  return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_close>:

int _close(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_isatty>:

int _isatty(int file)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f006 fc64 	bl	8008490 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20018000 	.word	0x20018000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	20000454 	.word	0x20000454
 8001bfc:	200005a8 	.word	0x200005a8

08001c00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c28:	f7ff ffea 	bl	8001c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c44:	4c0a      	ldr	r4, [pc, #40]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f006 fc23 	bl	800849c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c56:	f7ff f9cb 	bl	8000ff0 <main>

08001c5a <LoopForever>:

LoopForever:
    b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c68:	0800c218 	.word	0x0800c218
  ldr r2, =_sbss
 8001c6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c70:	200005a8 	.word	0x200005a8

08001c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_2_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_Init+0x3c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_Init+0x3c>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f001 fb84 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c94:	2000      	movs	r0, #0
 8001c96:	f000 f80f 	bl	8001cb8 <HAL_InitTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	e001      	b.n	8001caa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca6:	f7ff fcb1 	bl	800160c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_InitTick+0x6c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_InitTick+0x70>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_InitTick+0x6c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fb8f 	bl	8003406 <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d809      	bhi.n	8001d08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f001 fb59 	bl	80033b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_InitTick+0x74>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e007      	b.n	8001d18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e004      	b.n	8001d18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e001      	b.n	8001d18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x20>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_IncTick+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_IncTick+0x24>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000458 	.word	0x20000458

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000458 	.word	0x20000458

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ffee 	bl	8001d58 <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffde 	bl	8001d58 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000008 	.word	0x20000008

08001db8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3360      	adds	r3, #96	; 0x60
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <LL_ADC_SetOffset+0x44>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	03fff000 	.word	0x03fff000

08001e68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3360      	adds	r3, #96	; 0x60
 8001e76:	461a      	mov	r2, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3330      	adds	r3, #48	; 0x30
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	211f      	movs	r1, #31
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 011f 	and.w	r1, r3, #31
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3314      	adds	r3, #20
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0e5b      	lsrs	r3, r3, #25
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0d1b      	lsrs	r3, r3, #20
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2107      	movs	r1, #7
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0d1b      	lsrs	r3, r3, #20
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0318 	and.w	r3, r3, #24
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc4:	40d9      	lsrs	r1, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	0007ffff 	.word	0x0007ffff

08001fe8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6093      	str	r3, [r2, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsEnabled+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsEnabled+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211e:	f043 0204 	orr.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d101      	bne.n	800214a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b08      	cmp	r3, #8
 800216a:	d101      	bne.n	8002170 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e130      	b.n	80023fc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fa53 	bl	8001654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff3f 	bl	8002044 <LL_ADC_IsDeepPowerDownEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff25 	bl	8002020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff5a 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d115      	bne.n	8002212 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff3e 	bl	800206c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f0:	4b84      	ldr	r3, [pc, #528]	; (8002404 <HAL_ADC_Init+0x284>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	4a84      	ldr	r2, [pc, #528]	; (8002408 <HAL_ADC_Init+0x288>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002204:	e002      	b.n	800220c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff3c 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10d      	bne.n	800223e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff75 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002248:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80c9 	bne.w	80023ea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 80c5 	bne.w	80023ea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002264:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002268:	f043 0202 	orr.w	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <LL_ADC_IsEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d115      	bne.n	80022ac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002280:	4862      	ldr	r0, [pc, #392]	; (800240c <HAL_ADC_Init+0x28c>)
 8002282:	f7ff ff2f 	bl	80020e4 <LL_ADC_IsEnabled>
 8002286:	4604      	mov	r4, r0
 8002288:	4861      	ldr	r0, [pc, #388]	; (8002410 <HAL_ADC_Init+0x290>)
 800228a:	f7ff ff2b 	bl	80020e4 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	431c      	orrs	r4, r3
 8002292:	4860      	ldr	r0, [pc, #384]	; (8002414 <HAL_ADC_Init+0x294>)
 8002294:	f7ff ff26 	bl	80020e4 <LL_ADC_IsEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	4323      	orrs	r3, r4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4619      	mov	r1, r3
 80022a6:	485c      	ldr	r0, [pc, #368]	; (8002418 <HAL_ADC_Init+0x298>)
 80022a8:	f7ff fd86 	bl	8001db8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e5b      	ldrb	r3, [r3, #25]
 80022b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	045b      	lsls	r3, r3, #17
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_ADC_Init+0x29c>)
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	430b      	orrs	r3, r1
 8002316:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff1b 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 8002322:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d13d      	bne.n	80023a6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d13a      	bne.n	80023a6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002334:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234c:	f023 0302 	bic.w	r3, r3, #2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	430b      	orrs	r3, r1
 8002358:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002360:	2b01      	cmp	r3, #1
 8002362:	d118      	bne.n	8002396 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002386:	430a      	orrs	r2, r1
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	e007      	b.n	80023a6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10c      	bne.n	80023c8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f023 010f 	bic.w	r1, r3, #15
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
 80023c6:	e007      	b.n	80023d8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 020f 	bic.w	r2, r2, #15
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f023 0303 	bic.w	r3, r3, #3
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
 80023e8:	e007      	b.n	80023fa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3724      	adds	r7, #36	; 0x24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	20000000 	.word	0x20000000
 8002408:	053e2d63 	.word	0x053e2d63
 800240c:	50040000 	.word	0x50040000
 8002410:	50040100 	.word	0x50040100
 8002414:	50040200 	.word	0x50040200
 8002418:	50040300 	.word	0x50040300
 800241c:	fff0c007 	.word	0xfff0c007

08002420 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002428:	4857      	ldr	r0, [pc, #348]	; (8002588 <HAL_ADC_Start+0x168>)
 800242a:	f7ff fddd 	bl	8001fe8 <LL_ADC_GetMultimode>
 800242e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe7c 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 809c 	bne.w	800257a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ADC_Start+0x30>
 800244c:	2302      	movs	r3, #2
 800244e:	e097      	b.n	8002580 <HAL_ADC_Start+0x160>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fd73 	bl	8002f44 <ADC_Enable>
 800245e:	4603      	mov	r3, r0
 8002460:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f040 8083 	bne.w	8002570 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a42      	ldr	r2, [pc, #264]	; (800258c <HAL_ADC_Start+0x16c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d002      	beq.n	800248e <HAL_ADC_Start+0x6e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e000      	b.n	8002490 <HAL_ADC_Start+0x70>
 800248e:	4b40      	ldr	r3, [pc, #256]	; (8002590 <HAL_ADC_Start+0x170>)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	4293      	cmp	r3, r2
 8002496:	d002      	beq.n	800249e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d106      	bne.n	80024c6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f023 0206 	bic.w	r2, r3, #6
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	659a      	str	r2, [r3, #88]	; 0x58
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	221c      	movs	r2, #28
 80024d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <HAL_ADC_Start+0x16c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d002      	beq.n	80024ec <HAL_ADC_Start+0xcc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	e000      	b.n	80024ee <HAL_ADC_Start+0xce>
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <HAL_ADC_Start+0x170>)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d008      	beq.n	8002508 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d002      	beq.n	8002508 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b09      	cmp	r3, #9
 8002506:	d114      	bne.n	8002532 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800251e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fded 	bl	800210a <LL_ADC_REG_StartConversion>
 8002530:	e025      	b.n	800257e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <HAL_ADC_Start+0x16c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d002      	beq.n	800254e <HAL_ADC_Start+0x12e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	e000      	b.n	8002550 <HAL_ADC_Start+0x130>
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_ADC_Start+0x170>)
 8002550:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00f      	beq.n	800257e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002566:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54
 800256e:	e006      	b.n	800257e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002578:	e001      	b.n	800257e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800257e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	50040300 	.word	0x50040300
 800258c:	50040100 	.word	0x50040100
 8002590:	50040000 	.word	0x50040000

08002594 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800259e:	4866      	ldr	r0, [pc, #408]	; (8002738 <HAL_ADC_PollForConversion+0x1a4>)
 80025a0:	f7ff fd22 	bl	8001fe8 <LL_ADC_GetMultimode>
 80025a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d102      	bne.n	80025b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025ae:	2308      	movs	r3, #8
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e02a      	b.n	800260a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d002      	beq.n	80025c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d111      	bne.n	80025ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0a4      	b.n	800272e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025e4:	2304      	movs	r3, #4
 80025e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025e8:	e00f      	b.n	800260a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025ea:	4853      	ldr	r0, [pc, #332]	; (8002738 <HAL_ADC_PollForConversion+0x1a4>)
 80025ec:	f7ff fd0a 	bl	8002004 <LL_ADC_GetMultiDMATransfer>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e093      	b.n	800272e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002606:	2304      	movs	r3, #4
 8002608:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800260a:	f7ff fba5 	bl	8001d58 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002610:	e021      	b.n	8002656 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d01d      	beq.n	8002656 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800261a:	f7ff fb9d 	bl	8001d58 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <HAL_ADC_PollForConversion+0x9c>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d112      	bne.n	8002656 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e06b      	b.n	800272e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0d6      	beq.n	8002612 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fc28 	bl	8001eca <LL_ADC_REG_IsTriggerSourceSWStart>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01c      	beq.n	80026ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e5b      	ldrb	r3, [r3, #25]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d118      	bne.n	80026ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b08      	cmp	r3, #8
 8002694:	d111      	bne.n	80026ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_ADC_PollForConversion+0x1a8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d002      	beq.n	80026ca <HAL_ADC_PollForConversion+0x136>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e000      	b.n	80026cc <HAL_ADC_PollForConversion+0x138>
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_ADC_PollForConversion+0x1ac>)
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d008      	beq.n	80026e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d002      	beq.n	80026e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b09      	cmp	r3, #9
 80026e4:	d104      	bne.n	80026f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e00c      	b.n	800270a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <HAL_ADC_PollForConversion+0x1a8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d002      	beq.n	8002700 <HAL_ADC_PollForConversion+0x16c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e000      	b.n	8002702 <HAL_ADC_PollForConversion+0x16e>
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_ADC_PollForConversion+0x1ac>)
 8002702:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d104      	bne.n	800271a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2208      	movs	r2, #8
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e008      	b.n	800272c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	220c      	movs	r2, #12
 800272a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	50040300 	.word	0x50040300
 800273c:	50040100 	.word	0x50040100
 8002740:	50040000 	.word	0x50040000

08002744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0b6      	sub	sp, #216	; 0xd8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x22>
 800277e:	2302      	movs	r3, #2
 8002780:	e3c9      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x7b6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fccf 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 83aa 	bne.w	8002ef0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d824      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	3b02      	subs	r3, #2
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d81b      	bhi.n	80027ee <HAL_ADC_ConfigChannel+0x8e>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <HAL_ADC_ConfigChannel+0x5c>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d5 	.word	0x080027d5
 80027c4:	080027dd 	.word	0x080027dd
 80027c8:	080027e5 	.word	0x080027e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027cc:	230c      	movs	r3, #12
 80027ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027d2:	e010      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027d4:	2312      	movs	r3, #18
 80027d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027da:	e00c      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027dc:	2318      	movs	r3, #24
 80027de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027e2:	e008      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027ec:	e003      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027ee:	2306      	movs	r3, #6
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002804:	f7ff fb74 	bl	8001ef0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fc90 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002812:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fc9c 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 8002820:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 81a4 	bne.w	8002b76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800282e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 819f 	bne.w	8002b76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	461a      	mov	r2, r3
 8002846:	f7ff fb7f 	bl	8001f48 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d00a      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6919      	ldr	r1, [r3, #16]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800287c:	f7ff fad0 	bl	8001e20 <LL_ADC_SetOffset>
 8002880:	e179      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff faed 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x14e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fae2 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	e01e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x18c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fad7 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1a4>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	e018      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1d6>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e004      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800292c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff faa6 	bl	8001e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fa8a 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x214>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fa7f 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	e01e      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x252>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa74 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800299a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e004      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x26a>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	e018      	b.n	80029fc <HAL_ADC_ConfigChannel+0x29c>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80029de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80029e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e004      	b.n	80029fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fa43 	bl	8001e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2102      	movs	r1, #2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fa27 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x2da>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2102      	movs	r1, #2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fa1c 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	e01e      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x318>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2102      	movs	r1, #2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fa11 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	e004      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x330>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	e014      	b.n	8002aba <HAL_ADC_ConfigChannel+0x35a>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e004      	b.n	8002aba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f9e4 	bl	8001e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f9c8 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x398>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f9bd 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	0e9b      	lsrs	r3, r3, #26
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	e017      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x3c8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2103      	movs	r1, #3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f9b2 	bl	8001e68 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b12:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x3e0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	e011      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x404>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b50:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d106      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2103      	movs	r1, #3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f98f 	bl	8001e94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fab2 	bl	80020e4 <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8140 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	461a      	mov	r2, r3
 8002b96:	f7ff fa03 	bl	8001fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4a8f      	ldr	r2, [pc, #572]	; (8002ddc <HAL_ADC_ConfigChannel+0x67c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	f040 8131 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10b      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x46e>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	bf94      	ite	ls
 8002bc6:	2301      	movls	r3, #1
 8002bc8:	2300      	movhi	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e019      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x4a2>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2b09      	cmp	r3, #9
 8002bfa:	bf94      	ite	ls
 8002bfc:	2301      	movls	r3, #1
 8002bfe:	2300      	movhi	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d079      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x4c2>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	3301      	adds	r3, #1
 8002c1a:	069b      	lsls	r3, r3, #26
 8002c1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c20:	e015      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x4ee>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c32:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	069b      	lsls	r3, r3, #26
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x50e>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	e017      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x53e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x564>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	e018      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x596>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	e081      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x5b6>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	069b      	lsls	r3, r3, #26
 8002d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d14:	e015      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x5e2>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e003      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	069b      	lsls	r3, r3, #26
 8002d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x602>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0e9b      	lsrs	r3, r3, #26
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	e017      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x632>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	ea42 0103 	orr.w	r1, r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x65e>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0e9b      	lsrs	r3, r3, #26
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	e01e      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x69c>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	60fb      	str	r3, [r7, #12]
  return result;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e006      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x688>
 8002dda:	bf00      	nop
 8002ddc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7ff f8a0 	bl	8001f48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d07a      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e14:	4843      	ldr	r0, [pc, #268]	; (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e16:	f7fe fff5 	bl	8001e04 <LL_ADC_GetCommonPathInternalCh>
 8002e1a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a41      	ldr	r2, [pc, #260]	; (8002f28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d12c      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d126      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x6e8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d15d      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e50:	4619      	mov	r1, r3
 8002e52:	4834      	ldr	r0, [pc, #208]	; (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e54:	f7fe ffc3 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e72:	e002      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e80:	e040      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2d      	ldr	r2, [pc, #180]	; (8002f3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d118      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d112      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x74c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12d      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481b      	ldr	r0, [pc, #108]	; (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eb8:	f7fe ff91 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ebc:	e024      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d120      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11a      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d115      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ede:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480e      	ldr	r0, [pc, #56]	; (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eea:	f7fe ff78 	bl	8001dde <LL_ADC_SetCommonPathInternalCh>
 8002eee:	e00c      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f02:	e002      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	37d8      	adds	r7, #216	; 0xd8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	80080000 	.word	0x80080000
 8002f24:	50040300 	.word	0x50040300
 8002f28:	c7520000 	.word	0xc7520000
 8002f2c:	50040000 	.word	0x50040000
 8002f30:	50040200 	.word	0x50040200
 8002f34:	20000000 	.word	0x20000000
 8002f38:	053e2d63 	.word	0x053e2d63
 8002f3c:	cb840000 	.word	0xcb840000
 8002f40:	80000001 	.word	0x80000001

08002f44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f8c5 	bl	80020e4 <LL_ADC_IsEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d169      	bne.n	8003034 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <ADC_Enable+0xfc>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e055      	b.n	8003036 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f894 	bl	80020bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f94:	482b      	ldr	r0, [pc, #172]	; (8003044 <ADC_Enable+0x100>)
 8002f96:	f7fe ff35 	bl	8001e04 <LL_ADC_GetCommonPathInternalCh>
 8002f9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa4:	4b28      	ldr	r3, [pc, #160]	; (8003048 <ADC_Enable+0x104>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	4a28      	ldr	r2, [pc, #160]	; (800304c <ADC_Enable+0x108>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fbe:	e002      	b.n	8002fc6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fcc:	f7fe fec4 	bl	8001d58 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd2:	e028      	b.n	8003026 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f883 	bl	80020e4 <LL_ADC_IsEnabled>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff f867 	bl	80020bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fee:	f7fe feb3 	bl	8001d58 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d914      	bls.n	8003026 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d00d      	beq.n	8003026 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e007      	b.n	8003036 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d1cf      	bne.n	8002fd4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	8000003f 	.word	0x8000003f
 8003044:	50040300 	.word	0x50040300
 8003048:	20000000 	.word	0x20000000
 800304c:	053e2d63 	.word	0x053e2d63

08003050 <LL_ADC_IsEnabled>:
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <LL_ADC_IsEnabled+0x18>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <LL_ADC_IsEnabled+0x1a>
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_REG_IsConversionOngoing>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d101      	bne.n	800308e <LL_ADC_REG_IsConversionOngoing+0x18>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b09f      	sub	sp, #124	; 0x7c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e093      	b.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030c2:	2300      	movs	r3, #0
 80030c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030c6:	2300      	movs	r3, #0
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a47      	ldr	r2, [pc, #284]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030d4:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	e001      	b.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e072      	b.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ffb9 	bl	8003076 <LL_ADC_REG_IsConversionOngoing>
 8003104:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ffb3 	bl	8003076 <LL_ADC_REG_IsConversionOngoing>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d154      	bne.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003118:	2b00      	cmp	r3, #0
 800311a:	d151      	bne.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800311e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02c      	beq.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800313a:	035b      	lsls	r3, r3, #13
 800313c:	430b      	orrs	r3, r1
 800313e:	431a      	orrs	r2, r3
 8003140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003142:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003144:	4829      	ldr	r0, [pc, #164]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003146:	f7ff ff83 	bl	8003050 <LL_ADC_IsEnabled>
 800314a:	4604      	mov	r4, r0
 800314c:	4828      	ldr	r0, [pc, #160]	; (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800314e:	f7ff ff7f 	bl	8003050 <LL_ADC_IsEnabled>
 8003152:	4603      	mov	r3, r0
 8003154:	431c      	orrs	r4, r3
 8003156:	4828      	ldr	r0, [pc, #160]	; (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003158:	f7ff ff7a 	bl	8003050 <LL_ADC_IsEnabled>
 800315c:	4603      	mov	r3, r0
 800315e:	4323      	orrs	r3, r4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d137      	bne.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800316c:	f023 030f 	bic.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	6811      	ldr	r1, [r2, #0]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	6892      	ldr	r2, [r2, #8]
 8003178:	430a      	orrs	r2, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003180:	e028      	b.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800318e:	4817      	ldr	r0, [pc, #92]	; (80031ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003190:	f7ff ff5e 	bl	8003050 <LL_ADC_IsEnabled>
 8003194:	4604      	mov	r4, r0
 8003196:	4816      	ldr	r0, [pc, #88]	; (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003198:	f7ff ff5a 	bl	8003050 <LL_ADC_IsEnabled>
 800319c:	4603      	mov	r3, r0
 800319e:	431c      	orrs	r4, r3
 80031a0:	4815      	ldr	r0, [pc, #84]	; (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031a2:	f7ff ff55 	bl	8003050 <LL_ADC_IsEnabled>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4323      	orrs	r3, r4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d112      	bne.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031be:	e009      	b.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80031d2:	e000      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	377c      	adds	r7, #124	; 0x7c
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	50040000 	.word	0x50040000
 80031f0:	50040100 	.word	0x50040100
 80031f4:	50040300 	.word	0x50040300
 80031f8:	50040200 	.word	0x50040200

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <__NVIC_EnableIRQ+0x38>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db0a      	blt.n	80032c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <__NVIC_SetPriority+0x4c>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	440b      	add	r3, r1
 80032c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c4:	e00a      	b.n	80032dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	; (80032ec <__NVIC_SetPriority+0x50>)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3b04      	subs	r3, #4
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	440b      	add	r3, r1
 80032da:	761a      	strb	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf28      	it	cs
 800330e:	2304      	movcs	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3304      	adds	r3, #4
 8003316:	2b06      	cmp	r3, #6
 8003318:	d902      	bls.n	8003320 <NVIC_EncodePriority+0x30>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3b03      	subs	r3, #3
 800331e:	e000      	b.n	8003322 <NVIC_EncodePriority+0x32>
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	401a      	ands	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003338:	f04f 31ff 	mov.w	r1, #4294967295
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43d9      	mvns	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	4313      	orrs	r3, r2
         );
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003368:	d301      	bcc.n	800336e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2301      	movs	r3, #1
 800336c:	e00f      	b.n	800338e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <SysTick_Config+0x40>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003376:	210f      	movs	r1, #15
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	f7ff ff8e 	bl	800329c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <SysTick_Config+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <SysTick_Config+0x40>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff29 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033c4:	f7ff ff3e 	bl	8003244 <__NVIC_GetPriorityGrouping>
 80033c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f7ff ff8e 	bl	80032f0 <NVIC_EncodePriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff5d 	bl	800329c <__NVIC_SetPriority>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff31 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffa2 	bl	8003358 <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d008      	beq.n	8003448 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e022      	b.n	800348e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 020e 	bic.w	r2, r2, #14
 8003456:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	f003 021c 	and.w	r2, r3, #28
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f202 	lsl.w	r2, r1, r2
 800347a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d005      	beq.n	80034be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e029      	b.n	8003512 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020e 	bic.w	r2, r2, #14
 80034cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f003 021c 	and.w	r2, r3, #28
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
    }
  }
  return status;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	e17f      	b.n	800382c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8171 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d005      	beq.n	800355c <HAL_GPIO_Init+0x40>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d130      	bne.n	80035be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003592:	2201      	movs	r2, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0201 	and.w	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d118      	bne.n	80035fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80ac 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	4b5f      	ldr	r3, [pc, #380]	; (800384c <HAL_GPIO_Init+0x330>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_GPIO_Init+0x330>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6613      	str	r3, [r2, #96]	; 0x60
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_GPIO_Init+0x330>)
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e6:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_GPIO_Init+0x334>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003710:	d025      	beq.n	800375e <HAL_GPIO_Init+0x242>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x338>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <HAL_GPIO_Init+0x23e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_GPIO_Init+0x33c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d019      	beq.n	8003756 <HAL_GPIO_Init+0x23a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_GPIO_Init+0x340>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0x236>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4c      	ldr	r2, [pc, #304]	; (8003860 <HAL_GPIO_Init+0x344>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00d      	beq.n	800374e <HAL_GPIO_Init+0x232>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <HAL_GPIO_Init+0x348>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <HAL_GPIO_Init+0x22e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_GPIO_Init+0x34c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x22a>
 8003742:	2306      	movs	r3, #6
 8003744:	e00c      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003746:	2307      	movs	r3, #7
 8003748:	e00a      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374a:	2305      	movs	r3, #5
 800374c:	e008      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374e:	2304      	movs	r3, #4
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003752:	2303      	movs	r3, #3
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375e:	2300      	movs	r3, #0
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	f002 0203 	and.w	r2, r2, #3
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	4093      	lsls	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003770:	4937      	ldr	r1, [pc, #220]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_GPIO_Init+0x350>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a2:	4a32      	ldr	r2, [pc, #200]	; (800386c <HAL_GPIO_Init+0x350>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_GPIO_Init+0x350>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <HAL_GPIO_Init+0x350>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_GPIO_Init+0x350>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_GPIO_Init+0x350>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_GPIO_Init+0x350>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_GPIO_Init+0x350>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae78 	bne.w	800352c <HAL_GPIO_Init+0x10>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40010000 	.word	0x40010000
 8003854:	48000400 	.word	0x48000400
 8003858:	48000800 	.word	0x48000800
 800385c:	48000c00 	.word	0x48000c00
 8003860:	48001000 	.word	0x48001000
 8003864:	48001400 	.word	0x48001400
 8003868:	48001800 	.word	0x48001800
 800386c:	40010400 	.word	0x40010400

08003870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
 800387c:	4613      	mov	r3, r2
 800387e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800388c:	e002      	b.n	8003894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e08d      	b.n	80039ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd ff2e 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003900:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	e006      	b.n	8003928 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003926:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d108      	bne.n	8003942 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	e007      	b.n	8003952 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003950:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003964:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003974:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69d9      	ldr	r1, [r3, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d138      	bne.n	8003a5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e032      	b.n	8003a60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2224      	movs	r2, #36	; 0x24
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d139      	bne.n	8003af6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e033      	b.n	8003af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003abe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40007000 	.word	0x40007000

08003b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d130      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b30:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3c:	d038      	beq.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b46:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2232      	movs	r2, #50	; 0x32
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b64:	e002      	b.n	8003b6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b78:	d102      	bne.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f2      	bne.n	8003b66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d110      	bne.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e00f      	b.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d007      	beq.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ba8:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	431bde83 	.word	0x431bde83

08003bcc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e3ca      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bde:	4b97      	ldr	r3, [pc, #604]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be8:	4b94      	ldr	r3, [pc, #592]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80e4 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	f040 808b 	bne.w	8003d24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 8087 	bne.w	8003d24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c16:	4b89      	ldr	r3, [pc, #548]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e3a2      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_RCC_OscConfig+0x7c>
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c46:	e005      	b.n	8003c54 <HAL_RCC_OscConfig+0x88>
 8003c48:	4b7c      	ldr	r3, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d223      	bcs.n	8003ca0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fd55 	bl	800470c <RCC_SetFlashLatencyFromMSIRange>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e383      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c6c:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a72      	ldr	r2, [pc, #456]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c72:	f043 0308 	orr.w	r3, r3, #8
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	496d      	ldr	r1, [pc, #436]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c8a:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	4968      	ldr	r1, [pc, #416]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
 8003c9e:	e025      	b.n	8003cec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca0:	4b66      	ldr	r3, [pc, #408]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b63      	ldr	r3, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4960      	ldr	r1, [pc, #384]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	495b      	ldr	r1, [pc, #364]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fd15 	bl	800470c <RCC_SetFlashLatencyFromMSIRange>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e343      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cec:	f000 fc4a 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b52      	ldr	r3, [pc, #328]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	4950      	ldr	r1, [pc, #320]	; (8003e40 <HAL_RCC_OscConfig+0x274>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_RCC_OscConfig+0x278>)
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d0c:	4b4e      	ldr	r3, [pc, #312]	; (8003e48 <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd ffd1 	bl	8001cb8 <HAL_InitTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d052      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	e327      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d032      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a42      	ldr	r2, [pc, #264]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f80e 	bl	8001d58 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d40:	f7fe f80a 	bl	8001d58 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e310      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d52:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a36      	ldr	r2, [pc, #216]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d64:	f043 0308 	orr.w	r3, r3, #8
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4931      	ldr	r1, [pc, #196]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7c:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	492c      	ldr	r1, [pc, #176]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	e01a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a29      	ldr	r2, [pc, #164]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d9e:	f7fd ffdb 	bl	8001d58 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003da6:	f7fd ffd7 	bl	8001d58 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e2dd      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x1da>
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d074      	beq.n	8003ebe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d005      	beq.n	8003de6 <HAL_RCC_OscConfig+0x21a>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d10e      	bne.n	8003dfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d064      	beq.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d160      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e2ba      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x24a>
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0b      	ldr	r2, [pc, #44]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e026      	b.n	8003e64 <HAL_RCC_OscConfig+0x298>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e1e:	d115      	bne.n	8003e4c <HAL_RCC_OscConfig+0x280>
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a02      	ldr	r2, [pc, #8]	; (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	e014      	b.n	8003e64 <HAL_RCC_OscConfig+0x298>
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	0800bd98 	.word	0x0800bd98
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000004 	.word	0x20000004
 8003e4c:	4ba0      	ldr	r3, [pc, #640]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a9f      	ldr	r2, [pc, #636]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b9d      	ldr	r3, [pc, #628]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a9c      	ldr	r2, [pc, #624]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd ff74 	bl	8001d58 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fd ff70 	bl	8001d58 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e276      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e86:	4b92      	ldr	r3, [pc, #584]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x2a8>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd ff60 	bl	8001d58 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fd ff5c 	bl	8001d58 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e262      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eae:	4b88      	ldr	r3, [pc, #544]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2d0>
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d060      	beq.n	8003f8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x310>
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d116      	bne.n	8003f0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003edc:	4b7c      	ldr	r3, [pc, #496]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x328>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e23f      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b76      	ldr	r3, [pc, #472]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	4973      	ldr	r1, [pc, #460]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	e040      	b.n	8003f8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d023      	beq.n	8003f5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f12:	4b6f      	ldr	r3, [pc, #444]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6e      	ldr	r2, [pc, #440]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7fd ff1b 	bl	8001d58 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f26:	f7fd ff17 	bl	8001d58 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e21d      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f38:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f44:	4b62      	ldr	r3, [pc, #392]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	495f      	ldr	r1, [pc, #380]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
 8003f58:	e018      	b.n	8003f8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5a:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5c      	ldr	r2, [pc, #368]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fd fef7 	bl	8001d58 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6e:	f7fd fef3 	bl	8001d58 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e1f9      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03c      	beq.n	8004012 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01c      	beq.n	8003fda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa0:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa6:	4a4a      	ldr	r2, [pc, #296]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fed2 	bl	8001d58 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fd fece 	bl	8001d58 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1d4      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ef      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x3ec>
 8003fd8:	e01b      	b.n	8004012 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe0:	4a3b      	ldr	r2, [pc, #236]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fd feb5 	bl	8001d58 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff2:	f7fd feb1 	bl	8001d58 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1b7      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004004:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ef      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80a6 	beq.w	800416c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6593      	str	r3, [r2, #88]	; 0x58
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004048:	2301      	movs	r3, #1
 800404a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <HAL_RCC_OscConfig+0x508>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d118      	bne.n	800408a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x508>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_RCC_OscConfig+0x508>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004064:	f7fd fe78 	bl	8001d58 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd fe74 	bl	8001d58 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e17a      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_RCC_OscConfig+0x508>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d108      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4d8>
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a2:	e029      	b.n	80040f8 <HAL_RCC_OscConfig+0x52c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d115      	bne.n	80040d8 <HAL_RCC_OscConfig+0x50c>
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	4a03      	ldr	r2, [pc, #12]	; (80040d0 <HAL_RCC_OscConfig+0x504>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040cc:	e014      	b.n	80040f8 <HAL_RCC_OscConfig+0x52c>
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
 80040d8:	4b9c      	ldr	r3, [pc, #624]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a9b      	ldr	r2, [pc, #620]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e8:	4b98      	ldr	r3, [pc, #608]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a97      	ldr	r2, [pc, #604]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d016      	beq.n	800412e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fe2a 	bl	8001d58 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	e00a      	b.n	800411e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fd fe26 	bl	8001d58 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e12a      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ed      	beq.n	8004108 <HAL_RCC_OscConfig+0x53c>
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fd fe13 	bl	8001d58 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fe0f 	bl	8001d58 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e113      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800414c:	4b7f      	ldr	r3, [pc, #508]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ed      	bne.n	8004136 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415a:	7ffb      	ldrb	r3, [r7, #31]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004160:	4b7a      	ldr	r3, [pc, #488]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	4a79      	ldr	r2, [pc, #484]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80fe 	beq.w	8004372 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	2b02      	cmp	r3, #2
 800417c:	f040 80d0 	bne.w	8004320 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004180:	4b72      	ldr	r3, [pc, #456]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0203 	and.w	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	429a      	cmp	r2, r3
 8004192:	d130      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	3b01      	subs	r3, #1
 80041a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d127      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d11f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041c0:	2a07      	cmp	r2, #7
 80041c2:	bf14      	ite	ne
 80041c4:	2201      	movne	r2, #1
 80041c6:	2200      	moveq	r2, #0
 80041c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d113      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	3b01      	subs	r3, #1
 80041f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d06e      	beq.n	80042d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d069      	beq.n	80042d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041fc:	4b53      	ldr	r3, [pc, #332]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004208:	4b50      	ldr	r3, [pc, #320]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0ad      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004218:	4b4c      	ldr	r3, [pc, #304]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a4b      	ldr	r2, [pc, #300]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004224:	f7fd fd98 	bl	8001d58 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd fd94 	bl	8001d58 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e09a      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423e:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800424a:	4b40      	ldr	r3, [pc, #256]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	4b40      	ldr	r3, [pc, #256]	; (8004350 <HAL_RCC_OscConfig+0x784>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800425a:	3a01      	subs	r2, #1
 800425c:	0112      	lsls	r2, r2, #4
 800425e:	4311      	orrs	r1, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004264:	0212      	lsls	r2, r2, #8
 8004266:	4311      	orrs	r1, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800426c:	0852      	lsrs	r2, r2, #1
 800426e:	3a01      	subs	r2, #1
 8004270:	0552      	lsls	r2, r2, #21
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004278:	0852      	lsrs	r2, r2, #1
 800427a:	3a01      	subs	r2, #1
 800427c:	0652      	lsls	r2, r2, #25
 800427e:	4311      	orrs	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004284:	0912      	lsrs	r2, r2, #4
 8004286:	0452      	lsls	r2, r2, #17
 8004288:	430a      	orrs	r2, r1
 800428a:	4930      	ldr	r1, [pc, #192]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800428c:	4313      	orrs	r3, r2
 800428e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2d      	ldr	r2, [pc, #180]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a2a      	ldr	r2, [pc, #168]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042a8:	f7fd fd56 	bl	8001d58 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fd fd52 	bl	8001d58 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e058      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042ce:	e050      	b.n	8004372 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04f      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d148      	bne.n	8004372 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042ec:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_RCC_OscConfig+0x780>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042f8:	f7fd fd2e 	bl	8001d58 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004300:	f7fd fd2a 	bl	8001d58 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e030      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x734>
 800431e:	e028      	b.n	8004372 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	d023      	beq.n	800436e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RCC_OscConfig+0x780>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <HAL_RCC_OscConfig+0x780>)
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fd11 	bl	8001d58 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004338:	e00c      	b.n	8004354 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd fd0d 	bl	8001d58 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d905      	bls.n	8004354 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e013      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
 800434c:	40021000 	.word	0x40021000
 8004350:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_OscConfig+0x7b0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ec      	bne.n	800433a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x7b0>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	4905      	ldr	r1, [pc, #20]	; (800437c <HAL_RCC_OscConfig+0x7b0>)
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCC_OscConfig+0x7b4>)
 8004368:	4013      	ands	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
 800436c:	e001      	b.n	8004372 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	feeefffc 	.word	0xfeeefffc

08004384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0e7      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004398:	4b75      	ldr	r3, [pc, #468]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d910      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b72      	ldr	r3, [pc, #456]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 0207 	bic.w	r2, r3, #7
 80043ae:	4970      	ldr	r1, [pc, #448]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b6e      	ldr	r3, [pc, #440]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0cf      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d908      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b63      	ldr	r3, [pc, #396]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4960      	ldr	r1, [pc, #384]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04c      	beq.n	800449c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440a:	4b5a      	ldr	r3, [pc, #360]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d121      	bne.n	800445a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0a6      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d115      	bne.n	800445a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e09a      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800443a:	4b4e      	ldr	r3, [pc, #312]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e08e      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444a:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e086      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800445a:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f023 0203 	bic.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4943      	ldr	r1, [pc, #268]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446c:	f7fd fc74 	bl	8001d58 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	e00a      	b.n	800448a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004474:	f7fd fc70 	bl	8001d58 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e06e      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 020c 	and.w	r2, r3, #12
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	429a      	cmp	r2, r3
 800449a:	d1eb      	bne.n	8004474 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	4b31      	ldr	r3, [pc, #196]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d208      	bcs.n	80044ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b2e      	ldr	r3, [pc, #184]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	492b      	ldr	r1, [pc, #172]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d210      	bcs.n	80044fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 0207 	bic.w	r2, r3, #7
 80044e0:	4923      	ldr	r1, [pc, #140]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCC_ClockConfig+0x1ec>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e036      	b.n	8004568 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4918      	ldr	r1, [pc, #96]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004524:	4b13      	ldr	r3, [pc, #76]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4910      	ldr	r1, [pc, #64]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004538:	f000 f824 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	490b      	ldr	r1, [pc, #44]	; (8004578 <HAL_RCC_ClockConfig+0x1f4>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1f8>)
 8004556:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1fc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd fbab 	bl	8001cb8 <HAL_InitTick>
 8004562:	4603      	mov	r3, r0
 8004564:	72fb      	strb	r3, [r7, #11]

  return status;
 8004566:	7afb      	ldrb	r3, [r7, #11]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40022000 	.word	0x40022000
 8004574:	40021000 	.word	0x40021000
 8004578:	0800bd98 	.word	0x0800bd98
 800457c:	20000000 	.word	0x20000000
 8004580:	20000004 	.word	0x20000004

08004584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	4b3e      	ldr	r3, [pc, #248]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800459c:	4b3b      	ldr	r3, [pc, #236]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x34>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	d121      	bne.n	80045f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d11e      	bne.n	80045f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045b8:	4b34      	ldr	r3, [pc, #208]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045d4:	4b2d      	ldr	r3, [pc, #180]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045f4:	e00a      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d102      	bne.n	8004602 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_GetSysClockFreq+0x110>)
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	e004      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d101      	bne.n	800460c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004608:	4b23      	ldr	r3, [pc, #140]	; (8004698 <HAL_RCC_GetSysClockFreq+0x114>)
 800460a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d134      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d003      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0xa6>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0xac>
 8004628:	e005      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_RCC_GetSysClockFreq+0x110>)
 800462c:	617b      	str	r3, [r7, #20]
      break;
 800462e:	e005      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_GetSysClockFreq+0x114>)
 8004632:	617b      	str	r3, [r7, #20]
      break;
 8004634:	e002      	b.n	800463c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	617b      	str	r3, [r7, #20]
      break;
 800463a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	3301      	adds	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	fb03 f202 	mul.w	r2, r3, r2
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_RCC_GetSysClockFreq+0x108>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	0e5b      	lsrs	r3, r3, #25
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	3301      	adds	r3, #1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800467c:	69bb      	ldr	r3, [r7, #24]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3724      	adds	r7, #36	; 0x24
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40021000 	.word	0x40021000
 8004690:	0800bdb0 	.word	0x0800bdb0
 8004694:	00f42400 	.word	0x00f42400
 8004698:	007a1200 	.word	0x007a1200

0800469c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20000000 	.word	0x20000000

080046b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046b8:	f7ff fff0 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4904      	ldr	r1, [pc, #16]	; (80046dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	0800bda8 	.word	0x0800bda8

080046e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046e4:	f7ff ffda 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0adb      	lsrs	r3, r3, #11
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	0800bda8 	.word	0x0800bda8

0800470c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004718:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004724:	f7ff f9ee 	bl	8003b04 <HAL_PWREx_GetVoltageRange>
 8004728:	6178      	str	r0, [r7, #20]
 800472a:	e014      	b.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	6593      	str	r3, [r2, #88]	; 0x58
 8004738:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004744:	f7ff f9de 	bl	8003b04 <HAL_PWREx_GetVoltageRange>
 8004748:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475c:	d10b      	bne.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d919      	bls.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2ba0      	cmp	r3, #160	; 0xa0
 8004768:	d902      	bls.n	8004770 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800476a:	2302      	movs	r3, #2
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e013      	b.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004770:	2301      	movs	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	e010      	b.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d902      	bls.n	8004782 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800477c:	2303      	movs	r3, #3
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	e00a      	b.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b80      	cmp	r3, #128	; 0x80
 8004786:	d102      	bne.n	800478e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004788:	2302      	movs	r3, #2
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e004      	b.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b70      	cmp	r3, #112	; 0x70
 8004792:	d101      	bne.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004794:	2301      	movs	r3, #1
 8004796:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 0207 	bic.w	r2, r3, #7
 80047a0:	4909      	ldr	r1, [pc, #36]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047a8:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d001      	beq.n	80047ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40022000 	.word	0x40022000

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047d4:	2300      	movs	r3, #0
 80047d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047d8:	2300      	movs	r3, #0
 80047da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d041      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047f0:	d02a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047f6:	d824      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047fc:	d008      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004802:	d81e      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800480c:	d010      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800480e:	e018      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004810:	4b86      	ldr	r3, [pc, #536]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a85      	ldr	r2, [pc, #532]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800481c:	e015      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fabb 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800482e:	e00c      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3320      	adds	r3, #32
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fba6 	bl	8004f88 <RCCEx_PLLSAI2_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	74fb      	strb	r3, [r7, #19]
      break;
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004850:	4b76      	ldr	r3, [pc, #472]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485e:	4973      	ldr	r1, [pc, #460]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d041      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004880:	d02a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004886:	d824      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800488c:	d008      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800488e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004892:	d81e      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489c:	d010      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800489e:	e018      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048a0:	4b62      	ldr	r3, [pc, #392]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a61      	ldr	r2, [pc, #388]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ac:	e015      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fa73 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048be:	e00c      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3320      	adds	r3, #32
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb5e 	bl	8004f88 <RCCEx_PLLSAI2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d0:	e003      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	74fb      	strb	r3, [r7, #19]
      break;
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048e0:	4b52      	ldr	r3, [pc, #328]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ee:	494f      	ldr	r1, [pc, #316]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048f6:	e001      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a0 	beq.w	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800490e:	4b47      	ldr	r3, [pc, #284]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800491e:	2300      	movs	r3, #0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004924:	4b41      	ldr	r3, [pc, #260]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	4a40      	ldr	r2, [pc, #256]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6593      	str	r3, [r2, #88]	; 0x58
 8004930:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493c:	2301      	movs	r3, #1
 800493e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a3a      	ldr	r2, [pc, #232]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800494c:	f7fd fa04 	bl	8001d58 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004952:	e009      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004954:	f7fd fa00 	bl	8001d58 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	74fb      	strb	r3, [r7, #19]
        break;
 8004966:	e005      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004968:	4b31      	ldr	r3, [pc, #196]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ef      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d15c      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800497a:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004984:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01f      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	429a      	cmp	r2, r3
 8004996:	d019      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049a4:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fd f9bf 	bl	8001d58 <HAL_GetTick>
 80049da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049dc:	e00b      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049de:	f7fd f9bb 	bl	8001d58 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d902      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	74fb      	strb	r3, [r7, #19]
            break;
 80049f4:	e006      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ec      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a22:	e009      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	74bb      	strb	r3, [r7, #18]
 8004a28:	e006      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a38:	7c7b      	ldrb	r3, [r7, #17]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d105      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3e:	4b9e      	ldr	r3, [pc, #632]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	4a9d      	ldr	r2, [pc, #628]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a56:	4b98      	ldr	r3, [pc, #608]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f023 0203 	bic.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	4994      	ldr	r1, [pc, #592]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a78:	4b8f      	ldr	r3, [pc, #572]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 020c 	bic.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	498c      	ldr	r1, [pc, #560]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a9a:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	4983      	ldr	r1, [pc, #524]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004abc:	4b7e      	ldr	r3, [pc, #504]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	497b      	ldr	r1, [pc, #492]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ade:	4b76      	ldr	r3, [pc, #472]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aec:	4972      	ldr	r1, [pc, #456]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b00:	4b6d      	ldr	r3, [pc, #436]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	496a      	ldr	r1, [pc, #424]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b22:	4b65      	ldr	r3, [pc, #404]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	4961      	ldr	r1, [pc, #388]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b44:	4b5c      	ldr	r3, [pc, #368]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b52:	4959      	ldr	r1, [pc, #356]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b66:	4b54      	ldr	r3, [pc, #336]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b74:	4950      	ldr	r1, [pc, #320]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b88:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	4948      	ldr	r1, [pc, #288]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004baa:	4b43      	ldr	r3, [pc, #268]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	493f      	ldr	r1, [pc, #252]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d028      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	4937      	ldr	r1, [pc, #220]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bea:	d106      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf6:	60d3      	str	r3, [r2, #12]
 8004bf8:	e011      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	2101      	movs	r1, #1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f8c8 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d028      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c2a:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	491f      	ldr	r1, [pc, #124]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c48:	d106      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c54:	60d3      	str	r3, [r2, #12]
 8004c56:	e011      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2101      	movs	r1, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f899 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c72:	7cfb      	ldrb	r3, [r7, #19]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02b      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c96:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d109      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a02      	ldr	r2, [pc, #8]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
 8004cb4:	e014      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f867 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d02f      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cfa:	4928      	ldr	r1, [pc, #160]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	2102      	movs	r1, #2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f844 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d22:	7cfb      	ldrb	r3, [r7, #19]
 8004d24:	74bb      	strb	r3, [r7, #18]
 8004d26:	e011      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3320      	adds	r3, #32
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f925 	bl	8004f88 <RCCEx_PLLSAI2_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d66:	490d      	ldr	r1, [pc, #52]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8a:	4904      	ldr	r1, [pc, #16]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d92:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000

08004da0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dae:	4b75      	ldr	r3, [pc, #468]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dba:	4b72      	ldr	r3, [pc, #456]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d10d      	bne.n	8004de6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dd2:	4b6c      	ldr	r3, [pc, #432]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
       ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d047      	beq.n	8004e76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	e044      	b.n	8004e76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d018      	beq.n	8004e26 <RCCEx_PLLSAI1_Config+0x86>
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d825      	bhi.n	8004e44 <RCCEx_PLLSAI1_Config+0xa4>
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d002      	beq.n	8004e02 <RCCEx_PLLSAI1_Config+0x62>
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d009      	beq.n	8004e14 <RCCEx_PLLSAI1_Config+0x74>
 8004e00:	e020      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e02:	4b60      	ldr	r3, [pc, #384]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d11d      	bne.n	8004e4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e12:	e01a      	b.n	8004e4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e14:	4b5b      	ldr	r3, [pc, #364]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d116      	bne.n	8004e4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e24:	e013      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e26:	4b57      	ldr	r3, [pc, #348]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e32:	4b54      	ldr	r3, [pc, #336]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e42:	e006      	b.n	8004e52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      break;
 8004e48:	e004      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	4944      	ldr	r1, [pc, #272]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d17d      	bne.n	8004f78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e7c:	4b41      	ldr	r3, [pc, #260]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e88:	f7fc ff66 	bl	8001d58 <HAL_GetTick>
 8004e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e8e:	e009      	b.n	8004ea4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e90:	f7fc ff62 	bl	8001d58 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d902      	bls.n	8004ea4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea2:	e005      	b.n	8004eb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ea4:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ef      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d160      	bne.n	8004f78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d111      	bne.n	8004ee0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6892      	ldr	r2, [r2, #8]
 8004ecc:	0211      	lsls	r1, r2, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68d2      	ldr	r2, [r2, #12]
 8004ed2:	0912      	lsrs	r2, r2, #4
 8004ed4:	0452      	lsls	r2, r2, #17
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	492a      	ldr	r1, [pc, #168]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]
 8004ede:	e027      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d112      	bne.n	8004f0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee6:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004eee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6892      	ldr	r2, [r2, #8]
 8004ef6:	0211      	lsls	r1, r2, #8
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6912      	ldr	r2, [r2, #16]
 8004efc:	0852      	lsrs	r2, r2, #1
 8004efe:	3a01      	subs	r2, #1
 8004f00:	0552      	lsls	r2, r2, #21
 8004f02:	430a      	orrs	r2, r1
 8004f04:	491f      	ldr	r1, [pc, #124]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	610b      	str	r3, [r1, #16]
 8004f0a:	e011      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	0211      	lsls	r1, r2, #8
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6952      	ldr	r2, [r2, #20]
 8004f22:	0852      	lsrs	r2, r2, #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0652      	lsls	r2, r2, #25
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	4916      	ldr	r1, [pc, #88]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f30:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3c:	f7fc ff0c 	bl	8001d58 <HAL_GetTick>
 8004f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f42:	e009      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f44:	f7fc ff08 	bl	8001d58 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d902      	bls.n	8004f58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	73fb      	strb	r3, [r7, #15]
          break;
 8004f56:	e005      	b.n	8004f64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ef      	beq.n	8004f44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	4904      	ldr	r1, [pc, #16]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f96:	4b6a      	ldr	r3, [pc, #424]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d018      	beq.n	8004fd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fa2:	4b67      	ldr	r3, [pc, #412]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0203 	and.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10d      	bne.n	8004fce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fba:	4b61      	ldr	r3, [pc, #388]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d047      	beq.n	800505e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	e044      	b.n	800505e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d018      	beq.n	800500e <RCCEx_PLLSAI2_Config+0x86>
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d825      	bhi.n	800502c <RCCEx_PLLSAI2_Config+0xa4>
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d002      	beq.n	8004fea <RCCEx_PLLSAI2_Config+0x62>
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d009      	beq.n	8004ffc <RCCEx_PLLSAI2_Config+0x74>
 8004fe8:	e020      	b.n	800502c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fea:	4b55      	ldr	r3, [pc, #340]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11d      	bne.n	8005032 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffa:	e01a      	b.n	8005032 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	2b00      	cmp	r3, #0
 8005006:	d116      	bne.n	8005036 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500c:	e013      	b.n	8005036 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800500e:	4b4c      	ldr	r3, [pc, #304]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501a:	4b49      	ldr	r3, [pc, #292]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800502a:	e006      	b.n	800503a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e004      	b.n	800503c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800503a:	bf00      	nop
    }

    if(status == HAL_OK)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005042:	4b3f      	ldr	r3, [pc, #252]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	430b      	orrs	r3, r1
 8005058:	4939      	ldr	r1, [pc, #228]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d167      	bne.n	8005134 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a35      	ldr	r2, [pc, #212]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800506e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fc fe72 	bl	8001d58 <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005076:	e009      	b.n	800508c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005078:	f7fc fe6e 	bl	8001d58 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	73fb      	strb	r3, [r7, #15]
        break;
 800508a:	e005      	b.n	8005098 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800508c:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ef      	bne.n	8005078 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d14a      	bne.n	8005134 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d111      	bne.n	80050c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050a4:	4b26      	ldr	r3, [pc, #152]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	0211      	lsls	r1, r2, #8
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68d2      	ldr	r2, [r2, #12]
 80050ba:	0912      	lsrs	r2, r2, #4
 80050bc:	0452      	lsls	r2, r2, #17
 80050be:	430a      	orrs	r2, r1
 80050c0:	491f      	ldr	r1, [pc, #124]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	614b      	str	r3, [r1, #20]
 80050c6:	e011      	b.n	80050ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6892      	ldr	r2, [r2, #8]
 80050d8:	0211      	lsls	r1, r2, #8
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6912      	ldr	r2, [r2, #16]
 80050de:	0852      	lsrs	r2, r2, #1
 80050e0:	3a01      	subs	r2, #1
 80050e2:	0652      	lsls	r2, r2, #25
 80050e4:	430a      	orrs	r2, r1
 80050e6:	4916      	ldr	r1, [pc, #88]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a13      	ldr	r2, [pc, #76]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fc fe2e 	bl	8001d58 <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050fe:	e009      	b.n	8005114 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005100:	f7fc fe2a 	bl	8001d58 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d902      	bls.n	8005114 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
          break;
 8005112:	e005      	b.n	8005120 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ef      	beq.n	8005100 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4904      	ldr	r1, [pc, #16]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e049      	b.n	80051ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc fb3a 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fbe4 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e047      	b.n	800529c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <HAL_TIM_Base_Start+0xb4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01d      	beq.n	800525a <HAL_TIM_Base_Start+0x66>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005226:	d018      	beq.n	800525a <HAL_TIM_Base_Start+0x66>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <HAL_TIM_Base_Start+0xb8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_TIM_Base_Start+0x66>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_TIM_Base_Start+0xbc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_TIM_Base_Start+0x66>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIM_Base_Start+0xc0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_TIM_Base_Start+0x66>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_TIM_Base_Start+0xc4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIM_Base_Start+0x66>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <HAL_TIM_Base_Start+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d115      	bne.n	8005286 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <HAL_TIM_Base_Start+0xcc>)
 8005262:	4013      	ands	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b06      	cmp	r3, #6
 800526a:	d015      	beq.n	8005298 <HAL_TIM_Base_Start+0xa4>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d011      	beq.n	8005298 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	e008      	b.n	8005298 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0201 	orr.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e000      	b.n	800529a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	00010007 	.word	0x00010007

080052c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e049      	b.n	800536a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f841 	bl	8005372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fb24 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <HAL_TIM_PWM_Start+0x24>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e03c      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d109      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x3e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e02f      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d109      	bne.n	80053e0 <HAL_TIM_PWM_Start+0x58>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e022      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d109      	bne.n	80053fa <HAL_TIM_PWM_Start+0x72>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	e015      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x8c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e008      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e09c      	b.n	8005568 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0xb6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	e023      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0xc6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544c:	e01b      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start+0xd6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	e013      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Start+0xe6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800546c:	e00b      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b10      	cmp	r3, #16
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0xf6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	e003      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fe68 	bl	8006164 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a35      	ldr	r2, [pc, #212]	; (8005570 <HAL_TIM_PWM_Start+0x1e8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x13e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a34      	ldr	r2, [pc, #208]	; (8005574 <HAL_TIM_PWM_Start+0x1ec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x13e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a32      	ldr	r2, [pc, #200]	; (8005578 <HAL_TIM_PWM_Start+0x1f0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x13e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a31      	ldr	r2, [pc, #196]	; (800557c <HAL_TIM_PWM_Start+0x1f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x13e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <HAL_TIM_PWM_Start+0x1f8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_PWM_Start+0x142>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_TIM_PWM_Start+0x144>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a22      	ldr	r2, [pc, #136]	; (8005570 <HAL_TIM_PWM_Start+0x1e8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01d      	beq.n	8005526 <HAL_TIM_PWM_Start+0x19e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d018      	beq.n	8005526 <HAL_TIM_PWM_Start+0x19e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <HAL_TIM_PWM_Start+0x1fc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_TIM_PWM_Start+0x19e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a21      	ldr	r2, [pc, #132]	; (8005588 <HAL_TIM_PWM_Start+0x200>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_TIM_PWM_Start+0x19e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <HAL_TIM_PWM_Start+0x204>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_TIM_PWM_Start+0x19e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <HAL_TIM_PWM_Start+0x1ec>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_TIM_PWM_Start+0x19e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a15      	ldr	r2, [pc, #84]	; (8005578 <HAL_TIM_PWM_Start+0x1f0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d115      	bne.n	8005552 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	4b18      	ldr	r3, [pc, #96]	; (8005590 <HAL_TIM_PWM_Start+0x208>)
 800552e:	4013      	ands	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b06      	cmp	r3, #6
 8005536:	d015      	beq.n	8005564 <HAL_TIM_PWM_Start+0x1dc>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553e:	d011      	beq.n	8005564 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005550:	e008      	b.n	8005564 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e000      	b.n	8005566 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	00010007 	.word	0x00010007

08005594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e0ff      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b14      	cmp	r3, #20
 80055be:	f200 80f0 	bhi.w	80057a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	080057a3 	.word	0x080057a3
 80055d0:	080057a3 	.word	0x080057a3
 80055d4:	080057a3 	.word	0x080057a3
 80055d8:	0800565d 	.word	0x0800565d
 80055dc:	080057a3 	.word	0x080057a3
 80055e0:	080057a3 	.word	0x080057a3
 80055e4:	080057a3 	.word	0x080057a3
 80055e8:	0800569f 	.word	0x0800569f
 80055ec:	080057a3 	.word	0x080057a3
 80055f0:	080057a3 	.word	0x080057a3
 80055f4:	080057a3 	.word	0x080057a3
 80055f8:	080056df 	.word	0x080056df
 80055fc:	080057a3 	.word	0x080057a3
 8005600:	080057a3 	.word	0x080057a3
 8005604:	080057a3 	.word	0x080057a3
 8005608:	08005721 	.word	0x08005721
 800560c:	080057a3 	.word	0x080057a3
 8005610:	080057a3 	.word	0x080057a3
 8005614:	080057a3 	.word	0x080057a3
 8005618:	08005761 	.word	0x08005761
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fa2e 	bl	8005a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0208 	orr.w	r2, r2, #8
 8005636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0204 	bic.w	r2, r2, #4
 8005646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6999      	ldr	r1, [r3, #24]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	619a      	str	r2, [r3, #24]
      break;
 800565a:	e0a5      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa9e 	bl	8005ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	021a      	lsls	r2, r3, #8
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	619a      	str	r2, [r3, #24]
      break;
 800569c:	e084      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fb07 	bl	8005cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0208 	orr.w	r2, r2, #8
 80056b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0204 	bic.w	r2, r2, #4
 80056c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	61da      	str	r2, [r3, #28]
      break;
 80056dc:	e064      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb6f 	bl	8005dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	021a      	lsls	r2, r3, #8
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	61da      	str	r2, [r3, #28]
      break;
 800571e:	e043      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fbb8 	bl	8005e9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0208 	orr.w	r2, r2, #8
 800573a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0204 	bic.w	r2, r2, #4
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800575e:	e023      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fbfc 	bl	8005f64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057a0:	e002      	b.n	80057a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
      break;
 80057a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop

080057bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0b6      	b.n	8005946 <HAL_TIM_ConfigClockSource+0x18a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d03e      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0xd8>
 8005816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581a:	f200 8087 	bhi.w	800592c <HAL_TIM_ConfigClockSource+0x170>
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	f000 8086 	beq.w	8005932 <HAL_TIM_ConfigClockSource+0x176>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d87f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d01a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xaa>
 8005830:	2b70      	cmp	r3, #112	; 0x70
 8005832:	d87b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d050      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x11e>
 8005838:	2b60      	cmp	r3, #96	; 0x60
 800583a:	d877      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 800583c:	2b50      	cmp	r3, #80	; 0x50
 800583e:	d03c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0xfe>
 8005840:	2b50      	cmp	r3, #80	; 0x50
 8005842:	d873      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d058      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x13e>
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d86f      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d064      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15e>
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d86b      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d060      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15e>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d867      	bhi.n	800592c <HAL_TIM_ConfigClockSource+0x170>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05c      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15e>
 8005860:	2b10      	cmp	r3, #16
 8005862:	d05a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x15e>
 8005864:	e062      	b.n	800592c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005876:	f000 fc55 	bl	8006124 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	609a      	str	r2, [r3, #8]
      break;
 8005892:	e04f      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058a4:	f000 fc3e 	bl	8006124 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e03c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 fbb2 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2150      	movs	r1, #80	; 0x50
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fc0b 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80058d8:	e02c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 fbd1 	bl	800608e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2160      	movs	r1, #96	; 0x60
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fbfb 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80058f8:	e01c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	461a      	mov	r2, r3
 8005908:	f000 fb92 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2140      	movs	r1, #64	; 0x40
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fbeb 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 8005918:	e00c      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f000 fbe2 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 800592a:	e003      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e000      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a40      	ldr	r2, [pc, #256]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3d      	ldr	r2, [pc, #244]	; (8005a68 <TIM_Base_SetConfig+0x118>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3c      	ldr	r2, [pc, #240]	; (8005a6c <TIM_Base_SetConfig+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <TIM_Base_SetConfig+0x120>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3a      	ldr	r2, [pc, #232]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d01b      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <TIM_Base_SetConfig+0x118>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d017      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <TIM_Base_SetConfig+0x11c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <TIM_Base_SetConfig+0x120>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a29      	ldr	r2, [pc, #164]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a28      	ldr	r2, [pc, #160]	; (8005a78 <TIM_Base_SetConfig+0x128>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <TIM_Base_SetConfig+0x12c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <TIM_Base_SetConfig+0x130>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00f      	beq.n	8005a48 <TIM_Base_SetConfig+0xf8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <TIM_Base_SetConfig+0xf8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a11      	ldr	r2, [pc, #68]	; (8005a78 <TIM_Base_SetConfig+0x128>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_Base_SetConfig+0xf8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a10      	ldr	r2, [pc, #64]	; (8005a7c <TIM_Base_SetConfig+0x12c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0xf8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a0f      	ldr	r2, [pc, #60]	; (8005a80 <TIM_Base_SetConfig+0x130>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d103      	bne.n	8005a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	615a      	str	r2, [r3, #20]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f023 0201 	bic.w	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 0302 	bic.w	r3, r3, #2
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <TIM_OC1_SetConfig+0x10c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00f      	beq.n	8005b04 <TIM_OC1_SetConfig+0x80>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <TIM_OC1_SetConfig+0x110>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_OC1_SetConfig+0x80>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <TIM_OC1_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_OC1_SetConfig+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a29      	ldr	r2, [pc, #164]	; (8005b9c <TIM_OC1_SetConfig+0x118>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC1_SetConfig+0x80>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a28      	ldr	r2, [pc, #160]	; (8005ba0 <TIM_OC1_SetConfig+0x11c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <TIM_OC1_SetConfig+0x10c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_OC1_SetConfig+0xc2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <TIM_OC1_SetConfig+0x110>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_OC1_SetConfig+0xc2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <TIM_OC1_SetConfig+0x114>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC1_SetConfig+0xc2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <TIM_OC1_SetConfig+0x118>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC1_SetConfig+0xc2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <TIM_OC1_SetConfig+0x11c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d111      	bne.n	8005b6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f023 0210 	bic.w	r2, r3, #16
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0320 	bic.w	r3, r3, #32
 8005bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a28      	ldr	r2, [pc, #160]	; (8005ca4 <TIM_OC2_SetConfig+0x100>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC2_SetConfig+0x6c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <TIM_OC2_SetConfig+0x104>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10d      	bne.n	8005c2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <TIM_OC2_SetConfig+0x100>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <TIM_OC2_SetConfig+0xb0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <TIM_OC2_SetConfig+0x104>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_OC2_SetConfig+0xb0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <TIM_OC2_SetConfig+0x108>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_OC2_SetConfig+0xb0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <TIM_OC2_SetConfig+0x10c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC2_SetConfig+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a19      	ldr	r2, [pc, #100]	; (8005cb4 <TIM_OC2_SetConfig+0x110>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d113      	bne.n	8005c7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800

08005cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <TIM_OC3_SetConfig+0xfc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_OC3_SetConfig+0x6a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <TIM_OC3_SetConfig+0x100>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10d      	bne.n	8005d3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <TIM_OC3_SetConfig+0xfc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_OC3_SetConfig+0xae>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <TIM_OC3_SetConfig+0x100>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_OC3_SetConfig+0xae>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <TIM_OC3_SetConfig+0x104>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_OC3_SetConfig+0xae>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <TIM_OC3_SetConfig+0x108>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC3_SetConfig+0xae>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <TIM_OC3_SetConfig+0x10c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d113      	bne.n	8005d8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40012c00 	.word	0x40012c00
 8005db8:	40013400 	.word	0x40013400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800

08005dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <TIM_OC4_SetConfig+0xc0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00f      	beq.n	8005e4c <TIM_OC4_SetConfig+0x84>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <TIM_OC4_SetConfig+0xc4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <TIM_OC4_SetConfig+0x84>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <TIM_OC4_SetConfig+0xc8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_OC4_SetConfig+0x84>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <TIM_OC4_SetConfig+0xcc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC4_SetConfig+0x84>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <TIM_OC4_SetConfig+0xd0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d109      	bne.n	8005e60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	019b      	lsls	r3, r3, #6
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800

08005e9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ee0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <TIM_OC5_SetConfig+0xb4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00f      	beq.n	8005f16 <TIM_OC5_SetConfig+0x7a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <TIM_OC5_SetConfig+0xb8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00b      	beq.n	8005f16 <TIM_OC5_SetConfig+0x7a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <TIM_OC5_SetConfig+0xbc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <TIM_OC5_SetConfig+0x7a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <TIM_OC5_SetConfig+0xc0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <TIM_OC5_SetConfig+0x7a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <TIM_OC5_SetConfig+0xc4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d109      	bne.n	8005f2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	051b      	lsls	r3, r3, #20
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a18      	ldr	r2, [pc, #96]	; (800601c <TIM_OC6_SetConfig+0xb8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x7c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a17      	ldr	r2, [pc, #92]	; (8006020 <TIM_OC6_SetConfig+0xbc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x7c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a16      	ldr	r2, [pc, #88]	; (8006024 <TIM_OC6_SetConfig+0xc0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x7c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a15      	ldr	r2, [pc, #84]	; (8006028 <TIM_OC6_SetConfig+0xc4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC6_SetConfig+0x7c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a14      	ldr	r2, [pc, #80]	; (800602c <TIM_OC6_SetConfig+0xc8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d109      	bne.n	8005ff4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400
 800602c:	40014800 	.word	0x40014800

08006030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 030a 	bic.w	r3, r3, #10
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608e:	b480      	push	{r7}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 0210 	bic.w	r2, r3, #16
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	f043 0307 	orr.w	r3, r3, #7
 8006110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	431a      	orrs	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	43db      	mvns	r3, r3
 8006186:	401a      	ands	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	431a      	orrs	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e068      	b.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2d      	ldr	r2, [pc, #180]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d108      	bne.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1e      	ldr	r2, [pc, #120]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623a:	d018      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a13      	ldr	r2, [pc, #76]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a14      	ldr	r2, [pc, #80]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10c      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4313      	orrs	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40014000 	.word	0x40014000

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e040      	b.n	8006354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb fae8 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fe74 	bl	8006ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fbb9 	bl	8006a84 <UART_SetConfig>
 8006312:	4603      	mov	r3, r0
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e01b      	b.n	8006354 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fef3 	bl	8007138 <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006370:	2b20      	cmp	r3, #32
 8006372:	d178      	bne.n	8006466 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Transmit+0x24>
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e071      	b.n	8006468 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2221      	movs	r2, #33	; 0x21
 8006390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006392:	f7fb fce1 	bl	8001d58 <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063cc:	e030      	b.n	8006430 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 ff55 	bl	8007288 <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e03c      	b.n	8006468 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006400:	b292      	uxth	r2, r2
 8006402:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	3302      	adds	r3, #2
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e008      	b.n	800641e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b292      	uxth	r2, r2
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1c8      	bne.n	80063ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 ff1e 	bl	8007288 <UART_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e005      	b.n	8006468 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b0ba      	sub	sp, #232	; 0xe8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800649a:	f640 030f 	movw	r3, #2063	; 0x80f
 800649e:	4013      	ands	r3, r2
 80064a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d115      	bne.n	80064d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 82ae 	beq.w	8006a2a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
      }
      return;
 80064d6:	e2a8      	b.n	8006a2a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8117 	beq.w	8006710 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064f2:	4b85      	ldr	r3, [pc, #532]	; (8006708 <HAL_UART_IRQHandler+0x298>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 810a 	beq.w	8006710 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d011      	beq.n	800652c <HAL_UART_IRQHandler+0xbc>
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <HAL_UART_IRQHandler+0xec>
 8006538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2202      	movs	r2, #2
 800654a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d011      	beq.n	800658c <HAL_UART_IRQHandler+0x11c>
 8006568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2204      	movs	r2, #4
 800657a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006582:	f043 0202 	orr.w	r2, r3, #2
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d017      	beq.n	80065c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2208      	movs	r2, #8
 80065b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065be:	f043 0208 	orr.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d012      	beq.n	80065fa <HAL_UART_IRQHandler+0x18a>
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f0:	f043 0220 	orr.w	r2, r3, #32
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8214 	beq.w	8006a2e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d005      	beq.n	8006652 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800664e:	2b00      	cmp	r3, #0
 8006650:	d04f      	beq.n	80066f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fe7f 	bl	8007356 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d141      	bne.n	80066ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800667c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800669e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1d9      	bne.n	8006666 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d013      	beq.n	80066e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066be:	4a13      	ldr	r2, [pc, #76]	; (800670c <HAL_UART_IRQHandler+0x29c>)
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fc fee7 	bl	800349a <HAL_DMA_Abort_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d017      	beq.n	8006702 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e00f      	b.n	8006702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9b8 	bl	8006a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e00b      	b.n	8006702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9b4 	bl	8006a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e007      	b.n	8006702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f9b0 	bl	8006a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006700:	e195      	b.n	8006a2e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006702:	bf00      	nop
    return;
 8006704:	e193      	b.n	8006a2e <HAL_UART_IRQHandler+0x5be>
 8006706:	bf00      	nop
 8006708:	04000120 	.word	0x04000120
 800670c:	0800741f 	.word	0x0800741f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006714:	2b01      	cmp	r3, #1
 8006716:	f040 814e 	bne.w	80069b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8147 	beq.w	80069b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8140 	beq.w	80069b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2210      	movs	r2, #16
 800673c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	f040 80b8 	bne.w	80068be <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800675a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8167 	beq.w	8006a32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800676a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800676e:	429a      	cmp	r2, r3
 8006770:	f080 815f 	bcs.w	8006a32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800677a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 8086 	bne.w	800689c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1da      	bne.n	8006790 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e1      	bne.n	80067da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800683a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800683c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800686a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800687e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006880:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800688c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e4      	bne.n	800685c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006896:	4618      	mov	r0, r3
 8006898:	f7fc fdc1 	bl	800341e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8d8 	bl	8006a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068bc:	e0b9      	b.n	8006a32 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 80ab 	beq.w	8006a36 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80068e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 80a6 	beq.w	8006a36 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
 800690e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800691a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e4      	bne.n	80068ea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	623b      	str	r3, [r7, #32]
   return(result);
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3308      	adds	r3, #8
 8006940:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006944:	633a      	str	r2, [r7, #48]	; 0x30
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800694a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e3      	bne.n	8006920 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	60fb      	str	r3, [r7, #12]
   return(result);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0310 	bic.w	r3, r3, #16
 8006980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	69b9      	ldr	r1, [r7, #24]
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	617b      	str	r3, [r7, #20]
   return(result);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e4      	bne.n	800696c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f85c 	bl	8006a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b4:	e03f      	b.n	8006a36 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <HAL_UART_IRQHandler+0x570>
 80069c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fd60 	bl	800749e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069de:	e02d      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00e      	beq.n	8006a0a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01c      	beq.n	8006a3a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
    }
    return;
 8006a08:	e017      	b.n	8006a3a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d012      	beq.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
 8006a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fd11 	bl	800744a <UART_EndTransmit_IT>
    return;
 8006a28:	e008      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a2a:	bf00      	nop
 8006a2c:	e006      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a2e:	bf00      	nop
 8006a30:	e004      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a32:	bf00      	nop
 8006a34:	e002      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a3c:	37e8      	adds	r7, #232	; 0xe8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a88:	b08a      	sub	sp, #40	; 0x28
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4ba4      	ldr	r3, [pc, #656]	; (8006d44 <UART_SetConfig+0x2c0>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a99      	ldr	r2, [pc, #612]	; (8006d48 <UART_SetConfig+0x2c4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aec:	4313      	orrs	r3, r2
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b00:	430a      	orrs	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a90      	ldr	r2, [pc, #576]	; (8006d4c <UART_SetConfig+0x2c8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d126      	bne.n	8006b5c <UART_SetConfig+0xd8>
 8006b0e:	4b90      	ldr	r3, [pc, #576]	; (8006d50 <UART_SetConfig+0x2cc>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d81b      	bhi.n	8006b54 <UART_SetConfig+0xd0>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0xa0>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b45 	.word	0x08006b45
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b4d 	.word	0x08006b4d
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e116      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e112      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006b44:	2304      	movs	r3, #4
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e10e      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b52:	e10a      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006b54:	2310      	movs	r3, #16
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b5a:	e106      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7c      	ldr	r2, [pc, #496]	; (8006d54 <UART_SetConfig+0x2d0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d138      	bne.n	8006bd8 <UART_SetConfig+0x154>
 8006b66:	4b7a      	ldr	r3, [pc, #488]	; (8006d50 <UART_SetConfig+0x2cc>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6c:	f003 030c 	and.w	r3, r3, #12
 8006b70:	2b0c      	cmp	r3, #12
 8006b72:	d82d      	bhi.n	8006bd0 <UART_SetConfig+0x14c>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <UART_SetConfig+0xf8>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006bb1 	.word	0x08006bb1
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006bd1 	.word	0x08006bd1
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006bc1 	.word	0x08006bc1
 8006b90:	08006bd1 	.word	0x08006bd1
 8006b94:	08006bd1 	.word	0x08006bd1
 8006b98:	08006bd1 	.word	0x08006bd1
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	08006bd1 	.word	0x08006bd1
 8006ba4:	08006bd1 	.word	0x08006bd1
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bc9 	.word	0x08006bc9
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb6:	e0d8      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbe:	e0d4      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc6:	e0d0      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006bc8:	2308      	movs	r3, #8
 8006bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bce:	e0cc      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd6:	e0c8      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5e      	ldr	r2, [pc, #376]	; (8006d58 <UART_SetConfig+0x2d4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d125      	bne.n	8006c2e <UART_SetConfig+0x1aa>
 8006be2:	4b5b      	ldr	r3, [pc, #364]	; (8006d50 <UART_SetConfig+0x2cc>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bec:	2b30      	cmp	r3, #48	; 0x30
 8006bee:	d016      	beq.n	8006c1e <UART_SetConfig+0x19a>
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d818      	bhi.n	8006c26 <UART_SetConfig+0x1a2>
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d00a      	beq.n	8006c0e <UART_SetConfig+0x18a>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d814      	bhi.n	8006c26 <UART_SetConfig+0x1a2>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <UART_SetConfig+0x182>
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d008      	beq.n	8006c16 <UART_SetConfig+0x192>
 8006c04:	e00f      	b.n	8006c26 <UART_SetConfig+0x1a2>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0c:	e0ad      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c14:	e0a9      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c16:	2304      	movs	r3, #4
 8006c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1c:	e0a5      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c1e:	2308      	movs	r3, #8
 8006c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c24:	e0a1      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c26:	2310      	movs	r3, #16
 8006c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2c:	e09d      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a4a      	ldr	r2, [pc, #296]	; (8006d5c <UART_SetConfig+0x2d8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d125      	bne.n	8006c84 <UART_SetConfig+0x200>
 8006c38:	4b45      	ldr	r3, [pc, #276]	; (8006d50 <UART_SetConfig+0x2cc>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c42:	2bc0      	cmp	r3, #192	; 0xc0
 8006c44:	d016      	beq.n	8006c74 <UART_SetConfig+0x1f0>
 8006c46:	2bc0      	cmp	r3, #192	; 0xc0
 8006c48:	d818      	bhi.n	8006c7c <UART_SetConfig+0x1f8>
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d00a      	beq.n	8006c64 <UART_SetConfig+0x1e0>
 8006c4e:	2b80      	cmp	r3, #128	; 0x80
 8006c50:	d814      	bhi.n	8006c7c <UART_SetConfig+0x1f8>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <UART_SetConfig+0x1d8>
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d008      	beq.n	8006c6c <UART_SetConfig+0x1e8>
 8006c5a:	e00f      	b.n	8006c7c <UART_SetConfig+0x1f8>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e082      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c64:	2302      	movs	r3, #2
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e07e      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e07a      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c74:	2308      	movs	r3, #8
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e076      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	e072      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a35      	ldr	r2, [pc, #212]	; (8006d60 <UART_SetConfig+0x2dc>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d12a      	bne.n	8006ce4 <UART_SetConfig+0x260>
 8006c8e:	4b30      	ldr	r3, [pc, #192]	; (8006d50 <UART_SetConfig+0x2cc>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9c:	d01a      	beq.n	8006cd4 <UART_SetConfig+0x250>
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d81b      	bhi.n	8006cdc <UART_SetConfig+0x258>
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca8:	d00c      	beq.n	8006cc4 <UART_SetConfig+0x240>
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cae:	d815      	bhi.n	8006cdc <UART_SetConfig+0x258>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <UART_SetConfig+0x238>
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb8:	d008      	beq.n	8006ccc <UART_SetConfig+0x248>
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x258>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc2:	e052      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cca:	e04e      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd2:	e04a      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cda:	e046      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce2:	e042      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <UART_SetConfig+0x2c4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d13a      	bne.n	8006d64 <UART_SetConfig+0x2e0>
 8006cee:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <UART_SetConfig+0x2cc>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfc:	d01a      	beq.n	8006d34 <UART_SetConfig+0x2b0>
 8006cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d02:	d81b      	bhi.n	8006d3c <UART_SetConfig+0x2b8>
 8006d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d08:	d00c      	beq.n	8006d24 <UART_SetConfig+0x2a0>
 8006d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0e:	d815      	bhi.n	8006d3c <UART_SetConfig+0x2b8>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <UART_SetConfig+0x298>
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x2a8>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x2b8>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d22:	e022      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2a:	e01e      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d32:	e01a      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e016      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e012      	b.n	8006d6a <UART_SetConfig+0x2e6>
 8006d44:	efff69f3 	.word	0xefff69f3
 8006d48:	40008000 	.word	0x40008000
 8006d4c:	40013800 	.word	0x40013800
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40004400 	.word	0x40004400
 8006d58:	40004800 	.word	0x40004800
 8006d5c:	40004c00 	.word	0x40004c00
 8006d60:	40005000 	.word	0x40005000
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a9f      	ldr	r2, [pc, #636]	; (8006fec <UART_SetConfig+0x568>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d17a      	bne.n	8006e6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d824      	bhi.n	8006dc6 <UART_SetConfig+0x342>
 8006d7c:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x300>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006dc7 	.word	0x08006dc7
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006dc7 	.word	0x08006dc7
 8006d94:	08006db7 	.word	0x08006db7
 8006d98:	08006dc7 	.word	0x08006dc7
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006dc7 	.word	0x08006dc7
 8006da4:	08006dbf 	.word	0x08006dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fd fc84 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8006dac:	61f8      	str	r0, [r7, #28]
        break;
 8006dae:	e010      	b.n	8006dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db0:	4b8f      	ldr	r3, [pc, #572]	; (8006ff0 <UART_SetConfig+0x56c>)
 8006db2:	61fb      	str	r3, [r7, #28]
        break;
 8006db4:	e00d      	b.n	8006dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db6:	f7fd fbe5 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8006dba:	61f8      	str	r0, [r7, #28]
        break;
 8006dbc:	e009      	b.n	8006dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc2:	61fb      	str	r3, [r7, #28]
        break;
 8006dc4:	e005      	b.n	8006dd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80fb 	beq.w	8006fd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	4413      	add	r3, r2
 8006de4:	69fa      	ldr	r2, [r7, #28]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d305      	bcc.n	8006df6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d903      	bls.n	8006dfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dfc:	e0e8      	b.n	8006fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	2200      	movs	r2, #0
 8006e02:	461c      	mov	r4, r3
 8006e04:	4615      	mov	r5, r2
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	022b      	lsls	r3, r5, #8
 8006e10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e14:	0222      	lsls	r2, r4, #8
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	6849      	ldr	r1, [r1, #4]
 8006e1a:	0849      	lsrs	r1, r1, #1
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	4688      	mov	r8, r1
 8006e20:	4681      	mov	r9, r0
 8006e22:	eb12 0a08 	adds.w	sl, r2, r8
 8006e26:	eb43 0b09 	adc.w	fp, r3, r9
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e38:	4650      	mov	r0, sl
 8006e3a:	4659      	mov	r1, fp
 8006e3c:	f7f9 ff24 	bl	8000c88 <__aeabi_uldivmod>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4613      	mov	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d308      	bcc.n	8006e62 <UART_SetConfig+0x3de>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d204      	bcs.n	8006e62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	e0b6      	b.n	8006fd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e68:	e0b2      	b.n	8006fd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	d15e      	bne.n	8006f32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d828      	bhi.n	8006ece <UART_SetConfig+0x44a>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x400>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	08006ecf 	.word	0x08006ecf
 8006e94:	08006ebf 	.word	0x08006ebf
 8006e98:	08006ecf 	.word	0x08006ecf
 8006e9c:	08006ecf 	.word	0x08006ecf
 8006ea0:	08006ecf 	.word	0x08006ecf
 8006ea4:	08006ec7 	.word	0x08006ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea8:	f7fd fc04 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8006eac:	61f8      	str	r0, [r7, #28]
        break;
 8006eae:	e014      	b.n	8006eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eb0:	f7fd fc16 	bl	80046e0 <HAL_RCC_GetPCLK2Freq>
 8006eb4:	61f8      	str	r0, [r7, #28]
        break;
 8006eb6:	e010      	b.n	8006eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb8:	4b4d      	ldr	r3, [pc, #308]	; (8006ff0 <UART_SetConfig+0x56c>)
 8006eba:	61fb      	str	r3, [r7, #28]
        break;
 8006ebc:	e00d      	b.n	8006eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ebe:	f7fd fb61 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8006ec2:	61f8      	str	r0, [r7, #28]
        break;
 8006ec4:	e009      	b.n	8006eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eca:	61fb      	str	r3, [r7, #28]
        break;
 8006ecc:	e005      	b.n	8006eda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d077      	beq.n	8006fd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	005a      	lsls	r2, r3, #1
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	441a      	add	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b0f      	cmp	r3, #15
 8006efa:	d916      	bls.n	8006f2a <UART_SetConfig+0x4a6>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f02:	d212      	bcs.n	8006f2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f023 030f 	bic.w	r3, r3, #15
 8006f0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	8afb      	ldrh	r3, [r7, #22]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	8afa      	ldrh	r2, [r7, #22]
 8006f26:	60da      	str	r2, [r3, #12]
 8006f28:	e052      	b.n	8006fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f30:	e04e      	b.n	8006fd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d827      	bhi.n	8006f8a <UART_SetConfig+0x506>
 8006f3a:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <UART_SetConfig+0x4bc>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	08006f8b 	.word	0x08006f8b
 8006f50:	08006f7b 	.word	0x08006f7b
 8006f54:	08006f8b 	.word	0x08006f8b
 8006f58:	08006f8b 	.word	0x08006f8b
 8006f5c:	08006f8b 	.word	0x08006f8b
 8006f60:	08006f83 	.word	0x08006f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f64:	f7fd fba6 	bl	80046b4 <HAL_RCC_GetPCLK1Freq>
 8006f68:	61f8      	str	r0, [r7, #28]
        break;
 8006f6a:	e014      	b.n	8006f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6c:	f7fd fbb8 	bl	80046e0 <HAL_RCC_GetPCLK2Freq>
 8006f70:	61f8      	str	r0, [r7, #28]
        break;
 8006f72:	e010      	b.n	8006f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f74:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <UART_SetConfig+0x56c>)
 8006f76:	61fb      	str	r3, [r7, #28]
        break;
 8006f78:	e00d      	b.n	8006f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fd fb03 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8006f7e:	61f8      	str	r0, [r7, #28]
        break;
 8006f80:	e009      	b.n	8006f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f86:	61fb      	str	r3, [r7, #28]
        break;
 8006f88:	e005      	b.n	8006f96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f94:	bf00      	nop
    }

    if (pclk != 0U)
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d019      	beq.n	8006fd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	085a      	lsrs	r2, r3, #1
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d909      	bls.n	8006fca <UART_SetConfig+0x546>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbc:	d205      	bcs.n	8006fca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
 8006fc8:	e002      	b.n	8006fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3728      	adds	r7, #40	; 0x28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	40008000 	.word	0x40008000
 8006ff0:	00f42400 	.word	0x00f42400

08006ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01a      	beq.n	800710a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f2:	d10a      	bne.n	800710a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b098      	sub	sp, #96	; 0x60
 800713c:	af02      	add	r7, sp, #8
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007148:	f7fa fe06 	bl	8001d58 <HAL_GetTick>
 800714c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b08      	cmp	r3, #8
 800715a:	d12e      	bne.n	80071ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800715c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	2200      	movs	r2, #0
 8007166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f88c 	bl	8007288 <UART_WaitOnFlagUntilTimeout>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d021      	beq.n	80071ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718a:	653b      	str	r3, [r7, #80]	; 0x50
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007194:	647b      	str	r3, [r7, #68]	; 0x44
 8007196:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800719a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e062      	b.n	8007280 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d149      	bne.n	800725c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f856 	bl	8007288 <UART_WaitOnFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03c      	beq.n	800725c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	623b      	str	r3, [r7, #32]
   return(result);
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007200:	633b      	str	r3, [r7, #48]	; 0x30
 8007202:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	60fb      	str	r3, [r7, #12]
   return(result);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	64bb      	str	r3, [r7, #72]	; 0x48
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007234:	61fa      	str	r2, [r7, #28]
 8007236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	69b9      	ldr	r1, [r7, #24]
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	617b      	str	r3, [r7, #20]
   return(result);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e5      	bne.n	8007214 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e011      	b.n	8007280 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3758      	adds	r7, #88	; 0x58
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	603b      	str	r3, [r7, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007298:	e049      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d045      	beq.n	800732e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a2:	f7fa fd59 	bl	8001d58 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d302      	bcc.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e048      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d031      	beq.n	800732e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d110      	bne.n	80072fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2208      	movs	r2, #8
 80072de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f838 	bl	8007356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2208      	movs	r2, #8
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e029      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d111      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f81e 	bl	8007356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e00f      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	429a      	cmp	r2, r3
 800733c:	bf0c      	ite	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	2300      	movne	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d0a6      	beq.n	800729a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007356:	b480      	push	{r7}
 8007358:	b095      	sub	sp, #84	; 0x54
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737c:	643b      	str	r3, [r7, #64]	; 0x40
 800737e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3308      	adds	r3, #8
 8007396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e5      	bne.n	8007390 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d118      	bne.n	80073fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f023 0310 	bic.w	r3, r3, #16
 80073e0:	647b      	str	r3, [r7, #68]	; 0x44
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	613b      	str	r3, [r7, #16]
   return(result);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e6      	bne.n	80073cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007412:	bf00      	nop
 8007414:	3754      	adds	r7, #84	; 0x54
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fb0b 	bl	8006a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6979      	ldr	r1, [r7, #20]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	613b      	str	r3, [r7, #16]
   return(result);
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff fad7 	bl	8006a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007496:	bf00      	nop
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <__cvt>:
 80074b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b6:	ec55 4b10 	vmov	r4, r5, d0
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	460e      	mov	r6, r1
 80074be:	4619      	mov	r1, r3
 80074c0:	462b      	mov	r3, r5
 80074c2:	bfbb      	ittet	lt
 80074c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074c8:	461d      	movlt	r5, r3
 80074ca:	2300      	movge	r3, #0
 80074cc:	232d      	movlt	r3, #45	; 0x2d
 80074ce:	700b      	strb	r3, [r1, #0]
 80074d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074d6:	4691      	mov	r9, r2
 80074d8:	f023 0820 	bic.w	r8, r3, #32
 80074dc:	bfbc      	itt	lt
 80074de:	4622      	movlt	r2, r4
 80074e0:	4614      	movlt	r4, r2
 80074e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074e6:	d005      	beq.n	80074f4 <__cvt+0x42>
 80074e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074ec:	d100      	bne.n	80074f0 <__cvt+0x3e>
 80074ee:	3601      	adds	r6, #1
 80074f0:	2102      	movs	r1, #2
 80074f2:	e000      	b.n	80074f6 <__cvt+0x44>
 80074f4:	2103      	movs	r1, #3
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	ab02      	add	r3, sp, #8
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	ec45 4b10 	vmov	d0, r4, r5
 8007502:	4653      	mov	r3, sl
 8007504:	4632      	mov	r2, r6
 8007506:	f001 f87f 	bl	8008608 <_dtoa_r>
 800750a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800750e:	4607      	mov	r7, r0
 8007510:	d102      	bne.n	8007518 <__cvt+0x66>
 8007512:	f019 0f01 	tst.w	r9, #1
 8007516:	d022      	beq.n	800755e <__cvt+0xac>
 8007518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800751c:	eb07 0906 	add.w	r9, r7, r6
 8007520:	d110      	bne.n	8007544 <__cvt+0x92>
 8007522:	783b      	ldrb	r3, [r7, #0]
 8007524:	2b30      	cmp	r3, #48	; 0x30
 8007526:	d10a      	bne.n	800753e <__cvt+0x8c>
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f7f9 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007534:	b918      	cbnz	r0, 800753e <__cvt+0x8c>
 8007536:	f1c6 0601 	rsb	r6, r6, #1
 800753a:	f8ca 6000 	str.w	r6, [sl]
 800753e:	f8da 3000 	ldr.w	r3, [sl]
 8007542:	4499      	add	r9, r3
 8007544:	2200      	movs	r2, #0
 8007546:	2300      	movs	r3, #0
 8007548:	4620      	mov	r0, r4
 800754a:	4629      	mov	r1, r5
 800754c:	f7f9 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007550:	b108      	cbz	r0, 8007556 <__cvt+0xa4>
 8007552:	f8cd 900c 	str.w	r9, [sp, #12]
 8007556:	2230      	movs	r2, #48	; 0x30
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	454b      	cmp	r3, r9
 800755c:	d307      	bcc.n	800756e <__cvt+0xbc>
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007562:	1bdb      	subs	r3, r3, r7
 8007564:	4638      	mov	r0, r7
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	b004      	add	sp, #16
 800756a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	9103      	str	r1, [sp, #12]
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	e7f0      	b.n	8007558 <__cvt+0xa6>

08007576 <__exponent>:
 8007576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007578:	4603      	mov	r3, r0
 800757a:	2900      	cmp	r1, #0
 800757c:	bfb8      	it	lt
 800757e:	4249      	neglt	r1, r1
 8007580:	f803 2b02 	strb.w	r2, [r3], #2
 8007584:	bfb4      	ite	lt
 8007586:	222d      	movlt	r2, #45	; 0x2d
 8007588:	222b      	movge	r2, #43	; 0x2b
 800758a:	2909      	cmp	r1, #9
 800758c:	7042      	strb	r2, [r0, #1]
 800758e:	dd2a      	ble.n	80075e6 <__exponent+0x70>
 8007590:	f10d 0207 	add.w	r2, sp, #7
 8007594:	4617      	mov	r7, r2
 8007596:	260a      	movs	r6, #10
 8007598:	4694      	mov	ip, r2
 800759a:	fb91 f5f6 	sdiv	r5, r1, r6
 800759e:	fb06 1415 	mls	r4, r6, r5, r1
 80075a2:	3430      	adds	r4, #48	; 0x30
 80075a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075a8:	460c      	mov	r4, r1
 80075aa:	2c63      	cmp	r4, #99	; 0x63
 80075ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80075b0:	4629      	mov	r1, r5
 80075b2:	dcf1      	bgt.n	8007598 <__exponent+0x22>
 80075b4:	3130      	adds	r1, #48	; 0x30
 80075b6:	f1ac 0402 	sub.w	r4, ip, #2
 80075ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075be:	1c41      	adds	r1, r0, #1
 80075c0:	4622      	mov	r2, r4
 80075c2:	42ba      	cmp	r2, r7
 80075c4:	d30a      	bcc.n	80075dc <__exponent+0x66>
 80075c6:	f10d 0209 	add.w	r2, sp, #9
 80075ca:	eba2 020c 	sub.w	r2, r2, ip
 80075ce:	42bc      	cmp	r4, r7
 80075d0:	bf88      	it	hi
 80075d2:	2200      	movhi	r2, #0
 80075d4:	4413      	add	r3, r2
 80075d6:	1a18      	subs	r0, r3, r0
 80075d8:	b003      	add	sp, #12
 80075da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075e0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075e4:	e7ed      	b.n	80075c2 <__exponent+0x4c>
 80075e6:	2330      	movs	r3, #48	; 0x30
 80075e8:	3130      	adds	r1, #48	; 0x30
 80075ea:	7083      	strb	r3, [r0, #2]
 80075ec:	70c1      	strb	r1, [r0, #3]
 80075ee:	1d03      	adds	r3, r0, #4
 80075f0:	e7f1      	b.n	80075d6 <__exponent+0x60>
	...

080075f4 <_printf_float>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	ed2d 8b02 	vpush	{d8}
 80075fc:	b08d      	sub	sp, #52	; 0x34
 80075fe:	460c      	mov	r4, r1
 8007600:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007604:	4616      	mov	r6, r2
 8007606:	461f      	mov	r7, r3
 8007608:	4605      	mov	r5, r0
 800760a:	f000 fef7 	bl	80083fc <_localeconv_r>
 800760e:	f8d0 a000 	ldr.w	sl, [r0]
 8007612:	4650      	mov	r0, sl
 8007614:	f7f8 fe2c 	bl	8000270 <strlen>
 8007618:	2300      	movs	r3, #0
 800761a:	930a      	str	r3, [sp, #40]	; 0x28
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	f8d8 3000 	ldr.w	r3, [r8]
 8007624:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007628:	3307      	adds	r3, #7
 800762a:	f023 0307 	bic.w	r3, r3, #7
 800762e:	f103 0208 	add.w	r2, r3, #8
 8007632:	f8c8 2000 	str.w	r2, [r8]
 8007636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800763a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	f8cd 8018 	str.w	r8, [sp, #24]
 8007644:	ee08 0a10 	vmov	s16, r0
 8007648:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800764c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007650:	4b9e      	ldr	r3, [pc, #632]	; (80078cc <_printf_float+0x2d8>)
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	f7f9 fa69 	bl	8000b2c <__aeabi_dcmpun>
 800765a:	bb88      	cbnz	r0, 80076c0 <_printf_float+0xcc>
 800765c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007660:	4b9a      	ldr	r3, [pc, #616]	; (80078cc <_printf_float+0x2d8>)
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
 8007666:	f7f9 fa43 	bl	8000af0 <__aeabi_dcmple>
 800766a:	bb48      	cbnz	r0, 80076c0 <_printf_float+0xcc>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	f7f9 fa32 	bl	8000adc <__aeabi_dcmplt>
 8007678:	b110      	cbz	r0, 8007680 <_printf_float+0x8c>
 800767a:	232d      	movs	r3, #45	; 0x2d
 800767c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007680:	4a93      	ldr	r2, [pc, #588]	; (80078d0 <_printf_float+0x2dc>)
 8007682:	4b94      	ldr	r3, [pc, #592]	; (80078d4 <_printf_float+0x2e0>)
 8007684:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007688:	bf94      	ite	ls
 800768a:	4690      	movls	r8, r2
 800768c:	4698      	movhi	r8, r3
 800768e:	2303      	movs	r3, #3
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	9b05      	ldr	r3, [sp, #20]
 8007694:	f023 0304 	bic.w	r3, r3, #4
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	f04f 0900 	mov.w	r9, #0
 800769e:	9700      	str	r7, [sp, #0]
 80076a0:	4633      	mov	r3, r6
 80076a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80076a4:	4621      	mov	r1, r4
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f9da 	bl	8007a60 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	f040 8090 	bne.w	80077d2 <_printf_float+0x1de>
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	b00d      	add	sp, #52	; 0x34
 80076b8:	ecbd 8b02 	vpop	{d8}
 80076bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c0:	4642      	mov	r2, r8
 80076c2:	464b      	mov	r3, r9
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f9 fa30 	bl	8000b2c <__aeabi_dcmpun>
 80076cc:	b140      	cbz	r0, 80076e0 <_printf_float+0xec>
 80076ce:	464b      	mov	r3, r9
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bfbc      	itt	lt
 80076d4:	232d      	movlt	r3, #45	; 0x2d
 80076d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076da:	4a7f      	ldr	r2, [pc, #508]	; (80078d8 <_printf_float+0x2e4>)
 80076dc:	4b7f      	ldr	r3, [pc, #508]	; (80078dc <_printf_float+0x2e8>)
 80076de:	e7d1      	b.n	8007684 <_printf_float+0x90>
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076e6:	9206      	str	r2, [sp, #24]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	d13f      	bne.n	800776c <_printf_float+0x178>
 80076ec:	2306      	movs	r3, #6
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	9b05      	ldr	r3, [sp, #20]
 80076f2:	6861      	ldr	r1, [r4, #4]
 80076f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076f8:	2300      	movs	r3, #0
 80076fa:	9303      	str	r3, [sp, #12]
 80076fc:	ab0a      	add	r3, sp, #40	; 0x28
 80076fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007702:	ab09      	add	r3, sp, #36	; 0x24
 8007704:	ec49 8b10 	vmov	d0, r8, r9
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	6022      	str	r2, [r4, #0]
 800770c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007710:	4628      	mov	r0, r5
 8007712:	f7ff fece 	bl	80074b2 <__cvt>
 8007716:	9b06      	ldr	r3, [sp, #24]
 8007718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800771a:	2b47      	cmp	r3, #71	; 0x47
 800771c:	4680      	mov	r8, r0
 800771e:	d108      	bne.n	8007732 <_printf_float+0x13e>
 8007720:	1cc8      	adds	r0, r1, #3
 8007722:	db02      	blt.n	800772a <_printf_float+0x136>
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	4299      	cmp	r1, r3
 8007728:	dd41      	ble.n	80077ae <_printf_float+0x1ba>
 800772a:	f1ab 0302 	sub.w	r3, fp, #2
 800772e:	fa5f fb83 	uxtb.w	fp, r3
 8007732:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007736:	d820      	bhi.n	800777a <_printf_float+0x186>
 8007738:	3901      	subs	r1, #1
 800773a:	465a      	mov	r2, fp
 800773c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007740:	9109      	str	r1, [sp, #36]	; 0x24
 8007742:	f7ff ff18 	bl	8007576 <__exponent>
 8007746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007748:	1813      	adds	r3, r2, r0
 800774a:	2a01      	cmp	r2, #1
 800774c:	4681      	mov	r9, r0
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	dc02      	bgt.n	8007758 <_printf_float+0x164>
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	07d2      	lsls	r2, r2, #31
 8007756:	d501      	bpl.n	800775c <_printf_float+0x168>
 8007758:	3301      	adds	r3, #1
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007760:	2b00      	cmp	r3, #0
 8007762:	d09c      	beq.n	800769e <_printf_float+0xaa>
 8007764:	232d      	movs	r3, #45	; 0x2d
 8007766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800776a:	e798      	b.n	800769e <_printf_float+0xaa>
 800776c:	9a06      	ldr	r2, [sp, #24]
 800776e:	2a47      	cmp	r2, #71	; 0x47
 8007770:	d1be      	bne.n	80076f0 <_printf_float+0xfc>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1bc      	bne.n	80076f0 <_printf_float+0xfc>
 8007776:	2301      	movs	r3, #1
 8007778:	e7b9      	b.n	80076ee <_printf_float+0xfa>
 800777a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800777e:	d118      	bne.n	80077b2 <_printf_float+0x1be>
 8007780:	2900      	cmp	r1, #0
 8007782:	6863      	ldr	r3, [r4, #4]
 8007784:	dd0b      	ble.n	800779e <_printf_float+0x1aa>
 8007786:	6121      	str	r1, [r4, #16]
 8007788:	b913      	cbnz	r3, 8007790 <_printf_float+0x19c>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	07d0      	lsls	r0, r2, #31
 800778e:	d502      	bpl.n	8007796 <_printf_float+0x1a2>
 8007790:	3301      	adds	r3, #1
 8007792:	440b      	add	r3, r1
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	65a1      	str	r1, [r4, #88]	; 0x58
 8007798:	f04f 0900 	mov.w	r9, #0
 800779c:	e7de      	b.n	800775c <_printf_float+0x168>
 800779e:	b913      	cbnz	r3, 80077a6 <_printf_float+0x1b2>
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	07d2      	lsls	r2, r2, #31
 80077a4:	d501      	bpl.n	80077aa <_printf_float+0x1b6>
 80077a6:	3302      	adds	r3, #2
 80077a8:	e7f4      	b.n	8007794 <_printf_float+0x1a0>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e7f2      	b.n	8007794 <_printf_float+0x1a0>
 80077ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b4:	4299      	cmp	r1, r3
 80077b6:	db05      	blt.n	80077c4 <_printf_float+0x1d0>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	6121      	str	r1, [r4, #16]
 80077bc:	07d8      	lsls	r0, r3, #31
 80077be:	d5ea      	bpl.n	8007796 <_printf_float+0x1a2>
 80077c0:	1c4b      	adds	r3, r1, #1
 80077c2:	e7e7      	b.n	8007794 <_printf_float+0x1a0>
 80077c4:	2900      	cmp	r1, #0
 80077c6:	bfd4      	ite	le
 80077c8:	f1c1 0202 	rsble	r2, r1, #2
 80077cc:	2201      	movgt	r2, #1
 80077ce:	4413      	add	r3, r2
 80077d0:	e7e0      	b.n	8007794 <_printf_float+0x1a0>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	055a      	lsls	r2, r3, #21
 80077d6:	d407      	bmi.n	80077e8 <_printf_float+0x1f4>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	4642      	mov	r2, r8
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	d12c      	bne.n	8007840 <_printf_float+0x24c>
 80077e6:	e764      	b.n	80076b2 <_printf_float+0xbe>
 80077e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077ec:	f240 80e0 	bls.w	80079b0 <_printf_float+0x3bc>
 80077f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	f7f9 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d034      	beq.n	800786a <_printf_float+0x276>
 8007800:	4a37      	ldr	r2, [pc, #220]	; (80078e0 <_printf_float+0x2ec>)
 8007802:	2301      	movs	r3, #1
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af51 	beq.w	80076b2 <_printf_float+0xbe>
 8007810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007814:	429a      	cmp	r2, r3
 8007816:	db02      	blt.n	800781e <_printf_float+0x22a>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	07d8      	lsls	r0, r3, #31
 800781c:	d510      	bpl.n	8007840 <_printf_float+0x24c>
 800781e:	ee18 3a10 	vmov	r3, s16
 8007822:	4652      	mov	r2, sl
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f af41 	beq.w	80076b2 <_printf_float+0xbe>
 8007830:	f04f 0800 	mov.w	r8, #0
 8007834:	f104 091a 	add.w	r9, r4, #26
 8007838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800783a:	3b01      	subs	r3, #1
 800783c:	4543      	cmp	r3, r8
 800783e:	dc09      	bgt.n	8007854 <_printf_float+0x260>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	079b      	lsls	r3, r3, #30
 8007844:	f100 8107 	bmi.w	8007a56 <_printf_float+0x462>
 8007848:	68e0      	ldr	r0, [r4, #12]
 800784a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784c:	4298      	cmp	r0, r3
 800784e:	bfb8      	it	lt
 8007850:	4618      	movlt	r0, r3
 8007852:	e730      	b.n	80076b6 <_printf_float+0xc2>
 8007854:	2301      	movs	r3, #1
 8007856:	464a      	mov	r2, r9
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	f43f af27 	beq.w	80076b2 <_printf_float+0xbe>
 8007864:	f108 0801 	add.w	r8, r8, #1
 8007868:	e7e6      	b.n	8007838 <_printf_float+0x244>
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	dc39      	bgt.n	80078e4 <_printf_float+0x2f0>
 8007870:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <_printf_float+0x2ec>)
 8007872:	2301      	movs	r3, #1
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af19 	beq.w	80076b2 <_printf_float+0xbe>
 8007880:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007884:	4313      	orrs	r3, r2
 8007886:	d102      	bne.n	800788e <_printf_float+0x29a>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	07d9      	lsls	r1, r3, #31
 800788c:	d5d8      	bpl.n	8007840 <_printf_float+0x24c>
 800788e:	ee18 3a10 	vmov	r3, s16
 8007892:	4652      	mov	r2, sl
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	47b8      	blx	r7
 800789a:	3001      	adds	r0, #1
 800789c:	f43f af09 	beq.w	80076b2 <_printf_float+0xbe>
 80078a0:	f04f 0900 	mov.w	r9, #0
 80078a4:	f104 0a1a 	add.w	sl, r4, #26
 80078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078aa:	425b      	negs	r3, r3
 80078ac:	454b      	cmp	r3, r9
 80078ae:	dc01      	bgt.n	80078b4 <_printf_float+0x2c0>
 80078b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b2:	e792      	b.n	80077da <_printf_float+0x1e6>
 80078b4:	2301      	movs	r3, #1
 80078b6:	4652      	mov	r2, sl
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f aef7 	beq.w	80076b2 <_printf_float+0xbe>
 80078c4:	f109 0901 	add.w	r9, r9, #1
 80078c8:	e7ee      	b.n	80078a8 <_printf_float+0x2b4>
 80078ca:	bf00      	nop
 80078cc:	7fefffff 	.word	0x7fefffff
 80078d0:	0800bde0 	.word	0x0800bde0
 80078d4:	0800bde4 	.word	0x0800bde4
 80078d8:	0800bde8 	.word	0x0800bde8
 80078dc:	0800bdec 	.word	0x0800bdec
 80078e0:	0800bdf0 	.word	0x0800bdf0
 80078e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e8:	429a      	cmp	r2, r3
 80078ea:	bfa8      	it	ge
 80078ec:	461a      	movge	r2, r3
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	4691      	mov	r9, r2
 80078f2:	dc37      	bgt.n	8007964 <_printf_float+0x370>
 80078f4:	f04f 0b00 	mov.w	fp, #0
 80078f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078fc:	f104 021a 	add.w	r2, r4, #26
 8007900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007902:	9305      	str	r3, [sp, #20]
 8007904:	eba3 0309 	sub.w	r3, r3, r9
 8007908:	455b      	cmp	r3, fp
 800790a:	dc33      	bgt.n	8007974 <_printf_float+0x380>
 800790c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007910:	429a      	cmp	r2, r3
 8007912:	db3b      	blt.n	800798c <_printf_float+0x398>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	07da      	lsls	r2, r3, #31
 8007918:	d438      	bmi.n	800798c <_printf_float+0x398>
 800791a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800791e:	eba2 0903 	sub.w	r9, r2, r3
 8007922:	9b05      	ldr	r3, [sp, #20]
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	4591      	cmp	r9, r2
 8007928:	bfa8      	it	ge
 800792a:	4691      	movge	r9, r2
 800792c:	f1b9 0f00 	cmp.w	r9, #0
 8007930:	dc35      	bgt.n	800799e <_printf_float+0x3aa>
 8007932:	f04f 0800 	mov.w	r8, #0
 8007936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800793a:	f104 0a1a 	add.w	sl, r4, #26
 800793e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	eba3 0309 	sub.w	r3, r3, r9
 8007948:	4543      	cmp	r3, r8
 800794a:	f77f af79 	ble.w	8007840 <_printf_float+0x24c>
 800794e:	2301      	movs	r3, #1
 8007950:	4652      	mov	r2, sl
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	f43f aeaa 	beq.w	80076b2 <_printf_float+0xbe>
 800795e:	f108 0801 	add.w	r8, r8, #1
 8007962:	e7ec      	b.n	800793e <_printf_float+0x34a>
 8007964:	4613      	mov	r3, r2
 8007966:	4631      	mov	r1, r6
 8007968:	4642      	mov	r2, r8
 800796a:	4628      	mov	r0, r5
 800796c:	47b8      	blx	r7
 800796e:	3001      	adds	r0, #1
 8007970:	d1c0      	bne.n	80078f4 <_printf_float+0x300>
 8007972:	e69e      	b.n	80076b2 <_printf_float+0xbe>
 8007974:	2301      	movs	r3, #1
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	9205      	str	r2, [sp, #20]
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	f43f ae97 	beq.w	80076b2 <_printf_float+0xbe>
 8007984:	9a05      	ldr	r2, [sp, #20]
 8007986:	f10b 0b01 	add.w	fp, fp, #1
 800798a:	e7b9      	b.n	8007900 <_printf_float+0x30c>
 800798c:	ee18 3a10 	vmov	r3, s16
 8007990:	4652      	mov	r2, sl
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	d1be      	bne.n	800791a <_printf_float+0x326>
 800799c:	e689      	b.n	80076b2 <_printf_float+0xbe>
 800799e:	9a05      	ldr	r2, [sp, #20]
 80079a0:	464b      	mov	r3, r9
 80079a2:	4442      	add	r2, r8
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1c1      	bne.n	8007932 <_printf_float+0x33e>
 80079ae:	e680      	b.n	80076b2 <_printf_float+0xbe>
 80079b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079b2:	2a01      	cmp	r2, #1
 80079b4:	dc01      	bgt.n	80079ba <_printf_float+0x3c6>
 80079b6:	07db      	lsls	r3, r3, #31
 80079b8:	d53a      	bpl.n	8007a30 <_printf_float+0x43c>
 80079ba:	2301      	movs	r3, #1
 80079bc:	4642      	mov	r2, r8
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	f43f ae74 	beq.w	80076b2 <_printf_float+0xbe>
 80079ca:	ee18 3a10 	vmov	r3, s16
 80079ce:	4652      	mov	r2, sl
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	f43f ae6b 	beq.w	80076b2 <_printf_float+0xbe>
 80079dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079e0:	2200      	movs	r2, #0
 80079e2:	2300      	movs	r3, #0
 80079e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079e8:	f7f9 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ec:	b9d8      	cbnz	r0, 8007a26 <_printf_float+0x432>
 80079ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079f2:	f108 0201 	add.w	r2, r8, #1
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	d10e      	bne.n	8007a1e <_printf_float+0x42a>
 8007a00:	e657      	b.n	80076b2 <_printf_float+0xbe>
 8007a02:	2301      	movs	r3, #1
 8007a04:	4652      	mov	r2, sl
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f43f ae50 	beq.w	80076b2 <_printf_float+0xbe>
 8007a12:	f108 0801 	add.w	r8, r8, #1
 8007a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	4543      	cmp	r3, r8
 8007a1c:	dcf1      	bgt.n	8007a02 <_printf_float+0x40e>
 8007a1e:	464b      	mov	r3, r9
 8007a20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a24:	e6da      	b.n	80077dc <_printf_float+0x1e8>
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	f104 0a1a 	add.w	sl, r4, #26
 8007a2e:	e7f2      	b.n	8007a16 <_printf_float+0x422>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4642      	mov	r2, r8
 8007a34:	e7df      	b.n	80079f6 <_printf_float+0x402>
 8007a36:	2301      	movs	r3, #1
 8007a38:	464a      	mov	r2, r9
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f ae36 	beq.w	80076b2 <_printf_float+0xbe>
 8007a46:	f108 0801 	add.w	r8, r8, #1
 8007a4a:	68e3      	ldr	r3, [r4, #12]
 8007a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a4e:	1a5b      	subs	r3, r3, r1
 8007a50:	4543      	cmp	r3, r8
 8007a52:	dcf0      	bgt.n	8007a36 <_printf_float+0x442>
 8007a54:	e6f8      	b.n	8007848 <_printf_float+0x254>
 8007a56:	f04f 0800 	mov.w	r8, #0
 8007a5a:	f104 0919 	add.w	r9, r4, #25
 8007a5e:	e7f4      	b.n	8007a4a <_printf_float+0x456>

08007a60 <_printf_common>:
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	4616      	mov	r6, r2
 8007a66:	4699      	mov	r9, r3
 8007a68:	688a      	ldr	r2, [r1, #8]
 8007a6a:	690b      	ldr	r3, [r1, #16]
 8007a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bfb8      	it	lt
 8007a74:	4613      	movlt	r3, r2
 8007a76:	6033      	str	r3, [r6, #0]
 8007a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	b10a      	cbz	r2, 8007a86 <_printf_common+0x26>
 8007a82:	3301      	adds	r3, #1
 8007a84:	6033      	str	r3, [r6, #0]
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	0699      	lsls	r1, r3, #26
 8007a8a:	bf42      	ittt	mi
 8007a8c:	6833      	ldrmi	r3, [r6, #0]
 8007a8e:	3302      	addmi	r3, #2
 8007a90:	6033      	strmi	r3, [r6, #0]
 8007a92:	6825      	ldr	r5, [r4, #0]
 8007a94:	f015 0506 	ands.w	r5, r5, #6
 8007a98:	d106      	bne.n	8007aa8 <_printf_common+0x48>
 8007a9a:	f104 0a19 	add.w	sl, r4, #25
 8007a9e:	68e3      	ldr	r3, [r4, #12]
 8007aa0:	6832      	ldr	r2, [r6, #0]
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	dc26      	bgt.n	8007af6 <_printf_common+0x96>
 8007aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aac:	1e13      	subs	r3, r2, #0
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	bf18      	it	ne
 8007ab2:	2301      	movne	r3, #1
 8007ab4:	0692      	lsls	r2, r2, #26
 8007ab6:	d42b      	bmi.n	8007b10 <_printf_common+0xb0>
 8007ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007abc:	4649      	mov	r1, r9
 8007abe:	4638      	mov	r0, r7
 8007ac0:	47c0      	blx	r8
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d01e      	beq.n	8007b04 <_printf_common+0xa4>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	f003 0306 	and.w	r3, r3, #6
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	bf02      	ittt	eq
 8007ad2:	68e5      	ldreq	r5, [r4, #12]
 8007ad4:	6833      	ldreq	r3, [r6, #0]
 8007ad6:	1aed      	subeq	r5, r5, r3
 8007ad8:	68a3      	ldr	r3, [r4, #8]
 8007ada:	bf0c      	ite	eq
 8007adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ae0:	2500      	movne	r5, #0
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	bfc4      	itt	gt
 8007ae6:	1a9b      	subgt	r3, r3, r2
 8007ae8:	18ed      	addgt	r5, r5, r3
 8007aea:	2600      	movs	r6, #0
 8007aec:	341a      	adds	r4, #26
 8007aee:	42b5      	cmp	r5, r6
 8007af0:	d11a      	bne.n	8007b28 <_printf_common+0xc8>
 8007af2:	2000      	movs	r0, #0
 8007af4:	e008      	b.n	8007b08 <_printf_common+0xa8>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4652      	mov	r2, sl
 8007afa:	4649      	mov	r1, r9
 8007afc:	4638      	mov	r0, r7
 8007afe:	47c0      	blx	r8
 8007b00:	3001      	adds	r0, #1
 8007b02:	d103      	bne.n	8007b0c <_printf_common+0xac>
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	e7c6      	b.n	8007a9e <_printf_common+0x3e>
 8007b10:	18e1      	adds	r1, r4, r3
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	2030      	movs	r0, #48	; 0x30
 8007b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b1a:	4422      	add	r2, r4
 8007b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b24:	3302      	adds	r3, #2
 8007b26:	e7c7      	b.n	8007ab8 <_printf_common+0x58>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4638      	mov	r0, r7
 8007b30:	47c0      	blx	r8
 8007b32:	3001      	adds	r0, #1
 8007b34:	d0e6      	beq.n	8007b04 <_printf_common+0xa4>
 8007b36:	3601      	adds	r6, #1
 8007b38:	e7d9      	b.n	8007aee <_printf_common+0x8e>
	...

08007b3c <_printf_i>:
 8007b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	7e0f      	ldrb	r7, [r1, #24]
 8007b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b44:	2f78      	cmp	r7, #120	; 0x78
 8007b46:	4691      	mov	r9, r2
 8007b48:	4680      	mov	r8, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	469a      	mov	sl, r3
 8007b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b52:	d807      	bhi.n	8007b64 <_printf_i+0x28>
 8007b54:	2f62      	cmp	r7, #98	; 0x62
 8007b56:	d80a      	bhi.n	8007b6e <_printf_i+0x32>
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	f000 80d4 	beq.w	8007d06 <_printf_i+0x1ca>
 8007b5e:	2f58      	cmp	r7, #88	; 0x58
 8007b60:	f000 80c0 	beq.w	8007ce4 <_printf_i+0x1a8>
 8007b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b6c:	e03a      	b.n	8007be4 <_printf_i+0xa8>
 8007b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b72:	2b15      	cmp	r3, #21
 8007b74:	d8f6      	bhi.n	8007b64 <_printf_i+0x28>
 8007b76:	a101      	add	r1, pc, #4	; (adr r1, 8007b7c <_printf_i+0x40>)
 8007b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b7c:	08007bd5 	.word	0x08007bd5
 8007b80:	08007be9 	.word	0x08007be9
 8007b84:	08007b65 	.word	0x08007b65
 8007b88:	08007b65 	.word	0x08007b65
 8007b8c:	08007b65 	.word	0x08007b65
 8007b90:	08007b65 	.word	0x08007b65
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007b65 	.word	0x08007b65
 8007b9c:	08007b65 	.word	0x08007b65
 8007ba0:	08007b65 	.word	0x08007b65
 8007ba4:	08007b65 	.word	0x08007b65
 8007ba8:	08007ced 	.word	0x08007ced
 8007bac:	08007c15 	.word	0x08007c15
 8007bb0:	08007ca7 	.word	0x08007ca7
 8007bb4:	08007b65 	.word	0x08007b65
 8007bb8:	08007b65 	.word	0x08007b65
 8007bbc:	08007d0f 	.word	0x08007d0f
 8007bc0:	08007b65 	.word	0x08007b65
 8007bc4:	08007c15 	.word	0x08007c15
 8007bc8:	08007b65 	.word	0x08007b65
 8007bcc:	08007b65 	.word	0x08007b65
 8007bd0:	08007caf 	.word	0x08007caf
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	1d1a      	adds	r2, r3, #4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	602a      	str	r2, [r5, #0]
 8007bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007be4:	2301      	movs	r3, #1
 8007be6:	e09f      	b.n	8007d28 <_printf_i+0x1ec>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	682b      	ldr	r3, [r5, #0]
 8007bec:	0607      	lsls	r7, r0, #24
 8007bee:	f103 0104 	add.w	r1, r3, #4
 8007bf2:	6029      	str	r1, [r5, #0]
 8007bf4:	d501      	bpl.n	8007bfa <_printf_i+0xbe>
 8007bf6:	681e      	ldr	r6, [r3, #0]
 8007bf8:	e003      	b.n	8007c02 <_printf_i+0xc6>
 8007bfa:	0646      	lsls	r6, r0, #25
 8007bfc:	d5fb      	bpl.n	8007bf6 <_printf_i+0xba>
 8007bfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	da03      	bge.n	8007c0e <_printf_i+0xd2>
 8007c06:	232d      	movs	r3, #45	; 0x2d
 8007c08:	4276      	negs	r6, r6
 8007c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c0e:	485a      	ldr	r0, [pc, #360]	; (8007d78 <_printf_i+0x23c>)
 8007c10:	230a      	movs	r3, #10
 8007c12:	e012      	b.n	8007c3a <_printf_i+0xfe>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	6820      	ldr	r0, [r4, #0]
 8007c18:	1d19      	adds	r1, r3, #4
 8007c1a:	6029      	str	r1, [r5, #0]
 8007c1c:	0605      	lsls	r5, r0, #24
 8007c1e:	d501      	bpl.n	8007c24 <_printf_i+0xe8>
 8007c20:	681e      	ldr	r6, [r3, #0]
 8007c22:	e002      	b.n	8007c2a <_printf_i+0xee>
 8007c24:	0641      	lsls	r1, r0, #25
 8007c26:	d5fb      	bpl.n	8007c20 <_printf_i+0xe4>
 8007c28:	881e      	ldrh	r6, [r3, #0]
 8007c2a:	4853      	ldr	r0, [pc, #332]	; (8007d78 <_printf_i+0x23c>)
 8007c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c2e:	bf0c      	ite	eq
 8007c30:	2308      	moveq	r3, #8
 8007c32:	230a      	movne	r3, #10
 8007c34:	2100      	movs	r1, #0
 8007c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c3a:	6865      	ldr	r5, [r4, #4]
 8007c3c:	60a5      	str	r5, [r4, #8]
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	bfa2      	ittt	ge
 8007c42:	6821      	ldrge	r1, [r4, #0]
 8007c44:	f021 0104 	bicge.w	r1, r1, #4
 8007c48:	6021      	strge	r1, [r4, #0]
 8007c4a:	b90e      	cbnz	r6, 8007c50 <_printf_i+0x114>
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	d04b      	beq.n	8007ce8 <_printf_i+0x1ac>
 8007c50:	4615      	mov	r5, r2
 8007c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c56:	fb03 6711 	mls	r7, r3, r1, r6
 8007c5a:	5dc7      	ldrb	r7, [r0, r7]
 8007c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c60:	4637      	mov	r7, r6
 8007c62:	42bb      	cmp	r3, r7
 8007c64:	460e      	mov	r6, r1
 8007c66:	d9f4      	bls.n	8007c52 <_printf_i+0x116>
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d10b      	bne.n	8007c84 <_printf_i+0x148>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	07de      	lsls	r6, r3, #31
 8007c70:	d508      	bpl.n	8007c84 <_printf_i+0x148>
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	6861      	ldr	r1, [r4, #4]
 8007c76:	4299      	cmp	r1, r3
 8007c78:	bfde      	ittt	le
 8007c7a:	2330      	movle	r3, #48	; 0x30
 8007c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c84:	1b52      	subs	r2, r2, r5
 8007c86:	6122      	str	r2, [r4, #16]
 8007c88:	f8cd a000 	str.w	sl, [sp]
 8007c8c:	464b      	mov	r3, r9
 8007c8e:	aa03      	add	r2, sp, #12
 8007c90:	4621      	mov	r1, r4
 8007c92:	4640      	mov	r0, r8
 8007c94:	f7ff fee4 	bl	8007a60 <_printf_common>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d14a      	bne.n	8007d32 <_printf_i+0x1f6>
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	b004      	add	sp, #16
 8007ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	f043 0320 	orr.w	r3, r3, #32
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	4833      	ldr	r0, [pc, #204]	; (8007d7c <_printf_i+0x240>)
 8007cb0:	2778      	movs	r7, #120	; 0x78
 8007cb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	6829      	ldr	r1, [r5, #0]
 8007cba:	061f      	lsls	r7, r3, #24
 8007cbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cc0:	d402      	bmi.n	8007cc8 <_printf_i+0x18c>
 8007cc2:	065f      	lsls	r7, r3, #25
 8007cc4:	bf48      	it	mi
 8007cc6:	b2b6      	uxthmi	r6, r6
 8007cc8:	07df      	lsls	r7, r3, #31
 8007cca:	bf48      	it	mi
 8007ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8007cd0:	6029      	str	r1, [r5, #0]
 8007cd2:	bf48      	it	mi
 8007cd4:	6023      	strmi	r3, [r4, #0]
 8007cd6:	b91e      	cbnz	r6, 8007ce0 <_printf_i+0x1a4>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	f023 0320 	bic.w	r3, r3, #32
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	e7a7      	b.n	8007c34 <_printf_i+0xf8>
 8007ce4:	4824      	ldr	r0, [pc, #144]	; (8007d78 <_printf_i+0x23c>)
 8007ce6:	e7e4      	b.n	8007cb2 <_printf_i+0x176>
 8007ce8:	4615      	mov	r5, r2
 8007cea:	e7bd      	b.n	8007c68 <_printf_i+0x12c>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	6826      	ldr	r6, [r4, #0]
 8007cf0:	6961      	ldr	r1, [r4, #20]
 8007cf2:	1d18      	adds	r0, r3, #4
 8007cf4:	6028      	str	r0, [r5, #0]
 8007cf6:	0635      	lsls	r5, r6, #24
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0x1c4>
 8007cfc:	6019      	str	r1, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <_printf_i+0x1ca>
 8007d00:	0670      	lsls	r0, r6, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0x1c0>
 8007d04:	8019      	strh	r1, [r3, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	4615      	mov	r5, r2
 8007d0c:	e7bc      	b.n	8007c88 <_printf_i+0x14c>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	602a      	str	r2, [r5, #0]
 8007d14:	681d      	ldr	r5, [r3, #0]
 8007d16:	6862      	ldr	r2, [r4, #4]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f7f8 fa58 	bl	80001d0 <memchr>
 8007d20:	b108      	cbz	r0, 8007d26 <_printf_i+0x1ea>
 8007d22:	1b40      	subs	r0, r0, r5
 8007d24:	6060      	str	r0, [r4, #4]
 8007d26:	6863      	ldr	r3, [r4, #4]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d30:	e7aa      	b.n	8007c88 <_printf_i+0x14c>
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4649      	mov	r1, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	47d0      	blx	sl
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d0ad      	beq.n	8007c9c <_printf_i+0x160>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	079b      	lsls	r3, r3, #30
 8007d44:	d413      	bmi.n	8007d6e <_printf_i+0x232>
 8007d46:	68e0      	ldr	r0, [r4, #12]
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	bfb8      	it	lt
 8007d4e:	4618      	movlt	r0, r3
 8007d50:	e7a6      	b.n	8007ca0 <_printf_i+0x164>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4632      	mov	r2, r6
 8007d56:	4649      	mov	r1, r9
 8007d58:	4640      	mov	r0, r8
 8007d5a:	47d0      	blx	sl
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d09d      	beq.n	8007c9c <_printf_i+0x160>
 8007d60:	3501      	adds	r5, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	9903      	ldr	r1, [sp, #12]
 8007d66:	1a5b      	subs	r3, r3, r1
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dcf2      	bgt.n	8007d52 <_printf_i+0x216>
 8007d6c:	e7eb      	b.n	8007d46 <_printf_i+0x20a>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	f104 0619 	add.w	r6, r4, #25
 8007d74:	e7f5      	b.n	8007d62 <_printf_i+0x226>
 8007d76:	bf00      	nop
 8007d78:	0800bdf2 	.word	0x0800bdf2
 8007d7c:	0800be03 	.word	0x0800be03

08007d80 <_scanf_float>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	b087      	sub	sp, #28
 8007d86:	4617      	mov	r7, r2
 8007d88:	9303      	str	r3, [sp, #12]
 8007d8a:	688b      	ldr	r3, [r1, #8]
 8007d8c:	1e5a      	subs	r2, r3, #1
 8007d8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d92:	bf83      	ittte	hi
 8007d94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d98:	195b      	addhi	r3, r3, r5
 8007d9a:	9302      	strhi	r3, [sp, #8]
 8007d9c:	2300      	movls	r3, #0
 8007d9e:	bf86      	itte	hi
 8007da0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007da4:	608b      	strhi	r3, [r1, #8]
 8007da6:	9302      	strls	r3, [sp, #8]
 8007da8:	680b      	ldr	r3, [r1, #0]
 8007daa:	468b      	mov	fp, r1
 8007dac:	2500      	movs	r5, #0
 8007dae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007db2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007db6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007dba:	4680      	mov	r8, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	465e      	mov	r6, fp
 8007dc0:	46aa      	mov	sl, r5
 8007dc2:	46a9      	mov	r9, r5
 8007dc4:	9501      	str	r5, [sp, #4]
 8007dc6:	68a2      	ldr	r2, [r4, #8]
 8007dc8:	b152      	cbz	r2, 8007de0 <_scanf_float+0x60>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b4e      	cmp	r3, #78	; 0x4e
 8007dd0:	d864      	bhi.n	8007e9c <_scanf_float+0x11c>
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d83c      	bhi.n	8007e50 <_scanf_float+0xd0>
 8007dd6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007dda:	b2c8      	uxtb	r0, r1
 8007ddc:	280e      	cmp	r0, #14
 8007dde:	d93a      	bls.n	8007e56 <_scanf_float+0xd6>
 8007de0:	f1b9 0f00 	cmp.w	r9, #0
 8007de4:	d003      	beq.n	8007dee <_scanf_float+0x6e>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007df2:	f1ba 0f01 	cmp.w	sl, #1
 8007df6:	f200 8113 	bhi.w	8008020 <_scanf_float+0x2a0>
 8007dfa:	455e      	cmp	r6, fp
 8007dfc:	f200 8105 	bhi.w	800800a <_scanf_float+0x28a>
 8007e00:	2501      	movs	r5, #1
 8007e02:	4628      	mov	r0, r5
 8007e04:	b007      	add	sp, #28
 8007e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e0e:	2a0d      	cmp	r2, #13
 8007e10:	d8e6      	bhi.n	8007de0 <_scanf_float+0x60>
 8007e12:	a101      	add	r1, pc, #4	; (adr r1, 8007e18 <_scanf_float+0x98>)
 8007e14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e18:	08007f57 	.word	0x08007f57
 8007e1c:	08007de1 	.word	0x08007de1
 8007e20:	08007de1 	.word	0x08007de1
 8007e24:	08007de1 	.word	0x08007de1
 8007e28:	08007fb7 	.word	0x08007fb7
 8007e2c:	08007f8f 	.word	0x08007f8f
 8007e30:	08007de1 	.word	0x08007de1
 8007e34:	08007de1 	.word	0x08007de1
 8007e38:	08007f65 	.word	0x08007f65
 8007e3c:	08007de1 	.word	0x08007de1
 8007e40:	08007de1 	.word	0x08007de1
 8007e44:	08007de1 	.word	0x08007de1
 8007e48:	08007de1 	.word	0x08007de1
 8007e4c:	08007f1d 	.word	0x08007f1d
 8007e50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e54:	e7db      	b.n	8007e0e <_scanf_float+0x8e>
 8007e56:	290e      	cmp	r1, #14
 8007e58:	d8c2      	bhi.n	8007de0 <_scanf_float+0x60>
 8007e5a:	a001      	add	r0, pc, #4	; (adr r0, 8007e60 <_scanf_float+0xe0>)
 8007e5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e60:	08007f0f 	.word	0x08007f0f
 8007e64:	08007de1 	.word	0x08007de1
 8007e68:	08007f0f 	.word	0x08007f0f
 8007e6c:	08007fa3 	.word	0x08007fa3
 8007e70:	08007de1 	.word	0x08007de1
 8007e74:	08007ebd 	.word	0x08007ebd
 8007e78:	08007ef9 	.word	0x08007ef9
 8007e7c:	08007ef9 	.word	0x08007ef9
 8007e80:	08007ef9 	.word	0x08007ef9
 8007e84:	08007ef9 	.word	0x08007ef9
 8007e88:	08007ef9 	.word	0x08007ef9
 8007e8c:	08007ef9 	.word	0x08007ef9
 8007e90:	08007ef9 	.word	0x08007ef9
 8007e94:	08007ef9 	.word	0x08007ef9
 8007e98:	08007ef9 	.word	0x08007ef9
 8007e9c:	2b6e      	cmp	r3, #110	; 0x6e
 8007e9e:	d809      	bhi.n	8007eb4 <_scanf_float+0x134>
 8007ea0:	2b60      	cmp	r3, #96	; 0x60
 8007ea2:	d8b2      	bhi.n	8007e0a <_scanf_float+0x8a>
 8007ea4:	2b54      	cmp	r3, #84	; 0x54
 8007ea6:	d077      	beq.n	8007f98 <_scanf_float+0x218>
 8007ea8:	2b59      	cmp	r3, #89	; 0x59
 8007eaa:	d199      	bne.n	8007de0 <_scanf_float+0x60>
 8007eac:	2d07      	cmp	r5, #7
 8007eae:	d197      	bne.n	8007de0 <_scanf_float+0x60>
 8007eb0:	2508      	movs	r5, #8
 8007eb2:	e029      	b.n	8007f08 <_scanf_float+0x188>
 8007eb4:	2b74      	cmp	r3, #116	; 0x74
 8007eb6:	d06f      	beq.n	8007f98 <_scanf_float+0x218>
 8007eb8:	2b79      	cmp	r3, #121	; 0x79
 8007eba:	e7f6      	b.n	8007eaa <_scanf_float+0x12a>
 8007ebc:	6821      	ldr	r1, [r4, #0]
 8007ebe:	05c8      	lsls	r0, r1, #23
 8007ec0:	d51a      	bpl.n	8007ef8 <_scanf_float+0x178>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ec8:	6021      	str	r1, [r4, #0]
 8007eca:	f109 0901 	add.w	r9, r9, #1
 8007ece:	b11b      	cbz	r3, 8007ed8 <_scanf_float+0x158>
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	60a2      	str	r2, [r4, #8]
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	607b      	str	r3, [r7, #4]
 8007eec:	f340 8084 	ble.w	8007ff8 <_scanf_float+0x278>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	603b      	str	r3, [r7, #0]
 8007ef6:	e766      	b.n	8007dc6 <_scanf_float+0x46>
 8007ef8:	eb1a 0f05 	cmn.w	sl, r5
 8007efc:	f47f af70 	bne.w	8007de0 <_scanf_float+0x60>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	f806 3b01 	strb.w	r3, [r6], #1
 8007f0c:	e7e4      	b.n	8007ed8 <_scanf_float+0x158>
 8007f0e:	6822      	ldr	r2, [r4, #0]
 8007f10:	0610      	lsls	r0, r2, #24
 8007f12:	f57f af65 	bpl.w	8007de0 <_scanf_float+0x60>
 8007f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f1a:	e7f4      	b.n	8007f06 <_scanf_float+0x186>
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	d10e      	bne.n	8007f40 <_scanf_float+0x1c0>
 8007f22:	f1b9 0f00 	cmp.w	r9, #0
 8007f26:	d10e      	bne.n	8007f46 <_scanf_float+0x1c6>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f32:	d108      	bne.n	8007f46 <_scanf_float+0x1c6>
 8007f34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	f04f 0a01 	mov.w	sl, #1
 8007f3e:	e7e3      	b.n	8007f08 <_scanf_float+0x188>
 8007f40:	f1ba 0f02 	cmp.w	sl, #2
 8007f44:	d055      	beq.n	8007ff2 <_scanf_float+0x272>
 8007f46:	2d01      	cmp	r5, #1
 8007f48:	d002      	beq.n	8007f50 <_scanf_float+0x1d0>
 8007f4a:	2d04      	cmp	r5, #4
 8007f4c:	f47f af48 	bne.w	8007de0 <_scanf_float+0x60>
 8007f50:	3501      	adds	r5, #1
 8007f52:	b2ed      	uxtb	r5, r5
 8007f54:	e7d8      	b.n	8007f08 <_scanf_float+0x188>
 8007f56:	f1ba 0f01 	cmp.w	sl, #1
 8007f5a:	f47f af41 	bne.w	8007de0 <_scanf_float+0x60>
 8007f5e:	f04f 0a02 	mov.w	sl, #2
 8007f62:	e7d1      	b.n	8007f08 <_scanf_float+0x188>
 8007f64:	b97d      	cbnz	r5, 8007f86 <_scanf_float+0x206>
 8007f66:	f1b9 0f00 	cmp.w	r9, #0
 8007f6a:	f47f af3c 	bne.w	8007de6 <_scanf_float+0x66>
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f78:	f47f af39 	bne.w	8007dee <_scanf_float+0x6e>
 8007f7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	2501      	movs	r5, #1
 8007f84:	e7c0      	b.n	8007f08 <_scanf_float+0x188>
 8007f86:	2d03      	cmp	r5, #3
 8007f88:	d0e2      	beq.n	8007f50 <_scanf_float+0x1d0>
 8007f8a:	2d05      	cmp	r5, #5
 8007f8c:	e7de      	b.n	8007f4c <_scanf_float+0x1cc>
 8007f8e:	2d02      	cmp	r5, #2
 8007f90:	f47f af26 	bne.w	8007de0 <_scanf_float+0x60>
 8007f94:	2503      	movs	r5, #3
 8007f96:	e7b7      	b.n	8007f08 <_scanf_float+0x188>
 8007f98:	2d06      	cmp	r5, #6
 8007f9a:	f47f af21 	bne.w	8007de0 <_scanf_float+0x60>
 8007f9e:	2507      	movs	r5, #7
 8007fa0:	e7b2      	b.n	8007f08 <_scanf_float+0x188>
 8007fa2:	6822      	ldr	r2, [r4, #0]
 8007fa4:	0591      	lsls	r1, r2, #22
 8007fa6:	f57f af1b 	bpl.w	8007de0 <_scanf_float+0x60>
 8007faa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007fae:	6022      	str	r2, [r4, #0]
 8007fb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fb4:	e7a8      	b.n	8007f08 <_scanf_float+0x188>
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007fbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007fc0:	d006      	beq.n	8007fd0 <_scanf_float+0x250>
 8007fc2:	0550      	lsls	r0, r2, #21
 8007fc4:	f57f af0c 	bpl.w	8007de0 <_scanf_float+0x60>
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	f43f af0f 	beq.w	8007dee <_scanf_float+0x6e>
 8007fd0:	0591      	lsls	r1, r2, #22
 8007fd2:	bf58      	it	pl
 8007fd4:	9901      	ldrpl	r1, [sp, #4]
 8007fd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fda:	bf58      	it	pl
 8007fdc:	eba9 0101 	subpl.w	r1, r9, r1
 8007fe0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007fe4:	bf58      	it	pl
 8007fe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fea:	6022      	str	r2, [r4, #0]
 8007fec:	f04f 0900 	mov.w	r9, #0
 8007ff0:	e78a      	b.n	8007f08 <_scanf_float+0x188>
 8007ff2:	f04f 0a03 	mov.w	sl, #3
 8007ff6:	e787      	b.n	8007f08 <_scanf_float+0x188>
 8007ff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	4640      	mov	r0, r8
 8008000:	4798      	blx	r3
 8008002:	2800      	cmp	r0, #0
 8008004:	f43f aedf 	beq.w	8007dc6 <_scanf_float+0x46>
 8008008:	e6ea      	b.n	8007de0 <_scanf_float+0x60>
 800800a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800800e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008012:	463a      	mov	r2, r7
 8008014:	4640      	mov	r0, r8
 8008016:	4798      	blx	r3
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	3b01      	subs	r3, #1
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	e6ec      	b.n	8007dfa <_scanf_float+0x7a>
 8008020:	1e6b      	subs	r3, r5, #1
 8008022:	2b06      	cmp	r3, #6
 8008024:	d825      	bhi.n	8008072 <_scanf_float+0x2f2>
 8008026:	2d02      	cmp	r5, #2
 8008028:	d836      	bhi.n	8008098 <_scanf_float+0x318>
 800802a:	455e      	cmp	r6, fp
 800802c:	f67f aee8 	bls.w	8007e00 <_scanf_float+0x80>
 8008030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008034:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008038:	463a      	mov	r2, r7
 800803a:	4640      	mov	r0, r8
 800803c:	4798      	blx	r3
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	3b01      	subs	r3, #1
 8008042:	6123      	str	r3, [r4, #16]
 8008044:	e7f1      	b.n	800802a <_scanf_float+0x2aa>
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800804c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008050:	9002      	str	r0, [sp, #8]
 8008052:	463a      	mov	r2, r7
 8008054:	4640      	mov	r0, r8
 8008056:	4798      	blx	r3
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	3b01      	subs	r3, #1
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008062:	fa5f fa8a 	uxtb.w	sl, sl
 8008066:	f1ba 0f02 	cmp.w	sl, #2
 800806a:	d1ec      	bne.n	8008046 <_scanf_float+0x2c6>
 800806c:	3d03      	subs	r5, #3
 800806e:	b2ed      	uxtb	r5, r5
 8008070:	1b76      	subs	r6, r6, r5
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	05da      	lsls	r2, r3, #23
 8008076:	d52f      	bpl.n	80080d8 <_scanf_float+0x358>
 8008078:	055b      	lsls	r3, r3, #21
 800807a:	d510      	bpl.n	800809e <_scanf_float+0x31e>
 800807c:	455e      	cmp	r6, fp
 800807e:	f67f aebf 	bls.w	8007e00 <_scanf_float+0x80>
 8008082:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800808a:	463a      	mov	r2, r7
 800808c:	4640      	mov	r0, r8
 800808e:	4798      	blx	r3
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	3b01      	subs	r3, #1
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	e7f1      	b.n	800807c <_scanf_float+0x2fc>
 8008098:	46aa      	mov	sl, r5
 800809a:	9602      	str	r6, [sp, #8]
 800809c:	e7df      	b.n	800805e <_scanf_float+0x2de>
 800809e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	2965      	cmp	r1, #101	; 0x65
 80080a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80080aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	d00c      	beq.n	80080cc <_scanf_float+0x34c>
 80080b2:	2945      	cmp	r1, #69	; 0x45
 80080b4:	d00a      	beq.n	80080cc <_scanf_float+0x34c>
 80080b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080ba:	463a      	mov	r2, r7
 80080bc:	4640      	mov	r0, r8
 80080be:	4798      	blx	r3
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	1eb5      	subs	r5, r6, #2
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080d0:	463a      	mov	r2, r7
 80080d2:	4640      	mov	r0, r8
 80080d4:	4798      	blx	r3
 80080d6:	462e      	mov	r6, r5
 80080d8:	6825      	ldr	r5, [r4, #0]
 80080da:	f015 0510 	ands.w	r5, r5, #16
 80080de:	d158      	bne.n	8008192 <_scanf_float+0x412>
 80080e0:	7035      	strb	r5, [r6, #0]
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ec:	d11c      	bne.n	8008128 <_scanf_float+0x3a8>
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	454b      	cmp	r3, r9
 80080f2:	eba3 0209 	sub.w	r2, r3, r9
 80080f6:	d124      	bne.n	8008142 <_scanf_float+0x3c2>
 80080f8:	2200      	movs	r2, #0
 80080fa:	4659      	mov	r1, fp
 80080fc:	4640      	mov	r0, r8
 80080fe:	f002 fc2f 	bl	800a960 <_strtod_r>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	6821      	ldr	r1, [r4, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f011 0f02 	tst.w	r1, #2
 800810c:	ec57 6b10 	vmov	r6, r7, d0
 8008110:	f103 0204 	add.w	r2, r3, #4
 8008114:	d020      	beq.n	8008158 <_scanf_float+0x3d8>
 8008116:	9903      	ldr	r1, [sp, #12]
 8008118:	600a      	str	r2, [r1, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	e9c3 6700 	strd	r6, r7, [r3]
 8008120:	68e3      	ldr	r3, [r4, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60e3      	str	r3, [r4, #12]
 8008126:	e66c      	b.n	8007e02 <_scanf_float+0x82>
 8008128:	9b04      	ldr	r3, [sp, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0e4      	beq.n	80080f8 <_scanf_float+0x378>
 800812e:	9905      	ldr	r1, [sp, #20]
 8008130:	230a      	movs	r3, #10
 8008132:	462a      	mov	r2, r5
 8008134:	3101      	adds	r1, #1
 8008136:	4640      	mov	r0, r8
 8008138:	f002 fc9a 	bl	800aa70 <_strtol_r>
 800813c:	9b04      	ldr	r3, [sp, #16]
 800813e:	9e05      	ldr	r6, [sp, #20]
 8008140:	1ac2      	subs	r2, r0, r3
 8008142:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008146:	429e      	cmp	r6, r3
 8008148:	bf28      	it	cs
 800814a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800814e:	4912      	ldr	r1, [pc, #72]	; (8008198 <_scanf_float+0x418>)
 8008150:	4630      	mov	r0, r6
 8008152:	f000 f8e7 	bl	8008324 <siprintf>
 8008156:	e7cf      	b.n	80080f8 <_scanf_float+0x378>
 8008158:	f011 0f04 	tst.w	r1, #4
 800815c:	9903      	ldr	r1, [sp, #12]
 800815e:	600a      	str	r2, [r1, #0]
 8008160:	d1db      	bne.n	800811a <_scanf_float+0x39a>
 8008162:	f8d3 8000 	ldr.w	r8, [r3]
 8008166:	ee10 2a10 	vmov	r2, s0
 800816a:	ee10 0a10 	vmov	r0, s0
 800816e:	463b      	mov	r3, r7
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fcdb 	bl	8000b2c <__aeabi_dcmpun>
 8008176:	b128      	cbz	r0, 8008184 <_scanf_float+0x404>
 8008178:	4808      	ldr	r0, [pc, #32]	; (800819c <_scanf_float+0x41c>)
 800817a:	f000 f9b7 	bl	80084ec <nanf>
 800817e:	ed88 0a00 	vstr	s0, [r8]
 8008182:	e7cd      	b.n	8008120 <_scanf_float+0x3a0>
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fd2e 	bl	8000be8 <__aeabi_d2f>
 800818c:	f8c8 0000 	str.w	r0, [r8]
 8008190:	e7c6      	b.n	8008120 <_scanf_float+0x3a0>
 8008192:	2500      	movs	r5, #0
 8008194:	e635      	b.n	8007e02 <_scanf_float+0x82>
 8008196:	bf00      	nop
 8008198:	0800be14 	.word	0x0800be14
 800819c:	0800c1a5 	.word	0x0800c1a5

080081a0 <std>:
 80081a0:	2300      	movs	r3, #0
 80081a2:	b510      	push	{r4, lr}
 80081a4:	4604      	mov	r4, r0
 80081a6:	e9c0 3300 	strd	r3, r3, [r0]
 80081aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ae:	6083      	str	r3, [r0, #8]
 80081b0:	8181      	strh	r1, [r0, #12]
 80081b2:	6643      	str	r3, [r0, #100]	; 0x64
 80081b4:	81c2      	strh	r2, [r0, #14]
 80081b6:	6183      	str	r3, [r0, #24]
 80081b8:	4619      	mov	r1, r3
 80081ba:	2208      	movs	r2, #8
 80081bc:	305c      	adds	r0, #92	; 0x5c
 80081be:	f000 f914 	bl	80083ea <memset>
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <std+0x58>)
 80081c4:	6263      	str	r3, [r4, #36]	; 0x24
 80081c6:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <std+0x5c>)
 80081c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <std+0x60>)
 80081cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ce:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <std+0x64>)
 80081d0:	6323      	str	r3, [r4, #48]	; 0x30
 80081d2:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <std+0x68>)
 80081d4:	6224      	str	r4, [r4, #32]
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d006      	beq.n	80081e8 <std+0x48>
 80081da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80081de:	4294      	cmp	r4, r2
 80081e0:	d002      	beq.n	80081e8 <std+0x48>
 80081e2:	33d0      	adds	r3, #208	; 0xd0
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d105      	bne.n	80081f4 <std+0x54>
 80081e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	f000 b978 	b.w	80084e4 <__retarget_lock_init_recursive>
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop
 80081f8:	08008365 	.word	0x08008365
 80081fc:	08008387 	.word	0x08008387
 8008200:	080083bf 	.word	0x080083bf
 8008204:	080083e3 	.word	0x080083e3
 8008208:	2000045c 	.word	0x2000045c

0800820c <stdio_exit_handler>:
 800820c:	4a02      	ldr	r2, [pc, #8]	; (8008218 <stdio_exit_handler+0xc>)
 800820e:	4903      	ldr	r1, [pc, #12]	; (800821c <stdio_exit_handler+0x10>)
 8008210:	4803      	ldr	r0, [pc, #12]	; (8008220 <stdio_exit_handler+0x14>)
 8008212:	f000 b869 	b.w	80082e8 <_fwalk_sglue>
 8008216:	bf00      	nop
 8008218:	2000000c 	.word	0x2000000c
 800821c:	0800ae31 	.word	0x0800ae31
 8008220:	20000018 	.word	0x20000018

08008224 <cleanup_stdio>:
 8008224:	6841      	ldr	r1, [r0, #4]
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <cleanup_stdio+0x34>)
 8008228:	4299      	cmp	r1, r3
 800822a:	b510      	push	{r4, lr}
 800822c:	4604      	mov	r4, r0
 800822e:	d001      	beq.n	8008234 <cleanup_stdio+0x10>
 8008230:	f002 fdfe 	bl	800ae30 <_fflush_r>
 8008234:	68a1      	ldr	r1, [r4, #8]
 8008236:	4b09      	ldr	r3, [pc, #36]	; (800825c <cleanup_stdio+0x38>)
 8008238:	4299      	cmp	r1, r3
 800823a:	d002      	beq.n	8008242 <cleanup_stdio+0x1e>
 800823c:	4620      	mov	r0, r4
 800823e:	f002 fdf7 	bl	800ae30 <_fflush_r>
 8008242:	68e1      	ldr	r1, [r4, #12]
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <cleanup_stdio+0x3c>)
 8008246:	4299      	cmp	r1, r3
 8008248:	d004      	beq.n	8008254 <cleanup_stdio+0x30>
 800824a:	4620      	mov	r0, r4
 800824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008250:	f002 bdee 	b.w	800ae30 <_fflush_r>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	bf00      	nop
 8008258:	2000045c 	.word	0x2000045c
 800825c:	200004c4 	.word	0x200004c4
 8008260:	2000052c 	.word	0x2000052c

08008264 <global_stdio_init.part.0>:
 8008264:	b510      	push	{r4, lr}
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <global_stdio_init.part.0+0x30>)
 8008268:	4c0b      	ldr	r4, [pc, #44]	; (8008298 <global_stdio_init.part.0+0x34>)
 800826a:	4a0c      	ldr	r2, [pc, #48]	; (800829c <global_stdio_init.part.0+0x38>)
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	4620      	mov	r0, r4
 8008270:	2200      	movs	r2, #0
 8008272:	2104      	movs	r1, #4
 8008274:	f7ff ff94 	bl	80081a0 <std>
 8008278:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800827c:	2201      	movs	r2, #1
 800827e:	2109      	movs	r1, #9
 8008280:	f7ff ff8e 	bl	80081a0 <std>
 8008284:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008288:	2202      	movs	r2, #2
 800828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800828e:	2112      	movs	r1, #18
 8008290:	f7ff bf86 	b.w	80081a0 <std>
 8008294:	20000594 	.word	0x20000594
 8008298:	2000045c 	.word	0x2000045c
 800829c:	0800820d 	.word	0x0800820d

080082a0 <__sfp_lock_acquire>:
 80082a0:	4801      	ldr	r0, [pc, #4]	; (80082a8 <__sfp_lock_acquire+0x8>)
 80082a2:	f000 b920 	b.w	80084e6 <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	2000059d 	.word	0x2000059d

080082ac <__sfp_lock_release>:
 80082ac:	4801      	ldr	r0, [pc, #4]	; (80082b4 <__sfp_lock_release+0x8>)
 80082ae:	f000 b91b 	b.w	80084e8 <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	2000059d 	.word	0x2000059d

080082b8 <__sinit>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	4604      	mov	r4, r0
 80082bc:	f7ff fff0 	bl	80082a0 <__sfp_lock_acquire>
 80082c0:	6a23      	ldr	r3, [r4, #32]
 80082c2:	b11b      	cbz	r3, 80082cc <__sinit+0x14>
 80082c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c8:	f7ff bff0 	b.w	80082ac <__sfp_lock_release>
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <__sinit+0x28>)
 80082ce:	6223      	str	r3, [r4, #32]
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <__sinit+0x2c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f5      	bne.n	80082c4 <__sinit+0xc>
 80082d8:	f7ff ffc4 	bl	8008264 <global_stdio_init.part.0>
 80082dc:	e7f2      	b.n	80082c4 <__sinit+0xc>
 80082de:	bf00      	nop
 80082e0:	08008225 	.word	0x08008225
 80082e4:	20000594 	.word	0x20000594

080082e8 <_fwalk_sglue>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4607      	mov	r7, r0
 80082ee:	4688      	mov	r8, r1
 80082f0:	4614      	mov	r4, r2
 80082f2:	2600      	movs	r6, #0
 80082f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f8:	f1b9 0901 	subs.w	r9, r9, #1
 80082fc:	d505      	bpl.n	800830a <_fwalk_sglue+0x22>
 80082fe:	6824      	ldr	r4, [r4, #0]
 8008300:	2c00      	cmp	r4, #0
 8008302:	d1f7      	bne.n	80082f4 <_fwalk_sglue+0xc>
 8008304:	4630      	mov	r0, r6
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d907      	bls.n	8008320 <_fwalk_sglue+0x38>
 8008310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008314:	3301      	adds	r3, #1
 8008316:	d003      	beq.n	8008320 <_fwalk_sglue+0x38>
 8008318:	4629      	mov	r1, r5
 800831a:	4638      	mov	r0, r7
 800831c:	47c0      	blx	r8
 800831e:	4306      	orrs	r6, r0
 8008320:	3568      	adds	r5, #104	; 0x68
 8008322:	e7e9      	b.n	80082f8 <_fwalk_sglue+0x10>

08008324 <siprintf>:
 8008324:	b40e      	push	{r1, r2, r3}
 8008326:	b500      	push	{lr}
 8008328:	b09c      	sub	sp, #112	; 0x70
 800832a:	ab1d      	add	r3, sp, #116	; 0x74
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <siprintf+0x38>)
 8008336:	9107      	str	r1, [sp, #28]
 8008338:	9104      	str	r1, [sp, #16]
 800833a:	4909      	ldr	r1, [pc, #36]	; (8008360 <siprintf+0x3c>)
 800833c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	6800      	ldr	r0, [r0, #0]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	a902      	add	r1, sp, #8
 8008348:	f002 fbee 	bl	800ab28 <_svfiprintf_r>
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	b01c      	add	sp, #112	; 0x70
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	20000064 	.word	0x20000064
 8008360:	ffff0208 	.word	0xffff0208

08008364 <__sread>:
 8008364:	b510      	push	{r4, lr}
 8008366:	460c      	mov	r4, r1
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	f000 f86c 	bl	8008448 <_read_r>
 8008370:	2800      	cmp	r0, #0
 8008372:	bfab      	itete	ge
 8008374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008376:	89a3      	ldrhlt	r3, [r4, #12]
 8008378:	181b      	addge	r3, r3, r0
 800837a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800837e:	bfac      	ite	ge
 8008380:	6563      	strge	r3, [r4, #84]	; 0x54
 8008382:	81a3      	strhlt	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__swrite>:
 8008386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	461f      	mov	r7, r3
 800838c:	898b      	ldrh	r3, [r1, #12]
 800838e:	05db      	lsls	r3, r3, #23
 8008390:	4605      	mov	r5, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4616      	mov	r6, r2
 8008396:	d505      	bpl.n	80083a4 <__swrite+0x1e>
 8008398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839c:	2302      	movs	r3, #2
 800839e:	2200      	movs	r2, #0
 80083a0:	f000 f840 	bl	8008424 <_lseek_r>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	4632      	mov	r2, r6
 80083b2:	463b      	mov	r3, r7
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	f000 b857 	b.w	800846c <_write_r>

080083be <__sseek>:
 80083be:	b510      	push	{r4, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c6:	f000 f82d 	bl	8008424 <_lseek_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	bf15      	itete	ne
 80083d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80083d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083da:	81a3      	strheq	r3, [r4, #12]
 80083dc:	bf18      	it	ne
 80083de:	81a3      	strhne	r3, [r4, #12]
 80083e0:	bd10      	pop	{r4, pc}

080083e2 <__sclose>:
 80083e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e6:	f000 b80d 	b.w	8008404 <_close_r>

080083ea <memset>:
 80083ea:	4402      	add	r2, r0
 80083ec:	4603      	mov	r3, r0
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d100      	bne.n	80083f4 <memset+0xa>
 80083f2:	4770      	bx	lr
 80083f4:	f803 1b01 	strb.w	r1, [r3], #1
 80083f8:	e7f9      	b.n	80083ee <memset+0x4>
	...

080083fc <_localeconv_r>:
 80083fc:	4800      	ldr	r0, [pc, #0]	; (8008400 <_localeconv_r+0x4>)
 80083fe:	4770      	bx	lr
 8008400:	20000158 	.word	0x20000158

08008404 <_close_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d06      	ldr	r5, [pc, #24]	; (8008420 <_close_r+0x1c>)
 8008408:	2300      	movs	r3, #0
 800840a:	4604      	mov	r4, r0
 800840c:	4608      	mov	r0, r1
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	f7f9 fb8b 	bl	8001b2a <_close>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d102      	bne.n	800841e <_close_r+0x1a>
 8008418:	682b      	ldr	r3, [r5, #0]
 800841a:	b103      	cbz	r3, 800841e <_close_r+0x1a>
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	bd38      	pop	{r3, r4, r5, pc}
 8008420:	20000598 	.word	0x20000598

08008424 <_lseek_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d07      	ldr	r5, [pc, #28]	; (8008444 <_lseek_r+0x20>)
 8008428:	4604      	mov	r4, r0
 800842a:	4608      	mov	r0, r1
 800842c:	4611      	mov	r1, r2
 800842e:	2200      	movs	r2, #0
 8008430:	602a      	str	r2, [r5, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	f7f9 fba0 	bl	8001b78 <_lseek>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_lseek_r+0x1e>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_lseek_r+0x1e>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	20000598 	.word	0x20000598

08008448 <_read_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d07      	ldr	r5, [pc, #28]	; (8008468 <_read_r+0x20>)
 800844c:	4604      	mov	r4, r0
 800844e:	4608      	mov	r0, r1
 8008450:	4611      	mov	r1, r2
 8008452:	2200      	movs	r2, #0
 8008454:	602a      	str	r2, [r5, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f7f9 fb2e 	bl	8001ab8 <_read>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_read_r+0x1e>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_read_r+0x1e>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	20000598 	.word	0x20000598

0800846c <_write_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d07      	ldr	r5, [pc, #28]	; (800848c <_write_r+0x20>)
 8008470:	4604      	mov	r4, r0
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	2200      	movs	r2, #0
 8008478:	602a      	str	r2, [r5, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f7f9 fb39 	bl	8001af2 <_write>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_write_r+0x1e>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_write_r+0x1e>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	20000598 	.word	0x20000598

08008490 <__errno>:
 8008490:	4b01      	ldr	r3, [pc, #4]	; (8008498 <__errno+0x8>)
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000064 	.word	0x20000064

0800849c <__libc_init_array>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4d0d      	ldr	r5, [pc, #52]	; (80084d4 <__libc_init_array+0x38>)
 80084a0:	4c0d      	ldr	r4, [pc, #52]	; (80084d8 <__libc_init_array+0x3c>)
 80084a2:	1b64      	subs	r4, r4, r5
 80084a4:	10a4      	asrs	r4, r4, #2
 80084a6:	2600      	movs	r6, #0
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	d109      	bne.n	80084c0 <__libc_init_array+0x24>
 80084ac:	4d0b      	ldr	r5, [pc, #44]	; (80084dc <__libc_init_array+0x40>)
 80084ae:	4c0c      	ldr	r4, [pc, #48]	; (80084e0 <__libc_init_array+0x44>)
 80084b0:	f003 fbd6 	bl	800bc60 <_init>
 80084b4:	1b64      	subs	r4, r4, r5
 80084b6:	10a4      	asrs	r4, r4, #2
 80084b8:	2600      	movs	r6, #0
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	d105      	bne.n	80084ca <__libc_init_array+0x2e>
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c4:	4798      	blx	r3
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7ee      	b.n	80084a8 <__libc_init_array+0xc>
 80084ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ce:	4798      	blx	r3
 80084d0:	3601      	adds	r6, #1
 80084d2:	e7f2      	b.n	80084ba <__libc_init_array+0x1e>
 80084d4:	0800c210 	.word	0x0800c210
 80084d8:	0800c210 	.word	0x0800c210
 80084dc:	0800c210 	.word	0x0800c210
 80084e0:	0800c214 	.word	0x0800c214

080084e4 <__retarget_lock_init_recursive>:
 80084e4:	4770      	bx	lr

080084e6 <__retarget_lock_acquire_recursive>:
 80084e6:	4770      	bx	lr

080084e8 <__retarget_lock_release_recursive>:
 80084e8:	4770      	bx	lr
	...

080084ec <nanf>:
 80084ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084f4 <nanf+0x8>
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	7fc00000 	.word	0x7fc00000

080084f8 <quorem>:
 80084f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	6903      	ldr	r3, [r0, #16]
 80084fe:	690c      	ldr	r4, [r1, #16]
 8008500:	42a3      	cmp	r3, r4
 8008502:	4607      	mov	r7, r0
 8008504:	db7e      	blt.n	8008604 <quorem+0x10c>
 8008506:	3c01      	subs	r4, #1
 8008508:	f101 0814 	add.w	r8, r1, #20
 800850c:	f100 0514 	add.w	r5, r0, #20
 8008510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800851a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800851e:	3301      	adds	r3, #1
 8008520:	429a      	cmp	r2, r3
 8008522:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008526:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800852a:	fbb2 f6f3 	udiv	r6, r2, r3
 800852e:	d331      	bcc.n	8008594 <quorem+0x9c>
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	4640      	mov	r0, r8
 8008536:	46ac      	mov	ip, r5
 8008538:	46f2      	mov	sl, lr
 800853a:	f850 2b04 	ldr.w	r2, [r0], #4
 800853e:	b293      	uxth	r3, r2
 8008540:	fb06 e303 	mla	r3, r6, r3, lr
 8008544:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008548:	0c1a      	lsrs	r2, r3, #16
 800854a:	b29b      	uxth	r3, r3
 800854c:	ebaa 0303 	sub.w	r3, sl, r3
 8008550:	f8dc a000 	ldr.w	sl, [ip]
 8008554:	fa13 f38a 	uxtah	r3, r3, sl
 8008558:	fb06 220e 	mla	r2, r6, lr, r2
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008564:	b292      	uxth	r2, r2
 8008566:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800856a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800856e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008572:	4581      	cmp	r9, r0
 8008574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008578:	f84c 3b04 	str.w	r3, [ip], #4
 800857c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008580:	d2db      	bcs.n	800853a <quorem+0x42>
 8008582:	f855 300b 	ldr.w	r3, [r5, fp]
 8008586:	b92b      	cbnz	r3, 8008594 <quorem+0x9c>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	3b04      	subs	r3, #4
 800858c:	429d      	cmp	r5, r3
 800858e:	461a      	mov	r2, r3
 8008590:	d32c      	bcc.n	80085ec <quorem+0xf4>
 8008592:	613c      	str	r4, [r7, #16]
 8008594:	4638      	mov	r0, r7
 8008596:	f001 f9ef 	bl	8009978 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	db22      	blt.n	80085e4 <quorem+0xec>
 800859e:	3601      	adds	r6, #1
 80085a0:	4629      	mov	r1, r5
 80085a2:	2000      	movs	r0, #0
 80085a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80085a8:	f8d1 c000 	ldr.w	ip, [r1]
 80085ac:	b293      	uxth	r3, r2
 80085ae:	1ac3      	subs	r3, r0, r3
 80085b0:	0c12      	lsrs	r2, r2, #16
 80085b2:	fa13 f38c 	uxtah	r3, r3, ip
 80085b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80085ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085be:	b29b      	uxth	r3, r3
 80085c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c4:	45c1      	cmp	r9, r8
 80085c6:	f841 3b04 	str.w	r3, [r1], #4
 80085ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085ce:	d2e9      	bcs.n	80085a4 <quorem+0xac>
 80085d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085d8:	b922      	cbnz	r2, 80085e4 <quorem+0xec>
 80085da:	3b04      	subs	r3, #4
 80085dc:	429d      	cmp	r5, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	d30a      	bcc.n	80085f8 <quorem+0x100>
 80085e2:	613c      	str	r4, [r7, #16]
 80085e4:	4630      	mov	r0, r6
 80085e6:	b003      	add	sp, #12
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	6812      	ldr	r2, [r2, #0]
 80085ee:	3b04      	subs	r3, #4
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	d1ce      	bne.n	8008592 <quorem+0x9a>
 80085f4:	3c01      	subs	r4, #1
 80085f6:	e7c9      	b.n	800858c <quorem+0x94>
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	3b04      	subs	r3, #4
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	d1f0      	bne.n	80085e2 <quorem+0xea>
 8008600:	3c01      	subs	r4, #1
 8008602:	e7eb      	b.n	80085dc <quorem+0xe4>
 8008604:	2000      	movs	r0, #0
 8008606:	e7ee      	b.n	80085e6 <quorem+0xee>

08008608 <_dtoa_r>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	ed2d 8b04 	vpush	{d8-d9}
 8008610:	69c5      	ldr	r5, [r0, #28]
 8008612:	b093      	sub	sp, #76	; 0x4c
 8008614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008618:	ec57 6b10 	vmov	r6, r7, d0
 800861c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008620:	9107      	str	r1, [sp, #28]
 8008622:	4604      	mov	r4, r0
 8008624:	920a      	str	r2, [sp, #40]	; 0x28
 8008626:	930d      	str	r3, [sp, #52]	; 0x34
 8008628:	b975      	cbnz	r5, 8008648 <_dtoa_r+0x40>
 800862a:	2010      	movs	r0, #16
 800862c:	f000 fe2a 	bl	8009284 <malloc>
 8008630:	4602      	mov	r2, r0
 8008632:	61e0      	str	r0, [r4, #28]
 8008634:	b920      	cbnz	r0, 8008640 <_dtoa_r+0x38>
 8008636:	4bae      	ldr	r3, [pc, #696]	; (80088f0 <_dtoa_r+0x2e8>)
 8008638:	21ef      	movs	r1, #239	; 0xef
 800863a:	48ae      	ldr	r0, [pc, #696]	; (80088f4 <_dtoa_r+0x2ec>)
 800863c:	f002 fc74 	bl	800af28 <__assert_func>
 8008640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008644:	6005      	str	r5, [r0, #0]
 8008646:	60c5      	str	r5, [r0, #12]
 8008648:	69e3      	ldr	r3, [r4, #28]
 800864a:	6819      	ldr	r1, [r3, #0]
 800864c:	b151      	cbz	r1, 8008664 <_dtoa_r+0x5c>
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	604a      	str	r2, [r1, #4]
 8008652:	2301      	movs	r3, #1
 8008654:	4093      	lsls	r3, r2
 8008656:	608b      	str	r3, [r1, #8]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 ff07 	bl	800946c <_Bfree>
 800865e:	69e3      	ldr	r3, [r4, #28]
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	1e3b      	subs	r3, r7, #0
 8008666:	bfbb      	ittet	lt
 8008668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800866c:	9303      	strlt	r3, [sp, #12]
 800866e:	2300      	movge	r3, #0
 8008670:	2201      	movlt	r2, #1
 8008672:	bfac      	ite	ge
 8008674:	f8c8 3000 	strge.w	r3, [r8]
 8008678:	f8c8 2000 	strlt.w	r2, [r8]
 800867c:	4b9e      	ldr	r3, [pc, #632]	; (80088f8 <_dtoa_r+0x2f0>)
 800867e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008682:	ea33 0308 	bics.w	r3, r3, r8
 8008686:	d11b      	bne.n	80086c0 <_dtoa_r+0xb8>
 8008688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800868a:	f242 730f 	movw	r3, #9999	; 0x270f
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008694:	4333      	orrs	r3, r6
 8008696:	f000 8593 	beq.w	80091c0 <_dtoa_r+0xbb8>
 800869a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800869c:	b963      	cbnz	r3, 80086b8 <_dtoa_r+0xb0>
 800869e:	4b97      	ldr	r3, [pc, #604]	; (80088fc <_dtoa_r+0x2f4>)
 80086a0:	e027      	b.n	80086f2 <_dtoa_r+0xea>
 80086a2:	4b97      	ldr	r3, [pc, #604]	; (8008900 <_dtoa_r+0x2f8>)
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	9800      	ldr	r0, [sp, #0]
 80086ae:	b013      	add	sp, #76	; 0x4c
 80086b0:	ecbd 8b04 	vpop	{d8-d9}
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	4b90      	ldr	r3, [pc, #576]	; (80088fc <_dtoa_r+0x2f4>)
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	3303      	adds	r3, #3
 80086be:	e7f3      	b.n	80086a8 <_dtoa_r+0xa0>
 80086c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086c4:	2200      	movs	r2, #0
 80086c6:	ec51 0b17 	vmov	r0, r1, d7
 80086ca:	eeb0 8a47 	vmov.f32	s16, s14
 80086ce:	eef0 8a67 	vmov.f32	s17, s15
 80086d2:	2300      	movs	r3, #0
 80086d4:	f7f8 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d8:	4681      	mov	r9, r0
 80086da:	b160      	cbz	r0, 80086f6 <_dtoa_r+0xee>
 80086dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086de:	2301      	movs	r3, #1
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8568 	beq.w	80091ba <_dtoa_r+0xbb2>
 80086ea:	4b86      	ldr	r3, [pc, #536]	; (8008904 <_dtoa_r+0x2fc>)
 80086ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	e7da      	b.n	80086ac <_dtoa_r+0xa4>
 80086f6:	aa10      	add	r2, sp, #64	; 0x40
 80086f8:	a911      	add	r1, sp, #68	; 0x44
 80086fa:	4620      	mov	r0, r4
 80086fc:	eeb0 0a48 	vmov.f32	s0, s16
 8008700:	eef0 0a68 	vmov.f32	s1, s17
 8008704:	f001 fa4e 	bl	8009ba4 <__d2b>
 8008708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800870c:	4682      	mov	sl, r0
 800870e:	2d00      	cmp	r5, #0
 8008710:	d07f      	beq.n	8008812 <_dtoa_r+0x20a>
 8008712:	ee18 3a90 	vmov	r3, s17
 8008716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800871a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800871e:	ec51 0b18 	vmov	r0, r1, d8
 8008722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800872a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800872e:	4619      	mov	r1, r3
 8008730:	2200      	movs	r2, #0
 8008732:	4b75      	ldr	r3, [pc, #468]	; (8008908 <_dtoa_r+0x300>)
 8008734:	f7f7 fda8 	bl	8000288 <__aeabi_dsub>
 8008738:	a367      	add	r3, pc, #412	; (adr r3, 80088d8 <_dtoa_r+0x2d0>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	a367      	add	r3, pc, #412	; (adr r3, 80088e0 <_dtoa_r+0x2d8>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fda0 	bl	800028c <__adddf3>
 800874c:	4606      	mov	r6, r0
 800874e:	4628      	mov	r0, r5
 8008750:	460f      	mov	r7, r1
 8008752:	f7f7 fee7 	bl	8000524 <__aeabi_i2d>
 8008756:	a364      	add	r3, pc, #400	; (adr r3, 80088e8 <_dtoa_r+0x2e0>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 ff4c 	bl	80005f8 <__aeabi_dmul>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4630      	mov	r0, r6
 8008766:	4639      	mov	r1, r7
 8008768:	f7f7 fd90 	bl	800028c <__adddf3>
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	f7f8 f9f2 	bl	8000b58 <__aeabi_d2iz>
 8008774:	2200      	movs	r2, #0
 8008776:	4683      	mov	fp, r0
 8008778:	2300      	movs	r3, #0
 800877a:	4630      	mov	r0, r6
 800877c:	4639      	mov	r1, r7
 800877e:	f7f8 f9ad 	bl	8000adc <__aeabi_dcmplt>
 8008782:	b148      	cbz	r0, 8008798 <_dtoa_r+0x190>
 8008784:	4658      	mov	r0, fp
 8008786:	f7f7 fecd 	bl	8000524 <__aeabi_i2d>
 800878a:	4632      	mov	r2, r6
 800878c:	463b      	mov	r3, r7
 800878e:	f7f8 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008792:	b908      	cbnz	r0, 8008798 <_dtoa_r+0x190>
 8008794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008798:	f1bb 0f16 	cmp.w	fp, #22
 800879c:	d857      	bhi.n	800884e <_dtoa_r+0x246>
 800879e:	4b5b      	ldr	r3, [pc, #364]	; (800890c <_dtoa_r+0x304>)
 80087a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	ec51 0b18 	vmov	r0, r1, d8
 80087ac:	f7f8 f996 	bl	8000adc <__aeabi_dcmplt>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d04e      	beq.n	8008852 <_dtoa_r+0x24a>
 80087b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087b8:	2300      	movs	r3, #0
 80087ba:	930c      	str	r3, [sp, #48]	; 0x30
 80087bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087be:	1b5b      	subs	r3, r3, r5
 80087c0:	1e5a      	subs	r2, r3, #1
 80087c2:	bf45      	ittet	mi
 80087c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80087c8:	9305      	strmi	r3, [sp, #20]
 80087ca:	2300      	movpl	r3, #0
 80087cc:	2300      	movmi	r3, #0
 80087ce:	9206      	str	r2, [sp, #24]
 80087d0:	bf54      	ite	pl
 80087d2:	9305      	strpl	r3, [sp, #20]
 80087d4:	9306      	strmi	r3, [sp, #24]
 80087d6:	f1bb 0f00 	cmp.w	fp, #0
 80087da:	db3c      	blt.n	8008856 <_dtoa_r+0x24e>
 80087dc:	9b06      	ldr	r3, [sp, #24]
 80087de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80087e2:	445b      	add	r3, fp
 80087e4:	9306      	str	r3, [sp, #24]
 80087e6:	2300      	movs	r3, #0
 80087e8:	9308      	str	r3, [sp, #32]
 80087ea:	9b07      	ldr	r3, [sp, #28]
 80087ec:	2b09      	cmp	r3, #9
 80087ee:	d868      	bhi.n	80088c2 <_dtoa_r+0x2ba>
 80087f0:	2b05      	cmp	r3, #5
 80087f2:	bfc4      	itt	gt
 80087f4:	3b04      	subgt	r3, #4
 80087f6:	9307      	strgt	r3, [sp, #28]
 80087f8:	9b07      	ldr	r3, [sp, #28]
 80087fa:	f1a3 0302 	sub.w	r3, r3, #2
 80087fe:	bfcc      	ite	gt
 8008800:	2500      	movgt	r5, #0
 8008802:	2501      	movle	r5, #1
 8008804:	2b03      	cmp	r3, #3
 8008806:	f200 8085 	bhi.w	8008914 <_dtoa_r+0x30c>
 800880a:	e8df f003 	tbb	[pc, r3]
 800880e:	3b2e      	.short	0x3b2e
 8008810:	5839      	.short	0x5839
 8008812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008816:	441d      	add	r5, r3
 8008818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800881c:	2b20      	cmp	r3, #32
 800881e:	bfc1      	itttt	gt
 8008820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008824:	fa08 f803 	lslgt.w	r8, r8, r3
 8008828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800882c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008830:	bfd6      	itet	le
 8008832:	f1c3 0320 	rsble	r3, r3, #32
 8008836:	ea48 0003 	orrgt.w	r0, r8, r3
 800883a:	fa06 f003 	lslle.w	r0, r6, r3
 800883e:	f7f7 fe61 	bl	8000504 <__aeabi_ui2d>
 8008842:	2201      	movs	r2, #1
 8008844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008848:	3d01      	subs	r5, #1
 800884a:	920e      	str	r2, [sp, #56]	; 0x38
 800884c:	e76f      	b.n	800872e <_dtoa_r+0x126>
 800884e:	2301      	movs	r3, #1
 8008850:	e7b3      	b.n	80087ba <_dtoa_r+0x1b2>
 8008852:	900c      	str	r0, [sp, #48]	; 0x30
 8008854:	e7b2      	b.n	80087bc <_dtoa_r+0x1b4>
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	eba3 030b 	sub.w	r3, r3, fp
 800885c:	9305      	str	r3, [sp, #20]
 800885e:	f1cb 0300 	rsb	r3, fp, #0
 8008862:	9308      	str	r3, [sp, #32]
 8008864:	2300      	movs	r3, #0
 8008866:	930b      	str	r3, [sp, #44]	; 0x2c
 8008868:	e7bf      	b.n	80087ea <_dtoa_r+0x1e2>
 800886a:	2300      	movs	r3, #0
 800886c:	9309      	str	r3, [sp, #36]	; 0x24
 800886e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008870:	2b00      	cmp	r3, #0
 8008872:	dc52      	bgt.n	800891a <_dtoa_r+0x312>
 8008874:	2301      	movs	r3, #1
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	461a      	mov	r2, r3
 800887c:	920a      	str	r2, [sp, #40]	; 0x28
 800887e:	e00b      	b.n	8008898 <_dtoa_r+0x290>
 8008880:	2301      	movs	r3, #1
 8008882:	e7f3      	b.n	800886c <_dtoa_r+0x264>
 8008884:	2300      	movs	r3, #0
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
 8008888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888a:	445b      	add	r3, fp
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	3301      	adds	r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	bfb8      	it	lt
 8008896:	2301      	movlt	r3, #1
 8008898:	69e0      	ldr	r0, [r4, #28]
 800889a:	2100      	movs	r1, #0
 800889c:	2204      	movs	r2, #4
 800889e:	f102 0614 	add.w	r6, r2, #20
 80088a2:	429e      	cmp	r6, r3
 80088a4:	d93d      	bls.n	8008922 <_dtoa_r+0x31a>
 80088a6:	6041      	str	r1, [r0, #4]
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fd9f 	bl	80093ec <_Balloc>
 80088ae:	9000      	str	r0, [sp, #0]
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d139      	bne.n	8008928 <_dtoa_r+0x320>
 80088b4:	4b16      	ldr	r3, [pc, #88]	; (8008910 <_dtoa_r+0x308>)
 80088b6:	4602      	mov	r2, r0
 80088b8:	f240 11af 	movw	r1, #431	; 0x1af
 80088bc:	e6bd      	b.n	800863a <_dtoa_r+0x32>
 80088be:	2301      	movs	r3, #1
 80088c0:	e7e1      	b.n	8008886 <_dtoa_r+0x27e>
 80088c2:	2501      	movs	r5, #1
 80088c4:	2300      	movs	r3, #0
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	9509      	str	r5, [sp, #36]	; 0x24
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295
 80088ce:	9301      	str	r3, [sp, #4]
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	2200      	movs	r2, #0
 80088d4:	2312      	movs	r3, #18
 80088d6:	e7d1      	b.n	800887c <_dtoa_r+0x274>
 80088d8:	636f4361 	.word	0x636f4361
 80088dc:	3fd287a7 	.word	0x3fd287a7
 80088e0:	8b60c8b3 	.word	0x8b60c8b3
 80088e4:	3fc68a28 	.word	0x3fc68a28
 80088e8:	509f79fb 	.word	0x509f79fb
 80088ec:	3fd34413 	.word	0x3fd34413
 80088f0:	0800be26 	.word	0x0800be26
 80088f4:	0800be3d 	.word	0x0800be3d
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800be22 	.word	0x0800be22
 8008900:	0800be19 	.word	0x0800be19
 8008904:	0800bdf1 	.word	0x0800bdf1
 8008908:	3ff80000 	.word	0x3ff80000
 800890c:	0800bf28 	.word	0x0800bf28
 8008910:	0800be95 	.word	0x0800be95
 8008914:	2301      	movs	r3, #1
 8008916:	9309      	str	r3, [sp, #36]	; 0x24
 8008918:	e7d7      	b.n	80088ca <_dtoa_r+0x2c2>
 800891a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	9304      	str	r3, [sp, #16]
 8008920:	e7ba      	b.n	8008898 <_dtoa_r+0x290>
 8008922:	3101      	adds	r1, #1
 8008924:	0052      	lsls	r2, r2, #1
 8008926:	e7ba      	b.n	800889e <_dtoa_r+0x296>
 8008928:	69e3      	ldr	r3, [r4, #28]
 800892a:	9a00      	ldr	r2, [sp, #0]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	9b04      	ldr	r3, [sp, #16]
 8008930:	2b0e      	cmp	r3, #14
 8008932:	f200 80a8 	bhi.w	8008a86 <_dtoa_r+0x47e>
 8008936:	2d00      	cmp	r5, #0
 8008938:	f000 80a5 	beq.w	8008a86 <_dtoa_r+0x47e>
 800893c:	f1bb 0f00 	cmp.w	fp, #0
 8008940:	dd38      	ble.n	80089b4 <_dtoa_r+0x3ac>
 8008942:	4bc0      	ldr	r3, [pc, #768]	; (8008c44 <_dtoa_r+0x63c>)
 8008944:	f00b 020f 	and.w	r2, fp, #15
 8008948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800894c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008950:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008954:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008958:	d019      	beq.n	800898e <_dtoa_r+0x386>
 800895a:	4bbb      	ldr	r3, [pc, #748]	; (8008c48 <_dtoa_r+0x640>)
 800895c:	ec51 0b18 	vmov	r0, r1, d8
 8008960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008964:	f7f7 ff72 	bl	800084c <__aeabi_ddiv>
 8008968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896c:	f008 080f 	and.w	r8, r8, #15
 8008970:	2503      	movs	r5, #3
 8008972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c48 <_dtoa_r+0x640>
 8008976:	f1b8 0f00 	cmp.w	r8, #0
 800897a:	d10a      	bne.n	8008992 <_dtoa_r+0x38a>
 800897c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008980:	4632      	mov	r2, r6
 8008982:	463b      	mov	r3, r7
 8008984:	f7f7 ff62 	bl	800084c <__aeabi_ddiv>
 8008988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800898c:	e02b      	b.n	80089e6 <_dtoa_r+0x3de>
 800898e:	2502      	movs	r5, #2
 8008990:	e7ef      	b.n	8008972 <_dtoa_r+0x36a>
 8008992:	f018 0f01 	tst.w	r8, #1
 8008996:	d008      	beq.n	80089aa <_dtoa_r+0x3a2>
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089a0:	f7f7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80089a4:	3501      	adds	r5, #1
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089ae:	f109 0908 	add.w	r9, r9, #8
 80089b2:	e7e0      	b.n	8008976 <_dtoa_r+0x36e>
 80089b4:	f000 809f 	beq.w	8008af6 <_dtoa_r+0x4ee>
 80089b8:	f1cb 0600 	rsb	r6, fp, #0
 80089bc:	4ba1      	ldr	r3, [pc, #644]	; (8008c44 <_dtoa_r+0x63c>)
 80089be:	4fa2      	ldr	r7, [pc, #648]	; (8008c48 <_dtoa_r+0x640>)
 80089c0:	f006 020f 	and.w	r2, r6, #15
 80089c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	ec51 0b18 	vmov	r0, r1, d8
 80089d0:	f7f7 fe12 	bl	80005f8 <__aeabi_dmul>
 80089d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d8:	1136      	asrs	r6, r6, #4
 80089da:	2300      	movs	r3, #0
 80089dc:	2502      	movs	r5, #2
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d17e      	bne.n	8008ae0 <_dtoa_r+0x4d8>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1d0      	bne.n	8008988 <_dtoa_r+0x380>
 80089e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8084 	beq.w	8008afa <_dtoa_r+0x4f2>
 80089f2:	4b96      	ldr	r3, [pc, #600]	; (8008c4c <_dtoa_r+0x644>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	4640      	mov	r0, r8
 80089f8:	4649      	mov	r1, r9
 80089fa:	f7f8 f86f 	bl	8000adc <__aeabi_dcmplt>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d07b      	beq.n	8008afa <_dtoa_r+0x4f2>
 8008a02:	9b04      	ldr	r3, [sp, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d078      	beq.n	8008afa <_dtoa_r+0x4f2>
 8008a08:	9b01      	ldr	r3, [sp, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dd39      	ble.n	8008a82 <_dtoa_r+0x47a>
 8008a0e:	4b90      	ldr	r3, [pc, #576]	; (8008c50 <_dtoa_r+0x648>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a1e:	9e01      	ldr	r6, [sp, #4]
 8008a20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a24:	3501      	adds	r5, #1
 8008a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f7f7 fd7a 	bl	8000524 <__aeabi_i2d>
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	f7f7 fde0 	bl	80005f8 <__aeabi_dmul>
 8008a38:	4b86      	ldr	r3, [pc, #536]	; (8008c54 <_dtoa_r+0x64c>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f7f7 fc26 	bl	800028c <__adddf3>
 8008a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	2e00      	cmp	r6, #0
 8008a4c:	d158      	bne.n	8008b00 <_dtoa_r+0x4f8>
 8008a4e:	4b82      	ldr	r3, [pc, #520]	; (8008c58 <_dtoa_r+0x650>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fc17 	bl	8000288 <__aeabi_dsub>
 8008a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a5e:	4680      	mov	r8, r0
 8008a60:	4689      	mov	r9, r1
 8008a62:	f7f8 f859 	bl	8000b18 <__aeabi_dcmpgt>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f040 8296 	bne.w	8008f98 <_dtoa_r+0x990>
 8008a6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a70:	4640      	mov	r0, r8
 8008a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a76:	4649      	mov	r1, r9
 8008a78:	f7f8 f830 	bl	8000adc <__aeabi_dcmplt>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f040 8289 	bne.w	8008f94 <_dtoa_r+0x98c>
 8008a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f2c0 814e 	blt.w	8008d2a <_dtoa_r+0x722>
 8008a8e:	f1bb 0f0e 	cmp.w	fp, #14
 8008a92:	f300 814a 	bgt.w	8008d2a <_dtoa_r+0x722>
 8008a96:	4b6b      	ldr	r3, [pc, #428]	; (8008c44 <_dtoa_r+0x63c>)
 8008a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f280 80dc 	bge.w	8008c60 <_dtoa_r+0x658>
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f300 80d8 	bgt.w	8008c60 <_dtoa_r+0x658>
 8008ab0:	f040 826f 	bne.w	8008f92 <_dtoa_r+0x98a>
 8008ab4:	4b68      	ldr	r3, [pc, #416]	; (8008c58 <_dtoa_r+0x650>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f7 fd9c 	bl	80005f8 <__aeabi_dmul>
 8008ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ac4:	f7f8 f81e 	bl	8000b04 <__aeabi_dcmpge>
 8008ac8:	9e04      	ldr	r6, [sp, #16]
 8008aca:	4637      	mov	r7, r6
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f040 8245 	bne.w	8008f5c <_dtoa_r+0x954>
 8008ad2:	9d00      	ldr	r5, [sp, #0]
 8008ad4:	2331      	movs	r3, #49	; 0x31
 8008ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8008ada:	f10b 0b01 	add.w	fp, fp, #1
 8008ade:	e241      	b.n	8008f64 <_dtoa_r+0x95c>
 8008ae0:	07f2      	lsls	r2, r6, #31
 8008ae2:	d505      	bpl.n	8008af0 <_dtoa_r+0x4e8>
 8008ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	3501      	adds	r5, #1
 8008aee:	2301      	movs	r3, #1
 8008af0:	1076      	asrs	r6, r6, #1
 8008af2:	3708      	adds	r7, #8
 8008af4:	e773      	b.n	80089de <_dtoa_r+0x3d6>
 8008af6:	2502      	movs	r5, #2
 8008af8:	e775      	b.n	80089e6 <_dtoa_r+0x3de>
 8008afa:	9e04      	ldr	r6, [sp, #16]
 8008afc:	465f      	mov	r7, fp
 8008afe:	e792      	b.n	8008a26 <_dtoa_r+0x41e>
 8008b00:	9900      	ldr	r1, [sp, #0]
 8008b02:	4b50      	ldr	r3, [pc, #320]	; (8008c44 <_dtoa_r+0x63c>)
 8008b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b08:	4431      	add	r1, r6
 8008b0a:	9102      	str	r1, [sp, #8]
 8008b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0e:	eeb0 9a47 	vmov.f32	s18, s14
 8008b12:	eef0 9a67 	vmov.f32	s19, s15
 8008b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b1e:	2900      	cmp	r1, #0
 8008b20:	d044      	beq.n	8008bac <_dtoa_r+0x5a4>
 8008b22:	494e      	ldr	r1, [pc, #312]	; (8008c5c <_dtoa_r+0x654>)
 8008b24:	2000      	movs	r0, #0
 8008b26:	f7f7 fe91 	bl	800084c <__aeabi_ddiv>
 8008b2a:	ec53 2b19 	vmov	r2, r3, d9
 8008b2e:	f7f7 fbab 	bl	8000288 <__aeabi_dsub>
 8008b32:	9d00      	ldr	r5, [sp, #0]
 8008b34:	ec41 0b19 	vmov	d9, r0, r1
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	f7f8 f80c 	bl	8000b58 <__aeabi_d2iz>
 8008b40:	4606      	mov	r6, r0
 8008b42:	f7f7 fcef 	bl	8000524 <__aeabi_i2d>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fb9b 	bl	8000288 <__aeabi_dsub>
 8008b52:	3630      	adds	r6, #48	; 0x30
 8008b54:	f805 6b01 	strb.w	r6, [r5], #1
 8008b58:	ec53 2b19 	vmov	r2, r3, d9
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4689      	mov	r9, r1
 8008b60:	f7f7 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d164      	bne.n	8008c32 <_dtoa_r+0x62a>
 8008b68:	4642      	mov	r2, r8
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	4937      	ldr	r1, [pc, #220]	; (8008c4c <_dtoa_r+0x644>)
 8008b6e:	2000      	movs	r0, #0
 8008b70:	f7f7 fb8a 	bl	8000288 <__aeabi_dsub>
 8008b74:	ec53 2b19 	vmov	r2, r3, d9
 8008b78:	f7f7 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f040 80b6 	bne.w	8008cee <_dtoa_r+0x6e6>
 8008b82:	9b02      	ldr	r3, [sp, #8]
 8008b84:	429d      	cmp	r5, r3
 8008b86:	f43f af7c 	beq.w	8008a82 <_dtoa_r+0x47a>
 8008b8a:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <_dtoa_r+0x648>)
 8008b8c:	ec51 0b19 	vmov	r0, r1, d9
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7f7 fd31 	bl	80005f8 <__aeabi_dmul>
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <_dtoa_r+0x648>)
 8008b98:	ec41 0b19 	vmov	d9, r0, r1
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4689      	mov	r9, r1
 8008baa:	e7c5      	b.n	8008b38 <_dtoa_r+0x530>
 8008bac:	ec51 0b17 	vmov	r0, r1, d7
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	9b02      	ldr	r3, [sp, #8]
 8008bb6:	9d00      	ldr	r5, [sp, #0]
 8008bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bba:	ec41 0b19 	vmov	d9, r0, r1
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	f7f7 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	f7f7 fcac 	bl	8000524 <__aeabi_i2d>
 8008bcc:	3630      	adds	r6, #48	; 0x30
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 fb57 	bl	8000288 <__aeabi_dsub>
 8008bda:	f805 6b01 	strb.w	r6, [r5], #1
 8008bde:	9b02      	ldr	r3, [sp, #8]
 8008be0:	429d      	cmp	r5, r3
 8008be2:	4680      	mov	r8, r0
 8008be4:	4689      	mov	r9, r1
 8008be6:	f04f 0200 	mov.w	r2, #0
 8008bea:	d124      	bne.n	8008c36 <_dtoa_r+0x62e>
 8008bec:	4b1b      	ldr	r3, [pc, #108]	; (8008c5c <_dtoa_r+0x654>)
 8008bee:	ec51 0b19 	vmov	r0, r1, d9
 8008bf2:	f7f7 fb4b 	bl	800028c <__adddf3>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	f7f7 ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d173      	bne.n	8008cee <_dtoa_r+0x6e6>
 8008c06:	ec53 2b19 	vmov	r2, r3, d9
 8008c0a:	4914      	ldr	r1, [pc, #80]	; (8008c5c <_dtoa_r+0x654>)
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f7f7 fb3b 	bl	8000288 <__aeabi_dsub>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4640      	mov	r0, r8
 8008c18:	4649      	mov	r1, r9
 8008c1a:	f7f7 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f af2f 	beq.w	8008a82 <_dtoa_r+0x47a>
 8008c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c26:	1e6b      	subs	r3, r5, #1
 8008c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c2e:	2b30      	cmp	r3, #48	; 0x30
 8008c30:	d0f8      	beq.n	8008c24 <_dtoa_r+0x61c>
 8008c32:	46bb      	mov	fp, r7
 8008c34:	e04a      	b.n	8008ccc <_dtoa_r+0x6c4>
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <_dtoa_r+0x648>)
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	4689      	mov	r9, r1
 8008c40:	e7bd      	b.n	8008bbe <_dtoa_r+0x5b6>
 8008c42:	bf00      	nop
 8008c44:	0800bf28 	.word	0x0800bf28
 8008c48:	0800bf00 	.word	0x0800bf00
 8008c4c:	3ff00000 	.word	0x3ff00000
 8008c50:	40240000 	.word	0x40240000
 8008c54:	401c0000 	.word	0x401c0000
 8008c58:	40140000 	.word	0x40140000
 8008c5c:	3fe00000 	.word	0x3fe00000
 8008c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c64:	9d00      	ldr	r5, [sp, #0]
 8008c66:	4642      	mov	r2, r8
 8008c68:	464b      	mov	r3, r9
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	f7f7 fded 	bl	800084c <__aeabi_ddiv>
 8008c72:	f7f7 ff71 	bl	8000b58 <__aeabi_d2iz>
 8008c76:	9001      	str	r0, [sp, #4]
 8008c78:	f7f7 fc54 	bl	8000524 <__aeabi_i2d>
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	464b      	mov	r3, r9
 8008c80:	f7f7 fcba 	bl	80005f8 <__aeabi_dmul>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 fafc 	bl	8000288 <__aeabi_dsub>
 8008c90:	9e01      	ldr	r6, [sp, #4]
 8008c92:	9f04      	ldr	r7, [sp, #16]
 8008c94:	3630      	adds	r6, #48	; 0x30
 8008c96:	f805 6b01 	strb.w	r6, [r5], #1
 8008c9a:	9e00      	ldr	r6, [sp, #0]
 8008c9c:	1bae      	subs	r6, r5, r6
 8008c9e:	42b7      	cmp	r7, r6
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	d134      	bne.n	8008d10 <_dtoa_r+0x708>
 8008ca6:	f7f7 faf1 	bl	800028c <__adddf3>
 8008caa:	4642      	mov	r2, r8
 8008cac:	464b      	mov	r3, r9
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7f7 ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8008cb6:	b9c8      	cbnz	r0, 8008cec <_dtoa_r+0x6e4>
 8008cb8:	4642      	mov	r2, r8
 8008cba:	464b      	mov	r3, r9
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	f7f7 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cc4:	b110      	cbz	r0, 8008ccc <_dtoa_r+0x6c4>
 8008cc6:	9b01      	ldr	r3, [sp, #4]
 8008cc8:	07db      	lsls	r3, r3, #31
 8008cca:	d40f      	bmi.n	8008cec <_dtoa_r+0x6e4>
 8008ccc:	4651      	mov	r1, sl
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fbcc 	bl	800946c <_Bfree>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cd8:	702b      	strb	r3, [r5, #0]
 8008cda:	f10b 0301 	add.w	r3, fp, #1
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f43f ace2 	beq.w	80086ac <_dtoa_r+0xa4>
 8008ce8:	601d      	str	r5, [r3, #0]
 8008cea:	e4df      	b.n	80086ac <_dtoa_r+0xa4>
 8008cec:	465f      	mov	r7, fp
 8008cee:	462b      	mov	r3, r5
 8008cf0:	461d      	mov	r5, r3
 8008cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf6:	2a39      	cmp	r2, #57	; 0x39
 8008cf8:	d106      	bne.n	8008d08 <_dtoa_r+0x700>
 8008cfa:	9a00      	ldr	r2, [sp, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d1f7      	bne.n	8008cf0 <_dtoa_r+0x6e8>
 8008d00:	9900      	ldr	r1, [sp, #0]
 8008d02:	2230      	movs	r2, #48	; 0x30
 8008d04:	3701      	adds	r7, #1
 8008d06:	700a      	strb	r2, [r1, #0]
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
 8008d0e:	e790      	b.n	8008c32 <_dtoa_r+0x62a>
 8008d10:	4ba3      	ldr	r3, [pc, #652]	; (8008fa0 <_dtoa_r+0x998>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	f7f7 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d09e      	beq.n	8008c66 <_dtoa_r+0x65e>
 8008d28:	e7d0      	b.n	8008ccc <_dtoa_r+0x6c4>
 8008d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d2c:	2a00      	cmp	r2, #0
 8008d2e:	f000 80ca 	beq.w	8008ec6 <_dtoa_r+0x8be>
 8008d32:	9a07      	ldr	r2, [sp, #28]
 8008d34:	2a01      	cmp	r2, #1
 8008d36:	f300 80ad 	bgt.w	8008e94 <_dtoa_r+0x88c>
 8008d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	f000 80a5 	beq.w	8008e8c <_dtoa_r+0x884>
 8008d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d46:	9e08      	ldr	r6, [sp, #32]
 8008d48:	9d05      	ldr	r5, [sp, #20]
 8008d4a:	9a05      	ldr	r2, [sp, #20]
 8008d4c:	441a      	add	r2, r3
 8008d4e:	9205      	str	r2, [sp, #20]
 8008d50:	9a06      	ldr	r2, [sp, #24]
 8008d52:	2101      	movs	r1, #1
 8008d54:	441a      	add	r2, r3
 8008d56:	4620      	mov	r0, r4
 8008d58:	9206      	str	r2, [sp, #24]
 8008d5a:	f000 fc87 	bl	800966c <__i2b>
 8008d5e:	4607      	mov	r7, r0
 8008d60:	b165      	cbz	r5, 8008d7c <_dtoa_r+0x774>
 8008d62:	9b06      	ldr	r3, [sp, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dd09      	ble.n	8008d7c <_dtoa_r+0x774>
 8008d68:	42ab      	cmp	r3, r5
 8008d6a:	9a05      	ldr	r2, [sp, #20]
 8008d6c:	bfa8      	it	ge
 8008d6e:	462b      	movge	r3, r5
 8008d70:	1ad2      	subs	r2, r2, r3
 8008d72:	9205      	str	r2, [sp, #20]
 8008d74:	9a06      	ldr	r2, [sp, #24]
 8008d76:	1aed      	subs	r5, r5, r3
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	9306      	str	r3, [sp, #24]
 8008d7c:	9b08      	ldr	r3, [sp, #32]
 8008d7e:	b1f3      	cbz	r3, 8008dbe <_dtoa_r+0x7b6>
 8008d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a3 	beq.w	8008ece <_dtoa_r+0x8c6>
 8008d88:	2e00      	cmp	r6, #0
 8008d8a:	dd10      	ble.n	8008dae <_dtoa_r+0x7a6>
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4632      	mov	r2, r6
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fd2b 	bl	80097ec <__pow5mult>
 8008d96:	4652      	mov	r2, sl
 8008d98:	4601      	mov	r1, r0
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fc7b 	bl	8009698 <__multiply>
 8008da2:	4651      	mov	r1, sl
 8008da4:	4680      	mov	r8, r0
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fb60 	bl	800946c <_Bfree>
 8008dac:	46c2      	mov	sl, r8
 8008dae:	9b08      	ldr	r3, [sp, #32]
 8008db0:	1b9a      	subs	r2, r3, r6
 8008db2:	d004      	beq.n	8008dbe <_dtoa_r+0x7b6>
 8008db4:	4651      	mov	r1, sl
 8008db6:	4620      	mov	r0, r4
 8008db8:	f000 fd18 	bl	80097ec <__pow5mult>
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f000 fc53 	bl	800966c <__i2b>
 8008dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	4606      	mov	r6, r0
 8008dcc:	f340 8081 	ble.w	8008ed2 <_dtoa_r+0x8ca>
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fd09 	bl	80097ec <__pow5mult>
 8008dda:	9b07      	ldr	r3, [sp, #28]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	4606      	mov	r6, r0
 8008de0:	dd7a      	ble.n	8008ed8 <_dtoa_r+0x8d0>
 8008de2:	f04f 0800 	mov.w	r8, #0
 8008de6:	6933      	ldr	r3, [r6, #16]
 8008de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dec:	6918      	ldr	r0, [r3, #16]
 8008dee:	f000 fbef 	bl	80095d0 <__hi0bits>
 8008df2:	f1c0 0020 	rsb	r0, r0, #32
 8008df6:	9b06      	ldr	r3, [sp, #24]
 8008df8:	4418      	add	r0, r3
 8008dfa:	f010 001f 	ands.w	r0, r0, #31
 8008dfe:	f000 8094 	beq.w	8008f2a <_dtoa_r+0x922>
 8008e02:	f1c0 0320 	rsb	r3, r0, #32
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	f340 8085 	ble.w	8008f16 <_dtoa_r+0x90e>
 8008e0c:	9b05      	ldr	r3, [sp, #20]
 8008e0e:	f1c0 001c 	rsb	r0, r0, #28
 8008e12:	4403      	add	r3, r0
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	9b06      	ldr	r3, [sp, #24]
 8008e18:	4403      	add	r3, r0
 8008e1a:	4405      	add	r5, r0
 8008e1c:	9306      	str	r3, [sp, #24]
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dd05      	ble.n	8008e30 <_dtoa_r+0x828>
 8008e24:	4651      	mov	r1, sl
 8008e26:	461a      	mov	r2, r3
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 fd39 	bl	80098a0 <__lshift>
 8008e2e:	4682      	mov	sl, r0
 8008e30:	9b06      	ldr	r3, [sp, #24]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd05      	ble.n	8008e42 <_dtoa_r+0x83a>
 8008e36:	4631      	mov	r1, r6
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fd30 	bl	80098a0 <__lshift>
 8008e40:	4606      	mov	r6, r0
 8008e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d072      	beq.n	8008f2e <_dtoa_r+0x926>
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	f000 fd94 	bl	8009978 <__mcmp>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	da6c      	bge.n	8008f2e <_dtoa_r+0x926>
 8008e54:	2300      	movs	r3, #0
 8008e56:	4651      	mov	r1, sl
 8008e58:	220a      	movs	r2, #10
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fb28 	bl	80094b0 <__multadd>
 8008e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e66:	4682      	mov	sl, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 81b0 	beq.w	80091ce <_dtoa_r+0xbc6>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4639      	mov	r1, r7
 8008e72:	220a      	movs	r2, #10
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 fb1b 	bl	80094b0 <__multadd>
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	4607      	mov	r7, r0
 8008e80:	f300 8096 	bgt.w	8008fb0 <_dtoa_r+0x9a8>
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	dc59      	bgt.n	8008f3e <_dtoa_r+0x936>
 8008e8a:	e091      	b.n	8008fb0 <_dtoa_r+0x9a8>
 8008e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e92:	e758      	b.n	8008d46 <_dtoa_r+0x73e>
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	1e5e      	subs	r6, r3, #1
 8008e98:	9b08      	ldr	r3, [sp, #32]
 8008e9a:	42b3      	cmp	r3, r6
 8008e9c:	bfbf      	itttt	lt
 8008e9e:	9b08      	ldrlt	r3, [sp, #32]
 8008ea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008ea2:	9608      	strlt	r6, [sp, #32]
 8008ea4:	1af3      	sublt	r3, r6, r3
 8008ea6:	bfb4      	ite	lt
 8008ea8:	18d2      	addlt	r2, r2, r3
 8008eaa:	1b9e      	subge	r6, r3, r6
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	bfbc      	itt	lt
 8008eb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008eb2:	2600      	movlt	r6, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bfb7      	itett	lt
 8008eb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008ebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ec0:	1a9d      	sublt	r5, r3, r2
 8008ec2:	2300      	movlt	r3, #0
 8008ec4:	e741      	b.n	8008d4a <_dtoa_r+0x742>
 8008ec6:	9e08      	ldr	r6, [sp, #32]
 8008ec8:	9d05      	ldr	r5, [sp, #20]
 8008eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ecc:	e748      	b.n	8008d60 <_dtoa_r+0x758>
 8008ece:	9a08      	ldr	r2, [sp, #32]
 8008ed0:	e770      	b.n	8008db4 <_dtoa_r+0x7ac>
 8008ed2:	9b07      	ldr	r3, [sp, #28]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	dc19      	bgt.n	8008f0c <_dtoa_r+0x904>
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	b9bb      	cbnz	r3, 8008f0c <_dtoa_r+0x904>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee2:	b99b      	cbnz	r3, 8008f0c <_dtoa_r+0x904>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eea:	0d1b      	lsrs	r3, r3, #20
 8008eec:	051b      	lsls	r3, r3, #20
 8008eee:	b183      	cbz	r3, 8008f12 <_dtoa_r+0x90a>
 8008ef0:	9b05      	ldr	r3, [sp, #20]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	9b06      	ldr	r3, [sp, #24]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	9306      	str	r3, [sp, #24]
 8008efc:	f04f 0801 	mov.w	r8, #1
 8008f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f47f af6f 	bne.w	8008de6 <_dtoa_r+0x7de>
 8008f08:	2001      	movs	r0, #1
 8008f0a:	e774      	b.n	8008df6 <_dtoa_r+0x7ee>
 8008f0c:	f04f 0800 	mov.w	r8, #0
 8008f10:	e7f6      	b.n	8008f00 <_dtoa_r+0x8f8>
 8008f12:	4698      	mov	r8, r3
 8008f14:	e7f4      	b.n	8008f00 <_dtoa_r+0x8f8>
 8008f16:	d082      	beq.n	8008e1e <_dtoa_r+0x816>
 8008f18:	9a05      	ldr	r2, [sp, #20]
 8008f1a:	331c      	adds	r3, #28
 8008f1c:	441a      	add	r2, r3
 8008f1e:	9205      	str	r2, [sp, #20]
 8008f20:	9a06      	ldr	r2, [sp, #24]
 8008f22:	441a      	add	r2, r3
 8008f24:	441d      	add	r5, r3
 8008f26:	9206      	str	r2, [sp, #24]
 8008f28:	e779      	b.n	8008e1e <_dtoa_r+0x816>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	e7f4      	b.n	8008f18 <_dtoa_r+0x910>
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dc37      	bgt.n	8008fa4 <_dtoa_r+0x99c>
 8008f34:	9b07      	ldr	r3, [sp, #28]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	dd34      	ble.n	8008fa4 <_dtoa_r+0x99c>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	b963      	cbnz	r3, 8008f5c <_dtoa_r+0x954>
 8008f42:	4631      	mov	r1, r6
 8008f44:	2205      	movs	r2, #5
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fab2 	bl	80094b0 <__multadd>
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4606      	mov	r6, r0
 8008f50:	4650      	mov	r0, sl
 8008f52:	f000 fd11 	bl	8009978 <__mcmp>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f73f adbb 	bgt.w	8008ad2 <_dtoa_r+0x4ca>
 8008f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5e:	9d00      	ldr	r5, [sp, #0]
 8008f60:	ea6f 0b03 	mvn.w	fp, r3
 8008f64:	f04f 0800 	mov.w	r8, #0
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fa7e 	bl	800946c <_Bfree>
 8008f70:	2f00      	cmp	r7, #0
 8008f72:	f43f aeab 	beq.w	8008ccc <_dtoa_r+0x6c4>
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	d005      	beq.n	8008f88 <_dtoa_r+0x980>
 8008f7c:	45b8      	cmp	r8, r7
 8008f7e:	d003      	beq.n	8008f88 <_dtoa_r+0x980>
 8008f80:	4641      	mov	r1, r8
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fa72 	bl	800946c <_Bfree>
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fa6e 	bl	800946c <_Bfree>
 8008f90:	e69c      	b.n	8008ccc <_dtoa_r+0x6c4>
 8008f92:	2600      	movs	r6, #0
 8008f94:	4637      	mov	r7, r6
 8008f96:	e7e1      	b.n	8008f5c <_dtoa_r+0x954>
 8008f98:	46bb      	mov	fp, r7
 8008f9a:	4637      	mov	r7, r6
 8008f9c:	e599      	b.n	8008ad2 <_dtoa_r+0x4ca>
 8008f9e:	bf00      	nop
 8008fa0:	40240000 	.word	0x40240000
 8008fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80c8 	beq.w	800913c <_dtoa_r+0xb34>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	dd05      	ble.n	8008fc0 <_dtoa_r+0x9b8>
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 fc71 	bl	80098a0 <__lshift>
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	f1b8 0f00 	cmp.w	r8, #0
 8008fc4:	d05b      	beq.n	800907e <_dtoa_r+0xa76>
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fa0f 	bl	80093ec <_Balloc>
 8008fce:	4605      	mov	r5, r0
 8008fd0:	b928      	cbnz	r0, 8008fde <_dtoa_r+0x9d6>
 8008fd2:	4b83      	ldr	r3, [pc, #524]	; (80091e0 <_dtoa_r+0xbd8>)
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008fda:	f7ff bb2e 	b.w	800863a <_dtoa_r+0x32>
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	3202      	adds	r2, #2
 8008fe2:	0092      	lsls	r2, r2, #2
 8008fe4:	f107 010c 	add.w	r1, r7, #12
 8008fe8:	300c      	adds	r0, #12
 8008fea:	f001 ff85 	bl	800aef8 <memcpy>
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 fc54 	bl	80098a0 <__lshift>
 8008ff8:	9b00      	ldr	r3, [sp, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	9304      	str	r3, [sp, #16]
 8008ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009002:	4413      	add	r3, r2
 8009004:	9308      	str	r3, [sp, #32]
 8009006:	9b02      	ldr	r3, [sp, #8]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	46b8      	mov	r8, r7
 800900e:	9306      	str	r3, [sp, #24]
 8009010:	4607      	mov	r7, r0
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	4631      	mov	r1, r6
 8009016:	3b01      	subs	r3, #1
 8009018:	4650      	mov	r0, sl
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	f7ff fa6c 	bl	80084f8 <quorem>
 8009020:	4641      	mov	r1, r8
 8009022:	9002      	str	r0, [sp, #8]
 8009024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009028:	4650      	mov	r0, sl
 800902a:	f000 fca5 	bl	8009978 <__mcmp>
 800902e:	463a      	mov	r2, r7
 8009030:	9005      	str	r0, [sp, #20]
 8009032:	4631      	mov	r1, r6
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fcbb 	bl	80099b0 <__mdiff>
 800903a:	68c2      	ldr	r2, [r0, #12]
 800903c:	4605      	mov	r5, r0
 800903e:	bb02      	cbnz	r2, 8009082 <_dtoa_r+0xa7a>
 8009040:	4601      	mov	r1, r0
 8009042:	4650      	mov	r0, sl
 8009044:	f000 fc98 	bl	8009978 <__mcmp>
 8009048:	4602      	mov	r2, r0
 800904a:	4629      	mov	r1, r5
 800904c:	4620      	mov	r0, r4
 800904e:	9209      	str	r2, [sp, #36]	; 0x24
 8009050:	f000 fa0c 	bl	800946c <_Bfree>
 8009054:	9b07      	ldr	r3, [sp, #28]
 8009056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009058:	9d04      	ldr	r5, [sp, #16]
 800905a:	ea43 0102 	orr.w	r1, r3, r2
 800905e:	9b06      	ldr	r3, [sp, #24]
 8009060:	4319      	orrs	r1, r3
 8009062:	d110      	bne.n	8009086 <_dtoa_r+0xa7e>
 8009064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009068:	d029      	beq.n	80090be <_dtoa_r+0xab6>
 800906a:	9b05      	ldr	r3, [sp, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd02      	ble.n	8009076 <_dtoa_r+0xa6e>
 8009070:	9b02      	ldr	r3, [sp, #8]
 8009072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	f883 9000 	strb.w	r9, [r3]
 800907c:	e774      	b.n	8008f68 <_dtoa_r+0x960>
 800907e:	4638      	mov	r0, r7
 8009080:	e7ba      	b.n	8008ff8 <_dtoa_r+0x9f0>
 8009082:	2201      	movs	r2, #1
 8009084:	e7e1      	b.n	800904a <_dtoa_r+0xa42>
 8009086:	9b05      	ldr	r3, [sp, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	db04      	blt.n	8009096 <_dtoa_r+0xa8e>
 800908c:	9907      	ldr	r1, [sp, #28]
 800908e:	430b      	orrs	r3, r1
 8009090:	9906      	ldr	r1, [sp, #24]
 8009092:	430b      	orrs	r3, r1
 8009094:	d120      	bne.n	80090d8 <_dtoa_r+0xad0>
 8009096:	2a00      	cmp	r2, #0
 8009098:	dded      	ble.n	8009076 <_dtoa_r+0xa6e>
 800909a:	4651      	mov	r1, sl
 800909c:	2201      	movs	r2, #1
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 fbfe 	bl	80098a0 <__lshift>
 80090a4:	4631      	mov	r1, r6
 80090a6:	4682      	mov	sl, r0
 80090a8:	f000 fc66 	bl	8009978 <__mcmp>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	dc03      	bgt.n	80090b8 <_dtoa_r+0xab0>
 80090b0:	d1e1      	bne.n	8009076 <_dtoa_r+0xa6e>
 80090b2:	f019 0f01 	tst.w	r9, #1
 80090b6:	d0de      	beq.n	8009076 <_dtoa_r+0xa6e>
 80090b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090bc:	d1d8      	bne.n	8009070 <_dtoa_r+0xa68>
 80090be:	9a01      	ldr	r2, [sp, #4]
 80090c0:	2339      	movs	r3, #57	; 0x39
 80090c2:	7013      	strb	r3, [r2, #0]
 80090c4:	462b      	mov	r3, r5
 80090c6:	461d      	mov	r5, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090ce:	2a39      	cmp	r2, #57	; 0x39
 80090d0:	d06c      	beq.n	80091ac <_dtoa_r+0xba4>
 80090d2:	3201      	adds	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	e747      	b.n	8008f68 <_dtoa_r+0x960>
 80090d8:	2a00      	cmp	r2, #0
 80090da:	dd07      	ble.n	80090ec <_dtoa_r+0xae4>
 80090dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090e0:	d0ed      	beq.n	80090be <_dtoa_r+0xab6>
 80090e2:	9a01      	ldr	r2, [sp, #4]
 80090e4:	f109 0301 	add.w	r3, r9, #1
 80090e8:	7013      	strb	r3, [r2, #0]
 80090ea:	e73d      	b.n	8008f68 <_dtoa_r+0x960>
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	9a08      	ldr	r2, [sp, #32]
 80090f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d043      	beq.n	8009180 <_dtoa_r+0xb78>
 80090f8:	4651      	mov	r1, sl
 80090fa:	2300      	movs	r3, #0
 80090fc:	220a      	movs	r2, #10
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f9d6 	bl	80094b0 <__multadd>
 8009104:	45b8      	cmp	r8, r7
 8009106:	4682      	mov	sl, r0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	f04f 020a 	mov.w	r2, #10
 8009110:	4641      	mov	r1, r8
 8009112:	4620      	mov	r0, r4
 8009114:	d107      	bne.n	8009126 <_dtoa_r+0xb1e>
 8009116:	f000 f9cb 	bl	80094b0 <__multadd>
 800911a:	4680      	mov	r8, r0
 800911c:	4607      	mov	r7, r0
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	3301      	adds	r3, #1
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	e775      	b.n	8009012 <_dtoa_r+0xa0a>
 8009126:	f000 f9c3 	bl	80094b0 <__multadd>
 800912a:	4639      	mov	r1, r7
 800912c:	4680      	mov	r8, r0
 800912e:	2300      	movs	r3, #0
 8009130:	220a      	movs	r2, #10
 8009132:	4620      	mov	r0, r4
 8009134:	f000 f9bc 	bl	80094b0 <__multadd>
 8009138:	4607      	mov	r7, r0
 800913a:	e7f0      	b.n	800911e <_dtoa_r+0xb16>
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	9d00      	ldr	r5, [sp, #0]
 8009142:	4631      	mov	r1, r6
 8009144:	4650      	mov	r0, sl
 8009146:	f7ff f9d7 	bl	80084f8 <quorem>
 800914a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	f805 9b01 	strb.w	r9, [r5], #1
 8009154:	1aea      	subs	r2, r5, r3
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	4293      	cmp	r3, r2
 800915a:	dd07      	ble.n	800916c <_dtoa_r+0xb64>
 800915c:	4651      	mov	r1, sl
 800915e:	2300      	movs	r3, #0
 8009160:	220a      	movs	r2, #10
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f9a4 	bl	80094b0 <__multadd>
 8009168:	4682      	mov	sl, r0
 800916a:	e7ea      	b.n	8009142 <_dtoa_r+0xb3a>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfc8      	it	gt
 8009172:	461d      	movgt	r5, r3
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	bfd8      	it	le
 8009178:	2501      	movle	r5, #1
 800917a:	441d      	add	r5, r3
 800917c:	f04f 0800 	mov.w	r8, #0
 8009180:	4651      	mov	r1, sl
 8009182:	2201      	movs	r2, #1
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fb8b 	bl	80098a0 <__lshift>
 800918a:	4631      	mov	r1, r6
 800918c:	4682      	mov	sl, r0
 800918e:	f000 fbf3 	bl	8009978 <__mcmp>
 8009192:	2800      	cmp	r0, #0
 8009194:	dc96      	bgt.n	80090c4 <_dtoa_r+0xabc>
 8009196:	d102      	bne.n	800919e <_dtoa_r+0xb96>
 8009198:	f019 0f01 	tst.w	r9, #1
 800919c:	d192      	bne.n	80090c4 <_dtoa_r+0xabc>
 800919e:	462b      	mov	r3, r5
 80091a0:	461d      	mov	r5, r3
 80091a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a6:	2a30      	cmp	r2, #48	; 0x30
 80091a8:	d0fa      	beq.n	80091a0 <_dtoa_r+0xb98>
 80091aa:	e6dd      	b.n	8008f68 <_dtoa_r+0x960>
 80091ac:	9a00      	ldr	r2, [sp, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d189      	bne.n	80090c6 <_dtoa_r+0xabe>
 80091b2:	f10b 0b01 	add.w	fp, fp, #1
 80091b6:	2331      	movs	r3, #49	; 0x31
 80091b8:	e796      	b.n	80090e8 <_dtoa_r+0xae0>
 80091ba:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <_dtoa_r+0xbdc>)
 80091bc:	f7ff ba99 	b.w	80086f2 <_dtoa_r+0xea>
 80091c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f47f aa6d 	bne.w	80086a2 <_dtoa_r+0x9a>
 80091c8:	4b07      	ldr	r3, [pc, #28]	; (80091e8 <_dtoa_r+0xbe0>)
 80091ca:	f7ff ba92 	b.w	80086f2 <_dtoa_r+0xea>
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dcb5      	bgt.n	8009140 <_dtoa_r+0xb38>
 80091d4:	9b07      	ldr	r3, [sp, #28]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	f73f aeb1 	bgt.w	8008f3e <_dtoa_r+0x936>
 80091dc:	e7b0      	b.n	8009140 <_dtoa_r+0xb38>
 80091de:	bf00      	nop
 80091e0:	0800be95 	.word	0x0800be95
 80091e4:	0800bdf0 	.word	0x0800bdf0
 80091e8:	0800be19 	.word	0x0800be19

080091ec <_free_r>:
 80091ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ee:	2900      	cmp	r1, #0
 80091f0:	d044      	beq.n	800927c <_free_r+0x90>
 80091f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f6:	9001      	str	r0, [sp, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f1a1 0404 	sub.w	r4, r1, #4
 80091fe:	bfb8      	it	lt
 8009200:	18e4      	addlt	r4, r4, r3
 8009202:	f000 f8e7 	bl	80093d4 <__malloc_lock>
 8009206:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <_free_r+0x94>)
 8009208:	9801      	ldr	r0, [sp, #4]
 800920a:	6813      	ldr	r3, [r2, #0]
 800920c:	b933      	cbnz	r3, 800921c <_free_r+0x30>
 800920e:	6063      	str	r3, [r4, #4]
 8009210:	6014      	str	r4, [r2, #0]
 8009212:	b003      	add	sp, #12
 8009214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009218:	f000 b8e2 	b.w	80093e0 <__malloc_unlock>
 800921c:	42a3      	cmp	r3, r4
 800921e:	d908      	bls.n	8009232 <_free_r+0x46>
 8009220:	6825      	ldr	r5, [r4, #0]
 8009222:	1961      	adds	r1, r4, r5
 8009224:	428b      	cmp	r3, r1
 8009226:	bf01      	itttt	eq
 8009228:	6819      	ldreq	r1, [r3, #0]
 800922a:	685b      	ldreq	r3, [r3, #4]
 800922c:	1949      	addeq	r1, r1, r5
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	e7ed      	b.n	800920e <_free_r+0x22>
 8009232:	461a      	mov	r2, r3
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	b10b      	cbz	r3, 800923c <_free_r+0x50>
 8009238:	42a3      	cmp	r3, r4
 800923a:	d9fa      	bls.n	8009232 <_free_r+0x46>
 800923c:	6811      	ldr	r1, [r2, #0]
 800923e:	1855      	adds	r5, r2, r1
 8009240:	42a5      	cmp	r5, r4
 8009242:	d10b      	bne.n	800925c <_free_r+0x70>
 8009244:	6824      	ldr	r4, [r4, #0]
 8009246:	4421      	add	r1, r4
 8009248:	1854      	adds	r4, r2, r1
 800924a:	42a3      	cmp	r3, r4
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	d1e0      	bne.n	8009212 <_free_r+0x26>
 8009250:	681c      	ldr	r4, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	6053      	str	r3, [r2, #4]
 8009256:	440c      	add	r4, r1
 8009258:	6014      	str	r4, [r2, #0]
 800925a:	e7da      	b.n	8009212 <_free_r+0x26>
 800925c:	d902      	bls.n	8009264 <_free_r+0x78>
 800925e:	230c      	movs	r3, #12
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	e7d6      	b.n	8009212 <_free_r+0x26>
 8009264:	6825      	ldr	r5, [r4, #0]
 8009266:	1961      	adds	r1, r4, r5
 8009268:	428b      	cmp	r3, r1
 800926a:	bf04      	itt	eq
 800926c:	6819      	ldreq	r1, [r3, #0]
 800926e:	685b      	ldreq	r3, [r3, #4]
 8009270:	6063      	str	r3, [r4, #4]
 8009272:	bf04      	itt	eq
 8009274:	1949      	addeq	r1, r1, r5
 8009276:	6021      	streq	r1, [r4, #0]
 8009278:	6054      	str	r4, [r2, #4]
 800927a:	e7ca      	b.n	8009212 <_free_r+0x26>
 800927c:	b003      	add	sp, #12
 800927e:	bd30      	pop	{r4, r5, pc}
 8009280:	200005a0 	.word	0x200005a0

08009284 <malloc>:
 8009284:	4b02      	ldr	r3, [pc, #8]	; (8009290 <malloc+0xc>)
 8009286:	4601      	mov	r1, r0
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f000 b823 	b.w	80092d4 <_malloc_r>
 800928e:	bf00      	nop
 8009290:	20000064 	.word	0x20000064

08009294 <sbrk_aligned>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	4e0e      	ldr	r6, [pc, #56]	; (80092d0 <sbrk_aligned+0x3c>)
 8009298:	460c      	mov	r4, r1
 800929a:	6831      	ldr	r1, [r6, #0]
 800929c:	4605      	mov	r5, r0
 800929e:	b911      	cbnz	r1, 80092a6 <sbrk_aligned+0x12>
 80092a0:	f001 fe1a 	bl	800aed8 <_sbrk_r>
 80092a4:	6030      	str	r0, [r6, #0]
 80092a6:	4621      	mov	r1, r4
 80092a8:	4628      	mov	r0, r5
 80092aa:	f001 fe15 	bl	800aed8 <_sbrk_r>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	d00a      	beq.n	80092c8 <sbrk_aligned+0x34>
 80092b2:	1cc4      	adds	r4, r0, #3
 80092b4:	f024 0403 	bic.w	r4, r4, #3
 80092b8:	42a0      	cmp	r0, r4
 80092ba:	d007      	beq.n	80092cc <sbrk_aligned+0x38>
 80092bc:	1a21      	subs	r1, r4, r0
 80092be:	4628      	mov	r0, r5
 80092c0:	f001 fe0a 	bl	800aed8 <_sbrk_r>
 80092c4:	3001      	adds	r0, #1
 80092c6:	d101      	bne.n	80092cc <sbrk_aligned+0x38>
 80092c8:	f04f 34ff 	mov.w	r4, #4294967295
 80092cc:	4620      	mov	r0, r4
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	200005a4 	.word	0x200005a4

080092d4 <_malloc_r>:
 80092d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d8:	1ccd      	adds	r5, r1, #3
 80092da:	f025 0503 	bic.w	r5, r5, #3
 80092de:	3508      	adds	r5, #8
 80092e0:	2d0c      	cmp	r5, #12
 80092e2:	bf38      	it	cc
 80092e4:	250c      	movcc	r5, #12
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	4607      	mov	r7, r0
 80092ea:	db01      	blt.n	80092f0 <_malloc_r+0x1c>
 80092ec:	42a9      	cmp	r1, r5
 80092ee:	d905      	bls.n	80092fc <_malloc_r+0x28>
 80092f0:	230c      	movs	r3, #12
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	2600      	movs	r6, #0
 80092f6:	4630      	mov	r0, r6
 80092f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093d0 <_malloc_r+0xfc>
 8009300:	f000 f868 	bl	80093d4 <__malloc_lock>
 8009304:	f8d8 3000 	ldr.w	r3, [r8]
 8009308:	461c      	mov	r4, r3
 800930a:	bb5c      	cbnz	r4, 8009364 <_malloc_r+0x90>
 800930c:	4629      	mov	r1, r5
 800930e:	4638      	mov	r0, r7
 8009310:	f7ff ffc0 	bl	8009294 <sbrk_aligned>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	4604      	mov	r4, r0
 8009318:	d155      	bne.n	80093c6 <_malloc_r+0xf2>
 800931a:	f8d8 4000 	ldr.w	r4, [r8]
 800931e:	4626      	mov	r6, r4
 8009320:	2e00      	cmp	r6, #0
 8009322:	d145      	bne.n	80093b0 <_malloc_r+0xdc>
 8009324:	2c00      	cmp	r4, #0
 8009326:	d048      	beq.n	80093ba <_malloc_r+0xe6>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	4631      	mov	r1, r6
 800932c:	4638      	mov	r0, r7
 800932e:	eb04 0903 	add.w	r9, r4, r3
 8009332:	f001 fdd1 	bl	800aed8 <_sbrk_r>
 8009336:	4581      	cmp	r9, r0
 8009338:	d13f      	bne.n	80093ba <_malloc_r+0xe6>
 800933a:	6821      	ldr	r1, [r4, #0]
 800933c:	1a6d      	subs	r5, r5, r1
 800933e:	4629      	mov	r1, r5
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff ffa7 	bl	8009294 <sbrk_aligned>
 8009346:	3001      	adds	r0, #1
 8009348:	d037      	beq.n	80093ba <_malloc_r+0xe6>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	442b      	add	r3, r5
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	f8d8 3000 	ldr.w	r3, [r8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d038      	beq.n	80093ca <_malloc_r+0xf6>
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	42a2      	cmp	r2, r4
 800935c:	d12b      	bne.n	80093b6 <_malloc_r+0xe2>
 800935e:	2200      	movs	r2, #0
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	e00f      	b.n	8009384 <_malloc_r+0xb0>
 8009364:	6822      	ldr	r2, [r4, #0]
 8009366:	1b52      	subs	r2, r2, r5
 8009368:	d41f      	bmi.n	80093aa <_malloc_r+0xd6>
 800936a:	2a0b      	cmp	r2, #11
 800936c:	d917      	bls.n	800939e <_malloc_r+0xca>
 800936e:	1961      	adds	r1, r4, r5
 8009370:	42a3      	cmp	r3, r4
 8009372:	6025      	str	r5, [r4, #0]
 8009374:	bf18      	it	ne
 8009376:	6059      	strne	r1, [r3, #4]
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	bf08      	it	eq
 800937c:	f8c8 1000 	streq.w	r1, [r8]
 8009380:	5162      	str	r2, [r4, r5]
 8009382:	604b      	str	r3, [r1, #4]
 8009384:	4638      	mov	r0, r7
 8009386:	f104 060b 	add.w	r6, r4, #11
 800938a:	f000 f829 	bl	80093e0 <__malloc_unlock>
 800938e:	f026 0607 	bic.w	r6, r6, #7
 8009392:	1d23      	adds	r3, r4, #4
 8009394:	1af2      	subs	r2, r6, r3
 8009396:	d0ae      	beq.n	80092f6 <_malloc_r+0x22>
 8009398:	1b9b      	subs	r3, r3, r6
 800939a:	50a3      	str	r3, [r4, r2]
 800939c:	e7ab      	b.n	80092f6 <_malloc_r+0x22>
 800939e:	42a3      	cmp	r3, r4
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	d1dd      	bne.n	8009360 <_malloc_r+0x8c>
 80093a4:	f8c8 2000 	str.w	r2, [r8]
 80093a8:	e7ec      	b.n	8009384 <_malloc_r+0xb0>
 80093aa:	4623      	mov	r3, r4
 80093ac:	6864      	ldr	r4, [r4, #4]
 80093ae:	e7ac      	b.n	800930a <_malloc_r+0x36>
 80093b0:	4634      	mov	r4, r6
 80093b2:	6876      	ldr	r6, [r6, #4]
 80093b4:	e7b4      	b.n	8009320 <_malloc_r+0x4c>
 80093b6:	4613      	mov	r3, r2
 80093b8:	e7cc      	b.n	8009354 <_malloc_r+0x80>
 80093ba:	230c      	movs	r3, #12
 80093bc:	603b      	str	r3, [r7, #0]
 80093be:	4638      	mov	r0, r7
 80093c0:	f000 f80e 	bl	80093e0 <__malloc_unlock>
 80093c4:	e797      	b.n	80092f6 <_malloc_r+0x22>
 80093c6:	6025      	str	r5, [r4, #0]
 80093c8:	e7dc      	b.n	8009384 <_malloc_r+0xb0>
 80093ca:	605b      	str	r3, [r3, #4]
 80093cc:	deff      	udf	#255	; 0xff
 80093ce:	bf00      	nop
 80093d0:	200005a0 	.word	0x200005a0

080093d4 <__malloc_lock>:
 80093d4:	4801      	ldr	r0, [pc, #4]	; (80093dc <__malloc_lock+0x8>)
 80093d6:	f7ff b886 	b.w	80084e6 <__retarget_lock_acquire_recursive>
 80093da:	bf00      	nop
 80093dc:	2000059c 	.word	0x2000059c

080093e0 <__malloc_unlock>:
 80093e0:	4801      	ldr	r0, [pc, #4]	; (80093e8 <__malloc_unlock+0x8>)
 80093e2:	f7ff b881 	b.w	80084e8 <__retarget_lock_release_recursive>
 80093e6:	bf00      	nop
 80093e8:	2000059c 	.word	0x2000059c

080093ec <_Balloc>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	69c6      	ldr	r6, [r0, #28]
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	b976      	cbnz	r6, 8009414 <_Balloc+0x28>
 80093f6:	2010      	movs	r0, #16
 80093f8:	f7ff ff44 	bl	8009284 <malloc>
 80093fc:	4602      	mov	r2, r0
 80093fe:	61e0      	str	r0, [r4, #28]
 8009400:	b920      	cbnz	r0, 800940c <_Balloc+0x20>
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <_Balloc+0x78>)
 8009404:	4818      	ldr	r0, [pc, #96]	; (8009468 <_Balloc+0x7c>)
 8009406:	216b      	movs	r1, #107	; 0x6b
 8009408:	f001 fd8e 	bl	800af28 <__assert_func>
 800940c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009410:	6006      	str	r6, [r0, #0]
 8009412:	60c6      	str	r6, [r0, #12]
 8009414:	69e6      	ldr	r6, [r4, #28]
 8009416:	68f3      	ldr	r3, [r6, #12]
 8009418:	b183      	cbz	r3, 800943c <_Balloc+0x50>
 800941a:	69e3      	ldr	r3, [r4, #28]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009422:	b9b8      	cbnz	r0, 8009454 <_Balloc+0x68>
 8009424:	2101      	movs	r1, #1
 8009426:	fa01 f605 	lsl.w	r6, r1, r5
 800942a:	1d72      	adds	r2, r6, #5
 800942c:	0092      	lsls	r2, r2, #2
 800942e:	4620      	mov	r0, r4
 8009430:	f001 fd98 	bl	800af64 <_calloc_r>
 8009434:	b160      	cbz	r0, 8009450 <_Balloc+0x64>
 8009436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800943a:	e00e      	b.n	800945a <_Balloc+0x6e>
 800943c:	2221      	movs	r2, #33	; 0x21
 800943e:	2104      	movs	r1, #4
 8009440:	4620      	mov	r0, r4
 8009442:	f001 fd8f 	bl	800af64 <_calloc_r>
 8009446:	69e3      	ldr	r3, [r4, #28]
 8009448:	60f0      	str	r0, [r6, #12]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e4      	bne.n	800941a <_Balloc+0x2e>
 8009450:	2000      	movs	r0, #0
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	6802      	ldr	r2, [r0, #0]
 8009456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800945a:	2300      	movs	r3, #0
 800945c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009460:	e7f7      	b.n	8009452 <_Balloc+0x66>
 8009462:	bf00      	nop
 8009464:	0800be26 	.word	0x0800be26
 8009468:	0800bea6 	.word	0x0800bea6

0800946c <_Bfree>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	69c6      	ldr	r6, [r0, #28]
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	b976      	cbnz	r6, 8009494 <_Bfree+0x28>
 8009476:	2010      	movs	r0, #16
 8009478:	f7ff ff04 	bl	8009284 <malloc>
 800947c:	4602      	mov	r2, r0
 800947e:	61e8      	str	r0, [r5, #28]
 8009480:	b920      	cbnz	r0, 800948c <_Bfree+0x20>
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <_Bfree+0x3c>)
 8009484:	4809      	ldr	r0, [pc, #36]	; (80094ac <_Bfree+0x40>)
 8009486:	218f      	movs	r1, #143	; 0x8f
 8009488:	f001 fd4e 	bl	800af28 <__assert_func>
 800948c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009490:	6006      	str	r6, [r0, #0]
 8009492:	60c6      	str	r6, [r0, #12]
 8009494:	b13c      	cbz	r4, 80094a6 <_Bfree+0x3a>
 8009496:	69eb      	ldr	r3, [r5, #28]
 8009498:	6862      	ldr	r2, [r4, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094a0:	6021      	str	r1, [r4, #0]
 80094a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	0800be26 	.word	0x0800be26
 80094ac:	0800bea6 	.word	0x0800bea6

080094b0 <__multadd>:
 80094b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b4:	690d      	ldr	r5, [r1, #16]
 80094b6:	4607      	mov	r7, r0
 80094b8:	460c      	mov	r4, r1
 80094ba:	461e      	mov	r6, r3
 80094bc:	f101 0c14 	add.w	ip, r1, #20
 80094c0:	2000      	movs	r0, #0
 80094c2:	f8dc 3000 	ldr.w	r3, [ip]
 80094c6:	b299      	uxth	r1, r3
 80094c8:	fb02 6101 	mla	r1, r2, r1, r6
 80094cc:	0c1e      	lsrs	r6, r3, #16
 80094ce:	0c0b      	lsrs	r3, r1, #16
 80094d0:	fb02 3306 	mla	r3, r2, r6, r3
 80094d4:	b289      	uxth	r1, r1
 80094d6:	3001      	adds	r0, #1
 80094d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094dc:	4285      	cmp	r5, r0
 80094de:	f84c 1b04 	str.w	r1, [ip], #4
 80094e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094e6:	dcec      	bgt.n	80094c2 <__multadd+0x12>
 80094e8:	b30e      	cbz	r6, 800952e <__multadd+0x7e>
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	42ab      	cmp	r3, r5
 80094ee:	dc19      	bgt.n	8009524 <__multadd+0x74>
 80094f0:	6861      	ldr	r1, [r4, #4]
 80094f2:	4638      	mov	r0, r7
 80094f4:	3101      	adds	r1, #1
 80094f6:	f7ff ff79 	bl	80093ec <_Balloc>
 80094fa:	4680      	mov	r8, r0
 80094fc:	b928      	cbnz	r0, 800950a <__multadd+0x5a>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <__multadd+0x84>)
 8009502:	480d      	ldr	r0, [pc, #52]	; (8009538 <__multadd+0x88>)
 8009504:	21ba      	movs	r1, #186	; 0xba
 8009506:	f001 fd0f 	bl	800af28 <__assert_func>
 800950a:	6922      	ldr	r2, [r4, #16]
 800950c:	3202      	adds	r2, #2
 800950e:	f104 010c 	add.w	r1, r4, #12
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	300c      	adds	r0, #12
 8009516:	f001 fcef 	bl	800aef8 <memcpy>
 800951a:	4621      	mov	r1, r4
 800951c:	4638      	mov	r0, r7
 800951e:	f7ff ffa5 	bl	800946c <_Bfree>
 8009522:	4644      	mov	r4, r8
 8009524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009528:	3501      	adds	r5, #1
 800952a:	615e      	str	r6, [r3, #20]
 800952c:	6125      	str	r5, [r4, #16]
 800952e:	4620      	mov	r0, r4
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	0800be95 	.word	0x0800be95
 8009538:	0800bea6 	.word	0x0800bea6

0800953c <__s2b>:
 800953c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009540:	460c      	mov	r4, r1
 8009542:	4615      	mov	r5, r2
 8009544:	461f      	mov	r7, r3
 8009546:	2209      	movs	r2, #9
 8009548:	3308      	adds	r3, #8
 800954a:	4606      	mov	r6, r0
 800954c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009550:	2100      	movs	r1, #0
 8009552:	2201      	movs	r2, #1
 8009554:	429a      	cmp	r2, r3
 8009556:	db09      	blt.n	800956c <__s2b+0x30>
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff ff47 	bl	80093ec <_Balloc>
 800955e:	b940      	cbnz	r0, 8009572 <__s2b+0x36>
 8009560:	4602      	mov	r2, r0
 8009562:	4b19      	ldr	r3, [pc, #100]	; (80095c8 <__s2b+0x8c>)
 8009564:	4819      	ldr	r0, [pc, #100]	; (80095cc <__s2b+0x90>)
 8009566:	21d3      	movs	r1, #211	; 0xd3
 8009568:	f001 fcde 	bl	800af28 <__assert_func>
 800956c:	0052      	lsls	r2, r2, #1
 800956e:	3101      	adds	r1, #1
 8009570:	e7f0      	b.n	8009554 <__s2b+0x18>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	6143      	str	r3, [r0, #20]
 8009576:	2d09      	cmp	r5, #9
 8009578:	f04f 0301 	mov.w	r3, #1
 800957c:	6103      	str	r3, [r0, #16]
 800957e:	dd16      	ble.n	80095ae <__s2b+0x72>
 8009580:	f104 0909 	add.w	r9, r4, #9
 8009584:	46c8      	mov	r8, r9
 8009586:	442c      	add	r4, r5
 8009588:	f818 3b01 	ldrb.w	r3, [r8], #1
 800958c:	4601      	mov	r1, r0
 800958e:	3b30      	subs	r3, #48	; 0x30
 8009590:	220a      	movs	r2, #10
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff ff8c 	bl	80094b0 <__multadd>
 8009598:	45a0      	cmp	r8, r4
 800959a:	d1f5      	bne.n	8009588 <__s2b+0x4c>
 800959c:	f1a5 0408 	sub.w	r4, r5, #8
 80095a0:	444c      	add	r4, r9
 80095a2:	1b2d      	subs	r5, r5, r4
 80095a4:	1963      	adds	r3, r4, r5
 80095a6:	42bb      	cmp	r3, r7
 80095a8:	db04      	blt.n	80095b4 <__s2b+0x78>
 80095aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ae:	340a      	adds	r4, #10
 80095b0:	2509      	movs	r5, #9
 80095b2:	e7f6      	b.n	80095a2 <__s2b+0x66>
 80095b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095b8:	4601      	mov	r1, r0
 80095ba:	3b30      	subs	r3, #48	; 0x30
 80095bc:	220a      	movs	r2, #10
 80095be:	4630      	mov	r0, r6
 80095c0:	f7ff ff76 	bl	80094b0 <__multadd>
 80095c4:	e7ee      	b.n	80095a4 <__s2b+0x68>
 80095c6:	bf00      	nop
 80095c8:	0800be95 	.word	0x0800be95
 80095cc:	0800bea6 	.word	0x0800bea6

080095d0 <__hi0bits>:
 80095d0:	0c03      	lsrs	r3, r0, #16
 80095d2:	041b      	lsls	r3, r3, #16
 80095d4:	b9d3      	cbnz	r3, 800960c <__hi0bits+0x3c>
 80095d6:	0400      	lsls	r0, r0, #16
 80095d8:	2310      	movs	r3, #16
 80095da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095de:	bf04      	itt	eq
 80095e0:	0200      	lsleq	r0, r0, #8
 80095e2:	3308      	addeq	r3, #8
 80095e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095e8:	bf04      	itt	eq
 80095ea:	0100      	lsleq	r0, r0, #4
 80095ec:	3304      	addeq	r3, #4
 80095ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095f2:	bf04      	itt	eq
 80095f4:	0080      	lsleq	r0, r0, #2
 80095f6:	3302      	addeq	r3, #2
 80095f8:	2800      	cmp	r0, #0
 80095fa:	db05      	blt.n	8009608 <__hi0bits+0x38>
 80095fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009600:	f103 0301 	add.w	r3, r3, #1
 8009604:	bf08      	it	eq
 8009606:	2320      	moveq	r3, #32
 8009608:	4618      	mov	r0, r3
 800960a:	4770      	bx	lr
 800960c:	2300      	movs	r3, #0
 800960e:	e7e4      	b.n	80095da <__hi0bits+0xa>

08009610 <__lo0bits>:
 8009610:	6803      	ldr	r3, [r0, #0]
 8009612:	f013 0207 	ands.w	r2, r3, #7
 8009616:	d00c      	beq.n	8009632 <__lo0bits+0x22>
 8009618:	07d9      	lsls	r1, r3, #31
 800961a:	d422      	bmi.n	8009662 <__lo0bits+0x52>
 800961c:	079a      	lsls	r2, r3, #30
 800961e:	bf49      	itett	mi
 8009620:	085b      	lsrmi	r3, r3, #1
 8009622:	089b      	lsrpl	r3, r3, #2
 8009624:	6003      	strmi	r3, [r0, #0]
 8009626:	2201      	movmi	r2, #1
 8009628:	bf5c      	itt	pl
 800962a:	6003      	strpl	r3, [r0, #0]
 800962c:	2202      	movpl	r2, #2
 800962e:	4610      	mov	r0, r2
 8009630:	4770      	bx	lr
 8009632:	b299      	uxth	r1, r3
 8009634:	b909      	cbnz	r1, 800963a <__lo0bits+0x2a>
 8009636:	0c1b      	lsrs	r3, r3, #16
 8009638:	2210      	movs	r2, #16
 800963a:	b2d9      	uxtb	r1, r3
 800963c:	b909      	cbnz	r1, 8009642 <__lo0bits+0x32>
 800963e:	3208      	adds	r2, #8
 8009640:	0a1b      	lsrs	r3, r3, #8
 8009642:	0719      	lsls	r1, r3, #28
 8009644:	bf04      	itt	eq
 8009646:	091b      	lsreq	r3, r3, #4
 8009648:	3204      	addeq	r2, #4
 800964a:	0799      	lsls	r1, r3, #30
 800964c:	bf04      	itt	eq
 800964e:	089b      	lsreq	r3, r3, #2
 8009650:	3202      	addeq	r2, #2
 8009652:	07d9      	lsls	r1, r3, #31
 8009654:	d403      	bmi.n	800965e <__lo0bits+0x4e>
 8009656:	085b      	lsrs	r3, r3, #1
 8009658:	f102 0201 	add.w	r2, r2, #1
 800965c:	d003      	beq.n	8009666 <__lo0bits+0x56>
 800965e:	6003      	str	r3, [r0, #0]
 8009660:	e7e5      	b.n	800962e <__lo0bits+0x1e>
 8009662:	2200      	movs	r2, #0
 8009664:	e7e3      	b.n	800962e <__lo0bits+0x1e>
 8009666:	2220      	movs	r2, #32
 8009668:	e7e1      	b.n	800962e <__lo0bits+0x1e>
	...

0800966c <__i2b>:
 800966c:	b510      	push	{r4, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	2101      	movs	r1, #1
 8009672:	f7ff febb 	bl	80093ec <_Balloc>
 8009676:	4602      	mov	r2, r0
 8009678:	b928      	cbnz	r0, 8009686 <__i2b+0x1a>
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <__i2b+0x24>)
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <__i2b+0x28>)
 800967e:	f240 1145 	movw	r1, #325	; 0x145
 8009682:	f001 fc51 	bl	800af28 <__assert_func>
 8009686:	2301      	movs	r3, #1
 8009688:	6144      	str	r4, [r0, #20]
 800968a:	6103      	str	r3, [r0, #16]
 800968c:	bd10      	pop	{r4, pc}
 800968e:	bf00      	nop
 8009690:	0800be95 	.word	0x0800be95
 8009694:	0800bea6 	.word	0x0800bea6

08009698 <__multiply>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4691      	mov	r9, r2
 800969e:	690a      	ldr	r2, [r1, #16]
 80096a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	bfb8      	it	lt
 80096a8:	460b      	movlt	r3, r1
 80096aa:	460c      	mov	r4, r1
 80096ac:	bfbc      	itt	lt
 80096ae:	464c      	movlt	r4, r9
 80096b0:	4699      	movlt	r9, r3
 80096b2:	6927      	ldr	r7, [r4, #16]
 80096b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096b8:	68a3      	ldr	r3, [r4, #8]
 80096ba:	6861      	ldr	r1, [r4, #4]
 80096bc:	eb07 060a 	add.w	r6, r7, sl
 80096c0:	42b3      	cmp	r3, r6
 80096c2:	b085      	sub	sp, #20
 80096c4:	bfb8      	it	lt
 80096c6:	3101      	addlt	r1, #1
 80096c8:	f7ff fe90 	bl	80093ec <_Balloc>
 80096cc:	b930      	cbnz	r0, 80096dc <__multiply+0x44>
 80096ce:	4602      	mov	r2, r0
 80096d0:	4b44      	ldr	r3, [pc, #272]	; (80097e4 <__multiply+0x14c>)
 80096d2:	4845      	ldr	r0, [pc, #276]	; (80097e8 <__multiply+0x150>)
 80096d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80096d8:	f001 fc26 	bl	800af28 <__assert_func>
 80096dc:	f100 0514 	add.w	r5, r0, #20
 80096e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096e4:	462b      	mov	r3, r5
 80096e6:	2200      	movs	r2, #0
 80096e8:	4543      	cmp	r3, r8
 80096ea:	d321      	bcc.n	8009730 <__multiply+0x98>
 80096ec:	f104 0314 	add.w	r3, r4, #20
 80096f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096f4:	f109 0314 	add.w	r3, r9, #20
 80096f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096fc:	9202      	str	r2, [sp, #8]
 80096fe:	1b3a      	subs	r2, r7, r4
 8009700:	3a15      	subs	r2, #21
 8009702:	f022 0203 	bic.w	r2, r2, #3
 8009706:	3204      	adds	r2, #4
 8009708:	f104 0115 	add.w	r1, r4, #21
 800970c:	428f      	cmp	r7, r1
 800970e:	bf38      	it	cc
 8009710:	2204      	movcc	r2, #4
 8009712:	9201      	str	r2, [sp, #4]
 8009714:	9a02      	ldr	r2, [sp, #8]
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	429a      	cmp	r2, r3
 800971a:	d80c      	bhi.n	8009736 <__multiply+0x9e>
 800971c:	2e00      	cmp	r6, #0
 800971e:	dd03      	ble.n	8009728 <__multiply+0x90>
 8009720:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009724:	2b00      	cmp	r3, #0
 8009726:	d05b      	beq.n	80097e0 <__multiply+0x148>
 8009728:	6106      	str	r6, [r0, #16]
 800972a:	b005      	add	sp, #20
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	f843 2b04 	str.w	r2, [r3], #4
 8009734:	e7d8      	b.n	80096e8 <__multiply+0x50>
 8009736:	f8b3 a000 	ldrh.w	sl, [r3]
 800973a:	f1ba 0f00 	cmp.w	sl, #0
 800973e:	d024      	beq.n	800978a <__multiply+0xf2>
 8009740:	f104 0e14 	add.w	lr, r4, #20
 8009744:	46a9      	mov	r9, r5
 8009746:	f04f 0c00 	mov.w	ip, #0
 800974a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800974e:	f8d9 1000 	ldr.w	r1, [r9]
 8009752:	fa1f fb82 	uxth.w	fp, r2
 8009756:	b289      	uxth	r1, r1
 8009758:	fb0a 110b 	mla	r1, sl, fp, r1
 800975c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009760:	f8d9 2000 	ldr.w	r2, [r9]
 8009764:	4461      	add	r1, ip
 8009766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800976a:	fb0a c20b 	mla	r2, sl, fp, ip
 800976e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009772:	b289      	uxth	r1, r1
 8009774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009778:	4577      	cmp	r7, lr
 800977a:	f849 1b04 	str.w	r1, [r9], #4
 800977e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009782:	d8e2      	bhi.n	800974a <__multiply+0xb2>
 8009784:	9a01      	ldr	r2, [sp, #4]
 8009786:	f845 c002 	str.w	ip, [r5, r2]
 800978a:	9a03      	ldr	r2, [sp, #12]
 800978c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009790:	3304      	adds	r3, #4
 8009792:	f1b9 0f00 	cmp.w	r9, #0
 8009796:	d021      	beq.n	80097dc <__multiply+0x144>
 8009798:	6829      	ldr	r1, [r5, #0]
 800979a:	f104 0c14 	add.w	ip, r4, #20
 800979e:	46ae      	mov	lr, r5
 80097a0:	f04f 0a00 	mov.w	sl, #0
 80097a4:	f8bc b000 	ldrh.w	fp, [ip]
 80097a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097ac:	fb09 220b 	mla	r2, r9, fp, r2
 80097b0:	4452      	add	r2, sl
 80097b2:	b289      	uxth	r1, r1
 80097b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097b8:	f84e 1b04 	str.w	r1, [lr], #4
 80097bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097c4:	f8be 1000 	ldrh.w	r1, [lr]
 80097c8:	fb09 110a 	mla	r1, r9, sl, r1
 80097cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80097d0:	4567      	cmp	r7, ip
 80097d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097d6:	d8e5      	bhi.n	80097a4 <__multiply+0x10c>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	50a9      	str	r1, [r5, r2]
 80097dc:	3504      	adds	r5, #4
 80097de:	e799      	b.n	8009714 <__multiply+0x7c>
 80097e0:	3e01      	subs	r6, #1
 80097e2:	e79b      	b.n	800971c <__multiply+0x84>
 80097e4:	0800be95 	.word	0x0800be95
 80097e8:	0800bea6 	.word	0x0800bea6

080097ec <__pow5mult>:
 80097ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	4615      	mov	r5, r2
 80097f2:	f012 0203 	ands.w	r2, r2, #3
 80097f6:	4606      	mov	r6, r0
 80097f8:	460f      	mov	r7, r1
 80097fa:	d007      	beq.n	800980c <__pow5mult+0x20>
 80097fc:	4c25      	ldr	r4, [pc, #148]	; (8009894 <__pow5mult+0xa8>)
 80097fe:	3a01      	subs	r2, #1
 8009800:	2300      	movs	r3, #0
 8009802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009806:	f7ff fe53 	bl	80094b0 <__multadd>
 800980a:	4607      	mov	r7, r0
 800980c:	10ad      	asrs	r5, r5, #2
 800980e:	d03d      	beq.n	800988c <__pow5mult+0xa0>
 8009810:	69f4      	ldr	r4, [r6, #28]
 8009812:	b97c      	cbnz	r4, 8009834 <__pow5mult+0x48>
 8009814:	2010      	movs	r0, #16
 8009816:	f7ff fd35 	bl	8009284 <malloc>
 800981a:	4602      	mov	r2, r0
 800981c:	61f0      	str	r0, [r6, #28]
 800981e:	b928      	cbnz	r0, 800982c <__pow5mult+0x40>
 8009820:	4b1d      	ldr	r3, [pc, #116]	; (8009898 <__pow5mult+0xac>)
 8009822:	481e      	ldr	r0, [pc, #120]	; (800989c <__pow5mult+0xb0>)
 8009824:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009828:	f001 fb7e 	bl	800af28 <__assert_func>
 800982c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009830:	6004      	str	r4, [r0, #0]
 8009832:	60c4      	str	r4, [r0, #12]
 8009834:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800983c:	b94c      	cbnz	r4, 8009852 <__pow5mult+0x66>
 800983e:	f240 2171 	movw	r1, #625	; 0x271
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff12 	bl	800966c <__i2b>
 8009848:	2300      	movs	r3, #0
 800984a:	f8c8 0008 	str.w	r0, [r8, #8]
 800984e:	4604      	mov	r4, r0
 8009850:	6003      	str	r3, [r0, #0]
 8009852:	f04f 0900 	mov.w	r9, #0
 8009856:	07eb      	lsls	r3, r5, #31
 8009858:	d50a      	bpl.n	8009870 <__pow5mult+0x84>
 800985a:	4639      	mov	r1, r7
 800985c:	4622      	mov	r2, r4
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff1a 	bl	8009698 <__multiply>
 8009864:	4639      	mov	r1, r7
 8009866:	4680      	mov	r8, r0
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff fdff 	bl	800946c <_Bfree>
 800986e:	4647      	mov	r7, r8
 8009870:	106d      	asrs	r5, r5, #1
 8009872:	d00b      	beq.n	800988c <__pow5mult+0xa0>
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	b938      	cbnz	r0, 8009888 <__pow5mult+0x9c>
 8009878:	4622      	mov	r2, r4
 800987a:	4621      	mov	r1, r4
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff ff0b 	bl	8009698 <__multiply>
 8009882:	6020      	str	r0, [r4, #0]
 8009884:	f8c0 9000 	str.w	r9, [r0]
 8009888:	4604      	mov	r4, r0
 800988a:	e7e4      	b.n	8009856 <__pow5mult+0x6a>
 800988c:	4638      	mov	r0, r7
 800988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009892:	bf00      	nop
 8009894:	0800bff0 	.word	0x0800bff0
 8009898:	0800be26 	.word	0x0800be26
 800989c:	0800bea6 	.word	0x0800bea6

080098a0 <__lshift>:
 80098a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	460c      	mov	r4, r1
 80098a6:	6849      	ldr	r1, [r1, #4]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	4607      	mov	r7, r0
 80098b2:	4691      	mov	r9, r2
 80098b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098b8:	f108 0601 	add.w	r6, r8, #1
 80098bc:	42b3      	cmp	r3, r6
 80098be:	db0b      	blt.n	80098d8 <__lshift+0x38>
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff fd93 	bl	80093ec <_Balloc>
 80098c6:	4605      	mov	r5, r0
 80098c8:	b948      	cbnz	r0, 80098de <__lshift+0x3e>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b28      	ldr	r3, [pc, #160]	; (8009970 <__lshift+0xd0>)
 80098ce:	4829      	ldr	r0, [pc, #164]	; (8009974 <__lshift+0xd4>)
 80098d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80098d4:	f001 fb28 	bl	800af28 <__assert_func>
 80098d8:	3101      	adds	r1, #1
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	e7ee      	b.n	80098bc <__lshift+0x1c>
 80098de:	2300      	movs	r3, #0
 80098e0:	f100 0114 	add.w	r1, r0, #20
 80098e4:	f100 0210 	add.w	r2, r0, #16
 80098e8:	4618      	mov	r0, r3
 80098ea:	4553      	cmp	r3, sl
 80098ec:	db33      	blt.n	8009956 <__lshift+0xb6>
 80098ee:	6920      	ldr	r0, [r4, #16]
 80098f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098f4:	f104 0314 	add.w	r3, r4, #20
 80098f8:	f019 091f 	ands.w	r9, r9, #31
 80098fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009904:	d02b      	beq.n	800995e <__lshift+0xbe>
 8009906:	f1c9 0e20 	rsb	lr, r9, #32
 800990a:	468a      	mov	sl, r1
 800990c:	2200      	movs	r2, #0
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	fa00 f009 	lsl.w	r0, r0, r9
 8009914:	4310      	orrs	r0, r2
 8009916:	f84a 0b04 	str.w	r0, [sl], #4
 800991a:	f853 2b04 	ldr.w	r2, [r3], #4
 800991e:	459c      	cmp	ip, r3
 8009920:	fa22 f20e 	lsr.w	r2, r2, lr
 8009924:	d8f3      	bhi.n	800990e <__lshift+0x6e>
 8009926:	ebac 0304 	sub.w	r3, ip, r4
 800992a:	3b15      	subs	r3, #21
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	3304      	adds	r3, #4
 8009932:	f104 0015 	add.w	r0, r4, #21
 8009936:	4584      	cmp	ip, r0
 8009938:	bf38      	it	cc
 800993a:	2304      	movcc	r3, #4
 800993c:	50ca      	str	r2, [r1, r3]
 800993e:	b10a      	cbz	r2, 8009944 <__lshift+0xa4>
 8009940:	f108 0602 	add.w	r6, r8, #2
 8009944:	3e01      	subs	r6, #1
 8009946:	4638      	mov	r0, r7
 8009948:	612e      	str	r6, [r5, #16]
 800994a:	4621      	mov	r1, r4
 800994c:	f7ff fd8e 	bl	800946c <_Bfree>
 8009950:	4628      	mov	r0, r5
 8009952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009956:	f842 0f04 	str.w	r0, [r2, #4]!
 800995a:	3301      	adds	r3, #1
 800995c:	e7c5      	b.n	80098ea <__lshift+0x4a>
 800995e:	3904      	subs	r1, #4
 8009960:	f853 2b04 	ldr.w	r2, [r3], #4
 8009964:	f841 2f04 	str.w	r2, [r1, #4]!
 8009968:	459c      	cmp	ip, r3
 800996a:	d8f9      	bhi.n	8009960 <__lshift+0xc0>
 800996c:	e7ea      	b.n	8009944 <__lshift+0xa4>
 800996e:	bf00      	nop
 8009970:	0800be95 	.word	0x0800be95
 8009974:	0800bea6 	.word	0x0800bea6

08009978 <__mcmp>:
 8009978:	b530      	push	{r4, r5, lr}
 800997a:	6902      	ldr	r2, [r0, #16]
 800997c:	690c      	ldr	r4, [r1, #16]
 800997e:	1b12      	subs	r2, r2, r4
 8009980:	d10e      	bne.n	80099a0 <__mcmp+0x28>
 8009982:	f100 0314 	add.w	r3, r0, #20
 8009986:	3114      	adds	r1, #20
 8009988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800998c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009998:	42a5      	cmp	r5, r4
 800999a:	d003      	beq.n	80099a4 <__mcmp+0x2c>
 800999c:	d305      	bcc.n	80099aa <__mcmp+0x32>
 800999e:	2201      	movs	r2, #1
 80099a0:	4610      	mov	r0, r2
 80099a2:	bd30      	pop	{r4, r5, pc}
 80099a4:	4283      	cmp	r3, r0
 80099a6:	d3f3      	bcc.n	8009990 <__mcmp+0x18>
 80099a8:	e7fa      	b.n	80099a0 <__mcmp+0x28>
 80099aa:	f04f 32ff 	mov.w	r2, #4294967295
 80099ae:	e7f7      	b.n	80099a0 <__mcmp+0x28>

080099b0 <__mdiff>:
 80099b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	460c      	mov	r4, r1
 80099b6:	4606      	mov	r6, r0
 80099b8:	4611      	mov	r1, r2
 80099ba:	4620      	mov	r0, r4
 80099bc:	4690      	mov	r8, r2
 80099be:	f7ff ffdb 	bl	8009978 <__mcmp>
 80099c2:	1e05      	subs	r5, r0, #0
 80099c4:	d110      	bne.n	80099e8 <__mdiff+0x38>
 80099c6:	4629      	mov	r1, r5
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff fd0f 	bl	80093ec <_Balloc>
 80099ce:	b930      	cbnz	r0, 80099de <__mdiff+0x2e>
 80099d0:	4b3a      	ldr	r3, [pc, #232]	; (8009abc <__mdiff+0x10c>)
 80099d2:	4602      	mov	r2, r0
 80099d4:	f240 2137 	movw	r1, #567	; 0x237
 80099d8:	4839      	ldr	r0, [pc, #228]	; (8009ac0 <__mdiff+0x110>)
 80099da:	f001 faa5 	bl	800af28 <__assert_func>
 80099de:	2301      	movs	r3, #1
 80099e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	bfa4      	itt	ge
 80099ea:	4643      	movge	r3, r8
 80099ec:	46a0      	movge	r8, r4
 80099ee:	4630      	mov	r0, r6
 80099f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099f4:	bfa6      	itte	ge
 80099f6:	461c      	movge	r4, r3
 80099f8:	2500      	movge	r5, #0
 80099fa:	2501      	movlt	r5, #1
 80099fc:	f7ff fcf6 	bl	80093ec <_Balloc>
 8009a00:	b920      	cbnz	r0, 8009a0c <__mdiff+0x5c>
 8009a02:	4b2e      	ldr	r3, [pc, #184]	; (8009abc <__mdiff+0x10c>)
 8009a04:	4602      	mov	r2, r0
 8009a06:	f240 2145 	movw	r1, #581	; 0x245
 8009a0a:	e7e5      	b.n	80099d8 <__mdiff+0x28>
 8009a0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a10:	6926      	ldr	r6, [r4, #16]
 8009a12:	60c5      	str	r5, [r0, #12]
 8009a14:	f104 0914 	add.w	r9, r4, #20
 8009a18:	f108 0514 	add.w	r5, r8, #20
 8009a1c:	f100 0e14 	add.w	lr, r0, #20
 8009a20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a28:	f108 0210 	add.w	r2, r8, #16
 8009a2c:	46f2      	mov	sl, lr
 8009a2e:	2100      	movs	r1, #0
 8009a30:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a38:	fa11 f88b 	uxtah	r8, r1, fp
 8009a3c:	b299      	uxth	r1, r3
 8009a3e:	0c1b      	lsrs	r3, r3, #16
 8009a40:	eba8 0801 	sub.w	r8, r8, r1
 8009a44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a4c:	fa1f f888 	uxth.w	r8, r8
 8009a50:	1419      	asrs	r1, r3, #16
 8009a52:	454e      	cmp	r6, r9
 8009a54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a58:	f84a 3b04 	str.w	r3, [sl], #4
 8009a5c:	d8e8      	bhi.n	8009a30 <__mdiff+0x80>
 8009a5e:	1b33      	subs	r3, r6, r4
 8009a60:	3b15      	subs	r3, #21
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	3304      	adds	r3, #4
 8009a68:	3415      	adds	r4, #21
 8009a6a:	42a6      	cmp	r6, r4
 8009a6c:	bf38      	it	cc
 8009a6e:	2304      	movcc	r3, #4
 8009a70:	441d      	add	r5, r3
 8009a72:	4473      	add	r3, lr
 8009a74:	469e      	mov	lr, r3
 8009a76:	462e      	mov	r6, r5
 8009a78:	4566      	cmp	r6, ip
 8009a7a:	d30e      	bcc.n	8009a9a <__mdiff+0xea>
 8009a7c:	f10c 0203 	add.w	r2, ip, #3
 8009a80:	1b52      	subs	r2, r2, r5
 8009a82:	f022 0203 	bic.w	r2, r2, #3
 8009a86:	3d03      	subs	r5, #3
 8009a88:	45ac      	cmp	ip, r5
 8009a8a:	bf38      	it	cc
 8009a8c:	2200      	movcc	r2, #0
 8009a8e:	4413      	add	r3, r2
 8009a90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009a94:	b17a      	cbz	r2, 8009ab6 <__mdiff+0x106>
 8009a96:	6107      	str	r7, [r0, #16]
 8009a98:	e7a4      	b.n	80099e4 <__mdiff+0x34>
 8009a9a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a9e:	fa11 f288 	uxtah	r2, r1, r8
 8009aa2:	1414      	asrs	r4, r2, #16
 8009aa4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009aa8:	b292      	uxth	r2, r2
 8009aaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009aae:	f84e 2b04 	str.w	r2, [lr], #4
 8009ab2:	1421      	asrs	r1, r4, #16
 8009ab4:	e7e0      	b.n	8009a78 <__mdiff+0xc8>
 8009ab6:	3f01      	subs	r7, #1
 8009ab8:	e7ea      	b.n	8009a90 <__mdiff+0xe0>
 8009aba:	bf00      	nop
 8009abc:	0800be95 	.word	0x0800be95
 8009ac0:	0800bea6 	.word	0x0800bea6

08009ac4 <__ulp>:
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	ed8d 0b00 	vstr	d0, [sp]
 8009aca:	9a01      	ldr	r2, [sp, #4]
 8009acc:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <__ulp+0x48>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	dc08      	bgt.n	8009aea <__ulp+0x26>
 8009ad8:	425b      	negs	r3, r3
 8009ada:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009ade:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ae2:	da04      	bge.n	8009aee <__ulp+0x2a>
 8009ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ae8:	4113      	asrs	r3, r2
 8009aea:	2200      	movs	r2, #0
 8009aec:	e008      	b.n	8009b00 <__ulp+0x3c>
 8009aee:	f1a2 0314 	sub.w	r3, r2, #20
 8009af2:	2b1e      	cmp	r3, #30
 8009af4:	bfda      	itte	le
 8009af6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009afa:	40da      	lsrle	r2, r3
 8009afc:	2201      	movgt	r2, #1
 8009afe:	2300      	movs	r3, #0
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	ec41 0b10 	vmov	d0, r0, r1
 8009b08:	b002      	add	sp, #8
 8009b0a:	4770      	bx	lr
 8009b0c:	7ff00000 	.word	0x7ff00000

08009b10 <__b2d>:
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	6906      	ldr	r6, [r0, #16]
 8009b16:	f100 0814 	add.w	r8, r0, #20
 8009b1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b1e:	1f37      	subs	r7, r6, #4
 8009b20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7ff fd53 	bl	80095d0 <__hi0bits>
 8009b2a:	f1c0 0320 	rsb	r3, r0, #32
 8009b2e:	280a      	cmp	r0, #10
 8009b30:	600b      	str	r3, [r1, #0]
 8009b32:	491b      	ldr	r1, [pc, #108]	; (8009ba0 <__b2d+0x90>)
 8009b34:	dc15      	bgt.n	8009b62 <__b2d+0x52>
 8009b36:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b3e:	45b8      	cmp	r8, r7
 8009b40:	ea43 0501 	orr.w	r5, r3, r1
 8009b44:	bf34      	ite	cc
 8009b46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b4a:	2300      	movcs	r3, #0
 8009b4c:	3015      	adds	r0, #21
 8009b4e:	fa02 f000 	lsl.w	r0, r2, r0
 8009b52:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b56:	4303      	orrs	r3, r0
 8009b58:	461c      	mov	r4, r3
 8009b5a:	ec45 4b10 	vmov	d0, r4, r5
 8009b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b62:	45b8      	cmp	r8, r7
 8009b64:	bf3a      	itte	cc
 8009b66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b6e:	2300      	movcs	r3, #0
 8009b70:	380b      	subs	r0, #11
 8009b72:	d012      	beq.n	8009b9a <__b2d+0x8a>
 8009b74:	f1c0 0120 	rsb	r1, r0, #32
 8009b78:	fa23 f401 	lsr.w	r4, r3, r1
 8009b7c:	4082      	lsls	r2, r0
 8009b7e:	4322      	orrs	r2, r4
 8009b80:	4547      	cmp	r7, r8
 8009b82:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009b86:	bf8c      	ite	hi
 8009b88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b8c:	2200      	movls	r2, #0
 8009b8e:	4083      	lsls	r3, r0
 8009b90:	40ca      	lsrs	r2, r1
 8009b92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b96:	4313      	orrs	r3, r2
 8009b98:	e7de      	b.n	8009b58 <__b2d+0x48>
 8009b9a:	ea42 0501 	orr.w	r5, r2, r1
 8009b9e:	e7db      	b.n	8009b58 <__b2d+0x48>
 8009ba0:	3ff00000 	.word	0x3ff00000

08009ba4 <__d2b>:
 8009ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	460f      	mov	r7, r1
 8009baa:	2101      	movs	r1, #1
 8009bac:	ec59 8b10 	vmov	r8, r9, d0
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	f7ff fc1b 	bl	80093ec <_Balloc>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	b930      	cbnz	r0, 8009bc8 <__d2b+0x24>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <__d2b+0xac>)
 8009bbe:	4825      	ldr	r0, [pc, #148]	; (8009c54 <__d2b+0xb0>)
 8009bc0:	f240 310f 	movw	r1, #783	; 0x30f
 8009bc4:	f001 f9b0 	bl	800af28 <__assert_func>
 8009bc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bd0:	bb2d      	cbnz	r5, 8009c1e <__d2b+0x7a>
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	f1b8 0300 	subs.w	r3, r8, #0
 8009bd8:	d026      	beq.n	8009c28 <__d2b+0x84>
 8009bda:	4668      	mov	r0, sp
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	f7ff fd17 	bl	8009610 <__lo0bits>
 8009be2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009be6:	b1e8      	cbz	r0, 8009c24 <__d2b+0x80>
 8009be8:	f1c0 0320 	rsb	r3, r0, #32
 8009bec:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	40c2      	lsrs	r2, r0
 8009bf4:	6163      	str	r3, [r4, #20]
 8009bf6:	9201      	str	r2, [sp, #4]
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	61a3      	str	r3, [r4, #24]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bf14      	ite	ne
 8009c00:	2202      	movne	r2, #2
 8009c02:	2201      	moveq	r2, #1
 8009c04:	6122      	str	r2, [r4, #16]
 8009c06:	b1bd      	cbz	r5, 8009c38 <__d2b+0x94>
 8009c08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c0c:	4405      	add	r5, r0
 8009c0e:	603d      	str	r5, [r7, #0]
 8009c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c14:	6030      	str	r0, [r6, #0]
 8009c16:	4620      	mov	r0, r4
 8009c18:	b003      	add	sp, #12
 8009c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c22:	e7d6      	b.n	8009bd2 <__d2b+0x2e>
 8009c24:	6161      	str	r1, [r4, #20]
 8009c26:	e7e7      	b.n	8009bf8 <__d2b+0x54>
 8009c28:	a801      	add	r0, sp, #4
 8009c2a:	f7ff fcf1 	bl	8009610 <__lo0bits>
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	6163      	str	r3, [r4, #20]
 8009c32:	3020      	adds	r0, #32
 8009c34:	2201      	movs	r2, #1
 8009c36:	e7e5      	b.n	8009c04 <__d2b+0x60>
 8009c38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c40:	6038      	str	r0, [r7, #0]
 8009c42:	6918      	ldr	r0, [r3, #16]
 8009c44:	f7ff fcc4 	bl	80095d0 <__hi0bits>
 8009c48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c4c:	e7e2      	b.n	8009c14 <__d2b+0x70>
 8009c4e:	bf00      	nop
 8009c50:	0800be95 	.word	0x0800be95
 8009c54:	0800bea6 	.word	0x0800bea6

08009c58 <__ratio>:
 8009c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	4688      	mov	r8, r1
 8009c5e:	4669      	mov	r1, sp
 8009c60:	4681      	mov	r9, r0
 8009c62:	f7ff ff55 	bl	8009b10 <__b2d>
 8009c66:	a901      	add	r1, sp, #4
 8009c68:	4640      	mov	r0, r8
 8009c6a:	ec55 4b10 	vmov	r4, r5, d0
 8009c6e:	f7ff ff4f 	bl	8009b10 <__b2d>
 8009c72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c7a:	eba3 0c02 	sub.w	ip, r3, r2
 8009c7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c88:	ec51 0b10 	vmov	r0, r1, d0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bfd6      	itet	le
 8009c90:	460a      	movle	r2, r1
 8009c92:	462a      	movgt	r2, r5
 8009c94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c98:	468b      	mov	fp, r1
 8009c9a:	462f      	mov	r7, r5
 8009c9c:	bfd4      	ite	le
 8009c9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ca2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	ee10 2a10 	vmov	r2, s0
 8009cac:	465b      	mov	r3, fp
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 fdcc 	bl	800084c <__aeabi_ddiv>
 8009cb4:	ec41 0b10 	vmov	d0, r0, r1
 8009cb8:	b003      	add	sp, #12
 8009cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cbe <__copybits>:
 8009cbe:	3901      	subs	r1, #1
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	1149      	asrs	r1, r1, #5
 8009cc4:	6914      	ldr	r4, [r2, #16]
 8009cc6:	3101      	adds	r1, #1
 8009cc8:	f102 0314 	add.w	r3, r2, #20
 8009ccc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cd4:	1f05      	subs	r5, r0, #4
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	d30c      	bcc.n	8009cf4 <__copybits+0x36>
 8009cda:	1aa3      	subs	r3, r4, r2
 8009cdc:	3b11      	subs	r3, #17
 8009cde:	f023 0303 	bic.w	r3, r3, #3
 8009ce2:	3211      	adds	r2, #17
 8009ce4:	42a2      	cmp	r2, r4
 8009ce6:	bf88      	it	hi
 8009ce8:	2300      	movhi	r3, #0
 8009cea:	4418      	add	r0, r3
 8009cec:	2300      	movs	r3, #0
 8009cee:	4288      	cmp	r0, r1
 8009cf0:	d305      	bcc.n	8009cfe <__copybits+0x40>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009cf8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009cfc:	e7eb      	b.n	8009cd6 <__copybits+0x18>
 8009cfe:	f840 3b04 	str.w	r3, [r0], #4
 8009d02:	e7f4      	b.n	8009cee <__copybits+0x30>

08009d04 <__any_on>:
 8009d04:	f100 0214 	add.w	r2, r0, #20
 8009d08:	6900      	ldr	r0, [r0, #16]
 8009d0a:	114b      	asrs	r3, r1, #5
 8009d0c:	4298      	cmp	r0, r3
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	db11      	blt.n	8009d36 <__any_on+0x32>
 8009d12:	dd0a      	ble.n	8009d2a <__any_on+0x26>
 8009d14:	f011 011f 	ands.w	r1, r1, #31
 8009d18:	d007      	beq.n	8009d2a <__any_on+0x26>
 8009d1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d1e:	fa24 f001 	lsr.w	r0, r4, r1
 8009d22:	fa00 f101 	lsl.w	r1, r0, r1
 8009d26:	428c      	cmp	r4, r1
 8009d28:	d10b      	bne.n	8009d42 <__any_on+0x3e>
 8009d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d803      	bhi.n	8009d3a <__any_on+0x36>
 8009d32:	2000      	movs	r0, #0
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	4603      	mov	r3, r0
 8009d38:	e7f7      	b.n	8009d2a <__any_on+0x26>
 8009d3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d3e:	2900      	cmp	r1, #0
 8009d40:	d0f5      	beq.n	8009d2e <__any_on+0x2a>
 8009d42:	2001      	movs	r0, #1
 8009d44:	e7f6      	b.n	8009d34 <__any_on+0x30>

08009d46 <sulp>:
 8009d46:	b570      	push	{r4, r5, r6, lr}
 8009d48:	4604      	mov	r4, r0
 8009d4a:	460d      	mov	r5, r1
 8009d4c:	ec45 4b10 	vmov	d0, r4, r5
 8009d50:	4616      	mov	r6, r2
 8009d52:	f7ff feb7 	bl	8009ac4 <__ulp>
 8009d56:	ec51 0b10 	vmov	r0, r1, d0
 8009d5a:	b17e      	cbz	r6, 8009d7c <sulp+0x36>
 8009d5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd09      	ble.n	8009d7c <sulp+0x36>
 8009d68:	051b      	lsls	r3, r3, #20
 8009d6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d6e:	2400      	movs	r4, #0
 8009d70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d74:	4622      	mov	r2, r4
 8009d76:	462b      	mov	r3, r5
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d80 <_strtod_l>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	ed2d 8b02 	vpush	{d8}
 8009d88:	b09b      	sub	sp, #108	; 0x6c
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009d8e:	2200      	movs	r2, #0
 8009d90:	9216      	str	r2, [sp, #88]	; 0x58
 8009d92:	460d      	mov	r5, r1
 8009d94:	f04f 0800 	mov.w	r8, #0
 8009d98:	f04f 0900 	mov.w	r9, #0
 8009d9c:	460a      	mov	r2, r1
 8009d9e:	9215      	str	r2, [sp, #84]	; 0x54
 8009da0:	7811      	ldrb	r1, [r2, #0]
 8009da2:	292b      	cmp	r1, #43	; 0x2b
 8009da4:	d04c      	beq.n	8009e40 <_strtod_l+0xc0>
 8009da6:	d83a      	bhi.n	8009e1e <_strtod_l+0x9e>
 8009da8:	290d      	cmp	r1, #13
 8009daa:	d834      	bhi.n	8009e16 <_strtod_l+0x96>
 8009dac:	2908      	cmp	r1, #8
 8009dae:	d834      	bhi.n	8009e1a <_strtod_l+0x9a>
 8009db0:	2900      	cmp	r1, #0
 8009db2:	d03d      	beq.n	8009e30 <_strtod_l+0xb0>
 8009db4:	2200      	movs	r2, #0
 8009db6:	920a      	str	r2, [sp, #40]	; 0x28
 8009db8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009dba:	7832      	ldrb	r2, [r6, #0]
 8009dbc:	2a30      	cmp	r2, #48	; 0x30
 8009dbe:	f040 80b4 	bne.w	8009f2a <_strtod_l+0x1aa>
 8009dc2:	7872      	ldrb	r2, [r6, #1]
 8009dc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009dc8:	2a58      	cmp	r2, #88	; 0x58
 8009dca:	d170      	bne.n	8009eae <_strtod_l+0x12e>
 8009dcc:	9302      	str	r3, [sp, #8]
 8009dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	ab16      	add	r3, sp, #88	; 0x58
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	4a8e      	ldr	r2, [pc, #568]	; (800a010 <_strtod_l+0x290>)
 8009dd8:	ab17      	add	r3, sp, #92	; 0x5c
 8009dda:	a915      	add	r1, sp, #84	; 0x54
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f001 f93f 	bl	800b060 <__gethex>
 8009de2:	f010 070f 	ands.w	r7, r0, #15
 8009de6:	4605      	mov	r5, r0
 8009de8:	d005      	beq.n	8009df6 <_strtod_l+0x76>
 8009dea:	2f06      	cmp	r7, #6
 8009dec:	d12a      	bne.n	8009e44 <_strtod_l+0xc4>
 8009dee:	3601      	adds	r6, #1
 8009df0:	2300      	movs	r3, #0
 8009df2:	9615      	str	r6, [sp, #84]	; 0x54
 8009df4:	930a      	str	r3, [sp, #40]	; 0x28
 8009df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 857f 	bne.w	800a8fc <_strtod_l+0xb7c>
 8009dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e00:	b1db      	cbz	r3, 8009e3a <_strtod_l+0xba>
 8009e02:	4642      	mov	r2, r8
 8009e04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e08:	ec43 2b10 	vmov	d0, r2, r3
 8009e0c:	b01b      	add	sp, #108	; 0x6c
 8009e0e:	ecbd 8b02 	vpop	{d8}
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	2920      	cmp	r1, #32
 8009e18:	d1cc      	bne.n	8009db4 <_strtod_l+0x34>
 8009e1a:	3201      	adds	r2, #1
 8009e1c:	e7bf      	b.n	8009d9e <_strtod_l+0x1e>
 8009e1e:	292d      	cmp	r1, #45	; 0x2d
 8009e20:	d1c8      	bne.n	8009db4 <_strtod_l+0x34>
 8009e22:	2101      	movs	r1, #1
 8009e24:	910a      	str	r1, [sp, #40]	; 0x28
 8009e26:	1c51      	adds	r1, r2, #1
 8009e28:	9115      	str	r1, [sp, #84]	; 0x54
 8009e2a:	7852      	ldrb	r2, [r2, #1]
 8009e2c:	2a00      	cmp	r2, #0
 8009e2e:	d1c3      	bne.n	8009db8 <_strtod_l+0x38>
 8009e30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e32:	9515      	str	r5, [sp, #84]	; 0x54
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 855f 	bne.w	800a8f8 <_strtod_l+0xb78>
 8009e3a:	4642      	mov	r2, r8
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	e7e3      	b.n	8009e08 <_strtod_l+0x88>
 8009e40:	2100      	movs	r1, #0
 8009e42:	e7ef      	b.n	8009e24 <_strtod_l+0xa4>
 8009e44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e46:	b13a      	cbz	r2, 8009e58 <_strtod_l+0xd8>
 8009e48:	2135      	movs	r1, #53	; 0x35
 8009e4a:	a818      	add	r0, sp, #96	; 0x60
 8009e4c:	f7ff ff37 	bl	8009cbe <__copybits>
 8009e50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff fb0a 	bl	800946c <_Bfree>
 8009e58:	3f01      	subs	r7, #1
 8009e5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e5c:	2f04      	cmp	r7, #4
 8009e5e:	d806      	bhi.n	8009e6e <_strtod_l+0xee>
 8009e60:	e8df f007 	tbb	[pc, r7]
 8009e64:	201d0314 	.word	0x201d0314
 8009e68:	14          	.byte	0x14
 8009e69:	00          	.byte	0x00
 8009e6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009e6e:	05e9      	lsls	r1, r5, #23
 8009e70:	bf48      	it	mi
 8009e72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e7a:	0d1b      	lsrs	r3, r3, #20
 8009e7c:	051b      	lsls	r3, r3, #20
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1b9      	bne.n	8009df6 <_strtod_l+0x76>
 8009e82:	f7fe fb05 	bl	8008490 <__errno>
 8009e86:	2322      	movs	r3, #34	; 0x22
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	e7b4      	b.n	8009df6 <_strtod_l+0x76>
 8009e8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009e90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009e9c:	e7e7      	b.n	8009e6e <_strtod_l+0xee>
 8009e9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a018 <_strtod_l+0x298>
 8009ea2:	e7e4      	b.n	8009e6e <_strtod_l+0xee>
 8009ea4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009ea8:	f04f 38ff 	mov.w	r8, #4294967295
 8009eac:	e7df      	b.n	8009e6e <_strtod_l+0xee>
 8009eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	9215      	str	r2, [sp, #84]	; 0x54
 8009eb4:	785b      	ldrb	r3, [r3, #1]
 8009eb6:	2b30      	cmp	r3, #48	; 0x30
 8009eb8:	d0f9      	beq.n	8009eae <_strtod_l+0x12e>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d09b      	beq.n	8009df6 <_strtod_l+0x76>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f04f 0a00 	mov.w	sl, #0
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009ece:	46d3      	mov	fp, sl
 8009ed0:	220a      	movs	r2, #10
 8009ed2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009ed4:	7806      	ldrb	r6, [r0, #0]
 8009ed6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009eda:	b2d9      	uxtb	r1, r3
 8009edc:	2909      	cmp	r1, #9
 8009ede:	d926      	bls.n	8009f2e <_strtod_l+0x1ae>
 8009ee0:	494c      	ldr	r1, [pc, #304]	; (800a014 <_strtod_l+0x294>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f000 ffe6 	bl	800aeb4 <strncmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d030      	beq.n	8009f4e <_strtod_l+0x1ce>
 8009eec:	2000      	movs	r0, #0
 8009eee:	4632      	mov	r2, r6
 8009ef0:	9005      	str	r0, [sp, #20]
 8009ef2:	465e      	mov	r6, fp
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2a65      	cmp	r2, #101	; 0x65
 8009ef8:	d001      	beq.n	8009efe <_strtod_l+0x17e>
 8009efa:	2a45      	cmp	r2, #69	; 0x45
 8009efc:	d113      	bne.n	8009f26 <_strtod_l+0x1a6>
 8009efe:	b91e      	cbnz	r6, 8009f08 <_strtod_l+0x188>
 8009f00:	9a04      	ldr	r2, [sp, #16]
 8009f02:	4302      	orrs	r2, r0
 8009f04:	d094      	beq.n	8009e30 <_strtod_l+0xb0>
 8009f06:	2600      	movs	r6, #0
 8009f08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009f0a:	1c6a      	adds	r2, r5, #1
 8009f0c:	9215      	str	r2, [sp, #84]	; 0x54
 8009f0e:	786a      	ldrb	r2, [r5, #1]
 8009f10:	2a2b      	cmp	r2, #43	; 0x2b
 8009f12:	d074      	beq.n	8009ffe <_strtod_l+0x27e>
 8009f14:	2a2d      	cmp	r2, #45	; 0x2d
 8009f16:	d078      	beq.n	800a00a <_strtod_l+0x28a>
 8009f18:	f04f 0c00 	mov.w	ip, #0
 8009f1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009f20:	2909      	cmp	r1, #9
 8009f22:	d97f      	bls.n	800a024 <_strtod_l+0x2a4>
 8009f24:	9515      	str	r5, [sp, #84]	; 0x54
 8009f26:	2700      	movs	r7, #0
 8009f28:	e09e      	b.n	800a068 <_strtod_l+0x2e8>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e7c8      	b.n	8009ec0 <_strtod_l+0x140>
 8009f2e:	f1bb 0f08 	cmp.w	fp, #8
 8009f32:	bfd8      	it	le
 8009f34:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009f36:	f100 0001 	add.w	r0, r0, #1
 8009f3a:	bfda      	itte	le
 8009f3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f40:	9309      	strle	r3, [sp, #36]	; 0x24
 8009f42:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009f46:	f10b 0b01 	add.w	fp, fp, #1
 8009f4a:	9015      	str	r0, [sp, #84]	; 0x54
 8009f4c:	e7c1      	b.n	8009ed2 <_strtod_l+0x152>
 8009f4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	9215      	str	r2, [sp, #84]	; 0x54
 8009f54:	785a      	ldrb	r2, [r3, #1]
 8009f56:	f1bb 0f00 	cmp.w	fp, #0
 8009f5a:	d037      	beq.n	8009fcc <_strtod_l+0x24c>
 8009f5c:	9005      	str	r0, [sp, #20]
 8009f5e:	465e      	mov	r6, fp
 8009f60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009f64:	2b09      	cmp	r3, #9
 8009f66:	d912      	bls.n	8009f8e <_strtod_l+0x20e>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e7c4      	b.n	8009ef6 <_strtod_l+0x176>
 8009f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	9215      	str	r2, [sp, #84]	; 0x54
 8009f72:	785a      	ldrb	r2, [r3, #1]
 8009f74:	3001      	adds	r0, #1
 8009f76:	2a30      	cmp	r2, #48	; 0x30
 8009f78:	d0f8      	beq.n	8009f6c <_strtod_l+0x1ec>
 8009f7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009f7e:	2b08      	cmp	r3, #8
 8009f80:	f200 84c1 	bhi.w	800a906 <_strtod_l+0xb86>
 8009f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f86:	9005      	str	r0, [sp, #20]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	3a30      	subs	r2, #48	; 0x30
 8009f90:	f100 0301 	add.w	r3, r0, #1
 8009f94:	d014      	beq.n	8009fc0 <_strtod_l+0x240>
 8009f96:	9905      	ldr	r1, [sp, #20]
 8009f98:	4419      	add	r1, r3
 8009f9a:	9105      	str	r1, [sp, #20]
 8009f9c:	4633      	mov	r3, r6
 8009f9e:	eb00 0c06 	add.w	ip, r0, r6
 8009fa2:	210a      	movs	r1, #10
 8009fa4:	4563      	cmp	r3, ip
 8009fa6:	d113      	bne.n	8009fd0 <_strtod_l+0x250>
 8009fa8:	1833      	adds	r3, r6, r0
 8009faa:	2b08      	cmp	r3, #8
 8009fac:	f106 0601 	add.w	r6, r6, #1
 8009fb0:	4406      	add	r6, r0
 8009fb2:	dc1a      	bgt.n	8009fea <_strtod_l+0x26a>
 8009fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fb6:	230a      	movs	r3, #10
 8009fb8:	fb03 2301 	mla	r3, r3, r1, r2
 8009fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009fc2:	1c51      	adds	r1, r2, #1
 8009fc4:	9115      	str	r1, [sp, #84]	; 0x54
 8009fc6:	7852      	ldrb	r2, [r2, #1]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	e7c9      	b.n	8009f60 <_strtod_l+0x1e0>
 8009fcc:	4658      	mov	r0, fp
 8009fce:	e7d2      	b.n	8009f76 <_strtod_l+0x1f6>
 8009fd0:	2b08      	cmp	r3, #8
 8009fd2:	f103 0301 	add.w	r3, r3, #1
 8009fd6:	dc03      	bgt.n	8009fe0 <_strtod_l+0x260>
 8009fd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009fda:	434f      	muls	r7, r1
 8009fdc:	9709      	str	r7, [sp, #36]	; 0x24
 8009fde:	e7e1      	b.n	8009fa4 <_strtod_l+0x224>
 8009fe0:	2b10      	cmp	r3, #16
 8009fe2:	bfd8      	it	le
 8009fe4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009fe8:	e7dc      	b.n	8009fa4 <_strtod_l+0x224>
 8009fea:	2e10      	cmp	r6, #16
 8009fec:	bfdc      	itt	le
 8009fee:	230a      	movle	r3, #10
 8009ff0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009ff4:	e7e3      	b.n	8009fbe <_strtod_l+0x23e>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e780      	b.n	8009f00 <_strtod_l+0x180>
 8009ffe:	f04f 0c00 	mov.w	ip, #0
 800a002:	1caa      	adds	r2, r5, #2
 800a004:	9215      	str	r2, [sp, #84]	; 0x54
 800a006:	78aa      	ldrb	r2, [r5, #2]
 800a008:	e788      	b.n	8009f1c <_strtod_l+0x19c>
 800a00a:	f04f 0c01 	mov.w	ip, #1
 800a00e:	e7f8      	b.n	800a002 <_strtod_l+0x282>
 800a010:	0800c000 	.word	0x0800c000
 800a014:	0800bffc 	.word	0x0800bffc
 800a018:	7ff00000 	.word	0x7ff00000
 800a01c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a01e:	1c51      	adds	r1, r2, #1
 800a020:	9115      	str	r1, [sp, #84]	; 0x54
 800a022:	7852      	ldrb	r2, [r2, #1]
 800a024:	2a30      	cmp	r2, #48	; 0x30
 800a026:	d0f9      	beq.n	800a01c <_strtod_l+0x29c>
 800a028:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a02c:	2908      	cmp	r1, #8
 800a02e:	f63f af7a 	bhi.w	8009f26 <_strtod_l+0x1a6>
 800a032:	3a30      	subs	r2, #48	; 0x30
 800a034:	9208      	str	r2, [sp, #32]
 800a036:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a038:	920c      	str	r2, [sp, #48]	; 0x30
 800a03a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a03c:	1c57      	adds	r7, r2, #1
 800a03e:	9715      	str	r7, [sp, #84]	; 0x54
 800a040:	7852      	ldrb	r2, [r2, #1]
 800a042:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a046:	f1be 0f09 	cmp.w	lr, #9
 800a04a:	d938      	bls.n	800a0be <_strtod_l+0x33e>
 800a04c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a04e:	1a7f      	subs	r7, r7, r1
 800a050:	2f08      	cmp	r7, #8
 800a052:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a056:	dc03      	bgt.n	800a060 <_strtod_l+0x2e0>
 800a058:	9908      	ldr	r1, [sp, #32]
 800a05a:	428f      	cmp	r7, r1
 800a05c:	bfa8      	it	ge
 800a05e:	460f      	movge	r7, r1
 800a060:	f1bc 0f00 	cmp.w	ip, #0
 800a064:	d000      	beq.n	800a068 <_strtod_l+0x2e8>
 800a066:	427f      	negs	r7, r7
 800a068:	2e00      	cmp	r6, #0
 800a06a:	d14f      	bne.n	800a10c <_strtod_l+0x38c>
 800a06c:	9904      	ldr	r1, [sp, #16]
 800a06e:	4301      	orrs	r1, r0
 800a070:	f47f aec1 	bne.w	8009df6 <_strtod_l+0x76>
 800a074:	2b00      	cmp	r3, #0
 800a076:	f47f aedb 	bne.w	8009e30 <_strtod_l+0xb0>
 800a07a:	2a69      	cmp	r2, #105	; 0x69
 800a07c:	d029      	beq.n	800a0d2 <_strtod_l+0x352>
 800a07e:	dc26      	bgt.n	800a0ce <_strtod_l+0x34e>
 800a080:	2a49      	cmp	r2, #73	; 0x49
 800a082:	d026      	beq.n	800a0d2 <_strtod_l+0x352>
 800a084:	2a4e      	cmp	r2, #78	; 0x4e
 800a086:	f47f aed3 	bne.w	8009e30 <_strtod_l+0xb0>
 800a08a:	499b      	ldr	r1, [pc, #620]	; (800a2f8 <_strtod_l+0x578>)
 800a08c:	a815      	add	r0, sp, #84	; 0x54
 800a08e:	f001 fa27 	bl	800b4e0 <__match>
 800a092:	2800      	cmp	r0, #0
 800a094:	f43f aecc 	beq.w	8009e30 <_strtod_l+0xb0>
 800a098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b28      	cmp	r3, #40	; 0x28
 800a09e:	d12f      	bne.n	800a100 <_strtod_l+0x380>
 800a0a0:	4996      	ldr	r1, [pc, #600]	; (800a2fc <_strtod_l+0x57c>)
 800a0a2:	aa18      	add	r2, sp, #96	; 0x60
 800a0a4:	a815      	add	r0, sp, #84	; 0x54
 800a0a6:	f001 fa2f 	bl	800b508 <__hexnan>
 800a0aa:	2805      	cmp	r0, #5
 800a0ac:	d128      	bne.n	800a100 <_strtod_l+0x380>
 800a0ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a0b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a0bc:	e69b      	b.n	8009df6 <_strtod_l+0x76>
 800a0be:	9f08      	ldr	r7, [sp, #32]
 800a0c0:	210a      	movs	r1, #10
 800a0c2:	fb01 2107 	mla	r1, r1, r7, r2
 800a0c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a0ca:	9208      	str	r2, [sp, #32]
 800a0cc:	e7b5      	b.n	800a03a <_strtod_l+0x2ba>
 800a0ce:	2a6e      	cmp	r2, #110	; 0x6e
 800a0d0:	e7d9      	b.n	800a086 <_strtod_l+0x306>
 800a0d2:	498b      	ldr	r1, [pc, #556]	; (800a300 <_strtod_l+0x580>)
 800a0d4:	a815      	add	r0, sp, #84	; 0x54
 800a0d6:	f001 fa03 	bl	800b4e0 <__match>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f43f aea8 	beq.w	8009e30 <_strtod_l+0xb0>
 800a0e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0e2:	4988      	ldr	r1, [pc, #544]	; (800a304 <_strtod_l+0x584>)
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	a815      	add	r0, sp, #84	; 0x54
 800a0e8:	9315      	str	r3, [sp, #84]	; 0x54
 800a0ea:	f001 f9f9 	bl	800b4e0 <__match>
 800a0ee:	b910      	cbnz	r0, 800a0f6 <_strtod_l+0x376>
 800a0f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	9315      	str	r3, [sp, #84]	; 0x54
 800a0f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a314 <_strtod_l+0x594>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	e67a      	b.n	8009df6 <_strtod_l+0x76>
 800a100:	4881      	ldr	r0, [pc, #516]	; (800a308 <_strtod_l+0x588>)
 800a102:	f000 ff09 	bl	800af18 <nan>
 800a106:	ec59 8b10 	vmov	r8, r9, d0
 800a10a:	e674      	b.n	8009df6 <_strtod_l+0x76>
 800a10c:	9b05      	ldr	r3, [sp, #20]
 800a10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a110:	1afb      	subs	r3, r7, r3
 800a112:	f1bb 0f00 	cmp.w	fp, #0
 800a116:	bf08      	it	eq
 800a118:	46b3      	moveq	fp, r6
 800a11a:	2e10      	cmp	r6, #16
 800a11c:	9308      	str	r3, [sp, #32]
 800a11e:	4635      	mov	r5, r6
 800a120:	bfa8      	it	ge
 800a122:	2510      	movge	r5, #16
 800a124:	f7f6 f9ee 	bl	8000504 <__aeabi_ui2d>
 800a128:	2e09      	cmp	r6, #9
 800a12a:	4680      	mov	r8, r0
 800a12c:	4689      	mov	r9, r1
 800a12e:	dd13      	ble.n	800a158 <_strtod_l+0x3d8>
 800a130:	4b76      	ldr	r3, [pc, #472]	; (800a30c <_strtod_l+0x58c>)
 800a132:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a136:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a13a:	f7f6 fa5d 	bl	80005f8 <__aeabi_dmul>
 800a13e:	4680      	mov	r8, r0
 800a140:	4650      	mov	r0, sl
 800a142:	4689      	mov	r9, r1
 800a144:	f7f6 f9de 	bl	8000504 <__aeabi_ui2d>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4640      	mov	r0, r8
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 f89c 	bl	800028c <__adddf3>
 800a154:	4680      	mov	r8, r0
 800a156:	4689      	mov	r9, r1
 800a158:	2e0f      	cmp	r6, #15
 800a15a:	dc38      	bgt.n	800a1ce <_strtod_l+0x44e>
 800a15c:	9b08      	ldr	r3, [sp, #32]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f43f ae49 	beq.w	8009df6 <_strtod_l+0x76>
 800a164:	dd24      	ble.n	800a1b0 <_strtod_l+0x430>
 800a166:	2b16      	cmp	r3, #22
 800a168:	dc0b      	bgt.n	800a182 <_strtod_l+0x402>
 800a16a:	4968      	ldr	r1, [pc, #416]	; (800a30c <_strtod_l+0x58c>)
 800a16c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	4680      	mov	r8, r0
 800a17e:	4689      	mov	r9, r1
 800a180:	e639      	b.n	8009df6 <_strtod_l+0x76>
 800a182:	9a08      	ldr	r2, [sp, #32]
 800a184:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a188:	4293      	cmp	r3, r2
 800a18a:	db20      	blt.n	800a1ce <_strtod_l+0x44e>
 800a18c:	4c5f      	ldr	r4, [pc, #380]	; (800a30c <_strtod_l+0x58c>)
 800a18e:	f1c6 060f 	rsb	r6, r6, #15
 800a192:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a196:	4642      	mov	r2, r8
 800a198:	464b      	mov	r3, r9
 800a19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a19e:	f7f6 fa2b 	bl	80005f8 <__aeabi_dmul>
 800a1a2:	9b08      	ldr	r3, [sp, #32]
 800a1a4:	1b9e      	subs	r6, r3, r6
 800a1a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a1aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1ae:	e7e3      	b.n	800a178 <_strtod_l+0x3f8>
 800a1b0:	9b08      	ldr	r3, [sp, #32]
 800a1b2:	3316      	adds	r3, #22
 800a1b4:	db0b      	blt.n	800a1ce <_strtod_l+0x44e>
 800a1b6:	9b05      	ldr	r3, [sp, #20]
 800a1b8:	1bdf      	subs	r7, r3, r7
 800a1ba:	4b54      	ldr	r3, [pc, #336]	; (800a30c <_strtod_l+0x58c>)
 800a1bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 fb40 	bl	800084c <__aeabi_ddiv>
 800a1cc:	e7d6      	b.n	800a17c <_strtod_l+0x3fc>
 800a1ce:	9b08      	ldr	r3, [sp, #32]
 800a1d0:	1b75      	subs	r5, r6, r5
 800a1d2:	441d      	add	r5, r3
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	dd70      	ble.n	800a2ba <_strtod_l+0x53a>
 800a1d8:	f015 030f 	ands.w	r3, r5, #15
 800a1dc:	d00a      	beq.n	800a1f4 <_strtod_l+0x474>
 800a1de:	494b      	ldr	r1, [pc, #300]	; (800a30c <_strtod_l+0x58c>)
 800a1e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1e4:	4642      	mov	r2, r8
 800a1e6:	464b      	mov	r3, r9
 800a1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4689      	mov	r9, r1
 800a1f4:	f035 050f 	bics.w	r5, r5, #15
 800a1f8:	d04d      	beq.n	800a296 <_strtod_l+0x516>
 800a1fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a1fe:	dd22      	ble.n	800a246 <_strtod_l+0x4c6>
 800a200:	2500      	movs	r5, #0
 800a202:	46ab      	mov	fp, r5
 800a204:	9509      	str	r5, [sp, #36]	; 0x24
 800a206:	9505      	str	r5, [sp, #20]
 800a208:	2322      	movs	r3, #34	; 0x22
 800a20a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a314 <_strtod_l+0x594>
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	f04f 0800 	mov.w	r8, #0
 800a214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	f43f aded 	beq.w	8009df6 <_strtod_l+0x76>
 800a21c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a21e:	4620      	mov	r0, r4
 800a220:	f7ff f924 	bl	800946c <_Bfree>
 800a224:	9905      	ldr	r1, [sp, #20]
 800a226:	4620      	mov	r0, r4
 800a228:	f7ff f920 	bl	800946c <_Bfree>
 800a22c:	4659      	mov	r1, fp
 800a22e:	4620      	mov	r0, r4
 800a230:	f7ff f91c 	bl	800946c <_Bfree>
 800a234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff f918 	bl	800946c <_Bfree>
 800a23c:	4629      	mov	r1, r5
 800a23e:	4620      	mov	r0, r4
 800a240:	f7ff f914 	bl	800946c <_Bfree>
 800a244:	e5d7      	b.n	8009df6 <_strtod_l+0x76>
 800a246:	4b32      	ldr	r3, [pc, #200]	; (800a310 <_strtod_l+0x590>)
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	2300      	movs	r3, #0
 800a24c:	112d      	asrs	r5, r5, #4
 800a24e:	4640      	mov	r0, r8
 800a250:	4649      	mov	r1, r9
 800a252:	469a      	mov	sl, r3
 800a254:	2d01      	cmp	r5, #1
 800a256:	dc21      	bgt.n	800a29c <_strtod_l+0x51c>
 800a258:	b10b      	cbz	r3, 800a25e <_strtod_l+0x4de>
 800a25a:	4680      	mov	r8, r0
 800a25c:	4689      	mov	r9, r1
 800a25e:	492c      	ldr	r1, [pc, #176]	; (800a310 <_strtod_l+0x590>)
 800a260:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a264:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a270:	f7f6 f9c2 	bl	80005f8 <__aeabi_dmul>
 800a274:	4b27      	ldr	r3, [pc, #156]	; (800a314 <_strtod_l+0x594>)
 800a276:	460a      	mov	r2, r1
 800a278:	400b      	ands	r3, r1
 800a27a:	4927      	ldr	r1, [pc, #156]	; (800a318 <_strtod_l+0x598>)
 800a27c:	428b      	cmp	r3, r1
 800a27e:	4680      	mov	r8, r0
 800a280:	d8be      	bhi.n	800a200 <_strtod_l+0x480>
 800a282:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a286:	428b      	cmp	r3, r1
 800a288:	bf86      	itte	hi
 800a28a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a31c <_strtod_l+0x59c>
 800a28e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a292:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a296:	2300      	movs	r3, #0
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	e07b      	b.n	800a394 <_strtod_l+0x614>
 800a29c:	07ea      	lsls	r2, r5, #31
 800a29e:	d505      	bpl.n	800a2ac <_strtod_l+0x52c>
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f9a7 	bl	80005f8 <__aeabi_dmul>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	9a04      	ldr	r2, [sp, #16]
 800a2ae:	3208      	adds	r2, #8
 800a2b0:	f10a 0a01 	add.w	sl, sl, #1
 800a2b4:	106d      	asrs	r5, r5, #1
 800a2b6:	9204      	str	r2, [sp, #16]
 800a2b8:	e7cc      	b.n	800a254 <_strtod_l+0x4d4>
 800a2ba:	d0ec      	beq.n	800a296 <_strtod_l+0x516>
 800a2bc:	426d      	negs	r5, r5
 800a2be:	f015 020f 	ands.w	r2, r5, #15
 800a2c2:	d00a      	beq.n	800a2da <_strtod_l+0x55a>
 800a2c4:	4b11      	ldr	r3, [pc, #68]	; (800a30c <_strtod_l+0x58c>)
 800a2c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f6 fabb 	bl	800084c <__aeabi_ddiv>
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	4689      	mov	r9, r1
 800a2da:	112d      	asrs	r5, r5, #4
 800a2dc:	d0db      	beq.n	800a296 <_strtod_l+0x516>
 800a2de:	2d1f      	cmp	r5, #31
 800a2e0:	dd1e      	ble.n	800a320 <_strtod_l+0x5a0>
 800a2e2:	2500      	movs	r5, #0
 800a2e4:	46ab      	mov	fp, r5
 800a2e6:	9509      	str	r5, [sp, #36]	; 0x24
 800a2e8:	9505      	str	r5, [sp, #20]
 800a2ea:	2322      	movs	r3, #34	; 0x22
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	f04f 0900 	mov.w	r9, #0
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	e78d      	b.n	800a214 <_strtod_l+0x494>
 800a2f8:	0800bded 	.word	0x0800bded
 800a2fc:	0800c014 	.word	0x0800c014
 800a300:	0800bde5 	.word	0x0800bde5
 800a304:	0800be1c 	.word	0x0800be1c
 800a308:	0800c1a5 	.word	0x0800c1a5
 800a30c:	0800bf28 	.word	0x0800bf28
 800a310:	0800bf00 	.word	0x0800bf00
 800a314:	7ff00000 	.word	0x7ff00000
 800a318:	7ca00000 	.word	0x7ca00000
 800a31c:	7fefffff 	.word	0x7fefffff
 800a320:	f015 0310 	ands.w	r3, r5, #16
 800a324:	bf18      	it	ne
 800a326:	236a      	movne	r3, #106	; 0x6a
 800a328:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a6cc <_strtod_l+0x94c>
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	4640      	mov	r0, r8
 800a330:	4649      	mov	r1, r9
 800a332:	2300      	movs	r3, #0
 800a334:	07ea      	lsls	r2, r5, #31
 800a336:	d504      	bpl.n	800a342 <_strtod_l+0x5c2>
 800a338:	e9da 2300 	ldrd	r2, r3, [sl]
 800a33c:	f7f6 f95c 	bl	80005f8 <__aeabi_dmul>
 800a340:	2301      	movs	r3, #1
 800a342:	106d      	asrs	r5, r5, #1
 800a344:	f10a 0a08 	add.w	sl, sl, #8
 800a348:	d1f4      	bne.n	800a334 <_strtod_l+0x5b4>
 800a34a:	b10b      	cbz	r3, 800a350 <_strtod_l+0x5d0>
 800a34c:	4680      	mov	r8, r0
 800a34e:	4689      	mov	r9, r1
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	b1bb      	cbz	r3, 800a384 <_strtod_l+0x604>
 800a354:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a358:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	4649      	mov	r1, r9
 800a360:	dd10      	ble.n	800a384 <_strtod_l+0x604>
 800a362:	2b1f      	cmp	r3, #31
 800a364:	f340 811e 	ble.w	800a5a4 <_strtod_l+0x824>
 800a368:	2b34      	cmp	r3, #52	; 0x34
 800a36a:	bfde      	ittt	le
 800a36c:	f04f 33ff 	movle.w	r3, #4294967295
 800a370:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a374:	4093      	lslle	r3, r2
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	bfcc      	ite	gt
 800a37c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a380:	ea03 0901 	andle.w	r9, r3, r1
 800a384:	2200      	movs	r2, #0
 800a386:	2300      	movs	r3, #0
 800a388:	4640      	mov	r0, r8
 800a38a:	4649      	mov	r1, r9
 800a38c:	f7f6 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a390:	2800      	cmp	r0, #0
 800a392:	d1a6      	bne.n	800a2e2 <_strtod_l+0x562>
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a39a:	4633      	mov	r3, r6
 800a39c:	465a      	mov	r2, fp
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f7ff f8cc 	bl	800953c <__s2b>
 800a3a4:	9009      	str	r0, [sp, #36]	; 0x24
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f43f af2a 	beq.w	800a200 <_strtod_l+0x480>
 800a3ac:	9a08      	ldr	r2, [sp, #32]
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	eba3 0307 	sub.w	r3, r3, r7
 800a3b6:	bfa8      	it	ge
 800a3b8:	2300      	movge	r3, #0
 800a3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800a3bc:	2500      	movs	r5, #0
 800a3be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3c2:	9312      	str	r3, [sp, #72]	; 0x48
 800a3c4:	46ab      	mov	fp, r5
 800a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	6859      	ldr	r1, [r3, #4]
 800a3cc:	f7ff f80e 	bl	80093ec <_Balloc>
 800a3d0:	9005      	str	r0, [sp, #20]
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f43f af18 	beq.w	800a208 <_strtod_l+0x488>
 800a3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	3202      	adds	r2, #2
 800a3de:	f103 010c 	add.w	r1, r3, #12
 800a3e2:	0092      	lsls	r2, r2, #2
 800a3e4:	300c      	adds	r0, #12
 800a3e6:	f000 fd87 	bl	800aef8 <memcpy>
 800a3ea:	ec49 8b10 	vmov	d0, r8, r9
 800a3ee:	aa18      	add	r2, sp, #96	; 0x60
 800a3f0:	a917      	add	r1, sp, #92	; 0x5c
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff fbd6 	bl	8009ba4 <__d2b>
 800a3f8:	ec49 8b18 	vmov	d8, r8, r9
 800a3fc:	9016      	str	r0, [sp, #88]	; 0x58
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f43f af02 	beq.w	800a208 <_strtod_l+0x488>
 800a404:	2101      	movs	r1, #1
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff f930 	bl	800966c <__i2b>
 800a40c:	4683      	mov	fp, r0
 800a40e:	2800      	cmp	r0, #0
 800a410:	f43f aefa 	beq.w	800a208 <_strtod_l+0x488>
 800a414:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a416:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a418:	2e00      	cmp	r6, #0
 800a41a:	bfab      	itete	ge
 800a41c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a41e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a420:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a422:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a426:	bfac      	ite	ge
 800a428:	eb06 0a03 	addge.w	sl, r6, r3
 800a42c:	1b9f      	sublt	r7, r3, r6
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	1af6      	subs	r6, r6, r3
 800a432:	4416      	add	r6, r2
 800a434:	4ba0      	ldr	r3, [pc, #640]	; (800a6b8 <_strtod_l+0x938>)
 800a436:	3e01      	subs	r6, #1
 800a438:	429e      	cmp	r6, r3
 800a43a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a43e:	f280 80c4 	bge.w	800a5ca <_strtod_l+0x84a>
 800a442:	1b9b      	subs	r3, r3, r6
 800a444:	2b1f      	cmp	r3, #31
 800a446:	eba2 0203 	sub.w	r2, r2, r3
 800a44a:	f04f 0101 	mov.w	r1, #1
 800a44e:	f300 80b0 	bgt.w	800a5b2 <_strtod_l+0x832>
 800a452:	fa01 f303 	lsl.w	r3, r1, r3
 800a456:	930e      	str	r3, [sp, #56]	; 0x38
 800a458:	2300      	movs	r3, #0
 800a45a:	930d      	str	r3, [sp, #52]	; 0x34
 800a45c:	eb0a 0602 	add.w	r6, sl, r2
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	45b2      	cmp	sl, r6
 800a464:	4417      	add	r7, r2
 800a466:	441f      	add	r7, r3
 800a468:	4653      	mov	r3, sl
 800a46a:	bfa8      	it	ge
 800a46c:	4633      	movge	r3, r6
 800a46e:	42bb      	cmp	r3, r7
 800a470:	bfa8      	it	ge
 800a472:	463b      	movge	r3, r7
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfc2      	ittt	gt
 800a478:	1af6      	subgt	r6, r6, r3
 800a47a:	1aff      	subgt	r7, r7, r3
 800a47c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a482:	2b00      	cmp	r3, #0
 800a484:	dd17      	ble.n	800a4b6 <_strtod_l+0x736>
 800a486:	4659      	mov	r1, fp
 800a488:	461a      	mov	r2, r3
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff f9ae 	bl	80097ec <__pow5mult>
 800a490:	4683      	mov	fp, r0
 800a492:	2800      	cmp	r0, #0
 800a494:	f43f aeb8 	beq.w	800a208 <_strtod_l+0x488>
 800a498:	4601      	mov	r1, r0
 800a49a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a49c:	4620      	mov	r0, r4
 800a49e:	f7ff f8fb 	bl	8009698 <__multiply>
 800a4a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f43f aeaf 	beq.w	800a208 <_strtod_l+0x488>
 800a4aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f7fe ffdd 	bl	800946c <_Bfree>
 800a4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b4:	9316      	str	r3, [sp, #88]	; 0x58
 800a4b6:	2e00      	cmp	r6, #0
 800a4b8:	f300 808c 	bgt.w	800a5d4 <_strtod_l+0x854>
 800a4bc:	9b08      	ldr	r3, [sp, #32]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dd08      	ble.n	800a4d4 <_strtod_l+0x754>
 800a4c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4c4:	9905      	ldr	r1, [sp, #20]
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f7ff f990 	bl	80097ec <__pow5mult>
 800a4cc:	9005      	str	r0, [sp, #20]
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f43f ae9a 	beq.w	800a208 <_strtod_l+0x488>
 800a4d4:	2f00      	cmp	r7, #0
 800a4d6:	dd08      	ble.n	800a4ea <_strtod_l+0x76a>
 800a4d8:	9905      	ldr	r1, [sp, #20]
 800a4da:	463a      	mov	r2, r7
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f7ff f9df 	bl	80098a0 <__lshift>
 800a4e2:	9005      	str	r0, [sp, #20]
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f ae8f 	beq.w	800a208 <_strtod_l+0x488>
 800a4ea:	f1ba 0f00 	cmp.w	sl, #0
 800a4ee:	dd08      	ble.n	800a502 <_strtod_l+0x782>
 800a4f0:	4659      	mov	r1, fp
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f7ff f9d3 	bl	80098a0 <__lshift>
 800a4fa:	4683      	mov	fp, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f43f ae83 	beq.w	800a208 <_strtod_l+0x488>
 800a502:	9a05      	ldr	r2, [sp, #20]
 800a504:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a506:	4620      	mov	r0, r4
 800a508:	f7ff fa52 	bl	80099b0 <__mdiff>
 800a50c:	4605      	mov	r5, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f ae7a 	beq.w	800a208 <_strtod_l+0x488>
 800a514:	68c3      	ldr	r3, [r0, #12]
 800a516:	930b      	str	r3, [sp, #44]	; 0x2c
 800a518:	2300      	movs	r3, #0
 800a51a:	60c3      	str	r3, [r0, #12]
 800a51c:	4659      	mov	r1, fp
 800a51e:	f7ff fa2b 	bl	8009978 <__mcmp>
 800a522:	2800      	cmp	r0, #0
 800a524:	da60      	bge.n	800a5e8 <_strtod_l+0x868>
 800a526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a528:	ea53 0308 	orrs.w	r3, r3, r8
 800a52c:	f040 8084 	bne.w	800a638 <_strtod_l+0x8b8>
 800a530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a534:	2b00      	cmp	r3, #0
 800a536:	d17f      	bne.n	800a638 <_strtod_l+0x8b8>
 800a538:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a53c:	0d1b      	lsrs	r3, r3, #20
 800a53e:	051b      	lsls	r3, r3, #20
 800a540:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a544:	d978      	bls.n	800a638 <_strtod_l+0x8b8>
 800a546:	696b      	ldr	r3, [r5, #20]
 800a548:	b913      	cbnz	r3, 800a550 <_strtod_l+0x7d0>
 800a54a:	692b      	ldr	r3, [r5, #16]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	dd73      	ble.n	800a638 <_strtod_l+0x8b8>
 800a550:	4629      	mov	r1, r5
 800a552:	2201      	movs	r2, #1
 800a554:	4620      	mov	r0, r4
 800a556:	f7ff f9a3 	bl	80098a0 <__lshift>
 800a55a:	4659      	mov	r1, fp
 800a55c:	4605      	mov	r5, r0
 800a55e:	f7ff fa0b 	bl	8009978 <__mcmp>
 800a562:	2800      	cmp	r0, #0
 800a564:	dd68      	ble.n	800a638 <_strtod_l+0x8b8>
 800a566:	9904      	ldr	r1, [sp, #16]
 800a568:	4a54      	ldr	r2, [pc, #336]	; (800a6bc <_strtod_l+0x93c>)
 800a56a:	464b      	mov	r3, r9
 800a56c:	2900      	cmp	r1, #0
 800a56e:	f000 8084 	beq.w	800a67a <_strtod_l+0x8fa>
 800a572:	ea02 0109 	and.w	r1, r2, r9
 800a576:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a57a:	dc7e      	bgt.n	800a67a <_strtod_l+0x8fa>
 800a57c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a580:	f77f aeb3 	ble.w	800a2ea <_strtod_l+0x56a>
 800a584:	4b4e      	ldr	r3, [pc, #312]	; (800a6c0 <_strtod_l+0x940>)
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f6 f834 	bl	80005f8 <__aeabi_dmul>
 800a590:	4b4a      	ldr	r3, [pc, #296]	; (800a6bc <_strtod_l+0x93c>)
 800a592:	400b      	ands	r3, r1
 800a594:	4680      	mov	r8, r0
 800a596:	4689      	mov	r9, r1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f47f ae3f 	bne.w	800a21c <_strtod_l+0x49c>
 800a59e:	2322      	movs	r3, #34	; 0x22
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	e63b      	b.n	800a21c <_strtod_l+0x49c>
 800a5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ac:	ea03 0808 	and.w	r8, r3, r8
 800a5b0:	e6e8      	b.n	800a384 <_strtod_l+0x604>
 800a5b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a5b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a5ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a5be:	36e2      	adds	r6, #226	; 0xe2
 800a5c0:	fa01 f306 	lsl.w	r3, r1, r6
 800a5c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a5c8:	e748      	b.n	800a45c <_strtod_l+0x6dc>
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a5d2:	e743      	b.n	800a45c <_strtod_l+0x6dc>
 800a5d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff f961 	bl	80098a0 <__lshift>
 800a5de:	9016      	str	r0, [sp, #88]	; 0x58
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	f47f af6b 	bne.w	800a4bc <_strtod_l+0x73c>
 800a5e6:	e60f      	b.n	800a208 <_strtod_l+0x488>
 800a5e8:	46ca      	mov	sl, r9
 800a5ea:	d171      	bne.n	800a6d0 <_strtod_l+0x950>
 800a5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5f2:	b352      	cbz	r2, 800a64a <_strtod_l+0x8ca>
 800a5f4:	4a33      	ldr	r2, [pc, #204]	; (800a6c4 <_strtod_l+0x944>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d12a      	bne.n	800a650 <_strtod_l+0x8d0>
 800a5fa:	9b04      	ldr	r3, [sp, #16]
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	b1fb      	cbz	r3, 800a640 <_strtod_l+0x8c0>
 800a600:	4b2e      	ldr	r3, [pc, #184]	; (800a6bc <_strtod_l+0x93c>)
 800a602:	ea09 0303 	and.w	r3, r9, r3
 800a606:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	d81a      	bhi.n	800a646 <_strtod_l+0x8c6>
 800a610:	0d1b      	lsrs	r3, r3, #20
 800a612:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	4299      	cmp	r1, r3
 800a61c:	d118      	bne.n	800a650 <_strtod_l+0x8d0>
 800a61e:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <_strtod_l+0x948>)
 800a620:	459a      	cmp	sl, r3
 800a622:	d102      	bne.n	800a62a <_strtod_l+0x8aa>
 800a624:	3101      	adds	r1, #1
 800a626:	f43f adef 	beq.w	800a208 <_strtod_l+0x488>
 800a62a:	4b24      	ldr	r3, [pc, #144]	; (800a6bc <_strtod_l+0x93c>)
 800a62c:	ea0a 0303 	and.w	r3, sl, r3
 800a630:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a634:	f04f 0800 	mov.w	r8, #0
 800a638:	9b04      	ldr	r3, [sp, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1a2      	bne.n	800a584 <_strtod_l+0x804>
 800a63e:	e5ed      	b.n	800a21c <_strtod_l+0x49c>
 800a640:	f04f 33ff 	mov.w	r3, #4294967295
 800a644:	e7e9      	b.n	800a61a <_strtod_l+0x89a>
 800a646:	4613      	mov	r3, r2
 800a648:	e7e7      	b.n	800a61a <_strtod_l+0x89a>
 800a64a:	ea53 0308 	orrs.w	r3, r3, r8
 800a64e:	d08a      	beq.n	800a566 <_strtod_l+0x7e6>
 800a650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a652:	b1e3      	cbz	r3, 800a68e <_strtod_l+0x90e>
 800a654:	ea13 0f0a 	tst.w	r3, sl
 800a658:	d0ee      	beq.n	800a638 <_strtod_l+0x8b8>
 800a65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a65c:	9a04      	ldr	r2, [sp, #16]
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	b1c3      	cbz	r3, 800a696 <_strtod_l+0x916>
 800a664:	f7ff fb6f 	bl	8009d46 <sulp>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	ec51 0b18 	vmov	r0, r1, d8
 800a670:	f7f5 fe0c 	bl	800028c <__adddf3>
 800a674:	4680      	mov	r8, r0
 800a676:	4689      	mov	r9, r1
 800a678:	e7de      	b.n	800a638 <_strtod_l+0x8b8>
 800a67a:	4013      	ands	r3, r2
 800a67c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a680:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a684:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a688:	f04f 38ff 	mov.w	r8, #4294967295
 800a68c:	e7d4      	b.n	800a638 <_strtod_l+0x8b8>
 800a68e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a690:	ea13 0f08 	tst.w	r3, r8
 800a694:	e7e0      	b.n	800a658 <_strtod_l+0x8d8>
 800a696:	f7ff fb56 	bl	8009d46 <sulp>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	ec51 0b18 	vmov	r0, r1, d8
 800a6a2:	f7f5 fdf1 	bl	8000288 <__aeabi_dsub>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4680      	mov	r8, r0
 800a6ac:	4689      	mov	r9, r1
 800a6ae:	f7f6 fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d0c0      	beq.n	800a638 <_strtod_l+0x8b8>
 800a6b6:	e618      	b.n	800a2ea <_strtod_l+0x56a>
 800a6b8:	fffffc02 	.word	0xfffffc02
 800a6bc:	7ff00000 	.word	0x7ff00000
 800a6c0:	39500000 	.word	0x39500000
 800a6c4:	000fffff 	.word	0x000fffff
 800a6c8:	7fefffff 	.word	0x7fefffff
 800a6cc:	0800c028 	.word	0x0800c028
 800a6d0:	4659      	mov	r1, fp
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f7ff fac0 	bl	8009c58 <__ratio>
 800a6d8:	ec57 6b10 	vmov	r6, r7, d0
 800a6dc:	ee10 0a10 	vmov	r0, s0
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f6 fa02 	bl	8000af0 <__aeabi_dcmple>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d071      	beq.n	800a7d4 <_strtod_l+0xa54>
 800a6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d17c      	bne.n	800a7f0 <_strtod_l+0xa70>
 800a6f6:	f1b8 0f00 	cmp.w	r8, #0
 800a6fa:	d15a      	bne.n	800a7b2 <_strtod_l+0xa32>
 800a6fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a700:	2b00      	cmp	r3, #0
 800a702:	d15d      	bne.n	800a7c0 <_strtod_l+0xa40>
 800a704:	4b90      	ldr	r3, [pc, #576]	; (800a948 <_strtod_l+0xbc8>)
 800a706:	2200      	movs	r2, #0
 800a708:	4630      	mov	r0, r6
 800a70a:	4639      	mov	r1, r7
 800a70c:	f7f6 f9e6 	bl	8000adc <__aeabi_dcmplt>
 800a710:	2800      	cmp	r0, #0
 800a712:	d15c      	bne.n	800a7ce <_strtod_l+0xa4e>
 800a714:	4630      	mov	r0, r6
 800a716:	4639      	mov	r1, r7
 800a718:	4b8c      	ldr	r3, [pc, #560]	; (800a94c <_strtod_l+0xbcc>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	4606      	mov	r6, r0
 800a722:	460f      	mov	r7, r1
 800a724:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a728:	9606      	str	r6, [sp, #24]
 800a72a:	9307      	str	r3, [sp, #28]
 800a72c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a730:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a734:	4b86      	ldr	r3, [pc, #536]	; (800a950 <_strtod_l+0xbd0>)
 800a736:	ea0a 0303 	and.w	r3, sl, r3
 800a73a:	930d      	str	r3, [sp, #52]	; 0x34
 800a73c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a73e:	4b85      	ldr	r3, [pc, #532]	; (800a954 <_strtod_l+0xbd4>)
 800a740:	429a      	cmp	r2, r3
 800a742:	f040 8090 	bne.w	800a866 <_strtod_l+0xae6>
 800a746:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a74a:	ec49 8b10 	vmov	d0, r8, r9
 800a74e:	f7ff f9b9 	bl	8009ac4 <__ulp>
 800a752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a756:	ec51 0b10 	vmov	r0, r1, d0
 800a75a:	f7f5 ff4d 	bl	80005f8 <__aeabi_dmul>
 800a75e:	4642      	mov	r2, r8
 800a760:	464b      	mov	r3, r9
 800a762:	f7f5 fd93 	bl	800028c <__adddf3>
 800a766:	460b      	mov	r3, r1
 800a768:	4979      	ldr	r1, [pc, #484]	; (800a950 <_strtod_l+0xbd0>)
 800a76a:	4a7b      	ldr	r2, [pc, #492]	; (800a958 <_strtod_l+0xbd8>)
 800a76c:	4019      	ands	r1, r3
 800a76e:	4291      	cmp	r1, r2
 800a770:	4680      	mov	r8, r0
 800a772:	d944      	bls.n	800a7fe <_strtod_l+0xa7e>
 800a774:	ee18 2a90 	vmov	r2, s17
 800a778:	4b78      	ldr	r3, [pc, #480]	; (800a95c <_strtod_l+0xbdc>)
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d104      	bne.n	800a788 <_strtod_l+0xa08>
 800a77e:	ee18 3a10 	vmov	r3, s16
 800a782:	3301      	adds	r3, #1
 800a784:	f43f ad40 	beq.w	800a208 <_strtod_l+0x488>
 800a788:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a95c <_strtod_l+0xbdc>
 800a78c:	f04f 38ff 	mov.w	r8, #4294967295
 800a790:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a792:	4620      	mov	r0, r4
 800a794:	f7fe fe6a 	bl	800946c <_Bfree>
 800a798:	9905      	ldr	r1, [sp, #20]
 800a79a:	4620      	mov	r0, r4
 800a79c:	f7fe fe66 	bl	800946c <_Bfree>
 800a7a0:	4659      	mov	r1, fp
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7fe fe62 	bl	800946c <_Bfree>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7fe fe5e 	bl	800946c <_Bfree>
 800a7b0:	e609      	b.n	800a3c6 <_strtod_l+0x646>
 800a7b2:	f1b8 0f01 	cmp.w	r8, #1
 800a7b6:	d103      	bne.n	800a7c0 <_strtod_l+0xa40>
 800a7b8:	f1b9 0f00 	cmp.w	r9, #0
 800a7bc:	f43f ad95 	beq.w	800a2ea <_strtod_l+0x56a>
 800a7c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a918 <_strtod_l+0xb98>
 800a7c4:	4f60      	ldr	r7, [pc, #384]	; (800a948 <_strtod_l+0xbc8>)
 800a7c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7ca:	2600      	movs	r6, #0
 800a7cc:	e7ae      	b.n	800a72c <_strtod_l+0x9ac>
 800a7ce:	4f5f      	ldr	r7, [pc, #380]	; (800a94c <_strtod_l+0xbcc>)
 800a7d0:	2600      	movs	r6, #0
 800a7d2:	e7a7      	b.n	800a724 <_strtod_l+0x9a4>
 800a7d4:	4b5d      	ldr	r3, [pc, #372]	; (800a94c <_strtod_l+0xbcc>)
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	4639      	mov	r1, r7
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f7f5 ff0c 	bl	80005f8 <__aeabi_dmul>
 800a7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d09c      	beq.n	800a724 <_strtod_l+0x9a4>
 800a7ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7ee:	e79d      	b.n	800a72c <_strtod_l+0x9ac>
 800a7f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a920 <_strtod_l+0xba0>
 800a7f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7f8:	ec57 6b17 	vmov	r6, r7, d7
 800a7fc:	e796      	b.n	800a72c <_strtod_l+0x9ac>
 800a7fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	46ca      	mov	sl, r9
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1c2      	bne.n	800a790 <_strtod_l+0xa10>
 800a80a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a810:	0d1b      	lsrs	r3, r3, #20
 800a812:	051b      	lsls	r3, r3, #20
 800a814:	429a      	cmp	r2, r3
 800a816:	d1bb      	bne.n	800a790 <_strtod_l+0xa10>
 800a818:	4630      	mov	r0, r6
 800a81a:	4639      	mov	r1, r7
 800a81c:	f7f6 fa4c 	bl	8000cb8 <__aeabi_d2lz>
 800a820:	f7f5 febc 	bl	800059c <__aeabi_l2d>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fd2c 	bl	8000288 <__aeabi_dsub>
 800a830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a832:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a836:	ea43 0308 	orr.w	r3, r3, r8
 800a83a:	4313      	orrs	r3, r2
 800a83c:	4606      	mov	r6, r0
 800a83e:	460f      	mov	r7, r1
 800a840:	d054      	beq.n	800a8ec <_strtod_l+0xb6c>
 800a842:	a339      	add	r3, pc, #228	; (adr r3, 800a928 <_strtod_l+0xba8>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f6 f948 	bl	8000adc <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f47f ace5 	bne.w	800a21c <_strtod_l+0x49c>
 800a852:	a337      	add	r3, pc, #220	; (adr r3, 800a930 <_strtod_l+0xbb0>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 f95c 	bl	8000b18 <__aeabi_dcmpgt>
 800a860:	2800      	cmp	r0, #0
 800a862:	d095      	beq.n	800a790 <_strtod_l+0xa10>
 800a864:	e4da      	b.n	800a21c <_strtod_l+0x49c>
 800a866:	9b04      	ldr	r3, [sp, #16]
 800a868:	b333      	cbz	r3, 800a8b8 <_strtod_l+0xb38>
 800a86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a86c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a870:	d822      	bhi.n	800a8b8 <_strtod_l+0xb38>
 800a872:	a331      	add	r3, pc, #196	; (adr r3, 800a938 <_strtod_l+0xbb8>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f6 f938 	bl	8000af0 <__aeabi_dcmple>
 800a880:	b1a0      	cbz	r0, 800a8ac <_strtod_l+0xb2c>
 800a882:	4639      	mov	r1, r7
 800a884:	4630      	mov	r0, r6
 800a886:	f7f6 f98f 	bl	8000ba8 <__aeabi_d2uiz>
 800a88a:	2801      	cmp	r0, #1
 800a88c:	bf38      	it	cc
 800a88e:	2001      	movcc	r0, #1
 800a890:	f7f5 fe38 	bl	8000504 <__aeabi_ui2d>
 800a894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	bb23      	cbnz	r3, 800a8e6 <_strtod_l+0xb66>
 800a89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8a0:	9010      	str	r0, [sp, #64]	; 0x40
 800a8a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a8a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a8ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a8c0:	eef0 0a68 	vmov.f32	s1, s17
 800a8c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a8c8:	f7ff f8fc 	bl	8009ac4 <__ulp>
 800a8cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8d0:	ec53 2b10 	vmov	r2, r3, d0
 800a8d4:	f7f5 fe90 	bl	80005f8 <__aeabi_dmul>
 800a8d8:	ec53 2b18 	vmov	r2, r3, d8
 800a8dc:	f7f5 fcd6 	bl	800028c <__adddf3>
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	4689      	mov	r9, r1
 800a8e4:	e78d      	b.n	800a802 <_strtod_l+0xa82>
 800a8e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a8ea:	e7db      	b.n	800a8a4 <_strtod_l+0xb24>
 800a8ec:	a314      	add	r3, pc, #80	; (adr r3, 800a940 <_strtod_l+0xbc0>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f7f6 f8f3 	bl	8000adc <__aeabi_dcmplt>
 800a8f6:	e7b3      	b.n	800a860 <_strtod_l+0xae0>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a8fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	f7ff ba7c 	b.w	8009dfe <_strtod_l+0x7e>
 800a906:	2a65      	cmp	r2, #101	; 0x65
 800a908:	f43f ab75 	beq.w	8009ff6 <_strtod_l+0x276>
 800a90c:	2a45      	cmp	r2, #69	; 0x45
 800a90e:	f43f ab72 	beq.w	8009ff6 <_strtod_l+0x276>
 800a912:	2301      	movs	r3, #1
 800a914:	f7ff bbaa 	b.w	800a06c <_strtod_l+0x2ec>
 800a918:	00000000 	.word	0x00000000
 800a91c:	bff00000 	.word	0xbff00000
 800a920:	00000000 	.word	0x00000000
 800a924:	3ff00000 	.word	0x3ff00000
 800a928:	94a03595 	.word	0x94a03595
 800a92c:	3fdfffff 	.word	0x3fdfffff
 800a930:	35afe535 	.word	0x35afe535
 800a934:	3fe00000 	.word	0x3fe00000
 800a938:	ffc00000 	.word	0xffc00000
 800a93c:	41dfffff 	.word	0x41dfffff
 800a940:	94a03595 	.word	0x94a03595
 800a944:	3fcfffff 	.word	0x3fcfffff
 800a948:	3ff00000 	.word	0x3ff00000
 800a94c:	3fe00000 	.word	0x3fe00000
 800a950:	7ff00000 	.word	0x7ff00000
 800a954:	7fe00000 	.word	0x7fe00000
 800a958:	7c9fffff 	.word	0x7c9fffff
 800a95c:	7fefffff 	.word	0x7fefffff

0800a960 <_strtod_r>:
 800a960:	4b01      	ldr	r3, [pc, #4]	; (800a968 <_strtod_r+0x8>)
 800a962:	f7ff ba0d 	b.w	8009d80 <_strtod_l>
 800a966:	bf00      	nop
 800a968:	20000068 	.word	0x20000068

0800a96c <_strtol_l.constprop.0>:
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a972:	d001      	beq.n	800a978 <_strtol_l.constprop.0+0xc>
 800a974:	2b24      	cmp	r3, #36	; 0x24
 800a976:	d906      	bls.n	800a986 <_strtol_l.constprop.0+0x1a>
 800a978:	f7fd fd8a 	bl	8008490 <__errno>
 800a97c:	2316      	movs	r3, #22
 800a97e:	6003      	str	r3, [r0, #0]
 800a980:	2000      	movs	r0, #0
 800a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a986:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aa6c <_strtol_l.constprop.0+0x100>
 800a98a:	460d      	mov	r5, r1
 800a98c:	462e      	mov	r6, r5
 800a98e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a992:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a996:	f017 0708 	ands.w	r7, r7, #8
 800a99a:	d1f7      	bne.n	800a98c <_strtol_l.constprop.0+0x20>
 800a99c:	2c2d      	cmp	r4, #45	; 0x2d
 800a99e:	d132      	bne.n	800aa06 <_strtol_l.constprop.0+0x9a>
 800a9a0:	782c      	ldrb	r4, [r5, #0]
 800a9a2:	2701      	movs	r7, #1
 800a9a4:	1cb5      	adds	r5, r6, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d05b      	beq.n	800aa62 <_strtol_l.constprop.0+0xf6>
 800a9aa:	2b10      	cmp	r3, #16
 800a9ac:	d109      	bne.n	800a9c2 <_strtol_l.constprop.0+0x56>
 800a9ae:	2c30      	cmp	r4, #48	; 0x30
 800a9b0:	d107      	bne.n	800a9c2 <_strtol_l.constprop.0+0x56>
 800a9b2:	782c      	ldrb	r4, [r5, #0]
 800a9b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a9b8:	2c58      	cmp	r4, #88	; 0x58
 800a9ba:	d14d      	bne.n	800aa58 <_strtol_l.constprop.0+0xec>
 800a9bc:	786c      	ldrb	r4, [r5, #1]
 800a9be:	2310      	movs	r3, #16
 800a9c0:	3502      	adds	r5, #2
 800a9c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a9c6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9ca:	f04f 0e00 	mov.w	lr, #0
 800a9ce:	fbb8 f9f3 	udiv	r9, r8, r3
 800a9d2:	4676      	mov	r6, lr
 800a9d4:	fb03 8a19 	mls	sl, r3, r9, r8
 800a9d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9dc:	f1bc 0f09 	cmp.w	ip, #9
 800a9e0:	d816      	bhi.n	800aa10 <_strtol_l.constprop.0+0xa4>
 800a9e2:	4664      	mov	r4, ip
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	dd24      	ble.n	800aa32 <_strtol_l.constprop.0+0xc6>
 800a9e8:	f1be 3fff 	cmp.w	lr, #4294967295
 800a9ec:	d008      	beq.n	800aa00 <_strtol_l.constprop.0+0x94>
 800a9ee:	45b1      	cmp	r9, r6
 800a9f0:	d31c      	bcc.n	800aa2c <_strtol_l.constprop.0+0xc0>
 800a9f2:	d101      	bne.n	800a9f8 <_strtol_l.constprop.0+0x8c>
 800a9f4:	45a2      	cmp	sl, r4
 800a9f6:	db19      	blt.n	800aa2c <_strtol_l.constprop.0+0xc0>
 800a9f8:	fb06 4603 	mla	r6, r6, r3, r4
 800a9fc:	f04f 0e01 	mov.w	lr, #1
 800aa00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa04:	e7e8      	b.n	800a9d8 <_strtol_l.constprop.0+0x6c>
 800aa06:	2c2b      	cmp	r4, #43	; 0x2b
 800aa08:	bf04      	itt	eq
 800aa0a:	782c      	ldrbeq	r4, [r5, #0]
 800aa0c:	1cb5      	addeq	r5, r6, #2
 800aa0e:	e7ca      	b.n	800a9a6 <_strtol_l.constprop.0+0x3a>
 800aa10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa14:	f1bc 0f19 	cmp.w	ip, #25
 800aa18:	d801      	bhi.n	800aa1e <_strtol_l.constprop.0+0xb2>
 800aa1a:	3c37      	subs	r4, #55	; 0x37
 800aa1c:	e7e2      	b.n	800a9e4 <_strtol_l.constprop.0+0x78>
 800aa1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa22:	f1bc 0f19 	cmp.w	ip, #25
 800aa26:	d804      	bhi.n	800aa32 <_strtol_l.constprop.0+0xc6>
 800aa28:	3c57      	subs	r4, #87	; 0x57
 800aa2a:	e7db      	b.n	800a9e4 <_strtol_l.constprop.0+0x78>
 800aa2c:	f04f 3eff 	mov.w	lr, #4294967295
 800aa30:	e7e6      	b.n	800aa00 <_strtol_l.constprop.0+0x94>
 800aa32:	f1be 3fff 	cmp.w	lr, #4294967295
 800aa36:	d105      	bne.n	800aa44 <_strtol_l.constprop.0+0xd8>
 800aa38:	2322      	movs	r3, #34	; 0x22
 800aa3a:	6003      	str	r3, [r0, #0]
 800aa3c:	4646      	mov	r6, r8
 800aa3e:	b942      	cbnz	r2, 800aa52 <_strtol_l.constprop.0+0xe6>
 800aa40:	4630      	mov	r0, r6
 800aa42:	e79e      	b.n	800a982 <_strtol_l.constprop.0+0x16>
 800aa44:	b107      	cbz	r7, 800aa48 <_strtol_l.constprop.0+0xdc>
 800aa46:	4276      	negs	r6, r6
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	d0f9      	beq.n	800aa40 <_strtol_l.constprop.0+0xd4>
 800aa4c:	f1be 0f00 	cmp.w	lr, #0
 800aa50:	d000      	beq.n	800aa54 <_strtol_l.constprop.0+0xe8>
 800aa52:	1e69      	subs	r1, r5, #1
 800aa54:	6011      	str	r1, [r2, #0]
 800aa56:	e7f3      	b.n	800aa40 <_strtol_l.constprop.0+0xd4>
 800aa58:	2430      	movs	r4, #48	; 0x30
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1b1      	bne.n	800a9c2 <_strtol_l.constprop.0+0x56>
 800aa5e:	2308      	movs	r3, #8
 800aa60:	e7af      	b.n	800a9c2 <_strtol_l.constprop.0+0x56>
 800aa62:	2c30      	cmp	r4, #48	; 0x30
 800aa64:	d0a5      	beq.n	800a9b2 <_strtol_l.constprop.0+0x46>
 800aa66:	230a      	movs	r3, #10
 800aa68:	e7ab      	b.n	800a9c2 <_strtol_l.constprop.0+0x56>
 800aa6a:	bf00      	nop
 800aa6c:	0800c051 	.word	0x0800c051

0800aa70 <_strtol_r>:
 800aa70:	f7ff bf7c 	b.w	800a96c <_strtol_l.constprop.0>

0800aa74 <__ssputs_r>:
 800aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa78:	688e      	ldr	r6, [r1, #8]
 800aa7a:	461f      	mov	r7, r3
 800aa7c:	42be      	cmp	r6, r7
 800aa7e:	680b      	ldr	r3, [r1, #0]
 800aa80:	4682      	mov	sl, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	4690      	mov	r8, r2
 800aa86:	d82c      	bhi.n	800aae2 <__ssputs_r+0x6e>
 800aa88:	898a      	ldrh	r2, [r1, #12]
 800aa8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa8e:	d026      	beq.n	800aade <__ssputs_r+0x6a>
 800aa90:	6965      	ldr	r5, [r4, #20]
 800aa92:	6909      	ldr	r1, [r1, #16]
 800aa94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa98:	eba3 0901 	sub.w	r9, r3, r1
 800aa9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa0:	1c7b      	adds	r3, r7, #1
 800aaa2:	444b      	add	r3, r9
 800aaa4:	106d      	asrs	r5, r5, #1
 800aaa6:	429d      	cmp	r5, r3
 800aaa8:	bf38      	it	cc
 800aaaa:	461d      	movcc	r5, r3
 800aaac:	0553      	lsls	r3, r2, #21
 800aaae:	d527      	bpl.n	800ab00 <__ssputs_r+0x8c>
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7fe fc0f 	bl	80092d4 <_malloc_r>
 800aab6:	4606      	mov	r6, r0
 800aab8:	b360      	cbz	r0, 800ab14 <__ssputs_r+0xa0>
 800aaba:	6921      	ldr	r1, [r4, #16]
 800aabc:	464a      	mov	r2, r9
 800aabe:	f000 fa1b 	bl	800aef8 <memcpy>
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	6126      	str	r6, [r4, #16]
 800aad0:	6165      	str	r5, [r4, #20]
 800aad2:	444e      	add	r6, r9
 800aad4:	eba5 0509 	sub.w	r5, r5, r9
 800aad8:	6026      	str	r6, [r4, #0]
 800aada:	60a5      	str	r5, [r4, #8]
 800aadc:	463e      	mov	r6, r7
 800aade:	42be      	cmp	r6, r7
 800aae0:	d900      	bls.n	800aae4 <__ssputs_r+0x70>
 800aae2:	463e      	mov	r6, r7
 800aae4:	6820      	ldr	r0, [r4, #0]
 800aae6:	4632      	mov	r2, r6
 800aae8:	4641      	mov	r1, r8
 800aaea:	f000 f9c9 	bl	800ae80 <memmove>
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	1b9b      	subs	r3, r3, r6
 800aaf2:	60a3      	str	r3, [r4, #8]
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	4433      	add	r3, r6
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	2000      	movs	r0, #0
 800aafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab00:	462a      	mov	r2, r5
 800ab02:	f000 fdae 	bl	800b662 <_realloc_r>
 800ab06:	4606      	mov	r6, r0
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d1e0      	bne.n	800aace <__ssputs_r+0x5a>
 800ab0c:	6921      	ldr	r1, [r4, #16]
 800ab0e:	4650      	mov	r0, sl
 800ab10:	f7fe fb6c 	bl	80091ec <_free_r>
 800ab14:	230c      	movs	r3, #12
 800ab16:	f8ca 3000 	str.w	r3, [sl]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295
 800ab26:	e7e9      	b.n	800aafc <__ssputs_r+0x88>

0800ab28 <_svfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	4698      	mov	r8, r3
 800ab2e:	898b      	ldrh	r3, [r1, #12]
 800ab30:	061b      	lsls	r3, r3, #24
 800ab32:	b09d      	sub	sp, #116	; 0x74
 800ab34:	4607      	mov	r7, r0
 800ab36:	460d      	mov	r5, r1
 800ab38:	4614      	mov	r4, r2
 800ab3a:	d50e      	bpl.n	800ab5a <_svfiprintf_r+0x32>
 800ab3c:	690b      	ldr	r3, [r1, #16]
 800ab3e:	b963      	cbnz	r3, 800ab5a <_svfiprintf_r+0x32>
 800ab40:	2140      	movs	r1, #64	; 0x40
 800ab42:	f7fe fbc7 	bl	80092d4 <_malloc_r>
 800ab46:	6028      	str	r0, [r5, #0]
 800ab48:	6128      	str	r0, [r5, #16]
 800ab4a:	b920      	cbnz	r0, 800ab56 <_svfiprintf_r+0x2e>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	e0d0      	b.n	800acf8 <_svfiprintf_r+0x1d0>
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	616b      	str	r3, [r5, #20]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5e:	2320      	movs	r3, #32
 800ab60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab68:	2330      	movs	r3, #48	; 0x30
 800ab6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad10 <_svfiprintf_r+0x1e8>
 800ab6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab72:	f04f 0901 	mov.w	r9, #1
 800ab76:	4623      	mov	r3, r4
 800ab78:	469a      	mov	sl, r3
 800ab7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab7e:	b10a      	cbz	r2, 800ab84 <_svfiprintf_r+0x5c>
 800ab80:	2a25      	cmp	r2, #37	; 0x25
 800ab82:	d1f9      	bne.n	800ab78 <_svfiprintf_r+0x50>
 800ab84:	ebba 0b04 	subs.w	fp, sl, r4
 800ab88:	d00b      	beq.n	800aba2 <_svfiprintf_r+0x7a>
 800ab8a:	465b      	mov	r3, fp
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ff6f 	bl	800aa74 <__ssputs_r>
 800ab96:	3001      	adds	r0, #1
 800ab98:	f000 80a9 	beq.w	800acee <_svfiprintf_r+0x1c6>
 800ab9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab9e:	445a      	add	r2, fp
 800aba0:	9209      	str	r2, [sp, #36]	; 0x24
 800aba2:	f89a 3000 	ldrb.w	r3, [sl]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 80a1 	beq.w	800acee <_svfiprintf_r+0x1c6>
 800abac:	2300      	movs	r3, #0
 800abae:	f04f 32ff 	mov.w	r2, #4294967295
 800abb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb6:	f10a 0a01 	add.w	sl, sl, #1
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	9307      	str	r3, [sp, #28]
 800abbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc2:	931a      	str	r3, [sp, #104]	; 0x68
 800abc4:	4654      	mov	r4, sl
 800abc6:	2205      	movs	r2, #5
 800abc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abcc:	4850      	ldr	r0, [pc, #320]	; (800ad10 <_svfiprintf_r+0x1e8>)
 800abce:	f7f5 faff 	bl	80001d0 <memchr>
 800abd2:	9a04      	ldr	r2, [sp, #16]
 800abd4:	b9d8      	cbnz	r0, 800ac0e <_svfiprintf_r+0xe6>
 800abd6:	06d0      	lsls	r0, r2, #27
 800abd8:	bf44      	itt	mi
 800abda:	2320      	movmi	r3, #32
 800abdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe0:	0711      	lsls	r1, r2, #28
 800abe2:	bf44      	itt	mi
 800abe4:	232b      	movmi	r3, #43	; 0x2b
 800abe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abea:	f89a 3000 	ldrb.w	r3, [sl]
 800abee:	2b2a      	cmp	r3, #42	; 0x2a
 800abf0:	d015      	beq.n	800ac1e <_svfiprintf_r+0xf6>
 800abf2:	9a07      	ldr	r2, [sp, #28]
 800abf4:	4654      	mov	r4, sl
 800abf6:	2000      	movs	r0, #0
 800abf8:	f04f 0c0a 	mov.w	ip, #10
 800abfc:	4621      	mov	r1, r4
 800abfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac02:	3b30      	subs	r3, #48	; 0x30
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	d94d      	bls.n	800aca4 <_svfiprintf_r+0x17c>
 800ac08:	b1b0      	cbz	r0, 800ac38 <_svfiprintf_r+0x110>
 800ac0a:	9207      	str	r2, [sp, #28]
 800ac0c:	e014      	b.n	800ac38 <_svfiprintf_r+0x110>
 800ac0e:	eba0 0308 	sub.w	r3, r0, r8
 800ac12:	fa09 f303 	lsl.w	r3, r9, r3
 800ac16:	4313      	orrs	r3, r2
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	46a2      	mov	sl, r4
 800ac1c:	e7d2      	b.n	800abc4 <_svfiprintf_r+0x9c>
 800ac1e:	9b03      	ldr	r3, [sp, #12]
 800ac20:	1d19      	adds	r1, r3, #4
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	9103      	str	r1, [sp, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bfbb      	ittet	lt
 800ac2a:	425b      	neglt	r3, r3
 800ac2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac30:	9307      	strge	r3, [sp, #28]
 800ac32:	9307      	strlt	r3, [sp, #28]
 800ac34:	bfb8      	it	lt
 800ac36:	9204      	strlt	r2, [sp, #16]
 800ac38:	7823      	ldrb	r3, [r4, #0]
 800ac3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac3c:	d10c      	bne.n	800ac58 <_svfiprintf_r+0x130>
 800ac3e:	7863      	ldrb	r3, [r4, #1]
 800ac40:	2b2a      	cmp	r3, #42	; 0x2a
 800ac42:	d134      	bne.n	800acae <_svfiprintf_r+0x186>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	1d1a      	adds	r2, r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	9203      	str	r2, [sp, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bfb8      	it	lt
 800ac50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac54:	3402      	adds	r4, #2
 800ac56:	9305      	str	r3, [sp, #20]
 800ac58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ad20 <_svfiprintf_r+0x1f8>
 800ac5c:	7821      	ldrb	r1, [r4, #0]
 800ac5e:	2203      	movs	r2, #3
 800ac60:	4650      	mov	r0, sl
 800ac62:	f7f5 fab5 	bl	80001d0 <memchr>
 800ac66:	b138      	cbz	r0, 800ac78 <_svfiprintf_r+0x150>
 800ac68:	9b04      	ldr	r3, [sp, #16]
 800ac6a:	eba0 000a 	sub.w	r0, r0, sl
 800ac6e:	2240      	movs	r2, #64	; 0x40
 800ac70:	4082      	lsls	r2, r0
 800ac72:	4313      	orrs	r3, r2
 800ac74:	3401      	adds	r4, #1
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7c:	4825      	ldr	r0, [pc, #148]	; (800ad14 <_svfiprintf_r+0x1ec>)
 800ac7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac82:	2206      	movs	r2, #6
 800ac84:	f7f5 faa4 	bl	80001d0 <memchr>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d038      	beq.n	800acfe <_svfiprintf_r+0x1d6>
 800ac8c:	4b22      	ldr	r3, [pc, #136]	; (800ad18 <_svfiprintf_r+0x1f0>)
 800ac8e:	bb1b      	cbnz	r3, 800acd8 <_svfiprintf_r+0x1b0>
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	3307      	adds	r3, #7
 800ac94:	f023 0307 	bic.w	r3, r3, #7
 800ac98:	3308      	adds	r3, #8
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac9e:	4433      	add	r3, r6
 800aca0:	9309      	str	r3, [sp, #36]	; 0x24
 800aca2:	e768      	b.n	800ab76 <_svfiprintf_r+0x4e>
 800aca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca8:	460c      	mov	r4, r1
 800acaa:	2001      	movs	r0, #1
 800acac:	e7a6      	b.n	800abfc <_svfiprintf_r+0xd4>
 800acae:	2300      	movs	r3, #0
 800acb0:	3401      	adds	r4, #1
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	4619      	mov	r1, r3
 800acb6:	f04f 0c0a 	mov.w	ip, #10
 800acba:	4620      	mov	r0, r4
 800acbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc0:	3a30      	subs	r2, #48	; 0x30
 800acc2:	2a09      	cmp	r2, #9
 800acc4:	d903      	bls.n	800acce <_svfiprintf_r+0x1a6>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0c6      	beq.n	800ac58 <_svfiprintf_r+0x130>
 800acca:	9105      	str	r1, [sp, #20]
 800accc:	e7c4      	b.n	800ac58 <_svfiprintf_r+0x130>
 800acce:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd2:	4604      	mov	r4, r0
 800acd4:	2301      	movs	r3, #1
 800acd6:	e7f0      	b.n	800acba <_svfiprintf_r+0x192>
 800acd8:	ab03      	add	r3, sp, #12
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	462a      	mov	r2, r5
 800acde:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <_svfiprintf_r+0x1f4>)
 800ace0:	a904      	add	r1, sp, #16
 800ace2:	4638      	mov	r0, r7
 800ace4:	f7fc fc86 	bl	80075f4 <_printf_float>
 800ace8:	1c42      	adds	r2, r0, #1
 800acea:	4606      	mov	r6, r0
 800acec:	d1d6      	bne.n	800ac9c <_svfiprintf_r+0x174>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	065b      	lsls	r3, r3, #25
 800acf2:	f53f af2d 	bmi.w	800ab50 <_svfiprintf_r+0x28>
 800acf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acf8:	b01d      	add	sp, #116	; 0x74
 800acfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462a      	mov	r2, r5
 800ad04:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <_svfiprintf_r+0x1f4>)
 800ad06:	a904      	add	r1, sp, #16
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7fc ff17 	bl	8007b3c <_printf_i>
 800ad0e:	e7eb      	b.n	800ace8 <_svfiprintf_r+0x1c0>
 800ad10:	0800c151 	.word	0x0800c151
 800ad14:	0800c15b 	.word	0x0800c15b
 800ad18:	080075f5 	.word	0x080075f5
 800ad1c:	0800aa75 	.word	0x0800aa75
 800ad20:	0800c157 	.word	0x0800c157

0800ad24 <__sflush_r>:
 800ad24:	898a      	ldrh	r2, [r1, #12]
 800ad26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	0710      	lsls	r0, r2, #28
 800ad2e:	460c      	mov	r4, r1
 800ad30:	d458      	bmi.n	800ade4 <__sflush_r+0xc0>
 800ad32:	684b      	ldr	r3, [r1, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc05      	bgt.n	800ad44 <__sflush_r+0x20>
 800ad38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dc02      	bgt.n	800ad44 <__sflush_r+0x20>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	d0f9      	beq.n	800ad3e <__sflush_r+0x1a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad50:	682f      	ldr	r7, [r5, #0]
 800ad52:	6a21      	ldr	r1, [r4, #32]
 800ad54:	602b      	str	r3, [r5, #0]
 800ad56:	d032      	beq.n	800adbe <__sflush_r+0x9a>
 800ad58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	075a      	lsls	r2, r3, #29
 800ad5e:	d505      	bpl.n	800ad6c <__sflush_r+0x48>
 800ad60:	6863      	ldr	r3, [r4, #4]
 800ad62:	1ac0      	subs	r0, r0, r3
 800ad64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad66:	b10b      	cbz	r3, 800ad6c <__sflush_r+0x48>
 800ad68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad6a:	1ac0      	subs	r0, r0, r3
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4602      	mov	r2, r0
 800ad70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad72:	6a21      	ldr	r1, [r4, #32]
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b0      	blx	r6
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	d106      	bne.n	800ad8c <__sflush_r+0x68>
 800ad7e:	6829      	ldr	r1, [r5, #0]
 800ad80:	291d      	cmp	r1, #29
 800ad82:	d82b      	bhi.n	800addc <__sflush_r+0xb8>
 800ad84:	4a29      	ldr	r2, [pc, #164]	; (800ae2c <__sflush_r+0x108>)
 800ad86:	410a      	asrs	r2, r1
 800ad88:	07d6      	lsls	r6, r2, #31
 800ad8a:	d427      	bmi.n	800addc <__sflush_r+0xb8>
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	6062      	str	r2, [r4, #4]
 800ad90:	04d9      	lsls	r1, r3, #19
 800ad92:	6922      	ldr	r2, [r4, #16]
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	d504      	bpl.n	800ada2 <__sflush_r+0x7e>
 800ad98:	1c42      	adds	r2, r0, #1
 800ad9a:	d101      	bne.n	800ada0 <__sflush_r+0x7c>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b903      	cbnz	r3, 800ada2 <__sflush_r+0x7e>
 800ada0:	6560      	str	r0, [r4, #84]	; 0x54
 800ada2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ada4:	602f      	str	r7, [r5, #0]
 800ada6:	2900      	cmp	r1, #0
 800ada8:	d0c9      	beq.n	800ad3e <__sflush_r+0x1a>
 800adaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adae:	4299      	cmp	r1, r3
 800adb0:	d002      	beq.n	800adb8 <__sflush_r+0x94>
 800adb2:	4628      	mov	r0, r5
 800adb4:	f7fe fa1a 	bl	80091ec <_free_r>
 800adb8:	2000      	movs	r0, #0
 800adba:	6360      	str	r0, [r4, #52]	; 0x34
 800adbc:	e7c0      	b.n	800ad40 <__sflush_r+0x1c>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b0      	blx	r6
 800adc4:	1c41      	adds	r1, r0, #1
 800adc6:	d1c8      	bne.n	800ad5a <__sflush_r+0x36>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0c5      	beq.n	800ad5a <__sflush_r+0x36>
 800adce:	2b1d      	cmp	r3, #29
 800add0:	d001      	beq.n	800add6 <__sflush_r+0xb2>
 800add2:	2b16      	cmp	r3, #22
 800add4:	d101      	bne.n	800adda <__sflush_r+0xb6>
 800add6:	602f      	str	r7, [r5, #0]
 800add8:	e7b1      	b.n	800ad3e <__sflush_r+0x1a>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7ad      	b.n	800ad40 <__sflush_r+0x1c>
 800ade4:	690f      	ldr	r7, [r1, #16]
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	d0a9      	beq.n	800ad3e <__sflush_r+0x1a>
 800adea:	0793      	lsls	r3, r2, #30
 800adec:	680e      	ldr	r6, [r1, #0]
 800adee:	bf08      	it	eq
 800adf0:	694b      	ldreq	r3, [r1, #20]
 800adf2:	600f      	str	r7, [r1, #0]
 800adf4:	bf18      	it	ne
 800adf6:	2300      	movne	r3, #0
 800adf8:	eba6 0807 	sub.w	r8, r6, r7
 800adfc:	608b      	str	r3, [r1, #8]
 800adfe:	f1b8 0f00 	cmp.w	r8, #0
 800ae02:	dd9c      	ble.n	800ad3e <__sflush_r+0x1a>
 800ae04:	6a21      	ldr	r1, [r4, #32]
 800ae06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae08:	4643      	mov	r3, r8
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b0      	blx	r6
 800ae10:	2800      	cmp	r0, #0
 800ae12:	dc06      	bgt.n	800ae22 <__sflush_r+0xfe>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	e78e      	b.n	800ad40 <__sflush_r+0x1c>
 800ae22:	4407      	add	r7, r0
 800ae24:	eba8 0800 	sub.w	r8, r8, r0
 800ae28:	e7e9      	b.n	800adfe <__sflush_r+0xda>
 800ae2a:	bf00      	nop
 800ae2c:	dfbffffe 	.word	0xdfbffffe

0800ae30 <_fflush_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	690b      	ldr	r3, [r1, #16]
 800ae34:	4605      	mov	r5, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	b913      	cbnz	r3, 800ae40 <_fflush_r+0x10>
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	b118      	cbz	r0, 800ae4a <_fflush_r+0x1a>
 800ae42:	6a03      	ldr	r3, [r0, #32]
 800ae44:	b90b      	cbnz	r3, 800ae4a <_fflush_r+0x1a>
 800ae46:	f7fd fa37 	bl	80082b8 <__sinit>
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f3      	beq.n	800ae3a <_fflush_r+0xa>
 800ae52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae54:	07d0      	lsls	r0, r2, #31
 800ae56:	d404      	bmi.n	800ae62 <_fflush_r+0x32>
 800ae58:	0599      	lsls	r1, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_fflush_r+0x32>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f7fd fb42 	bl	80084e6 <__retarget_lock_acquire_recursive>
 800ae62:	4628      	mov	r0, r5
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7ff ff5d 	bl	800ad24 <__sflush_r>
 800ae6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6c:	07da      	lsls	r2, r3, #31
 800ae6e:	4605      	mov	r5, r0
 800ae70:	d4e4      	bmi.n	800ae3c <_fflush_r+0xc>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	059b      	lsls	r3, r3, #22
 800ae76:	d4e1      	bmi.n	800ae3c <_fflush_r+0xc>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f7fd fb35 	bl	80084e8 <__retarget_lock_release_recursive>
 800ae7e:	e7dd      	b.n	800ae3c <_fflush_r+0xc>

0800ae80 <memmove>:
 800ae80:	4288      	cmp	r0, r1
 800ae82:	b510      	push	{r4, lr}
 800ae84:	eb01 0402 	add.w	r4, r1, r2
 800ae88:	d902      	bls.n	800ae90 <memmove+0x10>
 800ae8a:	4284      	cmp	r4, r0
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	d807      	bhi.n	800aea0 <memmove+0x20>
 800ae90:	1e43      	subs	r3, r0, #1
 800ae92:	42a1      	cmp	r1, r4
 800ae94:	d008      	beq.n	800aea8 <memmove+0x28>
 800ae96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae9e:	e7f8      	b.n	800ae92 <memmove+0x12>
 800aea0:	4402      	add	r2, r0
 800aea2:	4601      	mov	r1, r0
 800aea4:	428a      	cmp	r2, r1
 800aea6:	d100      	bne.n	800aeaa <memmove+0x2a>
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aeb2:	e7f7      	b.n	800aea4 <memmove+0x24>

0800aeb4 <strncmp>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	b16a      	cbz	r2, 800aed4 <strncmp+0x20>
 800aeb8:	3901      	subs	r1, #1
 800aeba:	1884      	adds	r4, r0, r2
 800aebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d103      	bne.n	800aed0 <strncmp+0x1c>
 800aec8:	42a0      	cmp	r0, r4
 800aeca:	d001      	beq.n	800aed0 <strncmp+0x1c>
 800aecc:	2a00      	cmp	r2, #0
 800aece:	d1f5      	bne.n	800aebc <strncmp+0x8>
 800aed0:	1ad0      	subs	r0, r2, r3
 800aed2:	bd10      	pop	{r4, pc}
 800aed4:	4610      	mov	r0, r2
 800aed6:	e7fc      	b.n	800aed2 <strncmp+0x1e>

0800aed8 <_sbrk_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d06      	ldr	r5, [pc, #24]	; (800aef4 <_sbrk_r+0x1c>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f6 fe56 	bl	8001b94 <_sbrk>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_sbrk_r+0x1a>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_sbrk_r+0x1a>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000598 	.word	0x20000598

0800aef8 <memcpy>:
 800aef8:	440a      	add	r2, r1
 800aefa:	4291      	cmp	r1, r2
 800aefc:	f100 33ff 	add.w	r3, r0, #4294967295
 800af00:	d100      	bne.n	800af04 <memcpy+0xc>
 800af02:	4770      	bx	lr
 800af04:	b510      	push	{r4, lr}
 800af06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af0e:	4291      	cmp	r1, r2
 800af10:	d1f9      	bne.n	800af06 <memcpy+0xe>
 800af12:	bd10      	pop	{r4, pc}
 800af14:	0000      	movs	r0, r0
	...

0800af18 <nan>:
 800af18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af20 <nan+0x8>
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	00000000 	.word	0x00000000
 800af24:	7ff80000 	.word	0x7ff80000

0800af28 <__assert_func>:
 800af28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af2a:	4614      	mov	r4, r2
 800af2c:	461a      	mov	r2, r3
 800af2e:	4b09      	ldr	r3, [pc, #36]	; (800af54 <__assert_func+0x2c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4605      	mov	r5, r0
 800af34:	68d8      	ldr	r0, [r3, #12]
 800af36:	b14c      	cbz	r4, 800af4c <__assert_func+0x24>
 800af38:	4b07      	ldr	r3, [pc, #28]	; (800af58 <__assert_func+0x30>)
 800af3a:	9100      	str	r1, [sp, #0]
 800af3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af40:	4906      	ldr	r1, [pc, #24]	; (800af5c <__assert_func+0x34>)
 800af42:	462b      	mov	r3, r5
 800af44:	f000 fbca 	bl	800b6dc <fiprintf>
 800af48:	f000 fbda 	bl	800b700 <abort>
 800af4c:	4b04      	ldr	r3, [pc, #16]	; (800af60 <__assert_func+0x38>)
 800af4e:	461c      	mov	r4, r3
 800af50:	e7f3      	b.n	800af3a <__assert_func+0x12>
 800af52:	bf00      	nop
 800af54:	20000064 	.word	0x20000064
 800af58:	0800c16a 	.word	0x0800c16a
 800af5c:	0800c177 	.word	0x0800c177
 800af60:	0800c1a5 	.word	0x0800c1a5

0800af64 <_calloc_r>:
 800af64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af66:	fba1 2402 	umull	r2, r4, r1, r2
 800af6a:	b94c      	cbnz	r4, 800af80 <_calloc_r+0x1c>
 800af6c:	4611      	mov	r1, r2
 800af6e:	9201      	str	r2, [sp, #4]
 800af70:	f7fe f9b0 	bl	80092d4 <_malloc_r>
 800af74:	9a01      	ldr	r2, [sp, #4]
 800af76:	4605      	mov	r5, r0
 800af78:	b930      	cbnz	r0, 800af88 <_calloc_r+0x24>
 800af7a:	4628      	mov	r0, r5
 800af7c:	b003      	add	sp, #12
 800af7e:	bd30      	pop	{r4, r5, pc}
 800af80:	220c      	movs	r2, #12
 800af82:	6002      	str	r2, [r0, #0]
 800af84:	2500      	movs	r5, #0
 800af86:	e7f8      	b.n	800af7a <_calloc_r+0x16>
 800af88:	4621      	mov	r1, r4
 800af8a:	f7fd fa2e 	bl	80083ea <memset>
 800af8e:	e7f4      	b.n	800af7a <_calloc_r+0x16>

0800af90 <rshift>:
 800af90:	6903      	ldr	r3, [r0, #16]
 800af92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af9e:	f100 0414 	add.w	r4, r0, #20
 800afa2:	dd45      	ble.n	800b030 <rshift+0xa0>
 800afa4:	f011 011f 	ands.w	r1, r1, #31
 800afa8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afb0:	d10c      	bne.n	800afcc <rshift+0x3c>
 800afb2:	f100 0710 	add.w	r7, r0, #16
 800afb6:	4629      	mov	r1, r5
 800afb8:	42b1      	cmp	r1, r6
 800afba:	d334      	bcc.n	800b026 <rshift+0x96>
 800afbc:	1a9b      	subs	r3, r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	1eea      	subs	r2, r5, #3
 800afc2:	4296      	cmp	r6, r2
 800afc4:	bf38      	it	cc
 800afc6:	2300      	movcc	r3, #0
 800afc8:	4423      	add	r3, r4
 800afca:	e015      	b.n	800aff8 <rshift+0x68>
 800afcc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800afd0:	f1c1 0820 	rsb	r8, r1, #32
 800afd4:	40cf      	lsrs	r7, r1
 800afd6:	f105 0e04 	add.w	lr, r5, #4
 800afda:	46a1      	mov	r9, r4
 800afdc:	4576      	cmp	r6, lr
 800afde:	46f4      	mov	ip, lr
 800afe0:	d815      	bhi.n	800b00e <rshift+0x7e>
 800afe2:	1a9a      	subs	r2, r3, r2
 800afe4:	0092      	lsls	r2, r2, #2
 800afe6:	3a04      	subs	r2, #4
 800afe8:	3501      	adds	r5, #1
 800afea:	42ae      	cmp	r6, r5
 800afec:	bf38      	it	cc
 800afee:	2200      	movcc	r2, #0
 800aff0:	18a3      	adds	r3, r4, r2
 800aff2:	50a7      	str	r7, [r4, r2]
 800aff4:	b107      	cbz	r7, 800aff8 <rshift+0x68>
 800aff6:	3304      	adds	r3, #4
 800aff8:	1b1a      	subs	r2, r3, r4
 800affa:	42a3      	cmp	r3, r4
 800affc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b000:	bf08      	it	eq
 800b002:	2300      	moveq	r3, #0
 800b004:	6102      	str	r2, [r0, #16]
 800b006:	bf08      	it	eq
 800b008:	6143      	streq	r3, [r0, #20]
 800b00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b00e:	f8dc c000 	ldr.w	ip, [ip]
 800b012:	fa0c fc08 	lsl.w	ip, ip, r8
 800b016:	ea4c 0707 	orr.w	r7, ip, r7
 800b01a:	f849 7b04 	str.w	r7, [r9], #4
 800b01e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b022:	40cf      	lsrs	r7, r1
 800b024:	e7da      	b.n	800afdc <rshift+0x4c>
 800b026:	f851 cb04 	ldr.w	ip, [r1], #4
 800b02a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b02e:	e7c3      	b.n	800afb8 <rshift+0x28>
 800b030:	4623      	mov	r3, r4
 800b032:	e7e1      	b.n	800aff8 <rshift+0x68>

0800b034 <__hexdig_fun>:
 800b034:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b038:	2b09      	cmp	r3, #9
 800b03a:	d802      	bhi.n	800b042 <__hexdig_fun+0xe>
 800b03c:	3820      	subs	r0, #32
 800b03e:	b2c0      	uxtb	r0, r0
 800b040:	4770      	bx	lr
 800b042:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b046:	2b05      	cmp	r3, #5
 800b048:	d801      	bhi.n	800b04e <__hexdig_fun+0x1a>
 800b04a:	3847      	subs	r0, #71	; 0x47
 800b04c:	e7f7      	b.n	800b03e <__hexdig_fun+0xa>
 800b04e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b052:	2b05      	cmp	r3, #5
 800b054:	d801      	bhi.n	800b05a <__hexdig_fun+0x26>
 800b056:	3827      	subs	r0, #39	; 0x27
 800b058:	e7f1      	b.n	800b03e <__hexdig_fun+0xa>
 800b05a:	2000      	movs	r0, #0
 800b05c:	4770      	bx	lr
	...

0800b060 <__gethex>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	4617      	mov	r7, r2
 800b066:	680a      	ldr	r2, [r1, #0]
 800b068:	b085      	sub	sp, #20
 800b06a:	f102 0b02 	add.w	fp, r2, #2
 800b06e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b072:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b076:	4681      	mov	r9, r0
 800b078:	468a      	mov	sl, r1
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	32fe      	adds	r2, #254	; 0xfe
 800b07e:	eb02 030b 	add.w	r3, r2, fp
 800b082:	46d8      	mov	r8, fp
 800b084:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	2830      	cmp	r0, #48	; 0x30
 800b08c:	d0f7      	beq.n	800b07e <__gethex+0x1e>
 800b08e:	f7ff ffd1 	bl	800b034 <__hexdig_fun>
 800b092:	4604      	mov	r4, r0
 800b094:	2800      	cmp	r0, #0
 800b096:	d138      	bne.n	800b10a <__gethex+0xaa>
 800b098:	49a7      	ldr	r1, [pc, #668]	; (800b338 <__gethex+0x2d8>)
 800b09a:	2201      	movs	r2, #1
 800b09c:	4640      	mov	r0, r8
 800b09e:	f7ff ff09 	bl	800aeb4 <strncmp>
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d169      	bne.n	800b17c <__gethex+0x11c>
 800b0a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b0ac:	465d      	mov	r5, fp
 800b0ae:	f7ff ffc1 	bl	800b034 <__hexdig_fun>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d064      	beq.n	800b180 <__gethex+0x120>
 800b0b6:	465a      	mov	r2, fp
 800b0b8:	7810      	ldrb	r0, [r2, #0]
 800b0ba:	2830      	cmp	r0, #48	; 0x30
 800b0bc:	4690      	mov	r8, r2
 800b0be:	f102 0201 	add.w	r2, r2, #1
 800b0c2:	d0f9      	beq.n	800b0b8 <__gethex+0x58>
 800b0c4:	f7ff ffb6 	bl	800b034 <__hexdig_fun>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	fab0 f480 	clz	r4, r0
 800b0ce:	0964      	lsrs	r4, r4, #5
 800b0d0:	465e      	mov	r6, fp
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	4642      	mov	r2, r8
 800b0d6:	4615      	mov	r5, r2
 800b0d8:	3201      	adds	r2, #1
 800b0da:	7828      	ldrb	r0, [r5, #0]
 800b0dc:	f7ff ffaa 	bl	800b034 <__hexdig_fun>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d1f8      	bne.n	800b0d6 <__gethex+0x76>
 800b0e4:	4994      	ldr	r1, [pc, #592]	; (800b338 <__gethex+0x2d8>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f7ff fee3 	bl	800aeb4 <strncmp>
 800b0ee:	b978      	cbnz	r0, 800b110 <__gethex+0xb0>
 800b0f0:	b946      	cbnz	r6, 800b104 <__gethex+0xa4>
 800b0f2:	1c6e      	adds	r6, r5, #1
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	4615      	mov	r5, r2
 800b0f8:	3201      	adds	r2, #1
 800b0fa:	7828      	ldrb	r0, [r5, #0]
 800b0fc:	f7ff ff9a 	bl	800b034 <__hexdig_fun>
 800b100:	2800      	cmp	r0, #0
 800b102:	d1f8      	bne.n	800b0f6 <__gethex+0x96>
 800b104:	1b73      	subs	r3, r6, r5
 800b106:	009e      	lsls	r6, r3, #2
 800b108:	e004      	b.n	800b114 <__gethex+0xb4>
 800b10a:	2400      	movs	r4, #0
 800b10c:	4626      	mov	r6, r4
 800b10e:	e7e1      	b.n	800b0d4 <__gethex+0x74>
 800b110:	2e00      	cmp	r6, #0
 800b112:	d1f7      	bne.n	800b104 <__gethex+0xa4>
 800b114:	782b      	ldrb	r3, [r5, #0]
 800b116:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b11a:	2b50      	cmp	r3, #80	; 0x50
 800b11c:	d13d      	bne.n	800b19a <__gethex+0x13a>
 800b11e:	786b      	ldrb	r3, [r5, #1]
 800b120:	2b2b      	cmp	r3, #43	; 0x2b
 800b122:	d02f      	beq.n	800b184 <__gethex+0x124>
 800b124:	2b2d      	cmp	r3, #45	; 0x2d
 800b126:	d031      	beq.n	800b18c <__gethex+0x12c>
 800b128:	1c69      	adds	r1, r5, #1
 800b12a:	f04f 0b00 	mov.w	fp, #0
 800b12e:	7808      	ldrb	r0, [r1, #0]
 800b130:	f7ff ff80 	bl	800b034 <__hexdig_fun>
 800b134:	1e42      	subs	r2, r0, #1
 800b136:	b2d2      	uxtb	r2, r2
 800b138:	2a18      	cmp	r2, #24
 800b13a:	d82e      	bhi.n	800b19a <__gethex+0x13a>
 800b13c:	f1a0 0210 	sub.w	r2, r0, #16
 800b140:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b144:	f7ff ff76 	bl	800b034 <__hexdig_fun>
 800b148:	f100 3cff 	add.w	ip, r0, #4294967295
 800b14c:	fa5f fc8c 	uxtb.w	ip, ip
 800b150:	f1bc 0f18 	cmp.w	ip, #24
 800b154:	d91d      	bls.n	800b192 <__gethex+0x132>
 800b156:	f1bb 0f00 	cmp.w	fp, #0
 800b15a:	d000      	beq.n	800b15e <__gethex+0xfe>
 800b15c:	4252      	negs	r2, r2
 800b15e:	4416      	add	r6, r2
 800b160:	f8ca 1000 	str.w	r1, [sl]
 800b164:	b1dc      	cbz	r4, 800b19e <__gethex+0x13e>
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bf14      	ite	ne
 800b16c:	f04f 0800 	movne.w	r8, #0
 800b170:	f04f 0806 	moveq.w	r8, #6
 800b174:	4640      	mov	r0, r8
 800b176:	b005      	add	sp, #20
 800b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17c:	4645      	mov	r5, r8
 800b17e:	4626      	mov	r6, r4
 800b180:	2401      	movs	r4, #1
 800b182:	e7c7      	b.n	800b114 <__gethex+0xb4>
 800b184:	f04f 0b00 	mov.w	fp, #0
 800b188:	1ca9      	adds	r1, r5, #2
 800b18a:	e7d0      	b.n	800b12e <__gethex+0xce>
 800b18c:	f04f 0b01 	mov.w	fp, #1
 800b190:	e7fa      	b.n	800b188 <__gethex+0x128>
 800b192:	230a      	movs	r3, #10
 800b194:	fb03 0002 	mla	r0, r3, r2, r0
 800b198:	e7d0      	b.n	800b13c <__gethex+0xdc>
 800b19a:	4629      	mov	r1, r5
 800b19c:	e7e0      	b.n	800b160 <__gethex+0x100>
 800b19e:	eba5 0308 	sub.w	r3, r5, r8
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	2b07      	cmp	r3, #7
 800b1a8:	dc0a      	bgt.n	800b1c0 <__gethex+0x160>
 800b1aa:	4648      	mov	r0, r9
 800b1ac:	f7fe f91e 	bl	80093ec <_Balloc>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	b940      	cbnz	r0, 800b1c6 <__gethex+0x166>
 800b1b4:	4b61      	ldr	r3, [pc, #388]	; (800b33c <__gethex+0x2dc>)
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	21e4      	movs	r1, #228	; 0xe4
 800b1ba:	4861      	ldr	r0, [pc, #388]	; (800b340 <__gethex+0x2e0>)
 800b1bc:	f7ff feb4 	bl	800af28 <__assert_func>
 800b1c0:	3101      	adds	r1, #1
 800b1c2:	105b      	asrs	r3, r3, #1
 800b1c4:	e7ef      	b.n	800b1a6 <__gethex+0x146>
 800b1c6:	f100 0a14 	add.w	sl, r0, #20
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	495a      	ldr	r1, [pc, #360]	; (800b338 <__gethex+0x2d8>)
 800b1ce:	f8cd a004 	str.w	sl, [sp, #4]
 800b1d2:	469b      	mov	fp, r3
 800b1d4:	45a8      	cmp	r8, r5
 800b1d6:	d342      	bcc.n	800b25e <__gethex+0x1fe>
 800b1d8:	9801      	ldr	r0, [sp, #4]
 800b1da:	f840 bb04 	str.w	fp, [r0], #4
 800b1de:	eba0 000a 	sub.w	r0, r0, sl
 800b1e2:	1080      	asrs	r0, r0, #2
 800b1e4:	6120      	str	r0, [r4, #16]
 800b1e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b1ea:	4658      	mov	r0, fp
 800b1ec:	f7fe f9f0 	bl	80095d0 <__hi0bits>
 800b1f0:	683d      	ldr	r5, [r7, #0]
 800b1f2:	eba8 0000 	sub.w	r0, r8, r0
 800b1f6:	42a8      	cmp	r0, r5
 800b1f8:	dd59      	ble.n	800b2ae <__gethex+0x24e>
 800b1fa:	eba0 0805 	sub.w	r8, r0, r5
 800b1fe:	4641      	mov	r1, r8
 800b200:	4620      	mov	r0, r4
 800b202:	f7fe fd7f 	bl	8009d04 <__any_on>
 800b206:	4683      	mov	fp, r0
 800b208:	b1b8      	cbz	r0, 800b23a <__gethex+0x1da>
 800b20a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b20e:	1159      	asrs	r1, r3, #5
 800b210:	f003 021f 	and.w	r2, r3, #31
 800b214:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b218:	f04f 0b01 	mov.w	fp, #1
 800b21c:	fa0b f202 	lsl.w	r2, fp, r2
 800b220:	420a      	tst	r2, r1
 800b222:	d00a      	beq.n	800b23a <__gethex+0x1da>
 800b224:	455b      	cmp	r3, fp
 800b226:	dd06      	ble.n	800b236 <__gethex+0x1d6>
 800b228:	f1a8 0102 	sub.w	r1, r8, #2
 800b22c:	4620      	mov	r0, r4
 800b22e:	f7fe fd69 	bl	8009d04 <__any_on>
 800b232:	2800      	cmp	r0, #0
 800b234:	d138      	bne.n	800b2a8 <__gethex+0x248>
 800b236:	f04f 0b02 	mov.w	fp, #2
 800b23a:	4641      	mov	r1, r8
 800b23c:	4620      	mov	r0, r4
 800b23e:	f7ff fea7 	bl	800af90 <rshift>
 800b242:	4446      	add	r6, r8
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	42b3      	cmp	r3, r6
 800b248:	da41      	bge.n	800b2ce <__gethex+0x26e>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4648      	mov	r0, r9
 800b24e:	f7fe f90d 	bl	800946c <_Bfree>
 800b252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b254:	2300      	movs	r3, #0
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b25c:	e78a      	b.n	800b174 <__gethex+0x114>
 800b25e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b262:	2a2e      	cmp	r2, #46	; 0x2e
 800b264:	d014      	beq.n	800b290 <__gethex+0x230>
 800b266:	2b20      	cmp	r3, #32
 800b268:	d106      	bne.n	800b278 <__gethex+0x218>
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	f843 bb04 	str.w	fp, [r3], #4
 800b270:	f04f 0b00 	mov.w	fp, #0
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	465b      	mov	r3, fp
 800b278:	7828      	ldrb	r0, [r5, #0]
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	f7ff feda 	bl	800b034 <__hexdig_fun>
 800b280:	9b03      	ldr	r3, [sp, #12]
 800b282:	f000 000f 	and.w	r0, r0, #15
 800b286:	4098      	lsls	r0, r3
 800b288:	ea4b 0b00 	orr.w	fp, fp, r0
 800b28c:	3304      	adds	r3, #4
 800b28e:	e7a1      	b.n	800b1d4 <__gethex+0x174>
 800b290:	45a8      	cmp	r8, r5
 800b292:	d8e8      	bhi.n	800b266 <__gethex+0x206>
 800b294:	2201      	movs	r2, #1
 800b296:	4628      	mov	r0, r5
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	f7ff fe0b 	bl	800aeb4 <strncmp>
 800b29e:	4926      	ldr	r1, [pc, #152]	; (800b338 <__gethex+0x2d8>)
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d1df      	bne.n	800b266 <__gethex+0x206>
 800b2a6:	e795      	b.n	800b1d4 <__gethex+0x174>
 800b2a8:	f04f 0b03 	mov.w	fp, #3
 800b2ac:	e7c5      	b.n	800b23a <__gethex+0x1da>
 800b2ae:	da0b      	bge.n	800b2c8 <__gethex+0x268>
 800b2b0:	eba5 0800 	sub.w	r8, r5, r0
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4642      	mov	r2, r8
 800b2b8:	4648      	mov	r0, r9
 800b2ba:	f7fe faf1 	bl	80098a0 <__lshift>
 800b2be:	eba6 0608 	sub.w	r6, r6, r8
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	f100 0a14 	add.w	sl, r0, #20
 800b2c8:	f04f 0b00 	mov.w	fp, #0
 800b2cc:	e7ba      	b.n	800b244 <__gethex+0x1e4>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	42b3      	cmp	r3, r6
 800b2d2:	dd73      	ble.n	800b3bc <__gethex+0x35c>
 800b2d4:	1b9e      	subs	r6, r3, r6
 800b2d6:	42b5      	cmp	r5, r6
 800b2d8:	dc34      	bgt.n	800b344 <__gethex+0x2e4>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d023      	beq.n	800b328 <__gethex+0x2c8>
 800b2e0:	2b03      	cmp	r3, #3
 800b2e2:	d025      	beq.n	800b330 <__gethex+0x2d0>
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d115      	bne.n	800b314 <__gethex+0x2b4>
 800b2e8:	42b5      	cmp	r5, r6
 800b2ea:	d113      	bne.n	800b314 <__gethex+0x2b4>
 800b2ec:	2d01      	cmp	r5, #1
 800b2ee:	d10b      	bne.n	800b308 <__gethex+0x2a8>
 800b2f0:	9a02      	ldr	r2, [sp, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6013      	str	r3, [r2, #0]
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	f8ca 3000 	str.w	r3, [sl]
 800b2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b300:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b304:	601c      	str	r4, [r3, #0]
 800b306:	e735      	b.n	800b174 <__gethex+0x114>
 800b308:	1e69      	subs	r1, r5, #1
 800b30a:	4620      	mov	r0, r4
 800b30c:	f7fe fcfa 	bl	8009d04 <__any_on>
 800b310:	2800      	cmp	r0, #0
 800b312:	d1ed      	bne.n	800b2f0 <__gethex+0x290>
 800b314:	4621      	mov	r1, r4
 800b316:	4648      	mov	r0, r9
 800b318:	f7fe f8a8 	bl	800946c <_Bfree>
 800b31c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b31e:	2300      	movs	r3, #0
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b326:	e725      	b.n	800b174 <__gethex+0x114>
 800b328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f2      	bne.n	800b314 <__gethex+0x2b4>
 800b32e:	e7df      	b.n	800b2f0 <__gethex+0x290>
 800b330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1dc      	bne.n	800b2f0 <__gethex+0x290>
 800b336:	e7ed      	b.n	800b314 <__gethex+0x2b4>
 800b338:	0800bffc 	.word	0x0800bffc
 800b33c:	0800be95 	.word	0x0800be95
 800b340:	0800c1a6 	.word	0x0800c1a6
 800b344:	f106 38ff 	add.w	r8, r6, #4294967295
 800b348:	f1bb 0f00 	cmp.w	fp, #0
 800b34c:	d133      	bne.n	800b3b6 <__gethex+0x356>
 800b34e:	f1b8 0f00 	cmp.w	r8, #0
 800b352:	d004      	beq.n	800b35e <__gethex+0x2fe>
 800b354:	4641      	mov	r1, r8
 800b356:	4620      	mov	r0, r4
 800b358:	f7fe fcd4 	bl	8009d04 <__any_on>
 800b35c:	4683      	mov	fp, r0
 800b35e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b362:	2301      	movs	r3, #1
 800b364:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b368:	f008 081f 	and.w	r8, r8, #31
 800b36c:	fa03 f308 	lsl.w	r3, r3, r8
 800b370:	4213      	tst	r3, r2
 800b372:	4631      	mov	r1, r6
 800b374:	4620      	mov	r0, r4
 800b376:	bf18      	it	ne
 800b378:	f04b 0b02 	orrne.w	fp, fp, #2
 800b37c:	1bad      	subs	r5, r5, r6
 800b37e:	f7ff fe07 	bl	800af90 <rshift>
 800b382:	687e      	ldr	r6, [r7, #4]
 800b384:	f04f 0802 	mov.w	r8, #2
 800b388:	f1bb 0f00 	cmp.w	fp, #0
 800b38c:	d04a      	beq.n	800b424 <__gethex+0x3c4>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b02      	cmp	r3, #2
 800b392:	d016      	beq.n	800b3c2 <__gethex+0x362>
 800b394:	2b03      	cmp	r3, #3
 800b396:	d018      	beq.n	800b3ca <__gethex+0x36a>
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d109      	bne.n	800b3b0 <__gethex+0x350>
 800b39c:	f01b 0f02 	tst.w	fp, #2
 800b3a0:	d006      	beq.n	800b3b0 <__gethex+0x350>
 800b3a2:	f8da 3000 	ldr.w	r3, [sl]
 800b3a6:	ea4b 0b03 	orr.w	fp, fp, r3
 800b3aa:	f01b 0f01 	tst.w	fp, #1
 800b3ae:	d10f      	bne.n	800b3d0 <__gethex+0x370>
 800b3b0:	f048 0810 	orr.w	r8, r8, #16
 800b3b4:	e036      	b.n	800b424 <__gethex+0x3c4>
 800b3b6:	f04f 0b01 	mov.w	fp, #1
 800b3ba:	e7d0      	b.n	800b35e <__gethex+0x2fe>
 800b3bc:	f04f 0801 	mov.w	r8, #1
 800b3c0:	e7e2      	b.n	800b388 <__gethex+0x328>
 800b3c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3c4:	f1c3 0301 	rsb	r3, r3, #1
 800b3c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0ef      	beq.n	800b3b0 <__gethex+0x350>
 800b3d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3d4:	f104 0214 	add.w	r2, r4, #20
 800b3d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	4694      	mov	ip, r2
 800b3e6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b3ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b3ee:	d01e      	beq.n	800b42e <__gethex+0x3ce>
 800b3f0:	3101      	adds	r1, #1
 800b3f2:	f8cc 1000 	str.w	r1, [ip]
 800b3f6:	f1b8 0f02 	cmp.w	r8, #2
 800b3fa:	f104 0214 	add.w	r2, r4, #20
 800b3fe:	d13d      	bne.n	800b47c <__gethex+0x41c>
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	3b01      	subs	r3, #1
 800b404:	42ab      	cmp	r3, r5
 800b406:	d10b      	bne.n	800b420 <__gethex+0x3c0>
 800b408:	1169      	asrs	r1, r5, #5
 800b40a:	2301      	movs	r3, #1
 800b40c:	f005 051f 	and.w	r5, r5, #31
 800b410:	fa03 f505 	lsl.w	r5, r3, r5
 800b414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b418:	421d      	tst	r5, r3
 800b41a:	bf18      	it	ne
 800b41c:	f04f 0801 	movne.w	r8, #1
 800b420:	f048 0820 	orr.w	r8, r8, #32
 800b424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b426:	601c      	str	r4, [r3, #0]
 800b428:	9b02      	ldr	r3, [sp, #8]
 800b42a:	601e      	str	r6, [r3, #0]
 800b42c:	e6a2      	b.n	800b174 <__gethex+0x114>
 800b42e:	4290      	cmp	r0, r2
 800b430:	f842 3c04 	str.w	r3, [r2, #-4]
 800b434:	d8d6      	bhi.n	800b3e4 <__gethex+0x384>
 800b436:	68a2      	ldr	r2, [r4, #8]
 800b438:	4593      	cmp	fp, r2
 800b43a:	db17      	blt.n	800b46c <__gethex+0x40c>
 800b43c:	6861      	ldr	r1, [r4, #4]
 800b43e:	4648      	mov	r0, r9
 800b440:	3101      	adds	r1, #1
 800b442:	f7fd ffd3 	bl	80093ec <_Balloc>
 800b446:	4682      	mov	sl, r0
 800b448:	b918      	cbnz	r0, 800b452 <__gethex+0x3f2>
 800b44a:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <__gethex+0x458>)
 800b44c:	4602      	mov	r2, r0
 800b44e:	2184      	movs	r1, #132	; 0x84
 800b450:	e6b3      	b.n	800b1ba <__gethex+0x15a>
 800b452:	6922      	ldr	r2, [r4, #16]
 800b454:	3202      	adds	r2, #2
 800b456:	f104 010c 	add.w	r1, r4, #12
 800b45a:	0092      	lsls	r2, r2, #2
 800b45c:	300c      	adds	r0, #12
 800b45e:	f7ff fd4b 	bl	800aef8 <memcpy>
 800b462:	4621      	mov	r1, r4
 800b464:	4648      	mov	r0, r9
 800b466:	f7fe f801 	bl	800946c <_Bfree>
 800b46a:	4654      	mov	r4, sl
 800b46c:	6922      	ldr	r2, [r4, #16]
 800b46e:	1c51      	adds	r1, r2, #1
 800b470:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b474:	6121      	str	r1, [r4, #16]
 800b476:	2101      	movs	r1, #1
 800b478:	6151      	str	r1, [r2, #20]
 800b47a:	e7bc      	b.n	800b3f6 <__gethex+0x396>
 800b47c:	6921      	ldr	r1, [r4, #16]
 800b47e:	4559      	cmp	r1, fp
 800b480:	dd0b      	ble.n	800b49a <__gethex+0x43a>
 800b482:	2101      	movs	r1, #1
 800b484:	4620      	mov	r0, r4
 800b486:	f7ff fd83 	bl	800af90 <rshift>
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	3601      	adds	r6, #1
 800b48e:	42b3      	cmp	r3, r6
 800b490:	f6ff aedb 	blt.w	800b24a <__gethex+0x1ea>
 800b494:	f04f 0801 	mov.w	r8, #1
 800b498:	e7c2      	b.n	800b420 <__gethex+0x3c0>
 800b49a:	f015 051f 	ands.w	r5, r5, #31
 800b49e:	d0f9      	beq.n	800b494 <__gethex+0x434>
 800b4a0:	9b01      	ldr	r3, [sp, #4]
 800b4a2:	441a      	add	r2, r3
 800b4a4:	f1c5 0520 	rsb	r5, r5, #32
 800b4a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b4ac:	f7fe f890 	bl	80095d0 <__hi0bits>
 800b4b0:	42a8      	cmp	r0, r5
 800b4b2:	dbe6      	blt.n	800b482 <__gethex+0x422>
 800b4b4:	e7ee      	b.n	800b494 <__gethex+0x434>
 800b4b6:	bf00      	nop
 800b4b8:	0800be95 	.word	0x0800be95

0800b4bc <L_shift>:
 800b4bc:	f1c2 0208 	rsb	r2, r2, #8
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	b570      	push	{r4, r5, r6, lr}
 800b4c4:	f1c2 0620 	rsb	r6, r2, #32
 800b4c8:	6843      	ldr	r3, [r0, #4]
 800b4ca:	6804      	ldr	r4, [r0, #0]
 800b4cc:	fa03 f506 	lsl.w	r5, r3, r6
 800b4d0:	432c      	orrs	r4, r5
 800b4d2:	40d3      	lsrs	r3, r2
 800b4d4:	6004      	str	r4, [r0, #0]
 800b4d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4da:	4288      	cmp	r0, r1
 800b4dc:	d3f4      	bcc.n	800b4c8 <L_shift+0xc>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}

0800b4e0 <__match>:
 800b4e0:	b530      	push	{r4, r5, lr}
 800b4e2:	6803      	ldr	r3, [r0, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ea:	b914      	cbnz	r4, 800b4f2 <__match+0x12>
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	bd30      	pop	{r4, r5, pc}
 800b4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b4fa:	2d19      	cmp	r5, #25
 800b4fc:	bf98      	it	ls
 800b4fe:	3220      	addls	r2, #32
 800b500:	42a2      	cmp	r2, r4
 800b502:	d0f0      	beq.n	800b4e6 <__match+0x6>
 800b504:	2000      	movs	r0, #0
 800b506:	e7f3      	b.n	800b4f0 <__match+0x10>

0800b508 <__hexnan>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	680b      	ldr	r3, [r1, #0]
 800b50e:	6801      	ldr	r1, [r0, #0]
 800b510:	115e      	asrs	r6, r3, #5
 800b512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b516:	f013 031f 	ands.w	r3, r3, #31
 800b51a:	b087      	sub	sp, #28
 800b51c:	bf18      	it	ne
 800b51e:	3604      	addne	r6, #4
 800b520:	2500      	movs	r5, #0
 800b522:	1f37      	subs	r7, r6, #4
 800b524:	4682      	mov	sl, r0
 800b526:	4690      	mov	r8, r2
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b52e:	46b9      	mov	r9, r7
 800b530:	463c      	mov	r4, r7
 800b532:	9502      	str	r5, [sp, #8]
 800b534:	46ab      	mov	fp, r5
 800b536:	784a      	ldrb	r2, [r1, #1]
 800b538:	1c4b      	adds	r3, r1, #1
 800b53a:	9303      	str	r3, [sp, #12]
 800b53c:	b342      	cbz	r2, 800b590 <__hexnan+0x88>
 800b53e:	4610      	mov	r0, r2
 800b540:	9105      	str	r1, [sp, #20]
 800b542:	9204      	str	r2, [sp, #16]
 800b544:	f7ff fd76 	bl	800b034 <__hexdig_fun>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d14f      	bne.n	800b5ec <__hexnan+0xe4>
 800b54c:	9a04      	ldr	r2, [sp, #16]
 800b54e:	9905      	ldr	r1, [sp, #20]
 800b550:	2a20      	cmp	r2, #32
 800b552:	d818      	bhi.n	800b586 <__hexnan+0x7e>
 800b554:	9b02      	ldr	r3, [sp, #8]
 800b556:	459b      	cmp	fp, r3
 800b558:	dd13      	ble.n	800b582 <__hexnan+0x7a>
 800b55a:	454c      	cmp	r4, r9
 800b55c:	d206      	bcs.n	800b56c <__hexnan+0x64>
 800b55e:	2d07      	cmp	r5, #7
 800b560:	dc04      	bgt.n	800b56c <__hexnan+0x64>
 800b562:	462a      	mov	r2, r5
 800b564:	4649      	mov	r1, r9
 800b566:	4620      	mov	r0, r4
 800b568:	f7ff ffa8 	bl	800b4bc <L_shift>
 800b56c:	4544      	cmp	r4, r8
 800b56e:	d950      	bls.n	800b612 <__hexnan+0x10a>
 800b570:	2300      	movs	r3, #0
 800b572:	f1a4 0904 	sub.w	r9, r4, #4
 800b576:	f844 3c04 	str.w	r3, [r4, #-4]
 800b57a:	f8cd b008 	str.w	fp, [sp, #8]
 800b57e:	464c      	mov	r4, r9
 800b580:	461d      	mov	r5, r3
 800b582:	9903      	ldr	r1, [sp, #12]
 800b584:	e7d7      	b.n	800b536 <__hexnan+0x2e>
 800b586:	2a29      	cmp	r2, #41	; 0x29
 800b588:	d155      	bne.n	800b636 <__hexnan+0x12e>
 800b58a:	3102      	adds	r1, #2
 800b58c:	f8ca 1000 	str.w	r1, [sl]
 800b590:	f1bb 0f00 	cmp.w	fp, #0
 800b594:	d04f      	beq.n	800b636 <__hexnan+0x12e>
 800b596:	454c      	cmp	r4, r9
 800b598:	d206      	bcs.n	800b5a8 <__hexnan+0xa0>
 800b59a:	2d07      	cmp	r5, #7
 800b59c:	dc04      	bgt.n	800b5a8 <__hexnan+0xa0>
 800b59e:	462a      	mov	r2, r5
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f7ff ff8a 	bl	800b4bc <L_shift>
 800b5a8:	4544      	cmp	r4, r8
 800b5aa:	d934      	bls.n	800b616 <__hexnan+0x10e>
 800b5ac:	f1a8 0204 	sub.w	r2, r8, #4
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5ba:	429f      	cmp	r7, r3
 800b5bc:	d2f9      	bcs.n	800b5b2 <__hexnan+0xaa>
 800b5be:	1b3b      	subs	r3, r7, r4
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	3e03      	subs	r6, #3
 800b5c8:	3401      	adds	r4, #1
 800b5ca:	42a6      	cmp	r6, r4
 800b5cc:	bf38      	it	cc
 800b5ce:	2304      	movcc	r3, #4
 800b5d0:	4443      	add	r3, r8
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f843 2b04 	str.w	r2, [r3], #4
 800b5d8:	429f      	cmp	r7, r3
 800b5da:	d2fb      	bcs.n	800b5d4 <__hexnan+0xcc>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	b91b      	cbnz	r3, 800b5e8 <__hexnan+0xe0>
 800b5e0:	4547      	cmp	r7, r8
 800b5e2:	d126      	bne.n	800b632 <__hexnan+0x12a>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	2005      	movs	r0, #5
 800b5ea:	e025      	b.n	800b638 <__hexnan+0x130>
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	2d08      	cmp	r5, #8
 800b5f0:	f10b 0b01 	add.w	fp, fp, #1
 800b5f4:	dd06      	ble.n	800b604 <__hexnan+0xfc>
 800b5f6:	4544      	cmp	r4, r8
 800b5f8:	d9c3      	bls.n	800b582 <__hexnan+0x7a>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b600:	2501      	movs	r5, #1
 800b602:	3c04      	subs	r4, #4
 800b604:	6822      	ldr	r2, [r4, #0]
 800b606:	f000 000f 	and.w	r0, r0, #15
 800b60a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b60e:	6020      	str	r0, [r4, #0]
 800b610:	e7b7      	b.n	800b582 <__hexnan+0x7a>
 800b612:	2508      	movs	r5, #8
 800b614:	e7b5      	b.n	800b582 <__hexnan+0x7a>
 800b616:	9b01      	ldr	r3, [sp, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d0df      	beq.n	800b5dc <__hexnan+0xd4>
 800b61c:	f1c3 0320 	rsb	r3, r3, #32
 800b620:	f04f 32ff 	mov.w	r2, #4294967295
 800b624:	40da      	lsrs	r2, r3
 800b626:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b62a:	4013      	ands	r3, r2
 800b62c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b630:	e7d4      	b.n	800b5dc <__hexnan+0xd4>
 800b632:	3f04      	subs	r7, #4
 800b634:	e7d2      	b.n	800b5dc <__hexnan+0xd4>
 800b636:	2004      	movs	r0, #4
 800b638:	b007      	add	sp, #28
 800b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b63e <__ascii_mbtowc>:
 800b63e:	b082      	sub	sp, #8
 800b640:	b901      	cbnz	r1, 800b644 <__ascii_mbtowc+0x6>
 800b642:	a901      	add	r1, sp, #4
 800b644:	b142      	cbz	r2, 800b658 <__ascii_mbtowc+0x1a>
 800b646:	b14b      	cbz	r3, 800b65c <__ascii_mbtowc+0x1e>
 800b648:	7813      	ldrb	r3, [r2, #0]
 800b64a:	600b      	str	r3, [r1, #0]
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	1e10      	subs	r0, r2, #0
 800b650:	bf18      	it	ne
 800b652:	2001      	movne	r0, #1
 800b654:	b002      	add	sp, #8
 800b656:	4770      	bx	lr
 800b658:	4610      	mov	r0, r2
 800b65a:	e7fb      	b.n	800b654 <__ascii_mbtowc+0x16>
 800b65c:	f06f 0001 	mvn.w	r0, #1
 800b660:	e7f8      	b.n	800b654 <__ascii_mbtowc+0x16>

0800b662 <_realloc_r>:
 800b662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	4680      	mov	r8, r0
 800b668:	4614      	mov	r4, r2
 800b66a:	460e      	mov	r6, r1
 800b66c:	b921      	cbnz	r1, 800b678 <_realloc_r+0x16>
 800b66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b672:	4611      	mov	r1, r2
 800b674:	f7fd be2e 	b.w	80092d4 <_malloc_r>
 800b678:	b92a      	cbnz	r2, 800b686 <_realloc_r+0x24>
 800b67a:	f7fd fdb7 	bl	80091ec <_free_r>
 800b67e:	4625      	mov	r5, r4
 800b680:	4628      	mov	r0, r5
 800b682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b686:	f000 f842 	bl	800b70e <_malloc_usable_size_r>
 800b68a:	4284      	cmp	r4, r0
 800b68c:	4607      	mov	r7, r0
 800b68e:	d802      	bhi.n	800b696 <_realloc_r+0x34>
 800b690:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b694:	d812      	bhi.n	800b6bc <_realloc_r+0x5a>
 800b696:	4621      	mov	r1, r4
 800b698:	4640      	mov	r0, r8
 800b69a:	f7fd fe1b 	bl	80092d4 <_malloc_r>
 800b69e:	4605      	mov	r5, r0
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d0ed      	beq.n	800b680 <_realloc_r+0x1e>
 800b6a4:	42bc      	cmp	r4, r7
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	bf28      	it	cs
 800b6ac:	463a      	movcs	r2, r7
 800b6ae:	f7ff fc23 	bl	800aef8 <memcpy>
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	f7fd fd99 	bl	80091ec <_free_r>
 800b6ba:	e7e1      	b.n	800b680 <_realloc_r+0x1e>
 800b6bc:	4635      	mov	r5, r6
 800b6be:	e7df      	b.n	800b680 <_realloc_r+0x1e>

0800b6c0 <__ascii_wctomb>:
 800b6c0:	b149      	cbz	r1, 800b6d6 <__ascii_wctomb+0x16>
 800b6c2:	2aff      	cmp	r2, #255	; 0xff
 800b6c4:	bf85      	ittet	hi
 800b6c6:	238a      	movhi	r3, #138	; 0x8a
 800b6c8:	6003      	strhi	r3, [r0, #0]
 800b6ca:	700a      	strbls	r2, [r1, #0]
 800b6cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6d0:	bf98      	it	ls
 800b6d2:	2001      	movls	r0, #1
 800b6d4:	4770      	bx	lr
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	4770      	bx	lr
	...

0800b6dc <fiprintf>:
 800b6dc:	b40e      	push	{r1, r2, r3}
 800b6de:	b503      	push	{r0, r1, lr}
 800b6e0:	4601      	mov	r1, r0
 800b6e2:	ab03      	add	r3, sp, #12
 800b6e4:	4805      	ldr	r0, [pc, #20]	; (800b6fc <fiprintf+0x20>)
 800b6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ea:	6800      	ldr	r0, [r0, #0]
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	f000 f83f 	bl	800b770 <_vfiprintf_r>
 800b6f2:	b002      	add	sp, #8
 800b6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f8:	b003      	add	sp, #12
 800b6fa:	4770      	bx	lr
 800b6fc:	20000064 	.word	0x20000064

0800b700 <abort>:
 800b700:	b508      	push	{r3, lr}
 800b702:	2006      	movs	r0, #6
 800b704:	f000 fa0c 	bl	800bb20 <raise>
 800b708:	2001      	movs	r0, #1
 800b70a:	f7f6 f9cb 	bl	8001aa4 <_exit>

0800b70e <_malloc_usable_size_r>:
 800b70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b712:	1f18      	subs	r0, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	bfbc      	itt	lt
 800b718:	580b      	ldrlt	r3, [r1, r0]
 800b71a:	18c0      	addlt	r0, r0, r3
 800b71c:	4770      	bx	lr

0800b71e <__sfputc_r>:
 800b71e:	6893      	ldr	r3, [r2, #8]
 800b720:	3b01      	subs	r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	b410      	push	{r4}
 800b726:	6093      	str	r3, [r2, #8]
 800b728:	da08      	bge.n	800b73c <__sfputc_r+0x1e>
 800b72a:	6994      	ldr	r4, [r2, #24]
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	db01      	blt.n	800b734 <__sfputc_r+0x16>
 800b730:	290a      	cmp	r1, #10
 800b732:	d103      	bne.n	800b73c <__sfputc_r+0x1e>
 800b734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b738:	f000 b934 	b.w	800b9a4 <__swbuf_r>
 800b73c:	6813      	ldr	r3, [r2, #0]
 800b73e:	1c58      	adds	r0, r3, #1
 800b740:	6010      	str	r0, [r2, #0]
 800b742:	7019      	strb	r1, [r3, #0]
 800b744:	4608      	mov	r0, r1
 800b746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <__sfputs_r>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	4606      	mov	r6, r0
 800b750:	460f      	mov	r7, r1
 800b752:	4614      	mov	r4, r2
 800b754:	18d5      	adds	r5, r2, r3
 800b756:	42ac      	cmp	r4, r5
 800b758:	d101      	bne.n	800b75e <__sfputs_r+0x12>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e007      	b.n	800b76e <__sfputs_r+0x22>
 800b75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b762:	463a      	mov	r2, r7
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ffda 	bl	800b71e <__sfputc_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d1f3      	bne.n	800b756 <__sfputs_r+0xa>
 800b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b770 <_vfiprintf_r>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	460d      	mov	r5, r1
 800b776:	b09d      	sub	sp, #116	; 0x74
 800b778:	4614      	mov	r4, r2
 800b77a:	4698      	mov	r8, r3
 800b77c:	4606      	mov	r6, r0
 800b77e:	b118      	cbz	r0, 800b788 <_vfiprintf_r+0x18>
 800b780:	6a03      	ldr	r3, [r0, #32]
 800b782:	b90b      	cbnz	r3, 800b788 <_vfiprintf_r+0x18>
 800b784:	f7fc fd98 	bl	80082b8 <__sinit>
 800b788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b78a:	07d9      	lsls	r1, r3, #31
 800b78c:	d405      	bmi.n	800b79a <_vfiprintf_r+0x2a>
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	059a      	lsls	r2, r3, #22
 800b792:	d402      	bmi.n	800b79a <_vfiprintf_r+0x2a>
 800b794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b796:	f7fc fea6 	bl	80084e6 <__retarget_lock_acquire_recursive>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	071b      	lsls	r3, r3, #28
 800b79e:	d501      	bpl.n	800b7a4 <_vfiprintf_r+0x34>
 800b7a0:	692b      	ldr	r3, [r5, #16]
 800b7a2:	b99b      	cbnz	r3, 800b7cc <_vfiprintf_r+0x5c>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f000 f93a 	bl	800ba20 <__swsetup_r>
 800b7ac:	b170      	cbz	r0, 800b7cc <_vfiprintf_r+0x5c>
 800b7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b0:	07dc      	lsls	r4, r3, #31
 800b7b2:	d504      	bpl.n	800b7be <_vfiprintf_r+0x4e>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b8:	b01d      	add	sp, #116	; 0x74
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	0598      	lsls	r0, r3, #22
 800b7c2:	d4f7      	bmi.n	800b7b4 <_vfiprintf_r+0x44>
 800b7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7c6:	f7fc fe8f 	bl	80084e8 <__retarget_lock_release_recursive>
 800b7ca:	e7f3      	b.n	800b7b4 <_vfiprintf_r+0x44>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d0:	2320      	movs	r3, #32
 800b7d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7da:	2330      	movs	r3, #48	; 0x30
 800b7dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b990 <_vfiprintf_r+0x220>
 800b7e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7e4:	f04f 0901 	mov.w	r9, #1
 800b7e8:	4623      	mov	r3, r4
 800b7ea:	469a      	mov	sl, r3
 800b7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f0:	b10a      	cbz	r2, 800b7f6 <_vfiprintf_r+0x86>
 800b7f2:	2a25      	cmp	r2, #37	; 0x25
 800b7f4:	d1f9      	bne.n	800b7ea <_vfiprintf_r+0x7a>
 800b7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7fa:	d00b      	beq.n	800b814 <_vfiprintf_r+0xa4>
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	4622      	mov	r2, r4
 800b800:	4629      	mov	r1, r5
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ffa2 	bl	800b74c <__sfputs_r>
 800b808:	3001      	adds	r0, #1
 800b80a:	f000 80a9 	beq.w	800b960 <_vfiprintf_r+0x1f0>
 800b80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b810:	445a      	add	r2, fp
 800b812:	9209      	str	r2, [sp, #36]	; 0x24
 800b814:	f89a 3000 	ldrb.w	r3, [sl]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 80a1 	beq.w	800b960 <_vfiprintf_r+0x1f0>
 800b81e:	2300      	movs	r3, #0
 800b820:	f04f 32ff 	mov.w	r2, #4294967295
 800b824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b828:	f10a 0a01 	add.w	sl, sl, #1
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	9307      	str	r3, [sp, #28]
 800b830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b834:	931a      	str	r3, [sp, #104]	; 0x68
 800b836:	4654      	mov	r4, sl
 800b838:	2205      	movs	r2, #5
 800b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83e:	4854      	ldr	r0, [pc, #336]	; (800b990 <_vfiprintf_r+0x220>)
 800b840:	f7f4 fcc6 	bl	80001d0 <memchr>
 800b844:	9a04      	ldr	r2, [sp, #16]
 800b846:	b9d8      	cbnz	r0, 800b880 <_vfiprintf_r+0x110>
 800b848:	06d1      	lsls	r1, r2, #27
 800b84a:	bf44      	itt	mi
 800b84c:	2320      	movmi	r3, #32
 800b84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b852:	0713      	lsls	r3, r2, #28
 800b854:	bf44      	itt	mi
 800b856:	232b      	movmi	r3, #43	; 0x2b
 800b858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b85c:	f89a 3000 	ldrb.w	r3, [sl]
 800b860:	2b2a      	cmp	r3, #42	; 0x2a
 800b862:	d015      	beq.n	800b890 <_vfiprintf_r+0x120>
 800b864:	9a07      	ldr	r2, [sp, #28]
 800b866:	4654      	mov	r4, sl
 800b868:	2000      	movs	r0, #0
 800b86a:	f04f 0c0a 	mov.w	ip, #10
 800b86e:	4621      	mov	r1, r4
 800b870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b874:	3b30      	subs	r3, #48	; 0x30
 800b876:	2b09      	cmp	r3, #9
 800b878:	d94d      	bls.n	800b916 <_vfiprintf_r+0x1a6>
 800b87a:	b1b0      	cbz	r0, 800b8aa <_vfiprintf_r+0x13a>
 800b87c:	9207      	str	r2, [sp, #28]
 800b87e:	e014      	b.n	800b8aa <_vfiprintf_r+0x13a>
 800b880:	eba0 0308 	sub.w	r3, r0, r8
 800b884:	fa09 f303 	lsl.w	r3, r9, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	46a2      	mov	sl, r4
 800b88e:	e7d2      	b.n	800b836 <_vfiprintf_r+0xc6>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	1d19      	adds	r1, r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	9103      	str	r1, [sp, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bfbb      	ittet	lt
 800b89c:	425b      	neglt	r3, r3
 800b89e:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a2:	9307      	strge	r3, [sp, #28]
 800b8a4:	9307      	strlt	r3, [sp, #28]
 800b8a6:	bfb8      	it	lt
 800b8a8:	9204      	strlt	r2, [sp, #16]
 800b8aa:	7823      	ldrb	r3, [r4, #0]
 800b8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ae:	d10c      	bne.n	800b8ca <_vfiprintf_r+0x15a>
 800b8b0:	7863      	ldrb	r3, [r4, #1]
 800b8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b4:	d134      	bne.n	800b920 <_vfiprintf_r+0x1b0>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	1d1a      	adds	r2, r3, #4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	9203      	str	r2, [sp, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfb8      	it	lt
 800b8c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8c6:	3402      	adds	r4, #2
 800b8c8:	9305      	str	r3, [sp, #20]
 800b8ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b9a0 <_vfiprintf_r+0x230>
 800b8ce:	7821      	ldrb	r1, [r4, #0]
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	f7f4 fc7c 	bl	80001d0 <memchr>
 800b8d8:	b138      	cbz	r0, 800b8ea <_vfiprintf_r+0x17a>
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	eba0 000a 	sub.w	r0, r0, sl
 800b8e0:	2240      	movs	r2, #64	; 0x40
 800b8e2:	4082      	lsls	r2, r0
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	9304      	str	r3, [sp, #16]
 800b8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ee:	4829      	ldr	r0, [pc, #164]	; (800b994 <_vfiprintf_r+0x224>)
 800b8f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8f4:	2206      	movs	r2, #6
 800b8f6:	f7f4 fc6b 	bl	80001d0 <memchr>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d03f      	beq.n	800b97e <_vfiprintf_r+0x20e>
 800b8fe:	4b26      	ldr	r3, [pc, #152]	; (800b998 <_vfiprintf_r+0x228>)
 800b900:	bb1b      	cbnz	r3, 800b94a <_vfiprintf_r+0x1da>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	3307      	adds	r3, #7
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	3308      	adds	r3, #8
 800b90c:	9303      	str	r3, [sp, #12]
 800b90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b910:	443b      	add	r3, r7
 800b912:	9309      	str	r3, [sp, #36]	; 0x24
 800b914:	e768      	b.n	800b7e8 <_vfiprintf_r+0x78>
 800b916:	fb0c 3202 	mla	r2, ip, r2, r3
 800b91a:	460c      	mov	r4, r1
 800b91c:	2001      	movs	r0, #1
 800b91e:	e7a6      	b.n	800b86e <_vfiprintf_r+0xfe>
 800b920:	2300      	movs	r3, #0
 800b922:	3401      	adds	r4, #1
 800b924:	9305      	str	r3, [sp, #20]
 800b926:	4619      	mov	r1, r3
 800b928:	f04f 0c0a 	mov.w	ip, #10
 800b92c:	4620      	mov	r0, r4
 800b92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b932:	3a30      	subs	r2, #48	; 0x30
 800b934:	2a09      	cmp	r2, #9
 800b936:	d903      	bls.n	800b940 <_vfiprintf_r+0x1d0>
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0c6      	beq.n	800b8ca <_vfiprintf_r+0x15a>
 800b93c:	9105      	str	r1, [sp, #20]
 800b93e:	e7c4      	b.n	800b8ca <_vfiprintf_r+0x15a>
 800b940:	fb0c 2101 	mla	r1, ip, r1, r2
 800b944:	4604      	mov	r4, r0
 800b946:	2301      	movs	r3, #1
 800b948:	e7f0      	b.n	800b92c <_vfiprintf_r+0x1bc>
 800b94a:	ab03      	add	r3, sp, #12
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	462a      	mov	r2, r5
 800b950:	4b12      	ldr	r3, [pc, #72]	; (800b99c <_vfiprintf_r+0x22c>)
 800b952:	a904      	add	r1, sp, #16
 800b954:	4630      	mov	r0, r6
 800b956:	f7fb fe4d 	bl	80075f4 <_printf_float>
 800b95a:	4607      	mov	r7, r0
 800b95c:	1c78      	adds	r0, r7, #1
 800b95e:	d1d6      	bne.n	800b90e <_vfiprintf_r+0x19e>
 800b960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b962:	07d9      	lsls	r1, r3, #31
 800b964:	d405      	bmi.n	800b972 <_vfiprintf_r+0x202>
 800b966:	89ab      	ldrh	r3, [r5, #12]
 800b968:	059a      	lsls	r2, r3, #22
 800b96a:	d402      	bmi.n	800b972 <_vfiprintf_r+0x202>
 800b96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b96e:	f7fc fdbb 	bl	80084e8 <__retarget_lock_release_recursive>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	065b      	lsls	r3, r3, #25
 800b976:	f53f af1d 	bmi.w	800b7b4 <_vfiprintf_r+0x44>
 800b97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b97c:	e71c      	b.n	800b7b8 <_vfiprintf_r+0x48>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4b05      	ldr	r3, [pc, #20]	; (800b99c <_vfiprintf_r+0x22c>)
 800b986:	a904      	add	r1, sp, #16
 800b988:	4630      	mov	r0, r6
 800b98a:	f7fc f8d7 	bl	8007b3c <_printf_i>
 800b98e:	e7e4      	b.n	800b95a <_vfiprintf_r+0x1ea>
 800b990:	0800c151 	.word	0x0800c151
 800b994:	0800c15b 	.word	0x0800c15b
 800b998:	080075f5 	.word	0x080075f5
 800b99c:	0800b74d 	.word	0x0800b74d
 800b9a0:	0800c157 	.word	0x0800c157

0800b9a4 <__swbuf_r>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	460e      	mov	r6, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	b118      	cbz	r0, 800b9b6 <__swbuf_r+0x12>
 800b9ae:	6a03      	ldr	r3, [r0, #32]
 800b9b0:	b90b      	cbnz	r3, 800b9b6 <__swbuf_r+0x12>
 800b9b2:	f7fc fc81 	bl	80082b8 <__sinit>
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	071a      	lsls	r2, r3, #28
 800b9be:	d525      	bpl.n	800ba0c <__swbuf_r+0x68>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	b31b      	cbz	r3, 800ba0c <__swbuf_r+0x68>
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	6922      	ldr	r2, [r4, #16]
 800b9c8:	1a98      	subs	r0, r3, r2
 800b9ca:	6963      	ldr	r3, [r4, #20]
 800b9cc:	b2f6      	uxtb	r6, r6
 800b9ce:	4283      	cmp	r3, r0
 800b9d0:	4637      	mov	r7, r6
 800b9d2:	dc04      	bgt.n	800b9de <__swbuf_r+0x3a>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f7ff fa2a 	bl	800ae30 <_fflush_r>
 800b9dc:	b9e0      	cbnz	r0, 800ba18 <__swbuf_r+0x74>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	60a3      	str	r3, [r4, #8]
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	701e      	strb	r6, [r3, #0]
 800b9ec:	6962      	ldr	r2, [r4, #20]
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d004      	beq.n	800b9fe <__swbuf_r+0x5a>
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	07db      	lsls	r3, r3, #31
 800b9f8:	d506      	bpl.n	800ba08 <__swbuf_r+0x64>
 800b9fa:	2e0a      	cmp	r6, #10
 800b9fc:	d104      	bne.n	800ba08 <__swbuf_r+0x64>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f7ff fa15 	bl	800ae30 <_fflush_r>
 800ba06:	b938      	cbnz	r0, 800ba18 <__swbuf_r+0x74>
 800ba08:	4638      	mov	r0, r7
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 f806 	bl	800ba20 <__swsetup_r>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d0d5      	beq.n	800b9c4 <__swbuf_r+0x20>
 800ba18:	f04f 37ff 	mov.w	r7, #4294967295
 800ba1c:	e7f4      	b.n	800ba08 <__swbuf_r+0x64>
	...

0800ba20 <__swsetup_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4b2a      	ldr	r3, [pc, #168]	; (800bacc <__swsetup_r+0xac>)
 800ba24:	4605      	mov	r5, r0
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	460c      	mov	r4, r1
 800ba2a:	b118      	cbz	r0, 800ba34 <__swsetup_r+0x14>
 800ba2c:	6a03      	ldr	r3, [r0, #32]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <__swsetup_r+0x14>
 800ba30:	f7fc fc42 	bl	80082b8 <__sinit>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba3a:	0718      	lsls	r0, r3, #28
 800ba3c:	d422      	bmi.n	800ba84 <__swsetup_r+0x64>
 800ba3e:	06d9      	lsls	r1, r3, #27
 800ba40:	d407      	bmi.n	800ba52 <__swsetup_r+0x32>
 800ba42:	2309      	movs	r3, #9
 800ba44:	602b      	str	r3, [r5, #0]
 800ba46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba4a:	81a3      	strh	r3, [r4, #12]
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	e034      	b.n	800babc <__swsetup_r+0x9c>
 800ba52:	0758      	lsls	r0, r3, #29
 800ba54:	d512      	bpl.n	800ba7c <__swsetup_r+0x5c>
 800ba56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba58:	b141      	cbz	r1, 800ba6c <__swsetup_r+0x4c>
 800ba5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	d002      	beq.n	800ba68 <__swsetup_r+0x48>
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7fd fbc2 	bl	80091ec <_free_r>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6363      	str	r3, [r4, #52]	; 0x34
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	2300      	movs	r3, #0
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f043 0308 	orr.w	r3, r3, #8
 800ba82:	81a3      	strh	r3, [r4, #12]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	b94b      	cbnz	r3, 800ba9c <__swsetup_r+0x7c>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba92:	d003      	beq.n	800ba9c <__swsetup_r+0x7c>
 800ba94:	4621      	mov	r1, r4
 800ba96:	4628      	mov	r0, r5
 800ba98:	f000 f884 	bl	800bba4 <__smakebuf_r>
 800ba9c:	89a0      	ldrh	r0, [r4, #12]
 800ba9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baa2:	f010 0301 	ands.w	r3, r0, #1
 800baa6:	d00a      	beq.n	800babe <__swsetup_r+0x9e>
 800baa8:	2300      	movs	r3, #0
 800baaa:	60a3      	str	r3, [r4, #8]
 800baac:	6963      	ldr	r3, [r4, #20]
 800baae:	425b      	negs	r3, r3
 800bab0:	61a3      	str	r3, [r4, #24]
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	b943      	cbnz	r3, 800bac8 <__swsetup_r+0xa8>
 800bab6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baba:	d1c4      	bne.n	800ba46 <__swsetup_r+0x26>
 800babc:	bd38      	pop	{r3, r4, r5, pc}
 800babe:	0781      	lsls	r1, r0, #30
 800bac0:	bf58      	it	pl
 800bac2:	6963      	ldrpl	r3, [r4, #20]
 800bac4:	60a3      	str	r3, [r4, #8]
 800bac6:	e7f4      	b.n	800bab2 <__swsetup_r+0x92>
 800bac8:	2000      	movs	r0, #0
 800baca:	e7f7      	b.n	800babc <__swsetup_r+0x9c>
 800bacc:	20000064 	.word	0x20000064

0800bad0 <_raise_r>:
 800bad0:	291f      	cmp	r1, #31
 800bad2:	b538      	push	{r3, r4, r5, lr}
 800bad4:	4604      	mov	r4, r0
 800bad6:	460d      	mov	r5, r1
 800bad8:	d904      	bls.n	800bae4 <_raise_r+0x14>
 800bada:	2316      	movs	r3, #22
 800badc:	6003      	str	r3, [r0, #0]
 800bade:	f04f 30ff 	mov.w	r0, #4294967295
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bae6:	b112      	cbz	r2, 800baee <_raise_r+0x1e>
 800bae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baec:	b94b      	cbnz	r3, 800bb02 <_raise_r+0x32>
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 f830 	bl	800bb54 <_getpid_r>
 800baf4:	462a      	mov	r2, r5
 800baf6:	4601      	mov	r1, r0
 800baf8:	4620      	mov	r0, r4
 800bafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bafe:	f000 b817 	b.w	800bb30 <_kill_r>
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d00a      	beq.n	800bb1c <_raise_r+0x4c>
 800bb06:	1c59      	adds	r1, r3, #1
 800bb08:	d103      	bne.n	800bb12 <_raise_r+0x42>
 800bb0a:	2316      	movs	r3, #22
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e7e7      	b.n	800bae2 <_raise_r+0x12>
 800bb12:	2400      	movs	r4, #0
 800bb14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb18:	4628      	mov	r0, r5
 800bb1a:	4798      	blx	r3
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e7e0      	b.n	800bae2 <_raise_r+0x12>

0800bb20 <raise>:
 800bb20:	4b02      	ldr	r3, [pc, #8]	; (800bb2c <raise+0xc>)
 800bb22:	4601      	mov	r1, r0
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	f7ff bfd3 	b.w	800bad0 <_raise_r>
 800bb2a:	bf00      	nop
 800bb2c:	20000064 	.word	0x20000064

0800bb30 <_kill_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d07      	ldr	r5, [pc, #28]	; (800bb50 <_kill_r+0x20>)
 800bb34:	2300      	movs	r3, #0
 800bb36:	4604      	mov	r4, r0
 800bb38:	4608      	mov	r0, r1
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	f7f5 ffa1 	bl	8001a84 <_kill>
 800bb42:	1c43      	adds	r3, r0, #1
 800bb44:	d102      	bne.n	800bb4c <_kill_r+0x1c>
 800bb46:	682b      	ldr	r3, [r5, #0]
 800bb48:	b103      	cbz	r3, 800bb4c <_kill_r+0x1c>
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	bd38      	pop	{r3, r4, r5, pc}
 800bb4e:	bf00      	nop
 800bb50:	20000598 	.word	0x20000598

0800bb54 <_getpid_r>:
 800bb54:	f7f5 bf8e 	b.w	8001a74 <_getpid>

0800bb58 <__swhatbuf_r>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb60:	2900      	cmp	r1, #0
 800bb62:	b096      	sub	sp, #88	; 0x58
 800bb64:	4615      	mov	r5, r2
 800bb66:	461e      	mov	r6, r3
 800bb68:	da0d      	bge.n	800bb86 <__swhatbuf_r+0x2e>
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb70:	f04f 0100 	mov.w	r1, #0
 800bb74:	bf0c      	ite	eq
 800bb76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb7a:	2340      	movne	r3, #64	; 0x40
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	6031      	str	r1, [r6, #0]
 800bb80:	602b      	str	r3, [r5, #0]
 800bb82:	b016      	add	sp, #88	; 0x58
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	466a      	mov	r2, sp
 800bb88:	f000 f848 	bl	800bc1c <_fstat_r>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	dbec      	blt.n	800bb6a <__swhatbuf_r+0x12>
 800bb90:	9901      	ldr	r1, [sp, #4]
 800bb92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb9a:	4259      	negs	r1, r3
 800bb9c:	4159      	adcs	r1, r3
 800bb9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bba2:	e7eb      	b.n	800bb7c <__swhatbuf_r+0x24>

0800bba4 <__smakebuf_r>:
 800bba4:	898b      	ldrh	r3, [r1, #12]
 800bba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bba8:	079d      	lsls	r5, r3, #30
 800bbaa:	4606      	mov	r6, r0
 800bbac:	460c      	mov	r4, r1
 800bbae:	d507      	bpl.n	800bbc0 <__smakebuf_r+0x1c>
 800bbb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	6123      	str	r3, [r4, #16]
 800bbb8:	2301      	movs	r3, #1
 800bbba:	6163      	str	r3, [r4, #20]
 800bbbc:	b002      	add	sp, #8
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	ab01      	add	r3, sp, #4
 800bbc2:	466a      	mov	r2, sp
 800bbc4:	f7ff ffc8 	bl	800bb58 <__swhatbuf_r>
 800bbc8:	9900      	ldr	r1, [sp, #0]
 800bbca:	4605      	mov	r5, r0
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7fd fb81 	bl	80092d4 <_malloc_r>
 800bbd2:	b948      	cbnz	r0, 800bbe8 <__smakebuf_r+0x44>
 800bbd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd8:	059a      	lsls	r2, r3, #22
 800bbda:	d4ef      	bmi.n	800bbbc <__smakebuf_r+0x18>
 800bbdc:	f023 0303 	bic.w	r3, r3, #3
 800bbe0:	f043 0302 	orr.w	r3, r3, #2
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	e7e3      	b.n	800bbb0 <__smakebuf_r+0xc>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	6020      	str	r0, [r4, #0]
 800bbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	9b00      	ldr	r3, [sp, #0]
 800bbf4:	6163      	str	r3, [r4, #20]
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	6120      	str	r0, [r4, #16]
 800bbfa:	b15b      	cbz	r3, 800bc14 <__smakebuf_r+0x70>
 800bbfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc00:	4630      	mov	r0, r6
 800bc02:	f000 f81d 	bl	800bc40 <_isatty_r>
 800bc06:	b128      	cbz	r0, 800bc14 <__smakebuf_r+0x70>
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f023 0303 	bic.w	r3, r3, #3
 800bc0e:	f043 0301 	orr.w	r3, r3, #1
 800bc12:	81a3      	strh	r3, [r4, #12]
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	431d      	orrs	r5, r3
 800bc18:	81a5      	strh	r5, [r4, #12]
 800bc1a:	e7cf      	b.n	800bbbc <__smakebuf_r+0x18>

0800bc1c <_fstat_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4d07      	ldr	r5, [pc, #28]	; (800bc3c <_fstat_r+0x20>)
 800bc20:	2300      	movs	r3, #0
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	4611      	mov	r1, r2
 800bc28:	602b      	str	r3, [r5, #0]
 800bc2a:	f7f5 ff8a 	bl	8001b42 <_fstat>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	d102      	bne.n	800bc38 <_fstat_r+0x1c>
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	b103      	cbz	r3, 800bc38 <_fstat_r+0x1c>
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000598 	.word	0x20000598

0800bc40 <_isatty_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d06      	ldr	r5, [pc, #24]	; (800bc5c <_isatty_r+0x1c>)
 800bc44:	2300      	movs	r3, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	602b      	str	r3, [r5, #0]
 800bc4c:	f7f5 ff89 	bl	8001b62 <_isatty>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d102      	bne.n	800bc5a <_isatty_r+0x1a>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	b103      	cbz	r3, 800bc5a <_isatty_r+0x1a>
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	20000598 	.word	0x20000598

0800bc60 <_init>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_fini>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr
