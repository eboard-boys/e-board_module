
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08010cc0  08010cc0  00020cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114c8  080114c8  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080114c8  080114c8  000214c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114d0  080114d0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114d0  080114d0  000214d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114d4  080114d4  000214d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080114d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe4  200001dc  080116b4  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021c0  080116b4  000321c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026a68  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d7c  00000000  00000000  00056cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002058  00000000  00000000  0005ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001935  00000000  00000000  0005da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af6d  00000000  00000000  0005f3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024399  00000000  00000000  0008a332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001166db  00000000  00000000  000ae6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a050  00000000  00000000  001c4da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001cedf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ca4 	.word	0x08010ca4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08010ca4 	.word	0x08010ca4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_mpu>:
vector_t gravitational_acceleration[3] = {0, 0, 0};

float unit_conversion = NO_CONVERSION;


HAL_StatusTypeDef init_mpu(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	hi2c_mpu = i2c_handler;
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <init_mpu+0x110>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
	uart_debug_handler = debug_handler;
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <init_mpu+0x114>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
    // Write power management configuration
	uint8_t data = MPU_PWR_MGMT_1_DEFAULT_CONFIG;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <init_mpu+0x110>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	f003 fcaf 	bl	8004984 <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <init_mpu+0x52>
		DEBUG_PRINT("Failed to initialize power management configuration\r\n");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <init_mpu+0x114>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	2235      	movs	r2, #53	; 0x35
 8001038:	4933      	ldr	r1, [pc, #204]	; (8001108 <init_mpu+0x118>)
 800103a:	f006 ffcf 	bl	8007fdc <HAL_UART_Transmit>
		return ret;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e05a      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write filter configuration
	data = MPU_FILTER_DELAY_5_MS;
 8001042:	2303      	movs	r3, #3
 8001044:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_FILTER_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <init_mpu+0x110>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221a      	movs	r2, #26
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f003 fc91 	bl	8004984 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <init_mpu+0x8e>
		DEBUG_PRINT("Failed to initialize DLPF configuration\r\n");
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <init_mpu+0x114>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2229      	movs	r2, #41	; 0x29
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <init_mpu+0x11c>)
 8001076:	f006 ffb1 	bl	8007fdc <HAL_UART_Transmit>
		return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	e03c      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write gyroscope configuration
	data = MPU_GYRO_RANGE_500_DPS;
 800107e:	2308      	movs	r3, #8
 8001080:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_mpu+0x110>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	; 0xd0
 800109a:	f003 fc73 	bl	8004984 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <init_mpu+0xca>
		DEBUG_PRINT("Failed to initialize gyroscope configuration\r\n");
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <init_mpu+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	222e      	movs	r2, #46	; 0x2e
 80010b0:	4917      	ldr	r1, [pc, #92]	; (8001110 <init_mpu+0x120>)
 80010b2:	f006 ff93 	bl	8007fdc <HAL_UART_Transmit>
		return ret;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e01e      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write accelerometer configuration
	data = MPU_ACCEL_RANGE_8G;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <init_mpu+0x110>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	221c      	movs	r2, #28
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f003 fc55 	bl	8004984 <HAL_I2C_Mem_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <init_mpu+0x106>
		DEBUG_PRINT("Failed to initialize accelerometer configuration\r\n");
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <init_mpu+0x114>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <init_mpu+0x124>)
 80010ee:	f006 ff75 	bl	8007fdc <HAL_UART_Transmit>
		return ret;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	e000      	b.n	80010f8 <init_mpu+0x108>
	}
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f8 	.word	0x200001f8
 8001104:	200001fc 	.word	0x200001fc
 8001108:	08010cc0 	.word	0x08010cc0
 800110c:	08010cf8 	.word	0x08010cf8
 8001110:	08010d24 	.word	0x08010d24
 8001114:	08010d54 	.word	0x08010d54

08001118 <calibrate_mpu>:

HAL_StatusTypeDef calibrate_mpu() {
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b0a1      	sub	sp, #132	; 0x84
 800111c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	vector_t target_vector[3] = {1, 0, 0};
 800111e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001122:	66bb      	str	r3, [r7, #104]	; 0x68
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	673b      	str	r3, [r7, #112]	; 0x70
	vector_t measured_accel[3];
	vector_t preliminary_bias[3];
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001134:	e044      	b.n	80011c0 <calibrate_mpu+0xa8>
		ret = get_accel(measured_accel);
 8001136:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f89c 	bl	8001278 <get_accel>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (ret) {
 8001146:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800114a:	2b00      	cmp	r3, #0
 800114c:	d015      	beq.n	800117a <calibrate_mpu+0x62>
			char fail_message[80];
			sprintf(fail_message, "Failed to calibrate accelerometer (1) call %d\r\n", i);
 800114e:	463b      	mov	r3, r7
 8001150:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001152:	493f      	ldr	r1, [pc, #252]	; (8001250 <calibrate_mpu+0x138>)
 8001154:	4618      	mov	r0, r3
 8001156:	f00c f98f 	bl	800d478 <siprintf>
			DEBUG_PRINT(fail_message);
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <calibrate_mpu+0x13c>)
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	463b      	mov	r3, r7
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f885 	bl	8000270 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	4639      	mov	r1, r7
 800116c:	2364      	movs	r3, #100	; 0x64
 800116e:	4620      	mov	r0, r4
 8001170:	f006 ff34 	bl	8007fdc <HAL_UART_Transmit>
			return ret;
 8001174:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001178:	e066      	b.n	8001248 <calibrate_mpu+0x130>
		}
		for (int j = 0; j < 3; j++) {
 800117a:	2300      	movs	r3, #0
 800117c:	67bb      	str	r3, [r7, #120]	; 0x78
 800117e:	e019      	b.n	80011b4 <calibrate_mpu+0x9c>
			preliminary_bias[j] += measured_accel[j];
 8001180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	3380      	adds	r3, #128	; 0x80
 8001186:	443b      	add	r3, r7
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	ed93 7a00 	vldr	s14, [r3]
 800118e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	3380      	adds	r3, #128	; 0x80
 8001194:	443b      	add	r3, r7
 8001196:	3b24      	subs	r3, #36	; 0x24
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	3380      	adds	r3, #128	; 0x80
 80011a6:	443b      	add	r3, r7
 80011a8:	3b30      	subs	r3, #48	; 0x30
 80011aa:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++) {
 80011ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011b0:	3301      	adds	r3, #1
 80011b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80011b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	dde2      	ble.n	8001180 <calibrate_mpu+0x68>
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 80011ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011bc:	3301      	adds	r3, #1
 80011be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011c2:	f240 52db 	movw	r2, #1499	; 0x5db
 80011c6:	4293      	cmp	r3, r2
 80011c8:	ddb5      	ble.n	8001136 <calibrate_mpu+0x1e>
		}
	}
	accel_bias_x = target_vector[0] - (preliminary_bias[0] / CALIBRATION_ITERATIONS);
 80011ca:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80011ce:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011d2:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001258 <calibrate_mpu+0x140>
 80011d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <calibrate_mpu+0x144>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_y = target_vector[1] - (preliminary_bias[1] / CALIBRATION_ITERATIONS);
 80011e4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80011e8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011ec:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001258 <calibrate_mpu+0x140>
 80011f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <calibrate_mpu+0x148>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_z = target_vector[2] - (preliminary_bias[2] / CALIBRATION_ITERATIONS);
 80011fe:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001202:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001206:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001258 <calibrate_mpu+0x140>
 800120a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <calibrate_mpu+0x14c>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
	ret = get_accel(gravitational_acceleration);
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <calibrate_mpu+0x150>)
 800121a:	f000 f82d 	bl	8001278 <get_accel>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret) {
 8001224:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <calibrate_mpu+0x128>
		DEBUG_PRINT("Failed to calibrate accelerometer (2)\r\n");
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <calibrate_mpu+0x13c>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	2227      	movs	r2, #39	; 0x27
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <calibrate_mpu+0x154>)
 8001236:	f006 fed1 	bl	8007fdc <HAL_UART_Transmit>
		return ret;
 800123a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800123e:	e003      	b.n	8001248 <calibrate_mpu+0x130>
	}
	unit_conversion = GS_TO_MPSPS;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <calibrate_mpu+0x158>)
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <calibrate_mpu+0x15c>)
 8001244:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3784      	adds	r7, #132	; 0x84
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}
 8001250:	08010d88 	.word	0x08010d88
 8001254:	200001fc 	.word	0x200001fc
 8001258:	44bb8000 	.word	0x44bb8000
 800125c:	20000200 	.word	0x20000200
 8001260:	20000204 	.word	0x20000204
 8001264:	20000208 	.word	0x20000208
 8001268:	2000020c 	.word	0x2000020c
 800126c:	08010db8 	.word	0x08010db8
 8001270:	20000000 	.word	0x20000000
 8001274:	411cf5c3 	.word	0x411cf5c3

08001278 <get_accel>:

HAL_StatusTypeDef get_accel(vector_t accel[3]) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af04      	add	r7, sp, #16
 800127e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t accel_buf[6];
	ret = HAL_I2C_Mem_Read(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACEL_DATA, I2C_MEMADD_SIZE_8BIT, accel_buf, 6, 100);
 8001280:	4b62      	ldr	r3, [pc, #392]	; (800140c <get_accel+0x194>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2306      	movs	r3, #6
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	223b      	movs	r2, #59	; 0x3b
 8001296:	21d0      	movs	r1, #208	; 0xd0
 8001298:	f003 fc88 	bl	8004bac <HAL_I2C_Mem_Read>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d008      	beq.n	80012b8 <get_accel+0x40>
		DEBUG_PRINT("Failed to fetch accelerometer value\r\n");
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <get_accel+0x198>)
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	2225      	movs	r2, #37	; 0x25
 80012ae:	4959      	ldr	r1, [pc, #356]	; (8001414 <get_accel+0x19c>)
 80012b0:	f006 fe94 	bl	8007fdc <HAL_UART_Transmit>
		return ret;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	e0a5      	b.n	8001404 <get_accel+0x18c>
	}
	int16_t accel_raw_x = (accel_buf[0] << 8) | accel_buf[1];
 80012b8:	7a3b      	ldrb	r3, [r7, #8]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7a7b      	ldrb	r3, [r7, #9]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	82bb      	strh	r3, [r7, #20]
	int16_t accel_raw_y = (accel_buf[2] << 8) | accel_buf[3];
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	827b      	strh	r3, [r7, #18]
	int16_t accel_raw_z = (accel_buf[4] << 8) | accel_buf[5];
 80012d4:	7b3b      	ldrb	r3, [r7, #12]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7b7b      	ldrb	r3, [r7, #13]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	823b      	strh	r3, [r7, #16]

	accel[0] = (vector_t)accel_raw_x / MPU_ACCEL_RANGE_8G_LSB + accel_bias_x - gravitational_acceleration[0];
 80012e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001418 <get_accel+0x1a0>
 80012f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <get_accel+0x1a4>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <get_accel+0x1a8>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)accel_raw_y / MPU_ACCEL_RANGE_8G_LSB + accel_bias_y - gravitational_acceleration[1];
 8001310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001418 <get_accel+0x1a0>
 8001320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <get_accel+0x1ac>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <get_accel+0x1a8>)
 8001330:	edd3 7a01 	vldr	s15, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3304      	adds	r3, #4
 8001338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133c:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)accel_raw_z / MPU_ACCEL_RANGE_8G_LSB + accel_bias_z - gravitational_acceleration[2];
 8001340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001418 <get_accel+0x1a0>
 8001350:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <get_accel+0x1b0>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	4b30      	ldr	r3, [pc, #192]	; (8001420 <get_accel+0x1a8>)
 8001360:	edd3 7a02 	vldr	s15, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3308      	adds	r3, #8
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	edc3 7a00 	vstr	s15, [r3]

	accel[0] = (vector_t)(int)(accel[0] * 10) / 10 * unit_conversion;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800138a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <get_accel+0x1b4>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)(int)(accel[1] * 10) / 10 * unit_conversion;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <get_accel+0x1b4>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3304      	adds	r3, #4
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)(int)(accel[2] * 10) / 10 * unit_conversion;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3308      	adds	r3, #8
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <get_accel+0x1b4>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3308      	adds	r3, #8
 80013fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fe:	edc3 7a00 	vstr	s15, [r3]
	return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200001f8 	.word	0x200001f8
 8001410:	200001fc 	.word	0x200001fc
 8001414:	08010de0 	.word	0x08010de0
 8001418:	45800000 	.word	0x45800000
 800141c:	20000200 	.word	0x20000200
 8001420:	2000020c 	.word	0x2000020c
 8001424:	20000204 	.word	0x20000204
 8001428:	20000208 	.word	0x20000208
 800142c:	20000000 	.word	0x20000000

08001430 <init_spatial>:

// Internal globals
vector_t accleration_sample_array[ACCEL_SAMPLES][3];
uint8_t accel_sample_index = 0;

HAL_StatusTypeDef init_spatial(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = init_mpu(i2c_handler, debug_handler);
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fdd7 	bl	8000ff0 <init_mpu>
 8001442:	4603      	mov	r3, r0
 8001444:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <init_spatial+0x20>
//		DEBUG_PRINT("Failed hardware initialization");
		return ret;
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	e01c      	b.n	800148a <init_spatial+0x5a>
	}
	ret = calibrate_mpu();
 8001450:	f7ff fe62 	bl	8001118 <calibrate_mpu>
 8001454:	4603      	mov	r3, r0
 8001456:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <init_spatial+0x32>
		return ret;
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	e013      	b.n	800148a <init_spatial+0x5a>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e00c      	b.n	8001482 <init_spatial+0x52>
		get_accel(accleration_sample_array[i]);
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <init_spatial+0x64>)
 8001474:	4413      	add	r3, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fefe 	bl	8001278 <get_accel>
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b09      	cmp	r3, #9
 8001486:	ddef      	ble.n	8001468 <init_spatial+0x38>
	}
	return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000244 	.word	0x20000244

08001498 <update_acceleration_averages>:
	current_position[2] = 0;

	current_distance = 0;
}

HAL_StatusTypeDef update_acceleration_averages() {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e026      	b.n	80014f2 <update_acceleration_averages+0x5a>
		HAL_StatusTypeDef ret;
		ret = get_accel(accleration_sample_array[accel_sample_index]);
 80014a4:	4b45      	ldr	r3, [pc, #276]	; (80015bc <update_acceleration_averages+0x124>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <update_acceleration_averages+0x128>)
 80014b4:	4413      	add	r3, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fede 	bl	8001278 <get_accel>
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
		if (ret)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <update_acceleration_averages+0x32>
			return ret;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	e073      	b.n	80015b2 <update_acceleration_averages+0x11a>
		accel_sample_index = (accel_sample_index + 1) % ACCEL_SAMPLES;
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <update_acceleration_averages+0x124>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <update_acceleration_averages+0x12c>)
 80014d2:	fb83 1302 	smull	r1, r3, r3, r2
 80014d6:	1099      	asrs	r1, r3, #2
 80014d8:	17d3      	asrs	r3, r2, #31
 80014da:	1ac9      	subs	r1, r1, r3
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	1ad1      	subs	r1, r2, r3
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	4b34      	ldr	r3, [pc, #208]	; (80015bc <update_acceleration_averages+0x124>)
 80014ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	ddd5      	ble.n	80014a4 <update_acceleration_averages+0xc>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	e037      	b.n	800156e <update_acceleration_averages+0xd6>
		current_acceleration[0] += accleration_sample_array[i][0];
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <update_acceleration_averages+0x130>)
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	492e      	ldr	r1, [pc, #184]	; (80015c0 <update_acceleration_averages+0x128>)
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <update_acceleration_averages+0x130>)
 800151c:	edc3 7a00 	vstr	s15, [r3]
		current_acceleration[1] += accleration_sample_array[i][1];
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <update_acceleration_averages+0x130>)
 8001522:	ed93 7a01 	vldr	s14, [r3, #4]
 8001526:	4926      	ldr	r1, [pc, #152]	; (80015c0 <update_acceleration_averages+0x128>)
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	3304      	adds	r3, #4
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <update_acceleration_averages+0x130>)
 8001540:	edc3 7a01 	vstr	s15, [r3, #4]
		current_acceleration[2] += accleration_sample_array[i][2];
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <update_acceleration_averages+0x130>)
 8001546:	ed93 7a02 	vldr	s14, [r3, #8]
 800154a:	491d      	ldr	r1, [pc, #116]	; (80015c0 <update_acceleration_averages+0x128>)
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3308      	adds	r3, #8
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <update_acceleration_averages+0x130>)
 8001564:	edc3 7a02 	vstr	s15, [r3, #8]
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3301      	adds	r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b09      	cmp	r3, #9
 8001572:	ddc4      	ble.n	80014fe <update_acceleration_averages+0x66>
	}
	current_acceleration[0] /= ACCEL_SAMPLES;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <update_acceleration_averages+0x130>)
 8001576:	ed93 7a00 	vldr	s14, [r3]
 800157a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800157e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <update_acceleration_averages+0x130>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
	current_acceleration[1] /= ACCEL_SAMPLES;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <update_acceleration_averages+0x130>)
 800158a:	ed93 7a01 	vldr	s14, [r3, #4]
 800158e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <update_acceleration_averages+0x130>)
 8001598:	edc3 7a01 	vstr	s15, [r3, #4]
	current_acceleration[2] /= ACCEL_SAMPLES;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <update_acceleration_averages+0x130>)
 800159e:	ed93 7a02 	vldr	s14, [r3, #8]
 80015a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80015a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <update_acceleration_averages+0x130>)
 80015ac:	edc3 7a02 	vstr	s15, [r3, #8]
	return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002bc 	.word	0x200002bc
 80015c0:	20000244 	.word	0x20000244
 80015c4:	66666667 	.word	0x66666667
 80015c8:	20000218 	.word	0x20000218

080015cc <update_spatial>:

HAL_StatusTypeDef update_spatial(float delta_t) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef ret;
	vector_euler_step(current_acceleration, current_velocity, delta_t);
 80015d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015da:	4915      	ldr	r1, [pc, #84]	; (8001630 <update_spatial+0x64>)
 80015dc:	4815      	ldr	r0, [pc, #84]	; (8001634 <update_spatial+0x68>)
 80015de:	f000 f860 	bl	80016a2 <vector_euler_step>
	vector_euler_step(current_velocity, current_position, delta_t);
 80015e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80015e6:	4914      	ldr	r1, [pc, #80]	; (8001638 <update_spatial+0x6c>)
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <update_spatial+0x64>)
 80015ea:	f000 f85a 	bl	80016a2 <vector_euler_step>
	current_speed = magnitude(current_velocity);
 80015ee:	4810      	ldr	r0, [pc, #64]	; (8001630 <update_spatial+0x64>)
 80015f0:	f000 f828 	bl	8001644 <magnitude>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <update_spatial+0x70>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]
	euler_step(current_speed, &current_distance, delta_t);
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <update_spatial+0x70>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	edd7 0a01 	vldr	s1, [r7, #4]
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <update_spatial+0x74>)
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	f000 f888 	bl	8001722 <euler_step>
	ret = update_acceleration_averages();
 8001612:	f7ff ff41 	bl	8001498 <update_acceleration_averages>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <update_spatial+0x58>
//		DEBUG_PRINT("Failed to update acceleration");
		return ret;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	e000      	b.n	8001626 <update_spatial+0x5a>
	}
	return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000224 	.word	0x20000224
 8001634:	20000218 	.word	0x20000218
 8001638:	20000234 	.word	0x20000234
 800163c:	20000230 	.word	0x20000230
 8001640:	20000240 	.word	0x20000240

08001644 <magnitude>:
#include "vectors.h"
#include <math.h>
#include <stdlib.h>

// Get the magnitude of a given vector
magnitude_t magnitude(vector_t* vec) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    return root_func((vec[x] * vec[x]) + (vec[y] * vec[y]) + (vec[z] * vec[z]));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3304      	adds	r3, #4
 8001660:	edd3 6a00 	vldr	s13, [r3]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3304      	adds	r3, #4
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3308      	adds	r3, #8
 8001678:	edd3 6a00 	vldr	s13, [r3]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3308      	adds	r3, #8
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	f00f fae6 	bl	8010c60 <sqrtf>
 8001694:	eef0 7a40 	vmov.f32	s15, s0
}
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <vector_euler_step>:

// Eulers method for integration in respect to time in 3 dimensions.
// Example: pass acceleration vector to source and velocity to target to integrate acceleration
void vector_euler_step(vector_t* source_vec, vector_t* target_vec, float delta_t) {
 80016a2:	b480      	push	{r7}
 80016a4:	b085      	sub	sp, #20
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	ed87 0a01 	vstr	s0, [r7, #4]
    target_vec[x] += source_vec[x] * delta_t;
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	edd3 6a00 	vldr	s13, [r3]
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	edc3 7a00 	vstr	s15, [r3]
    target_vec[y] += source_vec[y] * delta_t;
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3304      	adds	r3, #4
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	edd3 6a00 	vldr	s13, [r3]
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3304      	adds	r3, #4
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc3 7a00 	vstr	s15, [r3]
    target_vec[z] += source_vec[z] * delta_t;
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3308      	adds	r3, #8
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3308      	adds	r3, #8
 80016fe:	edd3 6a00 	vldr	s13, [r3]
 8001702:	edd7 7a01 	vldr	s15, [r7, #4]
 8001706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3308      	adds	r3, #8
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	edc3 7a00 	vstr	s15, [r3]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <euler_step>:

// Eulers method for integration in respect to time for scalars.
// This is used for calculating arc length.
void euler_step(magnitude_t source, magnitude_t* destination, float delta_t) {
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	ed87 0a03 	vstr	s0, [r7, #12]
 800172c:	60b8      	str	r0, [r7, #8]
 800172e:	edc7 0a01 	vstr	s1, [r7, #4]
    *destination += source * delta_t;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	ed93 7a00 	vldr	s14, [r3]
 8001738:	edd7 6a03 	vldr	s13, [r7, #12]
 800173c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	edc3 7a00 	vstr	s15, [r3]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b09a      	sub	sp, #104	; 0x68
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f001 fb51 	bl	8002e08 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f8b5 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 fb41 	bl	8001df0 <MX_GPIO_Init>
  MX_DMA_Init();
 800176e:	f000 fb19 	bl	8001da4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001772:	f000 fae7 	bl	8001d44 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001776:	f000 fa05 	bl	8001b84 <MX_TIM3_Init>
  MX_ADC1_Init();
 800177a:	f000 f8fd 	bl	8001978 <MX_ADC1_Init>
  MX_I2C1_Init();
 800177e:	f000 f971 	bl	8001a64 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001782:	f000 f9af 	bl	8001ae4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001786:	f000 faad 	bl	8001ce4 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 800178a:	f000 fa73 	bl	8001c74 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Start the longboard by initializing the motor throttle to 0
  char StartMsg[100];
  sprintf(StartMsg, "\r\nStarting the LongBoard!\r\n");
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	493b      	ldr	r1, [pc, #236]	; (8001880 <main+0x124>)
 8001792:	4618      	mov	r0, r3
 8001794:	f00b fe70 	bl	800d478 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fd68 	bl	8000270 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	1d39      	adds	r1, r7, #4
 80017a6:	2332      	movs	r3, #50	; 0x32
 80017a8:	4836      	ldr	r0, [pc, #216]	; (8001884 <main+0x128>)
 80017aa:	f006 fc17 	bl	8007fdc <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80017ae:	210c      	movs	r1, #12
 80017b0:	4835      	ldr	r0, [pc, #212]	; (8001888 <main+0x12c>)
 80017b2:	f005 fae1 	bl	8006d78 <HAL_TIM_PWM_Start>
  TIM3->CCR4 =  Min_PWM;
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <main+0x130>)
 80017b8:	2250      	movs	r2, #80	; 0x50
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(5000);
 80017bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80017c0:	f001 fb62 	bl	8002e88 <HAL_Delay>

  init_spatial(&hi2c1, &huart2);
 80017c4:	492f      	ldr	r1, [pc, #188]	; (8001884 <main+0x128>)
 80017c6:	4832      	ldr	r0, [pc, #200]	; (8001890 <main+0x134>)
 80017c8:	f7ff fe32 	bl	8001430 <init_spatial>
  sprintf(StartMsg, "\r\nInitialized Accelerometer!\r\n");
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4931      	ldr	r1, [pc, #196]	; (8001894 <main+0x138>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00b fe51 	bl	800d478 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fd49 	bl	8000270 <strlen>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	1d39      	adds	r1, r7, #4
 80017e4:	2332      	movs	r3, #50	; 0x32
 80017e6:	4827      	ldr	r0, [pc, #156]	; (8001884 <main+0x128>)
 80017e8:	f006 fbf8 	bl	8007fdc <HAL_UART_Transmit>


  sprintf(StartMsg, "\r\nInitialized Throttle!\r\n");
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	492a      	ldr	r1, [pc, #168]	; (8001898 <main+0x13c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00b fe41 	bl	800d478 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd39 	bl	8000270 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	1d39      	adds	r1, r7, #4
 8001804:	2332      	movs	r3, #50	; 0x32
 8001806:	481f      	ldr	r0, [pc, #124]	; (8001884 <main+0x128>)
 8001808:	f006 fbe8 	bl	8007fdc <HAL_UART_Transmit>
  throttle = Min_Throttle;
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <main+0x140>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

  Lora_Init();
 8001812:	f000 fb53 	bl	8001ebc <Lora_Init>
  sprintf(StartMsg, "\r\nInitialized LORA!\r\n");
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4921      	ldr	r1, [pc, #132]	; (80018a0 <main+0x144>)
 800181a:	4618      	mov	r0, r3
 800181c:	f00b fe2c 	bl	800d478 <siprintf>
  HAL_UART_Transmit(&huart2, StartMsg, strlen(StartMsg), 50);
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fd24 	bl	8000270 <strlen>
 8001828:	4603      	mov	r3, r0
 800182a:	b29a      	uxth	r2, r3
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	2332      	movs	r3, #50	; 0x32
 8001830:	4814      	ldr	r0, [pc, #80]	; (8001884 <main+0x128>)
 8001832:	f006 fbd3 	bl	8007fdc <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001836:	f007 fedb 	bl	80095f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <main+0x148>)
 800183c:	2100      	movs	r1, #0
 800183e:	481a      	ldr	r0, [pc, #104]	; (80018a8 <main+0x14c>)
 8001840:	f007 ff20 	bl	8009684 <osThreadNew>
 8001844:	4603      	mov	r3, r0
 8001846:	4a19      	ldr	r2, [pc, #100]	; (80018ac <main+0x150>)
 8001848:	6013      	str	r3, [r2, #0]

  /* creation of readThrottle */
  readThrottleHandle = osThreadNew(ReadThrottle, NULL, &readThrottle_attributes);
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <main+0x154>)
 800184c:	2100      	movs	r1, #0
 800184e:	4819      	ldr	r0, [pc, #100]	; (80018b4 <main+0x158>)
 8001850:	f007 ff18 	bl	8009684 <osThreadNew>
 8001854:	4603      	mov	r3, r0
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <main+0x15c>)
 8001858:	6013      	str	r3, [r2, #0]

  /* creation of sendSpeed */
  sendSpeedHandle = osThreadNew(SendSpeed, NULL, &sendSpeed_attributes);
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <main+0x160>)
 800185c:	2100      	movs	r1, #0
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <main+0x164>)
 8001860:	f007 ff10 	bl	8009684 <osThreadNew>
 8001864:	4603      	mov	r3, r0
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <main+0x168>)
 8001868:	6013      	str	r3, [r2, #0]

  /* creation of accelUpdateTask */
  accelUpdateTaskHandle = osThreadNew(startAccelUpdateTask, NULL, &accelUpdateTask_attributes);
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <main+0x16c>)
 800186c:	2100      	movs	r1, #0
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <main+0x170>)
 8001870:	f007 ff08 	bl	8009684 <osThreadNew>
 8001874:	4603      	mov	r3, r0
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <main+0x174>)
 8001878:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800187a:	f007 fedd 	bl	8009638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800187e:	e7fe      	b.n	800187e <main+0x122>
 8001880:	08010e40 	.word	0x08010e40
 8001884:	2000052c 	.word	0x2000052c
 8001888:	2000040c 	.word	0x2000040c
 800188c:	40000400 	.word	0x40000400
 8001890:	20000324 	.word	0x20000324
 8001894:	08010e5c 	.word	0x08010e5c
 8001898:	08010e7c 	.word	0x08010e7c
 800189c:	2000067c 	.word	0x2000067c
 80018a0:	08010e98 	.word	0x08010e98
 80018a4:	08010fc4 	.word	0x08010fc4
 80018a8:	0800241d 	.word	0x0800241d
 80018ac:	200005fc 	.word	0x200005fc
 80018b0:	08010fe8 	.word	0x08010fe8
 80018b4:	0800242d 	.word	0x0800242d
 80018b8:	20000600 	.word	0x20000600
 80018bc:	0801100c 	.word	0x0801100c
 80018c0:	08002495 	.word	0x08002495
 80018c4:	20000604 	.word	0x20000604
 80018c8:	08011030 	.word	0x08011030
 80018cc:	0800250d 	.word	0x0800250d
 80018d0:	20000608 	.word	0x20000608

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b096      	sub	sp, #88	; 0x58
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2244      	movs	r2, #68	; 0x44
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b fe2b 	bl	800d53e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018fa:	f003 fdcf 	bl	800549c <HAL_PWREx_ControlVoltageScaling>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001904:	f000 fe2e 	bl	8002564 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001908:	2302      	movs	r3, #2
 800190a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001910:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001912:	2310      	movs	r3, #16
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800191a:	2302      	movs	r3, #2
 800191c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800191e:	2301      	movs	r3, #1
 8001920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001922:	230a      	movs	r3, #10
 8001924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001926:	2307      	movs	r3, #7
 8001928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800192a:	2302      	movs	r3, #2
 800192c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800192e:	2302      	movs	r3, #2
 8001930:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fe06 	bl	8005548 <HAL_RCC_OscConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001942:	f000 fe0f 	bl	8002564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001946:	230f      	movs	r3, #15
 8001948:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800194a:	2303      	movs	r3, #3
 800194c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800195a:	463b      	mov	r3, r7
 800195c:	2104      	movs	r1, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f004 f9ce 	bl	8005d00 <HAL_RCC_ClockConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800196a:	f000 fdfb 	bl	8002564 <Error_Handler>
  }
}
 800196e:	bf00      	nop
 8001970:	3758      	adds	r7, #88	; 0x58
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <MX_ADC1_Init+0xe0>)
 800199c:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <MX_ADC1_Init+0xe4>)
 800199e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019a6:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fa:	4817      	ldr	r0, [pc, #92]	; (8001a58 <MX_ADC1_Init+0xe0>)
 80019fc:	f001 fbf4 	bl	80031e8 <HAL_ADC_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001a06:	f000 fdad 	bl	8002564 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	; (8001a58 <MX_ADC1_Init+0xe0>)
 8001a16:	f002 f94f 	bl	8003cb8 <HAL_ADCEx_MultiModeConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a20:	f000 fda0 	bl	8002564 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_ADC1_Init+0xe8>)
 8001a26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a30:	237f      	movs	r3, #127	; 0x7f
 8001a32:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a34:	2304      	movs	r3, #4
 8001a36:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_ADC1_Init+0xe0>)
 8001a42:	f001 fd21 	bl	8003488 <HAL_ADC_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a4c:	f000 fd8a 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200002c0 	.word	0x200002c0
 8001a5c:	50040000 	.word	0x50040000
 8001a60:	04300002 	.word	0x04300002

08001a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <MX_I2C1_Init+0x78>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a70:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <MX_I2C1_Init+0x7c>)
 8001a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001aa0:	f002 fed4 	bl	800484c <HAL_I2C_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aaa:	f000 fd5b 	bl	8002564 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ab2:	f003 fc4d 	bl	8005350 <HAL_I2CEx_ConfigAnalogFilter>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001abc:	f000 fd52 	bl	8002564 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_I2C1_Init+0x74>)
 8001ac4:	f003 fc8f 	bl	80053e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ace:	f000 fd49 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000324 	.word	0x20000324
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	10909cec 	.word	0x10909cec

08001ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b30:	f004 fff8 	bl	8006b24 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b3a:	f000 fd13 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b4c:	f005 fc30 	bl	80073b0 <HAL_TIM_ConfigClockSource>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001b56:	f000 fd05 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM2_Init+0x9c>)
 8001b68:	f006 f944 	bl	8007df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001b72:	f000 fcf7 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200003c0 	.word	0x200003c0

08001b84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bb8:	4a2d      	ldr	r2, [pc, #180]	; (8001c70 <MX_TIM3_Init+0xec>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bcc:	f240 623f 	movw	r2, #1599	; 0x63f
 8001bd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001be0:	f004 ffa0 	bl	8006b24 <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bea:	f000 fcbb 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481c      	ldr	r0, [pc, #112]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001bfc:	f005 fbd8 	bl	80073b0 <HAL_TIM_ConfigClockSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c06:	f000 fcad 	bl	8002564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001c0c:	f005 f852 	bl	8006cb4 <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001c16:	f000 fca5 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4810      	ldr	r0, [pc, #64]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001c2a:	f006 f8e3 	bl	8007df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001c34:	f000 fc96 	bl	8002564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c38:	2360      	movs	r3, #96	; 0x60
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4807      	ldr	r0, [pc, #28]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001c50:	f005 fa9a 	bl	8007188 <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001c5a:	f000 fc83 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <MX_TIM3_Init+0xe8>)
 8001c60:	f000 fdfe 	bl	8002860 <HAL_TIM_MspPostInit>

}
 8001c64:	bf00      	nop
 8001c66:	3738      	adds	r7, #56	; 0x38
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000040c 	.word	0x2000040c
 8001c70:	40000400 	.word	0x40000400

08001c74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001c86:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <MX_TIM7_Init+0x6c>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65000-1;
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001c8c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001c90:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 6000-1;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001c9a:	f241 726f 	movw	r2, #5999	; 0x176f
 8001c9e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001ca8:	f004 ff3c 	bl	8006b24 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001cb2:	f000 fc57 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <MX_TIM7_Init+0x68>)
 8001cc4:	f006 f896 	bl	8007df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001cce:	f000 fc49 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000458 	.word	0x20000458
 8001ce0:	40001400 	.word	0x40001400

08001ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <MX_USART1_UART_Init+0x5c>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART1_UART_Init+0x58>)
 8001d28:	f006 f90a 	bl	8007f40 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d32:	f000 fc17 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004a4 	.word	0x200004a4
 8001d40:	40013800 	.word	0x40013800

08001d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <MX_USART2_UART_Init+0x5c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_USART2_UART_Init+0x58>)
 8001d88:	f006 f8da 	bl	8007f40 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d92:	f000 fbe7 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000052c 	.word	0x2000052c
 8001da0:	40004400 	.word	0x40004400

08001da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <MX_DMA_Init+0x48>)
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <MX_DMA_Init+0x48>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6493      	str	r3, [r2, #72]	; 0x48
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <MX_DMA_Init+0x48>)
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f002 f8de 	bl	8003f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001dcc:	200f      	movs	r0, #15
 8001dce:	f002 f8f7 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2105      	movs	r1, #5
 8001dd6:	2011      	movs	r0, #17
 8001dd8:	f002 f8d6 	bl	8003f88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ddc:	2011      	movs	r0, #17
 8001dde:	f002 f8ef 	bl	8003fc0 <HAL_NVIC_EnableIRQ>

}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <MX_GPIO_Init+0xc4>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f002 fcd5 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <MX_GPIO_Init+0xc8>)
 8001e8a:	f002 fb1d 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f002 fb0e 	bl	80044c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000800 	.word	0x48000800

08001ebc <Lora_Init>:

/* USER CODE BEGIN 4 */

void Lora_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b09a      	sub	sp, #104	; 0x68
 8001ec0:	af00      	add	r7, sp, #0
	// Set LORA Chip To Transmit/Receive Mode
	char msg[100] = "";
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	2260      	movs	r2, #96	; 0x60
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00b fb35 	bl	800d53e <memset>
	// Spreading Factor: 7
	// Bandwidth: 500 KHz
	// Coding Rate: 1
	// Programmed Preamble: 10
	// This favors speed over dependabilitySerial2.println("AT+PARAMETER=7,9,1,4");
	sprintf(msg, "AT+PARAMETER=10,8,1,4\r\n");
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4960      	ldr	r1, [pc, #384]	; (8002058 <Lora_Init+0x19c>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f00b facd 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe f9c5 	bl	8000270 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	1d39      	adds	r1, r7, #4
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef0:	485a      	ldr	r0, [pc, #360]	; (800205c <Lora_Init+0x1a0>)
 8001ef2:	f006 f873 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efa:	f000 ffc5 	bl	8002e88 <HAL_Delay>

	// Sets LORA Chip address to 24
	sprintf(msg, "AT+ADDRESS=24\r\n");
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4957      	ldr	r1, [pc, #348]	; (8002060 <Lora_Init+0x1a4>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00b fab8 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe f9b0 	bl	8000270 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	1d39      	adds	r1, r7, #4
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f1a:	4850      	ldr	r0, [pc, #320]	; (800205c <Lora_Init+0x1a0>)
 8001f1c:	f006 f85e 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f24:	f000 ffb0 	bl	8002e88 <HAL_Delay>

	// Reads back address to verify setup
	sprintf(msg, "AT+NETWORKID=3\r\n");
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	494e      	ldr	r1, [pc, #312]	; (8002064 <Lora_Init+0x1a8>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00b faa3 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f99b 	bl	8000270 <strlen>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	1d39      	adds	r1, r7, #4
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f44:	4845      	ldr	r0, [pc, #276]	; (800205c <Lora_Init+0x1a0>)
 8001f46:	f006 f849 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4e:	f000 ff9b 	bl	8002e88 <HAL_Delay>

	sprintf(msg, "AT+CPIN?\r\n");
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4944      	ldr	r1, [pc, #272]	; (8002068 <Lora_Init+0x1ac>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00b fa8e 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f986 	bl	8000270 <strlen>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	1d39      	adds	r1, r7, #4
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f6e:	483b      	ldr	r0, [pc, #236]	; (800205c <Lora_Init+0x1a0>)
 8001f70:	f006 f834 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f000 ff86 	bl	8002e88 <HAL_Delay>


	sprintf(msg, "AT+CRFOP?\r\n");
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	493b      	ldr	r1, [pc, #236]	; (800206c <Lora_Init+0x1b0>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00b fa79 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe f971 	bl	8000270 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	1d39      	adds	r1, r7, #4
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f98:	4830      	ldr	r0, [pc, #192]	; (800205c <Lora_Init+0x1a0>)
 8001f9a:	f006 f81f 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8001f9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fa2:	f000 ff71 	bl	8002e88 <HAL_Delay>

	sprintf(msg, "AT+ADDRESS?\r\n");
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	4931      	ldr	r1, [pc, #196]	; (8002070 <Lora_Init+0x1b4>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00b fa64 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe f95c 	bl	8000270 <strlen>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	1d39      	adds	r1, r7, #4
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <Lora_Init+0x1a0>)
 8001fc4:	f006 f80a 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8001fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fcc:	f000 ff5c 	bl	8002e88 <HAL_Delay>

	sprintf(msg, "AT+NETWORKID?\r\n");
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4928      	ldr	r1, [pc, #160]	; (8002074 <Lora_Init+0x1b8>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00b fa4f 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe f947 	bl	8000270 <strlen>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	1d39      	adds	r1, r7, #4
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fec:	481b      	ldr	r0, [pc, #108]	; (800205c <Lora_Init+0x1a0>)
 8001fee:	f005 fff5 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8001ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff6:	f000 ff47 	bl	8002e88 <HAL_Delay>

	sprintf(msg, "AT+BAND?\r\n");
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	491e      	ldr	r1, [pc, #120]	; (8002078 <Lora_Init+0x1bc>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00b fa3a 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe f932 	bl	8000270 <strlen>
 800200c:	4603      	mov	r3, r0
 800200e:	b29a      	uxth	r2, r3
 8002010:	1d39      	adds	r1, r7, #4
 8002012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002016:	4811      	ldr	r0, [pc, #68]	; (800205c <Lora_Init+0x1a0>)
 8002018:	f005 ffe0 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 800201c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002020:	f000 ff32 	bl	8002e88 <HAL_Delay>

	sprintf(msg, "AT+MODE=0\r\n");
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4915      	ldr	r1, [pc, #84]	; (800207c <Lora_Init+0x1c0>)
 8002028:	4618      	mov	r0, r3
 800202a:	f00b fa25 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f91d 	bl	8000270 <strlen>
 8002036:	4603      	mov	r3, r0
 8002038:	b29a      	uxth	r2, r3
 800203a:	1d39      	adds	r1, r7, #4
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <Lora_Init+0x1a0>)
 8002042:	f005 ffcb 	bl	8007fdc <HAL_UART_Transmit>
	HAL_Delay(500);
 8002046:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800204a:	f000 ff1d 	bl	8002e88 <HAL_Delay>
}
 800204e:	bf00      	nop
 8002050:	3768      	adds	r7, #104	; 0x68
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	08010eb0 	.word	0x08010eb0
 800205c:	200004a4 	.word	0x200004a4
 8002060:	08010ec8 	.word	0x08010ec8
 8002064:	08010ed8 	.word	0x08010ed8
 8002068:	08010eec 	.word	0x08010eec
 800206c:	08010ef8 	.word	0x08010ef8
 8002070:	08010f04 	.word	0x08010f04
 8002074:	08010f14 	.word	0x08010f14
 8002078:	08010f24 	.word	0x08010f24
 800207c:	08010f30 	.word	0x08010f30

08002080 <Lora_Send_Data>:

void Lora_Send_Data(char data[])
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b09e      	sub	sp, #120	; 0x78
 8002084:	af02      	add	r7, sp, #8
 8002086:	6078      	str	r0, [r7, #4]
	// Combines message to be sent with the data passed in
	char LoraMsg[100];
	sprintf(LoraMsg, "AT+SEND=%i,%i,%s\r\n", ESP_LORA_ADDRESS, strlen(data), data);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7fe f8f1 	bl	8000270 <strlen>
 800208e:	4602      	mov	r2, r0
 8002090:	f107 000c 	add.w	r0, r7, #12
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	2219      	movs	r2, #25
 800209c:	4910      	ldr	r1, [pc, #64]	; (80020e0 <Lora_Send_Data+0x60>)
 800209e:	f00b f9eb 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart1, LoraMsg, strlen(LoraMsg), 50);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f8e2 	bl	8000270 <strlen>
 80020ac:	4603      	mov	r3, r0
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f107 010c 	add.w	r1, r7, #12
 80020b4:	2332      	movs	r3, #50	; 0x32
 80020b6:	480b      	ldr	r0, [pc, #44]	; (80020e4 <Lora_Send_Data+0x64>)
 80020b8:	f005 ff90 	bl	8007fdc <HAL_UART_Transmit>
	osThreadSuspend(readThrottleHandle);
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <Lora_Send_Data+0x68>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f007 fb71 	bl	80097a8 <osThreadSuspend>
	osDelay(200);
 80020c6:	20c8      	movs	r0, #200	; 0xc8
 80020c8:	f007 fbb0 	bl	800982c <osDelay>
	osThreadResume(readThrottleHandle);
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <Lora_Send_Data+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f007 fb8a 	bl	80097ea <osThreadResume>



}
 80020d6:	bf00      	nop
 80020d8:	3770      	adds	r7, #112	; 0x70
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	08010f3c 	.word	0x08010f3c
 80020e4:	200004a4 	.word	0x200004a4
 80020e8:	20000600 	.word	0x20000600

080020ec <Parse_Recieve_Data>:

void Parse_Recieve_Data(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
	// Find the position of "T" in the array
		bool good = true;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]

	    char *start = strrchr(UART1_rxBuffer, 'T');
 80020f6:	2154      	movs	r1, #84	; 0x54
 80020f8:	482e      	ldr	r0, [pc, #184]	; (80021b4 <Parse_Recieve_Data+0xc8>)
 80020fa:	f00b fa48 	bl	800d58e <strrchr>
 80020fe:	6138      	str	r0, [r7, #16]

	    // Check if "T" is found
	    if (start != NULL)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d053      	beq.n	80021ae <Parse_Recieve_Data+0xc2>
	    {
	    	buffer_print(start, "str from start of parse");
 8002106:	492c      	ldr	r1, [pc, #176]	; (80021b8 <Parse_Recieve_Data+0xcc>)
 8002108:	6938      	ldr	r0, [r7, #16]
 800210a:	f000 f883 	bl	8002214 <buffer_print>
	        // Find the position of the next comma after "S"
	        char *end = strchr(start, ',');
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	6938      	ldr	r0, [r7, #16]
 8002112:	f00b fa1c 	bl	800d54e <strchr>
 8002116:	60f8      	str	r0, [r7, #12]

	        // Check if the comma is found
	        if (end != NULL)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d047      	beq.n	80021ae <Parse_Recieve_Data+0xc2>
	        {

	        	char *error = strchr(receive_data, '-');
 800211e:	212d      	movs	r1, #45	; 0x2d
 8002120:	4826      	ldr	r0, [pc, #152]	; (80021bc <Parse_Recieve_Data+0xd0>)
 8002122:	f00b fa14 	bl	800d54e <strchr>
 8002126:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <Parse_Recieve_Data+0x46>
	        	{
	        		good = false;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, '+');
 8002132:	212b      	movs	r1, #43	; 0x2b
 8002134:	4821      	ldr	r0, [pc, #132]	; (80021bc <Parse_Recieve_Data+0xd0>)
 8002136:	f00b fa0a 	bl	800d54e <strchr>
 800213a:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <Parse_Recieve_Data+0x5a>
	        	{
	        		good = false;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, '=');
 8002146:	213d      	movs	r1, #61	; 0x3d
 8002148:	481c      	ldr	r0, [pc, #112]	; (80021bc <Parse_Recieve_Data+0xd0>)
 800214a:	f00b fa00 	bl	800d54e <strchr>
 800214e:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <Parse_Recieve_Data+0x6e>
	        	{
	        		good = false;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, ',');
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	4817      	ldr	r0, [pc, #92]	; (80021bc <Parse_Recieve_Data+0xd0>)
 800215e:	f00b f9f6 	bl	800d54e <strchr>
 8002162:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <Parse_Recieve_Data+0x82>
	        	{
	        		good = false;
 800216a:	2300      	movs	r3, #0
 800216c:	75fb      	strb	r3, [r7, #23]
	        	}
	        	error = strchr(receive_data, ' ');
 800216e:	2120      	movs	r1, #32
 8002170:	4812      	ldr	r0, [pc, #72]	; (80021bc <Parse_Recieve_Data+0xd0>)
 8002172:	f00b f9ec 	bl	800d54e <strchr>
 8002176:	60b8      	str	r0, [r7, #8]
	        	if (error != NULL)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <Parse_Recieve_Data+0x96>
	        	{
	        		good = false;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]
	        	}

	        	if (good)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <Parse_Recieve_Data+0xc2>
	        	{
	        		// Calculate the length of the substring
	        		size_t length = end - start;
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	607b      	str	r3, [r7, #4]
	        		if (length > 4)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d80a      	bhi.n	80021ac <Parse_Recieve_Data+0xc0>
	        			return;

	        		// Copy the substring to the buffer
	        		strncpy(receive_data, start, length);
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6939      	ldr	r1, [r7, #16]
 800219a:	4808      	ldr	r0, [pc, #32]	; (80021bc <Parse_Recieve_Data+0xd0>)
 800219c:	f00b f9e4 	bl	800d568 <strncpy>

	        		// Null-terminate the buffer
	        		receive_data[length] = '\0';
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <Parse_Recieve_Data+0xd0>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e000      	b.n	80021ae <Parse_Recieve_Data+0xc2>
	        			return;
 80021ac:	bf00      	nop
	        	}

	        }
	    }
}
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000060c 	.word	0x2000060c
 80021b8:	08010f50 	.word	0x08010f50
 80021bc:	20000678 	.word	0x20000678

080021c0 <get_timestep>:

// Get stored time in timer 2 in terms of seconds
double get_timestep() {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
	long double cur_time = TIM2->CNT;
 80021c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f999 	bl	8000504 <__aeabi_ui2d>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	e9c7 2300 	strd	r2, r3, [r7]
	// Reset timer for next call
	TIM2->CNT = 0;
 80021da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
	// Division to make time in terms of seconds
	cur_time /= 8000;
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <get_timestep+0x50>)
 80021e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021ec:	f7fe fb2e 	bl	800084c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	e9c7 2300 	strd	r2, r3, [r7]
	return (double)cur_time;
 80021f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8002200:	eeb0 0a47 	vmov.f32	s0, s14
 8002204:	eef0 0a67 	vmov.f32	s1, s15
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40bf4000 	.word	0x40bf4000

08002214 <buffer_print>:

void buffer_print(void* buffer, const char* msg) {
 8002214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
 8002220:	466b      	mov	r3, sp
 8002222:	469a      	mov	sl, r3
	uint8_t modded_buffer[strlen(buffer) + strlen(msg)];
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fe f823 	bl	8000270 <strlen>
 800222a:	4606      	mov	r6, r0
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f7fe f81f 	bl	8000270 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	18f1      	adds	r1, r6, r3
 8002236:	460b      	mov	r3, r1
 8002238:	3b01      	subs	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	2300      	movs	r3, #0
 800223e:	4688      	mov	r8, r1
 8002240:	4699      	mov	r9, r3
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002256:	2300      	movs	r3, #0
 8002258:	460c      	mov	r4, r1
 800225a:	461d      	mov	r5, r3
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	00eb      	lsls	r3, r5, #3
 8002266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226a:	00e2      	lsls	r2, r4, #3
 800226c:	1dcb      	adds	r3, r1, #7
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	ebad 0d03 	sub.w	sp, sp, r3
 8002276:	466b      	mov	r3, sp
 8002278:	3300      	adds	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
	sprintf(modded_buffer, "%s: %s\r\n", msg, buffer);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	490a      	ldr	r1, [pc, #40]	; (80022ac <buffer_print+0x98>)
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f00b f8f8 	bl	800d478 <siprintf>
	HAL_UART_Transmit(&huart2, modded_buffer, strlen(modded_buffer), HAL_MAX_DELAY);
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7fd fff1 	bl	8000270 <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	b29a      	uxth	r2, r3
 8002292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <buffer_print+0x9c>)
 800229a:	f005 fe9f 	bl	8007fdc <HAL_UART_Transmit>
 800229e:	46d5      	mov	sp, sl
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022aa:	bf00      	nop
 80022ac:	08010f68 	.word	0x08010f68
 80022b0:	2000052c 	.word	0x2000052c

080022b4 <receive_lora_packet>:

HAL_StatusTypeDef receive_lora_packet()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	bool received_new_packet = false;
 80022ba:	2300      	movs	r3, #0
 80022bc:	71fb      	strb	r3, [r7, #7]
	while (!received_new_packet) {
 80022be:	e008      	b.n	80022d2 <receive_lora_packet+0x1e>
	    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, 1);
 80022c0:	2201      	movs	r2, #1
 80022c2:	491c      	ldr	r1, [pc, #112]	; (8002334 <receive_lora_packet+0x80>)
 80022c4:	481c      	ldr	r0, [pc, #112]	; (8002338 <receive_lora_packet+0x84>)
 80022c6:	f005 ff13 	bl	80080f0 <HAL_UART_Receive_DMA>
	    if (UART1_rxBuffer[0] == '+')
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <receive_lora_packet+0x80>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b2b      	cmp	r3, #43	; 0x2b
 80022d0:	d006      	beq.n	80022e0 <receive_lora_packet+0x2c>
	while (!received_new_packet) {
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <receive_lora_packet+0xc>
 80022de:	e000      	b.n	80022e2 <receive_lora_packet+0x2e>
	    	break;
 80022e0:	bf00      	nop
	}
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, LORA_BUFFER_SIZE - 2);
 80022e2:	2267      	movs	r2, #103	; 0x67
 80022e4:	4913      	ldr	r1, [pc, #76]	; (8002334 <receive_lora_packet+0x80>)
 80022e6:	4814      	ldr	r0, [pc, #80]	; (8002338 <receive_lora_packet+0x84>)
 80022e8:	f005 ff02 	bl	80080f0 <HAL_UART_Receive_DMA>
//    buffer_print(UART1_rxBuffer, "rcv portion");
    // Packets MUST be from address 25 and have a length of 3 bytes or they will be discarded
    UART1_rxBuffer[LORA_BUFFER_SIZE - 1] = 0;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <receive_lora_packet+0x80>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (UART1_rxBuffer[LORA_BUFFER_SIZE - 2] == 'T')
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <receive_lora_packet+0x80>)
 80022f6:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80022fa:	2b54      	cmp	r3, #84	; 0x54
 80022fc:	d103      	bne.n	8002306 <receive_lora_packet+0x52>
    	UART1_rxBuffer[LORA_BUFFER_SIZE - 2] = 0;
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <receive_lora_packet+0x80>)
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	buffer_print(UART1_rxBuffer, "rxBuffer");
 8002306:	490d      	ldr	r1, [pc, #52]	; (800233c <receive_lora_packet+0x88>)
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <receive_lora_packet+0x80>)
 800230a:	f7ff ff83 	bl	8002214 <buffer_print>
//    if (strncmp(UART1_rxBuffer, "RCV=25,", 7)) {
//    	return HAL_ERROR;
//    }
    Parse_Recieve_Data();
 800230e:	f7ff feed 	bl	80020ec <Parse_Recieve_Data>
    buffer_print(receive_data, "data");
 8002312:	490b      	ldr	r1, [pc, #44]	; (8002340 <receive_lora_packet+0x8c>)
 8002314:	480b      	ldr	r0, [pc, #44]	; (8002344 <receive_lora_packet+0x90>)
 8002316:	f7ff ff7d 	bl	8002214 <buffer_print>
//    while (UART1_rxBuffer[0] != '\n') {
//    	HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_rxBuffer, 1);
////        buffer_print(UART1_rxBuffer, "garbage char");
//    }
    UART1_rxBuffer[0] = 0;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <receive_lora_packet+0x80>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
    TIM2->CNT = 0;
 8002320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

	return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000060c 	.word	0x2000060c
 8002338:	200004a4 	.word	0x200004a4
 800233c:	08010f74 	.word	0x08010f74
 8002340:	08010f80 	.word	0x08010f80
 8002344:	20000678 	.word	0x20000678

08002348 <Smooth_Speed>:

void Smooth_Speed(int tempThrottle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	// If the tempThrottle is above or below Max or Min set it to the Max or Min
	if (tempThrottle < Min_Throttle) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da02      	bge.n	800235c <Smooth_Speed+0x14>
		tempThrottle = Min_Throttle;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	e004      	b.n	8002366 <Smooth_Speed+0x1e>
	}
	else if (tempThrottle > Max_Throttle) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b50      	cmp	r3, #80	; 0x50
 8002360:	dd01      	ble.n	8002366 <Smooth_Speed+0x1e>
		tempThrottle = Max_Throttle;
 8002362:	2350      	movs	r3, #80	; 0x50
 8002364:	607b      	str	r3, [r7, #4]
	{

	}

	// see if the difference is bigger than 1 then smooth the throttle increase or decrease
	int diffThrottle = tempThrottle - throttle;
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <Smooth_Speed+0xa4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	60fb      	str	r3, [r7, #12]
	if (diffThrottle >= -1 && diffThrottle <= 1)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002376:	db02      	blt.n	800237e <Smooth_Speed+0x36>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	dd2f      	ble.n	80023de <Smooth_Speed+0x96>
	{
		return;
	}

	if (diffThrottle > 1)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	dd14      	ble.n	80023ae <Smooth_Speed+0x66>
	{
		while (throttle < tempThrottle)
 8002384:	e00d      	b.n	80023a2 <Smooth_Speed+0x5a>
		{
			throttle += 1;
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <Smooth_Speed+0xa4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <Smooth_Speed+0xa4>)
 800238e:	6013      	str	r3, [r2, #0]
			TIM3->CCR4 =  Min_PWM + throttle;
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <Smooth_Speed+0xa4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <Smooth_Speed+0xa8>)
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 800239c:	2064      	movs	r0, #100	; 0x64
 800239e:	f000 fd73 	bl	8002e88 <HAL_Delay>
		while (throttle < tempThrottle)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <Smooth_Speed+0xa4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dcec      	bgt.n	8002386 <Smooth_Speed+0x3e>
			throttle -= 1;
			TIM3->CCR4 =  Min_PWM + throttle;
			HAL_Delay(100);
		}
	}
	return;
 80023ac:	e019      	b.n	80023e2 <Smooth_Speed+0x9a>
	else if (diffThrottle < 1)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dc16      	bgt.n	80023e2 <Smooth_Speed+0x9a>
		while (throttle > tempThrottle)
 80023b4:	e00d      	b.n	80023d2 <Smooth_Speed+0x8a>
			throttle -= 1;
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <Smooth_Speed+0xa4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <Smooth_Speed+0xa4>)
 80023be:	6013      	str	r3, [r2, #0]
			TIM3->CCR4 =  Min_PWM + throttle;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <Smooth_Speed+0xa4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <Smooth_Speed+0xa8>)
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(100);
 80023cc:	2064      	movs	r0, #100	; 0x64
 80023ce:	f000 fd5b 	bl	8002e88 <HAL_Delay>
		while (throttle > tempThrottle)
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <Smooth_Speed+0xa4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbec      	blt.n	80023b6 <Smooth_Speed+0x6e>
	return;
 80023dc:	e001      	b.n	80023e2 <Smooth_Speed+0x9a>
		return;
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <Smooth_Speed+0x9c>
	return;
 80023e2:	bf00      	nop

}
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000067c 	.word	0x2000067c
 80023f0:	40000400 	.word	0x40000400

080023f4 <Error_Slow_Down>:
void Error_Slow_Down(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	  while (throttle > 0)
 80023f8:	e007      	b.n	800240a <Error_Slow_Down+0x16>
	  {
		  throttle--;
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <Error_Slow_Down+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <Error_Slow_Down+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
		  HAL_Delay(50);
 8002404:	2032      	movs	r0, #50	; 0x32
 8002406:	f000 fd3f 	bl	8002e88 <HAL_Delay>
	  while (throttle > 0)
 800240a:	4b03      	ldr	r3, [pc, #12]	; (8002418 <Error_Slow_Down+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	dcf3      	bgt.n	80023fa <Error_Slow_Down+0x6>
	  }
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000067c 	.word	0x2000067c

0800241c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002424:	2001      	movs	r0, #1
 8002426:	f007 fa01 	bl	800982c <osDelay>
 800242a:	e7fb      	b.n	8002424 <StartDefaultTask+0x8>

0800242c <ReadThrottle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadThrottle */
void ReadThrottle(void *argument)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b090      	sub	sp, #64	; 0x40
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  for(;;) {
//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 25);
    
//	Parse_Recieve_Data();
//	HAL_UART_Transmit(&huart2, receive_data, strlen(receive_data), 25);
    receive_lora_packet();
 8002434:	f7ff ff3e 	bl	80022b4 <receive_lora_packet>

	if (receive_data[0] == 'T') {
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <ReadThrottle+0x54>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b54      	cmp	r3, #84	; 0x54
 800243e:	d1f9      	bne.n	8002434 <ReadThrottle+0x8>
		int tempThrottle = atoi(receive_data + 1);
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <ReadThrottle+0x58>)
 8002442:	4618      	mov	r0, r3
 8002444:	f009 ff9a 	bl	800c37c <atoi>
 8002448:	63f8      	str	r0, [r7, #60]	; 0x3c
		Smooth_Speed(tempThrottle);
 800244a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800244c:	f7ff ff7c 	bl	8002348 <Smooth_Speed>
		sprintf(ThrottleMsg, "Set Throttle to: %i", throttle);
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <ReadThrottle+0x5c>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <ReadThrottle+0x60>)
 800245a:	4618      	mov	r0, r3
 800245c:	f00b f80c 	bl	800d478 <siprintf>
		HAL_UART_Transmit(&huart2, ThrottleMsg, strlen(ThrottleMsg), HAL_MAX_DELAY);
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ff03 	bl	8000270 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	b29a      	uxth	r2, r3
 800246e:	f107 0108 	add.w	r1, r7, #8
 8002472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002476:	4806      	ldr	r0, [pc, #24]	; (8002490 <ReadThrottle+0x64>)
 8002478:	f005 fdb0 	bl	8007fdc <HAL_UART_Transmit>
    receive_lora_packet();
 800247c:	e7da      	b.n	8002434 <ReadThrottle+0x8>
 800247e:	bf00      	nop
 8002480:	20000678 	.word	0x20000678
 8002484:	20000679 	.word	0x20000679
 8002488:	2000067c 	.word	0x2000067c
 800248c:	08010f88 	.word	0x08010f88
 8002490:	2000052c 	.word	0x2000052c

08002494 <SendSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSpeed */
void SendSpeed(void *argument)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendSpeed */
  /* Infinite loop */
  for(;;)
  {
	// Calculate Speed
	char formatted_speed[4] = "";
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
	sprintf(formatted_speed, "%.1f", current_speed);
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <SendSpeed+0x68>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f84f 	bl	8000548 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	f107 0014 	add.w	r0, r7, #20
 80024b2:	4913      	ldr	r1, [pc, #76]	; (8002500 <SendSpeed+0x6c>)
 80024b4:	f00a ffe0 	bl	800d478 <siprintf>
	Lora_Send_Data(formatted_speed);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fddf 	bl	8002080 <Lora_Send_Data>
	char formatted_trip[10] = "";
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	809a      	strh	r2, [r3, #4]
	sprintf(formatted_trip, "%.0f", current_distance);
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <SendSpeed+0x70>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f837 	bl	8000548 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	f107 0008 	add.w	r0, r7, #8
 80024e2:	4909      	ldr	r1, [pc, #36]	; (8002508 <SendSpeed+0x74>)
 80024e4:	f00a ffc8 	bl	800d478 <siprintf>
	Lora_Send_Data(formatted_trip);
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fdc7 	bl	8002080 <Lora_Send_Data>
  osDelay(1000);
 80024f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f6:	f007 f999 	bl	800982c <osDelay>
  {
 80024fa:	e7cf      	b.n	800249c <SendSpeed+0x8>
 80024fc:	20000230 	.word	0x20000230
 8002500:	08010f9c 	.word	0x08010f9c
 8002504:	20000240 	.word	0x20000240
 8002508:	08010fa4 	.word	0x08010fa4

0800250c <startAccelUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAccelUpdateTask */
void startAccelUpdateTask(void *argument)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAccelUpdateTask */
  /* Infinite loop */
  for(;;) {
    update_spatial(get_timestep());
 8002514:	f7ff fe54 	bl	80021c0 <get_timestep>
 8002518:	ec53 2b10 	vmov	r2, r3, d0
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe fb62 	bl	8000be8 <__aeabi_d2f>
 8002524:	4603      	mov	r3, r0
 8002526:	ee00 3a10 	vmov	s0, r3
 800252a:	f7ff f84f 	bl	80015cc <update_spatial>
 800252e:	e7f1      	b.n	8002514 <startAccelUpdateTask+0x8>

08002530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM7) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x16>
	Error_Slow_Down();
 8002542:	f7ff ff57 	bl	80023f4 <Error_Slow_Down>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002550:	f000 fc7a 	bl	8002e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40001400 	.word	0x40001400
 8002560:	40001000 	.word	0x40001000

08002564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002568:	b672      	cpsid	i
}
 800256a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  if (throttle > 0)
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <Error_Handler+0x24>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	ddfb      	ble.n	800256c <Error_Handler+0x8>
	  {
		  throttle--;
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <Error_Handler+0x24>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	4a03      	ldr	r2, [pc, #12]	; (8002588 <Error_Handler+0x24>)
 800257c:	6013      	str	r3, [r2, #0]
		  HAL_Delay(50);
 800257e:	2032      	movs	r0, #50	; 0x32
 8002580:	f000 fc82 	bl	8002e88 <HAL_Delay>
	  if (throttle > 0)
 8002584:	e7f2      	b.n	800256c <Error_Handler+0x8>
 8002586:	bf00      	nop
 8002588:	2000067c 	.word	0x2000067c

0800258c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_MspInit+0x4c>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_MspInit+0x4c>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6613      	str	r3, [r2, #96]	; 0x60
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_MspInit+0x4c>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_MspInit+0x4c>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_MspInit+0x4c>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_MspInit+0x4c>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	210f      	movs	r1, #15
 80025c6:	f06f 0001 	mvn.w	r0, #1
 80025ca:	f001 fcdd 	bl	8003f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0ac      	sub	sp, #176	; 0xb0
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2288      	movs	r2, #136	; 0x88
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00a ff9e 	bl	800d53e <memset>
  if(hadc->Instance==ADC1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <HAL_ADC_MspInit+0xc8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d146      	bne.n	800269a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800260c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002610:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002612:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800261a:	2302      	movs	r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002622:	2308      	movs	r3, #8
 8002624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002626:	2307      	movs	r3, #7
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800262a:	2302      	movs	r3, #2
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800262e:	2302      	movs	r3, #2
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fdb5 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002648:	f7ff ff8c 	bl	8002564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_ADC_MspInit+0xcc>)
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <HAL_ADC_MspInit+0xcc>)
 8002652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_ADC_MspInit+0xcc>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_ADC_MspInit+0xcc>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_ADC_MspInit+0xcc>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_ADC_MspInit+0xcc>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800267c:	2301      	movs	r3, #1
 800267e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002682:	230b      	movs	r3, #11
 8002684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_ADC_MspInit+0xd0>)
 8002696:	f001 ff17 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800269a:	bf00      	nop
 800269c:	37b0      	adds	r7, #176	; 0xb0
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	50040000 	.word	0x50040000
 80026a8:	40021000 	.word	0x40021000
 80026ac:	48000800 	.word	0x48000800

080026b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0ac      	sub	sp, #176	; 0xb0
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2288      	movs	r2, #136	; 0x88
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f00a ff34 	bl	800d53e <memset>
  if(hi2c->Instance==I2C1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_I2C_MspInit+0x104>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d164      	bne.n	80027aa <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fd5d 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026f8:	f7ff ff34 	bl	8002564 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 8002714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800271c:	2312      	movs	r3, #18
 800271e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800272e:	2304      	movs	r3, #4
 8002730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002738:	4619      	mov	r1, r3
 800273a:	4820      	ldr	r0, [pc, #128]	; (80027bc <HAL_I2C_MspInit+0x10c>)
 800273c:	f001 fec4 	bl	80044c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 8002746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800274a:	6593      	str	r3, [r2, #88]	; 0x58
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_I2C_MspInit+0x108>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_I2C_MspInit+0x114>)
 800275c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002760:	2203      	movs	r2, #3
 8002762:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002784:	2200      	movs	r2, #0
 8002786:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 8002790:	f001 fc24 	bl	8003fdc <HAL_DMA_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 800279a:	f7ff fee3 	bl	8002564 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_I2C_MspInit+0x110>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	37b0      	adds	r7, #176	; 0xb0
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40005400 	.word	0x40005400
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400
 80027c0:	20000378 	.word	0x20000378
 80027c4:	40020080 	.word	0x40020080

080027c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80027f2:	e02a      	b.n	800284a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_TIM_Base_MspInit+0x90>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10c      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6593      	str	r3, [r2, #88]	; 0x58
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
}
 8002816:	e018      	b.n	800284a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_TIM_Base_MspInit+0x94>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 8002828:	f043 0320 	orr.w	r3, r3, #32
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_TIM_Base_MspInit+0x8c>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2105      	movs	r1, #5
 800283e:	2037      	movs	r0, #55	; 0x37
 8002840:	f001 fba2 	bl	8003f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002844:	2037      	movs	r0, #55	; 0x37
 8002846:	f001 fbbb 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40000400 	.word	0x40000400
 800285c:	40001400 	.word	0x40001400

08002860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_TIM_MspPostInit+0x64>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11c      	bne.n	80028bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_TIM_MspPostInit+0x68>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_TIM_MspPostInit+0x68>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_TIM_MspPostInit+0x68>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800289a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4619      	mov	r1, r3
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_TIM_MspPostInit+0x6c>)
 80028b8:	f001 fe06 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40021000 	.word	0x40021000
 80028cc:	48000800 	.word	0x48000800

080028d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0ae      	sub	sp, #184	; 0xb8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	2288      	movs	r2, #136	; 0x88
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00a fe24 	bl	800d53e <memset>
  if(huart->Instance==USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_UART_MspInit+0x19c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d16f      	bne.n	80029e0 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002904:	2300      	movs	r3, #0
 8002906:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fc4d 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002918:	f7ff fe24 	bl	8002564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 800291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002920:	4a53      	ldr	r2, [pc, #332]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002926:	6613      	str	r3, [r2, #96]	; 0x60
 8002928:	4b51      	ldr	r3, [pc, #324]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 800292a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002934:	4b4e      	ldr	r3, [pc, #312]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002940:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800294c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002966:	2307      	movs	r3, #7
 8002968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002976:	f001 fda7 	bl	80044c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800297a:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 800297c:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <HAL_UART_MspInit+0x1a8>)
 800297e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002980:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 8002982:	2202      	movs	r2, #2
 8002984:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800298c:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 80029ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029b2:	4830      	ldr	r0, [pc, #192]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 80029b4:	f001 fb12 	bl	8003fdc <HAL_DMA_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80029be:	f7ff fdd1 	bl	8002564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 80029c6:	675a      	str	r2, [r3, #116]	; 0x74
 80029c8:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_UART_MspInit+0x1a4>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2105      	movs	r1, #5
 80029d2:	2025      	movs	r0, #37	; 0x25
 80029d4:	f001 fad8 	bl	8003f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029d8:	2025      	movs	r0, #37	; 0x25
 80029da:	f001 faf1 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029de:	e040      	b.n	8002a62 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a25      	ldr	r2, [pc, #148]	; (8002a7c <HAL_UART_MspInit+0x1ac>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d13b      	bne.n	8002a62 <HAL_UART_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029ea:	2302      	movs	r3, #2
 80029ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fbd8 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8002a02:	f7ff fdaf 	bl	8002564 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_UART_MspInit+0x1a0>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a36:	230c      	movs	r3, #12
 8002a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a4e:	2307      	movs	r3, #7
 8002a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5e:	f001 fd33 	bl	80044c8 <HAL_GPIO_Init>
}
 8002a62:	bf00      	nop
 8002a64:	37b8      	adds	r7, #184	; 0xb8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40021000 	.word	0x40021000
 8002a74:	200005b4 	.word	0x200005b4
 8002a78:	40020058 	.word	0x40020058
 8002a7c:	40004400 	.word	0x40004400

08002a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a8e:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <HAL_InitTick+0xe0>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <HAL_InitTick+0xe0>)
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_InitTick+0xe0>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aa6:	f107 0210 	add.w	r2, r7, #16
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fae9 	bl	8006088 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f003 fab6 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	6378      	str	r0, [r7, #52]	; 0x34
 8002ac6:	e004      	b.n	8002ad2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ac8:	f003 fab2 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8002acc:	4603      	mov	r3, r0
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_InitTick+0xe4>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0c9b      	lsrs	r3, r3, #18
 8002adc:	3b01      	subs	r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ae0:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_InitTick+0xe8>)
 8002ae2:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_InitTick+0xec>)
 8002ae4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_InitTick+0xe8>)
 8002ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_InitTick+0xe8>)
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002af4:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_InitTick+0xe8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_InitTick+0xe8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_InitTick+0xe8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002b06:	4818      	ldr	r0, [pc, #96]	; (8002b68 <HAL_InitTick+0xe8>)
 8002b08:	f004 f80c 	bl	8006b24 <HAL_TIM_Base_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11b      	bne.n	8002b52 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002b1a:	4813      	ldr	r0, [pc, #76]	; (8002b68 <HAL_InitTick+0xe8>)
 8002b1c:	f004 f85a 	bl	8006bd4 <HAL_TIM_Base_Start_IT>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002b26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d111      	bne.n	8002b52 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b2e:	2036      	movs	r0, #54	; 0x36
 8002b30:	f001 fa46 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	d808      	bhi.n	8002b4c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	2036      	movs	r0, #54	; 0x36
 8002b40:	f001 fa22 	bl	8003f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_InitTick+0xf0>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e002      	b.n	8002b52 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3738      	adds	r7, #56	; 0x38
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	20000680 	.word	0x20000680
 8002b6c:	40001000 	.word	0x40001000
 8002b70:	20000008 	.word	0x20000008

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <NMI_Handler+0x4>

08002b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <HardFault_Handler+0x4>

08002b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <MemManage_Handler+0x4>

08002b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <BusFault_Handler+0x4>

08002b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <UsageFault_Handler+0x4>

08002b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <DMA1_Channel5_IRQHandler+0x10>)
 8002ba6:	f001 fbb0 	bl	800430a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200005b4 	.word	0x200005b4

08002bb4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA1_Channel7_IRQHandler+0x10>)
 8002bba:	f001 fba6 	bl	800430a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000378 	.word	0x20000378

08002bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <USART1_IRQHandler+0x10>)
 8002bce:	f005 fadb 	bl	8008188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200004a4 	.word	0x200004a4

08002bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <TIM6_DAC_IRQHandler+0x10>)
 8002be2:	f004 f9cf 	bl	8006f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000680 	.word	0x20000680

08002bf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM7_IRQHandler+0x10>)
 8002bf6:	f004 f9c5 	bl	8006f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000458 	.word	0x20000458

08002c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return 1;
 8002c08:	2301      	movs	r3, #1
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_kill>:

int _kill(int pid, int sig)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c1e:	f00a fd7f 	bl	800d720 <__errno>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2216      	movs	r2, #22
 8002c26:	601a      	str	r2, [r3, #0]
  return -1;
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_exit>:

void _exit (int status)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ffe7 	bl	8002c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c46:	e7fe      	b.n	8002c46 <_exit+0x12>

08002c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e00a      	b.n	8002c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c5a:	f3af 8000 	nop.w
 8002c5e:	4601      	mov	r1, r0
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	60ba      	str	r2, [r7, #8]
 8002c66:	b2ca      	uxtb	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf0      	blt.n	8002c5a <_read+0x12>
  }

  return len;
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e009      	b.n	8002ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	60ba      	str	r2, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	dbf1      	blt.n	8002c94 <_write+0x12>
  }
  return len;
 8002cb0:	687b      	ldr	r3, [r7, #4]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_close>:

int _close(int file)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <_isatty>:

int _isatty(int file)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <_sbrk+0x5c>)
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <_sbrk+0x60>)
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <_sbrk+0x64>)
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <_sbrk+0x68>)
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <_sbrk+0x64>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d207      	bcs.n	8002d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d54:	f00a fce4 	bl	800d720 <__errno>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d62:	e009      	b.n	8002d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <_sbrk+0x64>)
 8002d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20018000 	.word	0x20018000
 8002d84:	00000400 	.word	0x00000400
 8002d88:	200006cc 	.word	0x200006cc
 8002d8c:	200021c0 	.word	0x200021c0

08002d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <SystemInit+0x20>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <SystemInit+0x20>)
 8002d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002db8:	f7ff ffea 	bl	8002d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <LoopForever+0xe>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc4:	e002      	b.n	8002dcc <LoopCopyDataInit>

08002dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dca:	3304      	adds	r3, #4

08002dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd0:	d3f9      	bcc.n	8002dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dd4:	4c0a      	ldr	r4, [pc, #40]	; (8002e00 <LoopForever+0x16>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd8:	e001      	b.n	8002dde <LoopFillZerobss>

08002dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ddc:	3204      	adds	r2, #4

08002dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de0:	d3fb      	bcc.n	8002dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002de2:	f00a fca3 	bl	800d72c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002de6:	f7fe fcb9 	bl	800175c <main>

08002dea <LoopForever>:

LoopForever:
    b LoopForever
 8002dea:	e7fe      	b.n	8002dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002df8:	080114d8 	.word	0x080114d8
  ldr r2, =_sbss
 8002dfc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e00:	200021c0 	.word	0x200021c0

08002e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e04:	e7fe      	b.n	8002e04 <ADC1_2_IRQHandler>
	...

08002e08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_Init+0x3c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <HAL_Init+0x3c>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1e:	2003      	movs	r0, #3
 8002e20:	f001 f8a7 	bl	8003f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e24:	200f      	movs	r0, #15
 8002e26:	f7ff fe2b 	bl	8002a80 <HAL_InitTick>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	e001      	b.n	8002e3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e36:	f7ff fba9 	bl	800258c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_IncTick+0x24>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000000c 	.word	0x2000000c
 8002e6c:	200006d0 	.word	0x200006d0

08002e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_GetTick+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	200006d0 	.word	0x200006d0

08002e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff ffee 	bl	8002e70 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea0:	d005      	beq.n	8002eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_Delay+0x44>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eae:	bf00      	nop
 8002eb0:	f7ff ffde 	bl	8002e70 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8f7      	bhi.n	8002eb0 <HAL_Delay+0x28>
  {
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <LL_ADC_SetOffset+0x44>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	03fff000 	.word	0x03fff000

08002f80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3360      	adds	r3, #96	; 0x60
 8002f8e:	461a      	mov	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b087      	sub	sp, #28
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3330      	adds	r3, #48	; 0x30
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	4413      	add	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	211f      	movs	r1, #31
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	401a      	ands	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 011f 	and.w	r1, r3, #31
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	431a      	orrs	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800303a:	b480      	push	{r7}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3314      	adds	r3, #20
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	0e5b      	lsrs	r3, r3, #25
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	4413      	add	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	0d1b      	lsrs	r3, r3, #20
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2107      	movs	r1, #7
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	401a      	ands	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	0d1b      	lsrs	r3, r3, #20
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a8:	43db      	mvns	r3, r3
 80030aa:	401a      	ands	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0318 	and.w	r3, r3, #24
 80030b2:	4908      	ldr	r1, [pc, #32]	; (80030d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030b4:	40d9      	lsrs	r1, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	400b      	ands	r3, r1
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	0007ffff 	.word	0x0007ffff

080030d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6093      	str	r3, [r2, #8]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003110:	d101      	bne.n	8003116 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003138:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003160:	d101      	bne.n	8003166 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <LL_ADC_IsEnabled+0x18>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <LL_ADC_IsEnabled+0x1a>
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e130      	b.n	8003464 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff f9e3 	bl	80025dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff67 	bl	80030fc <LL_ADC_IsDeepPowerDownEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff4d 	bl	80030d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff82 	bl	800314c <LL_ADC_IsInternalRegulatorEnabled>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff66 	bl	8003124 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003258:	4b84      	ldr	r3, [pc, #528]	; (800346c <HAL_ADC_Init+0x284>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	4a84      	ldr	r2, [pc, #528]	; (8003470 <HAL_ADC_Init+0x288>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800326c:	e002      	b.n	8003274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b01      	subs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff64 	bl	800314c <LL_ADC_IsInternalRegulatorEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff75 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80c9 	bne.w	8003452 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 80c5 	bne.w	8003452 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032d0:	f043 0202 	orr.w	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff49 	bl	8003174 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d115      	bne.n	8003314 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	4862      	ldr	r0, [pc, #392]	; (8003474 <HAL_ADC_Init+0x28c>)
 80032ea:	f7ff ff43 	bl	8003174 <LL_ADC_IsEnabled>
 80032ee:	4604      	mov	r4, r0
 80032f0:	4861      	ldr	r0, [pc, #388]	; (8003478 <HAL_ADC_Init+0x290>)
 80032f2:	f7ff ff3f 	bl	8003174 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	431c      	orrs	r4, r3
 80032fa:	4860      	ldr	r0, [pc, #384]	; (800347c <HAL_ADC_Init+0x294>)
 80032fc:	f7ff ff3a 	bl	8003174 <LL_ADC_IsEnabled>
 8003300:	4603      	mov	r3, r0
 8003302:	4323      	orrs	r3, r4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4619      	mov	r1, r3
 800330e:	485c      	ldr	r0, [pc, #368]	; (8003480 <HAL_ADC_Init+0x298>)
 8003310:	f7ff fdde 	bl	8002ed0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7e5b      	ldrb	r3, [r3, #25]
 8003318:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800331e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003324:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800332a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003332:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d106      	bne.n	8003350 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	3b01      	subs	r3, #1
 8003348:	045b      	lsls	r3, r3, #17
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	4b44      	ldr	r3, [pc, #272]	; (8003484 <HAL_ADC_Init+0x29c>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	430b      	orrs	r3, r1
 800337e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff1b 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 800338a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d13d      	bne.n	800340e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d13a      	bne.n	800340e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800339c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d118      	bne.n	80033fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ee:	430a      	orrs	r2, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	611a      	str	r2, [r3, #16]
 80033fc:	e007      	b.n	800340e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10c      	bne.n	8003430 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f023 010f 	bic.w	r1, r3, #15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
 800342e:	e007      	b.n	8003440 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 020f 	bic.w	r2, r2, #15
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f023 0303 	bic.w	r3, r3, #3
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
 8003450:	e007      	b.n	8003462 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0210 	orr.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003462:	7ffb      	ldrb	r3, [r7, #31]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3724      	adds	r7, #36	; 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	20000004 	.word	0x20000004
 8003470:	053e2d63 	.word	0x053e2d63
 8003474:	50040000 	.word	0x50040000
 8003478:	50040100 	.word	0x50040100
 800347c:	50040200 	.word	0x50040200
 8003480:	50040300 	.word	0x50040300
 8003484:	fff0c007 	.word	0xfff0c007

08003488 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b0b6      	sub	sp, #216	; 0xd8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x22>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e3c9      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x7b6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fe6f 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 83aa 	bne.w	8003c18 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d824      	bhi.n	800351e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	3b02      	subs	r3, #2
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d81b      	bhi.n	8003516 <HAL_ADC_ConfigChannel+0x8e>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_ADC_ConfigChannel+0x5c>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	080034fd 	.word	0x080034fd
 80034ec:	08003505 	.word	0x08003505
 80034f0:	0800350d 	.word	0x0800350d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80034f4:	230c      	movs	r3, #12
 80034f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80034fa:	e010      	b.n	800351e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80034fc:	2312      	movs	r3, #18
 80034fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003502:	e00c      	b.n	800351e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003504:	2318      	movs	r3, #24
 8003506:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800350a:	e008      	b.n	800351e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800350c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003514:	e003      	b.n	800351e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003516:	2306      	movs	r3, #6
 8003518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800351c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800352c:	f7ff fd59 	bl	8002fe2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fe30 	bl	800319a <LL_ADC_REG_IsConversionOngoing>
 800353a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fe3c 	bl	80031c0 <LL_ADC_INJ_IsConversionOngoing>
 8003548:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800354c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 81a4 	bne.w	800389e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 819f 	bne.w	800389e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6819      	ldr	r1, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	461a      	mov	r2, r3
 800356e:	f7ff fd64 	bl	800303a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	08db      	lsrs	r3, r3, #3
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d00a      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6919      	ldr	r1, [r3, #16]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035a4:	f7ff fcc8 	bl	8002f38 <LL_ADC_SetOffset>
 80035a8:	e179      	b.n	800389e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fce5 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x14e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fcda 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 80035cc:	4603      	mov	r3, r0
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	e01e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x18c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fccf 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e004      	b.n	8003612 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_ADC_ConfigChannel+0x1a4>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	e018      	b.n	800365e <HAL_ADC_ConfigChannel+0x1d6>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003648:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e004      	b.n	800365e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003654:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800365e:	429a      	cmp	r2, r3
 8003660:	d106      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fc9e 	bl	8002fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fc82 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <HAL_ADC_ConfigChannel+0x214>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fc77 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 8003692:	4603      	mov	r3, r0
 8003694:	0e9b      	lsrs	r3, r3, #26
 8003696:	f003 021f 	and.w	r2, r3, #31
 800369a:	e01e      	b.n	80036da <HAL_ADC_ConfigChannel+0x252>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fc6c 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80036ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80036c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80036ca:	2320      	movs	r3, #32
 80036cc:	e004      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80036ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x26a>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0e9b      	lsrs	r3, r3, #26
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	e018      	b.n	8003724 <HAL_ADC_ConfigChannel+0x29c>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800370a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800370e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003716:	2320      	movs	r3, #32
 8003718:	e004      	b.n	8003724 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800371a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003724:	429a      	cmp	r2, r3
 8003726:	d106      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2200      	movs	r2, #0
 800372e:	2101      	movs	r1, #1
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fc3b 	bl	8002fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2102      	movs	r1, #2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fc1f 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x2da>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2102      	movs	r1, #2
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fc14 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	e01e      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x318>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fc09 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 800376e:	4603      	mov	r3, r0
 8003770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e004      	b.n	800379e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x330>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	0e9b      	lsrs	r3, r3, #26
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	e014      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x35a>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80037c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80037cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80037d4:	2320      	movs	r3, #32
 80037d6:	e004      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80037d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d106      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fbdc 	bl	8002fac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2103      	movs	r1, #3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fbc0 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x398>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2103      	movs	r1, #3
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fbb5 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	f003 021f 	and.w	r2, r3, #31
 800381e:	e017      	b.n	8003850 <HAL_ADC_ConfigChannel+0x3c8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2103      	movs	r1, #3
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fbaa 	bl	8002f80 <LL_ADC_GetOffsetChannel>
 800382c:	4603      	mov	r3, r0
 800382e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800383c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e003      	b.n	800384e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x3e0>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	e011      	b.n	800388c <HAL_ADC_ConfigChannel+0x404>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003878:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800387a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003880:	2320      	movs	r3, #32
 8003882:	e003      	b.n	800388c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	2103      	movs	r1, #3
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fb87 	bl	8002fac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fc66 	bl	8003174 <LL_ADC_IsEnabled>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 8140 	bne.w	8003b30 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	461a      	mov	r2, r3
 80038be:	f7ff fbe7 	bl	8003090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4a8f      	ldr	r2, [pc, #572]	; (8003b04 <HAL_ADC_ConfigChannel+0x67c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	f040 8131 	bne.w	8003b30 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x46e>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0e9b      	lsrs	r3, r3, #26
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	bf94      	ite	ls
 80038ee:	2301      	movls	r3, #1
 80038f0:	2300      	movhi	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e019      	b.n	800392a <HAL_ADC_ConfigChannel+0x4a2>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800390e:	2320      	movs	r3, #32
 8003910:	e003      	b.n	800391a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	3301      	adds	r3, #1
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2b09      	cmp	r3, #9
 8003922:	bf94      	ite	ls
 8003924:	2301      	movls	r3, #1
 8003926:	2300      	movhi	r3, #0
 8003928:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392a:	2b00      	cmp	r3, #0
 800392c:	d079      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	2b00      	cmp	r3, #0
 8003938:	d107      	bne.n	800394a <HAL_ADC_ConfigChannel+0x4c2>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0e9b      	lsrs	r3, r3, #26
 8003940:	3301      	adds	r3, #1
 8003942:	069b      	lsls	r3, r3, #26
 8003944:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003948:	e015      	b.n	8003976 <HAL_ADC_ConfigChannel+0x4ee>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3301      	adds	r3, #1
 8003970:	069b      	lsls	r3, r3, #26
 8003972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x50e>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2101      	movs	r1, #1
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	e017      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x53e>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80039a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80039a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e003      	b.n	80039ba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80039b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x564>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 021f 	and.w	r2, r3, #31
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	051b      	lsls	r3, r3, #20
 80039ea:	e018      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x596>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e003      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	fab3 f383 	clz	r3, r3
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f003 021f 	and.w	r2, r3, #31
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	e081      	b.n	8003b26 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x5b6>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	3301      	adds	r3, #1
 8003a36:	069b      	lsls	r3, r3, #26
 8003a38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a3c:	e015      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x5e2>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003a56:	2320      	movs	r3, #32
 8003a58:	e003      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	069b      	lsls	r3, r3, #26
 8003a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x602>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	e017      	b.n	8003aba <HAL_ADC_ConfigChannel+0x632>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	61bb      	str	r3, [r7, #24]
  return result;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	e003      	b.n	8003aae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	ea42 0103 	orr.w	r1, r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x65e>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f003 021f 	and.w	r2, r3, #31
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	3b1e      	subs	r3, #30
 8003ade:	051b      	lsls	r3, r3, #20
 8003ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	e01e      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x69c>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	60fb      	str	r3, [r7, #12]
  return result;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003afe:	2320      	movs	r3, #32
 8003b00:	e006      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x688>
 8003b02:	bf00      	nop
 8003b04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	f003 021f 	and.w	r2, r3, #31
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3b1e      	subs	r3, #30
 8003b1e:	051b      	lsls	r3, r3, #20
 8003b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b24:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f7ff fa85 	bl	800303a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07a      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b3c:	4843      	ldr	r0, [pc, #268]	; (8003c4c <HAL_ADC_ConfigChannel+0x7c4>)
 8003b3e:	f7ff f9ed 	bl	8002f1c <LL_ADC_GetCommonPathInternalCh>
 8003b42:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d12c      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d126      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x6e8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3b      	ldr	r2, [pc, #236]	; (8003c58 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d15d      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4834      	ldr	r0, [pc, #208]	; (8003c4c <HAL_ADC_ConfigChannel+0x7c4>)
 8003b7c:	f7ff f9bb 	bl	8002ef6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b80:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <HAL_ADC_ConfigChannel+0x7d4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	4a36      	ldr	r2, [pc, #216]	; (8003c60 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b9a:	e002      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f9      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba8:	e040      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_ADC_ConfigChannel+0x7dc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d118      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d112      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <HAL_ADC_ConfigChannel+0x7cc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_ADC_ConfigChannel+0x74c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d12d      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	4619      	mov	r1, r3
 8003bde:	481b      	ldr	r0, [pc, #108]	; (8003c4c <HAL_ADC_ConfigChannel+0x7c4>)
 8003be0:	f7ff f989 	bl	8002ef6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003be4:	e024      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_ADC_ConfigChannel+0x7e0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d120      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11a      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d115      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c0e:	4619      	mov	r1, r3
 8003c10:	480e      	ldr	r0, [pc, #56]	; (8003c4c <HAL_ADC_ConfigChannel+0x7c4>)
 8003c12:	f7ff f970 	bl	8002ef6 <LL_ADC_SetCommonPathInternalCh>
 8003c16:	e00c      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c2a:	e002      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	37d8      	adds	r7, #216	; 0xd8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	80080000 	.word	0x80080000
 8003c4c:	50040300 	.word	0x50040300
 8003c50:	c7520000 	.word	0xc7520000
 8003c54:	50040000 	.word	0x50040000
 8003c58:	50040200 	.word	0x50040200
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	053e2d63 	.word	0x053e2d63
 8003c64:	cb840000 	.word	0xcb840000
 8003c68:	80000001 	.word	0x80000001

08003c6c <LL_ADC_IsEnabled>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <LL_ADC_IsEnabled+0x18>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <LL_ADC_IsEnabled+0x1a>
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d101      	bne.n	8003caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b09f      	sub	sp, #124	; 0x7c
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e093      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d102      	bne.n	8003cf6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cf0:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	e001      	b.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e072      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ffb9 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003d20:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ffb3 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d154      	bne.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d151      	bne.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d38:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003d3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02c      	beq.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d56:	035b      	lsls	r3, r3, #13
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d60:	4829      	ldr	r0, [pc, #164]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d62:	f7ff ff83 	bl	8003c6c <LL_ADC_IsEnabled>
 8003d66:	4604      	mov	r4, r0
 8003d68:	4828      	ldr	r0, [pc, #160]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d6a:	f7ff ff7f 	bl	8003c6c <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	431c      	orrs	r4, r3
 8003d72:	4828      	ldr	r0, [pc, #160]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003d74:	f7ff ff7a 	bl	8003c6c <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4323      	orrs	r3, r4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d137      	bne.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d88:	f023 030f 	bic.w	r3, r3, #15
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	6811      	ldr	r1, [r2, #0]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6892      	ldr	r2, [r2, #8]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d9c:	e028      	b.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003daa:	4817      	ldr	r0, [pc, #92]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dac:	f7ff ff5e 	bl	8003c6c <LL_ADC_IsEnabled>
 8003db0:	4604      	mov	r4, r0
 8003db2:	4816      	ldr	r0, [pc, #88]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003db4:	f7ff ff5a 	bl	8003c6c <LL_ADC_IsEnabled>
 8003db8:	4603      	mov	r3, r0
 8003dba:	431c      	orrs	r4, r3
 8003dbc:	4815      	ldr	r0, [pc, #84]	; (8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003dbe:	f7ff ff55 	bl	8003c6c <LL_ADC_IsEnabled>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4323      	orrs	r3, r4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d112      	bne.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003dda:	e009      	b.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003dee:	e000      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003df0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	377c      	adds	r7, #124	; 0x7c
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	50040000 	.word	0x50040000
 8003e0c:	50040100 	.word	0x50040100
 8003e10:	50040300 	.word	0x50040300
 8003e14:	50040200 	.word	0x50040200

08003e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <__NVIC_SetPriorityGrouping+0x44>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e34:	4013      	ands	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4a:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <__NVIC_SetPriorityGrouping+0x44>)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	60d3      	str	r3, [r2, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <__NVIC_GetPriorityGrouping+0x18>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	f003 0307 	and.w	r3, r3, #7
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	e000ed00 	.word	0xe000ed00

08003e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	db0b      	blt.n	8003ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	4907      	ldr	r1, [pc, #28]	; (8003eb4 <__NVIC_EnableIRQ+0x38>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db0a      	blt.n	8003ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	490c      	ldr	r1, [pc, #48]	; (8003f04 <__NVIC_SetPriority+0x4c>)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	440b      	add	r3, r1
 8003edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee0:	e00a      	b.n	8003ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4908      	ldr	r1, [pc, #32]	; (8003f08 <__NVIC_SetPriority+0x50>)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	3b04      	subs	r3, #4
 8003ef0:	0112      	lsls	r2, r2, #4
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	761a      	strb	r2, [r3, #24]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000e100 	.word	0xe000e100
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	bf28      	it	cs
 8003f2a:	2304      	movcs	r3, #4
 8003f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <NVIC_EncodePriority+0x30>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3b03      	subs	r3, #3
 8003f3a:	e000      	b.n	8003f3e <NVIC_EncodePriority+0x32>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	401a      	ands	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	4313      	orrs	r3, r2
         );
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ff4c 	bl	8003e18 <__NVIC_SetPriorityGrouping>
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9a:	f7ff ff61 	bl	8003e60 <__NVIC_GetPriorityGrouping>
 8003f9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	6978      	ldr	r0, [r7, #20]
 8003fa6:	f7ff ffb1 	bl	8003f0c <NVIC_EncodePriority>
 8003faa:	4602      	mov	r2, r0
 8003fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff80 	bl	8003eb8 <__NVIC_SetPriority>
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff54 	bl	8003e7c <__NVIC_EnableIRQ>
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e098      	b.n	8004120 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_DMA_Init+0x150>)
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d80f      	bhi.n	800401a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <HAL_DMA_Init+0x154>)
 8004002:	4413      	add	r3, r2
 8004004:	4a4b      	ldr	r2, [pc, #300]	; (8004134 <HAL_DMA_Init+0x158>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	009a      	lsls	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a48      	ldr	r2, [pc, #288]	; (8004138 <HAL_DMA_Init+0x15c>)
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
 8004018:	e00e      	b.n	8004038 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	4b46      	ldr	r3, [pc, #280]	; (800413c <HAL_DMA_Init+0x160>)
 8004022:	4413      	add	r3, r2
 8004024:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_DMA_Init+0x158>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	091b      	lsrs	r3, r3, #4
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_DMA_Init+0x164>)
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d039      	beq.n	8004108 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	4a27      	ldr	r2, [pc, #156]	; (8004138 <HAL_DMA_Init+0x15c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d11a      	bne.n	80040d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_DMA_Init+0x168>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	f003 031c 	and.w	r3, r3, #28
 80040aa:	210f      	movs	r1, #15
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	4924      	ldr	r1, [pc, #144]	; (8004144 <HAL_DMA_Init+0x168>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040b8:	4b22      	ldr	r3, [pc, #136]	; (8004144 <HAL_DMA_Init+0x168>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	f003 031c 	and.w	r3, r3, #28
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	491d      	ldr	r1, [pc, #116]	; (8004144 <HAL_DMA_Init+0x168>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
 80040d2:	e019      	b.n	8004108 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_DMA_Init+0x16c>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f003 031c 	and.w	r3, r3, #28
 80040e0:	210f      	movs	r1, #15
 80040e2:	fa01 f303 	lsl.w	r3, r1, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	4917      	ldr	r1, [pc, #92]	; (8004148 <HAL_DMA_Init+0x16c>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <HAL_DMA_Init+0x16c>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f003 031c 	and.w	r3, r3, #28
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	4911      	ldr	r1, [pc, #68]	; (8004148 <HAL_DMA_Init+0x16c>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40020407 	.word	0x40020407
 8004130:	bffdfff8 	.word	0xbffdfff8
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	40020000 	.word	0x40020000
 800413c:	bffdfbf8 	.word	0xbffdfbf8
 8004140:	40020400 	.word	0x40020400
 8004144:	400200a8 	.word	0x400200a8
 8004148:	400204a8 	.word	0x400204a8

0800414c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_DMA_Start_IT+0x20>
 8004168:	2302      	movs	r3, #2
 800416a:	e04b      	b.n	8004204 <HAL_DMA_Start_IT+0xb8>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d13a      	bne.n	80041f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f95f 	bl	8004468 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 020e 	orr.w	r2, r2, #14
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e00f      	b.n	80041e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0204 	bic.w	r2, r2, #4
 80041d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 020a 	orr.w	r2, r2, #10
 80041e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e005      	b.n	8004202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d008      	beq.n	8004236 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e022      	b.n	800427c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 020e 	bic.w	r2, r2, #14
 8004244:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f003 021c 	and.w	r2, r3, #28
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d005      	beq.n	80042ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e029      	b.n	8004300 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020e 	bic.w	r2, r2, #14
 80042ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	f003 021c 	and.w	r2, r3, #28
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
    }
  }
  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f003 031c 	and.w	r3, r3, #28
 800432a:	2204      	movs	r2, #4
 800432c:	409a      	lsls	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d026      	beq.n	8004384 <HAL_DMA_IRQHandler+0x7a>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d021      	beq.n	8004384 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d107      	bne.n	800435e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0204 	bic.w	r2, r2, #4
 800435c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f003 021c 	and.w	r2, r3, #28
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2104      	movs	r1, #4
 800436c:	fa01 f202 	lsl.w	r2, r1, r2
 8004370:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	2b00      	cmp	r3, #0
 8004378:	d071      	beq.n	800445e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004382:	e06c      	b.n	800445e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	f003 031c 	and.w	r3, r3, #28
 800438c:	2202      	movs	r2, #2
 800438e:	409a      	lsls	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02e      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xec>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d029      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 020a 	bic.w	r2, r2, #10
 80043be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	f003 021c 	and.w	r2, r3, #28
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2102      	movs	r1, #2
 80043d6:	fa01 f202 	lsl.w	r2, r1, r2
 80043da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d038      	beq.n	800445e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043f4:	e033      	b.n	800445e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 031c 	and.w	r3, r3, #28
 80043fe:	2208      	movs	r2, #8
 8004400:	409a      	lsls	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d02a      	beq.n	8004460 <HAL_DMA_IRQHandler+0x156>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d025      	beq.n	8004460 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020e 	bic.w	r2, r2, #14
 8004422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f003 021c 	and.w	r2, r3, #28
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800445e:	bf00      	nop
 8004460:	bf00      	nop
}
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f003 021c 	and.w	r2, r3, #28
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d108      	bne.n	80044ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044aa:	e007      	b.n	80044bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d6:	e17f      	b.n	80047d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8171 	beq.w	80047d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d005      	beq.n	8004508 <HAL_GPIO_Init+0x40>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d130      	bne.n	800456a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	2203      	movs	r2, #3
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800453e:	2201      	movs	r2, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	f003 0201 	and.w	r2, r3, #1
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b03      	cmp	r3, #3
 8004574:	d118      	bne.n	80045a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800457c:	2201      	movs	r2, #1
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	f003 0201 	and.w	r2, r3, #1
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d017      	beq.n	80045e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	2203      	movs	r2, #3
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d123      	bne.n	8004638 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	08da      	lsrs	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3208      	adds	r2, #8
 80045f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	220f      	movs	r2, #15
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	08da      	lsrs	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3208      	adds	r2, #8
 8004632:	6939      	ldr	r1, [r7, #16]
 8004634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	2203      	movs	r2, #3
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0203 	and.w	r2, r3, #3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80ac 	beq.w	80047d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467a:	4b5f      	ldr	r3, [pc, #380]	; (80047f8 <HAL_GPIO_Init+0x330>)
 800467c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467e:	4a5e      	ldr	r2, [pc, #376]	; (80047f8 <HAL_GPIO_Init+0x330>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6613      	str	r3, [r2, #96]	; 0x60
 8004686:	4b5c      	ldr	r3, [pc, #368]	; (80047f8 <HAL_GPIO_Init+0x330>)
 8004688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004692:	4a5a      	ldr	r2, [pc, #360]	; (80047fc <HAL_GPIO_Init+0x334>)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	220f      	movs	r2, #15
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046bc:	d025      	beq.n	800470a <HAL_GPIO_Init+0x242>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4f      	ldr	r2, [pc, #316]	; (8004800 <HAL_GPIO_Init+0x338>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01f      	beq.n	8004706 <HAL_GPIO_Init+0x23e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	; (8004804 <HAL_GPIO_Init+0x33c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d019      	beq.n	8004702 <HAL_GPIO_Init+0x23a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4d      	ldr	r2, [pc, #308]	; (8004808 <HAL_GPIO_Init+0x340>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_GPIO_Init+0x236>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4c      	ldr	r2, [pc, #304]	; (800480c <HAL_GPIO_Init+0x344>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00d      	beq.n	80046fa <HAL_GPIO_Init+0x232>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4b      	ldr	r2, [pc, #300]	; (8004810 <HAL_GPIO_Init+0x348>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <HAL_GPIO_Init+0x22e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <HAL_GPIO_Init+0x34c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <HAL_GPIO_Init+0x22a>
 80046ee:	2306      	movs	r3, #6
 80046f0:	e00c      	b.n	800470c <HAL_GPIO_Init+0x244>
 80046f2:	2307      	movs	r3, #7
 80046f4:	e00a      	b.n	800470c <HAL_GPIO_Init+0x244>
 80046f6:	2305      	movs	r3, #5
 80046f8:	e008      	b.n	800470c <HAL_GPIO_Init+0x244>
 80046fa:	2304      	movs	r3, #4
 80046fc:	e006      	b.n	800470c <HAL_GPIO_Init+0x244>
 80046fe:	2303      	movs	r3, #3
 8004700:	e004      	b.n	800470c <HAL_GPIO_Init+0x244>
 8004702:	2302      	movs	r3, #2
 8004704:	e002      	b.n	800470c <HAL_GPIO_Init+0x244>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_GPIO_Init+0x244>
 800470a:	2300      	movs	r3, #0
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	f002 0203 	and.w	r2, r2, #3
 8004712:	0092      	lsls	r2, r2, #2
 8004714:	4093      	lsls	r3, r2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800471c:	4937      	ldr	r1, [pc, #220]	; (80047fc <HAL_GPIO_Init+0x334>)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	3302      	adds	r3, #2
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800472a:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_GPIO_Init+0x350>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800474e:	4a32      	ldr	r2, [pc, #200]	; (8004818 <HAL_GPIO_Init+0x350>)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004754:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_GPIO_Init+0x350>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004778:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_GPIO_Init+0x350>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_GPIO_Init+0x350>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_GPIO_Init+0x350>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_GPIO_Init+0x350>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047cc:	4a12      	ldr	r2, [pc, #72]	; (8004818 <HAL_GPIO_Init+0x350>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	3301      	adds	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f47f ae78 	bne.w	80044d8 <HAL_GPIO_Init+0x10>
  }
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40010000 	.word	0x40010000
 8004800:	48000400 	.word	0x48000400
 8004804:	48000800 	.word	0x48000800
 8004808:	48000c00 	.word	0x48000c00
 800480c:	48001000 	.word	0x48001000
 8004810:	48001400 	.word	0x48001400
 8004814:	48001800 	.word	0x48001800
 8004818:	40010400 	.word	0x40010400

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004838:	e002      	b.n	8004840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e08d      	b.n	800497a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd ff1c 	bl	80026b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	; 0x24
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800489c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	e006      	b.n	80048d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d108      	bne.n	80048ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	e007      	b.n	80048fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1a      	ldr	r2, [r3, #32]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4603      	mov	r3, r0
 8004994:	817b      	strh	r3, [r7, #10]
 8004996:	460b      	mov	r3, r1
 8004998:	813b      	strh	r3, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	f040 80f9 	bne.w	8004b9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_I2C_Mem_Write+0x34>
 80049b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d105      	bne.n	80049c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0ed      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_I2C_Mem_Write+0x4e>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e0e6      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049da:	f7fe fa49 	bl	8002e70 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2319      	movs	r3, #25
 80049e6:	2201      	movs	r2, #1
 80049e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fac3 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0d1      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2221      	movs	r2, #33	; 0x21
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a3a      	ldr	r2, [r7, #32]
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a24:	88f8      	ldrh	r0, [r7, #6]
 8004a26:	893a      	ldrh	r2, [r7, #8]
 8004a28:	8979      	ldrh	r1, [r7, #10]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4603      	mov	r3, r0
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f9d3 	bl	8004de0 <I2C_RequestMemoryWrite>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0a9      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2bff      	cmp	r3, #255	; 0xff
 8004a54:	d90e      	bls.n	8004a74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	22ff      	movs	r2, #255	; 0xff
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	8979      	ldrh	r1, [r7, #10]
 8004a64:	2300      	movs	r3, #0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fc3d 	bl	80052ec <I2C_TransferConfig>
 8004a72:	e00f      	b.n	8004a94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	8979      	ldrh	r1, [r7, #10]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fc2c 	bl	80052ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fabc 	bl	8005016 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e07b      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d034      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x1c8>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d130      	bne.n	8004b4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2200      	movs	r2, #0
 8004af2:	2180      	movs	r1, #128	; 0x80
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fa3f 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e04d      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d90e      	bls.n	8004b2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	8979      	ldrh	r1, [r7, #10]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fbe1 	bl	80052ec <I2C_TransferConfig>
 8004b2a:	e00f      	b.n	8004b4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	8979      	ldrh	r1, [r7, #10]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fbd0 	bl	80052ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d19e      	bne.n	8004a94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 faa2 	bl	80050a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e01a      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_I2C_Mem_Write+0x224>)
 8004b7e:	400b      	ands	r3, r1
 8004b80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	fe00e800 	.word	0xfe00e800

08004bac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	f040 80fd 	bne.w	8004dce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_I2C_Mem_Read+0x34>
 8004bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0f1      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2C_Mem_Read+0x4e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0ea      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c02:	f7fe f935 	bl	8002e70 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2319      	movs	r3, #25
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f9af 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0d5      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2222      	movs	r2, #34	; 0x22
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2240      	movs	r2, #64	; 0x40
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c4c:	88f8      	ldrh	r0, [r7, #6]
 8004c4e:	893a      	ldrh	r2, [r7, #8]
 8004c50:	8979      	ldrh	r1, [r7, #10]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f913 	bl	8004e88 <I2C_RequestMemoryRead>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0ad      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2bff      	cmp	r3, #255	; 0xff
 8004c7c:	d90e      	bls.n	8004c9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	8979      	ldrh	r1, [r7, #10]
 8004c8c:	4b52      	ldr	r3, [pc, #328]	; (8004dd8 <HAL_I2C_Mem_Read+0x22c>)
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fb29 	bl	80052ec <I2C_TransferConfig>
 8004c9a:	e00f      	b.n	8004cbc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	8979      	ldrh	r1, [r7, #10]
 8004cae:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <HAL_I2C_Mem_Read+0x22c>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fb18 	bl	80052ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f956 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e07c      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d034      	beq.n	8004d7c <HAL_I2C_Mem_Read+0x1d0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d130      	bne.n	8004d7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	2200      	movs	r2, #0
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f927 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04d      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2bff      	cmp	r3, #255	; 0xff
 8004d3c:	d90e      	bls.n	8004d5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	8979      	ldrh	r1, [r7, #10]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fac9 	bl	80052ec <I2C_TransferConfig>
 8004d5a:	e00f      	b.n	8004d7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	8979      	ldrh	r1, [r7, #10]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fab8 	bl	80052ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d19a      	bne.n	8004cbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f98a 	bl	80050a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e01a      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_I2C_Mem_Read+0x230>)
 8004dae:	400b      	ands	r3, r1
 8004db0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
  }
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	80002400 	.word	0x80002400
 8004ddc:	fe00e800 	.word	0xfe00e800

08004de0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	4608      	mov	r0, r1
 8004dea:	4611      	mov	r1, r2
 8004dec:	461a      	mov	r2, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	817b      	strh	r3, [r7, #10]
 8004df2:	460b      	mov	r3, r1
 8004df4:	813b      	strh	r3, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	8979      	ldrh	r1, [r7, #10]
 8004e00:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <I2C_RequestMemoryWrite+0xa4>)
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fa6f 	bl	80052ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	69b9      	ldr	r1, [r7, #24]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f8ff 	bl	8005016 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e02c      	b.n	8004e7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e28:	893b      	ldrh	r3, [r7, #8]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	629a      	str	r2, [r3, #40]	; 0x28
 8004e32:	e015      	b.n	8004e60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f8e5 	bl	8005016 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e012      	b.n	8004e7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e56:	893b      	ldrh	r3, [r7, #8]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f884 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	80002000 	.word	0x80002000

08004e88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	813b      	strh	r3, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	8979      	ldrh	r1, [r7, #10]
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <I2C_RequestMemoryRead+0xa4>)
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fa1c 	bl	80052ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	69b9      	ldr	r1, [r7, #24]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f8ac 	bl	8005016 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e02c      	b.n	8004f22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ece:	893b      	ldrh	r3, [r7, #8]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed8:	e015      	b.n	8004f06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004eda:	893b      	ldrh	r3, [r7, #8]
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f892 	bl	8005016 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e012      	b.n	8004f22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2140      	movs	r1, #64	; 0x40
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f831 	bl	8004f78 <I2C_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	80002000 	.word	0x80002000

08004f30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d103      	bne.n	8004f4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d007      	beq.n	8004f6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	619a      	str	r2, [r3, #24]
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f88:	e031      	b.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f90:	d02d      	beq.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fd ff6d 	bl	8002e70 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d122      	bne.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d113      	bne.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e00f      	b.n	800500e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	429a      	cmp	r2, r3
 800500a:	d0be      	beq.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005022:	e033      	b.n	800508c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f87f 	bl	800512c <I2C_IsErrorOccurred>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e031      	b.n	800509c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503e:	d025      	beq.n	800508c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005040:	f7fd ff16 	bl	8002e70 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11a      	bne.n	800508c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d013      	beq.n	800508c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e007      	b.n	800509c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d1c4      	bne.n	8005024 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050b0:	e02f      	b.n	8005112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f838 	bl	800512c <I2C_IsErrorOccurred>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e02d      	b.n	8005122 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c6:	f7fd fed3 	bl	8002e70 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d302      	bcc.n	80050dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11a      	bne.n	8005112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d013      	beq.n	8005112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e007      	b.n	8005122 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b20      	cmp	r3, #32
 800511e:	d1c8      	bne.n	80050b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d068      	beq.n	800522a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2210      	movs	r2, #16
 800515e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005160:	e049      	b.n	80051f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005168:	d045      	beq.n	80051f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fd fe81 	bl	8002e70 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <I2C_IsErrorOccurred+0x54>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d13a      	bne.n	80051f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800518a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005192:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a2:	d121      	bne.n	80051e8 <I2C_IsErrorOccurred+0xbc>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051aa:	d01d      	beq.n	80051e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d01a      	beq.n	80051e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051c2:	f7fd fe55 	bl	8002e70 <HAL_GetTick>
 80051c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c8:	e00e      	b.n	80051e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051ca:	f7fd fe51 	bl	8002e70 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b19      	cmp	r3, #25
 80051d6:	d907      	bls.n	80051e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	f043 0320 	orr.w	r3, r3, #32
 80051de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80051e6:	e006      	b.n	80051f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d1e9      	bne.n	80051ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b20      	cmp	r3, #32
 8005202:	d003      	beq.n	800520c <I2C_IsErrorOccurred+0xe0>
 8005204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0aa      	beq.n	8005162 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2220      	movs	r2, #32
 800521a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800524c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	f043 0308 	orr.w	r3, r3, #8
 8005264:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800526e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005290:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01c      	beq.n	80052da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff fe45 	bl	8004f30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <I2C_IsErrorOccurred+0x1bc>)
 80052b2:	400b      	ands	r3, r1
 80052b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	fe00e800 	.word	0xfe00e800

080052ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	4613      	mov	r3, r2
 80052fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005304:	7a7b      	ldrb	r3, [r7, #9]
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800530c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	4313      	orrs	r3, r2
 8005316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800531a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	0d5b      	lsrs	r3, r3, #21
 8005326:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <I2C_TransferConfig+0x60>)
 800532c:	430b      	orrs	r3, r1
 800532e:	43db      	mvns	r3, r3
 8005330:	ea02 0103 	and.w	r1, r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	03ff63ff 	.word	0x03ff63ff

08005350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b20      	cmp	r3, #32
 8005364:	d138      	bne.n	80053d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e032      	b.n	80053da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d139      	bne.n	8005470 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005406:	2302      	movs	r3, #2
 8005408:	e033      	b.n	8005472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2224      	movs	r2, #36	; 0x24
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005438:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 0201 	orr.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e000      	b.n	8005472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005470:	2302      	movs	r3, #2
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <HAL_PWREx_GetVoltageRange+0x18>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40007000 	.word	0x40007000

0800549c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054aa:	d130      	bne.n	800550e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d038      	beq.n	800552c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ba:	4b20      	ldr	r3, [pc, #128]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2232      	movs	r2, #50	; 0x32
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	4a1b      	ldr	r2, [pc, #108]	; (8005544 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	0c9b      	lsrs	r3, r3, #18
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054e0:	e002      	b.n	80054e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f4:	d102      	bne.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f2      	bne.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005508:	d110      	bne.n	800552c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e00f      	b.n	800552e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551a:	d007      	beq.n	800552c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005524:	4a05      	ldr	r2, [pc, #20]	; (800553c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800552a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40007000 	.word	0x40007000
 8005540:	20000004 	.word	0x20000004
 8005544:	431bde83 	.word	0x431bde83

08005548 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e3ca      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800555a:	4b97      	ldr	r3, [pc, #604]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005564:	4b94      	ldr	r3, [pc, #592]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80e4 	beq.w	8005744 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <HAL_RCC_OscConfig+0x4a>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	f040 808b 	bne.w	80056a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 8087 	bne.w	80056a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005592:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCC_OscConfig+0x62>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e3a2      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	4b82      	ldr	r3, [pc, #520]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <HAL_RCC_OscConfig+0x7c>
 80055ba:	4b7f      	ldr	r3, [pc, #508]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c2:	e005      	b.n	80055d0 <HAL_RCC_OscConfig+0x88>
 80055c4:	4b7c      	ldr	r3, [pc, #496]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80055c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d223      	bcs.n	800561c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fd87 	bl	80060ec <RCC_SetFlashLatencyFromMSIRange>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e383      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055e8:	4b73      	ldr	r3, [pc, #460]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a72      	ldr	r2, [pc, #456]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80055ee:	f043 0308 	orr.w	r3, r3, #8
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	4b70      	ldr	r3, [pc, #448]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	496d      	ldr	r1, [pc, #436]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005606:	4b6c      	ldr	r3, [pc, #432]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	4968      	ldr	r1, [pc, #416]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
 800561a:	e025      	b.n	8005668 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800561c:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a65      	ldr	r2, [pc, #404]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005622:	f043 0308 	orr.w	r3, r3, #8
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b63      	ldr	r3, [pc, #396]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4960      	ldr	r1, [pc, #384]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800563a:	4b5f      	ldr	r3, [pc, #380]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	495b      	ldr	r1, [pc, #364]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800564a:	4313      	orrs	r3, r2
 800564c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fd47 	bl	80060ec <RCC_SetFlashLatencyFromMSIRange>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e343      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005668:	f000 fc4a 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 800566c:	4602      	mov	r2, r0
 800566e:	4b52      	ldr	r3, [pc, #328]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	4950      	ldr	r1, [pc, #320]	; (80057bc <HAL_RCC_OscConfig+0x274>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
 8005684:	4a4e      	ldr	r2, [pc, #312]	; (80057c0 <HAL_RCC_OscConfig+0x278>)
 8005686:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005688:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <HAL_RCC_OscConfig+0x27c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f7fd f9f7 	bl	8002a80 <HAL_InitTick>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d052      	beq.n	8005742 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	e327      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d032      	beq.n	800570e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056b4:	f7fd fbdc 	bl	8002e70 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056bc:	f7fd fbd8 	bl	8002e70 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e310      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056ce:	4b3a      	ldr	r3, [pc, #232]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056da:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4931      	ldr	r1, [pc, #196]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056f8:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	492c      	ldr	r1, [pc, #176]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005708:	4313      	orrs	r3, r2
 800570a:	604b      	str	r3, [r1, #4]
 800570c:	e01a      	b.n	8005744 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800571a:	f7fd fba9 	bl	8002e70 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005722:	f7fd fba5 	bl	8002e70 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e2dd      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005734:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f0      	bne.n	8005722 <HAL_RCC_OscConfig+0x1da>
 8005740:	e000      	b.n	8005744 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005742:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d074      	beq.n	800583a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b08      	cmp	r3, #8
 8005754:	d005      	beq.n	8005762 <HAL_RCC_OscConfig+0x21a>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b0c      	cmp	r3, #12
 800575a:	d10e      	bne.n	800577a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d10b      	bne.n	800577a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005762:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d064      	beq.n	8005838 <HAL_RCC_OscConfig+0x2f0>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d160      	bne.n	8005838 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e2ba      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005782:	d106      	bne.n	8005792 <HAL_RCC_OscConfig+0x24a>
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a0b      	ldr	r2, [pc, #44]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e026      	b.n	80057e0 <HAL_RCC_OscConfig+0x298>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800579a:	d115      	bne.n	80057c8 <HAL_RCC_OscConfig+0x280>
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80057a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a02      	ldr	r2, [pc, #8]	; (80057b8 <HAL_RCC_OscConfig+0x270>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e014      	b.n	80057e0 <HAL_RCC_OscConfig+0x298>
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000
 80057bc:	08011054 	.word	0x08011054
 80057c0:	20000004 	.word	0x20000004
 80057c4:	20000008 	.word	0x20000008
 80057c8:	4ba0      	ldr	r3, [pc, #640]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a9f      	ldr	r2, [pc, #636]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80057ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b9d      	ldr	r3, [pc, #628]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a9c      	ldr	r2, [pc, #624]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80057da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d013      	beq.n	8005810 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fd fb42 	bl	8002e70 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f0:	f7fd fb3e 	bl	8002e70 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b64      	cmp	r3, #100	; 0x64
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e276      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005802:	4b92      	ldr	r3, [pc, #584]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2a8>
 800580e:	e014      	b.n	800583a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fd fb2e 	bl	8002e70 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005818:	f7fd fb2a 	bl	8002e70 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	; 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e262      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800582a:	4b88      	ldr	r3, [pc, #544]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x2d0>
 8005836:	e000      	b.n	800583a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d060      	beq.n	8005908 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d005      	beq.n	8005858 <HAL_RCC_OscConfig+0x310>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d119      	bne.n	8005886 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d116      	bne.n	8005886 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005858:	4b7c      	ldr	r3, [pc, #496]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_OscConfig+0x328>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e23f      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005870:	4b76      	ldr	r3, [pc, #472]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	4973      	ldr	r1, [pc, #460]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005884:	e040      	b.n	8005908 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d023      	beq.n	80058d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588e:	4b6f      	ldr	r3, [pc, #444]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a6e      	ldr	r2, [pc, #440]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fd fae9 	bl	8002e70 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fd fae5 	bl	8002e70 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e21d      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b4:	4b65      	ldr	r3, [pc, #404]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b62      	ldr	r3, [pc, #392]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	495f      	ldr	r1, [pc, #380]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
 80058d4:	e018      	b.n	8005908 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d6:	4b5d      	ldr	r3, [pc, #372]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5c      	ldr	r2, [pc, #368]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fd fac5 	bl	8002e70 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ea:	f7fd fac1 	bl	8002e70 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e1f9      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058fc:	4b53      	ldr	r3, [pc, #332]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d03c      	beq.n	800598e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01c      	beq.n	8005956 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591c:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 800591e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005922:	4a4a      	ldr	r2, [pc, #296]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7fd faa0 	bl	8002e70 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005934:	f7fd fa9c 	bl	8002e70 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e1d4      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005946:	4b41      	ldr	r3, [pc, #260]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ef      	beq.n	8005934 <HAL_RCC_OscConfig+0x3ec>
 8005954:	e01b      	b.n	800598e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005956:	4b3d      	ldr	r3, [pc, #244]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595c:	4a3b      	ldr	r2, [pc, #236]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005966:	f7fd fa83 	bl	8002e70 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800596e:	f7fd fa7f 	bl	8002e70 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e1b7      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005980:	4b32      	ldr	r3, [pc, #200]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ef      	bne.n	800596e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a6 	beq.w	8005ae8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800599c:	2300      	movs	r3, #0
 800599e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059a0:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ac:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	4a26      	ldr	r2, [pc, #152]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80059b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6593      	str	r3, [r2, #88]	; 0x58
 80059b8:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059c4:	2301      	movs	r3, #1
 80059c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c8:	4b21      	ldr	r3, [pc, #132]	; (8005a50 <HAL_RCC_OscConfig+0x508>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d118      	bne.n	8005a06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059d4:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <HAL_RCC_OscConfig+0x508>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <HAL_RCC_OscConfig+0x508>)
 80059da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059e0:	f7fd fa46 	bl	8002e70 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e8:	f7fd fa42 	bl	8002e70 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e17a      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <HAL_RCC_OscConfig+0x508>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCC_OscConfig+0x4d8>
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a1e:	e029      	b.n	8005a74 <HAL_RCC_OscConfig+0x52c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d115      	bne.n	8005a54 <HAL_RCC_OscConfig+0x50c>
 8005a28:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	4a07      	ldr	r2, [pc, #28]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	4a03      	ldr	r2, [pc, #12]	; (8005a4c <HAL_RCC_OscConfig+0x504>)
 8005a40:	f043 0301 	orr.w	r3, r3, #1
 8005a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a48:	e014      	b.n	8005a74 <HAL_RCC_OscConfig+0x52c>
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40007000 	.word	0x40007000
 8005a54:	4b9c      	ldr	r3, [pc, #624]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	4a9b      	ldr	r2, [pc, #620]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a64:	4b98      	ldr	r3, [pc, #608]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	4a97      	ldr	r2, [pc, #604]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fd f9f8 	bl	8002e70 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7fd f9f4 	bl	8002e70 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e12a      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a9a:	4b8b      	ldr	r3, [pc, #556]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ed      	beq.n	8005a84 <HAL_RCC_OscConfig+0x53c>
 8005aa8:	e015      	b.n	8005ad6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aaa:	f7fd f9e1 	bl	8002e70 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fd f9dd 	bl	8002e70 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e113      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ac8:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1ed      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad6:	7ffb      	ldrb	r3, [r7, #31]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d105      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005adc:	4b7a      	ldr	r3, [pc, #488]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae0:	4a79      	ldr	r2, [pc, #484]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80fe 	beq.w	8005cee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	f040 80d0 	bne.w	8005c9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005afc:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f003 0203 	and.w	r2, r3, #3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d130      	bne.n	8005b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d127      	bne.n	8005b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d11f      	bne.n	8005b72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b3c:	2a07      	cmp	r2, #7
 8005b3e:	bf14      	ite	ne
 8005b40:	2201      	movne	r2, #1
 8005b42:	2200      	moveq	r2, #0
 8005b44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d113      	bne.n	8005b72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	3b01      	subs	r3, #1
 8005b58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d109      	bne.n	8005b72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d06e      	beq.n	8005c50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d069      	beq.n	8005c4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b78:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b84:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0ad      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b94:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a4b      	ldr	r2, [pc, #300]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ba0:	f7fd f966 	bl	8002e70 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fd f962 	bl	8002e70 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e09a      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bba:	4b43      	ldr	r3, [pc, #268]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc6:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	4b40      	ldr	r3, [pc, #256]	; (8005ccc <HAL_RCC_OscConfig+0x784>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	4311      	orrs	r1, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be0:	0212      	lsls	r2, r2, #8
 8005be2:	4311      	orrs	r1, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005be8:	0852      	lsrs	r2, r2, #1
 8005bea:	3a01      	subs	r2, #1
 8005bec:	0552      	lsls	r2, r2, #21
 8005bee:	4311      	orrs	r1, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bf4:	0852      	lsrs	r2, r2, #1
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	0652      	lsls	r2, r2, #25
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c00:	0912      	lsrs	r2, r2, #4
 8005c02:	0452      	lsls	r2, r2, #17
 8005c04:	430a      	orrs	r2, r1
 8005c06:	4930      	ldr	r1, [pc, #192]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c18:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c24:	f7fd f924 	bl	8002e70 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fd f920 	bl	8002e70 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e058      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c3e:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c4a:	e050      	b.n	8005cee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e04f      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d148      	bne.n	8005cee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c68:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c74:	f7fd f8fc 	bl	8002e70 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fd f8f8 	bl	8002e70 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e030      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x734>
 8005c9a:	e028      	b.n	8005cee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d023      	beq.n	8005cea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <HAL_RCC_OscConfig+0x780>)
 8005ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fd f8df 	bl	8002e70 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb4:	e00c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb6:	f7fd f8db 	bl	8002e70 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d905      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e013      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_RCC_OscConfig+0x7b0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1ec      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <HAL_RCC_OscConfig+0x7b0>)
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	4905      	ldr	r1, [pc, #20]	; (8005cf8 <HAL_RCC_OscConfig+0x7b0>)
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <HAL_RCC_OscConfig+0x7b4>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60cb      	str	r3, [r1, #12]
 8005ce8:	e001      	b.n	8005cee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	feeefffc 	.word	0xfeeefffc

08005d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0e7      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d14:	4b75      	ldr	r3, [pc, #468]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d910      	bls.n	8005d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d22:	4b72      	ldr	r3, [pc, #456]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f023 0207 	bic.w	r2, r3, #7
 8005d2a:	4970      	ldr	r1, [pc, #448]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b6e      	ldr	r3, [pc, #440]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0cf      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	4b66      	ldr	r3, [pc, #408]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d908      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d60:	4b63      	ldr	r3, [pc, #396]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4960      	ldr	r1, [pc, #384]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d04c      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d107      	bne.n	8005d96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d86:	4b5a      	ldr	r3, [pc, #360]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d121      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e0a6      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d107      	bne.n	8005dae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d9e:	4b54      	ldr	r3, [pc, #336]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d115      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e09a      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005db6:	4b4e      	ldr	r3, [pc, #312]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e08e      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e086      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dd6:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f023 0203 	bic.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4943      	ldr	r1, [pc, #268]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de8:	f7fd f842 	bl	8002e70 <HAL_GetTick>
 8005dec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dee:	e00a      	b.n	8005e06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df0:	f7fd f83e 	bl	8002e70 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e06e      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e06:	4b3a      	ldr	r3, [pc, #232]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 020c 	and.w	r2, r3, #12
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d1eb      	bne.n	8005df0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d010      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d208      	bcs.n	8005e46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e34:	4b2e      	ldr	r3, [pc, #184]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	492b      	ldr	r1, [pc, #172]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e46:	4b29      	ldr	r3, [pc, #164]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d210      	bcs.n	8005e76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e54:	4b25      	ldr	r3, [pc, #148]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 0207 	bic.w	r2, r3, #7
 8005e5c:	4923      	ldr	r1, [pc, #140]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e64:	4b21      	ldr	r3, [pc, #132]	; (8005eec <HAL_RCC_ClockConfig+0x1ec>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d001      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e036      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e82:	4b1b      	ldr	r3, [pc, #108]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	4918      	ldr	r1, [pc, #96]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4910      	ldr	r1, [pc, #64]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005eb4:	f000 f824 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	490b      	ldr	r1, [pc, #44]	; (8005ef4 <HAL_RCC_ClockConfig+0x1f4>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <HAL_RCC_ClockConfig+0x1f8>)
 8005ed2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <HAL_RCC_ClockConfig+0x1fc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fc fdd1 	bl	8002a80 <HAL_InitTick>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40022000 	.word	0x40022000
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	08011054 	.word	0x08011054
 8005ef8:	20000004 	.word	0x20000004
 8005efc:	20000008 	.word	0x20000008

08005f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f0e:	4b3e      	ldr	r3, [pc, #248]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
 8005f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f18:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x34>
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	d121      	bne.n	8005f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d11e      	bne.n	8005f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f34:	4b34      	ldr	r3, [pc, #208]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f40:	4b31      	ldr	r3, [pc, #196]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	e005      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	; (800600c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f70:	e00a      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d102      	bne.n	8005f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e004      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d101      	bne.n	8005f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f84:	4b23      	ldr	r3, [pc, #140]	; (8006014 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d134      	bne.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d003      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0xac>
 8005fa4:	e005      	b.n	8005fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fa6:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fa8:	617b      	str	r3, [r7, #20]
      break;
 8005faa:	e005      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fac:	4b19      	ldr	r3, [pc, #100]	; (8006014 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fae:	617b      	str	r3, [r7, #20]
      break;
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	617b      	str	r3, [r7, #20]
      break;
 8005fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fb8:	4b13      	ldr	r3, [pc, #76]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	091b      	lsrs	r3, r3, #4
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	fb03 f202 	mul.w	r2, r3, r2
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fde:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	0e5b      	lsrs	r3, r3, #25
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	3301      	adds	r3, #1
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000
 800600c:	0801106c 	.word	0x0801106c
 8006010:	00f42400 	.word	0x00f42400
 8006014:	007a1200 	.word	0x007a1200

08006018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800601c:	4b03      	ldr	r3, [pc, #12]	; (800602c <HAL_RCC_GetHCLKFreq+0x14>)
 800601e:	681b      	ldr	r3, [r3, #0]
}
 8006020:	4618      	mov	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000004 	.word	0x20000004

08006030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006034:	f7ff fff0 	bl	8006018 <HAL_RCC_GetHCLKFreq>
 8006038:	4602      	mov	r2, r0
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	4904      	ldr	r1, [pc, #16]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006046:	5ccb      	ldrb	r3, [r1, r3]
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006050:	4618      	mov	r0, r3
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40021000 	.word	0x40021000
 8006058:	08011064 	.word	0x08011064

0800605c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006060:	f7ff ffda 	bl	8006018 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	0adb      	lsrs	r3, r3, #11
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4904      	ldr	r1, [pc, #16]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000
 8006084:	08011064 	.word	0x08011064

08006088 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	220f      	movs	r2, #15
 8006096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006098:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0203 	and.w	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80060bc:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_GetClockConfig+0x5c>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	08db      	lsrs	r3, r3, #3
 80060c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <HAL_RCC_GetClockConfig+0x60>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0207 	and.w	r2, r3, #7
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40022000 	.word	0x40022000

080060ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060f8:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006104:	f7ff f9bc 	bl	8005480 <HAL_PWREx_GetVoltageRange>
 8006108:	6178      	str	r0, [r7, #20]
 800610a:	e014      	b.n	8006136 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800610c:	4b25      	ldr	r3, [pc, #148]	; (80061a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800610e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006110:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006116:	6593      	str	r3, [r2, #88]	; 0x58
 8006118:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800611a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006124:	f7ff f9ac 	bl	8005480 <HAL_PWREx_GetVoltageRange>
 8006128:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800612a:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	4a1d      	ldr	r2, [pc, #116]	; (80061a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006134:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613c:	d10b      	bne.n	8006156 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b80      	cmp	r3, #128	; 0x80
 8006142:	d919      	bls.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2ba0      	cmp	r3, #160	; 0xa0
 8006148:	d902      	bls.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800614a:	2302      	movs	r3, #2
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	e013      	b.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006150:	2301      	movs	r3, #1
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e010      	b.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b80      	cmp	r3, #128	; 0x80
 800615a:	d902      	bls.n	8006162 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800615c:	2303      	movs	r3, #3
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	e00a      	b.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b80      	cmp	r3, #128	; 0x80
 8006166:	d102      	bne.n	800616e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006168:	2302      	movs	r3, #2
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e004      	b.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b70      	cmp	r3, #112	; 0x70
 8006172:	d101      	bne.n	8006178 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006174:	2301      	movs	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f023 0207 	bic.w	r2, r3, #7
 8006180:	4909      	ldr	r1, [pc, #36]	; (80061a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	429a      	cmp	r2, r3
 8006194:	d001      	beq.n	800619a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	40022000 	.word	0x40022000

080061ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061b4:	2300      	movs	r3, #0
 80061b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061b8:	2300      	movs	r3, #0
 80061ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d041      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061d0:	d02a      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061d6:	d824      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061dc:	d008      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061e2:	d81e      	bhi.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ec:	d010      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061ee:	e018      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061f0:	4b86      	ldr	r3, [pc, #536]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a85      	ldr	r2, [pc, #532]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061fc:	e015      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3304      	adds	r3, #4
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fabb 	bl	8006780 <RCCEx_PLLSAI1_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800620e:	e00c      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3320      	adds	r3, #32
 8006214:	2100      	movs	r1, #0
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fba6 	bl	8006968 <RCCEx_PLLSAI2_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006220:	e003      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	74fb      	strb	r3, [r7, #19]
      break;
 8006226:	e000      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800622a:	7cfb      	ldrb	r3, [r7, #19]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10b      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006230:	4b76      	ldr	r3, [pc, #472]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800623e:	4973      	ldr	r1, [pc, #460]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006246:	e001      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	7cfb      	ldrb	r3, [r7, #19]
 800624a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d041      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006260:	d02a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006262:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006266:	d824      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800626c:	d008      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800626e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006272:	d81e      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800627c:	d010      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800627e:	e018      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006280:	4b62      	ldr	r3, [pc, #392]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4a61      	ldr	r2, [pc, #388]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800628c:	e015      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3304      	adds	r3, #4
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fa73 	bl	8006780 <RCCEx_PLLSAI1_Config>
 800629a:	4603      	mov	r3, r0
 800629c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800629e:	e00c      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3320      	adds	r3, #32
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fb5e 	bl	8006968 <RCCEx_PLLSAI2_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	74fb      	strb	r3, [r7, #19]
      break;
 80062b6:	e000      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ba:	7cfb      	ldrb	r3, [r7, #19]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10b      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062c0:	4b52      	ldr	r3, [pc, #328]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ce:	494f      	ldr	r1, [pc, #316]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062d6:	e001      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	7cfb      	ldrb	r3, [r7, #19]
 80062da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80a0 	beq.w	800642a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ea:	2300      	movs	r3, #0
 80062ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006304:	4b41      	ldr	r3, [pc, #260]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006308:	4a40      	ldr	r2, [pc, #256]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800630e:	6593      	str	r3, [r2, #88]	; 0x58
 8006310:	4b3e      	ldr	r3, [pc, #248]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800631c:	2301      	movs	r3, #1
 800631e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006320:	4b3b      	ldr	r3, [pc, #236]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a3a      	ldr	r2, [pc, #232]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800632a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800632c:	f7fc fda0 	bl	8002e70 <HAL_GetTick>
 8006330:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006332:	e009      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006334:	f7fc fd9c 	bl	8002e70 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d902      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	74fb      	strb	r3, [r7, #19]
        break;
 8006346:	e005      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006348:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ef      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d15c      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800635a:	4b2c      	ldr	r3, [pc, #176]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006364:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01f      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	429a      	cmp	r2, r3
 8006376:	d019      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006378:	4b24      	ldr	r3, [pc, #144]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006384:	4b21      	ldr	r3, [pc, #132]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	4a20      	ldr	r2, [pc, #128]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006394:	4b1d      	ldr	r3, [pc, #116]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	4a1c      	ldr	r2, [pc, #112]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800639c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063a4:	4a19      	ldr	r2, [pc, #100]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fc fd5b 	bl	8002e70 <HAL_GetTick>
 80063ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063bc:	e00b      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fc fd57 	bl	8002e70 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d902      	bls.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	74fb      	strb	r3, [r7, #19]
            break;
 80063d4:	e006      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ec      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063e4:	7cfb      	ldrb	r3, [r7, #19]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10c      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063ea:	4b08      	ldr	r3, [pc, #32]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fa:	4904      	ldr	r1, [pc, #16]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006402:	e009      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	74bb      	strb	r3, [r7, #18]
 8006408:	e006      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800640a:	bf00      	nop
 800640c:	40021000 	.word	0x40021000
 8006410:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006418:	7c7b      	ldrb	r3, [r7, #17]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d105      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800641e:	4b9e      	ldr	r3, [pc, #632]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	4a9d      	ldr	r2, [pc, #628]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006428:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006436:	4b98      	ldr	r3, [pc, #608]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	f023 0203 	bic.w	r2, r3, #3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	4994      	ldr	r1, [pc, #592]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006458:	4b8f      	ldr	r3, [pc, #572]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f023 020c 	bic.w	r2, r3, #12
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	498c      	ldr	r1, [pc, #560]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800647a:	4b87      	ldr	r3, [pc, #540]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	4983      	ldr	r1, [pc, #524]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800649c:	4b7e      	ldr	r3, [pc, #504]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064aa:	497b      	ldr	r1, [pc, #492]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064be:	4b76      	ldr	r3, [pc, #472]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064cc:	4972      	ldr	r1, [pc, #456]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064e0:	4b6d      	ldr	r3, [pc, #436]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	496a      	ldr	r1, [pc, #424]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006502:	4b65      	ldr	r3, [pc, #404]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006510:	4961      	ldr	r1, [pc, #388]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006524:	4b5c      	ldr	r3, [pc, #368]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006532:	4959      	ldr	r1, [pc, #356]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006546:	4b54      	ldr	r3, [pc, #336]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	4950      	ldr	r1, [pc, #320]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006568:	4b4b      	ldr	r3, [pc, #300]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	4948      	ldr	r1, [pc, #288]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800658a:	4b43      	ldr	r3, [pc, #268]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006598:	493f      	ldr	r1, [pc, #252]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d028      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ac:	4b3a      	ldr	r3, [pc, #232]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ba:	4937      	ldr	r1, [pc, #220]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ca:	d106      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065cc:	4b32      	ldr	r3, [pc, #200]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a31      	ldr	r2, [pc, #196]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d6:	60d3      	str	r3, [r2, #12]
 80065d8:	e011      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065e2:	d10c      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	2101      	movs	r1, #1
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 f8c8 	bl	8006780 <RCCEx_PLLSAI1_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065f4:	7cfb      	ldrb	r3, [r7, #19]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80065fa:	7cfb      	ldrb	r3, [r7, #19]
 80065fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d028      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006610:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	491f      	ldr	r1, [pc, #124]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006628:	d106      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800662a:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	4a1a      	ldr	r2, [pc, #104]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006634:	60d3      	str	r3, [r2, #12]
 8006636:	e011      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006640:	d10c      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	2101      	movs	r1, #1
 8006648:	4618      	mov	r0, r3
 800664a:	f000 f899 	bl	8006780 <RCCEx_PLLSAI1_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006652:	7cfb      	ldrb	r3, [r7, #19]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006658:	7cfb      	ldrb	r3, [r7, #19]
 800665a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006676:	4908      	ldr	r1, [pc, #32]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006686:	d109      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006688:	4b03      	ldr	r3, [pc, #12]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4a02      	ldr	r2, [pc, #8]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006692:	60d3      	str	r3, [r2, #12]
 8006694:	e014      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066a4:	d10c      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	2101      	movs	r1, #1
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 f867 	bl	8006780 <RCCEx_PLLSAI1_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066b6:	7cfb      	ldrb	r3, [r7, #19]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d02f      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066da:	4928      	ldr	r1, [pc, #160]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ea:	d10d      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	2102      	movs	r1, #2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f844 	bl	8006780 <RCCEx_PLLSAI1_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066fc:	7cfb      	ldrb	r3, [r7, #19]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d014      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	74bb      	strb	r3, [r7, #18]
 8006706:	e011      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800670c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006710:	d10c      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3320      	adds	r3, #32
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f000 f925 	bl	8006968 <RCCEx_PLLSAI2_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006722:	7cfb      	ldrb	r3, [r7, #19]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006728:	7cfb      	ldrb	r3, [r7, #19]
 800672a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006746:	490d      	ldr	r1, [pc, #52]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00b      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800675a:	4b08      	ldr	r3, [pc, #32]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	4904      	ldr	r1, [pc, #16]	; (800677c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006772:	7cbb      	ldrb	r3, [r7, #18]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40021000 	.word	0x40021000

08006780 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800678e:	4b75      	ldr	r3, [pc, #468]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800679a:	4b72      	ldr	r3, [pc, #456]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0203 	and.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d10d      	bne.n	80067c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
       ||
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067b2:	4b6c      	ldr	r3, [pc, #432]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
       ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d047      	beq.n	8006856 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	e044      	b.n	8006856 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d018      	beq.n	8006806 <RCCEx_PLLSAI1_Config+0x86>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d825      	bhi.n	8006824 <RCCEx_PLLSAI1_Config+0xa4>
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d002      	beq.n	80067e2 <RCCEx_PLLSAI1_Config+0x62>
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d009      	beq.n	80067f4 <RCCEx_PLLSAI1_Config+0x74>
 80067e0:	e020      	b.n	8006824 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067e2:	4b60      	ldr	r3, [pc, #384]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d11d      	bne.n	800682a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067f2:	e01a      	b.n	800682a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067f4:	4b5b      	ldr	r3, [pc, #364]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d116      	bne.n	800682e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006804:	e013      	b.n	800682e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006806:	4b57      	ldr	r3, [pc, #348]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006812:	4b54      	ldr	r3, [pc, #336]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006822:	e006      	b.n	8006832 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      break;
 8006828:	e004      	b.n	8006834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006832:	bf00      	nop
    }

    if(status == HAL_OK)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800683a:	4b4a      	ldr	r3, [pc, #296]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6819      	ldr	r1, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	3b01      	subs	r3, #1
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	430b      	orrs	r3, r1
 8006850:	4944      	ldr	r1, [pc, #272]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006852:	4313      	orrs	r3, r2
 8006854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d17d      	bne.n	8006958 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800685c:	4b41      	ldr	r3, [pc, #260]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a40      	ldr	r2, [pc, #256]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006868:	f7fc fb02 	bl	8002e70 <HAL_GetTick>
 800686c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800686e:	e009      	b.n	8006884 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006870:	f7fc fafe 	bl	8002e70 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d902      	bls.n	8006884 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
        break;
 8006882:	e005      	b.n	8006890 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006884:	4b37      	ldr	r3, [pc, #220]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1ef      	bne.n	8006870 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d160      	bne.n	8006958 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d111      	bne.n	80068c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800689c:	4b31      	ldr	r3, [pc, #196]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80068a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6892      	ldr	r2, [r2, #8]
 80068ac:	0211      	lsls	r1, r2, #8
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	68d2      	ldr	r2, [r2, #12]
 80068b2:	0912      	lsrs	r2, r2, #4
 80068b4:	0452      	lsls	r2, r2, #17
 80068b6:	430a      	orrs	r2, r1
 80068b8:	492a      	ldr	r1, [pc, #168]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	610b      	str	r3, [r1, #16]
 80068be:	e027      	b.n	8006910 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d112      	bne.n	80068ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068c6:	4b27      	ldr	r3, [pc, #156]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6892      	ldr	r2, [r2, #8]
 80068d6:	0211      	lsls	r1, r2, #8
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6912      	ldr	r2, [r2, #16]
 80068dc:	0852      	lsrs	r2, r2, #1
 80068de:	3a01      	subs	r2, #1
 80068e0:	0552      	lsls	r2, r2, #21
 80068e2:	430a      	orrs	r2, r1
 80068e4:	491f      	ldr	r1, [pc, #124]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	610b      	str	r3, [r1, #16]
 80068ea:	e011      	b.n	8006910 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ec:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6892      	ldr	r2, [r2, #8]
 80068fc:	0211      	lsls	r1, r2, #8
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6952      	ldr	r2, [r2, #20]
 8006902:	0852      	lsrs	r2, r2, #1
 8006904:	3a01      	subs	r2, #1
 8006906:	0652      	lsls	r2, r2, #25
 8006908:	430a      	orrs	r2, r1
 800690a:	4916      	ldr	r1, [pc, #88]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800690c:	4313      	orrs	r3, r2
 800690e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006910:	4b14      	ldr	r3, [pc, #80]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800691a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691c:	f7fc faa8 	bl	8002e70 <HAL_GetTick>
 8006920:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006922:	e009      	b.n	8006938 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006924:	f7fc faa4 	bl	8002e70 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d902      	bls.n	8006938 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	73fb      	strb	r3, [r7, #15]
          break;
 8006936:	e005      	b.n	8006944 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0ef      	beq.n	8006924 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	4904      	ldr	r1, [pc, #16]	; (8006964 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006954:	4313      	orrs	r3, r2
 8006956:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40021000 	.word	0x40021000

08006968 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006976:	4b6a      	ldr	r3, [pc, #424]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d018      	beq.n	80069b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006982:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f003 0203 	and.w	r2, r3, #3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d10d      	bne.n	80069ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
       ||
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800699a:	4b61      	ldr	r3, [pc, #388]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
       ||
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d047      	beq.n	8006a3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
 80069b2:	e044      	b.n	8006a3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d018      	beq.n	80069ee <RCCEx_PLLSAI2_Config+0x86>
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d825      	bhi.n	8006a0c <RCCEx_PLLSAI2_Config+0xa4>
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d002      	beq.n	80069ca <RCCEx_PLLSAI2_Config+0x62>
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d009      	beq.n	80069dc <RCCEx_PLLSAI2_Config+0x74>
 80069c8:	e020      	b.n	8006a0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069ca:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11d      	bne.n	8006a12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069da:	e01a      	b.n	8006a12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069dc:	4b50      	ldr	r3, [pc, #320]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d116      	bne.n	8006a16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ec:	e013      	b.n	8006a16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ee:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069fa:	4b49      	ldr	r3, [pc, #292]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a0a:	e006      	b.n	8006a1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e004      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10d      	bne.n	8006a3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a22:	4b3f      	ldr	r3, [pc, #252]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6819      	ldr	r1, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	430b      	orrs	r3, r1
 8006a38:	4939      	ldr	r1, [pc, #228]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d167      	bne.n	8006b14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a44:	4b36      	ldr	r3, [pc, #216]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a35      	ldr	r2, [pc, #212]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a50:	f7fc fa0e 	bl	8002e70 <HAL_GetTick>
 8006a54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a56:	e009      	b.n	8006a6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a58:	f7fc fa0a 	bl	8002e70 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d902      	bls.n	8006a6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	73fb      	strb	r3, [r7, #15]
        break;
 8006a6a:	e005      	b.n	8006a78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a6c:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1ef      	bne.n	8006a58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d14a      	bne.n	8006b14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d111      	bne.n	8006aa8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a84:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6892      	ldr	r2, [r2, #8]
 8006a94:	0211      	lsls	r1, r2, #8
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	68d2      	ldr	r2, [r2, #12]
 8006a9a:	0912      	lsrs	r2, r2, #4
 8006a9c:	0452      	lsls	r2, r2, #17
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	491f      	ldr	r1, [pc, #124]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	614b      	str	r3, [r1, #20]
 8006aa6:	e011      	b.n	8006acc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6892      	ldr	r2, [r2, #8]
 8006ab8:	0211      	lsls	r1, r2, #8
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6912      	ldr	r2, [r2, #16]
 8006abe:	0852      	lsrs	r2, r2, #1
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	0652      	lsls	r2, r2, #25
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	4916      	ldr	r1, [pc, #88]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006acc:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a13      	ldr	r2, [pc, #76]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fc f9ca 	bl	8002e70 <HAL_GetTick>
 8006adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ade:	e009      	b.n	8006af4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ae0:	f7fc f9c6 	bl	8002e70 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d902      	bls.n	8006af4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	73fb      	strb	r3, [r7, #15]
          break;
 8006af2:	e005      	b.n	8006b00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0ef      	beq.n	8006ae0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b08:	695a      	ldr	r2, [r3, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	4904      	ldr	r1, [pc, #16]	; (8006b20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40021000 	.word	0x40021000

08006b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e049      	b.n	8006bca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb fe3c 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f000 fd16 	bl	8007594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d001      	beq.n	8006bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e04f      	b.n	8006c8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d01d      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0x76>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c16:	d018      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0x76>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1f      	ldr	r2, [pc, #124]	; (8006c9c <HAL_TIM_Base_Start_IT+0xc8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0x76>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0x76>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1c      	ldr	r2, [pc, #112]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0x76>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0x76>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a19      	ldr	r2, [pc, #100]	; (8006cac <HAL_TIM_Base_Start_IT+0xd8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d115      	bne.n	8006c76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b06      	cmp	r3, #6
 8006c5a:	d015      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0xb4>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c62:	d011      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c74:	e008      	b.n	8006c88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0201 	orr.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e000      	b.n	8006c8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40000c00 	.word	0x40000c00
 8006ca8:	40013400 	.word	0x40013400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	00010007 	.word	0x00010007

08006cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e049      	b.n	8006d5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f841 	bl	8006d62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f000 fc4e 	bl	8007594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
	...

08006d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <HAL_TIM_PWM_Start+0x24>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	e03c      	b.n	8006e16 <HAL_TIM_PWM_Start+0x9e>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d109      	bne.n	8006db6 <HAL_TIM_PWM_Start+0x3e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	bf14      	ite	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	2300      	moveq	r3, #0
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e02f      	b.n	8006e16 <HAL_TIM_PWM_Start+0x9e>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d109      	bne.n	8006dd0 <HAL_TIM_PWM_Start+0x58>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	bf14      	ite	ne
 8006dc8:	2301      	movne	r3, #1
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	e022      	b.n	8006e16 <HAL_TIM_PWM_Start+0x9e>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b0c      	cmp	r3, #12
 8006dd4:	d109      	bne.n	8006dea <HAL_TIM_PWM_Start+0x72>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	bf14      	ite	ne
 8006de2:	2301      	movne	r3, #1
 8006de4:	2300      	moveq	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	e015      	b.n	8006e16 <HAL_TIM_PWM_Start+0x9e>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d109      	bne.n	8006e04 <HAL_TIM_PWM_Start+0x8c>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	bf14      	ite	ne
 8006dfc:	2301      	movne	r3, #1
 8006dfe:	2300      	moveq	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	e008      	b.n	8006e16 <HAL_TIM_PWM_Start+0x9e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	bf14      	ite	ne
 8006e10:	2301      	movne	r3, #1
 8006e12:	2300      	moveq	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e09c      	b.n	8006f58 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <HAL_TIM_PWM_Start+0xb6>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e2c:	e023      	b.n	8006e76 <HAL_TIM_PWM_Start+0xfe>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d104      	bne.n	8006e3e <HAL_TIM_PWM_Start+0xc6>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e3c:	e01b      	b.n	8006e76 <HAL_TIM_PWM_Start+0xfe>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d104      	bne.n	8006e4e <HAL_TIM_PWM_Start+0xd6>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e4c:	e013      	b.n	8006e76 <HAL_TIM_PWM_Start+0xfe>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b0c      	cmp	r3, #12
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_PWM_Start+0xe6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e5c:	e00b      	b.n	8006e76 <HAL_TIM_PWM_Start+0xfe>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b10      	cmp	r3, #16
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_PWM_Start+0xf6>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e6c:	e003      	b.n	8006e76 <HAL_TIM_PWM_Start+0xfe>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 ff92 	bl	8007da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a35      	ldr	r2, [pc, #212]	; (8006f60 <HAL_TIM_PWM_Start+0x1e8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0x13e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a34      	ldr	r2, [pc, #208]	; (8006f64 <HAL_TIM_PWM_Start+0x1ec>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00e      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0x13e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a32      	ldr	r2, [pc, #200]	; (8006f68 <HAL_TIM_PWM_Start+0x1f0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0x13e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a31      	ldr	r2, [pc, #196]	; (8006f6c <HAL_TIM_PWM_Start+0x1f4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d004      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0x13e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2f      	ldr	r2, [pc, #188]	; (8006f70 <HAL_TIM_PWM_Start+0x1f8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d101      	bne.n	8006eba <HAL_TIM_PWM_Start+0x142>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_TIM_PWM_Start+0x144>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a22      	ldr	r2, [pc, #136]	; (8006f60 <HAL_TIM_PWM_Start+0x1e8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01d      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x19e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee2:	d018      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x19e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a22      	ldr	r2, [pc, #136]	; (8006f74 <HAL_TIM_PWM_Start+0x1fc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x19e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <HAL_TIM_PWM_Start+0x200>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x19e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <HAL_TIM_PWM_Start+0x204>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x19e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <HAL_TIM_PWM_Start+0x1ec>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_TIM_PWM_Start+0x19e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <HAL_TIM_PWM_Start+0x1f0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d115      	bne.n	8006f42 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <HAL_TIM_PWM_Start+0x208>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b06      	cmp	r3, #6
 8006f26:	d015      	beq.n	8006f54 <HAL_TIM_PWM_Start+0x1dc>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f2e:	d011      	beq.n	8006f54 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	e008      	b.n	8006f54 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0201 	orr.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	e000      	b.n	8006f56 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40014400 	.word	0x40014400
 8006f70:	40014800 	.word	0x40014800
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	00010007 	.word	0x00010007

08006f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d020      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0202 	mvn.w	r2, #2
 8006fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fac1 	bl	8007556 <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fab3 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fac4 	bl	800756a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d020      	beq.n	8007034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01b      	beq.n	8007034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0204 	mvn.w	r2, #4
 8007004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa9b 	bl	8007556 <HAL_TIM_IC_CaptureCallback>
 8007020:	e005      	b.n	800702e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa8d 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa9e 	bl	800756a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d020      	beq.n	8007080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0208 	mvn.w	r2, #8
 8007050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2204      	movs	r2, #4
 8007056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa75 	bl	8007556 <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa67 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa78 	bl	800756a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b00      	cmp	r3, #0
 8007088:	d020      	beq.n	80070cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01b      	beq.n	80070cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0210 	mvn.w	r2, #16
 800709c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2208      	movs	r2, #8
 80070a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa4f 	bl	8007556 <HAL_TIM_IC_CaptureCallback>
 80070b8:	e005      	b.n	80070c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa41 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fa52 	bl	800756a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00c      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0201 	mvn.w	r2, #1
 80070e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fb fa20 	bl	8002530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800710c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 ff02 	bl	8007f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fefa 	bl	8007f2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa11 	bl	800757e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00c      	beq.n	8007180 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0220 	mvn.w	r2, #32
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fec2 	bl	8007f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e0ff      	b.n	80073a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b14      	cmp	r3, #20
 80071b2:	f200 80f0 	bhi.w	8007396 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	08007211 	.word	0x08007211
 80071c0:	08007397 	.word	0x08007397
 80071c4:	08007397 	.word	0x08007397
 80071c8:	08007397 	.word	0x08007397
 80071cc:	08007251 	.word	0x08007251
 80071d0:	08007397 	.word	0x08007397
 80071d4:	08007397 	.word	0x08007397
 80071d8:	08007397 	.word	0x08007397
 80071dc:	08007293 	.word	0x08007293
 80071e0:	08007397 	.word	0x08007397
 80071e4:	08007397 	.word	0x08007397
 80071e8:	08007397 	.word	0x08007397
 80071ec:	080072d3 	.word	0x080072d3
 80071f0:	08007397 	.word	0x08007397
 80071f4:	08007397 	.word	0x08007397
 80071f8:	08007397 	.word	0x08007397
 80071fc:	08007315 	.word	0x08007315
 8007200:	08007397 	.word	0x08007397
 8007204:	08007397 	.word	0x08007397
 8007208:	08007397 	.word	0x08007397
 800720c:	08007355 	.word	0x08007355
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fa56 	bl	80076c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0204 	bic.w	r2, r2, #4
 800723a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6999      	ldr	r1, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
      break;
 800724e:	e0a5      	b.n	800739c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fac6 	bl	80077e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800726a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6999      	ldr	r1, [r3, #24]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	619a      	str	r2, [r3, #24]
      break;
 8007290:	e084      	b.n	800739c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fb2f 	bl	80078fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0208 	orr.w	r2, r2, #8
 80072ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0204 	bic.w	r2, r2, #4
 80072bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69d9      	ldr	r1, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
      break;
 80072d0:	e064      	b.n	800739c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fb97 	bl	8007a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69d9      	ldr	r1, [r3, #28]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	021a      	lsls	r2, r3, #8
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	61da      	str	r2, [r3, #28]
      break;
 8007312:	e043      	b.n	800739c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fbe0 	bl	8007ae0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0208 	orr.w	r2, r2, #8
 800732e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0204 	bic.w	r2, r2, #4
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007352:	e023      	b.n	800739c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fc24 	bl	8007ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007394:	e002      	b.n	800739c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
      break;
 800739a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop

080073b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_ConfigClockSource+0x1c>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e0b6      	b.n	800753a <HAL_TIM_ConfigClockSource+0x18a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007408:	d03e      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0xd8>
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	f200 8087 	bhi.w	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	f000 8086 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x176>
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741e:	d87f      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007420:	2b70      	cmp	r3, #112	; 0x70
 8007422:	d01a      	beq.n	800745a <HAL_TIM_ConfigClockSource+0xaa>
 8007424:	2b70      	cmp	r3, #112	; 0x70
 8007426:	d87b      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007428:	2b60      	cmp	r3, #96	; 0x60
 800742a:	d050      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x11e>
 800742c:	2b60      	cmp	r3, #96	; 0x60
 800742e:	d877      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007430:	2b50      	cmp	r3, #80	; 0x50
 8007432:	d03c      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0xfe>
 8007434:	2b50      	cmp	r3, #80	; 0x50
 8007436:	d873      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d058      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x13e>
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d86f      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007440:	2b30      	cmp	r3, #48	; 0x30
 8007442:	d064      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15e>
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d86b      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007448:	2b20      	cmp	r3, #32
 800744a:	d060      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15e>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d867      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d05c      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15e>
 8007454:	2b10      	cmp	r3, #16
 8007456:	d05a      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15e>
 8007458:	e062      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800746a:	f000 fc7d 	bl	8007d68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800747c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]
      break;
 8007486:	e04f      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007498:	f000 fc66 	bl	8007d68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074aa:	609a      	str	r2, [r3, #8]
      break;
 80074ac:	e03c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 fbda 	bl	8007c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2150      	movs	r1, #80	; 0x50
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fc33 	bl	8007d32 <TIM_ITRx_SetConfig>
      break;
 80074cc:	e02c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 fbf9 	bl	8007cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2160      	movs	r1, #96	; 0x60
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fc23 	bl	8007d32 <TIM_ITRx_SetConfig>
      break;
 80074ec:	e01c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074fa:	461a      	mov	r2, r3
 80074fc:	f000 fbba 	bl	8007c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fc13 	bl	8007d32 <TIM_ITRx_SetConfig>
      break;
 800750c:	e00c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f000 fc0a 	bl	8007d32 <TIM_ITRx_SetConfig>
      break;
 800751e:	e003      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e000      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a40      	ldr	r2, [pc, #256]	; (80076a8 <TIM_Base_SetConfig+0x114>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d013      	beq.n	80075d4 <TIM_Base_SetConfig+0x40>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d00f      	beq.n	80075d4 <TIM_Base_SetConfig+0x40>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a3d      	ldr	r2, [pc, #244]	; (80076ac <TIM_Base_SetConfig+0x118>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00b      	beq.n	80075d4 <TIM_Base_SetConfig+0x40>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a3c      	ldr	r2, [pc, #240]	; (80076b0 <TIM_Base_SetConfig+0x11c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d007      	beq.n	80075d4 <TIM_Base_SetConfig+0x40>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a3b      	ldr	r2, [pc, #236]	; (80076b4 <TIM_Base_SetConfig+0x120>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_Base_SetConfig+0x40>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a3a      	ldr	r2, [pc, #232]	; (80076b8 <TIM_Base_SetConfig+0x124>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d108      	bne.n	80075e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2f      	ldr	r2, [pc, #188]	; (80076a8 <TIM_Base_SetConfig+0x114>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01f      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f4:	d01b      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a2c      	ldr	r2, [pc, #176]	; (80076ac <TIM_Base_SetConfig+0x118>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d017      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a2b      	ldr	r2, [pc, #172]	; (80076b0 <TIM_Base_SetConfig+0x11c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a2a      	ldr	r2, [pc, #168]	; (80076b4 <TIM_Base_SetConfig+0x120>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00f      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <TIM_Base_SetConfig+0x124>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00b      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a28      	ldr	r2, [pc, #160]	; (80076bc <TIM_Base_SetConfig+0x128>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d007      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a27      	ldr	r2, [pc, #156]	; (80076c0 <TIM_Base_SetConfig+0x12c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d003      	beq.n	800762e <TIM_Base_SetConfig+0x9a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <TIM_Base_SetConfig+0x130>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d108      	bne.n	8007640 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a10      	ldr	r2, [pc, #64]	; (80076a8 <TIM_Base_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00f      	beq.n	800768c <TIM_Base_SetConfig+0xf8>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a12      	ldr	r2, [pc, #72]	; (80076b8 <TIM_Base_SetConfig+0x124>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00b      	beq.n	800768c <TIM_Base_SetConfig+0xf8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a11      	ldr	r2, [pc, #68]	; (80076bc <TIM_Base_SetConfig+0x128>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_Base_SetConfig+0xf8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <TIM_Base_SetConfig+0x12c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_Base_SetConfig+0xf8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a0f      	ldr	r2, [pc, #60]	; (80076c4 <TIM_Base_SetConfig+0x130>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d103      	bne.n	8007694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	615a      	str	r2, [r3, #20]
}
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40013400 	.word	0x40013400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40014400 	.word	0x40014400
 80076c4:	40014800 	.word	0x40014800

080076c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	f023 0201 	bic.w	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 0302 	bic.w	r3, r3, #2
 8007714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a2c      	ldr	r2, [pc, #176]	; (80077d4 <TIM_OC1_SetConfig+0x10c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00f      	beq.n	8007748 <TIM_OC1_SetConfig+0x80>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a2b      	ldr	r2, [pc, #172]	; (80077d8 <TIM_OC1_SetConfig+0x110>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <TIM_OC1_SetConfig+0x80>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a2a      	ldr	r2, [pc, #168]	; (80077dc <TIM_OC1_SetConfig+0x114>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d007      	beq.n	8007748 <TIM_OC1_SetConfig+0x80>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a29      	ldr	r2, [pc, #164]	; (80077e0 <TIM_OC1_SetConfig+0x118>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC1_SetConfig+0x80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a28      	ldr	r2, [pc, #160]	; (80077e4 <TIM_OC1_SetConfig+0x11c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d10c      	bne.n	8007762 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0308 	bic.w	r3, r3, #8
 800774e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f023 0304 	bic.w	r3, r3, #4
 8007760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1b      	ldr	r2, [pc, #108]	; (80077d4 <TIM_OC1_SetConfig+0x10c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00f      	beq.n	800778a <TIM_OC1_SetConfig+0xc2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a1a      	ldr	r2, [pc, #104]	; (80077d8 <TIM_OC1_SetConfig+0x110>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00b      	beq.n	800778a <TIM_OC1_SetConfig+0xc2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a19      	ldr	r2, [pc, #100]	; (80077dc <TIM_OC1_SetConfig+0x114>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <TIM_OC1_SetConfig+0xc2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a18      	ldr	r2, [pc, #96]	; (80077e0 <TIM_OC1_SetConfig+0x118>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_OC1_SetConfig+0xc2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a17      	ldr	r2, [pc, #92]	; (80077e4 <TIM_OC1_SetConfig+0x11c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d111      	bne.n	80077ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	621a      	str	r2, [r3, #32]
}
 80077c8:	bf00      	nop
 80077ca:	371c      	adds	r7, #28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800

080077e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	f023 0210 	bic.w	r2, r3, #16
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f023 0320 	bic.w	r3, r3, #32
 8007836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a28      	ldr	r2, [pc, #160]	; (80078e8 <TIM_OC2_SetConfig+0x100>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC2_SetConfig+0x6c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a27      	ldr	r2, [pc, #156]	; (80078ec <TIM_OC2_SetConfig+0x104>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10d      	bne.n	8007870 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <TIM_OC2_SetConfig+0x100>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00f      	beq.n	8007898 <TIM_OC2_SetConfig+0xb0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <TIM_OC2_SetConfig+0x104>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00b      	beq.n	8007898 <TIM_OC2_SetConfig+0xb0>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <TIM_OC2_SetConfig+0x108>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <TIM_OC2_SetConfig+0xb0>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <TIM_OC2_SetConfig+0x10c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC2_SetConfig+0xb0>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <TIM_OC2_SetConfig+0x110>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d113      	bne.n	80078c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40012c00 	.word	0x40012c00
 80078ec:	40013400 	.word	0x40013400
 80078f0:	40014000 	.word	0x40014000
 80078f4:	40014400 	.word	0x40014400
 80078f8:	40014800 	.word	0x40014800

080078fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <TIM_OC3_SetConfig+0xfc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d003      	beq.n	8007966 <TIM_OC3_SetConfig+0x6a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a26      	ldr	r2, [pc, #152]	; (80079fc <TIM_OC3_SetConfig+0x100>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d10d      	bne.n	8007982 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800796c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <TIM_OC3_SetConfig+0xfc>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00f      	beq.n	80079aa <TIM_OC3_SetConfig+0xae>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <TIM_OC3_SetConfig+0x100>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <TIM_OC3_SetConfig+0xae>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1a      	ldr	r2, [pc, #104]	; (8007a00 <TIM_OC3_SetConfig+0x104>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d007      	beq.n	80079aa <TIM_OC3_SetConfig+0xae>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a19      	ldr	r2, [pc, #100]	; (8007a04 <TIM_OC3_SetConfig+0x108>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_OC3_SetConfig+0xae>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <TIM_OC3_SetConfig+0x10c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d113      	bne.n	80079d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	621a      	str	r2, [r3, #32]
}
 80079ec:	bf00      	nop
 80079ee:	371c      	adds	r7, #28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40013400 	.word	0x40013400
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400
 8007a08:	40014800 	.word	0x40014800

08007a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	031b      	lsls	r3, r3, #12
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	; (8007acc <TIM_OC4_SetConfig+0xc0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00f      	beq.n	8007a90 <TIM_OC4_SetConfig+0x84>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <TIM_OC4_SetConfig+0xc4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00b      	beq.n	8007a90 <TIM_OC4_SetConfig+0x84>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a16      	ldr	r2, [pc, #88]	; (8007ad4 <TIM_OC4_SetConfig+0xc8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <TIM_OC4_SetConfig+0x84>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <TIM_OC4_SetConfig+0xcc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC4_SetConfig+0x84>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a14      	ldr	r2, [pc, #80]	; (8007adc <TIM_OC4_SetConfig+0xd0>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d109      	bne.n	8007aa4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	621a      	str	r2, [r3, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40013400 	.word	0x40013400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800

08007ae0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	041b      	lsls	r3, r3, #16
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <TIM_OC5_SetConfig+0xb4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00f      	beq.n	8007b5a <TIM_OC5_SetConfig+0x7a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <TIM_OC5_SetConfig+0xb8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00b      	beq.n	8007b5a <TIM_OC5_SetConfig+0x7a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <TIM_OC5_SetConfig+0xbc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d007      	beq.n	8007b5a <TIM_OC5_SetConfig+0x7a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a14      	ldr	r2, [pc, #80]	; (8007ba0 <TIM_OC5_SetConfig+0xc0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d003      	beq.n	8007b5a <TIM_OC5_SetConfig+0x7a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a13      	ldr	r2, [pc, #76]	; (8007ba4 <TIM_OC5_SetConfig+0xc4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d109      	bne.n	8007b6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40013400 	.word	0x40013400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800

08007ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	051b      	lsls	r3, r3, #20
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a18      	ldr	r2, [pc, #96]	; (8007c60 <TIM_OC6_SetConfig+0xb8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00f      	beq.n	8007c24 <TIM_OC6_SetConfig+0x7c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <TIM_OC6_SetConfig+0xbc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00b      	beq.n	8007c24 <TIM_OC6_SetConfig+0x7c>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <TIM_OC6_SetConfig+0xc0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d007      	beq.n	8007c24 <TIM_OC6_SetConfig+0x7c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <TIM_OC6_SetConfig+0xc4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <TIM_OC6_SetConfig+0x7c>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a14      	ldr	r2, [pc, #80]	; (8007c70 <TIM_OC6_SetConfig+0xc8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d109      	bne.n	8007c38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	029b      	lsls	r3, r3, #10
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40012c00 	.word	0x40012c00
 8007c64:	40013400 	.word	0x40013400
 8007c68:	40014000 	.word	0x40014000
 8007c6c:	40014400 	.word	0x40014400
 8007c70:	40014800 	.word	0x40014800

08007c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f023 030a 	bic.w	r3, r3, #10
 8007cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b087      	sub	sp, #28
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	f023 0210 	bic.w	r2, r3, #16
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	031b      	lsls	r3, r3, #12
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	f043 0307 	orr.w	r3, r3, #7
 8007d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	021a      	lsls	r2, r3, #8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	609a      	str	r2, [r3, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 031f 	and.w	r3, r3, #31
 8007dba:	2201      	movs	r2, #1
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1a      	ldr	r2, [r3, #32]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	401a      	ands	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a1a      	ldr	r2, [r3, #32]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8007de0:	431a      	orrs	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
	...

08007df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e068      	b.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2e      	ldr	r2, [pc, #184]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a2d      	ldr	r2, [pc, #180]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d108      	bne.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01d      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7e:	d018      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1a      	ldr	r2, [pc, #104]	; (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00e      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a13      	ldr	r2, [pc, #76]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a14      	ldr	r2, [pc, #80]	; (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10c      	bne.n	8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40012c00 	.word	0x40012c00
 8007ef0:	40013400 	.word	0x40013400
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40014000 	.word	0x40014000

08007f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e040      	b.n	8007fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fa fcb4 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	; 0x24
 8007f6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fed4 	bl	8008d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc19 	bl	80087c4 <UART_SetConfig>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e01b      	b.n	8007fd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 ff53 	bl	8008e78 <UART_CheckIdleState>
 8007fd2:	4603      	mov	r3, r0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d178      	bne.n	80080e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_UART_Transmit+0x24>
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e071      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2221      	movs	r2, #33	; 0x21
 8008010:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008012:	f7fa ff2d 	bl	8002e70 <HAL_GetTick>
 8008016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008030:	d108      	bne.n	8008044 <HAL_UART_Transmit+0x68>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e003      	b.n	800804c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800804c:	e030      	b.n	80080b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2200      	movs	r2, #0
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 ffb5 	bl	8008fc8 <UART_WaitOnFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e03c      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10b      	bne.n	800808c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	881a      	ldrh	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008080:	b292      	uxth	r2, r2
 8008082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	3302      	adds	r3, #2
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	e008      	b.n	800809e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b292      	uxth	r2, r2
 8008096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1c8      	bne.n	800804e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2200      	movs	r2, #0
 80080c4:	2140      	movs	r1, #64	; 0x40
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 ff7e 	bl	8008fc8 <UART_WaitOnFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2220      	movs	r2, #32
 80080d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e005      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3720      	adds	r7, #32
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08a      	sub	sp, #40	; 0x28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	2b20      	cmp	r3, #32
 8008106:	d137      	bne.n	8008178 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <HAL_UART_Receive_DMA+0x24>
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e030      	b.n	800817a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a18      	ldr	r2, [pc, #96]	; (8008184 <HAL_UART_Receive_DMA+0x94>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d01f      	beq.n	8008168 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d018      	beq.n	8008168 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	613b      	str	r3, [r7, #16]
   return(result);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	623b      	str	r3, [r7, #32]
 8008156:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	69f9      	ldr	r1, [r7, #28]
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	61bb      	str	r3, [r7, #24]
   return(result);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	461a      	mov	r2, r3
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 ff92 	bl	8009098 <UART_Start_Receive_DMA>
 8008174:	4603      	mov	r3, r0
 8008176:	e000      	b.n	800817a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008178:	2302      	movs	r3, #2
  }
}
 800817a:	4618      	mov	r0, r3
 800817c:	3728      	adds	r7, #40	; 0x28
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40008000 	.word	0x40008000

08008188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b0ba      	sub	sp, #232	; 0xe8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80081b6:	4013      	ands	r3, r2
 80081b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d115      	bne.n	80081f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00f      	beq.n	80081f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 82ae 	beq.w	8008742 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
      }
      return;
 80081ee:	e2a8      	b.n	8008742 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80081f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8117 	beq.w	8008428 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800820a:	4b85      	ldr	r3, [pc, #532]	; (8008420 <HAL_UART_IRQHandler+0x298>)
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 810a 	beq.w	8008428 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d011      	beq.n	8008244 <HAL_UART_IRQHandler+0xbc>
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2201      	movs	r2, #1
 8008232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823a:	f043 0201 	orr.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d011      	beq.n	8008274 <HAL_UART_IRQHandler+0xec>
 8008250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2202      	movs	r2, #2
 8008262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800826a:	f043 0204 	orr.w	r2, r3, #4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d011      	beq.n	80082a4 <HAL_UART_IRQHandler+0x11c>
 8008280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2204      	movs	r2, #4
 8008292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829a:	f043 0202 	orr.w	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d017      	beq.n	80082e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80082bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2208      	movs	r2, #8
 80082ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d6:	f043 0208 	orr.w	r2, r3, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d012      	beq.n	8008312 <HAL_UART_IRQHandler+0x18a>
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00c      	beq.n	8008312 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008308:	f043 0220 	orr.w	r2, r3, #32
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8214 	beq.w	8008746 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00d      	beq.n	8008346 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800832a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800834c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d005      	beq.n	800836a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800835e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008362:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04f      	beq.n	800840a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 ff5a 	bl	8009224 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d141      	bne.n	8008402 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1d9      	bne.n	800837e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d013      	beq.n	80083fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	4a13      	ldr	r2, [pc, #76]	; (8008424 <HAL_UART_IRQHandler+0x29c>)
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fb ff52 	bl	8004288 <HAL_DMA_Abort_IT>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d017      	beq.n	800841a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f8:	e00f      	b.n	800841a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9cc 	bl	8008798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	e00b      	b.n	800841a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f9c8 	bl	8008798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	e007      	b.n	800841a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9c4 	bl	8008798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008418:	e195      	b.n	8008746 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841a:	bf00      	nop
    return;
 800841c:	e193      	b.n	8008746 <HAL_UART_IRQHandler+0x5be>
 800841e:	bf00      	nop
 8008420:	04000120 	.word	0x04000120
 8008424:	080094d5 	.word	0x080094d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 814e 	bne.w	80086ce <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8147 	beq.w	80086ce <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8140 	beq.w	80086ce <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2210      	movs	r2, #16
 8008454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	f040 80b8 	bne.w	80085d6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008472:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 8167 	beq.w	800874a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008486:	429a      	cmp	r2, r3
 8008488:	f080 815f 	bcs.w	800874a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f040 8086 	bne.w	80085b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1da      	bne.n	80084a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3308      	adds	r3, #8
 8008512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800851a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800851e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e1      	bne.n	80084f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800853e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008552:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e3      	bne.n	800852e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008584:	f023 0310 	bic.w	r3, r3, #16
 8008588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008596:	65bb      	str	r3, [r7, #88]	; 0x58
 8008598:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800859c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e4      	bne.n	8008574 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fb fe2c 	bl	800420c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f8ec 	bl	80087ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085d4:	e0b9      	b.n	800874a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 80ab 	beq.w	800874e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80085f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80a6 	beq.w	800874e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008624:	647b      	str	r3, [r7, #68]	; 0x44
 8008626:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800862a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e4      	bne.n	8008602 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	623b      	str	r3, [r7, #32]
   return(result);
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	f023 0301 	bic.w	r3, r3, #1
 800864e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800865c:	633a      	str	r2, [r7, #48]	; 0x30
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e3      	bne.n	8008638 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	60fb      	str	r3, [r7, #12]
   return(result);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f023 0310 	bic.w	r3, r3, #16
 8008698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	69b9      	ldr	r1, [r7, #24]
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	617b      	str	r3, [r7, #20]
   return(result);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e4      	bne.n	8008684 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f870 	bl	80087ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086cc:	e03f      	b.n	800874e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <HAL_UART_IRQHandler+0x570>
 80086da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d008      	beq.n	80086f8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 ff2f 	bl	8009554 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086f6:	e02d      	b.n	8008754 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00e      	beq.n	8008722 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01c      	beq.n	8008752 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	4798      	blx	r3
    }
    return;
 8008720:	e017      	b.n	8008752 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d012      	beq.n	8008754 <HAL_UART_IRQHandler+0x5cc>
 800872e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00c      	beq.n	8008754 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fee0 	bl	8009500 <UART_EndTransmit_IT>
    return;
 8008740:	e008      	b.n	8008754 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008742:	bf00      	nop
 8008744:	e006      	b.n	8008754 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008746:	bf00      	nop
 8008748:	e004      	b.n	8008754 <HAL_UART_IRQHandler+0x5cc>
      return;
 800874a:	bf00      	nop
 800874c:	e002      	b.n	8008754 <HAL_UART_IRQHandler+0x5cc>
      return;
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008752:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008754:	37e8      	adds	r7, #232	; 0xe8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop

0800875c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087c8:	b08a      	sub	sp, #40	; 0x28
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	431a      	orrs	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4ba4      	ldr	r3, [pc, #656]	; (8008a84 <UART_SetConfig+0x2c0>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a99      	ldr	r2, [pc, #612]	; (8008a88 <UART_SetConfig+0x2c4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d004      	beq.n	8008830 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882c:	4313      	orrs	r3, r2
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008840:	430a      	orrs	r2, r1
 8008842:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a90      	ldr	r2, [pc, #576]	; (8008a8c <UART_SetConfig+0x2c8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d126      	bne.n	800889c <UART_SetConfig+0xd8>
 800884e:	4b90      	ldr	r3, [pc, #576]	; (8008a90 <UART_SetConfig+0x2cc>)
 8008850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008854:	f003 0303 	and.w	r3, r3, #3
 8008858:	2b03      	cmp	r3, #3
 800885a:	d81b      	bhi.n	8008894 <UART_SetConfig+0xd0>
 800885c:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <UART_SetConfig+0xa0>)
 800885e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008862:	bf00      	nop
 8008864:	08008875 	.word	0x08008875
 8008868:	08008885 	.word	0x08008885
 800886c:	0800887d 	.word	0x0800887d
 8008870:	0800888d 	.word	0x0800888d
 8008874:	2301      	movs	r3, #1
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800887a:	e116      	b.n	8008aaa <UART_SetConfig+0x2e6>
 800887c:	2302      	movs	r3, #2
 800887e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008882:	e112      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008884:	2304      	movs	r3, #4
 8008886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800888a:	e10e      	b.n	8008aaa <UART_SetConfig+0x2e6>
 800888c:	2308      	movs	r3, #8
 800888e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008892:	e10a      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008894:	2310      	movs	r3, #16
 8008896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800889a:	e106      	b.n	8008aaa <UART_SetConfig+0x2e6>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a7c      	ldr	r2, [pc, #496]	; (8008a94 <UART_SetConfig+0x2d0>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d138      	bne.n	8008918 <UART_SetConfig+0x154>
 80088a6:	4b7a      	ldr	r3, [pc, #488]	; (8008a90 <UART_SetConfig+0x2cc>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ac:	f003 030c 	and.w	r3, r3, #12
 80088b0:	2b0c      	cmp	r3, #12
 80088b2:	d82d      	bhi.n	8008910 <UART_SetConfig+0x14c>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <UART_SetConfig+0xf8>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088f1 	.word	0x080088f1
 80088c0:	08008911 	.word	0x08008911
 80088c4:	08008911 	.word	0x08008911
 80088c8:	08008911 	.word	0x08008911
 80088cc:	08008901 	.word	0x08008901
 80088d0:	08008911 	.word	0x08008911
 80088d4:	08008911 	.word	0x08008911
 80088d8:	08008911 	.word	0x08008911
 80088dc:	080088f9 	.word	0x080088f9
 80088e0:	08008911 	.word	0x08008911
 80088e4:	08008911 	.word	0x08008911
 80088e8:	08008911 	.word	0x08008911
 80088ec:	08008909 	.word	0x08008909
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e0d8      	b.n	8008aaa <UART_SetConfig+0x2e6>
 80088f8:	2302      	movs	r3, #2
 80088fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fe:	e0d4      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008900:	2304      	movs	r3, #4
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008906:	e0d0      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008908:	2308      	movs	r3, #8
 800890a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800890e:	e0cc      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008910:	2310      	movs	r3, #16
 8008912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008916:	e0c8      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a5e      	ldr	r2, [pc, #376]	; (8008a98 <UART_SetConfig+0x2d4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d125      	bne.n	800896e <UART_SetConfig+0x1aa>
 8008922:	4b5b      	ldr	r3, [pc, #364]	; (8008a90 <UART_SetConfig+0x2cc>)
 8008924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008928:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	d016      	beq.n	800895e <UART_SetConfig+0x19a>
 8008930:	2b30      	cmp	r3, #48	; 0x30
 8008932:	d818      	bhi.n	8008966 <UART_SetConfig+0x1a2>
 8008934:	2b20      	cmp	r3, #32
 8008936:	d00a      	beq.n	800894e <UART_SetConfig+0x18a>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d814      	bhi.n	8008966 <UART_SetConfig+0x1a2>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <UART_SetConfig+0x182>
 8008940:	2b10      	cmp	r3, #16
 8008942:	d008      	beq.n	8008956 <UART_SetConfig+0x192>
 8008944:	e00f      	b.n	8008966 <UART_SetConfig+0x1a2>
 8008946:	2300      	movs	r3, #0
 8008948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800894c:	e0ad      	b.n	8008aaa <UART_SetConfig+0x2e6>
 800894e:	2302      	movs	r3, #2
 8008950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008954:	e0a9      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008956:	2304      	movs	r3, #4
 8008958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800895c:	e0a5      	b.n	8008aaa <UART_SetConfig+0x2e6>
 800895e:	2308      	movs	r3, #8
 8008960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008964:	e0a1      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008966:	2310      	movs	r3, #16
 8008968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800896c:	e09d      	b.n	8008aaa <UART_SetConfig+0x2e6>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a4a      	ldr	r2, [pc, #296]	; (8008a9c <UART_SetConfig+0x2d8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d125      	bne.n	80089c4 <UART_SetConfig+0x200>
 8008978:	4b45      	ldr	r3, [pc, #276]	; (8008a90 <UART_SetConfig+0x2cc>)
 800897a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008982:	2bc0      	cmp	r3, #192	; 0xc0
 8008984:	d016      	beq.n	80089b4 <UART_SetConfig+0x1f0>
 8008986:	2bc0      	cmp	r3, #192	; 0xc0
 8008988:	d818      	bhi.n	80089bc <UART_SetConfig+0x1f8>
 800898a:	2b80      	cmp	r3, #128	; 0x80
 800898c:	d00a      	beq.n	80089a4 <UART_SetConfig+0x1e0>
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d814      	bhi.n	80089bc <UART_SetConfig+0x1f8>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <UART_SetConfig+0x1d8>
 8008996:	2b40      	cmp	r3, #64	; 0x40
 8008998:	d008      	beq.n	80089ac <UART_SetConfig+0x1e8>
 800899a:	e00f      	b.n	80089bc <UART_SetConfig+0x1f8>
 800899c:	2300      	movs	r3, #0
 800899e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a2:	e082      	b.n	8008aaa <UART_SetConfig+0x2e6>
 80089a4:	2302      	movs	r3, #2
 80089a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089aa:	e07e      	b.n	8008aaa <UART_SetConfig+0x2e6>
 80089ac:	2304      	movs	r3, #4
 80089ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b2:	e07a      	b.n	8008aaa <UART_SetConfig+0x2e6>
 80089b4:	2308      	movs	r3, #8
 80089b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ba:	e076      	b.n	8008aaa <UART_SetConfig+0x2e6>
 80089bc:	2310      	movs	r3, #16
 80089be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089c2:	e072      	b.n	8008aaa <UART_SetConfig+0x2e6>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a35      	ldr	r2, [pc, #212]	; (8008aa0 <UART_SetConfig+0x2dc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d12a      	bne.n	8008a24 <UART_SetConfig+0x260>
 80089ce:	4b30      	ldr	r3, [pc, #192]	; (8008a90 <UART_SetConfig+0x2cc>)
 80089d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089dc:	d01a      	beq.n	8008a14 <UART_SetConfig+0x250>
 80089de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e2:	d81b      	bhi.n	8008a1c <UART_SetConfig+0x258>
 80089e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e8:	d00c      	beq.n	8008a04 <UART_SetConfig+0x240>
 80089ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ee:	d815      	bhi.n	8008a1c <UART_SetConfig+0x258>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <UART_SetConfig+0x238>
 80089f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f8:	d008      	beq.n	8008a0c <UART_SetConfig+0x248>
 80089fa:	e00f      	b.n	8008a1c <UART_SetConfig+0x258>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a02:	e052      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a04:	2302      	movs	r3, #2
 8008a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0a:	e04e      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a12:	e04a      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a14:	2308      	movs	r3, #8
 8008a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a1a:	e046      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a1c:	2310      	movs	r3, #16
 8008a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a22:	e042      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <UART_SetConfig+0x2c4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d13a      	bne.n	8008aa4 <UART_SetConfig+0x2e0>
 8008a2e:	4b18      	ldr	r3, [pc, #96]	; (8008a90 <UART_SetConfig+0x2cc>)
 8008a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a3c:	d01a      	beq.n	8008a74 <UART_SetConfig+0x2b0>
 8008a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a42:	d81b      	bhi.n	8008a7c <UART_SetConfig+0x2b8>
 8008a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a48:	d00c      	beq.n	8008a64 <UART_SetConfig+0x2a0>
 8008a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4e:	d815      	bhi.n	8008a7c <UART_SetConfig+0x2b8>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <UART_SetConfig+0x298>
 8008a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a58:	d008      	beq.n	8008a6c <UART_SetConfig+0x2a8>
 8008a5a:	e00f      	b.n	8008a7c <UART_SetConfig+0x2b8>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a62:	e022      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a64:	2302      	movs	r3, #2
 8008a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a6a:	e01e      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a72:	e01a      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a74:	2308      	movs	r3, #8
 8008a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a7a:	e016      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a82:	e012      	b.n	8008aaa <UART_SetConfig+0x2e6>
 8008a84:	efff69f3 	.word	0xefff69f3
 8008a88:	40008000 	.word	0x40008000
 8008a8c:	40013800 	.word	0x40013800
 8008a90:	40021000 	.word	0x40021000
 8008a94:	40004400 	.word	0x40004400
 8008a98:	40004800 	.word	0x40004800
 8008a9c:	40004c00 	.word	0x40004c00
 8008aa0:	40005000 	.word	0x40005000
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a9f      	ldr	r2, [pc, #636]	; (8008d2c <UART_SetConfig+0x568>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d17a      	bne.n	8008baa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d824      	bhi.n	8008b06 <UART_SetConfig+0x342>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x300>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008b07 	.word	0x08008b07
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008b07 	.word	0x08008b07
 8008ad4:	08008af7 	.word	0x08008af7
 8008ad8:	08008b07 	.word	0x08008b07
 8008adc:	08008b07 	.word	0x08008b07
 8008ae0:	08008b07 	.word	0x08008b07
 8008ae4:	08008aff 	.word	0x08008aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f7fd faa2 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8008aec:	61f8      	str	r0, [r7, #28]
        break;
 8008aee:	e010      	b.n	8008b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af0:	4b8f      	ldr	r3, [pc, #572]	; (8008d30 <UART_SetConfig+0x56c>)
 8008af2:	61fb      	str	r3, [r7, #28]
        break;
 8008af4:	e00d      	b.n	8008b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008af6:	f7fd fa03 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 8008afa:	61f8      	str	r0, [r7, #28]
        break;
 8008afc:	e009      	b.n	8008b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b02:	61fb      	str	r3, [r7, #28]
        break;
 8008b04:	e005      	b.n	8008b12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80fb 	beq.w	8008d10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4413      	add	r3, r2
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d305      	bcc.n	8008b36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d903      	bls.n	8008b3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b3c:	e0e8      	b.n	8008d10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	2200      	movs	r2, #0
 8008b42:	461c      	mov	r4, r3
 8008b44:	4615      	mov	r5, r2
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	022b      	lsls	r3, r5, #8
 8008b50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008b54:	0222      	lsls	r2, r4, #8
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	6849      	ldr	r1, [r1, #4]
 8008b5a:	0849      	lsrs	r1, r1, #1
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	4688      	mov	r8, r1
 8008b60:	4681      	mov	r9, r0
 8008b62:	eb12 0a08 	adds.w	sl, r2, r8
 8008b66:	eb43 0b09 	adc.w	fp, r3, r9
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b78:	4650      	mov	r0, sl
 8008b7a:	4659      	mov	r1, fp
 8008b7c:	f7f8 f884 	bl	8000c88 <__aeabi_uldivmod>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4613      	mov	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b8e:	d308      	bcc.n	8008ba2 <UART_SetConfig+0x3de>
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b96:	d204      	bcs.n	8008ba2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	60da      	str	r2, [r3, #12]
 8008ba0:	e0b6      	b.n	8008d10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ba8:	e0b2      	b.n	8008d10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb2:	d15e      	bne.n	8008c72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d828      	bhi.n	8008c0e <UART_SetConfig+0x44a>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <UART_SetConfig+0x400>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008c0f 	.word	0x08008c0f
 8008bd4:	08008bff 	.word	0x08008bff
 8008bd8:	08008c0f 	.word	0x08008c0f
 8008bdc:	08008c0f 	.word	0x08008c0f
 8008be0:	08008c0f 	.word	0x08008c0f
 8008be4:	08008c07 	.word	0x08008c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be8:	f7fd fa22 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8008bec:	61f8      	str	r0, [r7, #28]
        break;
 8008bee:	e014      	b.n	8008c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf0:	f7fd fa34 	bl	800605c <HAL_RCC_GetPCLK2Freq>
 8008bf4:	61f8      	str	r0, [r7, #28]
        break;
 8008bf6:	e010      	b.n	8008c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <UART_SetConfig+0x56c>)
 8008bfa:	61fb      	str	r3, [r7, #28]
        break;
 8008bfc:	e00d      	b.n	8008c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfe:	f7fd f97f 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 8008c02:	61f8      	str	r0, [r7, #28]
        break;
 8008c04:	e009      	b.n	8008c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0a:	61fb      	str	r3, [r7, #28]
        break;
 8008c0c:	e005      	b.n	8008c1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d077      	beq.n	8008d10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	005a      	lsls	r2, r3, #1
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	085b      	lsrs	r3, r3, #1
 8008c2a:	441a      	add	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b0f      	cmp	r3, #15
 8008c3a:	d916      	bls.n	8008c6a <UART_SetConfig+0x4a6>
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c42:	d212      	bcs.n	8008c6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f023 030f 	bic.w	r3, r3, #15
 8008c4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	085b      	lsrs	r3, r3, #1
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	8afb      	ldrh	r3, [r7, #22]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	8afa      	ldrh	r2, [r7, #22]
 8008c66:	60da      	str	r2, [r3, #12]
 8008c68:	e052      	b.n	8008d10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c70:	e04e      	b.n	8008d10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d827      	bhi.n	8008cca <UART_SetConfig+0x506>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <UART_SetConfig+0x4bc>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cb5 	.word	0x08008cb5
 8008c8c:	08008ccb 	.word	0x08008ccb
 8008c90:	08008cbb 	.word	0x08008cbb
 8008c94:	08008ccb 	.word	0x08008ccb
 8008c98:	08008ccb 	.word	0x08008ccb
 8008c9c:	08008ccb 	.word	0x08008ccb
 8008ca0:	08008cc3 	.word	0x08008cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca4:	f7fd f9c4 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8008ca8:	61f8      	str	r0, [r7, #28]
        break;
 8008caa:	e014      	b.n	8008cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cac:	f7fd f9d6 	bl	800605c <HAL_RCC_GetPCLK2Freq>
 8008cb0:	61f8      	str	r0, [r7, #28]
        break;
 8008cb2:	e010      	b.n	8008cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cb4:	4b1e      	ldr	r3, [pc, #120]	; (8008d30 <UART_SetConfig+0x56c>)
 8008cb6:	61fb      	str	r3, [r7, #28]
        break;
 8008cb8:	e00d      	b.n	8008cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cba:	f7fd f921 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 8008cbe:	61f8      	str	r0, [r7, #28]
        break;
 8008cc0:	e009      	b.n	8008cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc6:	61fb      	str	r3, [r7, #28]
        break;
 8008cc8:	e005      	b.n	8008cd6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cd4:	bf00      	nop
    }

    if (pclk != 0U)
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d019      	beq.n	8008d10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	085a      	lsrs	r2, r3, #1
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b0f      	cmp	r3, #15
 8008cf4:	d909      	bls.n	8008d0a <UART_SetConfig+0x546>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfc:	d205      	bcs.n	8008d0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60da      	str	r2, [r3, #12]
 8008d08:	e002      	b.n	8008d10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3728      	adds	r7, #40	; 0x28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40008000 	.word	0x40008000
 8008d30:	00f42400 	.word	0x00f42400

08008d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00a      	beq.n	8008e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e32:	d10a      	bne.n	8008e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b098      	sub	sp, #96	; 0x60
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e88:	f7f9 fff2 	bl	8002e70 <HAL_GetTick>
 8008e8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d12e      	bne.n	8008efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f88c 	bl	8008fc8 <UART_WaitOnFlagUntilTimeout>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d021      	beq.n	8008efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eca:	653b      	str	r3, [r7, #80]	; 0x50
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e062      	b.n	8008fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d149      	bne.n	8008f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f10:	2200      	movs	r2, #0
 8008f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f856 	bl	8008fc8 <UART_WaitOnFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d03c      	beq.n	8008f9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f40:	633b      	str	r3, [r7, #48]	; 0x30
 8008f42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e6      	bne.n	8008f22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f74:	61fa      	str	r2, [r7, #28]
 8008f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	69b9      	ldr	r1, [r7, #24]
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	617b      	str	r3, [r7, #20]
   return(result);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e5      	bne.n	8008f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e011      	b.n	8008fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3758      	adds	r7, #88	; 0x58
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd8:	e049      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe0:	d045      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe2:	f7f9 ff45 	bl	8002e70 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d302      	bcc.n	8008ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e048      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0304 	and.w	r3, r3, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	d031      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b08      	cmp	r3, #8
 8009016:	d110      	bne.n	800903a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2208      	movs	r2, #8
 800901e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 f8ff 	bl	8009224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2208      	movs	r2, #8
 800902a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e029      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009048:	d111      	bne.n	800906e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f8e5 	bl	8009224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e00f      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69da      	ldr	r2, [r3, #28]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4013      	ands	r3, r2
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	bf0c      	ite	eq
 800907e:	2301      	moveq	r3, #1
 8009080:	2300      	movne	r3, #0
 8009082:	b2db      	uxtb	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	429a      	cmp	r2, r3
 800908a:	d0a6      	beq.n	8008fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b096      	sub	sp, #88	; 0x58
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2222      	movs	r2, #34	; 0x22
 80090c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d028      	beq.n	800911e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d0:	4a3e      	ldr	r2, [pc, #248]	; (80091cc <UART_Start_Receive_DMA+0x134>)
 80090d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d8:	4a3d      	ldr	r2, [pc, #244]	; (80091d0 <UART_Start_Receive_DMA+0x138>)
 80090da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e0:	4a3c      	ldr	r2, [pc, #240]	; (80091d4 <UART_Start_Receive_DMA+0x13c>)
 80090e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e8:	2200      	movs	r2, #0
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3324      	adds	r3, #36	; 0x24
 80090f6:	4619      	mov	r1, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fc:	461a      	mov	r2, r3
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	f7fb f824 	bl	800414c <HAL_DMA_Start_IT>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2210      	movs	r2, #16
 800910e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e051      	b.n	80091c2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d018      	beq.n	8009158 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800913a:	657b      	str	r3, [r7, #84]	; 0x54
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	461a      	mov	r2, r3
 8009142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009144:	64bb      	str	r3, [r7, #72]	; 0x48
 8009146:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800914a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e6      	bne.n	8009126 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3308      	adds	r3, #8
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	f043 0301 	orr.w	r3, r3, #1
 800916e:	653b      	str	r3, [r7, #80]	; 0x50
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3308      	adds	r3, #8
 8009176:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009178:	637a      	str	r2, [r7, #52]	; 0x34
 800917a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800917e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e5      	bne.n	8009158 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	613b      	str	r3, [r7, #16]
   return(result);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091ac:	623a      	str	r2, [r7, #32]
 80091ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	69f9      	ldr	r1, [r7, #28]
 80091b2:	6a3a      	ldr	r2, [r7, #32]
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e5      	bne.n	800918c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3758      	adds	r7, #88	; 0x58
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	080092ed 	.word	0x080092ed
 80091d0:	08009419 	.word	0x08009419
 80091d4:	08009457 	.word	0x08009457

080091d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b089      	sub	sp, #36	; 0x24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091f4:	61fb      	str	r3, [r7, #28]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	61bb      	str	r3, [r7, #24]
 8009200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	6979      	ldr	r1, [r7, #20]
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	613b      	str	r3, [r7, #16]
   return(result);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e6      	bne.n	80091e0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009218:	bf00      	nop
 800921a:	3724      	adds	r7, #36	; 0x24
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009224:	b480      	push	{r7}
 8009226:	b095      	sub	sp, #84	; 0x54
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800924a:	643b      	str	r3, [r7, #64]	; 0x40
 800924c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e6      	bne.n	800922c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	61fb      	str	r3, [r7, #28]
   return(result);
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f023 0301 	bic.w	r3, r3, #1
 8009274:	64bb      	str	r3, [r7, #72]	; 0x48
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800927e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e5      	bne.n	800925e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009296:	2b01      	cmp	r3, #1
 8009298:	d118      	bne.n	80092cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f023 0310 	bic.w	r3, r3, #16
 80092ae:	647b      	str	r3, [r7, #68]	; 0x44
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6979      	ldr	r1, [r7, #20]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	613b      	str	r3, [r7, #16]
   return(result);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80092e0:	bf00      	nop
 80092e2:	3754      	adds	r7, #84	; 0x54
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b09c      	sub	sp, #112	; 0x70
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d171      	bne.n	80093ec <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800930a:	2200      	movs	r2, #0
 800930c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800931e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009324:	66bb      	str	r3, [r7, #104]	; 0x68
 8009326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800932e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800933c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	667b      	str	r3, [r7, #100]	; 0x64
 800935a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009362:	647a      	str	r2, [r7, #68]	; 0x44
 8009364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e5      	bne.n	8009342 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	623b      	str	r3, [r7, #32]
   return(result);
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938c:	663b      	str	r3, [r7, #96]	; 0x60
 800938e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009396:	633a      	str	r2, [r7, #48]	; 0x30
 8009398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800939c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e5      	bne.n	8009376 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ac:	2220      	movs	r2, #32
 80093ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d118      	bne.n	80093ec <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f023 0310 	bic.w	r3, r3, #16
 80093ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	69b9      	ldr	r1, [r7, #24]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	617b      	str	r3, [r7, #20]
   return(result);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e6      	bne.n	80093ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ee:	2200      	movs	r2, #0
 80093f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d107      	bne.n	800940a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009400:	4619      	mov	r1, r3
 8009402:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009404:	f7ff f9d2 	bl	80087ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009408:	e002      	b.n	8009410 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800940a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800940c:	f7ff f9b0 	bl	8008770 <HAL_UART_RxCpltCallback>
}
 8009410:	bf00      	nop
 8009412:	3770      	adds	r7, #112	; 0x70
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009430:	2b01      	cmp	r3, #1
 8009432:	d109      	bne.n	8009448 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	b29b      	uxth	r3, r3
 800943e:	4619      	mov	r1, r3
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff f9b3 	bl	80087ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009446:	e002      	b.n	800944e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff f99b 	bl	8008784 <HAL_UART_RxHalfCpltCallback>
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b086      	sub	sp, #24
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009468:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009470:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947c:	2b80      	cmp	r3, #128	; 0x80
 800947e:	d109      	bne.n	8009494 <UART_DMAError+0x3e>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b21      	cmp	r3, #33	; 0x21
 8009484:	d106      	bne.n	8009494 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2200      	movs	r2, #0
 800948a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	f7ff fea2 	bl	80091d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d109      	bne.n	80094b6 <UART_DMAError+0x60>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b22      	cmp	r3, #34	; 0x22
 80094a6:	d106      	bne.n	80094b6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80094b0:	6978      	ldr	r0, [r7, #20]
 80094b2:	f7ff feb7 	bl	8009224 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094bc:	f043 0210 	orr.w	r2, r3, #16
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	f7ff f966 	bl	8008798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094cc:	bf00      	nop
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff f950 	bl	8008798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	60bb      	str	r3, [r7, #8]
   return(result);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	613b      	str	r3, [r7, #16]
   return(result);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e6      	bne.n	8009508 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff f908 	bl	800875c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800954c:	bf00      	nop
 800954e:	3720      	adds	r7, #32
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <__NVIC_SetPriority>:
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009578:	2b00      	cmp	r3, #0
 800957a:	db0a      	blt.n	8009592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	490c      	ldr	r1, [pc, #48]	; (80095b4 <__NVIC_SetPriority+0x4c>)
 8009582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009586:	0112      	lsls	r2, r2, #4
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	440b      	add	r3, r1
 800958c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009590:	e00a      	b.n	80095a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	4908      	ldr	r1, [pc, #32]	; (80095b8 <__NVIC_SetPriority+0x50>)
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	f003 030f 	and.w	r3, r3, #15
 800959e:	3b04      	subs	r3, #4
 80095a0:	0112      	lsls	r2, r2, #4
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	440b      	add	r3, r1
 80095a6:	761a      	strb	r2, [r3, #24]
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	e000e100 	.word	0xe000e100
 80095b8:	e000ed00 	.word	0xe000ed00

080095bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <SysTick_Handler+0x1c>)
 80095c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80095c4:	f001 fe70 	bl	800b2a8 <xTaskGetSchedulerState>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d001      	beq.n	80095d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095ce:	f002 fc5b 	bl	800be88 <xPortSysTickHandler>
  }
}
 80095d2:	bf00      	nop
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	e000e010 	.word	0xe000e010

080095dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095e0:	2100      	movs	r1, #0
 80095e2:	f06f 0004 	mvn.w	r0, #4
 80095e6:	f7ff ffbf 	bl	8009568 <__NVIC_SetPriority>
#endif
}
 80095ea:	bf00      	nop
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f6:	f3ef 8305 	mrs	r3, IPSR
 80095fa:	603b      	str	r3, [r7, #0]
  return(result);
 80095fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009602:	f06f 0305 	mvn.w	r3, #5
 8009606:	607b      	str	r3, [r7, #4]
 8009608:	e00c      	b.n	8009624 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800960a:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <osKernelInitialize+0x44>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009612:	4b08      	ldr	r3, [pc, #32]	; (8009634 <osKernelInitialize+0x44>)
 8009614:	2201      	movs	r2, #1
 8009616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009618:	2300      	movs	r3, #0
 800961a:	607b      	str	r3, [r7, #4]
 800961c:	e002      	b.n	8009624 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009622:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009624:	687b      	ldr	r3, [r7, #4]
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	200006d4 	.word	0x200006d4

08009638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800963e:	f3ef 8305 	mrs	r3, IPSR
 8009642:	603b      	str	r3, [r7, #0]
  return(result);
 8009644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <osKernelStart+0x1a>
    stat = osErrorISR;
 800964a:	f06f 0305 	mvn.w	r3, #5
 800964e:	607b      	str	r3, [r7, #4]
 8009650:	e010      	b.n	8009674 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009652:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <osKernelStart+0x48>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d109      	bne.n	800966e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800965a:	f7ff ffbf 	bl	80095dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800965e:	4b08      	ldr	r3, [pc, #32]	; (8009680 <osKernelStart+0x48>)
 8009660:	2202      	movs	r2, #2
 8009662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009664:	f001 f9c4 	bl	800a9f0 <vTaskStartScheduler>
      stat = osOK;
 8009668:	2300      	movs	r3, #0
 800966a:	607b      	str	r3, [r7, #4]
 800966c:	e002      	b.n	8009674 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800966e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009672:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009674:	687b      	ldr	r3, [r7, #4]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	200006d4 	.word	0x200006d4

08009684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009684:	b580      	push	{r7, lr}
 8009686:	b08e      	sub	sp, #56	; 0x38
 8009688:	af04      	add	r7, sp, #16
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009694:	f3ef 8305 	mrs	r3, IPSR
 8009698:	617b      	str	r3, [r7, #20]
  return(result);
 800969a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800969c:	2b00      	cmp	r3, #0
 800969e:	d17e      	bne.n	800979e <osThreadNew+0x11a>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d07b      	beq.n	800979e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096a6:	2380      	movs	r3, #128	; 0x80
 80096a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096aa:	2318      	movs	r3, #24
 80096ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80096b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d045      	beq.n	800974a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <osThreadNew+0x48>
        name = attr->name;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <osThreadNew+0x6e>
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b38      	cmp	r3, #56	; 0x38
 80096e4:	d805      	bhi.n	80096f2 <osThreadNew+0x6e>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <osThreadNew+0x72>
        return (NULL);
 80096f2:	2300      	movs	r3, #0
 80096f4:	e054      	b.n	80097a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	089b      	lsrs	r3, r3, #2
 8009704:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00e      	beq.n	800972c <osThreadNew+0xa8>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2ba7      	cmp	r3, #167	; 0xa7
 8009714:	d90a      	bls.n	800972c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800971a:	2b00      	cmp	r3, #0
 800971c:	d006      	beq.n	800972c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <osThreadNew+0xa8>
        mem = 1;
 8009726:	2301      	movs	r3, #1
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	e010      	b.n	800974e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10c      	bne.n	800974e <osThreadNew+0xca>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <osThreadNew+0xca>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <osThreadNew+0xca>
          mem = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e001      	b.n	800974e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d110      	bne.n	8009776 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800975c:	9202      	str	r2, [sp, #8]
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fe4e 	bl	800a40c <xTaskCreateStatic>
 8009770:	4603      	mov	r3, r0
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	e013      	b.n	800979e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d110      	bne.n	800979e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	b29a      	uxth	r2, r3
 8009780:	f107 0310 	add.w	r3, r7, #16
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 fe99 	bl	800a4c6 <xTaskCreate>
 8009794:	4603      	mov	r3, r0
 8009796:	2b01      	cmp	r3, #1
 8009798:	d001      	beq.n	800979e <osThreadNew+0x11a>
            hTask = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800979e:	693b      	ldr	r3, [r7, #16]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3728      	adds	r7, #40	; 0x28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097b4:	f3ef 8305 	mrs	r3, IPSR
 80097b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80097c0:	f06f 0305 	mvn.w	r3, #5
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	e00b      	b.n	80097e0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80097ce:	f06f 0303 	mvn.w	r3, #3
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	e004      	b.n	80097e0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80097da:	6938      	ldr	r0, [r7, #16]
 80097dc:	f001 f802 	bl	800a7e4 <vTaskSuspend>
  }

  return (stat);
 80097e0:	697b      	ldr	r3, [r7, #20]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b086      	sub	sp, #24
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097f6:	f3ef 8305 	mrs	r3, IPSR
 80097fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80097fc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <osThreadResume+0x20>
    stat = osErrorISR;
 8009802:	f06f 0305 	mvn.w	r3, #5
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	e00b      	b.n	8009822 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8009810:	f06f 0303 	mvn.w	r3, #3
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e004      	b.n	8009822 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800981c:	6938      	ldr	r0, [r7, #16]
 800981e:	f001 f889 	bl	800a934 <vTaskResume>
  }

  return (stat);
 8009822:	697b      	ldr	r3, [r7, #20]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009834:	f3ef 8305 	mrs	r3, IPSR
 8009838:	60bb      	str	r3, [r7, #8]
  return(result);
 800983a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <osDelay+0x1c>
    stat = osErrorISR;
 8009840:	f06f 0305 	mvn.w	r3, #5
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	e007      	b.n	8009858 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 ff92 	bl	800a77c <vTaskDelay>
    }
  }

  return (stat);
 8009858:	68fb      	ldr	r3, [r7, #12]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a07      	ldr	r2, [pc, #28]	; (8009890 <vApplicationGetIdleTaskMemory+0x2c>)
 8009874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4a06      	ldr	r2, [pc, #24]	; (8009894 <vApplicationGetIdleTaskMemory+0x30>)
 800987a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2280      	movs	r2, #128	; 0x80
 8009880:	601a      	str	r2, [r3, #0]
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	200006d8 	.word	0x200006d8
 8009894:	20000780 	.word	0x20000780

08009898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a07      	ldr	r2, [pc, #28]	; (80098c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80098a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a06      	ldr	r2, [pc, #24]	; (80098c8 <vApplicationGetTimerTaskMemory+0x30>)
 80098ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098b6:	601a      	str	r2, [r3, #0]
}
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000980 	.word	0x20000980
 80098c8:	20000a28 	.word	0x20000a28

080098cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f103 0208 	add.w	r2, r3, #8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f103 0208 	add.w	r2, r3, #8
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f103 0208 	add.w	r2, r3, #8
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800991a:	bf00      	nop
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	601a      	str	r2, [r3, #0]
}
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009984:	d103      	bne.n	800998e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	e00c      	b.n	80099a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3308      	adds	r3, #8
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e002      	b.n	800999c <vListInsert+0x2e>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d2f6      	bcs.n	8009996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6892      	ldr	r2, [r2, #8]
 80099f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6852      	ldr	r2, [r2, #4]
 8009a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d103      	bne.n	8009a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	1e5a      	subs	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a5e:	f002 f981 	bl	800bd64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	441a      	add	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	68f9      	ldr	r1, [r7, #12]
 8009a92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a94:	fb01 f303 	mul.w	r3, r1, r3
 8009a98:	441a      	add	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	22ff      	movs	r2, #255	; 0xff
 8009aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	22ff      	movs	r2, #255	; 0xff
 8009aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d114      	bne.n	8009ade <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01a      	beq.n	8009af2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3310      	adds	r3, #16
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f001 fa2f 	bl	800af24 <xTaskRemoveFromEventList>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d012      	beq.n	8009af2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009acc:	4b0c      	ldr	r3, [pc, #48]	; (8009b00 <xQueueGenericReset+0xcc>)
 8009ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	e009      	b.n	8009af2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3310      	adds	r3, #16
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fef2 	bl	80098cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff feed 	bl	80098cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009af2:	f002 f967 	bl	800bdc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009af6:	2301      	movs	r3, #1
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08e      	sub	sp, #56	; 0x38
 8009b08:	af02      	add	r7, sp, #8
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <xQueueGenericCreateStatic+0x52>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <xQueueGenericCreateStatic+0x56>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e000      	b.n	8009b5c <xQueueGenericCreateStatic+0x58>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	623b      	str	r3, [r7, #32]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <xQueueGenericCreateStatic+0x7e>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <xQueueGenericCreateStatic+0x82>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <xQueueGenericCreateStatic+0x84>
 8009b86:	2300      	movs	r3, #0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	61fb      	str	r3, [r7, #28]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ba2:	2350      	movs	r3, #80	; 0x50
 8009ba4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2b50      	cmp	r3, #80	; 0x50
 8009baa:	d00a      	beq.n	8009bc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	61bb      	str	r3, [r7, #24]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00d      	beq.n	8009bea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4613      	mov	r3, r2
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 f805 	bl	8009bf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3730      	adds	r7, #48	; 0x30
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d103      	bne.n	8009c10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	e002      	b.n	8009c16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c22:	2101      	movs	r1, #1
 8009c24:	69b8      	ldr	r0, [r7, #24]
 8009c26:	f7ff ff05 	bl	8009a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08e      	sub	sp, #56	; 0x38
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <xQueueGenericSend+0x32>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d103      	bne.n	8009c7c <xQueueGenericSend+0x40>
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <xQueueGenericSend+0x44>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e000      	b.n	8009c82 <xQueueGenericSend+0x46>
 8009c80:	2300      	movs	r3, #0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <xQueueGenericSend+0x60>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c98:	bf00      	nop
 8009c9a:	e7fe      	b.n	8009c9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d103      	bne.n	8009caa <xQueueGenericSend+0x6e>
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <xQueueGenericSend+0x72>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <xQueueGenericSend+0x74>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <xQueueGenericSend+0x8e>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cca:	f001 faed 	bl	800b2a8 <xTaskGetSchedulerState>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <xQueueGenericSend+0x9e>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <xQueueGenericSend+0xa2>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <xQueueGenericSend+0xa4>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10a      	bne.n	8009cfa <xQueueGenericSend+0xbe>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	61fb      	str	r3, [r7, #28]
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cfa:	f002 f833 	bl	800bd64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d302      	bcc.n	8009d10 <xQueueGenericSend+0xd4>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d129      	bne.n	8009d64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	68b9      	ldr	r1, [r7, #8]
 8009d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d16:	f000 fa0b 	bl	800a130 <prvCopyDataToQueue>
 8009d1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d010      	beq.n	8009d46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	3324      	adds	r3, #36	; 0x24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f001 f8fb 	bl	800af24 <xTaskRemoveFromEventList>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d013      	beq.n	8009d5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d34:	4b3f      	ldr	r3, [pc, #252]	; (8009e34 <xQueueGenericSend+0x1f8>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	e00a      	b.n	8009d5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d007      	beq.n	8009d5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d4c:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <xQueueGenericSend+0x1f8>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d5c:	f002 f832 	bl	800bdc4 <vPortExitCritical>
				return pdPASS;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e063      	b.n	8009e2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d6a:	f002 f82b 	bl	800bdc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e05c      	b.n	8009e2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d78:	f107 0314 	add.w	r3, r7, #20
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 f935 	bl	800afec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d82:	2301      	movs	r3, #1
 8009d84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d86:	f002 f81d 	bl	800bdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d8a:	f000 fea1 	bl	800aad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d8e:	f001 ffe9 	bl	800bd64 <vPortEnterCritical>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d98:	b25b      	sxtb	r3, r3
 8009d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d9e:	d103      	bne.n	8009da8 <xQueueGenericSend+0x16c>
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dae:	b25b      	sxtb	r3, r3
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009db4:	d103      	bne.n	8009dbe <xQueueGenericSend+0x182>
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dbe:	f002 f801 	bl	800bdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dc2:	1d3a      	adds	r2, r7, #4
 8009dc4:	f107 0314 	add.w	r3, r7, #20
 8009dc8:	4611      	mov	r1, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 f924 	bl	800b018 <xTaskCheckForTimeOut>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d124      	bne.n	8009e20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd8:	f000 faa2 	bl	800a320 <prvIsQueueFull>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d018      	beq.n	8009e14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	3310      	adds	r3, #16
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 f84a 	bl	800ae84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df2:	f000 fa2d 	bl	800a250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009df6:	f000 fe79 	bl	800aaec <xTaskResumeAll>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f47f af7c 	bne.w	8009cfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e02:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <xQueueGenericSend+0x1f8>)
 8009e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	e772      	b.n	8009cfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e16:	f000 fa1b 	bl	800a250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e1a:	f000 fe67 	bl	800aaec <xTaskResumeAll>
 8009e1e:	e76c      	b.n	8009cfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e22:	f000 fa15 	bl	800a250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e26:	f000 fe61 	bl	800aaec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3738      	adds	r7, #56	; 0x38
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b090      	sub	sp, #64	; 0x40
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10a      	bne.n	8009e66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e62:	bf00      	nop
 8009e64:	e7fe      	b.n	8009e64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <xQueueGenericSendFromISR+0x3c>
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <xQueueGenericSendFromISR+0x40>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e000      	b.n	8009e7a <xQueueGenericSendFromISR+0x42>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d103      	bne.n	8009ea2 <xQueueGenericSendFromISR+0x6a>
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <xQueueGenericSendFromISR+0x6e>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e000      	b.n	8009ea8 <xQueueGenericSendFromISR+0x70>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10a      	bne.n	8009ec2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	623b      	str	r3, [r7, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ec2:	f002 f831 	bl	800bf28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fa      	str	r2, [r7, #28]
 8009edc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ede:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ee0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d302      	bcc.n	8009ef4 <xQueueGenericSendFromISR+0xbc>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d12f      	bne.n	8009f54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f0a:	f000 f911 	bl	800a130 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f16:	d112      	bne.n	8009f3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d016      	beq.n	8009f4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	3324      	adds	r3, #36	; 0x24
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fffd 	bl	800af24 <xTaskRemoveFromEventList>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00e      	beq.n	8009f4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00b      	beq.n	8009f4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	e007      	b.n	8009f4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f42:	3301      	adds	r3, #1
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	b25a      	sxtb	r2, r3
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f52:	e001      	b.n	8009f58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3740      	adds	r7, #64	; 0x40
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	; 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10a      	bne.n	8009fa0 <xQueueReceive+0x30>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	623b      	str	r3, [r7, #32]
}
 8009f9c:	bf00      	nop
 8009f9e:	e7fe      	b.n	8009f9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d103      	bne.n	8009fae <xQueueReceive+0x3e>
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <xQueueReceive+0x42>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <xQueueReceive+0x44>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <xQueueReceive+0x5e>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	61fb      	str	r3, [r7, #28]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fce:	f001 f96b 	bl	800b2a8 <xTaskGetSchedulerState>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d102      	bne.n	8009fde <xQueueReceive+0x6e>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <xQueueReceive+0x72>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e000      	b.n	8009fe4 <xQueueReceive+0x74>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <xQueueReceive+0x8e>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	61bb      	str	r3, [r7, #24]
}
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ffe:	f001 feb1 	bl	800bd64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01f      	beq.n	800a04e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a012:	f000 f8f7 	bl	800a204 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	1e5a      	subs	r2, r3, #1
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00f      	beq.n	800a046 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	3310      	adds	r3, #16
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 ff7a 	bl	800af24 <xTaskRemoveFromEventList>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a036:	4b3d      	ldr	r3, [pc, #244]	; (800a12c <xQueueReceive+0x1bc>)
 800a038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a046:	f001 febd 	bl	800bdc4 <vPortExitCritical>
				return pdPASS;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e069      	b.n	800a122 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d103      	bne.n	800a05c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a054:	f001 feb6 	bl	800bdc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a058:	2300      	movs	r3, #0
 800a05a:	e062      	b.n	800a122 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a062:	f107 0310 	add.w	r3, r7, #16
 800a066:	4618      	mov	r0, r3
 800a068:	f000 ffc0 	bl	800afec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a06c:	2301      	movs	r3, #1
 800a06e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a070:	f001 fea8 	bl	800bdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a074:	f000 fd2c 	bl	800aad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a078:	f001 fe74 	bl	800bd64 <vPortEnterCritical>
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a082:	b25b      	sxtb	r3, r3
 800a084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a088:	d103      	bne.n	800a092 <xQueueReceive+0x122>
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a098:	b25b      	sxtb	r3, r3
 800a09a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a09e:	d103      	bne.n	800a0a8 <xQueueReceive+0x138>
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0a8:	f001 fe8c 	bl	800bdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ac:	1d3a      	adds	r2, r7, #4
 800a0ae:	f107 0310 	add.w	r3, r7, #16
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 ffaf 	bl	800b018 <xTaskCheckForTimeOut>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d123      	bne.n	800a108 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c2:	f000 f917 	bl	800a2f4 <prvIsQueueEmpty>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d017      	beq.n	800a0fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	3324      	adds	r3, #36	; 0x24
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fed5 	bl	800ae84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0dc:	f000 f8b8 	bl	800a250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0e0:	f000 fd04 	bl	800aaec <xTaskResumeAll>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d189      	bne.n	8009ffe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a0ea:	4b10      	ldr	r3, [pc, #64]	; (800a12c <xQueueReceive+0x1bc>)
 800a0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	e780      	b.n	8009ffe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0fe:	f000 f8a7 	bl	800a250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a102:	f000 fcf3 	bl	800aaec <xTaskResumeAll>
 800a106:	e77a      	b.n	8009ffe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10a:	f000 f8a1 	bl	800a250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a10e:	f000 fced 	bl	800aaec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a114:	f000 f8ee 	bl	800a2f4 <prvIsQueueEmpty>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f43f af6f 	beq.w	8009ffe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a122:	4618      	mov	r0, r3
 800a124:	3730      	adds	r7, #48	; 0x30
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	e000ed04 	.word	0xe000ed04

0800a130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10d      	bne.n	800a16a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d14d      	bne.n	800a1f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 f8c2 	bl	800b2e4 <xTaskPriorityDisinherit>
 800a160:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	609a      	str	r2, [r3, #8]
 800a168:	e043      	b.n	800a1f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d119      	bne.n	800a1a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6858      	ldr	r0, [r3, #4]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a178:	461a      	mov	r2, r3
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	f003 fafd 	bl	800d77a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	441a      	add	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	429a      	cmp	r2, r3
 800a198:	d32b      	bcc.n	800a1f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	605a      	str	r2, [r3, #4]
 800a1a2:	e026      	b.n	800a1f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68d8      	ldr	r0, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	f003 fae3 	bl	800d77a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68da      	ldr	r2, [r3, #12]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	425b      	negs	r3, r3
 800a1be:	441a      	add	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d207      	bcs.n	800a1e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	425b      	negs	r3, r3
 800a1da:	441a      	add	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d105      	bne.n	800a1f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d002      	beq.n	800a1f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1fa:	697b      	ldr	r3, [r7, #20]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d018      	beq.n	800a248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	441a      	add	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68da      	ldr	r2, [r3, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d303      	bcc.n	800a238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68d9      	ldr	r1, [r3, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	461a      	mov	r2, r3
 800a242:	6838      	ldr	r0, [r7, #0]
 800a244:	f003 fa99 	bl	800d77a <memcpy>
	}
}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a258:	f001 fd84 	bl	800bd64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a264:	e011      	b.n	800a28a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d012      	beq.n	800a294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3324      	adds	r3, #36	; 0x24
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fe56 	bl	800af24 <xTaskRemoveFromEventList>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a27e:	f000 ff2d 	bl	800b0dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	3b01      	subs	r3, #1
 800a286:	b2db      	uxtb	r3, r3
 800a288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	dce9      	bgt.n	800a266 <prvUnlockQueue+0x16>
 800a292:	e000      	b.n	800a296 <prvUnlockQueue+0x46>
					break;
 800a294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	22ff      	movs	r2, #255	; 0xff
 800a29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a29e:	f001 fd91 	bl	800bdc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a2a2:	f001 fd5f 	bl	800bd64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2ae:	e011      	b.n	800a2d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d012      	beq.n	800a2de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3310      	adds	r3, #16
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fe31 	bl	800af24 <xTaskRemoveFromEventList>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2c8:	f000 ff08 	bl	800b0dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dce9      	bgt.n	800a2b0 <prvUnlockQueue+0x60>
 800a2dc:	e000      	b.n	800a2e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	22ff      	movs	r2, #255	; 0xff
 800a2e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2e8:	f001 fd6c 	bl	800bdc4 <vPortExitCritical>
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2fc:	f001 fd32 	bl	800bd64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	e001      	b.n	800a312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a312:	f001 fd57 	bl	800bdc4 <vPortExitCritical>

	return xReturn;
 800a316:	68fb      	ldr	r3, [r7, #12]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a328:	f001 fd1c 	bl	800bd64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a334:	429a      	cmp	r2, r3
 800a336:	d102      	bne.n	800a33e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a338:	2301      	movs	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	e001      	b.n	800a342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a342:	f001 fd3f 	bl	800bdc4 <vPortExitCritical>

	return xReturn;
 800a346:	68fb      	ldr	r3, [r7, #12]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a35a:	2300      	movs	r3, #0
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e014      	b.n	800a38a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a360:	4a0f      	ldr	r2, [pc, #60]	; (800a3a0 <vQueueAddToRegistry+0x50>)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a36c:	490c      	ldr	r1, [pc, #48]	; (800a3a0 <vQueueAddToRegistry+0x50>)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a376:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <vQueueAddToRegistry+0x50>)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	4413      	add	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a382:	e006      	b.n	800a392 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3301      	adds	r3, #1
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b07      	cmp	r3, #7
 800a38e:	d9e7      	bls.n	800a360 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20000e28 	.word	0x20000e28

0800a3a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3b4:	f001 fcd6 	bl	800bd64 <vPortEnterCritical>
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3be:	b25b      	sxtb	r3, r3
 800a3c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3c4:	d103      	bne.n	800a3ce <vQueueWaitForMessageRestricted+0x2a>
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d4:	b25b      	sxtb	r3, r3
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3da:	d103      	bne.n	800a3e4 <vQueueWaitForMessageRestricted+0x40>
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3e4:	f001 fcee 	bl	800bdc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	3324      	adds	r3, #36	; 0x24
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fd67 	bl	800aecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3fe:	6978      	ldr	r0, [r7, #20]
 800a400:	f7ff ff26 	bl	800a250 <prvUnlockQueue>
	}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08e      	sub	sp, #56	; 0x38
 800a410:	af04      	add	r7, sp, #16
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	623b      	str	r3, [r7, #32]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <xTaskCreateStatic+0x46>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	61fb      	str	r3, [r7, #28]
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a452:	23a8      	movs	r3, #168	; 0xa8
 800a454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2ba8      	cmp	r3, #168	; 0xa8
 800a45a:	d00a      	beq.n	800a472 <xTaskCreateStatic+0x66>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	61bb      	str	r3, [r7, #24]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a472:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	2b00      	cmp	r3, #0
 800a478:	d01e      	beq.n	800a4b8 <xTaskCreateStatic+0xac>
 800a47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01b      	beq.n	800a4b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a488:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	2202      	movs	r2, #2
 800a48e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a492:	2300      	movs	r3, #0
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	9302      	str	r3, [sp, #8]
 800a49a:	f107 0314 	add.w	r3, r7, #20
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f850 	bl	800a550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4b2:	f000 f8f3 	bl	800a69c <prvAddNewTaskToReadyList>
 800a4b6:	e001      	b.n	800a4bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4bc:	697b      	ldr	r3, [r7, #20]
	}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3728      	adds	r7, #40	; 0x28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b08c      	sub	sp, #48	; 0x30
 800a4ca:	af04      	add	r7, sp, #16
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	603b      	str	r3, [r7, #0]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4d6:	88fb      	ldrh	r3, [r7, #6]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f001 fd64 	bl	800bfa8 <pvPortMalloc>
 800a4e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00e      	beq.n	800a506 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4e8:	20a8      	movs	r0, #168	; 0xa8
 800a4ea:	f001 fd5d 	bl	800bfa8 <pvPortMalloc>
 800a4ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	631a      	str	r2, [r3, #48]	; 0x30
 800a4fc:	e005      	b.n	800a50a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4fe:	6978      	ldr	r0, [r7, #20]
 800a500:	f001 fe1e 	bl	800c140 <vPortFree>
 800a504:	e001      	b.n	800a50a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a506:	2300      	movs	r3, #0
 800a508:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d017      	beq.n	800a540 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a518:	88fa      	ldrh	r2, [r7, #6]
 800a51a:	2300      	movs	r3, #0
 800a51c:	9303      	str	r3, [sp, #12]
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f80e 	bl	800a550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a534:	69f8      	ldr	r0, [r7, #28]
 800a536:	f000 f8b1 	bl	800a69c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a53a:	2301      	movs	r3, #1
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	e002      	b.n	800a546 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a546:	69bb      	ldr	r3, [r7, #24]
	}
 800a548:	4618      	mov	r0, r3
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	461a      	mov	r2, r3
 800a568:	21a5      	movs	r1, #165	; 0xa5
 800a56a:	f002 ffe8 	bl	800d53e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a578:	3b01      	subs	r3, #1
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f023 0307 	bic.w	r3, r3, #7
 800a586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	f003 0307 	and.w	r3, r3, #7
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00a      	beq.n	800a5a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	617b      	str	r3, [r7, #20]
}
 800a5a4:	bf00      	nop
 800a5a6:	e7fe      	b.n	800a5a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d01f      	beq.n	800a5ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61fb      	str	r3, [r7, #28]
 800a5b2:	e012      	b.n	800a5da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	7819      	ldrb	r1, [r3, #0]
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	3334      	adds	r3, #52	; 0x34
 800a5c4:	460a      	mov	r2, r1
 800a5c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d006      	beq.n	800a5e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	61fb      	str	r3, [r7, #28]
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	2b0f      	cmp	r3, #15
 800a5de:	d9e9      	bls.n	800a5b4 <prvInitialiseNewTask+0x64>
 800a5e0:	e000      	b.n	800a5e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800a5e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5ec:	e003      	b.n	800a5f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	2b37      	cmp	r3, #55	; 0x37
 800a5fa:	d901      	bls.n	800a600 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5fc:	2337      	movs	r3, #55	; 0x37
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a604:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a60a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	2200      	movs	r2, #0
 800a610:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	3304      	adds	r3, #4
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff f978 	bl	800990c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	3318      	adds	r3, #24
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff f973 	bl	800990c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a62a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	2200      	movs	r2, #0
 800a640:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	2200      	movs	r2, #0
 800a648:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	3354      	adds	r3, #84	; 0x54
 800a650:	224c      	movs	r2, #76	; 0x4c
 800a652:	2100      	movs	r1, #0
 800a654:	4618      	mov	r0, r3
 800a656:	f002 ff72 	bl	800d53e <memset>
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	4a0c      	ldr	r2, [pc, #48]	; (800a690 <prvInitialiseNewTask+0x140>)
 800a65e:	659a      	str	r2, [r3, #88]	; 0x58
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	4a0c      	ldr	r2, [pc, #48]	; (800a694 <prvInitialiseNewTask+0x144>)
 800a664:	65da      	str	r2, [r3, #92]	; 0x5c
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	4a0b      	ldr	r2, [pc, #44]	; (800a698 <prvInitialiseNewTask+0x148>)
 800a66a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	68f9      	ldr	r1, [r7, #12]
 800a670:	69b8      	ldr	r0, [r7, #24]
 800a672:	f001 fa47 	bl	800bb04 <pxPortInitialiseStack>
 800a676:	4602      	mov	r2, r0
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a686:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a688:	bf00      	nop
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	2000207c 	.word	0x2000207c
 800a694:	200020e4 	.word	0x200020e4
 800a698:	2000214c 	.word	0x2000214c

0800a69c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6a4:	f001 fb5e 	bl	800bd64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6a8:	4b2d      	ldr	r3, [pc, #180]	; (800a760 <prvAddNewTaskToReadyList+0xc4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	4a2c      	ldr	r2, [pc, #176]	; (800a760 <prvAddNewTaskToReadyList+0xc4>)
 800a6b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6b2:	4b2c      	ldr	r3, [pc, #176]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ba:	4a2a      	ldr	r2, [pc, #168]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6c0:	4b27      	ldr	r3, [pc, #156]	; (800a760 <prvAddNewTaskToReadyList+0xc4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d110      	bne.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6c8:	f000 fd2c 	bl	800b124 <prvInitialiseTaskLists>
 800a6cc:	e00d      	b.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6ce:	4b26      	ldr	r3, [pc, #152]	; (800a768 <prvAddNewTaskToReadyList+0xcc>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d109      	bne.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6d6:	4b23      	ldr	r3, [pc, #140]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d802      	bhi.n	800a6ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6e4:	4a1f      	ldr	r2, [pc, #124]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6ea:	4b20      	ldr	r3, [pc, #128]	; (800a76c <prvAddNewTaskToReadyList+0xd0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	4a1e      	ldr	r2, [pc, #120]	; (800a76c <prvAddNewTaskToReadyList+0xd0>)
 800a6f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6f4:	4b1d      	ldr	r3, [pc, #116]	; (800a76c <prvAddNewTaskToReadyList+0xd0>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <prvAddNewTaskToReadyList+0xd4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d903      	bls.n	800a710 <prvAddNewTaskToReadyList+0x74>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a18      	ldr	r2, [pc, #96]	; (800a770 <prvAddNewTaskToReadyList+0xd4>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4a15      	ldr	r2, [pc, #84]	; (800a774 <prvAddNewTaskToReadyList+0xd8>)
 800a71e:	441a      	add	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7ff f8fd 	bl	8009926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a72c:	f001 fb4a 	bl	800bdc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a730:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <prvAddNewTaskToReadyList+0xcc>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00e      	beq.n	800a756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a738:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <prvAddNewTaskToReadyList+0xc8>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	429a      	cmp	r2, r3
 800a744:	d207      	bcs.n	800a756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvAddNewTaskToReadyList+0xdc>)
 800a748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a756:	bf00      	nop
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	2000133c 	.word	0x2000133c
 800a764:	20000e68 	.word	0x20000e68
 800a768:	20001348 	.word	0x20001348
 800a76c:	20001358 	.word	0x20001358
 800a770:	20001344 	.word	0x20001344
 800a774:	20000e6c 	.word	0x20000e6c
 800a778:	e000ed04 	.word	0xe000ed04

0800a77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a784:	2300      	movs	r3, #0
 800a786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d017      	beq.n	800a7be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <vTaskDelay+0x60>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <vTaskDelay+0x30>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60bb      	str	r3, [r7, #8]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7ac:	f000 f990 	bl	800aad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fe04 	bl	800b3c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7b8:	f000 f998 	bl	800aaec <xTaskResumeAll>
 800a7bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d107      	bne.n	800a7d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <vTaskDelay+0x64>)
 800a7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	20001364 	.word	0x20001364
 800a7e0:	e000ed04 	.word	0xe000ed04

0800a7e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a7ec:	f001 faba 	bl	800bd64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <vTaskSuspend+0x18>
 800a7f6:	4b30      	ldr	r3, [pc, #192]	; (800a8b8 <vTaskSuspend+0xd4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	e000      	b.n	800a7fe <vTaskSuspend+0x1a>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3304      	adds	r3, #4
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff f8eb 	bl	80099e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d004      	beq.n	800a81c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3318      	adds	r3, #24
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff f8e2 	bl	80099e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3304      	adds	r3, #4
 800a820:	4619      	mov	r1, r3
 800a822:	4826      	ldr	r0, [pc, #152]	; (800a8bc <vTaskSuspend+0xd8>)
 800a824:	f7ff f87f 	bl	8009926 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b01      	cmp	r3, #1
 800a832:	d103      	bne.n	800a83c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a83c:	f001 fac2 	bl	800bdc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a840:	4b1f      	ldr	r3, [pc, #124]	; (800a8c0 <vTaskSuspend+0xdc>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a848:	f001 fa8c 	bl	800bd64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a84c:	f000 fd0c 	bl	800b268 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a850:	f001 fab8 	bl	800bdc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a854:	4b18      	ldr	r3, [pc, #96]	; (800a8b8 <vTaskSuspend+0xd4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d127      	bne.n	800a8ae <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a85e:	4b18      	ldr	r3, [pc, #96]	; (800a8c0 <vTaskSuspend+0xdc>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d017      	beq.n	800a896 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a866:	4b17      	ldr	r3, [pc, #92]	; (800a8c4 <vTaskSuspend+0xe0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00a      	beq.n	800a884 <vTaskSuspend+0xa0>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	60bb      	str	r3, [r7, #8]
}
 800a880:	bf00      	nop
 800a882:	e7fe      	b.n	800a882 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a884:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <vTaskSuspend+0xe4>)
 800a886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a894:	e00b      	b.n	800a8ae <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a896:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <vTaskSuspend+0xd8>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b0c      	ldr	r3, [pc, #48]	; (800a8cc <vTaskSuspend+0xe8>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d103      	bne.n	800a8aa <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a8a2:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <vTaskSuspend+0xd4>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
	}
 800a8a8:	e001      	b.n	800a8ae <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a8aa:	f000 fa87 	bl	800adbc <vTaskSwitchContext>
	}
 800a8ae:	bf00      	nop
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000e68 	.word	0x20000e68
 800a8bc:	20001328 	.word	0x20001328
 800a8c0:	20001348 	.word	0x20001348
 800a8c4:	20001364 	.word	0x20001364
 800a8c8:	e000ed04 	.word	0xe000ed04
 800a8cc:	2000133c 	.word	0x2000133c

0800a8d0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60fb      	str	r3, [r7, #12]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	4a0a      	ldr	r2, [pc, #40]	; (800a92c <prvTaskIsTaskSuspended+0x5c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d10a      	bne.n	800a91c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90a:	4a09      	ldr	r2, [pc, #36]	; (800a930 <prvTaskIsTaskSuspended+0x60>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d005      	beq.n	800a91c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a918:	2301      	movs	r3, #1
 800a91a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a91c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a91e:	4618      	mov	r0, r3
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20001328 	.word	0x20001328
 800a930:	200012fc 	.word	0x200012fc

0800a934 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10a      	bne.n	800a95c <vTaskResume+0x28>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	60bb      	str	r3, [r7, #8]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a95c:	4b20      	ldr	r3, [pc, #128]	; (800a9e0 <vTaskResume+0xac>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	429a      	cmp	r2, r3
 800a964:	d038      	beq.n	800a9d8 <vTaskResume+0xa4>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d035      	beq.n	800a9d8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a96c:	f001 f9fa 	bl	800bd64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff ffad 	bl	800a8d0 <prvTaskIsTaskSuspended>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d02b      	beq.n	800a9d4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3304      	adds	r3, #4
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff f82d 	bl	80099e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98a:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <vTaskResume+0xb0>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d903      	bls.n	800a99a <vTaskResume+0x66>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	4a13      	ldr	r2, [pc, #76]	; (800a9e4 <vTaskResume+0xb0>)
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4a10      	ldr	r2, [pc, #64]	; (800a9e8 <vTaskResume+0xb4>)
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7fe ffb8 	bl	8009926 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <vTaskResume+0xac>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d307      	bcc.n	800a9d4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a9c4:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <vTaskResume+0xb8>)
 800a9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a9d4:	f001 f9f6 	bl	800bdc4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	20000e68 	.word	0x20000e68
 800a9e4:	20001344 	.word	0x20001344
 800a9e8:	20000e6c 	.word	0x20000e6c
 800a9ec:	e000ed04 	.word	0xe000ed04

0800a9f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	; 0x28
 800a9f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9fe:	463a      	mov	r2, r7
 800aa00:	1d39      	adds	r1, r7, #4
 800aa02:	f107 0308 	add.w	r3, r7, #8
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe ff2c 	bl	8009864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	9202      	str	r2, [sp, #8]
 800aa14:	9301      	str	r3, [sp, #4]
 800aa16:	2300      	movs	r3, #0
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	460a      	mov	r2, r1
 800aa1e:	4924      	ldr	r1, [pc, #144]	; (800aab0 <vTaskStartScheduler+0xc0>)
 800aa20:	4824      	ldr	r0, [pc, #144]	; (800aab4 <vTaskStartScheduler+0xc4>)
 800aa22:	f7ff fcf3 	bl	800a40c <xTaskCreateStatic>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4a23      	ldr	r2, [pc, #140]	; (800aab8 <vTaskStartScheduler+0xc8>)
 800aa2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa2c:	4b22      	ldr	r3, [pc, #136]	; (800aab8 <vTaskStartScheduler+0xc8>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa34:	2301      	movs	r3, #1
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	e001      	b.n	800aa3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d102      	bne.n	800aa4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa44:	f000 fd10 	bl	800b468 <xTimerCreateTimerTask>
 800aa48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d11b      	bne.n	800aa88 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	613b      	str	r3, [r7, #16]
}
 800aa62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa64:	4b15      	ldr	r3, [pc, #84]	; (800aabc <vTaskStartScheduler+0xcc>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3354      	adds	r3, #84	; 0x54
 800aa6a:	4a15      	ldr	r2, [pc, #84]	; (800aac0 <vTaskStartScheduler+0xd0>)
 800aa6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa6e:	4b15      	ldr	r3, [pc, #84]	; (800aac4 <vTaskStartScheduler+0xd4>)
 800aa70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa76:	4b14      	ldr	r3, [pc, #80]	; (800aac8 <vTaskStartScheduler+0xd8>)
 800aa78:	2201      	movs	r2, #1
 800aa7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa7c:	4b13      	ldr	r3, [pc, #76]	; (800aacc <vTaskStartScheduler+0xdc>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa82:	f001 f8cd 	bl	800bc20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa86:	e00e      	b.n	800aaa6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa8e:	d10a      	bne.n	800aaa6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	60fb      	str	r3, [r7, #12]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <vTaskStartScheduler+0xb4>
}
 800aaa6:	bf00      	nop
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	08010fac 	.word	0x08010fac
 800aab4:	0800b0f5 	.word	0x0800b0f5
 800aab8:	20001360 	.word	0x20001360
 800aabc:	20000e68 	.word	0x20000e68
 800aac0:	2000006c 	.word	0x2000006c
 800aac4:	2000135c 	.word	0x2000135c
 800aac8:	20001348 	.word	0x20001348
 800aacc:	20001340 	.word	0x20001340

0800aad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aad4:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <vTaskSuspendAll+0x18>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	4a03      	ldr	r2, [pc, #12]	; (800aae8 <vTaskSuspendAll+0x18>)
 800aadc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aade:	bf00      	nop
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	20001364 	.word	0x20001364

0800aaec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aafa:	4b42      	ldr	r3, [pc, #264]	; (800ac04 <xTaskResumeAll+0x118>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <xTaskResumeAll+0x2c>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	603b      	str	r3, [r7, #0]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab18:	f001 f924 	bl	800bd64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab1c:	4b39      	ldr	r3, [pc, #228]	; (800ac04 <xTaskResumeAll+0x118>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	4a38      	ldr	r2, [pc, #224]	; (800ac04 <xTaskResumeAll+0x118>)
 800ab24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab26:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <xTaskResumeAll+0x118>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d162      	bne.n	800abf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab2e:	4b36      	ldr	r3, [pc, #216]	; (800ac08 <xTaskResumeAll+0x11c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d05e      	beq.n	800abf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab36:	e02f      	b.n	800ab98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab38:	4b34      	ldr	r3, [pc, #208]	; (800ac0c <xTaskResumeAll+0x120>)
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3318      	adds	r3, #24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe ff4b 	bl	80099e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe ff46 	bl	80099e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab58:	4b2d      	ldr	r3, [pc, #180]	; (800ac10 <xTaskResumeAll+0x124>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d903      	bls.n	800ab68 <xTaskResumeAll+0x7c>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	4a2a      	ldr	r2, [pc, #168]	; (800ac10 <xTaskResumeAll+0x124>)
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4a27      	ldr	r2, [pc, #156]	; (800ac14 <xTaskResumeAll+0x128>)
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4610      	mov	r0, r2
 800ab80:	f7fe fed1 	bl	8009926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b23      	ldr	r3, [pc, #140]	; (800ac18 <xTaskResumeAll+0x12c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d302      	bcc.n	800ab98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab92:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <xTaskResumeAll+0x130>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab98:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <xTaskResumeAll+0x120>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1cb      	bne.n	800ab38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aba6:	f000 fb5f 	bl	800b268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abaa:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <xTaskResumeAll+0x134>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d010      	beq.n	800abd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abb6:	f000 f847 	bl	800ac48 <xTaskIncrementTick>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abc0:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <xTaskResumeAll+0x130>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3b01      	subs	r3, #1
 800abca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f1      	bne.n	800abb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <xTaskResumeAll+0x134>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abd8:	4b10      	ldr	r3, [pc, #64]	; (800ac1c <xTaskResumeAll+0x130>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d009      	beq.n	800abf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abe0:	2301      	movs	r3, #1
 800abe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <xTaskResumeAll+0x138>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abf4:	f001 f8e6 	bl	800bdc4 <vPortExitCritical>

	return xAlreadyYielded;
 800abf8:	68bb      	ldr	r3, [r7, #8]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20001364 	.word	0x20001364
 800ac08:	2000133c 	.word	0x2000133c
 800ac0c:	200012fc 	.word	0x200012fc
 800ac10:	20001344 	.word	0x20001344
 800ac14:	20000e6c 	.word	0x20000e6c
 800ac18:	20000e68 	.word	0x20000e68
 800ac1c:	20001350 	.word	0x20001350
 800ac20:	2000134c 	.word	0x2000134c
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <xTaskGetTickCount+0x1c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac34:	687b      	ldr	r3, [r7, #4]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20001340 	.word	0x20001340

0800ac48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac52:	4b4f      	ldr	r3, [pc, #316]	; (800ad90 <xTaskIncrementTick+0x148>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f040 808f 	bne.w	800ad7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac5c:	4b4d      	ldr	r3, [pc, #308]	; (800ad94 <xTaskIncrementTick+0x14c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3301      	adds	r3, #1
 800ac62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac64:	4a4b      	ldr	r2, [pc, #300]	; (800ad94 <xTaskIncrementTick+0x14c>)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d120      	bne.n	800acb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac70:	4b49      	ldr	r3, [pc, #292]	; (800ad98 <xTaskIncrementTick+0x150>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	603b      	str	r3, [r7, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <xTaskIncrementTick+0x46>
 800ac90:	4b41      	ldr	r3, [pc, #260]	; (800ad98 <xTaskIncrementTick+0x150>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	4b41      	ldr	r3, [pc, #260]	; (800ad9c <xTaskIncrementTick+0x154>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a3f      	ldr	r2, [pc, #252]	; (800ad98 <xTaskIncrementTick+0x150>)
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	4a3f      	ldr	r2, [pc, #252]	; (800ad9c <xTaskIncrementTick+0x154>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	4b3e      	ldr	r3, [pc, #248]	; (800ada0 <xTaskIncrementTick+0x158>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3301      	adds	r3, #1
 800acaa:	4a3d      	ldr	r2, [pc, #244]	; (800ada0 <xTaskIncrementTick+0x158>)
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	f000 fadb 	bl	800b268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acb2:	4b3c      	ldr	r3, [pc, #240]	; (800ada4 <xTaskIncrementTick+0x15c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d349      	bcc.n	800ad50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acbc:	4b36      	ldr	r3, [pc, #216]	; (800ad98 <xTaskIncrementTick+0x150>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d104      	bne.n	800acd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc6:	4b37      	ldr	r3, [pc, #220]	; (800ada4 <xTaskIncrementTick+0x15c>)
 800acc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800accc:	601a      	str	r2, [r3, #0]
					break;
 800acce:	e03f      	b.n	800ad50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd0:	4b31      	ldr	r3, [pc, #196]	; (800ad98 <xTaskIncrementTick+0x150>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d203      	bcs.n	800acf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ace8:	4a2e      	ldr	r2, [pc, #184]	; (800ada4 <xTaskIncrementTick+0x15c>)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acee:	e02f      	b.n	800ad50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe fe73 	bl	80099e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d004      	beq.n	800ad0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	3318      	adds	r3, #24
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fe6a 	bl	80099e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <xTaskIncrementTick+0x160>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d903      	bls.n	800ad20 <xTaskIncrementTick+0xd8>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	4a22      	ldr	r2, [pc, #136]	; (800ada8 <xTaskIncrementTick+0x160>)
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4a1f      	ldr	r2, [pc, #124]	; (800adac <xTaskIncrementTick+0x164>)
 800ad2e:	441a      	add	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7fe fdf5 	bl	8009926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad40:	4b1b      	ldr	r3, [pc, #108]	; (800adb0 <xTaskIncrementTick+0x168>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d3b8      	bcc.n	800acbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad4e:	e7b5      	b.n	800acbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad50:	4b17      	ldr	r3, [pc, #92]	; (800adb0 <xTaskIncrementTick+0x168>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad56:	4915      	ldr	r1, [pc, #84]	; (800adac <xTaskIncrementTick+0x164>)
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	440b      	add	r3, r1
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d901      	bls.n	800ad6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad6c:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <xTaskIncrementTick+0x16c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d007      	beq.n	800ad84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	e004      	b.n	800ad84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <xTaskIncrementTick+0x170>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	4a0d      	ldr	r2, [pc, #52]	; (800adb8 <xTaskIncrementTick+0x170>)
 800ad82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad84:	697b      	ldr	r3, [r7, #20]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20001364 	.word	0x20001364
 800ad94:	20001340 	.word	0x20001340
 800ad98:	200012f4 	.word	0x200012f4
 800ad9c:	200012f8 	.word	0x200012f8
 800ada0:	20001354 	.word	0x20001354
 800ada4:	2000135c 	.word	0x2000135c
 800ada8:	20001344 	.word	0x20001344
 800adac:	20000e6c 	.word	0x20000e6c
 800adb0:	20000e68 	.word	0x20000e68
 800adb4:	20001350 	.word	0x20001350
 800adb8:	2000134c 	.word	0x2000134c

0800adbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adc2:	4b2a      	ldr	r3, [pc, #168]	; (800ae6c <vTaskSwitchContext+0xb0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adca:	4b29      	ldr	r3, [pc, #164]	; (800ae70 <vTaskSwitchContext+0xb4>)
 800adcc:	2201      	movs	r2, #1
 800adce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800add0:	e046      	b.n	800ae60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800add2:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <vTaskSwitchContext+0xb4>)
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add8:	4b26      	ldr	r3, [pc, #152]	; (800ae74 <vTaskSwitchContext+0xb8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e010      	b.n	800ae02 <vTaskSwitchContext+0x46>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10a      	bne.n	800adfc <vTaskSwitchContext+0x40>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	607b      	str	r3, [r7, #4]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <vTaskSwitchContext+0x3e>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	491d      	ldr	r1, [pc, #116]	; (800ae78 <vTaskSwitchContext+0xbc>)
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0e4      	beq.n	800ade0 <vTaskSwitchContext+0x24>
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4a15      	ldr	r2, [pc, #84]	; (800ae78 <vTaskSwitchContext+0xbc>)
 800ae22:	4413      	add	r3, r2
 800ae24:	60bb      	str	r3, [r7, #8]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	605a      	str	r2, [r3, #4]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	3308      	adds	r3, #8
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d104      	bne.n	800ae46 <vTaskSwitchContext+0x8a>
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	605a      	str	r2, [r3, #4]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	4a0b      	ldr	r2, [pc, #44]	; (800ae7c <vTaskSwitchContext+0xc0>)
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	4a08      	ldr	r2, [pc, #32]	; (800ae74 <vTaskSwitchContext+0xb8>)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae56:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <vTaskSwitchContext+0xc0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3354      	adds	r3, #84	; 0x54
 800ae5c:	4a08      	ldr	r2, [pc, #32]	; (800ae80 <vTaskSwitchContext+0xc4>)
 800ae5e:	6013      	str	r3, [r2, #0]
}
 800ae60:	bf00      	nop
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	20001364 	.word	0x20001364
 800ae70:	20001350 	.word	0x20001350
 800ae74:	20001344 	.word	0x20001344
 800ae78:	20000e6c 	.word	0x20000e6c
 800ae7c:	20000e68 	.word	0x20000e68
 800ae80:	2000006c 	.word	0x2000006c

0800ae84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	60fb      	str	r3, [r7, #12]
}
 800aea6:	bf00      	nop
 800aea8:	e7fe      	b.n	800aea8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeaa:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <vTaskPlaceOnEventList+0x44>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3318      	adds	r3, #24
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7fe fd5b 	bl	800996e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeb8:	2101      	movs	r1, #1
 800aeba:	6838      	ldr	r0, [r7, #0]
 800aebc:	f000 fa80 	bl	800b3c0 <prvAddCurrentTaskToDelayedList>
}
 800aec0:	bf00      	nop
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20000e68 	.word	0x20000e68

0800aecc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	617b      	str	r3, [r7, #20]
}
 800aef0:	bf00      	nop
 800aef2:	e7fe      	b.n	800aef2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aef4:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <vTaskPlaceOnEventListRestricted+0x54>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3318      	adds	r3, #24
 800aefa:	4619      	mov	r1, r3
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f7fe fd12 	bl	8009926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	68b8      	ldr	r0, [r7, #8]
 800af12:	f000 fa55 	bl	800b3c0 <prvAddCurrentTaskToDelayedList>
	}
 800af16:	bf00      	nop
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20000e68 	.word	0x20000e68

0800af24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10a      	bne.n	800af50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	60fb      	str	r3, [r7, #12]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	3318      	adds	r3, #24
 800af54:	4618      	mov	r0, r3
 800af56:	f7fe fd43 	bl	80099e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af5a:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <xTaskRemoveFromEventList+0xb0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d11d      	bne.n	800af9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	3304      	adds	r3, #4
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fd3a 	bl	80099e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	4b19      	ldr	r3, [pc, #100]	; (800afd8 <xTaskRemoveFromEventList+0xb4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d903      	bls.n	800af80 <xTaskRemoveFromEventList+0x5c>
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	4a16      	ldr	r2, [pc, #88]	; (800afd8 <xTaskRemoveFromEventList+0xb4>)
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4a13      	ldr	r2, [pc, #76]	; (800afdc <xTaskRemoveFromEventList+0xb8>)
 800af8e:	441a      	add	r2, r3
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f7fe fcc5 	bl	8009926 <vListInsertEnd>
 800af9c:	e005      	b.n	800afaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	3318      	adds	r3, #24
 800afa2:	4619      	mov	r1, r3
 800afa4:	480e      	ldr	r0, [pc, #56]	; (800afe0 <xTaskRemoveFromEventList+0xbc>)
 800afa6:	f7fe fcbe 	bl	8009926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afae:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <xTaskRemoveFromEventList+0xc0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d905      	bls.n	800afc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afb8:	2301      	movs	r3, #1
 800afba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afbc:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <xTaskRemoveFromEventList+0xc4>)
 800afbe:	2201      	movs	r2, #1
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	e001      	b.n	800afc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afc8:	697b      	ldr	r3, [r7, #20]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20001364 	.word	0x20001364
 800afd8:	20001344 	.word	0x20001344
 800afdc:	20000e6c 	.word	0x20000e6c
 800afe0:	200012fc 	.word	0x200012fc
 800afe4:	20000e68 	.word	0x20000e68
 800afe8:	20001350 	.word	0x20001350

0800afec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aff4:	4b06      	ldr	r3, [pc, #24]	; (800b010 <vTaskInternalSetTimeOutState+0x24>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800affc:	4b05      	ldr	r3, [pc, #20]	; (800b014 <vTaskInternalSetTimeOutState+0x28>)
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	605a      	str	r2, [r3, #4]
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	20001354 	.word	0x20001354
 800b014:	20001340 	.word	0x20001340

0800b018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	613b      	str	r3, [r7, #16]
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	60fb      	str	r3, [r7, #12]
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b05a:	f000 fe83 	bl	800bd64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b05e:	4b1d      	ldr	r3, [pc, #116]	; (800b0d4 <xTaskCheckForTimeOut+0xbc>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b076:	d102      	bne.n	800b07e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b078:	2300      	movs	r3, #0
 800b07a:	61fb      	str	r3, [r7, #28]
 800b07c:	e023      	b.n	800b0c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <xTaskCheckForTimeOut+0xc0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d007      	beq.n	800b09a <xTaskCheckForTimeOut+0x82>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	69ba      	ldr	r2, [r7, #24]
 800b090:	429a      	cmp	r2, r3
 800b092:	d302      	bcc.n	800b09a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b094:	2301      	movs	r3, #1
 800b096:	61fb      	str	r3, [r7, #28]
 800b098:	e015      	b.n	800b0c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d20b      	bcs.n	800b0bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	1ad2      	subs	r2, r2, r3
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff ff9b 	bl	800afec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
 800b0ba:	e004      	b.n	800b0c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0c6:	f000 fe7d 	bl	800bdc4 <vPortExitCritical>

	return xReturn;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3720      	adds	r7, #32
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20001340 	.word	0x20001340
 800b0d8:	20001354 	.word	0x20001354

0800b0dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0e0:	4b03      	ldr	r3, [pc, #12]	; (800b0f0 <vTaskMissedYield+0x14>)
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	601a      	str	r2, [r3, #0]
}
 800b0e6:	bf00      	nop
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20001350 	.word	0x20001350

0800b0f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0fc:	f000 f852 	bl	800b1a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b100:	4b06      	ldr	r3, [pc, #24]	; (800b11c <prvIdleTask+0x28>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d9f9      	bls.n	800b0fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b108:	4b05      	ldr	r3, [pc, #20]	; (800b120 <prvIdleTask+0x2c>)
 800b10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b118:	e7f0      	b.n	800b0fc <prvIdleTask+0x8>
 800b11a:	bf00      	nop
 800b11c:	20000e6c 	.word	0x20000e6c
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b12a:	2300      	movs	r3, #0
 800b12c:	607b      	str	r3, [r7, #4]
 800b12e:	e00c      	b.n	800b14a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4a12      	ldr	r2, [pc, #72]	; (800b184 <prvInitialiseTaskLists+0x60>)
 800b13c:	4413      	add	r3, r2
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe fbc4 	bl	80098cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3301      	adds	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b37      	cmp	r3, #55	; 0x37
 800b14e:	d9ef      	bls.n	800b130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b150:	480d      	ldr	r0, [pc, #52]	; (800b188 <prvInitialiseTaskLists+0x64>)
 800b152:	f7fe fbbb 	bl	80098cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b156:	480d      	ldr	r0, [pc, #52]	; (800b18c <prvInitialiseTaskLists+0x68>)
 800b158:	f7fe fbb8 	bl	80098cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b15c:	480c      	ldr	r0, [pc, #48]	; (800b190 <prvInitialiseTaskLists+0x6c>)
 800b15e:	f7fe fbb5 	bl	80098cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b162:	480c      	ldr	r0, [pc, #48]	; (800b194 <prvInitialiseTaskLists+0x70>)
 800b164:	f7fe fbb2 	bl	80098cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b168:	480b      	ldr	r0, [pc, #44]	; (800b198 <prvInitialiseTaskLists+0x74>)
 800b16a:	f7fe fbaf 	bl	80098cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b16e:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <prvInitialiseTaskLists+0x78>)
 800b170:	4a05      	ldr	r2, [pc, #20]	; (800b188 <prvInitialiseTaskLists+0x64>)
 800b172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b174:	4b0a      	ldr	r3, [pc, #40]	; (800b1a0 <prvInitialiseTaskLists+0x7c>)
 800b176:	4a05      	ldr	r2, [pc, #20]	; (800b18c <prvInitialiseTaskLists+0x68>)
 800b178:	601a      	str	r2, [r3, #0]
}
 800b17a:	bf00      	nop
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20000e6c 	.word	0x20000e6c
 800b188:	200012cc 	.word	0x200012cc
 800b18c:	200012e0 	.word	0x200012e0
 800b190:	200012fc 	.word	0x200012fc
 800b194:	20001310 	.word	0x20001310
 800b198:	20001328 	.word	0x20001328
 800b19c:	200012f4 	.word	0x200012f4
 800b1a0:	200012f8 	.word	0x200012f8

0800b1a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1aa:	e019      	b.n	800b1e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1ac:	f000 fdda 	bl	800bd64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b0:	4b10      	ldr	r3, [pc, #64]	; (800b1f4 <prvCheckTasksWaitingTermination+0x50>)
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fe fc0f 	bl	80099e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	; (800b1f8 <prvCheckTasksWaitingTermination+0x54>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	4a0b      	ldr	r2, [pc, #44]	; (800b1f8 <prvCheckTasksWaitingTermination+0x54>)
 800b1ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1cc:	4b0b      	ldr	r3, [pc, #44]	; (800b1fc <prvCheckTasksWaitingTermination+0x58>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	4a0a      	ldr	r2, [pc, #40]	; (800b1fc <prvCheckTasksWaitingTermination+0x58>)
 800b1d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1d6:	f000 fdf5 	bl	800bdc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f810 	bl	800b200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1e0:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <prvCheckTasksWaitingTermination+0x58>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e1      	bne.n	800b1ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20001310 	.word	0x20001310
 800b1f8:	2000133c 	.word	0x2000133c
 800b1fc:	20001324 	.word	0x20001324

0800b200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3354      	adds	r3, #84	; 0x54
 800b20c:	4618      	mov	r0, r3
 800b20e:	f002 f9eb 	bl	800d5e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d108      	bne.n	800b22e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b220:	4618      	mov	r0, r3
 800b222:	f000 ff8d 	bl	800c140 <vPortFree>
				vPortFree( pxTCB );
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 ff8a 	bl	800c140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b22c:	e018      	b.n	800b260 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b234:	2b01      	cmp	r3, #1
 800b236:	d103      	bne.n	800b240 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 ff81 	bl	800c140 <vPortFree>
	}
 800b23e:	e00f      	b.n	800b260 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b246:	2b02      	cmp	r3, #2
 800b248:	d00a      	beq.n	800b260 <prvDeleteTCB+0x60>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	60fb      	str	r3, [r7, #12]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <prvDeleteTCB+0x5e>
	}
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b26e:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <prvResetNextTaskUnblockTime+0x38>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b278:	4b0a      	ldr	r3, [pc, #40]	; (800b2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b27e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b280:	e008      	b.n	800b294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <prvResetNextTaskUnblockTime+0x38>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	4a04      	ldr	r2, [pc, #16]	; (800b2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b292:	6013      	str	r3, [r2, #0]
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	200012f4 	.word	0x200012f4
 800b2a4:	2000135c 	.word	0x2000135c

0800b2a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <xTaskGetSchedulerState+0x34>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	607b      	str	r3, [r7, #4]
 800b2ba:	e008      	b.n	800b2ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2bc:	4b08      	ldr	r3, [pc, #32]	; (800b2e0 <xTaskGetSchedulerState+0x38>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d102      	bne.n	800b2ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	607b      	str	r3, [r7, #4]
 800b2c8:	e001      	b.n	800b2ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2ce:	687b      	ldr	r3, [r7, #4]
	}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	20001348 	.word	0x20001348
 800b2e0:	20001364 	.word	0x20001364

0800b2e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d056      	beq.n	800b3a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2fa:	4b2e      	ldr	r3, [pc, #184]	; (800b3b4 <xTaskPriorityDisinherit+0xd0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	429a      	cmp	r2, r3
 800b302:	d00a      	beq.n	800b31a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	60fb      	str	r3, [r7, #12]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	60bb      	str	r3, [r7, #8]
}
 800b334:	bf00      	nop
 800b336:	e7fe      	b.n	800b336 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33c:	1e5a      	subs	r2, r3, #1
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d02c      	beq.n	800b3a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b352:	2b00      	cmp	r3, #0
 800b354:	d128      	bne.n	800b3a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	3304      	adds	r3, #4
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fb40 	bl	80099e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b378:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <xTaskPriorityDisinherit+0xd4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d903      	bls.n	800b388 <xTaskPriorityDisinherit+0xa4>
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	4a0c      	ldr	r2, [pc, #48]	; (800b3b8 <xTaskPriorityDisinherit+0xd4>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4a09      	ldr	r2, [pc, #36]	; (800b3bc <xTaskPriorityDisinherit+0xd8>)
 800b396:	441a      	add	r2, r3
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f7fe fac1 	bl	8009926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3a8:	697b      	ldr	r3, [r7, #20]
	}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000e68 	.word	0x20000e68
 800b3b8:	20001344 	.word	0x20001344
 800b3bc:	20000e6c 	.word	0x20000e6c

0800b3c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3ca:	4b21      	ldr	r3, [pc, #132]	; (800b450 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3d0:	4b20      	ldr	r3, [pc, #128]	; (800b454 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fe fb02 	bl	80099e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3e2:	d10a      	bne.n	800b3fa <prvAddCurrentTaskToDelayedList+0x3a>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d007      	beq.n	800b3fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3ea:	4b1a      	ldr	r3, [pc, #104]	; (800b454 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4819      	ldr	r0, [pc, #100]	; (800b458 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3f4:	f7fe fa97 	bl	8009926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3f8:	e026      	b.n	800b448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4413      	add	r3, r2
 800b400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b402:	4b14      	ldr	r3, [pc, #80]	; (800b454 <prvAddCurrentTaskToDelayedList+0x94>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d209      	bcs.n	800b426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b412:	4b12      	ldr	r3, [pc, #72]	; (800b45c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <prvAddCurrentTaskToDelayedList+0x94>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3304      	adds	r3, #4
 800b41c:	4619      	mov	r1, r3
 800b41e:	4610      	mov	r0, r2
 800b420:	f7fe faa5 	bl	800996e <vListInsert>
}
 800b424:	e010      	b.n	800b448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b426:	4b0e      	ldr	r3, [pc, #56]	; (800b460 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <prvAddCurrentTaskToDelayedList+0x94>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3304      	adds	r3, #4
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f7fe fa9b 	bl	800996e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b438:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d202      	bcs.n	800b448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b442:	4a08      	ldr	r2, [pc, #32]	; (800b464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6013      	str	r3, [r2, #0]
}
 800b448:	bf00      	nop
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20001340 	.word	0x20001340
 800b454:	20000e68 	.word	0x20000e68
 800b458:	20001328 	.word	0x20001328
 800b45c:	200012f8 	.word	0x200012f8
 800b460:	200012f4 	.word	0x200012f4
 800b464:	2000135c 	.word	0x2000135c

0800b468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b472:	f000 fb07 	bl	800ba84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b476:	4b1c      	ldr	r3, [pc, #112]	; (800b4e8 <xTimerCreateTimerTask+0x80>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d021      	beq.n	800b4c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b486:	1d3a      	adds	r2, r7, #4
 800b488:	f107 0108 	add.w	r1, r7, #8
 800b48c:	f107 030c 	add.w	r3, r7, #12
 800b490:	4618      	mov	r0, r3
 800b492:	f7fe fa01 	bl	8009898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	9202      	str	r2, [sp, #8]
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	460a      	mov	r2, r1
 800b4a8:	4910      	ldr	r1, [pc, #64]	; (800b4ec <xTimerCreateTimerTask+0x84>)
 800b4aa:	4811      	ldr	r0, [pc, #68]	; (800b4f0 <xTimerCreateTimerTask+0x88>)
 800b4ac:	f7fe ffae 	bl	800a40c <xTaskCreateStatic>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	4a10      	ldr	r2, [pc, #64]	; (800b4f4 <xTimerCreateTimerTask+0x8c>)
 800b4b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4b6:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <xTimerCreateTimerTask+0x8c>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	613b      	str	r3, [r7, #16]
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4de:	697b      	ldr	r3, [r7, #20]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20001398 	.word	0x20001398
 800b4ec:	08010fb4 	.word	0x08010fb4
 800b4f0:	0800b62d 	.word	0x0800b62d
 800b4f4:	2000139c 	.word	0x2000139c

0800b4f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b08a      	sub	sp, #40	; 0x28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b506:	2300      	movs	r3, #0
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	623b      	str	r3, [r7, #32]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b526:	4b1a      	ldr	r3, [pc, #104]	; (800b590 <xTimerGenericCommand+0x98>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d02a      	beq.n	800b584 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b05      	cmp	r3, #5
 800b53e:	dc18      	bgt.n	800b572 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b540:	f7ff feb2 	bl	800b2a8 <xTaskGetSchedulerState>
 800b544:	4603      	mov	r3, r0
 800b546:	2b02      	cmp	r3, #2
 800b548:	d109      	bne.n	800b55e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b54a:	4b11      	ldr	r3, [pc, #68]	; (800b590 <xTimerGenericCommand+0x98>)
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	f107 0110 	add.w	r1, r7, #16
 800b552:	2300      	movs	r3, #0
 800b554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b556:	f7fe fb71 	bl	8009c3c <xQueueGenericSend>
 800b55a:	6278      	str	r0, [r7, #36]	; 0x24
 800b55c:	e012      	b.n	800b584 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b55e:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <xTimerGenericCommand+0x98>)
 800b560:	6818      	ldr	r0, [r3, #0]
 800b562:	f107 0110 	add.w	r1, r7, #16
 800b566:	2300      	movs	r3, #0
 800b568:	2200      	movs	r2, #0
 800b56a:	f7fe fb67 	bl	8009c3c <xQueueGenericSend>
 800b56e:	6278      	str	r0, [r7, #36]	; 0x24
 800b570:	e008      	b.n	800b584 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b572:	4b07      	ldr	r3, [pc, #28]	; (800b590 <xTimerGenericCommand+0x98>)
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	f107 0110 	add.w	r1, r7, #16
 800b57a:	2300      	movs	r3, #0
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	f7fe fc5b 	bl	8009e38 <xQueueGenericSendFromISR>
 800b582:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b586:	4618      	mov	r0, r3
 800b588:	3728      	adds	r7, #40	; 0x28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20001398 	.word	0x20001398

0800b594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af02      	add	r7, sp, #8
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59e:	4b22      	ldr	r3, [pc, #136]	; (800b628 <prvProcessExpiredTimer+0x94>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe fa17 	bl	80099e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5b8:	f003 0304 	and.w	r3, r3, #4
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d022      	beq.n	800b606 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	699a      	ldr	r2, [r3, #24]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	18d1      	adds	r1, r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	6978      	ldr	r0, [r7, #20]
 800b5ce:	f000 f8d1 	bl	800b774 <prvInsertTimerInActiveList>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01f      	beq.n	800b618 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6978      	ldr	r0, [r7, #20]
 800b5e4:	f7ff ff88 	bl	800b4f8 <xTimerGenericCommand>
 800b5e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d113      	bne.n	800b618 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b60c:	f023 0301 	bic.w	r3, r3, #1
 800b610:	b2da      	uxtb	r2, r3
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	6978      	ldr	r0, [r7, #20]
 800b61e:	4798      	blx	r3
}
 800b620:	bf00      	nop
 800b622:	3718      	adds	r7, #24
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20001390 	.word	0x20001390

0800b62c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b634:	f107 0308 	add.w	r3, r7, #8
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 f857 	bl	800b6ec <prvGetNextExpireTime>
 800b63e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4619      	mov	r1, r3
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 f803 	bl	800b650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b64a:	f000 f8d5 	bl	800b7f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b64e:	e7f1      	b.n	800b634 <prvTimerTask+0x8>

0800b650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b65a:	f7ff fa39 	bl	800aad0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b65e:	f107 0308 	add.w	r3, r7, #8
 800b662:	4618      	mov	r0, r3
 800b664:	f000 f866 	bl	800b734 <prvSampleTimeNow>
 800b668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d130      	bne.n	800b6d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <prvProcessTimerOrBlockTask+0x3c>
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d806      	bhi.n	800b68c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b67e:	f7ff fa35 	bl	800aaec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff ff85 	bl	800b594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b68a:	e024      	b.n	800b6d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d008      	beq.n	800b6a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b692:	4b13      	ldr	r3, [pc, #76]	; (800b6e0 <prvProcessTimerOrBlockTask+0x90>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <prvProcessTimerOrBlockTask+0x50>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e000      	b.n	800b6a2 <prvProcessTimerOrBlockTask+0x52>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <prvProcessTimerOrBlockTask+0x94>)
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	f7fe fe77 	bl	800a3a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6b6:	f7ff fa19 	bl	800aaec <xTaskResumeAll>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6c0:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <prvProcessTimerOrBlockTask+0x98>)
 800b6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
}
 800b6d0:	e001      	b.n	800b6d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6d2:	f7ff fa0b 	bl	800aaec <xTaskResumeAll>
}
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20001394 	.word	0x20001394
 800b6e4:	20001398 	.word	0x20001398
 800b6e8:	e000ed04 	.word	0xe000ed04

0800b6ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <prvGetNextExpireTime+0x44>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <prvGetNextExpireTime+0x16>
 800b6fe:	2201      	movs	r2, #1
 800b700:	e000      	b.n	800b704 <prvGetNextExpireTime+0x18>
 800b702:	2200      	movs	r2, #0
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d105      	bne.n	800b71c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <prvGetNextExpireTime+0x44>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	e001      	b.n	800b720 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b720:	68fb      	ldr	r3, [r7, #12]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	20001390 	.word	0x20001390

0800b734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b73c:	f7ff fa74 	bl	800ac28 <xTaskGetTickCount>
 800b740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b742:	4b0b      	ldr	r3, [pc, #44]	; (800b770 <prvSampleTimeNow+0x3c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d205      	bcs.n	800b758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b74c:	f000 f936 	bl	800b9bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	e002      	b.n	800b75e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b75e:	4a04      	ldr	r2, [pc, #16]	; (800b770 <prvSampleTimeNow+0x3c>)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b764:	68fb      	ldr	r3, [r7, #12]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	200013a0 	.word	0x200013a0

0800b774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	d812      	bhi.n	800b7c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	1ad2      	subs	r2, r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d302      	bcc.n	800b7ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	e01b      	b.n	800b7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7ae:	4b10      	ldr	r3, [pc, #64]	; (800b7f0 <prvInsertTimerInActiveList+0x7c>)
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	f7fe f8d8 	bl	800996e <vListInsert>
 800b7be:	e012      	b.n	800b7e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d206      	bcs.n	800b7d6 <prvInsertTimerInActiveList+0x62>
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d302      	bcc.n	800b7d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	e007      	b.n	800b7e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <prvInsertTimerInActiveList+0x80>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f7fe f8c4 	bl	800996e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7e6:	697b      	ldr	r3, [r7, #20]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20001394 	.word	0x20001394
 800b7f4:	20001390 	.word	0x20001390

0800b7f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08e      	sub	sp, #56	; 0x38
 800b7fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7fe:	e0ca      	b.n	800b996 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	da18      	bge.n	800b838 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b806:	1d3b      	adds	r3, r7, #4
 800b808:	3304      	adds	r3, #4
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10a      	bne.n	800b828 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	61fb      	str	r3, [r7, #28]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b82e:	6850      	ldr	r0, [r2, #4]
 800b830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b832:	6892      	ldr	r2, [r2, #8]
 800b834:	4611      	mov	r1, r2
 800b836:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f2c0 80ab 	blt.w	800b996 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d004      	beq.n	800b856 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	3304      	adds	r3, #4
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe f8c5 	bl	80099e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b856:	463b      	mov	r3, r7
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff ff6b 	bl	800b734 <prvSampleTimeNow>
 800b85e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b09      	cmp	r3, #9
 800b864:	f200 8096 	bhi.w	800b994 <prvProcessReceivedCommands+0x19c>
 800b868:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <prvProcessReceivedCommands+0x78>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b899 	.word	0x0800b899
 800b874:	0800b899 	.word	0x0800b899
 800b878:	0800b899 	.word	0x0800b899
 800b87c:	0800b90d 	.word	0x0800b90d
 800b880:	0800b921 	.word	0x0800b921
 800b884:	0800b96b 	.word	0x0800b96b
 800b888:	0800b899 	.word	0x0800b899
 800b88c:	0800b899 	.word	0x0800b899
 800b890:	0800b90d 	.word	0x0800b90d
 800b894:	0800b921 	.word	0x0800b921
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b89e:	f043 0301 	orr.w	r3, r3, #1
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	18d1      	adds	r1, r2, r3
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b8:	f7ff ff5c 	bl	800b774 <prvInsertTimerInActiveList>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d069      	beq.n	800b996 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d05e      	beq.n	800b996 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	441a      	add	r2, r3
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ea:	f7ff fe05 	bl	800b4f8 <xTimerGenericCommand>
 800b8ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d14f      	bne.n	800b996 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	61bb      	str	r3, [r7, #24]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b912:	f023 0301 	bic.w	r3, r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b91e:	e03a      	b.n	800b996 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	617b      	str	r3, [r7, #20]
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	699a      	ldr	r2, [r3, #24]
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	18d1      	adds	r1, r2, r3
 800b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b964:	f7ff ff06 	bl	800b774 <prvInsertTimerInActiveList>
					break;
 800b968:	e015      	b.n	800b996 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b97a:	f000 fbe1 	bl	800c140 <vPortFree>
 800b97e:	e00a      	b.n	800b996 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b986:	f023 0301 	bic.w	r3, r3, #1
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b992:	e000      	b.n	800b996 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b996:	4b08      	ldr	r3, [pc, #32]	; (800b9b8 <prvProcessReceivedCommands+0x1c0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	1d39      	adds	r1, r7, #4
 800b99c:	2200      	movs	r2, #0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fae6 	bl	8009f70 <xQueueReceive>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f47f af2a 	bne.w	800b800 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	3730      	adds	r7, #48	; 0x30
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20001398 	.word	0x20001398

0800b9bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9c2:	e048      	b.n	800ba56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9c4:	4b2d      	ldr	r3, [pc, #180]	; (800ba7c <prvSwitchTimerLists+0xc0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ce:	4b2b      	ldr	r3, [pc, #172]	; (800ba7c <prvSwitchTimerLists+0xc0>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3304      	adds	r3, #4
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fd ffff 	bl	80099e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d02e      	beq.n	800ba56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	4413      	add	r3, r2
 800ba00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d90e      	bls.n	800ba28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba16:	4b19      	ldr	r3, [pc, #100]	; (800ba7c <prvSwitchTimerLists+0xc0>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	f7fd ffa4 	bl	800996e <vListInsert>
 800ba26:	e016      	b.n	800ba56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	2100      	movs	r1, #0
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff fd60 	bl	800b4f8 <xTimerGenericCommand>
 800ba38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	603b      	str	r3, [r7, #0]
}
 800ba52:	bf00      	nop
 800ba54:	e7fe      	b.n	800ba54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba56:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <prvSwitchTimerLists+0xc0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1b1      	bne.n	800b9c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba60:	4b06      	ldr	r3, [pc, #24]	; (800ba7c <prvSwitchTimerLists+0xc0>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba66:	4b06      	ldr	r3, [pc, #24]	; (800ba80 <prvSwitchTimerLists+0xc4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a04      	ldr	r2, [pc, #16]	; (800ba7c <prvSwitchTimerLists+0xc0>)
 800ba6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba6e:	4a04      	ldr	r2, [pc, #16]	; (800ba80 <prvSwitchTimerLists+0xc4>)
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	6013      	str	r3, [r2, #0]
}
 800ba74:	bf00      	nop
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20001390 	.word	0x20001390
 800ba80:	20001394 	.word	0x20001394

0800ba84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba8a:	f000 f96b 	bl	800bd64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba8e:	4b15      	ldr	r3, [pc, #84]	; (800bae4 <prvCheckForValidListAndQueue+0x60>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d120      	bne.n	800bad8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba96:	4814      	ldr	r0, [pc, #80]	; (800bae8 <prvCheckForValidListAndQueue+0x64>)
 800ba98:	f7fd ff18 	bl	80098cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba9c:	4813      	ldr	r0, [pc, #76]	; (800baec <prvCheckForValidListAndQueue+0x68>)
 800ba9e:	f7fd ff15 	bl	80098cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800baa2:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <prvCheckForValidListAndQueue+0x6c>)
 800baa4:	4a10      	ldr	r2, [pc, #64]	; (800bae8 <prvCheckForValidListAndQueue+0x64>)
 800baa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800baa8:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <prvCheckForValidListAndQueue+0x70>)
 800baaa:	4a10      	ldr	r2, [pc, #64]	; (800baec <prvCheckForValidListAndQueue+0x68>)
 800baac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800baae:	2300      	movs	r3, #0
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <prvCheckForValidListAndQueue+0x74>)
 800bab4:	4a11      	ldr	r2, [pc, #68]	; (800bafc <prvCheckForValidListAndQueue+0x78>)
 800bab6:	2110      	movs	r1, #16
 800bab8:	200a      	movs	r0, #10
 800baba:	f7fe f823 	bl	8009b04 <xQueueGenericCreateStatic>
 800babe:	4603      	mov	r3, r0
 800bac0:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <prvCheckForValidListAndQueue+0x60>)
 800bac2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bac4:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <prvCheckForValidListAndQueue+0x60>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <prvCheckForValidListAndQueue+0x60>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	490b      	ldr	r1, [pc, #44]	; (800bb00 <prvCheckForValidListAndQueue+0x7c>)
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fc3c 	bl	800a350 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bad8:	f000 f974 	bl	800bdc4 <vPortExitCritical>
}
 800badc:	bf00      	nop
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20001398 	.word	0x20001398
 800bae8:	20001368 	.word	0x20001368
 800baec:	2000137c 	.word	0x2000137c
 800baf0:	20001390 	.word	0x20001390
 800baf4:	20001394 	.word	0x20001394
 800baf8:	20001444 	.word	0x20001444
 800bafc:	200013a4 	.word	0x200013a4
 800bb00:	08010fbc 	.word	0x08010fbc

0800bb04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3b04      	subs	r3, #4
 800bb14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3b04      	subs	r3, #4
 800bb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f023 0201 	bic.w	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3b04      	subs	r3, #4
 800bb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb34:	4a0c      	ldr	r2, [pc, #48]	; (800bb68 <pxPortInitialiseStack+0x64>)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3b14      	subs	r3, #20
 800bb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3b04      	subs	r3, #4
 800bb4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f06f 0202 	mvn.w	r2, #2
 800bb52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	3b20      	subs	r3, #32
 800bb58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3714      	adds	r7, #20
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	0800bb6d 	.word	0x0800bb6d

0800bb6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb76:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <prvTaskExitError+0x54>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb7e:	d00a      	beq.n	800bb96 <prvTaskExitError+0x2a>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <prvTaskExitError+0x28>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	60bb      	str	r3, [r7, #8]
}
 800bba8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbaa:	bf00      	nop
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0fc      	beq.n	800bbac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbb2:	bf00      	nop
 800bbb4:	bf00      	nop
 800bbb6:	3714      	adds	r7, #20
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	20000010 	.word	0x20000010
	...

0800bbd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbd0:	4b07      	ldr	r3, [pc, #28]	; (800bbf0 <pxCurrentTCBConst2>)
 800bbd2:	6819      	ldr	r1, [r3, #0]
 800bbd4:	6808      	ldr	r0, [r1, #0]
 800bbd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbda:	f380 8809 	msr	PSP, r0
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f04f 0000 	mov.w	r0, #0
 800bbe6:	f380 8811 	msr	BASEPRI, r0
 800bbea:	4770      	bx	lr
 800bbec:	f3af 8000 	nop.w

0800bbf0 <pxCurrentTCBConst2>:
 800bbf0:	20000e68 	.word	0x20000e68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop

0800bbf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbf8:	4808      	ldr	r0, [pc, #32]	; (800bc1c <prvPortStartFirstTask+0x24>)
 800bbfa:	6800      	ldr	r0, [r0, #0]
 800bbfc:	6800      	ldr	r0, [r0, #0]
 800bbfe:	f380 8808 	msr	MSP, r0
 800bc02:	f04f 0000 	mov.w	r0, #0
 800bc06:	f380 8814 	msr	CONTROL, r0
 800bc0a:	b662      	cpsie	i
 800bc0c:	b661      	cpsie	f
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	df00      	svc	0
 800bc18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc1a:	bf00      	nop
 800bc1c:	e000ed08 	.word	0xe000ed08

0800bc20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc26:	4b46      	ldr	r3, [pc, #280]	; (800bd40 <xPortStartScheduler+0x120>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a46      	ldr	r2, [pc, #280]	; (800bd44 <xPortStartScheduler+0x124>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d10a      	bne.n	800bc46 <xPortStartScheduler+0x26>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	613b      	str	r3, [r7, #16]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc46:	4b3e      	ldr	r3, [pc, #248]	; (800bd40 <xPortStartScheduler+0x120>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a3f      	ldr	r2, [pc, #252]	; (800bd48 <xPortStartScheduler+0x128>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d10a      	bne.n	800bc66 <xPortStartScheduler+0x46>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	60fb      	str	r3, [r7, #12]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc66:	4b39      	ldr	r3, [pc, #228]	; (800bd4c <xPortStartScheduler+0x12c>)
 800bc68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	4b31      	ldr	r3, [pc, #196]	; (800bd50 <xPortStartScheduler+0x130>)
 800bc8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc8e:	4b31      	ldr	r3, [pc, #196]	; (800bd54 <xPortStartScheduler+0x134>)
 800bc90:	2207      	movs	r2, #7
 800bc92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc94:	e009      	b.n	800bcaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc96:	4b2f      	ldr	r3, [pc, #188]	; (800bd54 <xPortStartScheduler+0x134>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	4a2d      	ldr	r2, [pc, #180]	; (800bd54 <xPortStartScheduler+0x134>)
 800bc9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb2:	2b80      	cmp	r3, #128	; 0x80
 800bcb4:	d0ef      	beq.n	800bc96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcb6:	4b27      	ldr	r3, [pc, #156]	; (800bd54 <xPortStartScheduler+0x134>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f1c3 0307 	rsb	r3, r3, #7
 800bcbe:	2b04      	cmp	r3, #4
 800bcc0:	d00a      	beq.n	800bcd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	60bb      	str	r3, [r7, #8]
}
 800bcd4:	bf00      	nop
 800bcd6:	e7fe      	b.n	800bcd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcd8:	4b1e      	ldr	r3, [pc, #120]	; (800bd54 <xPortStartScheduler+0x134>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	021b      	lsls	r3, r3, #8
 800bcde:	4a1d      	ldr	r2, [pc, #116]	; (800bd54 <xPortStartScheduler+0x134>)
 800bce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bce2:	4b1c      	ldr	r3, [pc, #112]	; (800bd54 <xPortStartScheduler+0x134>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcea:	4a1a      	ldr	r2, [pc, #104]	; (800bd54 <xPortStartScheduler+0x134>)
 800bcec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcf6:	4b18      	ldr	r3, [pc, #96]	; (800bd58 <xPortStartScheduler+0x138>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a17      	ldr	r2, [pc, #92]	; (800bd58 <xPortStartScheduler+0x138>)
 800bcfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <xPortStartScheduler+0x138>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a14      	ldr	r2, [pc, #80]	; (800bd58 <xPortStartScheduler+0x138>)
 800bd08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd0e:	f000 f8dd 	bl	800becc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd12:	4b12      	ldr	r3, [pc, #72]	; (800bd5c <xPortStartScheduler+0x13c>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd18:	f000 f8fc 	bl	800bf14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd1c:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <xPortStartScheduler+0x140>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a0f      	ldr	r2, [pc, #60]	; (800bd60 <xPortStartScheduler+0x140>)
 800bd22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd28:	f7ff ff66 	bl	800bbf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd2c:	f7ff f846 	bl	800adbc <vTaskSwitchContext>
	prvTaskExitError();
 800bd30:	f7ff ff1c 	bl	800bb6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	e000ed00 	.word	0xe000ed00
 800bd44:	410fc271 	.word	0x410fc271
 800bd48:	410fc270 	.word	0x410fc270
 800bd4c:	e000e400 	.word	0xe000e400
 800bd50:	20001494 	.word	0x20001494
 800bd54:	20001498 	.word	0x20001498
 800bd58:	e000ed20 	.word	0xe000ed20
 800bd5c:	20000010 	.word	0x20000010
 800bd60:	e000ef34 	.word	0xe000ef34

0800bd64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	607b      	str	r3, [r7, #4]
}
 800bd7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd7e:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <vPortEnterCritical+0x58>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	4a0d      	ldr	r2, [pc, #52]	; (800bdbc <vPortEnterCritical+0x58>)
 800bd86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd88:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <vPortEnterCritical+0x58>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d10f      	bne.n	800bdb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd90:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <vPortEnterCritical+0x5c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00a      	beq.n	800bdb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	603b      	str	r3, [r7, #0]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <vPortEnterCritical+0x4a>
	}
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000010 	.word	0x20000010
 800bdc0:	e000ed04 	.word	0xe000ed04

0800bdc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdca:	4b12      	ldr	r3, [pc, #72]	; (800be14 <vPortExitCritical+0x50>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10a      	bne.n	800bde8 <vPortExitCritical+0x24>
	__asm volatile
 800bdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd6:	f383 8811 	msr	BASEPRI, r3
 800bdda:	f3bf 8f6f 	isb	sy
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	607b      	str	r3, [r7, #4]
}
 800bde4:	bf00      	nop
 800bde6:	e7fe      	b.n	800bde6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bde8:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <vPortExitCritical+0x50>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	4a09      	ldr	r2, [pc, #36]	; (800be14 <vPortExitCritical+0x50>)
 800bdf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdf2:	4b08      	ldr	r3, [pc, #32]	; (800be14 <vPortExitCritical+0x50>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d105      	bne.n	800be06 <vPortExitCritical+0x42>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	f383 8811 	msr	BASEPRI, r3
}
 800be04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be06:	bf00      	nop
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20000010 	.word	0x20000010
	...

0800be20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be20:	f3ef 8009 	mrs	r0, PSP
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	4b15      	ldr	r3, [pc, #84]	; (800be80 <pxCurrentTCBConst>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	f01e 0f10 	tst.w	lr, #16
 800be30:	bf08      	it	eq
 800be32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3a:	6010      	str	r0, [r2, #0]
 800be3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be44:	f380 8811 	msr	BASEPRI, r0
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f7fe ffb4 	bl	800adbc <vTaskSwitchContext>
 800be54:	f04f 0000 	mov.w	r0, #0
 800be58:	f380 8811 	msr	BASEPRI, r0
 800be5c:	bc09      	pop	{r0, r3}
 800be5e:	6819      	ldr	r1, [r3, #0]
 800be60:	6808      	ldr	r0, [r1, #0]
 800be62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be66:	f01e 0f10 	tst.w	lr, #16
 800be6a:	bf08      	it	eq
 800be6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be70:	f380 8809 	msr	PSP, r0
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	f3af 8000 	nop.w

0800be80 <pxCurrentTCBConst>:
 800be80:	20000e68 	.word	0x20000e68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop

0800be88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	607b      	str	r3, [r7, #4]
}
 800bea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bea2:	f7fe fed1 	bl	800ac48 <xTaskIncrementTick>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d003      	beq.n	800beb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800beac:	4b06      	ldr	r3, [pc, #24]	; (800bec8 <xPortSysTickHandler+0x40>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	2300      	movs	r3, #0
 800beb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	f383 8811 	msr	BASEPRI, r3
}
 800bebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	e000ed04 	.word	0xe000ed04

0800becc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800becc:	b480      	push	{r7}
 800bece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bed0:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <vPortSetupTimerInterrupt+0x34>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bed6:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <vPortSetupTimerInterrupt+0x38>)
 800bed8:	2200      	movs	r2, #0
 800beda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <vPortSetupTimerInterrupt+0x3c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a0a      	ldr	r2, [pc, #40]	; (800bf0c <vPortSetupTimerInterrupt+0x40>)
 800bee2:	fba2 2303 	umull	r2, r3, r2, r3
 800bee6:	099b      	lsrs	r3, r3, #6
 800bee8:	4a09      	ldr	r2, [pc, #36]	; (800bf10 <vPortSetupTimerInterrupt+0x44>)
 800beea:	3b01      	subs	r3, #1
 800beec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800beee:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <vPortSetupTimerInterrupt+0x34>)
 800bef0:	2207      	movs	r2, #7
 800bef2:	601a      	str	r2, [r3, #0]
}
 800bef4:	bf00      	nop
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	e000e010 	.word	0xe000e010
 800bf04:	e000e018 	.word	0xe000e018
 800bf08:	20000004 	.word	0x20000004
 800bf0c:	10624dd3 	.word	0x10624dd3
 800bf10:	e000e014 	.word	0xe000e014

0800bf14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf24 <vPortEnableVFP+0x10>
 800bf18:	6801      	ldr	r1, [r0, #0]
 800bf1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf1e:	6001      	str	r1, [r0, #0]
 800bf20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf22:	bf00      	nop
 800bf24:	e000ed88 	.word	0xe000ed88

0800bf28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf2e:	f3ef 8305 	mrs	r3, IPSR
 800bf32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b0f      	cmp	r3, #15
 800bf38:	d914      	bls.n	800bf64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf3a:	4a17      	ldr	r2, [pc, #92]	; (800bf98 <vPortValidateInterruptPriority+0x70>)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	4413      	add	r3, r2
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf44:	4b15      	ldr	r3, [pc, #84]	; (800bf9c <vPortValidateInterruptPriority+0x74>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	7afa      	ldrb	r2, [r7, #11]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d20a      	bcs.n	800bf64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	607b      	str	r3, [r7, #4]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf64:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <vPortValidateInterruptPriority+0x78>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <vPortValidateInterruptPriority+0x7c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d90a      	bls.n	800bf8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	603b      	str	r3, [r7, #0]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <vPortValidateInterruptPriority+0x60>
	}
 800bf8a:	bf00      	nop
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	e000e3f0 	.word	0xe000e3f0
 800bf9c:	20001494 	.word	0x20001494
 800bfa0:	e000ed0c 	.word	0xe000ed0c
 800bfa4:	20001498 	.word	0x20001498

0800bfa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	; 0x28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfb4:	f7fe fd8c 	bl	800aad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfb8:	4b5b      	ldr	r3, [pc, #364]	; (800c128 <pvPortMalloc+0x180>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfc0:	f000 f920 	bl	800c204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfc4:	4b59      	ldr	r3, [pc, #356]	; (800c12c <pvPortMalloc+0x184>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4013      	ands	r3, r2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f040 8093 	bne.w	800c0f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01d      	beq.n	800c014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bfd8:	2208      	movs	r2, #8
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4413      	add	r3, r2
 800bfde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f003 0307 	and.w	r3, r3, #7
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d014      	beq.n	800c014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f023 0307 	bic.w	r3, r3, #7
 800bff0:	3308      	adds	r3, #8
 800bff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00a      	beq.n	800c014 <pvPortMalloc+0x6c>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	617b      	str	r3, [r7, #20]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d06e      	beq.n	800c0f8 <pvPortMalloc+0x150>
 800c01a:	4b45      	ldr	r3, [pc, #276]	; (800c130 <pvPortMalloc+0x188>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	429a      	cmp	r2, r3
 800c022:	d869      	bhi.n	800c0f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c024:	4b43      	ldr	r3, [pc, #268]	; (800c134 <pvPortMalloc+0x18c>)
 800c026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c028:	4b42      	ldr	r3, [pc, #264]	; (800c134 <pvPortMalloc+0x18c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c02e:	e004      	b.n	800c03a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	429a      	cmp	r2, r3
 800c042:	d903      	bls.n	800c04c <pvPortMalloc+0xa4>
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f1      	bne.n	800c030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c04c:	4b36      	ldr	r3, [pc, #216]	; (800c128 <pvPortMalloc+0x180>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c052:	429a      	cmp	r2, r3
 800c054:	d050      	beq.n	800c0f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2208      	movs	r2, #8
 800c05c:	4413      	add	r3, r2
 800c05e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	2308      	movs	r3, #8
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	429a      	cmp	r2, r3
 800c076:	d91f      	bls.n	800c0b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4413      	add	r3, r2
 800c07e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	f003 0307 	and.w	r3, r3, #7
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00a      	beq.n	800c0a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	613b      	str	r3, [r7, #16]
}
 800c09c:	bf00      	nop
 800c09e:	e7fe      	b.n	800c09e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	1ad2      	subs	r2, r2, r3
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0b2:	69b8      	ldr	r0, [r7, #24]
 800c0b4:	f000 f908 	bl	800c2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0b8:	4b1d      	ldr	r3, [pc, #116]	; (800c130 <pvPortMalloc+0x188>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	4a1b      	ldr	r2, [pc, #108]	; (800c130 <pvPortMalloc+0x188>)
 800c0c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0c6:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <pvPortMalloc+0x188>)
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	4b1b      	ldr	r3, [pc, #108]	; (800c138 <pvPortMalloc+0x190>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d203      	bcs.n	800c0da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0d2:	4b17      	ldr	r3, [pc, #92]	; (800c130 <pvPortMalloc+0x188>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a18      	ldr	r2, [pc, #96]	; (800c138 <pvPortMalloc+0x190>)
 800c0d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	4b13      	ldr	r3, [pc, #76]	; (800c12c <pvPortMalloc+0x184>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0ee:	4b13      	ldr	r3, [pc, #76]	; (800c13c <pvPortMalloc+0x194>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4a11      	ldr	r2, [pc, #68]	; (800c13c <pvPortMalloc+0x194>)
 800c0f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0f8:	f7fe fcf8 	bl	800aaec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <pvPortMalloc+0x174>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	60fb      	str	r3, [r7, #12]
}
 800c118:	bf00      	nop
 800c11a:	e7fe      	b.n	800c11a <pvPortMalloc+0x172>
	return pvReturn;
 800c11c:	69fb      	ldr	r3, [r7, #28]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3728      	adds	r7, #40	; 0x28
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	2000205c 	.word	0x2000205c
 800c12c:	20002070 	.word	0x20002070
 800c130:	20002060 	.word	0x20002060
 800c134:	20002054 	.word	0x20002054
 800c138:	20002064 	.word	0x20002064
 800c13c:	20002068 	.word	0x20002068

0800c140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d04d      	beq.n	800c1ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c152:	2308      	movs	r3, #8
 800c154:	425b      	negs	r3, r3
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	4413      	add	r3, r2
 800c15a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	4b24      	ldr	r3, [pc, #144]	; (800c1f8 <vPortFree+0xb8>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4013      	ands	r3, r2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10a      	bne.n	800c184 <vPortFree+0x44>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	60fb      	str	r3, [r7, #12]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00a      	beq.n	800c1a2 <vPortFree+0x62>
	__asm volatile
 800c18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	60bb      	str	r3, [r7, #8]
}
 800c19e:	bf00      	nop
 800c1a0:	e7fe      	b.n	800c1a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	685a      	ldr	r2, [r3, #4]
 800c1a6:	4b14      	ldr	r3, [pc, #80]	; (800c1f8 <vPortFree+0xb8>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d01e      	beq.n	800c1ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d11a      	bne.n	800c1ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <vPortFree+0xb8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	43db      	mvns	r3, r3
 800c1c2:	401a      	ands	r2, r3
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1c8:	f7fe fc82 	bl	800aad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <vPortFree+0xbc>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	4a09      	ldr	r2, [pc, #36]	; (800c1fc <vPortFree+0xbc>)
 800c1d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1da:	6938      	ldr	r0, [r7, #16]
 800c1dc:	f000 f874 	bl	800c2c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <vPortFree+0xc0>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	4a06      	ldr	r2, [pc, #24]	; (800c200 <vPortFree+0xc0>)
 800c1e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1ea:	f7fe fc7f 	bl	800aaec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1ee:	bf00      	nop
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20002070 	.word	0x20002070
 800c1fc:	20002060 	.word	0x20002060
 800c200:	2000206c 	.word	0x2000206c

0800c204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c20a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c210:	4b27      	ldr	r3, [pc, #156]	; (800c2b0 <prvHeapInit+0xac>)
 800c212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00c      	beq.n	800c238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3307      	adds	r3, #7
 800c222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f023 0307 	bic.w	r3, r3, #7
 800c22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	4a1f      	ldr	r2, [pc, #124]	; (800c2b0 <prvHeapInit+0xac>)
 800c234:	4413      	add	r3, r2
 800c236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c23c:	4a1d      	ldr	r2, [pc, #116]	; (800c2b4 <prvHeapInit+0xb0>)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c242:	4b1c      	ldr	r3, [pc, #112]	; (800c2b4 <prvHeapInit+0xb0>)
 800c244:	2200      	movs	r2, #0
 800c246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	4413      	add	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c250:	2208      	movs	r2, #8
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	1a9b      	subs	r3, r3, r2
 800c256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f023 0307 	bic.w	r3, r3, #7
 800c25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	4a15      	ldr	r2, [pc, #84]	; (800c2b8 <prvHeapInit+0xb4>)
 800c264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c266:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <prvHeapInit+0xb4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2200      	movs	r2, #0
 800c26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c26e:	4b12      	ldr	r3, [pc, #72]	; (800c2b8 <prvHeapInit+0xb4>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c284:	4b0c      	ldr	r3, [pc, #48]	; (800c2b8 <prvHeapInit+0xb4>)
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	4a0a      	ldr	r2, [pc, #40]	; (800c2bc <prvHeapInit+0xb8>)
 800c292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	4a09      	ldr	r2, [pc, #36]	; (800c2c0 <prvHeapInit+0xbc>)
 800c29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c29c:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <prvHeapInit+0xc0>)
 800c29e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	2000149c 	.word	0x2000149c
 800c2b4:	20002054 	.word	0x20002054
 800c2b8:	2000205c 	.word	0x2000205c
 800c2bc:	20002064 	.word	0x20002064
 800c2c0:	20002060 	.word	0x20002060
 800c2c4:	20002070 	.word	0x20002070

0800c2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2d0:	4b28      	ldr	r3, [pc, #160]	; (800c374 <prvInsertBlockIntoFreeList+0xac>)
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e002      	b.n	800c2dc <prvInsertBlockIntoFreeList+0x14>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d8f7      	bhi.n	800c2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d108      	bne.n	800c30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	441a      	add	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d118      	bne.n	800c350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	4b15      	ldr	r3, [pc, #84]	; (800c378 <prvInsertBlockIntoFreeList+0xb0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d00d      	beq.n	800c346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	441a      	add	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	e008      	b.n	800c358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c346:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <prvInsertBlockIntoFreeList+0xb0>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	e003      	b.n	800c358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d002      	beq.n	800c366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c366:	bf00      	nop
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20002054 	.word	0x20002054
 800c378:	2000205c 	.word	0x2000205c

0800c37c <atoi>:
 800c37c:	220a      	movs	r2, #10
 800c37e:	2100      	movs	r1, #0
 800c380:	f000 b938 	b.w	800c5f4 <strtol>

0800c384 <malloc>:
 800c384:	4b02      	ldr	r3, [pc, #8]	; (800c390 <malloc+0xc>)
 800c386:	4601      	mov	r1, r0
 800c388:	6818      	ldr	r0, [r3, #0]
 800c38a:	f000 b823 	b.w	800c3d4 <_malloc_r>
 800c38e:	bf00      	nop
 800c390:	2000006c 	.word	0x2000006c

0800c394 <sbrk_aligned>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4e0e      	ldr	r6, [pc, #56]	; (800c3d0 <sbrk_aligned+0x3c>)
 800c398:	460c      	mov	r4, r1
 800c39a:	6831      	ldr	r1, [r6, #0]
 800c39c:	4605      	mov	r5, r0
 800c39e:	b911      	cbnz	r1, 800c3a6 <sbrk_aligned+0x12>
 800c3a0:	f001 f99c 	bl	800d6dc <_sbrk_r>
 800c3a4:	6030      	str	r0, [r6, #0]
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f001 f997 	bl	800d6dc <_sbrk_r>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	d00a      	beq.n	800c3c8 <sbrk_aligned+0x34>
 800c3b2:	1cc4      	adds	r4, r0, #3
 800c3b4:	f024 0403 	bic.w	r4, r4, #3
 800c3b8:	42a0      	cmp	r0, r4
 800c3ba:	d007      	beq.n	800c3cc <sbrk_aligned+0x38>
 800c3bc:	1a21      	subs	r1, r4, r0
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f001 f98c 	bl	800d6dc <_sbrk_r>
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d101      	bne.n	800c3cc <sbrk_aligned+0x38>
 800c3c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	20002078 	.word	0x20002078

0800c3d4 <_malloc_r>:
 800c3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d8:	1ccd      	adds	r5, r1, #3
 800c3da:	f025 0503 	bic.w	r5, r5, #3
 800c3de:	3508      	adds	r5, #8
 800c3e0:	2d0c      	cmp	r5, #12
 800c3e2:	bf38      	it	cc
 800c3e4:	250c      	movcc	r5, #12
 800c3e6:	2d00      	cmp	r5, #0
 800c3e8:	4607      	mov	r7, r0
 800c3ea:	db01      	blt.n	800c3f0 <_malloc_r+0x1c>
 800c3ec:	42a9      	cmp	r1, r5
 800c3ee:	d905      	bls.n	800c3fc <_malloc_r+0x28>
 800c3f0:	230c      	movs	r3, #12
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	2600      	movs	r6, #0
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4d0 <_malloc_r+0xfc>
 800c400:	f000 f868 	bl	800c4d4 <__malloc_lock>
 800c404:	f8d8 3000 	ldr.w	r3, [r8]
 800c408:	461c      	mov	r4, r3
 800c40a:	bb5c      	cbnz	r4, 800c464 <_malloc_r+0x90>
 800c40c:	4629      	mov	r1, r5
 800c40e:	4638      	mov	r0, r7
 800c410:	f7ff ffc0 	bl	800c394 <sbrk_aligned>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	4604      	mov	r4, r0
 800c418:	d155      	bne.n	800c4c6 <_malloc_r+0xf2>
 800c41a:	f8d8 4000 	ldr.w	r4, [r8]
 800c41e:	4626      	mov	r6, r4
 800c420:	2e00      	cmp	r6, #0
 800c422:	d145      	bne.n	800c4b0 <_malloc_r+0xdc>
 800c424:	2c00      	cmp	r4, #0
 800c426:	d048      	beq.n	800c4ba <_malloc_r+0xe6>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	4631      	mov	r1, r6
 800c42c:	4638      	mov	r0, r7
 800c42e:	eb04 0903 	add.w	r9, r4, r3
 800c432:	f001 f953 	bl	800d6dc <_sbrk_r>
 800c436:	4581      	cmp	r9, r0
 800c438:	d13f      	bne.n	800c4ba <_malloc_r+0xe6>
 800c43a:	6821      	ldr	r1, [r4, #0]
 800c43c:	1a6d      	subs	r5, r5, r1
 800c43e:	4629      	mov	r1, r5
 800c440:	4638      	mov	r0, r7
 800c442:	f7ff ffa7 	bl	800c394 <sbrk_aligned>
 800c446:	3001      	adds	r0, #1
 800c448:	d037      	beq.n	800c4ba <_malloc_r+0xe6>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	442b      	add	r3, r5
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	f8d8 3000 	ldr.w	r3, [r8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d038      	beq.n	800c4ca <_malloc_r+0xf6>
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	42a2      	cmp	r2, r4
 800c45c:	d12b      	bne.n	800c4b6 <_malloc_r+0xe2>
 800c45e:	2200      	movs	r2, #0
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	e00f      	b.n	800c484 <_malloc_r+0xb0>
 800c464:	6822      	ldr	r2, [r4, #0]
 800c466:	1b52      	subs	r2, r2, r5
 800c468:	d41f      	bmi.n	800c4aa <_malloc_r+0xd6>
 800c46a:	2a0b      	cmp	r2, #11
 800c46c:	d917      	bls.n	800c49e <_malloc_r+0xca>
 800c46e:	1961      	adds	r1, r4, r5
 800c470:	42a3      	cmp	r3, r4
 800c472:	6025      	str	r5, [r4, #0]
 800c474:	bf18      	it	ne
 800c476:	6059      	strne	r1, [r3, #4]
 800c478:	6863      	ldr	r3, [r4, #4]
 800c47a:	bf08      	it	eq
 800c47c:	f8c8 1000 	streq.w	r1, [r8]
 800c480:	5162      	str	r2, [r4, r5]
 800c482:	604b      	str	r3, [r1, #4]
 800c484:	4638      	mov	r0, r7
 800c486:	f104 060b 	add.w	r6, r4, #11
 800c48a:	f000 f829 	bl	800c4e0 <__malloc_unlock>
 800c48e:	f026 0607 	bic.w	r6, r6, #7
 800c492:	1d23      	adds	r3, r4, #4
 800c494:	1af2      	subs	r2, r6, r3
 800c496:	d0ae      	beq.n	800c3f6 <_malloc_r+0x22>
 800c498:	1b9b      	subs	r3, r3, r6
 800c49a:	50a3      	str	r3, [r4, r2]
 800c49c:	e7ab      	b.n	800c3f6 <_malloc_r+0x22>
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	6862      	ldr	r2, [r4, #4]
 800c4a2:	d1dd      	bne.n	800c460 <_malloc_r+0x8c>
 800c4a4:	f8c8 2000 	str.w	r2, [r8]
 800c4a8:	e7ec      	b.n	800c484 <_malloc_r+0xb0>
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	6864      	ldr	r4, [r4, #4]
 800c4ae:	e7ac      	b.n	800c40a <_malloc_r+0x36>
 800c4b0:	4634      	mov	r4, r6
 800c4b2:	6876      	ldr	r6, [r6, #4]
 800c4b4:	e7b4      	b.n	800c420 <_malloc_r+0x4c>
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	e7cc      	b.n	800c454 <_malloc_r+0x80>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	603b      	str	r3, [r7, #0]
 800c4be:	4638      	mov	r0, r7
 800c4c0:	f000 f80e 	bl	800c4e0 <__malloc_unlock>
 800c4c4:	e797      	b.n	800c3f6 <_malloc_r+0x22>
 800c4c6:	6025      	str	r5, [r4, #0]
 800c4c8:	e7dc      	b.n	800c484 <_malloc_r+0xb0>
 800c4ca:	605b      	str	r3, [r3, #4]
 800c4cc:	deff      	udf	#255	; 0xff
 800c4ce:	bf00      	nop
 800c4d0:	20002074 	.word	0x20002074

0800c4d4 <__malloc_lock>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__malloc_lock+0x8>)
 800c4d6:	f001 b94e 	b.w	800d776 <__retarget_lock_acquire_recursive>
 800c4da:	bf00      	nop
 800c4dc:	200021bc 	.word	0x200021bc

0800c4e0 <__malloc_unlock>:
 800c4e0:	4801      	ldr	r0, [pc, #4]	; (800c4e8 <__malloc_unlock+0x8>)
 800c4e2:	f001 b949 	b.w	800d778 <__retarget_lock_release_recursive>
 800c4e6:	bf00      	nop
 800c4e8:	200021bc 	.word	0x200021bc

0800c4ec <_strtol_l.constprop.0>:
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f2:	d001      	beq.n	800c4f8 <_strtol_l.constprop.0+0xc>
 800c4f4:	2b24      	cmp	r3, #36	; 0x24
 800c4f6:	d906      	bls.n	800c506 <_strtol_l.constprop.0+0x1a>
 800c4f8:	f001 f912 	bl	800d720 <__errno>
 800c4fc:	2316      	movs	r3, #22
 800c4fe:	6003      	str	r3, [r0, #0]
 800c500:	2000      	movs	r0, #0
 800c502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c506:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c5ec <_strtol_l.constprop.0+0x100>
 800c50a:	460d      	mov	r5, r1
 800c50c:	462e      	mov	r6, r5
 800c50e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c512:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c516:	f017 0708 	ands.w	r7, r7, #8
 800c51a:	d1f7      	bne.n	800c50c <_strtol_l.constprop.0+0x20>
 800c51c:	2c2d      	cmp	r4, #45	; 0x2d
 800c51e:	d132      	bne.n	800c586 <_strtol_l.constprop.0+0x9a>
 800c520:	782c      	ldrb	r4, [r5, #0]
 800c522:	2701      	movs	r7, #1
 800c524:	1cb5      	adds	r5, r6, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d05b      	beq.n	800c5e2 <_strtol_l.constprop.0+0xf6>
 800c52a:	2b10      	cmp	r3, #16
 800c52c:	d109      	bne.n	800c542 <_strtol_l.constprop.0+0x56>
 800c52e:	2c30      	cmp	r4, #48	; 0x30
 800c530:	d107      	bne.n	800c542 <_strtol_l.constprop.0+0x56>
 800c532:	782c      	ldrb	r4, [r5, #0]
 800c534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c538:	2c58      	cmp	r4, #88	; 0x58
 800c53a:	d14d      	bne.n	800c5d8 <_strtol_l.constprop.0+0xec>
 800c53c:	786c      	ldrb	r4, [r5, #1]
 800c53e:	2310      	movs	r3, #16
 800c540:	3502      	adds	r5, #2
 800c542:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c546:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c54a:	f04f 0e00 	mov.w	lr, #0
 800c54e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c552:	4676      	mov	r6, lr
 800c554:	fb03 8a19 	mls	sl, r3, r9, r8
 800c558:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c55c:	f1bc 0f09 	cmp.w	ip, #9
 800c560:	d816      	bhi.n	800c590 <_strtol_l.constprop.0+0xa4>
 800c562:	4664      	mov	r4, ip
 800c564:	42a3      	cmp	r3, r4
 800c566:	dd24      	ble.n	800c5b2 <_strtol_l.constprop.0+0xc6>
 800c568:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c56c:	d008      	beq.n	800c580 <_strtol_l.constprop.0+0x94>
 800c56e:	45b1      	cmp	r9, r6
 800c570:	d31c      	bcc.n	800c5ac <_strtol_l.constprop.0+0xc0>
 800c572:	d101      	bne.n	800c578 <_strtol_l.constprop.0+0x8c>
 800c574:	45a2      	cmp	sl, r4
 800c576:	db19      	blt.n	800c5ac <_strtol_l.constprop.0+0xc0>
 800c578:	fb06 4603 	mla	r6, r6, r3, r4
 800c57c:	f04f 0e01 	mov.w	lr, #1
 800c580:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c584:	e7e8      	b.n	800c558 <_strtol_l.constprop.0+0x6c>
 800c586:	2c2b      	cmp	r4, #43	; 0x2b
 800c588:	bf04      	itt	eq
 800c58a:	782c      	ldrbeq	r4, [r5, #0]
 800c58c:	1cb5      	addeq	r5, r6, #2
 800c58e:	e7ca      	b.n	800c526 <_strtol_l.constprop.0+0x3a>
 800c590:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c594:	f1bc 0f19 	cmp.w	ip, #25
 800c598:	d801      	bhi.n	800c59e <_strtol_l.constprop.0+0xb2>
 800c59a:	3c37      	subs	r4, #55	; 0x37
 800c59c:	e7e2      	b.n	800c564 <_strtol_l.constprop.0+0x78>
 800c59e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c5a2:	f1bc 0f19 	cmp.w	ip, #25
 800c5a6:	d804      	bhi.n	800c5b2 <_strtol_l.constprop.0+0xc6>
 800c5a8:	3c57      	subs	r4, #87	; 0x57
 800c5aa:	e7db      	b.n	800c564 <_strtol_l.constprop.0+0x78>
 800c5ac:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c5b0:	e7e6      	b.n	800c580 <_strtol_l.constprop.0+0x94>
 800c5b2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c5b6:	d105      	bne.n	800c5c4 <_strtol_l.constprop.0+0xd8>
 800c5b8:	2322      	movs	r3, #34	; 0x22
 800c5ba:	6003      	str	r3, [r0, #0]
 800c5bc:	4646      	mov	r6, r8
 800c5be:	b942      	cbnz	r2, 800c5d2 <_strtol_l.constprop.0+0xe6>
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	e79e      	b.n	800c502 <_strtol_l.constprop.0+0x16>
 800c5c4:	b107      	cbz	r7, 800c5c8 <_strtol_l.constprop.0+0xdc>
 800c5c6:	4276      	negs	r6, r6
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	d0f9      	beq.n	800c5c0 <_strtol_l.constprop.0+0xd4>
 800c5cc:	f1be 0f00 	cmp.w	lr, #0
 800c5d0:	d000      	beq.n	800c5d4 <_strtol_l.constprop.0+0xe8>
 800c5d2:	1e69      	subs	r1, r5, #1
 800c5d4:	6011      	str	r1, [r2, #0]
 800c5d6:	e7f3      	b.n	800c5c0 <_strtol_l.constprop.0+0xd4>
 800c5d8:	2430      	movs	r4, #48	; 0x30
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1b1      	bne.n	800c542 <_strtol_l.constprop.0+0x56>
 800c5de:	2308      	movs	r3, #8
 800c5e0:	e7af      	b.n	800c542 <_strtol_l.constprop.0+0x56>
 800c5e2:	2c30      	cmp	r4, #48	; 0x30
 800c5e4:	d0a5      	beq.n	800c532 <_strtol_l.constprop.0+0x46>
 800c5e6:	230a      	movs	r3, #10
 800c5e8:	e7ab      	b.n	800c542 <_strtol_l.constprop.0+0x56>
 800c5ea:	bf00      	nop
 800c5ec:	0801109d 	.word	0x0801109d

0800c5f0 <_strtol_r>:
 800c5f0:	f7ff bf7c 	b.w	800c4ec <_strtol_l.constprop.0>

0800c5f4 <strtol>:
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	460a      	mov	r2, r1
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	4802      	ldr	r0, [pc, #8]	; (800c604 <strtol+0x10>)
 800c5fc:	6800      	ldr	r0, [r0, #0]
 800c5fe:	f7ff bf75 	b.w	800c4ec <_strtol_l.constprop.0>
 800c602:	bf00      	nop
 800c604:	2000006c 	.word	0x2000006c

0800c608 <__cvt>:
 800c608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c60c:	ec55 4b10 	vmov	r4, r5, d0
 800c610:	2d00      	cmp	r5, #0
 800c612:	460e      	mov	r6, r1
 800c614:	4619      	mov	r1, r3
 800c616:	462b      	mov	r3, r5
 800c618:	bfbb      	ittet	lt
 800c61a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c61e:	461d      	movlt	r5, r3
 800c620:	2300      	movge	r3, #0
 800c622:	232d      	movlt	r3, #45	; 0x2d
 800c624:	700b      	strb	r3, [r1, #0]
 800c626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c628:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c62c:	4691      	mov	r9, r2
 800c62e:	f023 0820 	bic.w	r8, r3, #32
 800c632:	bfbc      	itt	lt
 800c634:	4622      	movlt	r2, r4
 800c636:	4614      	movlt	r4, r2
 800c638:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c63c:	d005      	beq.n	800c64a <__cvt+0x42>
 800c63e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c642:	d100      	bne.n	800c646 <__cvt+0x3e>
 800c644:	3601      	adds	r6, #1
 800c646:	2102      	movs	r1, #2
 800c648:	e000      	b.n	800c64c <__cvt+0x44>
 800c64a:	2103      	movs	r1, #3
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	ab02      	add	r3, sp, #8
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	ec45 4b10 	vmov	d0, r4, r5
 800c658:	4653      	mov	r3, sl
 800c65a:	4632      	mov	r2, r6
 800c65c:	f001 f92c 	bl	800d8b8 <_dtoa_r>
 800c660:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c664:	4607      	mov	r7, r0
 800c666:	d102      	bne.n	800c66e <__cvt+0x66>
 800c668:	f019 0f01 	tst.w	r9, #1
 800c66c:	d022      	beq.n	800c6b4 <__cvt+0xac>
 800c66e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c672:	eb07 0906 	add.w	r9, r7, r6
 800c676:	d110      	bne.n	800c69a <__cvt+0x92>
 800c678:	783b      	ldrb	r3, [r7, #0]
 800c67a:	2b30      	cmp	r3, #48	; 0x30
 800c67c:	d10a      	bne.n	800c694 <__cvt+0x8c>
 800c67e:	2200      	movs	r2, #0
 800c680:	2300      	movs	r3, #0
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f4 fa1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c68a:	b918      	cbnz	r0, 800c694 <__cvt+0x8c>
 800c68c:	f1c6 0601 	rsb	r6, r6, #1
 800c690:	f8ca 6000 	str.w	r6, [sl]
 800c694:	f8da 3000 	ldr.w	r3, [sl]
 800c698:	4499      	add	r9, r3
 800c69a:	2200      	movs	r2, #0
 800c69c:	2300      	movs	r3, #0
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	f7f4 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6a6:	b108      	cbz	r0, 800c6ac <__cvt+0xa4>
 800c6a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c6ac:	2230      	movs	r2, #48	; 0x30
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	454b      	cmp	r3, r9
 800c6b2:	d307      	bcc.n	800c6c4 <__cvt+0xbc>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6b8:	1bdb      	subs	r3, r3, r7
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	b004      	add	sp, #16
 800c6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c4:	1c59      	adds	r1, r3, #1
 800c6c6:	9103      	str	r1, [sp, #12]
 800c6c8:	701a      	strb	r2, [r3, #0]
 800c6ca:	e7f0      	b.n	800c6ae <__cvt+0xa6>

0800c6cc <__exponent>:
 800c6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	bfb8      	it	lt
 800c6d4:	4249      	neglt	r1, r1
 800c6d6:	f803 2b02 	strb.w	r2, [r3], #2
 800c6da:	bfb4      	ite	lt
 800c6dc:	222d      	movlt	r2, #45	; 0x2d
 800c6de:	222b      	movge	r2, #43	; 0x2b
 800c6e0:	2909      	cmp	r1, #9
 800c6e2:	7042      	strb	r2, [r0, #1]
 800c6e4:	dd2a      	ble.n	800c73c <__exponent+0x70>
 800c6e6:	f10d 0207 	add.w	r2, sp, #7
 800c6ea:	4617      	mov	r7, r2
 800c6ec:	260a      	movs	r6, #10
 800c6ee:	4694      	mov	ip, r2
 800c6f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c6f4:	fb06 1415 	mls	r4, r6, r5, r1
 800c6f8:	3430      	adds	r4, #48	; 0x30
 800c6fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c6fe:	460c      	mov	r4, r1
 800c700:	2c63      	cmp	r4, #99	; 0x63
 800c702:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c706:	4629      	mov	r1, r5
 800c708:	dcf1      	bgt.n	800c6ee <__exponent+0x22>
 800c70a:	3130      	adds	r1, #48	; 0x30
 800c70c:	f1ac 0402 	sub.w	r4, ip, #2
 800c710:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c714:	1c41      	adds	r1, r0, #1
 800c716:	4622      	mov	r2, r4
 800c718:	42ba      	cmp	r2, r7
 800c71a:	d30a      	bcc.n	800c732 <__exponent+0x66>
 800c71c:	f10d 0209 	add.w	r2, sp, #9
 800c720:	eba2 020c 	sub.w	r2, r2, ip
 800c724:	42bc      	cmp	r4, r7
 800c726:	bf88      	it	hi
 800c728:	2200      	movhi	r2, #0
 800c72a:	4413      	add	r3, r2
 800c72c:	1a18      	subs	r0, r3, r0
 800c72e:	b003      	add	sp, #12
 800c730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c732:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c736:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c73a:	e7ed      	b.n	800c718 <__exponent+0x4c>
 800c73c:	2330      	movs	r3, #48	; 0x30
 800c73e:	3130      	adds	r1, #48	; 0x30
 800c740:	7083      	strb	r3, [r0, #2]
 800c742:	70c1      	strb	r1, [r0, #3]
 800c744:	1d03      	adds	r3, r0, #4
 800c746:	e7f1      	b.n	800c72c <__exponent+0x60>

0800c748 <_printf_float>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	ed2d 8b02 	vpush	{d8}
 800c750:	b08d      	sub	sp, #52	; 0x34
 800c752:	460c      	mov	r4, r1
 800c754:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c758:	4616      	mov	r6, r2
 800c75a:	461f      	mov	r7, r3
 800c75c:	4605      	mov	r5, r0
 800c75e:	f000 ff2f 	bl	800d5c0 <_localeconv_r>
 800c762:	f8d0 a000 	ldr.w	sl, [r0]
 800c766:	4650      	mov	r0, sl
 800c768:	f7f3 fd82 	bl	8000270 <strlen>
 800c76c:	2300      	movs	r3, #0
 800c76e:	930a      	str	r3, [sp, #40]	; 0x28
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	f8d8 3000 	ldr.w	r3, [r8]
 800c778:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c77c:	3307      	adds	r3, #7
 800c77e:	f023 0307 	bic.w	r3, r3, #7
 800c782:	f103 0208 	add.w	r2, r3, #8
 800c786:	f8c8 2000 	str.w	r2, [r8]
 800c78a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c78e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c792:	9307      	str	r3, [sp, #28]
 800c794:	f8cd 8018 	str.w	r8, [sp, #24]
 800c798:	ee08 0a10 	vmov	s16, r0
 800c79c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c7a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7a4:	4b9e      	ldr	r3, [pc, #632]	; (800ca20 <_printf_float+0x2d8>)
 800c7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7aa:	f7f4 f9bf 	bl	8000b2c <__aeabi_dcmpun>
 800c7ae:	bb88      	cbnz	r0, 800c814 <_printf_float+0xcc>
 800c7b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7b4:	4b9a      	ldr	r3, [pc, #616]	; (800ca20 <_printf_float+0x2d8>)
 800c7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7ba:	f7f4 f999 	bl	8000af0 <__aeabi_dcmple>
 800c7be:	bb48      	cbnz	r0, 800c814 <_printf_float+0xcc>
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	4649      	mov	r1, r9
 800c7c8:	f7f4 f988 	bl	8000adc <__aeabi_dcmplt>
 800c7cc:	b110      	cbz	r0, 800c7d4 <_printf_float+0x8c>
 800c7ce:	232d      	movs	r3, #45	; 0x2d
 800c7d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d4:	4a93      	ldr	r2, [pc, #588]	; (800ca24 <_printf_float+0x2dc>)
 800c7d6:	4b94      	ldr	r3, [pc, #592]	; (800ca28 <_printf_float+0x2e0>)
 800c7d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7dc:	bf94      	ite	ls
 800c7de:	4690      	movls	r8, r2
 800c7e0:	4698      	movhi	r8, r3
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	6123      	str	r3, [r4, #16]
 800c7e6:	9b05      	ldr	r3, [sp, #20]
 800c7e8:	f023 0304 	bic.w	r3, r3, #4
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	f04f 0900 	mov.w	r9, #0
 800c7f2:	9700      	str	r7, [sp, #0]
 800c7f4:	4633      	mov	r3, r6
 800c7f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f000 f9da 	bl	800cbb4 <_printf_common>
 800c800:	3001      	adds	r0, #1
 800c802:	f040 8090 	bne.w	800c926 <_printf_float+0x1de>
 800c806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c80a:	b00d      	add	sp, #52	; 0x34
 800c80c:	ecbd 8b02 	vpop	{d8}
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	4642      	mov	r2, r8
 800c816:	464b      	mov	r3, r9
 800c818:	4640      	mov	r0, r8
 800c81a:	4649      	mov	r1, r9
 800c81c:	f7f4 f986 	bl	8000b2c <__aeabi_dcmpun>
 800c820:	b140      	cbz	r0, 800c834 <_printf_float+0xec>
 800c822:	464b      	mov	r3, r9
 800c824:	2b00      	cmp	r3, #0
 800c826:	bfbc      	itt	lt
 800c828:	232d      	movlt	r3, #45	; 0x2d
 800c82a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c82e:	4a7f      	ldr	r2, [pc, #508]	; (800ca2c <_printf_float+0x2e4>)
 800c830:	4b7f      	ldr	r3, [pc, #508]	; (800ca30 <_printf_float+0x2e8>)
 800c832:	e7d1      	b.n	800c7d8 <_printf_float+0x90>
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c83a:	9206      	str	r2, [sp, #24]
 800c83c:	1c5a      	adds	r2, r3, #1
 800c83e:	d13f      	bne.n	800c8c0 <_printf_float+0x178>
 800c840:	2306      	movs	r3, #6
 800c842:	6063      	str	r3, [r4, #4]
 800c844:	9b05      	ldr	r3, [sp, #20]
 800c846:	6861      	ldr	r1, [r4, #4]
 800c848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c84c:	2300      	movs	r3, #0
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	ab0a      	add	r3, sp, #40	; 0x28
 800c852:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c856:	ab09      	add	r3, sp, #36	; 0x24
 800c858:	ec49 8b10 	vmov	d0, r8, r9
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	6022      	str	r2, [r4, #0]
 800c860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c864:	4628      	mov	r0, r5
 800c866:	f7ff fecf 	bl	800c608 <__cvt>
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c86e:	2b47      	cmp	r3, #71	; 0x47
 800c870:	4680      	mov	r8, r0
 800c872:	d108      	bne.n	800c886 <_printf_float+0x13e>
 800c874:	1cc8      	adds	r0, r1, #3
 800c876:	db02      	blt.n	800c87e <_printf_float+0x136>
 800c878:	6863      	ldr	r3, [r4, #4]
 800c87a:	4299      	cmp	r1, r3
 800c87c:	dd41      	ble.n	800c902 <_printf_float+0x1ba>
 800c87e:	f1ab 0302 	sub.w	r3, fp, #2
 800c882:	fa5f fb83 	uxtb.w	fp, r3
 800c886:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c88a:	d820      	bhi.n	800c8ce <_printf_float+0x186>
 800c88c:	3901      	subs	r1, #1
 800c88e:	465a      	mov	r2, fp
 800c890:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c894:	9109      	str	r1, [sp, #36]	; 0x24
 800c896:	f7ff ff19 	bl	800c6cc <__exponent>
 800c89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c89c:	1813      	adds	r3, r2, r0
 800c89e:	2a01      	cmp	r2, #1
 800c8a0:	4681      	mov	r9, r0
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	dc02      	bgt.n	800c8ac <_printf_float+0x164>
 800c8a6:	6822      	ldr	r2, [r4, #0]
 800c8a8:	07d2      	lsls	r2, r2, #31
 800c8aa:	d501      	bpl.n	800c8b0 <_printf_float+0x168>
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	6123      	str	r3, [r4, #16]
 800c8b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d09c      	beq.n	800c7f2 <_printf_float+0xaa>
 800c8b8:	232d      	movs	r3, #45	; 0x2d
 800c8ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8be:	e798      	b.n	800c7f2 <_printf_float+0xaa>
 800c8c0:	9a06      	ldr	r2, [sp, #24]
 800c8c2:	2a47      	cmp	r2, #71	; 0x47
 800c8c4:	d1be      	bne.n	800c844 <_printf_float+0xfc>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1bc      	bne.n	800c844 <_printf_float+0xfc>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e7b9      	b.n	800c842 <_printf_float+0xfa>
 800c8ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8d2:	d118      	bne.n	800c906 <_printf_float+0x1be>
 800c8d4:	2900      	cmp	r1, #0
 800c8d6:	6863      	ldr	r3, [r4, #4]
 800c8d8:	dd0b      	ble.n	800c8f2 <_printf_float+0x1aa>
 800c8da:	6121      	str	r1, [r4, #16]
 800c8dc:	b913      	cbnz	r3, 800c8e4 <_printf_float+0x19c>
 800c8de:	6822      	ldr	r2, [r4, #0]
 800c8e0:	07d0      	lsls	r0, r2, #31
 800c8e2:	d502      	bpl.n	800c8ea <_printf_float+0x1a2>
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	440b      	add	r3, r1
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8ec:	f04f 0900 	mov.w	r9, #0
 800c8f0:	e7de      	b.n	800c8b0 <_printf_float+0x168>
 800c8f2:	b913      	cbnz	r3, 800c8fa <_printf_float+0x1b2>
 800c8f4:	6822      	ldr	r2, [r4, #0]
 800c8f6:	07d2      	lsls	r2, r2, #31
 800c8f8:	d501      	bpl.n	800c8fe <_printf_float+0x1b6>
 800c8fa:	3302      	adds	r3, #2
 800c8fc:	e7f4      	b.n	800c8e8 <_printf_float+0x1a0>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e7f2      	b.n	800c8e8 <_printf_float+0x1a0>
 800c902:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c908:	4299      	cmp	r1, r3
 800c90a:	db05      	blt.n	800c918 <_printf_float+0x1d0>
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	6121      	str	r1, [r4, #16]
 800c910:	07d8      	lsls	r0, r3, #31
 800c912:	d5ea      	bpl.n	800c8ea <_printf_float+0x1a2>
 800c914:	1c4b      	adds	r3, r1, #1
 800c916:	e7e7      	b.n	800c8e8 <_printf_float+0x1a0>
 800c918:	2900      	cmp	r1, #0
 800c91a:	bfd4      	ite	le
 800c91c:	f1c1 0202 	rsble	r2, r1, #2
 800c920:	2201      	movgt	r2, #1
 800c922:	4413      	add	r3, r2
 800c924:	e7e0      	b.n	800c8e8 <_printf_float+0x1a0>
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	055a      	lsls	r2, r3, #21
 800c92a:	d407      	bmi.n	800c93c <_printf_float+0x1f4>
 800c92c:	6923      	ldr	r3, [r4, #16]
 800c92e:	4642      	mov	r2, r8
 800c930:	4631      	mov	r1, r6
 800c932:	4628      	mov	r0, r5
 800c934:	47b8      	blx	r7
 800c936:	3001      	adds	r0, #1
 800c938:	d12c      	bne.n	800c994 <_printf_float+0x24c>
 800c93a:	e764      	b.n	800c806 <_printf_float+0xbe>
 800c93c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c940:	f240 80e0 	bls.w	800cb04 <_printf_float+0x3bc>
 800c944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c948:	2200      	movs	r2, #0
 800c94a:	2300      	movs	r3, #0
 800c94c:	f7f4 f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c950:	2800      	cmp	r0, #0
 800c952:	d034      	beq.n	800c9be <_printf_float+0x276>
 800c954:	4a37      	ldr	r2, [pc, #220]	; (800ca34 <_printf_float+0x2ec>)
 800c956:	2301      	movs	r3, #1
 800c958:	4631      	mov	r1, r6
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b8      	blx	r7
 800c95e:	3001      	adds	r0, #1
 800c960:	f43f af51 	beq.w	800c806 <_printf_float+0xbe>
 800c964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c968:	429a      	cmp	r2, r3
 800c96a:	db02      	blt.n	800c972 <_printf_float+0x22a>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	07d8      	lsls	r0, r3, #31
 800c970:	d510      	bpl.n	800c994 <_printf_float+0x24c>
 800c972:	ee18 3a10 	vmov	r3, s16
 800c976:	4652      	mov	r2, sl
 800c978:	4631      	mov	r1, r6
 800c97a:	4628      	mov	r0, r5
 800c97c:	47b8      	blx	r7
 800c97e:	3001      	adds	r0, #1
 800c980:	f43f af41 	beq.w	800c806 <_printf_float+0xbe>
 800c984:	f04f 0800 	mov.w	r8, #0
 800c988:	f104 091a 	add.w	r9, r4, #26
 800c98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c98e:	3b01      	subs	r3, #1
 800c990:	4543      	cmp	r3, r8
 800c992:	dc09      	bgt.n	800c9a8 <_printf_float+0x260>
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	079b      	lsls	r3, r3, #30
 800c998:	f100 8107 	bmi.w	800cbaa <_printf_float+0x462>
 800c99c:	68e0      	ldr	r0, [r4, #12]
 800c99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9a0:	4298      	cmp	r0, r3
 800c9a2:	bfb8      	it	lt
 800c9a4:	4618      	movlt	r0, r3
 800c9a6:	e730      	b.n	800c80a <_printf_float+0xc2>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	464a      	mov	r2, r9
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	47b8      	blx	r7
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	f43f af27 	beq.w	800c806 <_printf_float+0xbe>
 800c9b8:	f108 0801 	add.w	r8, r8, #1
 800c9bc:	e7e6      	b.n	800c98c <_printf_float+0x244>
 800c9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	dc39      	bgt.n	800ca38 <_printf_float+0x2f0>
 800c9c4:	4a1b      	ldr	r2, [pc, #108]	; (800ca34 <_printf_float+0x2ec>)
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4631      	mov	r1, r6
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	47b8      	blx	r7
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	f43f af19 	beq.w	800c806 <_printf_float+0xbe>
 800c9d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	d102      	bne.n	800c9e2 <_printf_float+0x29a>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	07d9      	lsls	r1, r3, #31
 800c9e0:	d5d8      	bpl.n	800c994 <_printf_float+0x24c>
 800c9e2:	ee18 3a10 	vmov	r3, s16
 800c9e6:	4652      	mov	r2, sl
 800c9e8:	4631      	mov	r1, r6
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	47b8      	blx	r7
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	f43f af09 	beq.w	800c806 <_printf_float+0xbe>
 800c9f4:	f04f 0900 	mov.w	r9, #0
 800c9f8:	f104 0a1a 	add.w	sl, r4, #26
 800c9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fe:	425b      	negs	r3, r3
 800ca00:	454b      	cmp	r3, r9
 800ca02:	dc01      	bgt.n	800ca08 <_printf_float+0x2c0>
 800ca04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca06:	e792      	b.n	800c92e <_printf_float+0x1e6>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	4652      	mov	r2, sl
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4628      	mov	r0, r5
 800ca10:	47b8      	blx	r7
 800ca12:	3001      	adds	r0, #1
 800ca14:	f43f aef7 	beq.w	800c806 <_printf_float+0xbe>
 800ca18:	f109 0901 	add.w	r9, r9, #1
 800ca1c:	e7ee      	b.n	800c9fc <_printf_float+0x2b4>
 800ca1e:	bf00      	nop
 800ca20:	7fefffff 	.word	0x7fefffff
 800ca24:	0801119d 	.word	0x0801119d
 800ca28:	080111a1 	.word	0x080111a1
 800ca2c:	080111a5 	.word	0x080111a5
 800ca30:	080111a9 	.word	0x080111a9
 800ca34:	080111ad 	.word	0x080111ad
 800ca38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	bfa8      	it	ge
 800ca40:	461a      	movge	r2, r3
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	4691      	mov	r9, r2
 800ca46:	dc37      	bgt.n	800cab8 <_printf_float+0x370>
 800ca48:	f04f 0b00 	mov.w	fp, #0
 800ca4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca50:	f104 021a 	add.w	r2, r4, #26
 800ca54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca56:	9305      	str	r3, [sp, #20]
 800ca58:	eba3 0309 	sub.w	r3, r3, r9
 800ca5c:	455b      	cmp	r3, fp
 800ca5e:	dc33      	bgt.n	800cac8 <_printf_float+0x380>
 800ca60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca64:	429a      	cmp	r2, r3
 800ca66:	db3b      	blt.n	800cae0 <_printf_float+0x398>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	07da      	lsls	r2, r3, #31
 800ca6c:	d438      	bmi.n	800cae0 <_printf_float+0x398>
 800ca6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca72:	eba2 0903 	sub.w	r9, r2, r3
 800ca76:	9b05      	ldr	r3, [sp, #20]
 800ca78:	1ad2      	subs	r2, r2, r3
 800ca7a:	4591      	cmp	r9, r2
 800ca7c:	bfa8      	it	ge
 800ca7e:	4691      	movge	r9, r2
 800ca80:	f1b9 0f00 	cmp.w	r9, #0
 800ca84:	dc35      	bgt.n	800caf2 <_printf_float+0x3aa>
 800ca86:	f04f 0800 	mov.w	r8, #0
 800ca8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca8e:	f104 0a1a 	add.w	sl, r4, #26
 800ca92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca96:	1a9b      	subs	r3, r3, r2
 800ca98:	eba3 0309 	sub.w	r3, r3, r9
 800ca9c:	4543      	cmp	r3, r8
 800ca9e:	f77f af79 	ble.w	800c994 <_printf_float+0x24c>
 800caa2:	2301      	movs	r3, #1
 800caa4:	4652      	mov	r2, sl
 800caa6:	4631      	mov	r1, r6
 800caa8:	4628      	mov	r0, r5
 800caaa:	47b8      	blx	r7
 800caac:	3001      	adds	r0, #1
 800caae:	f43f aeaa 	beq.w	800c806 <_printf_float+0xbe>
 800cab2:	f108 0801 	add.w	r8, r8, #1
 800cab6:	e7ec      	b.n	800ca92 <_printf_float+0x34a>
 800cab8:	4613      	mov	r3, r2
 800caba:	4631      	mov	r1, r6
 800cabc:	4642      	mov	r2, r8
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	d1c0      	bne.n	800ca48 <_printf_float+0x300>
 800cac6:	e69e      	b.n	800c806 <_printf_float+0xbe>
 800cac8:	2301      	movs	r3, #1
 800caca:	4631      	mov	r1, r6
 800cacc:	4628      	mov	r0, r5
 800cace:	9205      	str	r2, [sp, #20]
 800cad0:	47b8      	blx	r7
 800cad2:	3001      	adds	r0, #1
 800cad4:	f43f ae97 	beq.w	800c806 <_printf_float+0xbe>
 800cad8:	9a05      	ldr	r2, [sp, #20]
 800cada:	f10b 0b01 	add.w	fp, fp, #1
 800cade:	e7b9      	b.n	800ca54 <_printf_float+0x30c>
 800cae0:	ee18 3a10 	vmov	r3, s16
 800cae4:	4652      	mov	r2, sl
 800cae6:	4631      	mov	r1, r6
 800cae8:	4628      	mov	r0, r5
 800caea:	47b8      	blx	r7
 800caec:	3001      	adds	r0, #1
 800caee:	d1be      	bne.n	800ca6e <_printf_float+0x326>
 800caf0:	e689      	b.n	800c806 <_printf_float+0xbe>
 800caf2:	9a05      	ldr	r2, [sp, #20]
 800caf4:	464b      	mov	r3, r9
 800caf6:	4442      	add	r2, r8
 800caf8:	4631      	mov	r1, r6
 800cafa:	4628      	mov	r0, r5
 800cafc:	47b8      	blx	r7
 800cafe:	3001      	adds	r0, #1
 800cb00:	d1c1      	bne.n	800ca86 <_printf_float+0x33e>
 800cb02:	e680      	b.n	800c806 <_printf_float+0xbe>
 800cb04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb06:	2a01      	cmp	r2, #1
 800cb08:	dc01      	bgt.n	800cb0e <_printf_float+0x3c6>
 800cb0a:	07db      	lsls	r3, r3, #31
 800cb0c:	d53a      	bpl.n	800cb84 <_printf_float+0x43c>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	4642      	mov	r2, r8
 800cb12:	4631      	mov	r1, r6
 800cb14:	4628      	mov	r0, r5
 800cb16:	47b8      	blx	r7
 800cb18:	3001      	adds	r0, #1
 800cb1a:	f43f ae74 	beq.w	800c806 <_printf_float+0xbe>
 800cb1e:	ee18 3a10 	vmov	r3, s16
 800cb22:	4652      	mov	r2, sl
 800cb24:	4631      	mov	r1, r6
 800cb26:	4628      	mov	r0, r5
 800cb28:	47b8      	blx	r7
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	f43f ae6b 	beq.w	800c806 <_printf_float+0xbe>
 800cb30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb34:	2200      	movs	r2, #0
 800cb36:	2300      	movs	r3, #0
 800cb38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cb3c:	f7f3 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb40:	b9d8      	cbnz	r0, 800cb7a <_printf_float+0x432>
 800cb42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cb46:	f108 0201 	add.w	r2, r8, #1
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b8      	blx	r7
 800cb50:	3001      	adds	r0, #1
 800cb52:	d10e      	bne.n	800cb72 <_printf_float+0x42a>
 800cb54:	e657      	b.n	800c806 <_printf_float+0xbe>
 800cb56:	2301      	movs	r3, #1
 800cb58:	4652      	mov	r2, sl
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b8      	blx	r7
 800cb60:	3001      	adds	r0, #1
 800cb62:	f43f ae50 	beq.w	800c806 <_printf_float+0xbe>
 800cb66:	f108 0801 	add.w	r8, r8, #1
 800cb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	4543      	cmp	r3, r8
 800cb70:	dcf1      	bgt.n	800cb56 <_printf_float+0x40e>
 800cb72:	464b      	mov	r3, r9
 800cb74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb78:	e6da      	b.n	800c930 <_printf_float+0x1e8>
 800cb7a:	f04f 0800 	mov.w	r8, #0
 800cb7e:	f104 0a1a 	add.w	sl, r4, #26
 800cb82:	e7f2      	b.n	800cb6a <_printf_float+0x422>
 800cb84:	2301      	movs	r3, #1
 800cb86:	4642      	mov	r2, r8
 800cb88:	e7df      	b.n	800cb4a <_printf_float+0x402>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	464a      	mov	r2, r9
 800cb8e:	4631      	mov	r1, r6
 800cb90:	4628      	mov	r0, r5
 800cb92:	47b8      	blx	r7
 800cb94:	3001      	adds	r0, #1
 800cb96:	f43f ae36 	beq.w	800c806 <_printf_float+0xbe>
 800cb9a:	f108 0801 	add.w	r8, r8, #1
 800cb9e:	68e3      	ldr	r3, [r4, #12]
 800cba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cba2:	1a5b      	subs	r3, r3, r1
 800cba4:	4543      	cmp	r3, r8
 800cba6:	dcf0      	bgt.n	800cb8a <_printf_float+0x442>
 800cba8:	e6f8      	b.n	800c99c <_printf_float+0x254>
 800cbaa:	f04f 0800 	mov.w	r8, #0
 800cbae:	f104 0919 	add.w	r9, r4, #25
 800cbb2:	e7f4      	b.n	800cb9e <_printf_float+0x456>

0800cbb4 <_printf_common>:
 800cbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb8:	4616      	mov	r6, r2
 800cbba:	4699      	mov	r9, r3
 800cbbc:	688a      	ldr	r2, [r1, #8]
 800cbbe:	690b      	ldr	r3, [r1, #16]
 800cbc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	bfb8      	it	lt
 800cbc8:	4613      	movlt	r3, r2
 800cbca:	6033      	str	r3, [r6, #0]
 800cbcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	b10a      	cbz	r2, 800cbda <_printf_common+0x26>
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	6033      	str	r3, [r6, #0]
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	0699      	lsls	r1, r3, #26
 800cbde:	bf42      	ittt	mi
 800cbe0:	6833      	ldrmi	r3, [r6, #0]
 800cbe2:	3302      	addmi	r3, #2
 800cbe4:	6033      	strmi	r3, [r6, #0]
 800cbe6:	6825      	ldr	r5, [r4, #0]
 800cbe8:	f015 0506 	ands.w	r5, r5, #6
 800cbec:	d106      	bne.n	800cbfc <_printf_common+0x48>
 800cbee:	f104 0a19 	add.w	sl, r4, #25
 800cbf2:	68e3      	ldr	r3, [r4, #12]
 800cbf4:	6832      	ldr	r2, [r6, #0]
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	42ab      	cmp	r3, r5
 800cbfa:	dc26      	bgt.n	800cc4a <_printf_common+0x96>
 800cbfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc00:	1e13      	subs	r3, r2, #0
 800cc02:	6822      	ldr	r2, [r4, #0]
 800cc04:	bf18      	it	ne
 800cc06:	2301      	movne	r3, #1
 800cc08:	0692      	lsls	r2, r2, #26
 800cc0a:	d42b      	bmi.n	800cc64 <_printf_common+0xb0>
 800cc0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc10:	4649      	mov	r1, r9
 800cc12:	4638      	mov	r0, r7
 800cc14:	47c0      	blx	r8
 800cc16:	3001      	adds	r0, #1
 800cc18:	d01e      	beq.n	800cc58 <_printf_common+0xa4>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	6922      	ldr	r2, [r4, #16]
 800cc1e:	f003 0306 	and.w	r3, r3, #6
 800cc22:	2b04      	cmp	r3, #4
 800cc24:	bf02      	ittt	eq
 800cc26:	68e5      	ldreq	r5, [r4, #12]
 800cc28:	6833      	ldreq	r3, [r6, #0]
 800cc2a:	1aed      	subeq	r5, r5, r3
 800cc2c:	68a3      	ldr	r3, [r4, #8]
 800cc2e:	bf0c      	ite	eq
 800cc30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc34:	2500      	movne	r5, #0
 800cc36:	4293      	cmp	r3, r2
 800cc38:	bfc4      	itt	gt
 800cc3a:	1a9b      	subgt	r3, r3, r2
 800cc3c:	18ed      	addgt	r5, r5, r3
 800cc3e:	2600      	movs	r6, #0
 800cc40:	341a      	adds	r4, #26
 800cc42:	42b5      	cmp	r5, r6
 800cc44:	d11a      	bne.n	800cc7c <_printf_common+0xc8>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e008      	b.n	800cc5c <_printf_common+0xa8>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	4652      	mov	r2, sl
 800cc4e:	4649      	mov	r1, r9
 800cc50:	4638      	mov	r0, r7
 800cc52:	47c0      	blx	r8
 800cc54:	3001      	adds	r0, #1
 800cc56:	d103      	bne.n	800cc60 <_printf_common+0xac>
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc60:	3501      	adds	r5, #1
 800cc62:	e7c6      	b.n	800cbf2 <_printf_common+0x3e>
 800cc64:	18e1      	adds	r1, r4, r3
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	2030      	movs	r0, #48	; 0x30
 800cc6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc6e:	4422      	add	r2, r4
 800cc70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc78:	3302      	adds	r3, #2
 800cc7a:	e7c7      	b.n	800cc0c <_printf_common+0x58>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4649      	mov	r1, r9
 800cc82:	4638      	mov	r0, r7
 800cc84:	47c0      	blx	r8
 800cc86:	3001      	adds	r0, #1
 800cc88:	d0e6      	beq.n	800cc58 <_printf_common+0xa4>
 800cc8a:	3601      	adds	r6, #1
 800cc8c:	e7d9      	b.n	800cc42 <_printf_common+0x8e>
	...

0800cc90 <_printf_i>:
 800cc90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc94:	7e0f      	ldrb	r7, [r1, #24]
 800cc96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc98:	2f78      	cmp	r7, #120	; 0x78
 800cc9a:	4691      	mov	r9, r2
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	469a      	mov	sl, r3
 800cca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cca6:	d807      	bhi.n	800ccb8 <_printf_i+0x28>
 800cca8:	2f62      	cmp	r7, #98	; 0x62
 800ccaa:	d80a      	bhi.n	800ccc2 <_printf_i+0x32>
 800ccac:	2f00      	cmp	r7, #0
 800ccae:	f000 80d4 	beq.w	800ce5a <_printf_i+0x1ca>
 800ccb2:	2f58      	cmp	r7, #88	; 0x58
 800ccb4:	f000 80c0 	beq.w	800ce38 <_printf_i+0x1a8>
 800ccb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccc0:	e03a      	b.n	800cd38 <_printf_i+0xa8>
 800ccc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccc6:	2b15      	cmp	r3, #21
 800ccc8:	d8f6      	bhi.n	800ccb8 <_printf_i+0x28>
 800ccca:	a101      	add	r1, pc, #4	; (adr r1, 800ccd0 <_printf_i+0x40>)
 800cccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ccd0:	0800cd29 	.word	0x0800cd29
 800ccd4:	0800cd3d 	.word	0x0800cd3d
 800ccd8:	0800ccb9 	.word	0x0800ccb9
 800ccdc:	0800ccb9 	.word	0x0800ccb9
 800cce0:	0800ccb9 	.word	0x0800ccb9
 800cce4:	0800ccb9 	.word	0x0800ccb9
 800cce8:	0800cd3d 	.word	0x0800cd3d
 800ccec:	0800ccb9 	.word	0x0800ccb9
 800ccf0:	0800ccb9 	.word	0x0800ccb9
 800ccf4:	0800ccb9 	.word	0x0800ccb9
 800ccf8:	0800ccb9 	.word	0x0800ccb9
 800ccfc:	0800ce41 	.word	0x0800ce41
 800cd00:	0800cd69 	.word	0x0800cd69
 800cd04:	0800cdfb 	.word	0x0800cdfb
 800cd08:	0800ccb9 	.word	0x0800ccb9
 800cd0c:	0800ccb9 	.word	0x0800ccb9
 800cd10:	0800ce63 	.word	0x0800ce63
 800cd14:	0800ccb9 	.word	0x0800ccb9
 800cd18:	0800cd69 	.word	0x0800cd69
 800cd1c:	0800ccb9 	.word	0x0800ccb9
 800cd20:	0800ccb9 	.word	0x0800ccb9
 800cd24:	0800ce03 	.word	0x0800ce03
 800cd28:	682b      	ldr	r3, [r5, #0]
 800cd2a:	1d1a      	adds	r2, r3, #4
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	602a      	str	r2, [r5, #0]
 800cd30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e09f      	b.n	800ce7c <_printf_i+0x1ec>
 800cd3c:	6820      	ldr	r0, [r4, #0]
 800cd3e:	682b      	ldr	r3, [r5, #0]
 800cd40:	0607      	lsls	r7, r0, #24
 800cd42:	f103 0104 	add.w	r1, r3, #4
 800cd46:	6029      	str	r1, [r5, #0]
 800cd48:	d501      	bpl.n	800cd4e <_printf_i+0xbe>
 800cd4a:	681e      	ldr	r6, [r3, #0]
 800cd4c:	e003      	b.n	800cd56 <_printf_i+0xc6>
 800cd4e:	0646      	lsls	r6, r0, #25
 800cd50:	d5fb      	bpl.n	800cd4a <_printf_i+0xba>
 800cd52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd56:	2e00      	cmp	r6, #0
 800cd58:	da03      	bge.n	800cd62 <_printf_i+0xd2>
 800cd5a:	232d      	movs	r3, #45	; 0x2d
 800cd5c:	4276      	negs	r6, r6
 800cd5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd62:	485a      	ldr	r0, [pc, #360]	; (800cecc <_printf_i+0x23c>)
 800cd64:	230a      	movs	r3, #10
 800cd66:	e012      	b.n	800cd8e <_printf_i+0xfe>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	6820      	ldr	r0, [r4, #0]
 800cd6c:	1d19      	adds	r1, r3, #4
 800cd6e:	6029      	str	r1, [r5, #0]
 800cd70:	0605      	lsls	r5, r0, #24
 800cd72:	d501      	bpl.n	800cd78 <_printf_i+0xe8>
 800cd74:	681e      	ldr	r6, [r3, #0]
 800cd76:	e002      	b.n	800cd7e <_printf_i+0xee>
 800cd78:	0641      	lsls	r1, r0, #25
 800cd7a:	d5fb      	bpl.n	800cd74 <_printf_i+0xe4>
 800cd7c:	881e      	ldrh	r6, [r3, #0]
 800cd7e:	4853      	ldr	r0, [pc, #332]	; (800cecc <_printf_i+0x23c>)
 800cd80:	2f6f      	cmp	r7, #111	; 0x6f
 800cd82:	bf0c      	ite	eq
 800cd84:	2308      	moveq	r3, #8
 800cd86:	230a      	movne	r3, #10
 800cd88:	2100      	movs	r1, #0
 800cd8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd8e:	6865      	ldr	r5, [r4, #4]
 800cd90:	60a5      	str	r5, [r4, #8]
 800cd92:	2d00      	cmp	r5, #0
 800cd94:	bfa2      	ittt	ge
 800cd96:	6821      	ldrge	r1, [r4, #0]
 800cd98:	f021 0104 	bicge.w	r1, r1, #4
 800cd9c:	6021      	strge	r1, [r4, #0]
 800cd9e:	b90e      	cbnz	r6, 800cda4 <_printf_i+0x114>
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	d04b      	beq.n	800ce3c <_printf_i+0x1ac>
 800cda4:	4615      	mov	r5, r2
 800cda6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdaa:	fb03 6711 	mls	r7, r3, r1, r6
 800cdae:	5dc7      	ldrb	r7, [r0, r7]
 800cdb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cdb4:	4637      	mov	r7, r6
 800cdb6:	42bb      	cmp	r3, r7
 800cdb8:	460e      	mov	r6, r1
 800cdba:	d9f4      	bls.n	800cda6 <_printf_i+0x116>
 800cdbc:	2b08      	cmp	r3, #8
 800cdbe:	d10b      	bne.n	800cdd8 <_printf_i+0x148>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	07de      	lsls	r6, r3, #31
 800cdc4:	d508      	bpl.n	800cdd8 <_printf_i+0x148>
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	6861      	ldr	r1, [r4, #4]
 800cdca:	4299      	cmp	r1, r3
 800cdcc:	bfde      	ittt	le
 800cdce:	2330      	movle	r3, #48	; 0x30
 800cdd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cdd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cdd8:	1b52      	subs	r2, r2, r5
 800cdda:	6122      	str	r2, [r4, #16]
 800cddc:	f8cd a000 	str.w	sl, [sp]
 800cde0:	464b      	mov	r3, r9
 800cde2:	aa03      	add	r2, sp, #12
 800cde4:	4621      	mov	r1, r4
 800cde6:	4640      	mov	r0, r8
 800cde8:	f7ff fee4 	bl	800cbb4 <_printf_common>
 800cdec:	3001      	adds	r0, #1
 800cdee:	d14a      	bne.n	800ce86 <_printf_i+0x1f6>
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdf4:	b004      	add	sp, #16
 800cdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	f043 0320 	orr.w	r3, r3, #32
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	4833      	ldr	r0, [pc, #204]	; (800ced0 <_printf_i+0x240>)
 800ce04:	2778      	movs	r7, #120	; 0x78
 800ce06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	6829      	ldr	r1, [r5, #0]
 800ce0e:	061f      	lsls	r7, r3, #24
 800ce10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce14:	d402      	bmi.n	800ce1c <_printf_i+0x18c>
 800ce16:	065f      	lsls	r7, r3, #25
 800ce18:	bf48      	it	mi
 800ce1a:	b2b6      	uxthmi	r6, r6
 800ce1c:	07df      	lsls	r7, r3, #31
 800ce1e:	bf48      	it	mi
 800ce20:	f043 0320 	orrmi.w	r3, r3, #32
 800ce24:	6029      	str	r1, [r5, #0]
 800ce26:	bf48      	it	mi
 800ce28:	6023      	strmi	r3, [r4, #0]
 800ce2a:	b91e      	cbnz	r6, 800ce34 <_printf_i+0x1a4>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	f023 0320 	bic.w	r3, r3, #32
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	2310      	movs	r3, #16
 800ce36:	e7a7      	b.n	800cd88 <_printf_i+0xf8>
 800ce38:	4824      	ldr	r0, [pc, #144]	; (800cecc <_printf_i+0x23c>)
 800ce3a:	e7e4      	b.n	800ce06 <_printf_i+0x176>
 800ce3c:	4615      	mov	r5, r2
 800ce3e:	e7bd      	b.n	800cdbc <_printf_i+0x12c>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	6826      	ldr	r6, [r4, #0]
 800ce44:	6961      	ldr	r1, [r4, #20]
 800ce46:	1d18      	adds	r0, r3, #4
 800ce48:	6028      	str	r0, [r5, #0]
 800ce4a:	0635      	lsls	r5, r6, #24
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	d501      	bpl.n	800ce54 <_printf_i+0x1c4>
 800ce50:	6019      	str	r1, [r3, #0]
 800ce52:	e002      	b.n	800ce5a <_printf_i+0x1ca>
 800ce54:	0670      	lsls	r0, r6, #25
 800ce56:	d5fb      	bpl.n	800ce50 <_printf_i+0x1c0>
 800ce58:	8019      	strh	r1, [r3, #0]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	6123      	str	r3, [r4, #16]
 800ce5e:	4615      	mov	r5, r2
 800ce60:	e7bc      	b.n	800cddc <_printf_i+0x14c>
 800ce62:	682b      	ldr	r3, [r5, #0]
 800ce64:	1d1a      	adds	r2, r3, #4
 800ce66:	602a      	str	r2, [r5, #0]
 800ce68:	681d      	ldr	r5, [r3, #0]
 800ce6a:	6862      	ldr	r2, [r4, #4]
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f7f3 f9ae 	bl	80001d0 <memchr>
 800ce74:	b108      	cbz	r0, 800ce7a <_printf_i+0x1ea>
 800ce76:	1b40      	subs	r0, r0, r5
 800ce78:	6060      	str	r0, [r4, #4]
 800ce7a:	6863      	ldr	r3, [r4, #4]
 800ce7c:	6123      	str	r3, [r4, #16]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce84:	e7aa      	b.n	800cddc <_printf_i+0x14c>
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	462a      	mov	r2, r5
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	47d0      	blx	sl
 800ce90:	3001      	adds	r0, #1
 800ce92:	d0ad      	beq.n	800cdf0 <_printf_i+0x160>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	079b      	lsls	r3, r3, #30
 800ce98:	d413      	bmi.n	800cec2 <_printf_i+0x232>
 800ce9a:	68e0      	ldr	r0, [r4, #12]
 800ce9c:	9b03      	ldr	r3, [sp, #12]
 800ce9e:	4298      	cmp	r0, r3
 800cea0:	bfb8      	it	lt
 800cea2:	4618      	movlt	r0, r3
 800cea4:	e7a6      	b.n	800cdf4 <_printf_i+0x164>
 800cea6:	2301      	movs	r3, #1
 800cea8:	4632      	mov	r2, r6
 800ceaa:	4649      	mov	r1, r9
 800ceac:	4640      	mov	r0, r8
 800ceae:	47d0      	blx	sl
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	d09d      	beq.n	800cdf0 <_printf_i+0x160>
 800ceb4:	3501      	adds	r5, #1
 800ceb6:	68e3      	ldr	r3, [r4, #12]
 800ceb8:	9903      	ldr	r1, [sp, #12]
 800ceba:	1a5b      	subs	r3, r3, r1
 800cebc:	42ab      	cmp	r3, r5
 800cebe:	dcf2      	bgt.n	800cea6 <_printf_i+0x216>
 800cec0:	e7eb      	b.n	800ce9a <_printf_i+0x20a>
 800cec2:	2500      	movs	r5, #0
 800cec4:	f104 0619 	add.w	r6, r4, #25
 800cec8:	e7f5      	b.n	800ceb6 <_printf_i+0x226>
 800ceca:	bf00      	nop
 800cecc:	080111af 	.word	0x080111af
 800ced0:	080111c0 	.word	0x080111c0

0800ced4 <_scanf_float>:
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	b087      	sub	sp, #28
 800ceda:	4617      	mov	r7, r2
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	688b      	ldr	r3, [r1, #8]
 800cee0:	1e5a      	subs	r2, r3, #1
 800cee2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cee6:	bf83      	ittte	hi
 800cee8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ceec:	195b      	addhi	r3, r3, r5
 800ceee:	9302      	strhi	r3, [sp, #8]
 800cef0:	2300      	movls	r3, #0
 800cef2:	bf86      	itte	hi
 800cef4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cef8:	608b      	strhi	r3, [r1, #8]
 800cefa:	9302      	strls	r3, [sp, #8]
 800cefc:	680b      	ldr	r3, [r1, #0]
 800cefe:	468b      	mov	fp, r1
 800cf00:	2500      	movs	r5, #0
 800cf02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cf06:	f84b 3b1c 	str.w	r3, [fp], #28
 800cf0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf0e:	4680      	mov	r8, r0
 800cf10:	460c      	mov	r4, r1
 800cf12:	465e      	mov	r6, fp
 800cf14:	46aa      	mov	sl, r5
 800cf16:	46a9      	mov	r9, r5
 800cf18:	9501      	str	r5, [sp, #4]
 800cf1a:	68a2      	ldr	r2, [r4, #8]
 800cf1c:	b152      	cbz	r2, 800cf34 <_scanf_float+0x60>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b4e      	cmp	r3, #78	; 0x4e
 800cf24:	d864      	bhi.n	800cff0 <_scanf_float+0x11c>
 800cf26:	2b40      	cmp	r3, #64	; 0x40
 800cf28:	d83c      	bhi.n	800cfa4 <_scanf_float+0xd0>
 800cf2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cf2e:	b2c8      	uxtb	r0, r1
 800cf30:	280e      	cmp	r0, #14
 800cf32:	d93a      	bls.n	800cfaa <_scanf_float+0xd6>
 800cf34:	f1b9 0f00 	cmp.w	r9, #0
 800cf38:	d003      	beq.n	800cf42 <_scanf_float+0x6e>
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cf46:	f1ba 0f01 	cmp.w	sl, #1
 800cf4a:	f200 8113 	bhi.w	800d174 <_scanf_float+0x2a0>
 800cf4e:	455e      	cmp	r6, fp
 800cf50:	f200 8105 	bhi.w	800d15e <_scanf_float+0x28a>
 800cf54:	2501      	movs	r5, #1
 800cf56:	4628      	mov	r0, r5
 800cf58:	b007      	add	sp, #28
 800cf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cf62:	2a0d      	cmp	r2, #13
 800cf64:	d8e6      	bhi.n	800cf34 <_scanf_float+0x60>
 800cf66:	a101      	add	r1, pc, #4	; (adr r1, 800cf6c <_scanf_float+0x98>)
 800cf68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf6c:	0800d0ab 	.word	0x0800d0ab
 800cf70:	0800cf35 	.word	0x0800cf35
 800cf74:	0800cf35 	.word	0x0800cf35
 800cf78:	0800cf35 	.word	0x0800cf35
 800cf7c:	0800d10b 	.word	0x0800d10b
 800cf80:	0800d0e3 	.word	0x0800d0e3
 800cf84:	0800cf35 	.word	0x0800cf35
 800cf88:	0800cf35 	.word	0x0800cf35
 800cf8c:	0800d0b9 	.word	0x0800d0b9
 800cf90:	0800cf35 	.word	0x0800cf35
 800cf94:	0800cf35 	.word	0x0800cf35
 800cf98:	0800cf35 	.word	0x0800cf35
 800cf9c:	0800cf35 	.word	0x0800cf35
 800cfa0:	0800d071 	.word	0x0800d071
 800cfa4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cfa8:	e7db      	b.n	800cf62 <_scanf_float+0x8e>
 800cfaa:	290e      	cmp	r1, #14
 800cfac:	d8c2      	bhi.n	800cf34 <_scanf_float+0x60>
 800cfae:	a001      	add	r0, pc, #4	; (adr r0, 800cfb4 <_scanf_float+0xe0>)
 800cfb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cfb4:	0800d063 	.word	0x0800d063
 800cfb8:	0800cf35 	.word	0x0800cf35
 800cfbc:	0800d063 	.word	0x0800d063
 800cfc0:	0800d0f7 	.word	0x0800d0f7
 800cfc4:	0800cf35 	.word	0x0800cf35
 800cfc8:	0800d011 	.word	0x0800d011
 800cfcc:	0800d04d 	.word	0x0800d04d
 800cfd0:	0800d04d 	.word	0x0800d04d
 800cfd4:	0800d04d 	.word	0x0800d04d
 800cfd8:	0800d04d 	.word	0x0800d04d
 800cfdc:	0800d04d 	.word	0x0800d04d
 800cfe0:	0800d04d 	.word	0x0800d04d
 800cfe4:	0800d04d 	.word	0x0800d04d
 800cfe8:	0800d04d 	.word	0x0800d04d
 800cfec:	0800d04d 	.word	0x0800d04d
 800cff0:	2b6e      	cmp	r3, #110	; 0x6e
 800cff2:	d809      	bhi.n	800d008 <_scanf_float+0x134>
 800cff4:	2b60      	cmp	r3, #96	; 0x60
 800cff6:	d8b2      	bhi.n	800cf5e <_scanf_float+0x8a>
 800cff8:	2b54      	cmp	r3, #84	; 0x54
 800cffa:	d077      	beq.n	800d0ec <_scanf_float+0x218>
 800cffc:	2b59      	cmp	r3, #89	; 0x59
 800cffe:	d199      	bne.n	800cf34 <_scanf_float+0x60>
 800d000:	2d07      	cmp	r5, #7
 800d002:	d197      	bne.n	800cf34 <_scanf_float+0x60>
 800d004:	2508      	movs	r5, #8
 800d006:	e029      	b.n	800d05c <_scanf_float+0x188>
 800d008:	2b74      	cmp	r3, #116	; 0x74
 800d00a:	d06f      	beq.n	800d0ec <_scanf_float+0x218>
 800d00c:	2b79      	cmp	r3, #121	; 0x79
 800d00e:	e7f6      	b.n	800cffe <_scanf_float+0x12a>
 800d010:	6821      	ldr	r1, [r4, #0]
 800d012:	05c8      	lsls	r0, r1, #23
 800d014:	d51a      	bpl.n	800d04c <_scanf_float+0x178>
 800d016:	9b02      	ldr	r3, [sp, #8]
 800d018:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d01c:	6021      	str	r1, [r4, #0]
 800d01e:	f109 0901 	add.w	r9, r9, #1
 800d022:	b11b      	cbz	r3, 800d02c <_scanf_float+0x158>
 800d024:	3b01      	subs	r3, #1
 800d026:	3201      	adds	r2, #1
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	60a2      	str	r2, [r4, #8]
 800d02c:	68a3      	ldr	r3, [r4, #8]
 800d02e:	3b01      	subs	r3, #1
 800d030:	60a3      	str	r3, [r4, #8]
 800d032:	6923      	ldr	r3, [r4, #16]
 800d034:	3301      	adds	r3, #1
 800d036:	6123      	str	r3, [r4, #16]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	607b      	str	r3, [r7, #4]
 800d040:	f340 8084 	ble.w	800d14c <_scanf_float+0x278>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	3301      	adds	r3, #1
 800d048:	603b      	str	r3, [r7, #0]
 800d04a:	e766      	b.n	800cf1a <_scanf_float+0x46>
 800d04c:	eb1a 0f05 	cmn.w	sl, r5
 800d050:	f47f af70 	bne.w	800cf34 <_scanf_float+0x60>
 800d054:	6822      	ldr	r2, [r4, #0]
 800d056:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d05a:	6022      	str	r2, [r4, #0]
 800d05c:	f806 3b01 	strb.w	r3, [r6], #1
 800d060:	e7e4      	b.n	800d02c <_scanf_float+0x158>
 800d062:	6822      	ldr	r2, [r4, #0]
 800d064:	0610      	lsls	r0, r2, #24
 800d066:	f57f af65 	bpl.w	800cf34 <_scanf_float+0x60>
 800d06a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d06e:	e7f4      	b.n	800d05a <_scanf_float+0x186>
 800d070:	f1ba 0f00 	cmp.w	sl, #0
 800d074:	d10e      	bne.n	800d094 <_scanf_float+0x1c0>
 800d076:	f1b9 0f00 	cmp.w	r9, #0
 800d07a:	d10e      	bne.n	800d09a <_scanf_float+0x1c6>
 800d07c:	6822      	ldr	r2, [r4, #0]
 800d07e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d082:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d086:	d108      	bne.n	800d09a <_scanf_float+0x1c6>
 800d088:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d08c:	6022      	str	r2, [r4, #0]
 800d08e:	f04f 0a01 	mov.w	sl, #1
 800d092:	e7e3      	b.n	800d05c <_scanf_float+0x188>
 800d094:	f1ba 0f02 	cmp.w	sl, #2
 800d098:	d055      	beq.n	800d146 <_scanf_float+0x272>
 800d09a:	2d01      	cmp	r5, #1
 800d09c:	d002      	beq.n	800d0a4 <_scanf_float+0x1d0>
 800d09e:	2d04      	cmp	r5, #4
 800d0a0:	f47f af48 	bne.w	800cf34 <_scanf_float+0x60>
 800d0a4:	3501      	adds	r5, #1
 800d0a6:	b2ed      	uxtb	r5, r5
 800d0a8:	e7d8      	b.n	800d05c <_scanf_float+0x188>
 800d0aa:	f1ba 0f01 	cmp.w	sl, #1
 800d0ae:	f47f af41 	bne.w	800cf34 <_scanf_float+0x60>
 800d0b2:	f04f 0a02 	mov.w	sl, #2
 800d0b6:	e7d1      	b.n	800d05c <_scanf_float+0x188>
 800d0b8:	b97d      	cbnz	r5, 800d0da <_scanf_float+0x206>
 800d0ba:	f1b9 0f00 	cmp.w	r9, #0
 800d0be:	f47f af3c 	bne.w	800cf3a <_scanf_float+0x66>
 800d0c2:	6822      	ldr	r2, [r4, #0]
 800d0c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0cc:	f47f af39 	bne.w	800cf42 <_scanf_float+0x6e>
 800d0d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0d4:	6022      	str	r2, [r4, #0]
 800d0d6:	2501      	movs	r5, #1
 800d0d8:	e7c0      	b.n	800d05c <_scanf_float+0x188>
 800d0da:	2d03      	cmp	r5, #3
 800d0dc:	d0e2      	beq.n	800d0a4 <_scanf_float+0x1d0>
 800d0de:	2d05      	cmp	r5, #5
 800d0e0:	e7de      	b.n	800d0a0 <_scanf_float+0x1cc>
 800d0e2:	2d02      	cmp	r5, #2
 800d0e4:	f47f af26 	bne.w	800cf34 <_scanf_float+0x60>
 800d0e8:	2503      	movs	r5, #3
 800d0ea:	e7b7      	b.n	800d05c <_scanf_float+0x188>
 800d0ec:	2d06      	cmp	r5, #6
 800d0ee:	f47f af21 	bne.w	800cf34 <_scanf_float+0x60>
 800d0f2:	2507      	movs	r5, #7
 800d0f4:	e7b2      	b.n	800d05c <_scanf_float+0x188>
 800d0f6:	6822      	ldr	r2, [r4, #0]
 800d0f8:	0591      	lsls	r1, r2, #22
 800d0fa:	f57f af1b 	bpl.w	800cf34 <_scanf_float+0x60>
 800d0fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d102:	6022      	str	r2, [r4, #0]
 800d104:	f8cd 9004 	str.w	r9, [sp, #4]
 800d108:	e7a8      	b.n	800d05c <_scanf_float+0x188>
 800d10a:	6822      	ldr	r2, [r4, #0]
 800d10c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d110:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d114:	d006      	beq.n	800d124 <_scanf_float+0x250>
 800d116:	0550      	lsls	r0, r2, #21
 800d118:	f57f af0c 	bpl.w	800cf34 <_scanf_float+0x60>
 800d11c:	f1b9 0f00 	cmp.w	r9, #0
 800d120:	f43f af0f 	beq.w	800cf42 <_scanf_float+0x6e>
 800d124:	0591      	lsls	r1, r2, #22
 800d126:	bf58      	it	pl
 800d128:	9901      	ldrpl	r1, [sp, #4]
 800d12a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d12e:	bf58      	it	pl
 800d130:	eba9 0101 	subpl.w	r1, r9, r1
 800d134:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d138:	bf58      	it	pl
 800d13a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d13e:	6022      	str	r2, [r4, #0]
 800d140:	f04f 0900 	mov.w	r9, #0
 800d144:	e78a      	b.n	800d05c <_scanf_float+0x188>
 800d146:	f04f 0a03 	mov.w	sl, #3
 800d14a:	e787      	b.n	800d05c <_scanf_float+0x188>
 800d14c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d150:	4639      	mov	r1, r7
 800d152:	4640      	mov	r0, r8
 800d154:	4798      	blx	r3
 800d156:	2800      	cmp	r0, #0
 800d158:	f43f aedf 	beq.w	800cf1a <_scanf_float+0x46>
 800d15c:	e6ea      	b.n	800cf34 <_scanf_float+0x60>
 800d15e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d166:	463a      	mov	r2, r7
 800d168:	4640      	mov	r0, r8
 800d16a:	4798      	blx	r3
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	3b01      	subs	r3, #1
 800d170:	6123      	str	r3, [r4, #16]
 800d172:	e6ec      	b.n	800cf4e <_scanf_float+0x7a>
 800d174:	1e6b      	subs	r3, r5, #1
 800d176:	2b06      	cmp	r3, #6
 800d178:	d825      	bhi.n	800d1c6 <_scanf_float+0x2f2>
 800d17a:	2d02      	cmp	r5, #2
 800d17c:	d836      	bhi.n	800d1ec <_scanf_float+0x318>
 800d17e:	455e      	cmp	r6, fp
 800d180:	f67f aee8 	bls.w	800cf54 <_scanf_float+0x80>
 800d184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d188:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d18c:	463a      	mov	r2, r7
 800d18e:	4640      	mov	r0, r8
 800d190:	4798      	blx	r3
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	3b01      	subs	r3, #1
 800d196:	6123      	str	r3, [r4, #16]
 800d198:	e7f1      	b.n	800d17e <_scanf_float+0x2aa>
 800d19a:	9802      	ldr	r0, [sp, #8]
 800d19c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d1a4:	9002      	str	r0, [sp, #8]
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4798      	blx	r3
 800d1ac:	6923      	ldr	r3, [r4, #16]
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	6123      	str	r3, [r4, #16]
 800d1b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d1b6:	fa5f fa8a 	uxtb.w	sl, sl
 800d1ba:	f1ba 0f02 	cmp.w	sl, #2
 800d1be:	d1ec      	bne.n	800d19a <_scanf_float+0x2c6>
 800d1c0:	3d03      	subs	r5, #3
 800d1c2:	b2ed      	uxtb	r5, r5
 800d1c4:	1b76      	subs	r6, r6, r5
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	05da      	lsls	r2, r3, #23
 800d1ca:	d52f      	bpl.n	800d22c <_scanf_float+0x358>
 800d1cc:	055b      	lsls	r3, r3, #21
 800d1ce:	d510      	bpl.n	800d1f2 <_scanf_float+0x31e>
 800d1d0:	455e      	cmp	r6, fp
 800d1d2:	f67f aebf 	bls.w	800cf54 <_scanf_float+0x80>
 800d1d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1de:	463a      	mov	r2, r7
 800d1e0:	4640      	mov	r0, r8
 800d1e2:	4798      	blx	r3
 800d1e4:	6923      	ldr	r3, [r4, #16]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	6123      	str	r3, [r4, #16]
 800d1ea:	e7f1      	b.n	800d1d0 <_scanf_float+0x2fc>
 800d1ec:	46aa      	mov	sl, r5
 800d1ee:	9602      	str	r6, [sp, #8]
 800d1f0:	e7df      	b.n	800d1b2 <_scanf_float+0x2de>
 800d1f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d1f6:	6923      	ldr	r3, [r4, #16]
 800d1f8:	2965      	cmp	r1, #101	; 0x65
 800d1fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d1fe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800d202:	6123      	str	r3, [r4, #16]
 800d204:	d00c      	beq.n	800d220 <_scanf_float+0x34c>
 800d206:	2945      	cmp	r1, #69	; 0x45
 800d208:	d00a      	beq.n	800d220 <_scanf_float+0x34c>
 800d20a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d20e:	463a      	mov	r2, r7
 800d210:	4640      	mov	r0, r8
 800d212:	4798      	blx	r3
 800d214:	6923      	ldr	r3, [r4, #16]
 800d216:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d21a:	3b01      	subs	r3, #1
 800d21c:	1eb5      	subs	r5, r6, #2
 800d21e:	6123      	str	r3, [r4, #16]
 800d220:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d224:	463a      	mov	r2, r7
 800d226:	4640      	mov	r0, r8
 800d228:	4798      	blx	r3
 800d22a:	462e      	mov	r6, r5
 800d22c:	6825      	ldr	r5, [r4, #0]
 800d22e:	f015 0510 	ands.w	r5, r5, #16
 800d232:	d158      	bne.n	800d2e6 <_scanf_float+0x412>
 800d234:	7035      	strb	r5, [r6, #0]
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d240:	d11c      	bne.n	800d27c <_scanf_float+0x3a8>
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	454b      	cmp	r3, r9
 800d246:	eba3 0209 	sub.w	r2, r3, r9
 800d24a:	d124      	bne.n	800d296 <_scanf_float+0x3c2>
 800d24c:	2200      	movs	r2, #0
 800d24e:	4659      	mov	r1, fp
 800d250:	4640      	mov	r0, r8
 800d252:	f002 fc29 	bl	800faa8 <_strtod_r>
 800d256:	9b03      	ldr	r3, [sp, #12]
 800d258:	6821      	ldr	r1, [r4, #0]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f011 0f02 	tst.w	r1, #2
 800d260:	ec57 6b10 	vmov	r6, r7, d0
 800d264:	f103 0204 	add.w	r2, r3, #4
 800d268:	d020      	beq.n	800d2ac <_scanf_float+0x3d8>
 800d26a:	9903      	ldr	r1, [sp, #12]
 800d26c:	600a      	str	r2, [r1, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	e9c3 6700 	strd	r6, r7, [r3]
 800d274:	68e3      	ldr	r3, [r4, #12]
 800d276:	3301      	adds	r3, #1
 800d278:	60e3      	str	r3, [r4, #12]
 800d27a:	e66c      	b.n	800cf56 <_scanf_float+0x82>
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0e4      	beq.n	800d24c <_scanf_float+0x378>
 800d282:	9905      	ldr	r1, [sp, #20]
 800d284:	230a      	movs	r3, #10
 800d286:	462a      	mov	r2, r5
 800d288:	3101      	adds	r1, #1
 800d28a:	4640      	mov	r0, r8
 800d28c:	f7ff f9b0 	bl	800c5f0 <_strtol_r>
 800d290:	9b04      	ldr	r3, [sp, #16]
 800d292:	9e05      	ldr	r6, [sp, #20]
 800d294:	1ac2      	subs	r2, r0, r3
 800d296:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d29a:	429e      	cmp	r6, r3
 800d29c:	bf28      	it	cs
 800d29e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d2a2:	4912      	ldr	r1, [pc, #72]	; (800d2ec <_scanf_float+0x418>)
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f000 f8e7 	bl	800d478 <siprintf>
 800d2aa:	e7cf      	b.n	800d24c <_scanf_float+0x378>
 800d2ac:	f011 0f04 	tst.w	r1, #4
 800d2b0:	9903      	ldr	r1, [sp, #12]
 800d2b2:	600a      	str	r2, [r1, #0]
 800d2b4:	d1db      	bne.n	800d26e <_scanf_float+0x39a>
 800d2b6:	f8d3 8000 	ldr.w	r8, [r3]
 800d2ba:	ee10 2a10 	vmov	r2, s0
 800d2be:	ee10 0a10 	vmov	r0, s0
 800d2c2:	463b      	mov	r3, r7
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	f7f3 fc31 	bl	8000b2c <__aeabi_dcmpun>
 800d2ca:	b128      	cbz	r0, 800d2d8 <_scanf_float+0x404>
 800d2cc:	4808      	ldr	r0, [pc, #32]	; (800d2f0 <_scanf_float+0x41c>)
 800d2ce:	f000 fa63 	bl	800d798 <nanf>
 800d2d2:	ed88 0a00 	vstr	s0, [r8]
 800d2d6:	e7cd      	b.n	800d274 <_scanf_float+0x3a0>
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	f7f3 fc84 	bl	8000be8 <__aeabi_d2f>
 800d2e0:	f8c8 0000 	str.w	r0, [r8]
 800d2e4:	e7c6      	b.n	800d274 <_scanf_float+0x3a0>
 800d2e6:	2500      	movs	r5, #0
 800d2e8:	e635      	b.n	800cf56 <_scanf_float+0x82>
 800d2ea:	bf00      	nop
 800d2ec:	080111d1 	.word	0x080111d1
 800d2f0:	08011464 	.word	0x08011464

0800d2f4 <std>:
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	b510      	push	{r4, lr}
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d302:	6083      	str	r3, [r0, #8]
 800d304:	8181      	strh	r1, [r0, #12]
 800d306:	6643      	str	r3, [r0, #100]	; 0x64
 800d308:	81c2      	strh	r2, [r0, #14]
 800d30a:	6183      	str	r3, [r0, #24]
 800d30c:	4619      	mov	r1, r3
 800d30e:	2208      	movs	r2, #8
 800d310:	305c      	adds	r0, #92	; 0x5c
 800d312:	f000 f914 	bl	800d53e <memset>
 800d316:	4b0d      	ldr	r3, [pc, #52]	; (800d34c <std+0x58>)
 800d318:	6263      	str	r3, [r4, #36]	; 0x24
 800d31a:	4b0d      	ldr	r3, [pc, #52]	; (800d350 <std+0x5c>)
 800d31c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d31e:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <std+0x60>)
 800d320:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d322:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <std+0x64>)
 800d324:	6323      	str	r3, [r4, #48]	; 0x30
 800d326:	4b0d      	ldr	r3, [pc, #52]	; (800d35c <std+0x68>)
 800d328:	6224      	str	r4, [r4, #32]
 800d32a:	429c      	cmp	r4, r3
 800d32c:	d006      	beq.n	800d33c <std+0x48>
 800d32e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d332:	4294      	cmp	r4, r2
 800d334:	d002      	beq.n	800d33c <std+0x48>
 800d336:	33d0      	adds	r3, #208	; 0xd0
 800d338:	429c      	cmp	r4, r3
 800d33a:	d105      	bne.n	800d348 <std+0x54>
 800d33c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d344:	f000 ba16 	b.w	800d774 <__retarget_lock_init_recursive>
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	bf00      	nop
 800d34c:	0800d4b9 	.word	0x0800d4b9
 800d350:	0800d4db 	.word	0x0800d4db
 800d354:	0800d513 	.word	0x0800d513
 800d358:	0800d537 	.word	0x0800d537
 800d35c:	2000207c 	.word	0x2000207c

0800d360 <stdio_exit_handler>:
 800d360:	4a02      	ldr	r2, [pc, #8]	; (800d36c <stdio_exit_handler+0xc>)
 800d362:	4903      	ldr	r1, [pc, #12]	; (800d370 <stdio_exit_handler+0x10>)
 800d364:	4803      	ldr	r0, [pc, #12]	; (800d374 <stdio_exit_handler+0x14>)
 800d366:	f000 b869 	b.w	800d43c <_fwalk_sglue>
 800d36a:	bf00      	nop
 800d36c:	20000014 	.word	0x20000014
 800d370:	0800fe71 	.word	0x0800fe71
 800d374:	20000020 	.word	0x20000020

0800d378 <cleanup_stdio>:
 800d378:	6841      	ldr	r1, [r0, #4]
 800d37a:	4b0c      	ldr	r3, [pc, #48]	; (800d3ac <cleanup_stdio+0x34>)
 800d37c:	4299      	cmp	r1, r3
 800d37e:	b510      	push	{r4, lr}
 800d380:	4604      	mov	r4, r0
 800d382:	d001      	beq.n	800d388 <cleanup_stdio+0x10>
 800d384:	f002 fd74 	bl	800fe70 <_fflush_r>
 800d388:	68a1      	ldr	r1, [r4, #8]
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <cleanup_stdio+0x38>)
 800d38c:	4299      	cmp	r1, r3
 800d38e:	d002      	beq.n	800d396 <cleanup_stdio+0x1e>
 800d390:	4620      	mov	r0, r4
 800d392:	f002 fd6d 	bl	800fe70 <_fflush_r>
 800d396:	68e1      	ldr	r1, [r4, #12]
 800d398:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <cleanup_stdio+0x3c>)
 800d39a:	4299      	cmp	r1, r3
 800d39c:	d004      	beq.n	800d3a8 <cleanup_stdio+0x30>
 800d39e:	4620      	mov	r0, r4
 800d3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a4:	f002 bd64 	b.w	800fe70 <_fflush_r>
 800d3a8:	bd10      	pop	{r4, pc}
 800d3aa:	bf00      	nop
 800d3ac:	2000207c 	.word	0x2000207c
 800d3b0:	200020e4 	.word	0x200020e4
 800d3b4:	2000214c 	.word	0x2000214c

0800d3b8 <global_stdio_init.part.0>:
 800d3b8:	b510      	push	{r4, lr}
 800d3ba:	4b0b      	ldr	r3, [pc, #44]	; (800d3e8 <global_stdio_init.part.0+0x30>)
 800d3bc:	4c0b      	ldr	r4, [pc, #44]	; (800d3ec <global_stdio_init.part.0+0x34>)
 800d3be:	4a0c      	ldr	r2, [pc, #48]	; (800d3f0 <global_stdio_init.part.0+0x38>)
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	2104      	movs	r1, #4
 800d3c8:	f7ff ff94 	bl	800d2f4 <std>
 800d3cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	2109      	movs	r1, #9
 800d3d4:	f7ff ff8e 	bl	800d2f4 <std>
 800d3d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d3dc:	2202      	movs	r2, #2
 800d3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e2:	2112      	movs	r1, #18
 800d3e4:	f7ff bf86 	b.w	800d2f4 <std>
 800d3e8:	200021b4 	.word	0x200021b4
 800d3ec:	2000207c 	.word	0x2000207c
 800d3f0:	0800d361 	.word	0x0800d361

0800d3f4 <__sfp_lock_acquire>:
 800d3f4:	4801      	ldr	r0, [pc, #4]	; (800d3fc <__sfp_lock_acquire+0x8>)
 800d3f6:	f000 b9be 	b.w	800d776 <__retarget_lock_acquire_recursive>
 800d3fa:	bf00      	nop
 800d3fc:	200021bd 	.word	0x200021bd

0800d400 <__sfp_lock_release>:
 800d400:	4801      	ldr	r0, [pc, #4]	; (800d408 <__sfp_lock_release+0x8>)
 800d402:	f000 b9b9 	b.w	800d778 <__retarget_lock_release_recursive>
 800d406:	bf00      	nop
 800d408:	200021bd 	.word	0x200021bd

0800d40c <__sinit>:
 800d40c:	b510      	push	{r4, lr}
 800d40e:	4604      	mov	r4, r0
 800d410:	f7ff fff0 	bl	800d3f4 <__sfp_lock_acquire>
 800d414:	6a23      	ldr	r3, [r4, #32]
 800d416:	b11b      	cbz	r3, 800d420 <__sinit+0x14>
 800d418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d41c:	f7ff bff0 	b.w	800d400 <__sfp_lock_release>
 800d420:	4b04      	ldr	r3, [pc, #16]	; (800d434 <__sinit+0x28>)
 800d422:	6223      	str	r3, [r4, #32]
 800d424:	4b04      	ldr	r3, [pc, #16]	; (800d438 <__sinit+0x2c>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f5      	bne.n	800d418 <__sinit+0xc>
 800d42c:	f7ff ffc4 	bl	800d3b8 <global_stdio_init.part.0>
 800d430:	e7f2      	b.n	800d418 <__sinit+0xc>
 800d432:	bf00      	nop
 800d434:	0800d379 	.word	0x0800d379
 800d438:	200021b4 	.word	0x200021b4

0800d43c <_fwalk_sglue>:
 800d43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d440:	4607      	mov	r7, r0
 800d442:	4688      	mov	r8, r1
 800d444:	4614      	mov	r4, r2
 800d446:	2600      	movs	r6, #0
 800d448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d44c:	f1b9 0901 	subs.w	r9, r9, #1
 800d450:	d505      	bpl.n	800d45e <_fwalk_sglue+0x22>
 800d452:	6824      	ldr	r4, [r4, #0]
 800d454:	2c00      	cmp	r4, #0
 800d456:	d1f7      	bne.n	800d448 <_fwalk_sglue+0xc>
 800d458:	4630      	mov	r0, r6
 800d45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45e:	89ab      	ldrh	r3, [r5, #12]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d907      	bls.n	800d474 <_fwalk_sglue+0x38>
 800d464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d468:	3301      	adds	r3, #1
 800d46a:	d003      	beq.n	800d474 <_fwalk_sglue+0x38>
 800d46c:	4629      	mov	r1, r5
 800d46e:	4638      	mov	r0, r7
 800d470:	47c0      	blx	r8
 800d472:	4306      	orrs	r6, r0
 800d474:	3568      	adds	r5, #104	; 0x68
 800d476:	e7e9      	b.n	800d44c <_fwalk_sglue+0x10>

0800d478 <siprintf>:
 800d478:	b40e      	push	{r1, r2, r3}
 800d47a:	b500      	push	{lr}
 800d47c:	b09c      	sub	sp, #112	; 0x70
 800d47e:	ab1d      	add	r3, sp, #116	; 0x74
 800d480:	9002      	str	r0, [sp, #8]
 800d482:	9006      	str	r0, [sp, #24]
 800d484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d488:	4809      	ldr	r0, [pc, #36]	; (800d4b0 <siprintf+0x38>)
 800d48a:	9107      	str	r1, [sp, #28]
 800d48c:	9104      	str	r1, [sp, #16]
 800d48e:	4909      	ldr	r1, [pc, #36]	; (800d4b4 <siprintf+0x3c>)
 800d490:	f853 2b04 	ldr.w	r2, [r3], #4
 800d494:	9105      	str	r1, [sp, #20]
 800d496:	6800      	ldr	r0, [r0, #0]
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	a902      	add	r1, sp, #8
 800d49c:	f002 fb64 	bl	800fb68 <_svfiprintf_r>
 800d4a0:	9b02      	ldr	r3, [sp, #8]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	b01c      	add	sp, #112	; 0x70
 800d4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4ac:	b003      	add	sp, #12
 800d4ae:	4770      	bx	lr
 800d4b0:	2000006c 	.word	0x2000006c
 800d4b4:	ffff0208 	.word	0xffff0208

0800d4b8 <__sread>:
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c0:	f000 f8fa 	bl	800d6b8 <_read_r>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	bfab      	itete	ge
 800d4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d4cc:	181b      	addge	r3, r3, r0
 800d4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4d2:	bfac      	ite	ge
 800d4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4d6:	81a3      	strhlt	r3, [r4, #12]
 800d4d8:	bd10      	pop	{r4, pc}

0800d4da <__swrite>:
 800d4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4de:	461f      	mov	r7, r3
 800d4e0:	898b      	ldrh	r3, [r1, #12]
 800d4e2:	05db      	lsls	r3, r3, #23
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	4616      	mov	r6, r2
 800d4ea:	d505      	bpl.n	800d4f8 <__swrite+0x1e>
 800d4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f000 f8ce 	bl	800d694 <_lseek_r>
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	4632      	mov	r2, r6
 800d506:	463b      	mov	r3, r7
 800d508:	4628      	mov	r0, r5
 800d50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d50e:	f000 b8f5 	b.w	800d6fc <_write_r>

0800d512 <__sseek>:
 800d512:	b510      	push	{r4, lr}
 800d514:	460c      	mov	r4, r1
 800d516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d51a:	f000 f8bb 	bl	800d694 <_lseek_r>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	bf15      	itete	ne
 800d524:	6560      	strne	r0, [r4, #84]	; 0x54
 800d526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d52e:	81a3      	strheq	r3, [r4, #12]
 800d530:	bf18      	it	ne
 800d532:	81a3      	strhne	r3, [r4, #12]
 800d534:	bd10      	pop	{r4, pc}

0800d536 <__sclose>:
 800d536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d53a:	f000 b845 	b.w	800d5c8 <_close_r>

0800d53e <memset>:
 800d53e:	4402      	add	r2, r0
 800d540:	4603      	mov	r3, r0
 800d542:	4293      	cmp	r3, r2
 800d544:	d100      	bne.n	800d548 <memset+0xa>
 800d546:	4770      	bx	lr
 800d548:	f803 1b01 	strb.w	r1, [r3], #1
 800d54c:	e7f9      	b.n	800d542 <memset+0x4>

0800d54e <strchr>:
 800d54e:	b2c9      	uxtb	r1, r1
 800d550:	4603      	mov	r3, r0
 800d552:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d556:	b11a      	cbz	r2, 800d560 <strchr+0x12>
 800d558:	428a      	cmp	r2, r1
 800d55a:	d1f9      	bne.n	800d550 <strchr+0x2>
 800d55c:	4618      	mov	r0, r3
 800d55e:	4770      	bx	lr
 800d560:	2900      	cmp	r1, #0
 800d562:	bf18      	it	ne
 800d564:	2300      	movne	r3, #0
 800d566:	e7f9      	b.n	800d55c <strchr+0xe>

0800d568 <strncpy>:
 800d568:	b510      	push	{r4, lr}
 800d56a:	3901      	subs	r1, #1
 800d56c:	4603      	mov	r3, r0
 800d56e:	b132      	cbz	r2, 800d57e <strncpy+0x16>
 800d570:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d574:	f803 4b01 	strb.w	r4, [r3], #1
 800d578:	3a01      	subs	r2, #1
 800d57a:	2c00      	cmp	r4, #0
 800d57c:	d1f7      	bne.n	800d56e <strncpy+0x6>
 800d57e:	441a      	add	r2, r3
 800d580:	2100      	movs	r1, #0
 800d582:	4293      	cmp	r3, r2
 800d584:	d100      	bne.n	800d588 <strncpy+0x20>
 800d586:	bd10      	pop	{r4, pc}
 800d588:	f803 1b01 	strb.w	r1, [r3], #1
 800d58c:	e7f9      	b.n	800d582 <strncpy+0x1a>

0800d58e <strrchr>:
 800d58e:	b513      	push	{r0, r1, r4, lr}
 800d590:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d594:	4603      	mov	r3, r0
 800d596:	d110      	bne.n	800d5ba <strrchr+0x2c>
 800d598:	b002      	add	sp, #8
 800d59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d59e:	f7ff bfd6 	b.w	800d54e <strchr>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	9101      	str	r1, [sp, #4]
 800d5aa:	f7ff ffd0 	bl	800d54e <strchr>
 800d5ae:	9901      	ldr	r1, [sp, #4]
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d1f6      	bne.n	800d5a2 <strrchr+0x14>
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	b002      	add	sp, #8
 800d5b8:	bd10      	pop	{r4, pc}
 800d5ba:	2400      	movs	r4, #0
 800d5bc:	e7f3      	b.n	800d5a6 <strrchr+0x18>
	...

0800d5c0 <_localeconv_r>:
 800d5c0:	4800      	ldr	r0, [pc, #0]	; (800d5c4 <_localeconv_r+0x4>)
 800d5c2:	4770      	bx	lr
 800d5c4:	20000160 	.word	0x20000160

0800d5c8 <_close_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4d06      	ldr	r5, [pc, #24]	; (800d5e4 <_close_r+0x1c>)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	4608      	mov	r0, r1
 800d5d2:	602b      	str	r3, [r5, #0]
 800d5d4:	f7f5 fb71 	bl	8002cba <_close>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d102      	bne.n	800d5e2 <_close_r+0x1a>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	b103      	cbz	r3, 800d5e2 <_close_r+0x1a>
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	200021b8 	.word	0x200021b8

0800d5e8 <_reclaim_reent>:
 800d5e8:	4b29      	ldr	r3, [pc, #164]	; (800d690 <_reclaim_reent+0xa8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4283      	cmp	r3, r0
 800d5ee:	b570      	push	{r4, r5, r6, lr}
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	d04b      	beq.n	800d68c <_reclaim_reent+0xa4>
 800d5f4:	69c3      	ldr	r3, [r0, #28]
 800d5f6:	b143      	cbz	r3, 800d60a <_reclaim_reent+0x22>
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d144      	bne.n	800d688 <_reclaim_reent+0xa0>
 800d5fe:	69e3      	ldr	r3, [r4, #28]
 800d600:	6819      	ldr	r1, [r3, #0]
 800d602:	b111      	cbz	r1, 800d60a <_reclaim_reent+0x22>
 800d604:	4620      	mov	r0, r4
 800d606:	f000 ff49 	bl	800e49c <_free_r>
 800d60a:	6961      	ldr	r1, [r4, #20]
 800d60c:	b111      	cbz	r1, 800d614 <_reclaim_reent+0x2c>
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 ff44 	bl	800e49c <_free_r>
 800d614:	69e1      	ldr	r1, [r4, #28]
 800d616:	b111      	cbz	r1, 800d61e <_reclaim_reent+0x36>
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 ff3f 	bl	800e49c <_free_r>
 800d61e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d620:	b111      	cbz	r1, 800d628 <_reclaim_reent+0x40>
 800d622:	4620      	mov	r0, r4
 800d624:	f000 ff3a 	bl	800e49c <_free_r>
 800d628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d62a:	b111      	cbz	r1, 800d632 <_reclaim_reent+0x4a>
 800d62c:	4620      	mov	r0, r4
 800d62e:	f000 ff35 	bl	800e49c <_free_r>
 800d632:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d634:	b111      	cbz	r1, 800d63c <_reclaim_reent+0x54>
 800d636:	4620      	mov	r0, r4
 800d638:	f000 ff30 	bl	800e49c <_free_r>
 800d63c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d63e:	b111      	cbz	r1, 800d646 <_reclaim_reent+0x5e>
 800d640:	4620      	mov	r0, r4
 800d642:	f000 ff2b 	bl	800e49c <_free_r>
 800d646:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d648:	b111      	cbz	r1, 800d650 <_reclaim_reent+0x68>
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 ff26 	bl	800e49c <_free_r>
 800d650:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d652:	b111      	cbz	r1, 800d65a <_reclaim_reent+0x72>
 800d654:	4620      	mov	r0, r4
 800d656:	f000 ff21 	bl	800e49c <_free_r>
 800d65a:	6a23      	ldr	r3, [r4, #32]
 800d65c:	b1b3      	cbz	r3, 800d68c <_reclaim_reent+0xa4>
 800d65e:	4620      	mov	r0, r4
 800d660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d664:	4718      	bx	r3
 800d666:	5949      	ldr	r1, [r1, r5]
 800d668:	b941      	cbnz	r1, 800d67c <_reclaim_reent+0x94>
 800d66a:	3504      	adds	r5, #4
 800d66c:	69e3      	ldr	r3, [r4, #28]
 800d66e:	2d80      	cmp	r5, #128	; 0x80
 800d670:	68d9      	ldr	r1, [r3, #12]
 800d672:	d1f8      	bne.n	800d666 <_reclaim_reent+0x7e>
 800d674:	4620      	mov	r0, r4
 800d676:	f000 ff11 	bl	800e49c <_free_r>
 800d67a:	e7c0      	b.n	800d5fe <_reclaim_reent+0x16>
 800d67c:	680e      	ldr	r6, [r1, #0]
 800d67e:	4620      	mov	r0, r4
 800d680:	f000 ff0c 	bl	800e49c <_free_r>
 800d684:	4631      	mov	r1, r6
 800d686:	e7ef      	b.n	800d668 <_reclaim_reent+0x80>
 800d688:	2500      	movs	r5, #0
 800d68a:	e7ef      	b.n	800d66c <_reclaim_reent+0x84>
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
 800d68e:	bf00      	nop
 800d690:	2000006c 	.word	0x2000006c

0800d694 <_lseek_r>:
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4d07      	ldr	r5, [pc, #28]	; (800d6b4 <_lseek_r+0x20>)
 800d698:	4604      	mov	r4, r0
 800d69a:	4608      	mov	r0, r1
 800d69c:	4611      	mov	r1, r2
 800d69e:	2200      	movs	r2, #0
 800d6a0:	602a      	str	r2, [r5, #0]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f7f5 fb30 	bl	8002d08 <_lseek>
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	d102      	bne.n	800d6b2 <_lseek_r+0x1e>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	b103      	cbz	r3, 800d6b2 <_lseek_r+0x1e>
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	200021b8 	.word	0x200021b8

0800d6b8 <_read_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	4d07      	ldr	r5, [pc, #28]	; (800d6d8 <_read_r+0x20>)
 800d6bc:	4604      	mov	r4, r0
 800d6be:	4608      	mov	r0, r1
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	602a      	str	r2, [r5, #0]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f7f5 fabe 	bl	8002c48 <_read>
 800d6cc:	1c43      	adds	r3, r0, #1
 800d6ce:	d102      	bne.n	800d6d6 <_read_r+0x1e>
 800d6d0:	682b      	ldr	r3, [r5, #0]
 800d6d2:	b103      	cbz	r3, 800d6d6 <_read_r+0x1e>
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	bd38      	pop	{r3, r4, r5, pc}
 800d6d8:	200021b8 	.word	0x200021b8

0800d6dc <_sbrk_r>:
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	4d06      	ldr	r5, [pc, #24]	; (800d6f8 <_sbrk_r+0x1c>)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	4608      	mov	r0, r1
 800d6e6:	602b      	str	r3, [r5, #0]
 800d6e8:	f7f5 fb1c 	bl	8002d24 <_sbrk>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d102      	bne.n	800d6f6 <_sbrk_r+0x1a>
 800d6f0:	682b      	ldr	r3, [r5, #0]
 800d6f2:	b103      	cbz	r3, 800d6f6 <_sbrk_r+0x1a>
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	bd38      	pop	{r3, r4, r5, pc}
 800d6f8:	200021b8 	.word	0x200021b8

0800d6fc <_write_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_write_r+0x20>)
 800d700:	4604      	mov	r4, r0
 800d702:	4608      	mov	r0, r1
 800d704:	4611      	mov	r1, r2
 800d706:	2200      	movs	r2, #0
 800d708:	602a      	str	r2, [r5, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	f7f5 fab9 	bl	8002c82 <_write>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d102      	bne.n	800d71a <_write_r+0x1e>
 800d714:	682b      	ldr	r3, [r5, #0]
 800d716:	b103      	cbz	r3, 800d71a <_write_r+0x1e>
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	bd38      	pop	{r3, r4, r5, pc}
 800d71c:	200021b8 	.word	0x200021b8

0800d720 <__errno>:
 800d720:	4b01      	ldr	r3, [pc, #4]	; (800d728 <__errno+0x8>)
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	2000006c 	.word	0x2000006c

0800d72c <__libc_init_array>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4d0d      	ldr	r5, [pc, #52]	; (800d764 <__libc_init_array+0x38>)
 800d730:	4c0d      	ldr	r4, [pc, #52]	; (800d768 <__libc_init_array+0x3c>)
 800d732:	1b64      	subs	r4, r4, r5
 800d734:	10a4      	asrs	r4, r4, #2
 800d736:	2600      	movs	r6, #0
 800d738:	42a6      	cmp	r6, r4
 800d73a:	d109      	bne.n	800d750 <__libc_init_array+0x24>
 800d73c:	4d0b      	ldr	r5, [pc, #44]	; (800d76c <__libc_init_array+0x40>)
 800d73e:	4c0c      	ldr	r4, [pc, #48]	; (800d770 <__libc_init_array+0x44>)
 800d740:	f003 fab0 	bl	8010ca4 <_init>
 800d744:	1b64      	subs	r4, r4, r5
 800d746:	10a4      	asrs	r4, r4, #2
 800d748:	2600      	movs	r6, #0
 800d74a:	42a6      	cmp	r6, r4
 800d74c:	d105      	bne.n	800d75a <__libc_init_array+0x2e>
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	f855 3b04 	ldr.w	r3, [r5], #4
 800d754:	4798      	blx	r3
 800d756:	3601      	adds	r6, #1
 800d758:	e7ee      	b.n	800d738 <__libc_init_array+0xc>
 800d75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d75e:	4798      	blx	r3
 800d760:	3601      	adds	r6, #1
 800d762:	e7f2      	b.n	800d74a <__libc_init_array+0x1e>
 800d764:	080114d0 	.word	0x080114d0
 800d768:	080114d0 	.word	0x080114d0
 800d76c:	080114d0 	.word	0x080114d0
 800d770:	080114d4 	.word	0x080114d4

0800d774 <__retarget_lock_init_recursive>:
 800d774:	4770      	bx	lr

0800d776 <__retarget_lock_acquire_recursive>:
 800d776:	4770      	bx	lr

0800d778 <__retarget_lock_release_recursive>:
 800d778:	4770      	bx	lr

0800d77a <memcpy>:
 800d77a:	440a      	add	r2, r1
 800d77c:	4291      	cmp	r1, r2
 800d77e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d782:	d100      	bne.n	800d786 <memcpy+0xc>
 800d784:	4770      	bx	lr
 800d786:	b510      	push	{r4, lr}
 800d788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d78c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d790:	4291      	cmp	r1, r2
 800d792:	d1f9      	bne.n	800d788 <memcpy+0xe>
 800d794:	bd10      	pop	{r4, pc}
	...

0800d798 <nanf>:
 800d798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d7a0 <nanf+0x8>
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	7fc00000 	.word	0x7fc00000

0800d7a4 <quorem>:
 800d7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	6903      	ldr	r3, [r0, #16]
 800d7aa:	690c      	ldr	r4, [r1, #16]
 800d7ac:	42a3      	cmp	r3, r4
 800d7ae:	4607      	mov	r7, r0
 800d7b0:	db7e      	blt.n	800d8b0 <quorem+0x10c>
 800d7b2:	3c01      	subs	r4, #1
 800d7b4:	f101 0814 	add.w	r8, r1, #20
 800d7b8:	f100 0514 	add.w	r5, r0, #20
 800d7bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7da:	d331      	bcc.n	800d840 <quorem+0x9c>
 800d7dc:	f04f 0e00 	mov.w	lr, #0
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	46ac      	mov	ip, r5
 800d7e4:	46f2      	mov	sl, lr
 800d7e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7ea:	b293      	uxth	r3, r2
 800d7ec:	fb06 e303 	mla	r3, r6, r3, lr
 800d7f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7f4:	0c1a      	lsrs	r2, r3, #16
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	ebaa 0303 	sub.w	r3, sl, r3
 800d7fc:	f8dc a000 	ldr.w	sl, [ip]
 800d800:	fa13 f38a 	uxtah	r3, r3, sl
 800d804:	fb06 220e 	mla	r2, r6, lr, r2
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	9b00      	ldr	r3, [sp, #0]
 800d80c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d810:	b292      	uxth	r2, r2
 800d812:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d816:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d81a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d81e:	4581      	cmp	r9, r0
 800d820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d824:	f84c 3b04 	str.w	r3, [ip], #4
 800d828:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d82c:	d2db      	bcs.n	800d7e6 <quorem+0x42>
 800d82e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d832:	b92b      	cbnz	r3, 800d840 <quorem+0x9c>
 800d834:	9b01      	ldr	r3, [sp, #4]
 800d836:	3b04      	subs	r3, #4
 800d838:	429d      	cmp	r5, r3
 800d83a:	461a      	mov	r2, r3
 800d83c:	d32c      	bcc.n	800d898 <quorem+0xf4>
 800d83e:	613c      	str	r4, [r7, #16]
 800d840:	4638      	mov	r0, r7
 800d842:	f001 f93d 	bl	800eac0 <__mcmp>
 800d846:	2800      	cmp	r0, #0
 800d848:	db22      	blt.n	800d890 <quorem+0xec>
 800d84a:	3601      	adds	r6, #1
 800d84c:	4629      	mov	r1, r5
 800d84e:	2000      	movs	r0, #0
 800d850:	f858 2b04 	ldr.w	r2, [r8], #4
 800d854:	f8d1 c000 	ldr.w	ip, [r1]
 800d858:	b293      	uxth	r3, r2
 800d85a:	1ac3      	subs	r3, r0, r3
 800d85c:	0c12      	lsrs	r2, r2, #16
 800d85e:	fa13 f38c 	uxtah	r3, r3, ip
 800d862:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d866:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d870:	45c1      	cmp	r9, r8
 800d872:	f841 3b04 	str.w	r3, [r1], #4
 800d876:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d87a:	d2e9      	bcs.n	800d850 <quorem+0xac>
 800d87c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d880:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d884:	b922      	cbnz	r2, 800d890 <quorem+0xec>
 800d886:	3b04      	subs	r3, #4
 800d888:	429d      	cmp	r5, r3
 800d88a:	461a      	mov	r2, r3
 800d88c:	d30a      	bcc.n	800d8a4 <quorem+0x100>
 800d88e:	613c      	str	r4, [r7, #16]
 800d890:	4630      	mov	r0, r6
 800d892:	b003      	add	sp, #12
 800d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	3b04      	subs	r3, #4
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d1ce      	bne.n	800d83e <quorem+0x9a>
 800d8a0:	3c01      	subs	r4, #1
 800d8a2:	e7c9      	b.n	800d838 <quorem+0x94>
 800d8a4:	6812      	ldr	r2, [r2, #0]
 800d8a6:	3b04      	subs	r3, #4
 800d8a8:	2a00      	cmp	r2, #0
 800d8aa:	d1f0      	bne.n	800d88e <quorem+0xea>
 800d8ac:	3c01      	subs	r4, #1
 800d8ae:	e7eb      	b.n	800d888 <quorem+0xe4>
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	e7ee      	b.n	800d892 <quorem+0xee>
 800d8b4:	0000      	movs	r0, r0
	...

0800d8b8 <_dtoa_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	ed2d 8b04 	vpush	{d8-d9}
 800d8c0:	69c5      	ldr	r5, [r0, #28]
 800d8c2:	b093      	sub	sp, #76	; 0x4c
 800d8c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8c8:	ec57 6b10 	vmov	r6, r7, d0
 800d8cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8d0:	9107      	str	r1, [sp, #28]
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	920a      	str	r2, [sp, #40]	; 0x28
 800d8d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8d8:	b975      	cbnz	r5, 800d8f8 <_dtoa_r+0x40>
 800d8da:	2010      	movs	r0, #16
 800d8dc:	f7fe fd52 	bl	800c384 <malloc>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	61e0      	str	r0, [r4, #28]
 800d8e4:	b920      	cbnz	r0, 800d8f0 <_dtoa_r+0x38>
 800d8e6:	4bae      	ldr	r3, [pc, #696]	; (800dba0 <_dtoa_r+0x2e8>)
 800d8e8:	21ef      	movs	r1, #239	; 0xef
 800d8ea:	48ae      	ldr	r0, [pc, #696]	; (800dba4 <_dtoa_r+0x2ec>)
 800d8ec:	f002 fb1c 	bl	800ff28 <__assert_func>
 800d8f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8f4:	6005      	str	r5, [r0, #0]
 800d8f6:	60c5      	str	r5, [r0, #12]
 800d8f8:	69e3      	ldr	r3, [r4, #28]
 800d8fa:	6819      	ldr	r1, [r3, #0]
 800d8fc:	b151      	cbz	r1, 800d914 <_dtoa_r+0x5c>
 800d8fe:	685a      	ldr	r2, [r3, #4]
 800d900:	604a      	str	r2, [r1, #4]
 800d902:	2301      	movs	r3, #1
 800d904:	4093      	lsls	r3, r2
 800d906:	608b      	str	r3, [r1, #8]
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 fe53 	bl	800e5b4 <_Bfree>
 800d90e:	69e3      	ldr	r3, [r4, #28]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	1e3b      	subs	r3, r7, #0
 800d916:	bfbb      	ittet	lt
 800d918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d91c:	9303      	strlt	r3, [sp, #12]
 800d91e:	2300      	movge	r3, #0
 800d920:	2201      	movlt	r2, #1
 800d922:	bfac      	ite	ge
 800d924:	f8c8 3000 	strge.w	r3, [r8]
 800d928:	f8c8 2000 	strlt.w	r2, [r8]
 800d92c:	4b9e      	ldr	r3, [pc, #632]	; (800dba8 <_dtoa_r+0x2f0>)
 800d92e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d932:	ea33 0308 	bics.w	r3, r3, r8
 800d936:	d11b      	bne.n	800d970 <_dtoa_r+0xb8>
 800d938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d93a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d944:	4333      	orrs	r3, r6
 800d946:	f000 8593 	beq.w	800e470 <_dtoa_r+0xbb8>
 800d94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d94c:	b963      	cbnz	r3, 800d968 <_dtoa_r+0xb0>
 800d94e:	4b97      	ldr	r3, [pc, #604]	; (800dbac <_dtoa_r+0x2f4>)
 800d950:	e027      	b.n	800d9a2 <_dtoa_r+0xea>
 800d952:	4b97      	ldr	r3, [pc, #604]	; (800dbb0 <_dtoa_r+0x2f8>)
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d95a:	6013      	str	r3, [r2, #0]
 800d95c:	9800      	ldr	r0, [sp, #0]
 800d95e:	b013      	add	sp, #76	; 0x4c
 800d960:	ecbd 8b04 	vpop	{d8-d9}
 800d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d968:	4b90      	ldr	r3, [pc, #576]	; (800dbac <_dtoa_r+0x2f4>)
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	3303      	adds	r3, #3
 800d96e:	e7f3      	b.n	800d958 <_dtoa_r+0xa0>
 800d970:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d974:	2200      	movs	r2, #0
 800d976:	ec51 0b17 	vmov	r0, r1, d7
 800d97a:	eeb0 8a47 	vmov.f32	s16, s14
 800d97e:	eef0 8a67 	vmov.f32	s17, s15
 800d982:	2300      	movs	r3, #0
 800d984:	f7f3 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d988:	4681      	mov	r9, r0
 800d98a:	b160      	cbz	r0, 800d9a6 <_dtoa_r+0xee>
 800d98c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d98e:	2301      	movs	r3, #1
 800d990:	6013      	str	r3, [r2, #0]
 800d992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8568 	beq.w	800e46a <_dtoa_r+0xbb2>
 800d99a:	4b86      	ldr	r3, [pc, #536]	; (800dbb4 <_dtoa_r+0x2fc>)
 800d99c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	e7da      	b.n	800d95c <_dtoa_r+0xa4>
 800d9a6:	aa10      	add	r2, sp, #64	; 0x40
 800d9a8:	a911      	add	r1, sp, #68	; 0x44
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d9b0:	eef0 0a68 	vmov.f32	s1, s17
 800d9b4:	f001 f99a 	bl	800ecec <__d2b>
 800d9b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d9bc:	4682      	mov	sl, r0
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	d07f      	beq.n	800dac2 <_dtoa_r+0x20a>
 800d9c2:	ee18 3a90 	vmov	r3, s17
 800d9c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d9ce:	ec51 0b18 	vmov	r0, r1, d8
 800d9d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d9de:	4619      	mov	r1, r3
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4b75      	ldr	r3, [pc, #468]	; (800dbb8 <_dtoa_r+0x300>)
 800d9e4:	f7f2 fc50 	bl	8000288 <__aeabi_dsub>
 800d9e8:	a367      	add	r3, pc, #412	; (adr r3, 800db88 <_dtoa_r+0x2d0>)
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f7f2 fe03 	bl	80005f8 <__aeabi_dmul>
 800d9f2:	a367      	add	r3, pc, #412	; (adr r3, 800db90 <_dtoa_r+0x2d8>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fc48 	bl	800028c <__adddf3>
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	4628      	mov	r0, r5
 800da00:	460f      	mov	r7, r1
 800da02:	f7f2 fd8f 	bl	8000524 <__aeabi_i2d>
 800da06:	a364      	add	r3, pc, #400	; (adr r3, 800db98 <_dtoa_r+0x2e0>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f7f2 fdf4 	bl	80005f8 <__aeabi_dmul>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4630      	mov	r0, r6
 800da16:	4639      	mov	r1, r7
 800da18:	f7f2 fc38 	bl	800028c <__adddf3>
 800da1c:	4606      	mov	r6, r0
 800da1e:	460f      	mov	r7, r1
 800da20:	f7f3 f89a 	bl	8000b58 <__aeabi_d2iz>
 800da24:	2200      	movs	r2, #0
 800da26:	4683      	mov	fp, r0
 800da28:	2300      	movs	r3, #0
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f3 f855 	bl	8000adc <__aeabi_dcmplt>
 800da32:	b148      	cbz	r0, 800da48 <_dtoa_r+0x190>
 800da34:	4658      	mov	r0, fp
 800da36:	f7f2 fd75 	bl	8000524 <__aeabi_i2d>
 800da3a:	4632      	mov	r2, r6
 800da3c:	463b      	mov	r3, r7
 800da3e:	f7f3 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 800da42:	b908      	cbnz	r0, 800da48 <_dtoa_r+0x190>
 800da44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da48:	f1bb 0f16 	cmp.w	fp, #22
 800da4c:	d857      	bhi.n	800dafe <_dtoa_r+0x246>
 800da4e:	4b5b      	ldr	r3, [pc, #364]	; (800dbbc <_dtoa_r+0x304>)
 800da50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	ec51 0b18 	vmov	r0, r1, d8
 800da5c:	f7f3 f83e 	bl	8000adc <__aeabi_dcmplt>
 800da60:	2800      	cmp	r0, #0
 800da62:	d04e      	beq.n	800db02 <_dtoa_r+0x24a>
 800da64:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da68:	2300      	movs	r3, #0
 800da6a:	930c      	str	r3, [sp, #48]	; 0x30
 800da6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da6e:	1b5b      	subs	r3, r3, r5
 800da70:	1e5a      	subs	r2, r3, #1
 800da72:	bf45      	ittet	mi
 800da74:	f1c3 0301 	rsbmi	r3, r3, #1
 800da78:	9305      	strmi	r3, [sp, #20]
 800da7a:	2300      	movpl	r3, #0
 800da7c:	2300      	movmi	r3, #0
 800da7e:	9206      	str	r2, [sp, #24]
 800da80:	bf54      	ite	pl
 800da82:	9305      	strpl	r3, [sp, #20]
 800da84:	9306      	strmi	r3, [sp, #24]
 800da86:	f1bb 0f00 	cmp.w	fp, #0
 800da8a:	db3c      	blt.n	800db06 <_dtoa_r+0x24e>
 800da8c:	9b06      	ldr	r3, [sp, #24]
 800da8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800da92:	445b      	add	r3, fp
 800da94:	9306      	str	r3, [sp, #24]
 800da96:	2300      	movs	r3, #0
 800da98:	9308      	str	r3, [sp, #32]
 800da9a:	9b07      	ldr	r3, [sp, #28]
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d868      	bhi.n	800db72 <_dtoa_r+0x2ba>
 800daa0:	2b05      	cmp	r3, #5
 800daa2:	bfc4      	itt	gt
 800daa4:	3b04      	subgt	r3, #4
 800daa6:	9307      	strgt	r3, [sp, #28]
 800daa8:	9b07      	ldr	r3, [sp, #28]
 800daaa:	f1a3 0302 	sub.w	r3, r3, #2
 800daae:	bfcc      	ite	gt
 800dab0:	2500      	movgt	r5, #0
 800dab2:	2501      	movle	r5, #1
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	f200 8085 	bhi.w	800dbc4 <_dtoa_r+0x30c>
 800daba:	e8df f003 	tbb	[pc, r3]
 800dabe:	3b2e      	.short	0x3b2e
 800dac0:	5839      	.short	0x5839
 800dac2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dac6:	441d      	add	r5, r3
 800dac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dacc:	2b20      	cmp	r3, #32
 800dace:	bfc1      	itttt	gt
 800dad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dad4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dad8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dadc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dae0:	bfd6      	itet	le
 800dae2:	f1c3 0320 	rsble	r3, r3, #32
 800dae6:	ea48 0003 	orrgt.w	r0, r8, r3
 800daea:	fa06 f003 	lslle.w	r0, r6, r3
 800daee:	f7f2 fd09 	bl	8000504 <__aeabi_ui2d>
 800daf2:	2201      	movs	r2, #1
 800daf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800daf8:	3d01      	subs	r5, #1
 800dafa:	920e      	str	r2, [sp, #56]	; 0x38
 800dafc:	e76f      	b.n	800d9de <_dtoa_r+0x126>
 800dafe:	2301      	movs	r3, #1
 800db00:	e7b3      	b.n	800da6a <_dtoa_r+0x1b2>
 800db02:	900c      	str	r0, [sp, #48]	; 0x30
 800db04:	e7b2      	b.n	800da6c <_dtoa_r+0x1b4>
 800db06:	9b05      	ldr	r3, [sp, #20]
 800db08:	eba3 030b 	sub.w	r3, r3, fp
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	f1cb 0300 	rsb	r3, fp, #0
 800db12:	9308      	str	r3, [sp, #32]
 800db14:	2300      	movs	r3, #0
 800db16:	930b      	str	r3, [sp, #44]	; 0x2c
 800db18:	e7bf      	b.n	800da9a <_dtoa_r+0x1e2>
 800db1a:	2300      	movs	r3, #0
 800db1c:	9309      	str	r3, [sp, #36]	; 0x24
 800db1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc52      	bgt.n	800dbca <_dtoa_r+0x312>
 800db24:	2301      	movs	r3, #1
 800db26:	9301      	str	r3, [sp, #4]
 800db28:	9304      	str	r3, [sp, #16]
 800db2a:	461a      	mov	r2, r3
 800db2c:	920a      	str	r2, [sp, #40]	; 0x28
 800db2e:	e00b      	b.n	800db48 <_dtoa_r+0x290>
 800db30:	2301      	movs	r3, #1
 800db32:	e7f3      	b.n	800db1c <_dtoa_r+0x264>
 800db34:	2300      	movs	r3, #0
 800db36:	9309      	str	r3, [sp, #36]	; 0x24
 800db38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db3a:	445b      	add	r3, fp
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	3301      	adds	r3, #1
 800db40:	2b01      	cmp	r3, #1
 800db42:	9304      	str	r3, [sp, #16]
 800db44:	bfb8      	it	lt
 800db46:	2301      	movlt	r3, #1
 800db48:	69e0      	ldr	r0, [r4, #28]
 800db4a:	2100      	movs	r1, #0
 800db4c:	2204      	movs	r2, #4
 800db4e:	f102 0614 	add.w	r6, r2, #20
 800db52:	429e      	cmp	r6, r3
 800db54:	d93d      	bls.n	800dbd2 <_dtoa_r+0x31a>
 800db56:	6041      	str	r1, [r0, #4]
 800db58:	4620      	mov	r0, r4
 800db5a:	f000 fceb 	bl	800e534 <_Balloc>
 800db5e:	9000      	str	r0, [sp, #0]
 800db60:	2800      	cmp	r0, #0
 800db62:	d139      	bne.n	800dbd8 <_dtoa_r+0x320>
 800db64:	4b16      	ldr	r3, [pc, #88]	; (800dbc0 <_dtoa_r+0x308>)
 800db66:	4602      	mov	r2, r0
 800db68:	f240 11af 	movw	r1, #431	; 0x1af
 800db6c:	e6bd      	b.n	800d8ea <_dtoa_r+0x32>
 800db6e:	2301      	movs	r3, #1
 800db70:	e7e1      	b.n	800db36 <_dtoa_r+0x27e>
 800db72:	2501      	movs	r5, #1
 800db74:	2300      	movs	r3, #0
 800db76:	9307      	str	r3, [sp, #28]
 800db78:	9509      	str	r5, [sp, #36]	; 0x24
 800db7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	9304      	str	r3, [sp, #16]
 800db82:	2200      	movs	r2, #0
 800db84:	2312      	movs	r3, #18
 800db86:	e7d1      	b.n	800db2c <_dtoa_r+0x274>
 800db88:	636f4361 	.word	0x636f4361
 800db8c:	3fd287a7 	.word	0x3fd287a7
 800db90:	8b60c8b3 	.word	0x8b60c8b3
 800db94:	3fc68a28 	.word	0x3fc68a28
 800db98:	509f79fb 	.word	0x509f79fb
 800db9c:	3fd34413 	.word	0x3fd34413
 800dba0:	080111e3 	.word	0x080111e3
 800dba4:	080111fa 	.word	0x080111fa
 800dba8:	7ff00000 	.word	0x7ff00000
 800dbac:	080111df 	.word	0x080111df
 800dbb0:	080111d6 	.word	0x080111d6
 800dbb4:	080111ae 	.word	0x080111ae
 800dbb8:	3ff80000 	.word	0x3ff80000
 800dbbc:	080112e8 	.word	0x080112e8
 800dbc0:	08011252 	.word	0x08011252
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc8:	e7d7      	b.n	800db7a <_dtoa_r+0x2c2>
 800dbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	9304      	str	r3, [sp, #16]
 800dbd0:	e7ba      	b.n	800db48 <_dtoa_r+0x290>
 800dbd2:	3101      	adds	r1, #1
 800dbd4:	0052      	lsls	r2, r2, #1
 800dbd6:	e7ba      	b.n	800db4e <_dtoa_r+0x296>
 800dbd8:	69e3      	ldr	r3, [r4, #28]
 800dbda:	9a00      	ldr	r2, [sp, #0]
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	9b04      	ldr	r3, [sp, #16]
 800dbe0:	2b0e      	cmp	r3, #14
 800dbe2:	f200 80a8 	bhi.w	800dd36 <_dtoa_r+0x47e>
 800dbe6:	2d00      	cmp	r5, #0
 800dbe8:	f000 80a5 	beq.w	800dd36 <_dtoa_r+0x47e>
 800dbec:	f1bb 0f00 	cmp.w	fp, #0
 800dbf0:	dd38      	ble.n	800dc64 <_dtoa_r+0x3ac>
 800dbf2:	4bc0      	ldr	r3, [pc, #768]	; (800def4 <_dtoa_r+0x63c>)
 800dbf4:	f00b 020f 	and.w	r2, fp, #15
 800dbf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dc04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dc08:	d019      	beq.n	800dc3e <_dtoa_r+0x386>
 800dc0a:	4bbb      	ldr	r3, [pc, #748]	; (800def8 <_dtoa_r+0x640>)
 800dc0c:	ec51 0b18 	vmov	r0, r1, d8
 800dc10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc14:	f7f2 fe1a 	bl	800084c <__aeabi_ddiv>
 800dc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1c:	f008 080f 	and.w	r8, r8, #15
 800dc20:	2503      	movs	r5, #3
 800dc22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800def8 <_dtoa_r+0x640>
 800dc26:	f1b8 0f00 	cmp.w	r8, #0
 800dc2a:	d10a      	bne.n	800dc42 <_dtoa_r+0x38a>
 800dc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc30:	4632      	mov	r2, r6
 800dc32:	463b      	mov	r3, r7
 800dc34:	f7f2 fe0a 	bl	800084c <__aeabi_ddiv>
 800dc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc3c:	e02b      	b.n	800dc96 <_dtoa_r+0x3de>
 800dc3e:	2502      	movs	r5, #2
 800dc40:	e7ef      	b.n	800dc22 <_dtoa_r+0x36a>
 800dc42:	f018 0f01 	tst.w	r8, #1
 800dc46:	d008      	beq.n	800dc5a <_dtoa_r+0x3a2>
 800dc48:	4630      	mov	r0, r6
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc50:	f7f2 fcd2 	bl	80005f8 <__aeabi_dmul>
 800dc54:	3501      	adds	r5, #1
 800dc56:	4606      	mov	r6, r0
 800dc58:	460f      	mov	r7, r1
 800dc5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc5e:	f109 0908 	add.w	r9, r9, #8
 800dc62:	e7e0      	b.n	800dc26 <_dtoa_r+0x36e>
 800dc64:	f000 809f 	beq.w	800dda6 <_dtoa_r+0x4ee>
 800dc68:	f1cb 0600 	rsb	r6, fp, #0
 800dc6c:	4ba1      	ldr	r3, [pc, #644]	; (800def4 <_dtoa_r+0x63c>)
 800dc6e:	4fa2      	ldr	r7, [pc, #648]	; (800def8 <_dtoa_r+0x640>)
 800dc70:	f006 020f 	and.w	r2, r6, #15
 800dc74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	ec51 0b18 	vmov	r0, r1, d8
 800dc80:	f7f2 fcba 	bl	80005f8 <__aeabi_dmul>
 800dc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc88:	1136      	asrs	r6, r6, #4
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	2502      	movs	r5, #2
 800dc8e:	2e00      	cmp	r6, #0
 800dc90:	d17e      	bne.n	800dd90 <_dtoa_r+0x4d8>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1d0      	bne.n	800dc38 <_dtoa_r+0x380>
 800dc96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f000 8084 	beq.w	800ddaa <_dtoa_r+0x4f2>
 800dca2:	4b96      	ldr	r3, [pc, #600]	; (800defc <_dtoa_r+0x644>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	4640      	mov	r0, r8
 800dca8:	4649      	mov	r1, r9
 800dcaa:	f7f2 ff17 	bl	8000adc <__aeabi_dcmplt>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d07b      	beq.n	800ddaa <_dtoa_r+0x4f2>
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d078      	beq.n	800ddaa <_dtoa_r+0x4f2>
 800dcb8:	9b01      	ldr	r3, [sp, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd39      	ble.n	800dd32 <_dtoa_r+0x47a>
 800dcbe:	4b90      	ldr	r3, [pc, #576]	; (800df00 <_dtoa_r+0x648>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	f7f2 fc97 	bl	80005f8 <__aeabi_dmul>
 800dcca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcce:	9e01      	ldr	r6, [sp, #4]
 800dcd0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f7f2 fc22 	bl	8000524 <__aeabi_i2d>
 800dce0:	4642      	mov	r2, r8
 800dce2:	464b      	mov	r3, r9
 800dce4:	f7f2 fc88 	bl	80005f8 <__aeabi_dmul>
 800dce8:	4b86      	ldr	r3, [pc, #536]	; (800df04 <_dtoa_r+0x64c>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	f7f2 face 	bl	800028c <__adddf3>
 800dcf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dcf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	d158      	bne.n	800ddb0 <_dtoa_r+0x4f8>
 800dcfe:	4b82      	ldr	r3, [pc, #520]	; (800df08 <_dtoa_r+0x650>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	4640      	mov	r0, r8
 800dd04:	4649      	mov	r1, r9
 800dd06:	f7f2 fabf 	bl	8000288 <__aeabi_dsub>
 800dd0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd0e:	4680      	mov	r8, r0
 800dd10:	4689      	mov	r9, r1
 800dd12:	f7f2 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	f040 8296 	bne.w	800e248 <_dtoa_r+0x990>
 800dd1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd20:	4640      	mov	r0, r8
 800dd22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd26:	4649      	mov	r1, r9
 800dd28:	f7f2 fed8 	bl	8000adc <__aeabi_dcmplt>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	f040 8289 	bne.w	800e244 <_dtoa_r+0x98c>
 800dd32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dd36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f2c0 814e 	blt.w	800dfda <_dtoa_r+0x722>
 800dd3e:	f1bb 0f0e 	cmp.w	fp, #14
 800dd42:	f300 814a 	bgt.w	800dfda <_dtoa_r+0x722>
 800dd46:	4b6b      	ldr	r3, [pc, #428]	; (800def4 <_dtoa_r+0x63c>)
 800dd48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f280 80dc 	bge.w	800df10 <_dtoa_r+0x658>
 800dd58:	9b04      	ldr	r3, [sp, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f300 80d8 	bgt.w	800df10 <_dtoa_r+0x658>
 800dd60:	f040 826f 	bne.w	800e242 <_dtoa_r+0x98a>
 800dd64:	4b68      	ldr	r3, [pc, #416]	; (800df08 <_dtoa_r+0x650>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	4640      	mov	r0, r8
 800dd6a:	4649      	mov	r1, r9
 800dd6c:	f7f2 fc44 	bl	80005f8 <__aeabi_dmul>
 800dd70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd74:	f7f2 fec6 	bl	8000b04 <__aeabi_dcmpge>
 800dd78:	9e04      	ldr	r6, [sp, #16]
 800dd7a:	4637      	mov	r7, r6
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	f040 8245 	bne.w	800e20c <_dtoa_r+0x954>
 800dd82:	9d00      	ldr	r5, [sp, #0]
 800dd84:	2331      	movs	r3, #49	; 0x31
 800dd86:	f805 3b01 	strb.w	r3, [r5], #1
 800dd8a:	f10b 0b01 	add.w	fp, fp, #1
 800dd8e:	e241      	b.n	800e214 <_dtoa_r+0x95c>
 800dd90:	07f2      	lsls	r2, r6, #31
 800dd92:	d505      	bpl.n	800dda0 <_dtoa_r+0x4e8>
 800dd94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd98:	f7f2 fc2e 	bl	80005f8 <__aeabi_dmul>
 800dd9c:	3501      	adds	r5, #1
 800dd9e:	2301      	movs	r3, #1
 800dda0:	1076      	asrs	r6, r6, #1
 800dda2:	3708      	adds	r7, #8
 800dda4:	e773      	b.n	800dc8e <_dtoa_r+0x3d6>
 800dda6:	2502      	movs	r5, #2
 800dda8:	e775      	b.n	800dc96 <_dtoa_r+0x3de>
 800ddaa:	9e04      	ldr	r6, [sp, #16]
 800ddac:	465f      	mov	r7, fp
 800ddae:	e792      	b.n	800dcd6 <_dtoa_r+0x41e>
 800ddb0:	9900      	ldr	r1, [sp, #0]
 800ddb2:	4b50      	ldr	r3, [pc, #320]	; (800def4 <_dtoa_r+0x63c>)
 800ddb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddb8:	4431      	add	r1, r6
 800ddba:	9102      	str	r1, [sp, #8]
 800ddbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddbe:	eeb0 9a47 	vmov.f32	s18, s14
 800ddc2:	eef0 9a67 	vmov.f32	s19, s15
 800ddc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ddca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	d044      	beq.n	800de5c <_dtoa_r+0x5a4>
 800ddd2:	494e      	ldr	r1, [pc, #312]	; (800df0c <_dtoa_r+0x654>)
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f7f2 fd39 	bl	800084c <__aeabi_ddiv>
 800ddda:	ec53 2b19 	vmov	r2, r3, d9
 800ddde:	f7f2 fa53 	bl	8000288 <__aeabi_dsub>
 800dde2:	9d00      	ldr	r5, [sp, #0]
 800dde4:	ec41 0b19 	vmov	d9, r0, r1
 800dde8:	4649      	mov	r1, r9
 800ddea:	4640      	mov	r0, r8
 800ddec:	f7f2 feb4 	bl	8000b58 <__aeabi_d2iz>
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	f7f2 fb97 	bl	8000524 <__aeabi_i2d>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	f7f2 fa43 	bl	8000288 <__aeabi_dsub>
 800de02:	3630      	adds	r6, #48	; 0x30
 800de04:	f805 6b01 	strb.w	r6, [r5], #1
 800de08:	ec53 2b19 	vmov	r2, r3, d9
 800de0c:	4680      	mov	r8, r0
 800de0e:	4689      	mov	r9, r1
 800de10:	f7f2 fe64 	bl	8000adc <__aeabi_dcmplt>
 800de14:	2800      	cmp	r0, #0
 800de16:	d164      	bne.n	800dee2 <_dtoa_r+0x62a>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	4937      	ldr	r1, [pc, #220]	; (800defc <_dtoa_r+0x644>)
 800de1e:	2000      	movs	r0, #0
 800de20:	f7f2 fa32 	bl	8000288 <__aeabi_dsub>
 800de24:	ec53 2b19 	vmov	r2, r3, d9
 800de28:	f7f2 fe58 	bl	8000adc <__aeabi_dcmplt>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f040 80b6 	bne.w	800df9e <_dtoa_r+0x6e6>
 800de32:	9b02      	ldr	r3, [sp, #8]
 800de34:	429d      	cmp	r5, r3
 800de36:	f43f af7c 	beq.w	800dd32 <_dtoa_r+0x47a>
 800de3a:	4b31      	ldr	r3, [pc, #196]	; (800df00 <_dtoa_r+0x648>)
 800de3c:	ec51 0b19 	vmov	r0, r1, d9
 800de40:	2200      	movs	r2, #0
 800de42:	f7f2 fbd9 	bl	80005f8 <__aeabi_dmul>
 800de46:	4b2e      	ldr	r3, [pc, #184]	; (800df00 <_dtoa_r+0x648>)
 800de48:	ec41 0b19 	vmov	d9, r0, r1
 800de4c:	2200      	movs	r2, #0
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	f7f2 fbd1 	bl	80005f8 <__aeabi_dmul>
 800de56:	4680      	mov	r8, r0
 800de58:	4689      	mov	r9, r1
 800de5a:	e7c5      	b.n	800dde8 <_dtoa_r+0x530>
 800de5c:	ec51 0b17 	vmov	r0, r1, d7
 800de60:	f7f2 fbca 	bl	80005f8 <__aeabi_dmul>
 800de64:	9b02      	ldr	r3, [sp, #8]
 800de66:	9d00      	ldr	r5, [sp, #0]
 800de68:	930f      	str	r3, [sp, #60]	; 0x3c
 800de6a:	ec41 0b19 	vmov	d9, r0, r1
 800de6e:	4649      	mov	r1, r9
 800de70:	4640      	mov	r0, r8
 800de72:	f7f2 fe71 	bl	8000b58 <__aeabi_d2iz>
 800de76:	4606      	mov	r6, r0
 800de78:	f7f2 fb54 	bl	8000524 <__aeabi_i2d>
 800de7c:	3630      	adds	r6, #48	; 0x30
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 f9ff 	bl	8000288 <__aeabi_dsub>
 800de8a:	f805 6b01 	strb.w	r6, [r5], #1
 800de8e:	9b02      	ldr	r3, [sp, #8]
 800de90:	429d      	cmp	r5, r3
 800de92:	4680      	mov	r8, r0
 800de94:	4689      	mov	r9, r1
 800de96:	f04f 0200 	mov.w	r2, #0
 800de9a:	d124      	bne.n	800dee6 <_dtoa_r+0x62e>
 800de9c:	4b1b      	ldr	r3, [pc, #108]	; (800df0c <_dtoa_r+0x654>)
 800de9e:	ec51 0b19 	vmov	r0, r1, d9
 800dea2:	f7f2 f9f3 	bl	800028c <__adddf3>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4640      	mov	r0, r8
 800deac:	4649      	mov	r1, r9
 800deae:	f7f2 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d173      	bne.n	800df9e <_dtoa_r+0x6e6>
 800deb6:	ec53 2b19 	vmov	r2, r3, d9
 800deba:	4914      	ldr	r1, [pc, #80]	; (800df0c <_dtoa_r+0x654>)
 800debc:	2000      	movs	r0, #0
 800debe:	f7f2 f9e3 	bl	8000288 <__aeabi_dsub>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 fe07 	bl	8000adc <__aeabi_dcmplt>
 800dece:	2800      	cmp	r0, #0
 800ded0:	f43f af2f 	beq.w	800dd32 <_dtoa_r+0x47a>
 800ded4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ded6:	1e6b      	subs	r3, r5, #1
 800ded8:	930f      	str	r3, [sp, #60]	; 0x3c
 800deda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dede:	2b30      	cmp	r3, #48	; 0x30
 800dee0:	d0f8      	beq.n	800ded4 <_dtoa_r+0x61c>
 800dee2:	46bb      	mov	fp, r7
 800dee4:	e04a      	b.n	800df7c <_dtoa_r+0x6c4>
 800dee6:	4b06      	ldr	r3, [pc, #24]	; (800df00 <_dtoa_r+0x648>)
 800dee8:	f7f2 fb86 	bl	80005f8 <__aeabi_dmul>
 800deec:	4680      	mov	r8, r0
 800deee:	4689      	mov	r9, r1
 800def0:	e7bd      	b.n	800de6e <_dtoa_r+0x5b6>
 800def2:	bf00      	nop
 800def4:	080112e8 	.word	0x080112e8
 800def8:	080112c0 	.word	0x080112c0
 800defc:	3ff00000 	.word	0x3ff00000
 800df00:	40240000 	.word	0x40240000
 800df04:	401c0000 	.word	0x401c0000
 800df08:	40140000 	.word	0x40140000
 800df0c:	3fe00000 	.word	0x3fe00000
 800df10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df14:	9d00      	ldr	r5, [sp, #0]
 800df16:	4642      	mov	r2, r8
 800df18:	464b      	mov	r3, r9
 800df1a:	4630      	mov	r0, r6
 800df1c:	4639      	mov	r1, r7
 800df1e:	f7f2 fc95 	bl	800084c <__aeabi_ddiv>
 800df22:	f7f2 fe19 	bl	8000b58 <__aeabi_d2iz>
 800df26:	9001      	str	r0, [sp, #4]
 800df28:	f7f2 fafc 	bl	8000524 <__aeabi_i2d>
 800df2c:	4642      	mov	r2, r8
 800df2e:	464b      	mov	r3, r9
 800df30:	f7f2 fb62 	bl	80005f8 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4630      	mov	r0, r6
 800df3a:	4639      	mov	r1, r7
 800df3c:	f7f2 f9a4 	bl	8000288 <__aeabi_dsub>
 800df40:	9e01      	ldr	r6, [sp, #4]
 800df42:	9f04      	ldr	r7, [sp, #16]
 800df44:	3630      	adds	r6, #48	; 0x30
 800df46:	f805 6b01 	strb.w	r6, [r5], #1
 800df4a:	9e00      	ldr	r6, [sp, #0]
 800df4c:	1bae      	subs	r6, r5, r6
 800df4e:	42b7      	cmp	r7, r6
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	d134      	bne.n	800dfc0 <_dtoa_r+0x708>
 800df56:	f7f2 f999 	bl	800028c <__adddf3>
 800df5a:	4642      	mov	r2, r8
 800df5c:	464b      	mov	r3, r9
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	f7f2 fdd9 	bl	8000b18 <__aeabi_dcmpgt>
 800df66:	b9c8      	cbnz	r0, 800df9c <_dtoa_r+0x6e4>
 800df68:	4642      	mov	r2, r8
 800df6a:	464b      	mov	r3, r9
 800df6c:	4630      	mov	r0, r6
 800df6e:	4639      	mov	r1, r7
 800df70:	f7f2 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800df74:	b110      	cbz	r0, 800df7c <_dtoa_r+0x6c4>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	07db      	lsls	r3, r3, #31
 800df7a:	d40f      	bmi.n	800df9c <_dtoa_r+0x6e4>
 800df7c:	4651      	mov	r1, sl
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 fb18 	bl	800e5b4 <_Bfree>
 800df84:	2300      	movs	r3, #0
 800df86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df88:	702b      	strb	r3, [r5, #0]
 800df8a:	f10b 0301 	add.w	r3, fp, #1
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df92:	2b00      	cmp	r3, #0
 800df94:	f43f ace2 	beq.w	800d95c <_dtoa_r+0xa4>
 800df98:	601d      	str	r5, [r3, #0]
 800df9a:	e4df      	b.n	800d95c <_dtoa_r+0xa4>
 800df9c:	465f      	mov	r7, fp
 800df9e:	462b      	mov	r3, r5
 800dfa0:	461d      	mov	r5, r3
 800dfa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfa6:	2a39      	cmp	r2, #57	; 0x39
 800dfa8:	d106      	bne.n	800dfb8 <_dtoa_r+0x700>
 800dfaa:	9a00      	ldr	r2, [sp, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d1f7      	bne.n	800dfa0 <_dtoa_r+0x6e8>
 800dfb0:	9900      	ldr	r1, [sp, #0]
 800dfb2:	2230      	movs	r2, #48	; 0x30
 800dfb4:	3701      	adds	r7, #1
 800dfb6:	700a      	strb	r2, [r1, #0]
 800dfb8:	781a      	ldrb	r2, [r3, #0]
 800dfba:	3201      	adds	r2, #1
 800dfbc:	701a      	strb	r2, [r3, #0]
 800dfbe:	e790      	b.n	800dee2 <_dtoa_r+0x62a>
 800dfc0:	4ba3      	ldr	r3, [pc, #652]	; (800e250 <_dtoa_r+0x998>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f7f2 fb18 	bl	80005f8 <__aeabi_dmul>
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4606      	mov	r6, r0
 800dfce:	460f      	mov	r7, r1
 800dfd0:	f7f2 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d09e      	beq.n	800df16 <_dtoa_r+0x65e>
 800dfd8:	e7d0      	b.n	800df7c <_dtoa_r+0x6c4>
 800dfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfdc:	2a00      	cmp	r2, #0
 800dfde:	f000 80ca 	beq.w	800e176 <_dtoa_r+0x8be>
 800dfe2:	9a07      	ldr	r2, [sp, #28]
 800dfe4:	2a01      	cmp	r2, #1
 800dfe6:	f300 80ad 	bgt.w	800e144 <_dtoa_r+0x88c>
 800dfea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfec:	2a00      	cmp	r2, #0
 800dfee:	f000 80a5 	beq.w	800e13c <_dtoa_r+0x884>
 800dff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dff6:	9e08      	ldr	r6, [sp, #32]
 800dff8:	9d05      	ldr	r5, [sp, #20]
 800dffa:	9a05      	ldr	r2, [sp, #20]
 800dffc:	441a      	add	r2, r3
 800dffe:	9205      	str	r2, [sp, #20]
 800e000:	9a06      	ldr	r2, [sp, #24]
 800e002:	2101      	movs	r1, #1
 800e004:	441a      	add	r2, r3
 800e006:	4620      	mov	r0, r4
 800e008:	9206      	str	r2, [sp, #24]
 800e00a:	f000 fbd3 	bl	800e7b4 <__i2b>
 800e00e:	4607      	mov	r7, r0
 800e010:	b165      	cbz	r5, 800e02c <_dtoa_r+0x774>
 800e012:	9b06      	ldr	r3, [sp, #24]
 800e014:	2b00      	cmp	r3, #0
 800e016:	dd09      	ble.n	800e02c <_dtoa_r+0x774>
 800e018:	42ab      	cmp	r3, r5
 800e01a:	9a05      	ldr	r2, [sp, #20]
 800e01c:	bfa8      	it	ge
 800e01e:	462b      	movge	r3, r5
 800e020:	1ad2      	subs	r2, r2, r3
 800e022:	9205      	str	r2, [sp, #20]
 800e024:	9a06      	ldr	r2, [sp, #24]
 800e026:	1aed      	subs	r5, r5, r3
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	9306      	str	r3, [sp, #24]
 800e02c:	9b08      	ldr	r3, [sp, #32]
 800e02e:	b1f3      	cbz	r3, 800e06e <_dtoa_r+0x7b6>
 800e030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 80a3 	beq.w	800e17e <_dtoa_r+0x8c6>
 800e038:	2e00      	cmp	r6, #0
 800e03a:	dd10      	ble.n	800e05e <_dtoa_r+0x7a6>
 800e03c:	4639      	mov	r1, r7
 800e03e:	4632      	mov	r2, r6
 800e040:	4620      	mov	r0, r4
 800e042:	f000 fc77 	bl	800e934 <__pow5mult>
 800e046:	4652      	mov	r2, sl
 800e048:	4601      	mov	r1, r0
 800e04a:	4607      	mov	r7, r0
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 fbc7 	bl	800e7e0 <__multiply>
 800e052:	4651      	mov	r1, sl
 800e054:	4680      	mov	r8, r0
 800e056:	4620      	mov	r0, r4
 800e058:	f000 faac 	bl	800e5b4 <_Bfree>
 800e05c:	46c2      	mov	sl, r8
 800e05e:	9b08      	ldr	r3, [sp, #32]
 800e060:	1b9a      	subs	r2, r3, r6
 800e062:	d004      	beq.n	800e06e <_dtoa_r+0x7b6>
 800e064:	4651      	mov	r1, sl
 800e066:	4620      	mov	r0, r4
 800e068:	f000 fc64 	bl	800e934 <__pow5mult>
 800e06c:	4682      	mov	sl, r0
 800e06e:	2101      	movs	r1, #1
 800e070:	4620      	mov	r0, r4
 800e072:	f000 fb9f 	bl	800e7b4 <__i2b>
 800e076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e078:	2b00      	cmp	r3, #0
 800e07a:	4606      	mov	r6, r0
 800e07c:	f340 8081 	ble.w	800e182 <_dtoa_r+0x8ca>
 800e080:	461a      	mov	r2, r3
 800e082:	4601      	mov	r1, r0
 800e084:	4620      	mov	r0, r4
 800e086:	f000 fc55 	bl	800e934 <__pow5mult>
 800e08a:	9b07      	ldr	r3, [sp, #28]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	4606      	mov	r6, r0
 800e090:	dd7a      	ble.n	800e188 <_dtoa_r+0x8d0>
 800e092:	f04f 0800 	mov.w	r8, #0
 800e096:	6933      	ldr	r3, [r6, #16]
 800e098:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e09c:	6918      	ldr	r0, [r3, #16]
 800e09e:	f000 fb3b 	bl	800e718 <__hi0bits>
 800e0a2:	f1c0 0020 	rsb	r0, r0, #32
 800e0a6:	9b06      	ldr	r3, [sp, #24]
 800e0a8:	4418      	add	r0, r3
 800e0aa:	f010 001f 	ands.w	r0, r0, #31
 800e0ae:	f000 8094 	beq.w	800e1da <_dtoa_r+0x922>
 800e0b2:	f1c0 0320 	rsb	r3, r0, #32
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	f340 8085 	ble.w	800e1c6 <_dtoa_r+0x90e>
 800e0bc:	9b05      	ldr	r3, [sp, #20]
 800e0be:	f1c0 001c 	rsb	r0, r0, #28
 800e0c2:	4403      	add	r3, r0
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	9b06      	ldr	r3, [sp, #24]
 800e0c8:	4403      	add	r3, r0
 800e0ca:	4405      	add	r5, r0
 800e0cc:	9306      	str	r3, [sp, #24]
 800e0ce:	9b05      	ldr	r3, [sp, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dd05      	ble.n	800e0e0 <_dtoa_r+0x828>
 800e0d4:	4651      	mov	r1, sl
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f000 fc85 	bl	800e9e8 <__lshift>
 800e0de:	4682      	mov	sl, r0
 800e0e0:	9b06      	ldr	r3, [sp, #24]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dd05      	ble.n	800e0f2 <_dtoa_r+0x83a>
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fc7c 	bl	800e9e8 <__lshift>
 800e0f0:	4606      	mov	r6, r0
 800e0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d072      	beq.n	800e1de <_dtoa_r+0x926>
 800e0f8:	4631      	mov	r1, r6
 800e0fa:	4650      	mov	r0, sl
 800e0fc:	f000 fce0 	bl	800eac0 <__mcmp>
 800e100:	2800      	cmp	r0, #0
 800e102:	da6c      	bge.n	800e1de <_dtoa_r+0x926>
 800e104:	2300      	movs	r3, #0
 800e106:	4651      	mov	r1, sl
 800e108:	220a      	movs	r2, #10
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 fa74 	bl	800e5f8 <__multadd>
 800e110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e112:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e116:	4682      	mov	sl, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f000 81b0 	beq.w	800e47e <_dtoa_r+0xbc6>
 800e11e:	2300      	movs	r3, #0
 800e120:	4639      	mov	r1, r7
 800e122:	220a      	movs	r2, #10
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fa67 	bl	800e5f8 <__multadd>
 800e12a:	9b01      	ldr	r3, [sp, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	4607      	mov	r7, r0
 800e130:	f300 8096 	bgt.w	800e260 <_dtoa_r+0x9a8>
 800e134:	9b07      	ldr	r3, [sp, #28]
 800e136:	2b02      	cmp	r3, #2
 800e138:	dc59      	bgt.n	800e1ee <_dtoa_r+0x936>
 800e13a:	e091      	b.n	800e260 <_dtoa_r+0x9a8>
 800e13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e13e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e142:	e758      	b.n	800dff6 <_dtoa_r+0x73e>
 800e144:	9b04      	ldr	r3, [sp, #16]
 800e146:	1e5e      	subs	r6, r3, #1
 800e148:	9b08      	ldr	r3, [sp, #32]
 800e14a:	42b3      	cmp	r3, r6
 800e14c:	bfbf      	itttt	lt
 800e14e:	9b08      	ldrlt	r3, [sp, #32]
 800e150:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e152:	9608      	strlt	r6, [sp, #32]
 800e154:	1af3      	sublt	r3, r6, r3
 800e156:	bfb4      	ite	lt
 800e158:	18d2      	addlt	r2, r2, r3
 800e15a:	1b9e      	subge	r6, r3, r6
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	bfbc      	itt	lt
 800e160:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e162:	2600      	movlt	r6, #0
 800e164:	2b00      	cmp	r3, #0
 800e166:	bfb7      	itett	lt
 800e168:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e16c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e170:	1a9d      	sublt	r5, r3, r2
 800e172:	2300      	movlt	r3, #0
 800e174:	e741      	b.n	800dffa <_dtoa_r+0x742>
 800e176:	9e08      	ldr	r6, [sp, #32]
 800e178:	9d05      	ldr	r5, [sp, #20]
 800e17a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e17c:	e748      	b.n	800e010 <_dtoa_r+0x758>
 800e17e:	9a08      	ldr	r2, [sp, #32]
 800e180:	e770      	b.n	800e064 <_dtoa_r+0x7ac>
 800e182:	9b07      	ldr	r3, [sp, #28]
 800e184:	2b01      	cmp	r3, #1
 800e186:	dc19      	bgt.n	800e1bc <_dtoa_r+0x904>
 800e188:	9b02      	ldr	r3, [sp, #8]
 800e18a:	b9bb      	cbnz	r3, 800e1bc <_dtoa_r+0x904>
 800e18c:	9b03      	ldr	r3, [sp, #12]
 800e18e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e192:	b99b      	cbnz	r3, 800e1bc <_dtoa_r+0x904>
 800e194:	9b03      	ldr	r3, [sp, #12]
 800e196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e19a:	0d1b      	lsrs	r3, r3, #20
 800e19c:	051b      	lsls	r3, r3, #20
 800e19e:	b183      	cbz	r3, 800e1c2 <_dtoa_r+0x90a>
 800e1a0:	9b05      	ldr	r3, [sp, #20]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	9305      	str	r3, [sp, #20]
 800e1a6:	9b06      	ldr	r3, [sp, #24]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	9306      	str	r3, [sp, #24]
 800e1ac:	f04f 0801 	mov.w	r8, #1
 800e1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f47f af6f 	bne.w	800e096 <_dtoa_r+0x7de>
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	e774      	b.n	800e0a6 <_dtoa_r+0x7ee>
 800e1bc:	f04f 0800 	mov.w	r8, #0
 800e1c0:	e7f6      	b.n	800e1b0 <_dtoa_r+0x8f8>
 800e1c2:	4698      	mov	r8, r3
 800e1c4:	e7f4      	b.n	800e1b0 <_dtoa_r+0x8f8>
 800e1c6:	d082      	beq.n	800e0ce <_dtoa_r+0x816>
 800e1c8:	9a05      	ldr	r2, [sp, #20]
 800e1ca:	331c      	adds	r3, #28
 800e1cc:	441a      	add	r2, r3
 800e1ce:	9205      	str	r2, [sp, #20]
 800e1d0:	9a06      	ldr	r2, [sp, #24]
 800e1d2:	441a      	add	r2, r3
 800e1d4:	441d      	add	r5, r3
 800e1d6:	9206      	str	r2, [sp, #24]
 800e1d8:	e779      	b.n	800e0ce <_dtoa_r+0x816>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	e7f4      	b.n	800e1c8 <_dtoa_r+0x910>
 800e1de:	9b04      	ldr	r3, [sp, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	dc37      	bgt.n	800e254 <_dtoa_r+0x99c>
 800e1e4:	9b07      	ldr	r3, [sp, #28]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	dd34      	ble.n	800e254 <_dtoa_r+0x99c>
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	9b01      	ldr	r3, [sp, #4]
 800e1f0:	b963      	cbnz	r3, 800e20c <_dtoa_r+0x954>
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	2205      	movs	r2, #5
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f000 f9fe 	bl	800e5f8 <__multadd>
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	4606      	mov	r6, r0
 800e200:	4650      	mov	r0, sl
 800e202:	f000 fc5d 	bl	800eac0 <__mcmp>
 800e206:	2800      	cmp	r0, #0
 800e208:	f73f adbb 	bgt.w	800dd82 <_dtoa_r+0x4ca>
 800e20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20e:	9d00      	ldr	r5, [sp, #0]
 800e210:	ea6f 0b03 	mvn.w	fp, r3
 800e214:	f04f 0800 	mov.w	r8, #0
 800e218:	4631      	mov	r1, r6
 800e21a:	4620      	mov	r0, r4
 800e21c:	f000 f9ca 	bl	800e5b4 <_Bfree>
 800e220:	2f00      	cmp	r7, #0
 800e222:	f43f aeab 	beq.w	800df7c <_dtoa_r+0x6c4>
 800e226:	f1b8 0f00 	cmp.w	r8, #0
 800e22a:	d005      	beq.n	800e238 <_dtoa_r+0x980>
 800e22c:	45b8      	cmp	r8, r7
 800e22e:	d003      	beq.n	800e238 <_dtoa_r+0x980>
 800e230:	4641      	mov	r1, r8
 800e232:	4620      	mov	r0, r4
 800e234:	f000 f9be 	bl	800e5b4 <_Bfree>
 800e238:	4639      	mov	r1, r7
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 f9ba 	bl	800e5b4 <_Bfree>
 800e240:	e69c      	b.n	800df7c <_dtoa_r+0x6c4>
 800e242:	2600      	movs	r6, #0
 800e244:	4637      	mov	r7, r6
 800e246:	e7e1      	b.n	800e20c <_dtoa_r+0x954>
 800e248:	46bb      	mov	fp, r7
 800e24a:	4637      	mov	r7, r6
 800e24c:	e599      	b.n	800dd82 <_dtoa_r+0x4ca>
 800e24e:	bf00      	nop
 800e250:	40240000 	.word	0x40240000
 800e254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 80c8 	beq.w	800e3ec <_dtoa_r+0xb34>
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	9301      	str	r3, [sp, #4]
 800e260:	2d00      	cmp	r5, #0
 800e262:	dd05      	ble.n	800e270 <_dtoa_r+0x9b8>
 800e264:	4639      	mov	r1, r7
 800e266:	462a      	mov	r2, r5
 800e268:	4620      	mov	r0, r4
 800e26a:	f000 fbbd 	bl	800e9e8 <__lshift>
 800e26e:	4607      	mov	r7, r0
 800e270:	f1b8 0f00 	cmp.w	r8, #0
 800e274:	d05b      	beq.n	800e32e <_dtoa_r+0xa76>
 800e276:	6879      	ldr	r1, [r7, #4]
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 f95b 	bl	800e534 <_Balloc>
 800e27e:	4605      	mov	r5, r0
 800e280:	b928      	cbnz	r0, 800e28e <_dtoa_r+0x9d6>
 800e282:	4b83      	ldr	r3, [pc, #524]	; (800e490 <_dtoa_r+0xbd8>)
 800e284:	4602      	mov	r2, r0
 800e286:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e28a:	f7ff bb2e 	b.w	800d8ea <_dtoa_r+0x32>
 800e28e:	693a      	ldr	r2, [r7, #16]
 800e290:	3202      	adds	r2, #2
 800e292:	0092      	lsls	r2, r2, #2
 800e294:	f107 010c 	add.w	r1, r7, #12
 800e298:	300c      	adds	r0, #12
 800e29a:	f7ff fa6e 	bl	800d77a <memcpy>
 800e29e:	2201      	movs	r2, #1
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 fba0 	bl	800e9e8 <__lshift>
 800e2a8:	9b00      	ldr	r3, [sp, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	9304      	str	r3, [sp, #16]
 800e2ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	9308      	str	r3, [sp, #32]
 800e2b6:	9b02      	ldr	r3, [sp, #8]
 800e2b8:	f003 0301 	and.w	r3, r3, #1
 800e2bc:	46b8      	mov	r8, r7
 800e2be:	9306      	str	r3, [sp, #24]
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	9b04      	ldr	r3, [sp, #16]
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	4650      	mov	r0, sl
 800e2ca:	9301      	str	r3, [sp, #4]
 800e2cc:	f7ff fa6a 	bl	800d7a4 <quorem>
 800e2d0:	4641      	mov	r1, r8
 800e2d2:	9002      	str	r0, [sp, #8]
 800e2d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e2d8:	4650      	mov	r0, sl
 800e2da:	f000 fbf1 	bl	800eac0 <__mcmp>
 800e2de:	463a      	mov	r2, r7
 800e2e0:	9005      	str	r0, [sp, #20]
 800e2e2:	4631      	mov	r1, r6
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fc07 	bl	800eaf8 <__mdiff>
 800e2ea:	68c2      	ldr	r2, [r0, #12]
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	bb02      	cbnz	r2, 800e332 <_dtoa_r+0xa7a>
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	4650      	mov	r0, sl
 800e2f4:	f000 fbe4 	bl	800eac0 <__mcmp>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e300:	f000 f958 	bl	800e5b4 <_Bfree>
 800e304:	9b07      	ldr	r3, [sp, #28]
 800e306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e308:	9d04      	ldr	r5, [sp, #16]
 800e30a:	ea43 0102 	orr.w	r1, r3, r2
 800e30e:	9b06      	ldr	r3, [sp, #24]
 800e310:	4319      	orrs	r1, r3
 800e312:	d110      	bne.n	800e336 <_dtoa_r+0xa7e>
 800e314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e318:	d029      	beq.n	800e36e <_dtoa_r+0xab6>
 800e31a:	9b05      	ldr	r3, [sp, #20]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dd02      	ble.n	800e326 <_dtoa_r+0xa6e>
 800e320:	9b02      	ldr	r3, [sp, #8]
 800e322:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	f883 9000 	strb.w	r9, [r3]
 800e32c:	e774      	b.n	800e218 <_dtoa_r+0x960>
 800e32e:	4638      	mov	r0, r7
 800e330:	e7ba      	b.n	800e2a8 <_dtoa_r+0x9f0>
 800e332:	2201      	movs	r2, #1
 800e334:	e7e1      	b.n	800e2fa <_dtoa_r+0xa42>
 800e336:	9b05      	ldr	r3, [sp, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	db04      	blt.n	800e346 <_dtoa_r+0xa8e>
 800e33c:	9907      	ldr	r1, [sp, #28]
 800e33e:	430b      	orrs	r3, r1
 800e340:	9906      	ldr	r1, [sp, #24]
 800e342:	430b      	orrs	r3, r1
 800e344:	d120      	bne.n	800e388 <_dtoa_r+0xad0>
 800e346:	2a00      	cmp	r2, #0
 800e348:	dded      	ble.n	800e326 <_dtoa_r+0xa6e>
 800e34a:	4651      	mov	r1, sl
 800e34c:	2201      	movs	r2, #1
 800e34e:	4620      	mov	r0, r4
 800e350:	f000 fb4a 	bl	800e9e8 <__lshift>
 800e354:	4631      	mov	r1, r6
 800e356:	4682      	mov	sl, r0
 800e358:	f000 fbb2 	bl	800eac0 <__mcmp>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	dc03      	bgt.n	800e368 <_dtoa_r+0xab0>
 800e360:	d1e1      	bne.n	800e326 <_dtoa_r+0xa6e>
 800e362:	f019 0f01 	tst.w	r9, #1
 800e366:	d0de      	beq.n	800e326 <_dtoa_r+0xa6e>
 800e368:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e36c:	d1d8      	bne.n	800e320 <_dtoa_r+0xa68>
 800e36e:	9a01      	ldr	r2, [sp, #4]
 800e370:	2339      	movs	r3, #57	; 0x39
 800e372:	7013      	strb	r3, [r2, #0]
 800e374:	462b      	mov	r3, r5
 800e376:	461d      	mov	r5, r3
 800e378:	3b01      	subs	r3, #1
 800e37a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e37e:	2a39      	cmp	r2, #57	; 0x39
 800e380:	d06c      	beq.n	800e45c <_dtoa_r+0xba4>
 800e382:	3201      	adds	r2, #1
 800e384:	701a      	strb	r2, [r3, #0]
 800e386:	e747      	b.n	800e218 <_dtoa_r+0x960>
 800e388:	2a00      	cmp	r2, #0
 800e38a:	dd07      	ble.n	800e39c <_dtoa_r+0xae4>
 800e38c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e390:	d0ed      	beq.n	800e36e <_dtoa_r+0xab6>
 800e392:	9a01      	ldr	r2, [sp, #4]
 800e394:	f109 0301 	add.w	r3, r9, #1
 800e398:	7013      	strb	r3, [r2, #0]
 800e39a:	e73d      	b.n	800e218 <_dtoa_r+0x960>
 800e39c:	9b04      	ldr	r3, [sp, #16]
 800e39e:	9a08      	ldr	r2, [sp, #32]
 800e3a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d043      	beq.n	800e430 <_dtoa_r+0xb78>
 800e3a8:	4651      	mov	r1, sl
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	220a      	movs	r2, #10
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f000 f922 	bl	800e5f8 <__multadd>
 800e3b4:	45b8      	cmp	r8, r7
 800e3b6:	4682      	mov	sl, r0
 800e3b8:	f04f 0300 	mov.w	r3, #0
 800e3bc:	f04f 020a 	mov.w	r2, #10
 800e3c0:	4641      	mov	r1, r8
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	d107      	bne.n	800e3d6 <_dtoa_r+0xb1e>
 800e3c6:	f000 f917 	bl	800e5f8 <__multadd>
 800e3ca:	4680      	mov	r8, r0
 800e3cc:	4607      	mov	r7, r0
 800e3ce:	9b04      	ldr	r3, [sp, #16]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	9304      	str	r3, [sp, #16]
 800e3d4:	e775      	b.n	800e2c2 <_dtoa_r+0xa0a>
 800e3d6:	f000 f90f 	bl	800e5f8 <__multadd>
 800e3da:	4639      	mov	r1, r7
 800e3dc:	4680      	mov	r8, r0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	220a      	movs	r2, #10
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 f908 	bl	800e5f8 <__multadd>
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	e7f0      	b.n	800e3ce <_dtoa_r+0xb16>
 800e3ec:	9b04      	ldr	r3, [sp, #16]
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	9d00      	ldr	r5, [sp, #0]
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4650      	mov	r0, sl
 800e3f6:	f7ff f9d5 	bl	800d7a4 <quorem>
 800e3fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e3fe:	9b00      	ldr	r3, [sp, #0]
 800e400:	f805 9b01 	strb.w	r9, [r5], #1
 800e404:	1aea      	subs	r2, r5, r3
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	4293      	cmp	r3, r2
 800e40a:	dd07      	ble.n	800e41c <_dtoa_r+0xb64>
 800e40c:	4651      	mov	r1, sl
 800e40e:	2300      	movs	r3, #0
 800e410:	220a      	movs	r2, #10
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f8f0 	bl	800e5f8 <__multadd>
 800e418:	4682      	mov	sl, r0
 800e41a:	e7ea      	b.n	800e3f2 <_dtoa_r+0xb3a>
 800e41c:	9b01      	ldr	r3, [sp, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bfc8      	it	gt
 800e422:	461d      	movgt	r5, r3
 800e424:	9b00      	ldr	r3, [sp, #0]
 800e426:	bfd8      	it	le
 800e428:	2501      	movle	r5, #1
 800e42a:	441d      	add	r5, r3
 800e42c:	f04f 0800 	mov.w	r8, #0
 800e430:	4651      	mov	r1, sl
 800e432:	2201      	movs	r2, #1
 800e434:	4620      	mov	r0, r4
 800e436:	f000 fad7 	bl	800e9e8 <__lshift>
 800e43a:	4631      	mov	r1, r6
 800e43c:	4682      	mov	sl, r0
 800e43e:	f000 fb3f 	bl	800eac0 <__mcmp>
 800e442:	2800      	cmp	r0, #0
 800e444:	dc96      	bgt.n	800e374 <_dtoa_r+0xabc>
 800e446:	d102      	bne.n	800e44e <_dtoa_r+0xb96>
 800e448:	f019 0f01 	tst.w	r9, #1
 800e44c:	d192      	bne.n	800e374 <_dtoa_r+0xabc>
 800e44e:	462b      	mov	r3, r5
 800e450:	461d      	mov	r5, r3
 800e452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e456:	2a30      	cmp	r2, #48	; 0x30
 800e458:	d0fa      	beq.n	800e450 <_dtoa_r+0xb98>
 800e45a:	e6dd      	b.n	800e218 <_dtoa_r+0x960>
 800e45c:	9a00      	ldr	r2, [sp, #0]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d189      	bne.n	800e376 <_dtoa_r+0xabe>
 800e462:	f10b 0b01 	add.w	fp, fp, #1
 800e466:	2331      	movs	r3, #49	; 0x31
 800e468:	e796      	b.n	800e398 <_dtoa_r+0xae0>
 800e46a:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <_dtoa_r+0xbdc>)
 800e46c:	f7ff ba99 	b.w	800d9a2 <_dtoa_r+0xea>
 800e470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e472:	2b00      	cmp	r3, #0
 800e474:	f47f aa6d 	bne.w	800d952 <_dtoa_r+0x9a>
 800e478:	4b07      	ldr	r3, [pc, #28]	; (800e498 <_dtoa_r+0xbe0>)
 800e47a:	f7ff ba92 	b.w	800d9a2 <_dtoa_r+0xea>
 800e47e:	9b01      	ldr	r3, [sp, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	dcb5      	bgt.n	800e3f0 <_dtoa_r+0xb38>
 800e484:	9b07      	ldr	r3, [sp, #28]
 800e486:	2b02      	cmp	r3, #2
 800e488:	f73f aeb1 	bgt.w	800e1ee <_dtoa_r+0x936>
 800e48c:	e7b0      	b.n	800e3f0 <_dtoa_r+0xb38>
 800e48e:	bf00      	nop
 800e490:	08011252 	.word	0x08011252
 800e494:	080111ad 	.word	0x080111ad
 800e498:	080111d6 	.word	0x080111d6

0800e49c <_free_r>:
 800e49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e49e:	2900      	cmp	r1, #0
 800e4a0:	d044      	beq.n	800e52c <_free_r+0x90>
 800e4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a6:	9001      	str	r0, [sp, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e4ae:	bfb8      	it	lt
 800e4b0:	18e4      	addlt	r4, r4, r3
 800e4b2:	f7fe f80f 	bl	800c4d4 <__malloc_lock>
 800e4b6:	4a1e      	ldr	r2, [pc, #120]	; (800e530 <_free_r+0x94>)
 800e4b8:	9801      	ldr	r0, [sp, #4]
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	b933      	cbnz	r3, 800e4cc <_free_r+0x30>
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	6014      	str	r4, [r2, #0]
 800e4c2:	b003      	add	sp, #12
 800e4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c8:	f7fe b80a 	b.w	800c4e0 <__malloc_unlock>
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	d908      	bls.n	800e4e2 <_free_r+0x46>
 800e4d0:	6825      	ldr	r5, [r4, #0]
 800e4d2:	1961      	adds	r1, r4, r5
 800e4d4:	428b      	cmp	r3, r1
 800e4d6:	bf01      	itttt	eq
 800e4d8:	6819      	ldreq	r1, [r3, #0]
 800e4da:	685b      	ldreq	r3, [r3, #4]
 800e4dc:	1949      	addeq	r1, r1, r5
 800e4de:	6021      	streq	r1, [r4, #0]
 800e4e0:	e7ed      	b.n	800e4be <_free_r+0x22>
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	b10b      	cbz	r3, 800e4ec <_free_r+0x50>
 800e4e8:	42a3      	cmp	r3, r4
 800e4ea:	d9fa      	bls.n	800e4e2 <_free_r+0x46>
 800e4ec:	6811      	ldr	r1, [r2, #0]
 800e4ee:	1855      	adds	r5, r2, r1
 800e4f0:	42a5      	cmp	r5, r4
 800e4f2:	d10b      	bne.n	800e50c <_free_r+0x70>
 800e4f4:	6824      	ldr	r4, [r4, #0]
 800e4f6:	4421      	add	r1, r4
 800e4f8:	1854      	adds	r4, r2, r1
 800e4fa:	42a3      	cmp	r3, r4
 800e4fc:	6011      	str	r1, [r2, #0]
 800e4fe:	d1e0      	bne.n	800e4c2 <_free_r+0x26>
 800e500:	681c      	ldr	r4, [r3, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	6053      	str	r3, [r2, #4]
 800e506:	440c      	add	r4, r1
 800e508:	6014      	str	r4, [r2, #0]
 800e50a:	e7da      	b.n	800e4c2 <_free_r+0x26>
 800e50c:	d902      	bls.n	800e514 <_free_r+0x78>
 800e50e:	230c      	movs	r3, #12
 800e510:	6003      	str	r3, [r0, #0]
 800e512:	e7d6      	b.n	800e4c2 <_free_r+0x26>
 800e514:	6825      	ldr	r5, [r4, #0]
 800e516:	1961      	adds	r1, r4, r5
 800e518:	428b      	cmp	r3, r1
 800e51a:	bf04      	itt	eq
 800e51c:	6819      	ldreq	r1, [r3, #0]
 800e51e:	685b      	ldreq	r3, [r3, #4]
 800e520:	6063      	str	r3, [r4, #4]
 800e522:	bf04      	itt	eq
 800e524:	1949      	addeq	r1, r1, r5
 800e526:	6021      	streq	r1, [r4, #0]
 800e528:	6054      	str	r4, [r2, #4]
 800e52a:	e7ca      	b.n	800e4c2 <_free_r+0x26>
 800e52c:	b003      	add	sp, #12
 800e52e:	bd30      	pop	{r4, r5, pc}
 800e530:	20002074 	.word	0x20002074

0800e534 <_Balloc>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	69c6      	ldr	r6, [r0, #28]
 800e538:	4604      	mov	r4, r0
 800e53a:	460d      	mov	r5, r1
 800e53c:	b976      	cbnz	r6, 800e55c <_Balloc+0x28>
 800e53e:	2010      	movs	r0, #16
 800e540:	f7fd ff20 	bl	800c384 <malloc>
 800e544:	4602      	mov	r2, r0
 800e546:	61e0      	str	r0, [r4, #28]
 800e548:	b920      	cbnz	r0, 800e554 <_Balloc+0x20>
 800e54a:	4b18      	ldr	r3, [pc, #96]	; (800e5ac <_Balloc+0x78>)
 800e54c:	4818      	ldr	r0, [pc, #96]	; (800e5b0 <_Balloc+0x7c>)
 800e54e:	216b      	movs	r1, #107	; 0x6b
 800e550:	f001 fcea 	bl	800ff28 <__assert_func>
 800e554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e558:	6006      	str	r6, [r0, #0]
 800e55a:	60c6      	str	r6, [r0, #12]
 800e55c:	69e6      	ldr	r6, [r4, #28]
 800e55e:	68f3      	ldr	r3, [r6, #12]
 800e560:	b183      	cbz	r3, 800e584 <_Balloc+0x50>
 800e562:	69e3      	ldr	r3, [r4, #28]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e56a:	b9b8      	cbnz	r0, 800e59c <_Balloc+0x68>
 800e56c:	2101      	movs	r1, #1
 800e56e:	fa01 f605 	lsl.w	r6, r1, r5
 800e572:	1d72      	adds	r2, r6, #5
 800e574:	0092      	lsls	r2, r2, #2
 800e576:	4620      	mov	r0, r4
 800e578:	f001 fcf4 	bl	800ff64 <_calloc_r>
 800e57c:	b160      	cbz	r0, 800e598 <_Balloc+0x64>
 800e57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e582:	e00e      	b.n	800e5a2 <_Balloc+0x6e>
 800e584:	2221      	movs	r2, #33	; 0x21
 800e586:	2104      	movs	r1, #4
 800e588:	4620      	mov	r0, r4
 800e58a:	f001 fceb 	bl	800ff64 <_calloc_r>
 800e58e:	69e3      	ldr	r3, [r4, #28]
 800e590:	60f0      	str	r0, [r6, #12]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1e4      	bne.n	800e562 <_Balloc+0x2e>
 800e598:	2000      	movs	r0, #0
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	6802      	ldr	r2, [r0, #0]
 800e59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5a8:	e7f7      	b.n	800e59a <_Balloc+0x66>
 800e5aa:	bf00      	nop
 800e5ac:	080111e3 	.word	0x080111e3
 800e5b0:	08011263 	.word	0x08011263

0800e5b4 <_Bfree>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	69c6      	ldr	r6, [r0, #28]
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	b976      	cbnz	r6, 800e5dc <_Bfree+0x28>
 800e5be:	2010      	movs	r0, #16
 800e5c0:	f7fd fee0 	bl	800c384 <malloc>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	61e8      	str	r0, [r5, #28]
 800e5c8:	b920      	cbnz	r0, 800e5d4 <_Bfree+0x20>
 800e5ca:	4b09      	ldr	r3, [pc, #36]	; (800e5f0 <_Bfree+0x3c>)
 800e5cc:	4809      	ldr	r0, [pc, #36]	; (800e5f4 <_Bfree+0x40>)
 800e5ce:	218f      	movs	r1, #143	; 0x8f
 800e5d0:	f001 fcaa 	bl	800ff28 <__assert_func>
 800e5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5d8:	6006      	str	r6, [r0, #0]
 800e5da:	60c6      	str	r6, [r0, #12]
 800e5dc:	b13c      	cbz	r4, 800e5ee <_Bfree+0x3a>
 800e5de:	69eb      	ldr	r3, [r5, #28]
 800e5e0:	6862      	ldr	r2, [r4, #4]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5e8:	6021      	str	r1, [r4, #0]
 800e5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	080111e3 	.word	0x080111e3
 800e5f4:	08011263 	.word	0x08011263

0800e5f8 <__multadd>:
 800e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fc:	690d      	ldr	r5, [r1, #16]
 800e5fe:	4607      	mov	r7, r0
 800e600:	460c      	mov	r4, r1
 800e602:	461e      	mov	r6, r3
 800e604:	f101 0c14 	add.w	ip, r1, #20
 800e608:	2000      	movs	r0, #0
 800e60a:	f8dc 3000 	ldr.w	r3, [ip]
 800e60e:	b299      	uxth	r1, r3
 800e610:	fb02 6101 	mla	r1, r2, r1, r6
 800e614:	0c1e      	lsrs	r6, r3, #16
 800e616:	0c0b      	lsrs	r3, r1, #16
 800e618:	fb02 3306 	mla	r3, r2, r6, r3
 800e61c:	b289      	uxth	r1, r1
 800e61e:	3001      	adds	r0, #1
 800e620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e624:	4285      	cmp	r5, r0
 800e626:	f84c 1b04 	str.w	r1, [ip], #4
 800e62a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e62e:	dcec      	bgt.n	800e60a <__multadd+0x12>
 800e630:	b30e      	cbz	r6, 800e676 <__multadd+0x7e>
 800e632:	68a3      	ldr	r3, [r4, #8]
 800e634:	42ab      	cmp	r3, r5
 800e636:	dc19      	bgt.n	800e66c <__multadd+0x74>
 800e638:	6861      	ldr	r1, [r4, #4]
 800e63a:	4638      	mov	r0, r7
 800e63c:	3101      	adds	r1, #1
 800e63e:	f7ff ff79 	bl	800e534 <_Balloc>
 800e642:	4680      	mov	r8, r0
 800e644:	b928      	cbnz	r0, 800e652 <__multadd+0x5a>
 800e646:	4602      	mov	r2, r0
 800e648:	4b0c      	ldr	r3, [pc, #48]	; (800e67c <__multadd+0x84>)
 800e64a:	480d      	ldr	r0, [pc, #52]	; (800e680 <__multadd+0x88>)
 800e64c:	21ba      	movs	r1, #186	; 0xba
 800e64e:	f001 fc6b 	bl	800ff28 <__assert_func>
 800e652:	6922      	ldr	r2, [r4, #16]
 800e654:	3202      	adds	r2, #2
 800e656:	f104 010c 	add.w	r1, r4, #12
 800e65a:	0092      	lsls	r2, r2, #2
 800e65c:	300c      	adds	r0, #12
 800e65e:	f7ff f88c 	bl	800d77a <memcpy>
 800e662:	4621      	mov	r1, r4
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff ffa5 	bl	800e5b4 <_Bfree>
 800e66a:	4644      	mov	r4, r8
 800e66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e670:	3501      	adds	r5, #1
 800e672:	615e      	str	r6, [r3, #20]
 800e674:	6125      	str	r5, [r4, #16]
 800e676:	4620      	mov	r0, r4
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	08011252 	.word	0x08011252
 800e680:	08011263 	.word	0x08011263

0800e684 <__s2b>:
 800e684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e688:	460c      	mov	r4, r1
 800e68a:	4615      	mov	r5, r2
 800e68c:	461f      	mov	r7, r3
 800e68e:	2209      	movs	r2, #9
 800e690:	3308      	adds	r3, #8
 800e692:	4606      	mov	r6, r0
 800e694:	fb93 f3f2 	sdiv	r3, r3, r2
 800e698:	2100      	movs	r1, #0
 800e69a:	2201      	movs	r2, #1
 800e69c:	429a      	cmp	r2, r3
 800e69e:	db09      	blt.n	800e6b4 <__s2b+0x30>
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f7ff ff47 	bl	800e534 <_Balloc>
 800e6a6:	b940      	cbnz	r0, 800e6ba <__s2b+0x36>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	4b19      	ldr	r3, [pc, #100]	; (800e710 <__s2b+0x8c>)
 800e6ac:	4819      	ldr	r0, [pc, #100]	; (800e714 <__s2b+0x90>)
 800e6ae:	21d3      	movs	r1, #211	; 0xd3
 800e6b0:	f001 fc3a 	bl	800ff28 <__assert_func>
 800e6b4:	0052      	lsls	r2, r2, #1
 800e6b6:	3101      	adds	r1, #1
 800e6b8:	e7f0      	b.n	800e69c <__s2b+0x18>
 800e6ba:	9b08      	ldr	r3, [sp, #32]
 800e6bc:	6143      	str	r3, [r0, #20]
 800e6be:	2d09      	cmp	r5, #9
 800e6c0:	f04f 0301 	mov.w	r3, #1
 800e6c4:	6103      	str	r3, [r0, #16]
 800e6c6:	dd16      	ble.n	800e6f6 <__s2b+0x72>
 800e6c8:	f104 0909 	add.w	r9, r4, #9
 800e6cc:	46c8      	mov	r8, r9
 800e6ce:	442c      	add	r4, r5
 800e6d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6d4:	4601      	mov	r1, r0
 800e6d6:	3b30      	subs	r3, #48	; 0x30
 800e6d8:	220a      	movs	r2, #10
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f7ff ff8c 	bl	800e5f8 <__multadd>
 800e6e0:	45a0      	cmp	r8, r4
 800e6e2:	d1f5      	bne.n	800e6d0 <__s2b+0x4c>
 800e6e4:	f1a5 0408 	sub.w	r4, r5, #8
 800e6e8:	444c      	add	r4, r9
 800e6ea:	1b2d      	subs	r5, r5, r4
 800e6ec:	1963      	adds	r3, r4, r5
 800e6ee:	42bb      	cmp	r3, r7
 800e6f0:	db04      	blt.n	800e6fc <__s2b+0x78>
 800e6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f6:	340a      	adds	r4, #10
 800e6f8:	2509      	movs	r5, #9
 800e6fa:	e7f6      	b.n	800e6ea <__s2b+0x66>
 800e6fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e700:	4601      	mov	r1, r0
 800e702:	3b30      	subs	r3, #48	; 0x30
 800e704:	220a      	movs	r2, #10
 800e706:	4630      	mov	r0, r6
 800e708:	f7ff ff76 	bl	800e5f8 <__multadd>
 800e70c:	e7ee      	b.n	800e6ec <__s2b+0x68>
 800e70e:	bf00      	nop
 800e710:	08011252 	.word	0x08011252
 800e714:	08011263 	.word	0x08011263

0800e718 <__hi0bits>:
 800e718:	0c03      	lsrs	r3, r0, #16
 800e71a:	041b      	lsls	r3, r3, #16
 800e71c:	b9d3      	cbnz	r3, 800e754 <__hi0bits+0x3c>
 800e71e:	0400      	lsls	r0, r0, #16
 800e720:	2310      	movs	r3, #16
 800e722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e726:	bf04      	itt	eq
 800e728:	0200      	lsleq	r0, r0, #8
 800e72a:	3308      	addeq	r3, #8
 800e72c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e730:	bf04      	itt	eq
 800e732:	0100      	lsleq	r0, r0, #4
 800e734:	3304      	addeq	r3, #4
 800e736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e73a:	bf04      	itt	eq
 800e73c:	0080      	lsleq	r0, r0, #2
 800e73e:	3302      	addeq	r3, #2
 800e740:	2800      	cmp	r0, #0
 800e742:	db05      	blt.n	800e750 <__hi0bits+0x38>
 800e744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e748:	f103 0301 	add.w	r3, r3, #1
 800e74c:	bf08      	it	eq
 800e74e:	2320      	moveq	r3, #32
 800e750:	4618      	mov	r0, r3
 800e752:	4770      	bx	lr
 800e754:	2300      	movs	r3, #0
 800e756:	e7e4      	b.n	800e722 <__hi0bits+0xa>

0800e758 <__lo0bits>:
 800e758:	6803      	ldr	r3, [r0, #0]
 800e75a:	f013 0207 	ands.w	r2, r3, #7
 800e75e:	d00c      	beq.n	800e77a <__lo0bits+0x22>
 800e760:	07d9      	lsls	r1, r3, #31
 800e762:	d422      	bmi.n	800e7aa <__lo0bits+0x52>
 800e764:	079a      	lsls	r2, r3, #30
 800e766:	bf49      	itett	mi
 800e768:	085b      	lsrmi	r3, r3, #1
 800e76a:	089b      	lsrpl	r3, r3, #2
 800e76c:	6003      	strmi	r3, [r0, #0]
 800e76e:	2201      	movmi	r2, #1
 800e770:	bf5c      	itt	pl
 800e772:	6003      	strpl	r3, [r0, #0]
 800e774:	2202      	movpl	r2, #2
 800e776:	4610      	mov	r0, r2
 800e778:	4770      	bx	lr
 800e77a:	b299      	uxth	r1, r3
 800e77c:	b909      	cbnz	r1, 800e782 <__lo0bits+0x2a>
 800e77e:	0c1b      	lsrs	r3, r3, #16
 800e780:	2210      	movs	r2, #16
 800e782:	b2d9      	uxtb	r1, r3
 800e784:	b909      	cbnz	r1, 800e78a <__lo0bits+0x32>
 800e786:	3208      	adds	r2, #8
 800e788:	0a1b      	lsrs	r3, r3, #8
 800e78a:	0719      	lsls	r1, r3, #28
 800e78c:	bf04      	itt	eq
 800e78e:	091b      	lsreq	r3, r3, #4
 800e790:	3204      	addeq	r2, #4
 800e792:	0799      	lsls	r1, r3, #30
 800e794:	bf04      	itt	eq
 800e796:	089b      	lsreq	r3, r3, #2
 800e798:	3202      	addeq	r2, #2
 800e79a:	07d9      	lsls	r1, r3, #31
 800e79c:	d403      	bmi.n	800e7a6 <__lo0bits+0x4e>
 800e79e:	085b      	lsrs	r3, r3, #1
 800e7a0:	f102 0201 	add.w	r2, r2, #1
 800e7a4:	d003      	beq.n	800e7ae <__lo0bits+0x56>
 800e7a6:	6003      	str	r3, [r0, #0]
 800e7a8:	e7e5      	b.n	800e776 <__lo0bits+0x1e>
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	e7e3      	b.n	800e776 <__lo0bits+0x1e>
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	e7e1      	b.n	800e776 <__lo0bits+0x1e>
	...

0800e7b4 <__i2b>:
 800e7b4:	b510      	push	{r4, lr}
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	f7ff febb 	bl	800e534 <_Balloc>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	b928      	cbnz	r0, 800e7ce <__i2b+0x1a>
 800e7c2:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <__i2b+0x24>)
 800e7c4:	4805      	ldr	r0, [pc, #20]	; (800e7dc <__i2b+0x28>)
 800e7c6:	f240 1145 	movw	r1, #325	; 0x145
 800e7ca:	f001 fbad 	bl	800ff28 <__assert_func>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	6144      	str	r4, [r0, #20]
 800e7d2:	6103      	str	r3, [r0, #16]
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	bf00      	nop
 800e7d8:	08011252 	.word	0x08011252
 800e7dc:	08011263 	.word	0x08011263

0800e7e0 <__multiply>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	4691      	mov	r9, r2
 800e7e6:	690a      	ldr	r2, [r1, #16]
 800e7e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	bfb8      	it	lt
 800e7f0:	460b      	movlt	r3, r1
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	bfbc      	itt	lt
 800e7f6:	464c      	movlt	r4, r9
 800e7f8:	4699      	movlt	r9, r3
 800e7fa:	6927      	ldr	r7, [r4, #16]
 800e7fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e800:	68a3      	ldr	r3, [r4, #8]
 800e802:	6861      	ldr	r1, [r4, #4]
 800e804:	eb07 060a 	add.w	r6, r7, sl
 800e808:	42b3      	cmp	r3, r6
 800e80a:	b085      	sub	sp, #20
 800e80c:	bfb8      	it	lt
 800e80e:	3101      	addlt	r1, #1
 800e810:	f7ff fe90 	bl	800e534 <_Balloc>
 800e814:	b930      	cbnz	r0, 800e824 <__multiply+0x44>
 800e816:	4602      	mov	r2, r0
 800e818:	4b44      	ldr	r3, [pc, #272]	; (800e92c <__multiply+0x14c>)
 800e81a:	4845      	ldr	r0, [pc, #276]	; (800e930 <__multiply+0x150>)
 800e81c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e820:	f001 fb82 	bl	800ff28 <__assert_func>
 800e824:	f100 0514 	add.w	r5, r0, #20
 800e828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e82c:	462b      	mov	r3, r5
 800e82e:	2200      	movs	r2, #0
 800e830:	4543      	cmp	r3, r8
 800e832:	d321      	bcc.n	800e878 <__multiply+0x98>
 800e834:	f104 0314 	add.w	r3, r4, #20
 800e838:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e83c:	f109 0314 	add.w	r3, r9, #20
 800e840:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e844:	9202      	str	r2, [sp, #8]
 800e846:	1b3a      	subs	r2, r7, r4
 800e848:	3a15      	subs	r2, #21
 800e84a:	f022 0203 	bic.w	r2, r2, #3
 800e84e:	3204      	adds	r2, #4
 800e850:	f104 0115 	add.w	r1, r4, #21
 800e854:	428f      	cmp	r7, r1
 800e856:	bf38      	it	cc
 800e858:	2204      	movcc	r2, #4
 800e85a:	9201      	str	r2, [sp, #4]
 800e85c:	9a02      	ldr	r2, [sp, #8]
 800e85e:	9303      	str	r3, [sp, #12]
 800e860:	429a      	cmp	r2, r3
 800e862:	d80c      	bhi.n	800e87e <__multiply+0x9e>
 800e864:	2e00      	cmp	r6, #0
 800e866:	dd03      	ble.n	800e870 <__multiply+0x90>
 800e868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d05b      	beq.n	800e928 <__multiply+0x148>
 800e870:	6106      	str	r6, [r0, #16]
 800e872:	b005      	add	sp, #20
 800e874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e878:	f843 2b04 	str.w	r2, [r3], #4
 800e87c:	e7d8      	b.n	800e830 <__multiply+0x50>
 800e87e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e882:	f1ba 0f00 	cmp.w	sl, #0
 800e886:	d024      	beq.n	800e8d2 <__multiply+0xf2>
 800e888:	f104 0e14 	add.w	lr, r4, #20
 800e88c:	46a9      	mov	r9, r5
 800e88e:	f04f 0c00 	mov.w	ip, #0
 800e892:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e896:	f8d9 1000 	ldr.w	r1, [r9]
 800e89a:	fa1f fb82 	uxth.w	fp, r2
 800e89e:	b289      	uxth	r1, r1
 800e8a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8a8:	f8d9 2000 	ldr.w	r2, [r9]
 800e8ac:	4461      	add	r1, ip
 800e8ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e8b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e8ba:	b289      	uxth	r1, r1
 800e8bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e8c0:	4577      	cmp	r7, lr
 800e8c2:	f849 1b04 	str.w	r1, [r9], #4
 800e8c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8ca:	d8e2      	bhi.n	800e892 <__multiply+0xb2>
 800e8cc:	9a01      	ldr	r2, [sp, #4]
 800e8ce:	f845 c002 	str.w	ip, [r5, r2]
 800e8d2:	9a03      	ldr	r2, [sp, #12]
 800e8d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	f1b9 0f00 	cmp.w	r9, #0
 800e8de:	d021      	beq.n	800e924 <__multiply+0x144>
 800e8e0:	6829      	ldr	r1, [r5, #0]
 800e8e2:	f104 0c14 	add.w	ip, r4, #20
 800e8e6:	46ae      	mov	lr, r5
 800e8e8:	f04f 0a00 	mov.w	sl, #0
 800e8ec:	f8bc b000 	ldrh.w	fp, [ip]
 800e8f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e8f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e8f8:	4452      	add	r2, sl
 800e8fa:	b289      	uxth	r1, r1
 800e8fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e900:	f84e 1b04 	str.w	r1, [lr], #4
 800e904:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e90c:	f8be 1000 	ldrh.w	r1, [lr]
 800e910:	fb09 110a 	mla	r1, r9, sl, r1
 800e914:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e918:	4567      	cmp	r7, ip
 800e91a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e91e:	d8e5      	bhi.n	800e8ec <__multiply+0x10c>
 800e920:	9a01      	ldr	r2, [sp, #4]
 800e922:	50a9      	str	r1, [r5, r2]
 800e924:	3504      	adds	r5, #4
 800e926:	e799      	b.n	800e85c <__multiply+0x7c>
 800e928:	3e01      	subs	r6, #1
 800e92a:	e79b      	b.n	800e864 <__multiply+0x84>
 800e92c:	08011252 	.word	0x08011252
 800e930:	08011263 	.word	0x08011263

0800e934 <__pow5mult>:
 800e934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e938:	4615      	mov	r5, r2
 800e93a:	f012 0203 	ands.w	r2, r2, #3
 800e93e:	4606      	mov	r6, r0
 800e940:	460f      	mov	r7, r1
 800e942:	d007      	beq.n	800e954 <__pow5mult+0x20>
 800e944:	4c25      	ldr	r4, [pc, #148]	; (800e9dc <__pow5mult+0xa8>)
 800e946:	3a01      	subs	r2, #1
 800e948:	2300      	movs	r3, #0
 800e94a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e94e:	f7ff fe53 	bl	800e5f8 <__multadd>
 800e952:	4607      	mov	r7, r0
 800e954:	10ad      	asrs	r5, r5, #2
 800e956:	d03d      	beq.n	800e9d4 <__pow5mult+0xa0>
 800e958:	69f4      	ldr	r4, [r6, #28]
 800e95a:	b97c      	cbnz	r4, 800e97c <__pow5mult+0x48>
 800e95c:	2010      	movs	r0, #16
 800e95e:	f7fd fd11 	bl	800c384 <malloc>
 800e962:	4602      	mov	r2, r0
 800e964:	61f0      	str	r0, [r6, #28]
 800e966:	b928      	cbnz	r0, 800e974 <__pow5mult+0x40>
 800e968:	4b1d      	ldr	r3, [pc, #116]	; (800e9e0 <__pow5mult+0xac>)
 800e96a:	481e      	ldr	r0, [pc, #120]	; (800e9e4 <__pow5mult+0xb0>)
 800e96c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e970:	f001 fada 	bl	800ff28 <__assert_func>
 800e974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e978:	6004      	str	r4, [r0, #0]
 800e97a:	60c4      	str	r4, [r0, #12]
 800e97c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e984:	b94c      	cbnz	r4, 800e99a <__pow5mult+0x66>
 800e986:	f240 2171 	movw	r1, #625	; 0x271
 800e98a:	4630      	mov	r0, r6
 800e98c:	f7ff ff12 	bl	800e7b4 <__i2b>
 800e990:	2300      	movs	r3, #0
 800e992:	f8c8 0008 	str.w	r0, [r8, #8]
 800e996:	4604      	mov	r4, r0
 800e998:	6003      	str	r3, [r0, #0]
 800e99a:	f04f 0900 	mov.w	r9, #0
 800e99e:	07eb      	lsls	r3, r5, #31
 800e9a0:	d50a      	bpl.n	800e9b8 <__pow5mult+0x84>
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f7ff ff1a 	bl	800e7e0 <__multiply>
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	4680      	mov	r8, r0
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f7ff fdff 	bl	800e5b4 <_Bfree>
 800e9b6:	4647      	mov	r7, r8
 800e9b8:	106d      	asrs	r5, r5, #1
 800e9ba:	d00b      	beq.n	800e9d4 <__pow5mult+0xa0>
 800e9bc:	6820      	ldr	r0, [r4, #0]
 800e9be:	b938      	cbnz	r0, 800e9d0 <__pow5mult+0x9c>
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	4621      	mov	r1, r4
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff ff0b 	bl	800e7e0 <__multiply>
 800e9ca:	6020      	str	r0, [r4, #0]
 800e9cc:	f8c0 9000 	str.w	r9, [r0]
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	e7e4      	b.n	800e99e <__pow5mult+0x6a>
 800e9d4:	4638      	mov	r0, r7
 800e9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9da:	bf00      	nop
 800e9dc:	080113b0 	.word	0x080113b0
 800e9e0:	080111e3 	.word	0x080111e3
 800e9e4:	08011263 	.word	0x08011263

0800e9e8 <__lshift>:
 800e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	6849      	ldr	r1, [r1, #4]
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9f6:	68a3      	ldr	r3, [r4, #8]
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	4691      	mov	r9, r2
 800e9fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea00:	f108 0601 	add.w	r6, r8, #1
 800ea04:	42b3      	cmp	r3, r6
 800ea06:	db0b      	blt.n	800ea20 <__lshift+0x38>
 800ea08:	4638      	mov	r0, r7
 800ea0a:	f7ff fd93 	bl	800e534 <_Balloc>
 800ea0e:	4605      	mov	r5, r0
 800ea10:	b948      	cbnz	r0, 800ea26 <__lshift+0x3e>
 800ea12:	4602      	mov	r2, r0
 800ea14:	4b28      	ldr	r3, [pc, #160]	; (800eab8 <__lshift+0xd0>)
 800ea16:	4829      	ldr	r0, [pc, #164]	; (800eabc <__lshift+0xd4>)
 800ea18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ea1c:	f001 fa84 	bl	800ff28 <__assert_func>
 800ea20:	3101      	adds	r1, #1
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	e7ee      	b.n	800ea04 <__lshift+0x1c>
 800ea26:	2300      	movs	r3, #0
 800ea28:	f100 0114 	add.w	r1, r0, #20
 800ea2c:	f100 0210 	add.w	r2, r0, #16
 800ea30:	4618      	mov	r0, r3
 800ea32:	4553      	cmp	r3, sl
 800ea34:	db33      	blt.n	800ea9e <__lshift+0xb6>
 800ea36:	6920      	ldr	r0, [r4, #16]
 800ea38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea3c:	f104 0314 	add.w	r3, r4, #20
 800ea40:	f019 091f 	ands.w	r9, r9, #31
 800ea44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea4c:	d02b      	beq.n	800eaa6 <__lshift+0xbe>
 800ea4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ea52:	468a      	mov	sl, r1
 800ea54:	2200      	movs	r2, #0
 800ea56:	6818      	ldr	r0, [r3, #0]
 800ea58:	fa00 f009 	lsl.w	r0, r0, r9
 800ea5c:	4310      	orrs	r0, r2
 800ea5e:	f84a 0b04 	str.w	r0, [sl], #4
 800ea62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea66:	459c      	cmp	ip, r3
 800ea68:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea6c:	d8f3      	bhi.n	800ea56 <__lshift+0x6e>
 800ea6e:	ebac 0304 	sub.w	r3, ip, r4
 800ea72:	3b15      	subs	r3, #21
 800ea74:	f023 0303 	bic.w	r3, r3, #3
 800ea78:	3304      	adds	r3, #4
 800ea7a:	f104 0015 	add.w	r0, r4, #21
 800ea7e:	4584      	cmp	ip, r0
 800ea80:	bf38      	it	cc
 800ea82:	2304      	movcc	r3, #4
 800ea84:	50ca      	str	r2, [r1, r3]
 800ea86:	b10a      	cbz	r2, 800ea8c <__lshift+0xa4>
 800ea88:	f108 0602 	add.w	r6, r8, #2
 800ea8c:	3e01      	subs	r6, #1
 800ea8e:	4638      	mov	r0, r7
 800ea90:	612e      	str	r6, [r5, #16]
 800ea92:	4621      	mov	r1, r4
 800ea94:	f7ff fd8e 	bl	800e5b4 <_Bfree>
 800ea98:	4628      	mov	r0, r5
 800ea9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	e7c5      	b.n	800ea32 <__lshift+0x4a>
 800eaa6:	3904      	subs	r1, #4
 800eaa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaac:	f841 2f04 	str.w	r2, [r1, #4]!
 800eab0:	459c      	cmp	ip, r3
 800eab2:	d8f9      	bhi.n	800eaa8 <__lshift+0xc0>
 800eab4:	e7ea      	b.n	800ea8c <__lshift+0xa4>
 800eab6:	bf00      	nop
 800eab8:	08011252 	.word	0x08011252
 800eabc:	08011263 	.word	0x08011263

0800eac0 <__mcmp>:
 800eac0:	b530      	push	{r4, r5, lr}
 800eac2:	6902      	ldr	r2, [r0, #16]
 800eac4:	690c      	ldr	r4, [r1, #16]
 800eac6:	1b12      	subs	r2, r2, r4
 800eac8:	d10e      	bne.n	800eae8 <__mcmp+0x28>
 800eaca:	f100 0314 	add.w	r3, r0, #20
 800eace:	3114      	adds	r1, #20
 800ead0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ead4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ead8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eadc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eae0:	42a5      	cmp	r5, r4
 800eae2:	d003      	beq.n	800eaec <__mcmp+0x2c>
 800eae4:	d305      	bcc.n	800eaf2 <__mcmp+0x32>
 800eae6:	2201      	movs	r2, #1
 800eae8:	4610      	mov	r0, r2
 800eaea:	bd30      	pop	{r4, r5, pc}
 800eaec:	4283      	cmp	r3, r0
 800eaee:	d3f3      	bcc.n	800ead8 <__mcmp+0x18>
 800eaf0:	e7fa      	b.n	800eae8 <__mcmp+0x28>
 800eaf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaf6:	e7f7      	b.n	800eae8 <__mcmp+0x28>

0800eaf8 <__mdiff>:
 800eaf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eafc:	460c      	mov	r4, r1
 800eafe:	4606      	mov	r6, r0
 800eb00:	4611      	mov	r1, r2
 800eb02:	4620      	mov	r0, r4
 800eb04:	4690      	mov	r8, r2
 800eb06:	f7ff ffdb 	bl	800eac0 <__mcmp>
 800eb0a:	1e05      	subs	r5, r0, #0
 800eb0c:	d110      	bne.n	800eb30 <__mdiff+0x38>
 800eb0e:	4629      	mov	r1, r5
 800eb10:	4630      	mov	r0, r6
 800eb12:	f7ff fd0f 	bl	800e534 <_Balloc>
 800eb16:	b930      	cbnz	r0, 800eb26 <__mdiff+0x2e>
 800eb18:	4b3a      	ldr	r3, [pc, #232]	; (800ec04 <__mdiff+0x10c>)
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	f240 2137 	movw	r1, #567	; 0x237
 800eb20:	4839      	ldr	r0, [pc, #228]	; (800ec08 <__mdiff+0x110>)
 800eb22:	f001 fa01 	bl	800ff28 <__assert_func>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb30:	bfa4      	itt	ge
 800eb32:	4643      	movge	r3, r8
 800eb34:	46a0      	movge	r8, r4
 800eb36:	4630      	mov	r0, r6
 800eb38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb3c:	bfa6      	itte	ge
 800eb3e:	461c      	movge	r4, r3
 800eb40:	2500      	movge	r5, #0
 800eb42:	2501      	movlt	r5, #1
 800eb44:	f7ff fcf6 	bl	800e534 <_Balloc>
 800eb48:	b920      	cbnz	r0, 800eb54 <__mdiff+0x5c>
 800eb4a:	4b2e      	ldr	r3, [pc, #184]	; (800ec04 <__mdiff+0x10c>)
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	f240 2145 	movw	r1, #581	; 0x245
 800eb52:	e7e5      	b.n	800eb20 <__mdiff+0x28>
 800eb54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb58:	6926      	ldr	r6, [r4, #16]
 800eb5a:	60c5      	str	r5, [r0, #12]
 800eb5c:	f104 0914 	add.w	r9, r4, #20
 800eb60:	f108 0514 	add.w	r5, r8, #20
 800eb64:	f100 0e14 	add.w	lr, r0, #20
 800eb68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb70:	f108 0210 	add.w	r2, r8, #16
 800eb74:	46f2      	mov	sl, lr
 800eb76:	2100      	movs	r1, #0
 800eb78:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb80:	fa11 f88b 	uxtah	r8, r1, fp
 800eb84:	b299      	uxth	r1, r3
 800eb86:	0c1b      	lsrs	r3, r3, #16
 800eb88:	eba8 0801 	sub.w	r8, r8, r1
 800eb8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb94:	fa1f f888 	uxth.w	r8, r8
 800eb98:	1419      	asrs	r1, r3, #16
 800eb9a:	454e      	cmp	r6, r9
 800eb9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eba0:	f84a 3b04 	str.w	r3, [sl], #4
 800eba4:	d8e8      	bhi.n	800eb78 <__mdiff+0x80>
 800eba6:	1b33      	subs	r3, r6, r4
 800eba8:	3b15      	subs	r3, #21
 800ebaa:	f023 0303 	bic.w	r3, r3, #3
 800ebae:	3304      	adds	r3, #4
 800ebb0:	3415      	adds	r4, #21
 800ebb2:	42a6      	cmp	r6, r4
 800ebb4:	bf38      	it	cc
 800ebb6:	2304      	movcc	r3, #4
 800ebb8:	441d      	add	r5, r3
 800ebba:	4473      	add	r3, lr
 800ebbc:	469e      	mov	lr, r3
 800ebbe:	462e      	mov	r6, r5
 800ebc0:	4566      	cmp	r6, ip
 800ebc2:	d30e      	bcc.n	800ebe2 <__mdiff+0xea>
 800ebc4:	f10c 0203 	add.w	r2, ip, #3
 800ebc8:	1b52      	subs	r2, r2, r5
 800ebca:	f022 0203 	bic.w	r2, r2, #3
 800ebce:	3d03      	subs	r5, #3
 800ebd0:	45ac      	cmp	ip, r5
 800ebd2:	bf38      	it	cc
 800ebd4:	2200      	movcc	r2, #0
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ebdc:	b17a      	cbz	r2, 800ebfe <__mdiff+0x106>
 800ebde:	6107      	str	r7, [r0, #16]
 800ebe0:	e7a4      	b.n	800eb2c <__mdiff+0x34>
 800ebe2:	f856 8b04 	ldr.w	r8, [r6], #4
 800ebe6:	fa11 f288 	uxtah	r2, r1, r8
 800ebea:	1414      	asrs	r4, r2, #16
 800ebec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ebf0:	b292      	uxth	r2, r2
 800ebf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ebf6:	f84e 2b04 	str.w	r2, [lr], #4
 800ebfa:	1421      	asrs	r1, r4, #16
 800ebfc:	e7e0      	b.n	800ebc0 <__mdiff+0xc8>
 800ebfe:	3f01      	subs	r7, #1
 800ec00:	e7ea      	b.n	800ebd8 <__mdiff+0xe0>
 800ec02:	bf00      	nop
 800ec04:	08011252 	.word	0x08011252
 800ec08:	08011263 	.word	0x08011263

0800ec0c <__ulp>:
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	ed8d 0b00 	vstr	d0, [sp]
 800ec12:	9a01      	ldr	r2, [sp, #4]
 800ec14:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <__ulp+0x48>)
 800ec16:	4013      	ands	r3, r2
 800ec18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	dc08      	bgt.n	800ec32 <__ulp+0x26>
 800ec20:	425b      	negs	r3, r3
 800ec22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ec26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec2a:	da04      	bge.n	800ec36 <__ulp+0x2a>
 800ec2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ec30:	4113      	asrs	r3, r2
 800ec32:	2200      	movs	r2, #0
 800ec34:	e008      	b.n	800ec48 <__ulp+0x3c>
 800ec36:	f1a2 0314 	sub.w	r3, r2, #20
 800ec3a:	2b1e      	cmp	r3, #30
 800ec3c:	bfda      	itte	le
 800ec3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ec42:	40da      	lsrle	r2, r3
 800ec44:	2201      	movgt	r2, #1
 800ec46:	2300      	movs	r3, #0
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	ec41 0b10 	vmov	d0, r0, r1
 800ec50:	b002      	add	sp, #8
 800ec52:	4770      	bx	lr
 800ec54:	7ff00000 	.word	0x7ff00000

0800ec58 <__b2d>:
 800ec58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5c:	6906      	ldr	r6, [r0, #16]
 800ec5e:	f100 0814 	add.w	r8, r0, #20
 800ec62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec66:	1f37      	subs	r7, r6, #4
 800ec68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7ff fd53 	bl	800e718 <__hi0bits>
 800ec72:	f1c0 0320 	rsb	r3, r0, #32
 800ec76:	280a      	cmp	r0, #10
 800ec78:	600b      	str	r3, [r1, #0]
 800ec7a:	491b      	ldr	r1, [pc, #108]	; (800ece8 <__b2d+0x90>)
 800ec7c:	dc15      	bgt.n	800ecaa <__b2d+0x52>
 800ec7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec82:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec86:	45b8      	cmp	r8, r7
 800ec88:	ea43 0501 	orr.w	r5, r3, r1
 800ec8c:	bf34      	ite	cc
 800ec8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec92:	2300      	movcs	r3, #0
 800ec94:	3015      	adds	r0, #21
 800ec96:	fa02 f000 	lsl.w	r0, r2, r0
 800ec9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ec9e:	4303      	orrs	r3, r0
 800eca0:	461c      	mov	r4, r3
 800eca2:	ec45 4b10 	vmov	d0, r4, r5
 800eca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecaa:	45b8      	cmp	r8, r7
 800ecac:	bf3a      	itte	cc
 800ecae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800ecb6:	2300      	movcs	r3, #0
 800ecb8:	380b      	subs	r0, #11
 800ecba:	d012      	beq.n	800ece2 <__b2d+0x8a>
 800ecbc:	f1c0 0120 	rsb	r1, r0, #32
 800ecc0:	fa23 f401 	lsr.w	r4, r3, r1
 800ecc4:	4082      	lsls	r2, r0
 800ecc6:	4322      	orrs	r2, r4
 800ecc8:	4547      	cmp	r7, r8
 800ecca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ecce:	bf8c      	ite	hi
 800ecd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ecd4:	2200      	movls	r2, #0
 800ecd6:	4083      	lsls	r3, r0
 800ecd8:	40ca      	lsrs	r2, r1
 800ecda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ecde:	4313      	orrs	r3, r2
 800ece0:	e7de      	b.n	800eca0 <__b2d+0x48>
 800ece2:	ea42 0501 	orr.w	r5, r2, r1
 800ece6:	e7db      	b.n	800eca0 <__b2d+0x48>
 800ece8:	3ff00000 	.word	0x3ff00000

0800ecec <__d2b>:
 800ecec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecf0:	460f      	mov	r7, r1
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	ec59 8b10 	vmov	r8, r9, d0
 800ecf8:	4616      	mov	r6, r2
 800ecfa:	f7ff fc1b 	bl	800e534 <_Balloc>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	b930      	cbnz	r0, 800ed10 <__d2b+0x24>
 800ed02:	4602      	mov	r2, r0
 800ed04:	4b24      	ldr	r3, [pc, #144]	; (800ed98 <__d2b+0xac>)
 800ed06:	4825      	ldr	r0, [pc, #148]	; (800ed9c <__d2b+0xb0>)
 800ed08:	f240 310f 	movw	r1, #783	; 0x30f
 800ed0c:	f001 f90c 	bl	800ff28 <__assert_func>
 800ed10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed18:	bb2d      	cbnz	r5, 800ed66 <__d2b+0x7a>
 800ed1a:	9301      	str	r3, [sp, #4]
 800ed1c:	f1b8 0300 	subs.w	r3, r8, #0
 800ed20:	d026      	beq.n	800ed70 <__d2b+0x84>
 800ed22:	4668      	mov	r0, sp
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	f7ff fd17 	bl	800e758 <__lo0bits>
 800ed2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed2e:	b1e8      	cbz	r0, 800ed6c <__d2b+0x80>
 800ed30:	f1c0 0320 	rsb	r3, r0, #32
 800ed34:	fa02 f303 	lsl.w	r3, r2, r3
 800ed38:	430b      	orrs	r3, r1
 800ed3a:	40c2      	lsrs	r2, r0
 800ed3c:	6163      	str	r3, [r4, #20]
 800ed3e:	9201      	str	r2, [sp, #4]
 800ed40:	9b01      	ldr	r3, [sp, #4]
 800ed42:	61a3      	str	r3, [r4, #24]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bf14      	ite	ne
 800ed48:	2202      	movne	r2, #2
 800ed4a:	2201      	moveq	r2, #1
 800ed4c:	6122      	str	r2, [r4, #16]
 800ed4e:	b1bd      	cbz	r5, 800ed80 <__d2b+0x94>
 800ed50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed54:	4405      	add	r5, r0
 800ed56:	603d      	str	r5, [r7, #0]
 800ed58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed5c:	6030      	str	r0, [r6, #0]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	b003      	add	sp, #12
 800ed62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed6a:	e7d6      	b.n	800ed1a <__d2b+0x2e>
 800ed6c:	6161      	str	r1, [r4, #20]
 800ed6e:	e7e7      	b.n	800ed40 <__d2b+0x54>
 800ed70:	a801      	add	r0, sp, #4
 800ed72:	f7ff fcf1 	bl	800e758 <__lo0bits>
 800ed76:	9b01      	ldr	r3, [sp, #4]
 800ed78:	6163      	str	r3, [r4, #20]
 800ed7a:	3020      	adds	r0, #32
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	e7e5      	b.n	800ed4c <__d2b+0x60>
 800ed80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed88:	6038      	str	r0, [r7, #0]
 800ed8a:	6918      	ldr	r0, [r3, #16]
 800ed8c:	f7ff fcc4 	bl	800e718 <__hi0bits>
 800ed90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed94:	e7e2      	b.n	800ed5c <__d2b+0x70>
 800ed96:	bf00      	nop
 800ed98:	08011252 	.word	0x08011252
 800ed9c:	08011263 	.word	0x08011263

0800eda0 <__ratio>:
 800eda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	4688      	mov	r8, r1
 800eda6:	4669      	mov	r1, sp
 800eda8:	4681      	mov	r9, r0
 800edaa:	f7ff ff55 	bl	800ec58 <__b2d>
 800edae:	a901      	add	r1, sp, #4
 800edb0:	4640      	mov	r0, r8
 800edb2:	ec55 4b10 	vmov	r4, r5, d0
 800edb6:	f7ff ff4f 	bl	800ec58 <__b2d>
 800edba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800edbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800edc2:	eba3 0c02 	sub.w	ip, r3, r2
 800edc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800edca:	1a9b      	subs	r3, r3, r2
 800edcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800edd0:	ec51 0b10 	vmov	r0, r1, d0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	bfd6      	itet	le
 800edd8:	460a      	movle	r2, r1
 800edda:	462a      	movgt	r2, r5
 800eddc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ede0:	468b      	mov	fp, r1
 800ede2:	462f      	mov	r7, r5
 800ede4:	bfd4      	ite	le
 800ede6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800edea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800edee:	4620      	mov	r0, r4
 800edf0:	ee10 2a10 	vmov	r2, s0
 800edf4:	465b      	mov	r3, fp
 800edf6:	4639      	mov	r1, r7
 800edf8:	f7f1 fd28 	bl	800084c <__aeabi_ddiv>
 800edfc:	ec41 0b10 	vmov	d0, r0, r1
 800ee00:	b003      	add	sp, #12
 800ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee06 <__copybits>:
 800ee06:	3901      	subs	r1, #1
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	1149      	asrs	r1, r1, #5
 800ee0c:	6914      	ldr	r4, [r2, #16]
 800ee0e:	3101      	adds	r1, #1
 800ee10:	f102 0314 	add.w	r3, r2, #20
 800ee14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee1c:	1f05      	subs	r5, r0, #4
 800ee1e:	42a3      	cmp	r3, r4
 800ee20:	d30c      	bcc.n	800ee3c <__copybits+0x36>
 800ee22:	1aa3      	subs	r3, r4, r2
 800ee24:	3b11      	subs	r3, #17
 800ee26:	f023 0303 	bic.w	r3, r3, #3
 800ee2a:	3211      	adds	r2, #17
 800ee2c:	42a2      	cmp	r2, r4
 800ee2e:	bf88      	it	hi
 800ee30:	2300      	movhi	r3, #0
 800ee32:	4418      	add	r0, r3
 800ee34:	2300      	movs	r3, #0
 800ee36:	4288      	cmp	r0, r1
 800ee38:	d305      	bcc.n	800ee46 <__copybits+0x40>
 800ee3a:	bd70      	pop	{r4, r5, r6, pc}
 800ee3c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee40:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee44:	e7eb      	b.n	800ee1e <__copybits+0x18>
 800ee46:	f840 3b04 	str.w	r3, [r0], #4
 800ee4a:	e7f4      	b.n	800ee36 <__copybits+0x30>

0800ee4c <__any_on>:
 800ee4c:	f100 0214 	add.w	r2, r0, #20
 800ee50:	6900      	ldr	r0, [r0, #16]
 800ee52:	114b      	asrs	r3, r1, #5
 800ee54:	4298      	cmp	r0, r3
 800ee56:	b510      	push	{r4, lr}
 800ee58:	db11      	blt.n	800ee7e <__any_on+0x32>
 800ee5a:	dd0a      	ble.n	800ee72 <__any_on+0x26>
 800ee5c:	f011 011f 	ands.w	r1, r1, #31
 800ee60:	d007      	beq.n	800ee72 <__any_on+0x26>
 800ee62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee66:	fa24 f001 	lsr.w	r0, r4, r1
 800ee6a:	fa00 f101 	lsl.w	r1, r0, r1
 800ee6e:	428c      	cmp	r4, r1
 800ee70:	d10b      	bne.n	800ee8a <__any_on+0x3e>
 800ee72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d803      	bhi.n	800ee82 <__any_on+0x36>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	bd10      	pop	{r4, pc}
 800ee7e:	4603      	mov	r3, r0
 800ee80:	e7f7      	b.n	800ee72 <__any_on+0x26>
 800ee82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee86:	2900      	cmp	r1, #0
 800ee88:	d0f5      	beq.n	800ee76 <__any_on+0x2a>
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	e7f6      	b.n	800ee7c <__any_on+0x30>

0800ee8e <sulp>:
 800ee8e:	b570      	push	{r4, r5, r6, lr}
 800ee90:	4604      	mov	r4, r0
 800ee92:	460d      	mov	r5, r1
 800ee94:	ec45 4b10 	vmov	d0, r4, r5
 800ee98:	4616      	mov	r6, r2
 800ee9a:	f7ff feb7 	bl	800ec0c <__ulp>
 800ee9e:	ec51 0b10 	vmov	r0, r1, d0
 800eea2:	b17e      	cbz	r6, 800eec4 <sulp+0x36>
 800eea4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dd09      	ble.n	800eec4 <sulp+0x36>
 800eeb0:	051b      	lsls	r3, r3, #20
 800eeb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eeb6:	2400      	movs	r4, #0
 800eeb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eebc:	4622      	mov	r2, r4
 800eebe:	462b      	mov	r3, r5
 800eec0:	f7f1 fb9a 	bl	80005f8 <__aeabi_dmul>
 800eec4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eec8 <_strtod_l>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	ed2d 8b02 	vpush	{d8}
 800eed0:	b09b      	sub	sp, #108	; 0x6c
 800eed2:	4604      	mov	r4, r0
 800eed4:	9213      	str	r2, [sp, #76]	; 0x4c
 800eed6:	2200      	movs	r2, #0
 800eed8:	9216      	str	r2, [sp, #88]	; 0x58
 800eeda:	460d      	mov	r5, r1
 800eedc:	f04f 0800 	mov.w	r8, #0
 800eee0:	f04f 0900 	mov.w	r9, #0
 800eee4:	460a      	mov	r2, r1
 800eee6:	9215      	str	r2, [sp, #84]	; 0x54
 800eee8:	7811      	ldrb	r1, [r2, #0]
 800eeea:	292b      	cmp	r1, #43	; 0x2b
 800eeec:	d04c      	beq.n	800ef88 <_strtod_l+0xc0>
 800eeee:	d83a      	bhi.n	800ef66 <_strtod_l+0x9e>
 800eef0:	290d      	cmp	r1, #13
 800eef2:	d834      	bhi.n	800ef5e <_strtod_l+0x96>
 800eef4:	2908      	cmp	r1, #8
 800eef6:	d834      	bhi.n	800ef62 <_strtod_l+0x9a>
 800eef8:	2900      	cmp	r1, #0
 800eefa:	d03d      	beq.n	800ef78 <_strtod_l+0xb0>
 800eefc:	2200      	movs	r2, #0
 800eefe:	920a      	str	r2, [sp, #40]	; 0x28
 800ef00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ef02:	7832      	ldrb	r2, [r6, #0]
 800ef04:	2a30      	cmp	r2, #48	; 0x30
 800ef06:	f040 80b4 	bne.w	800f072 <_strtod_l+0x1aa>
 800ef0a:	7872      	ldrb	r2, [r6, #1]
 800ef0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ef10:	2a58      	cmp	r2, #88	; 0x58
 800ef12:	d170      	bne.n	800eff6 <_strtod_l+0x12e>
 800ef14:	9302      	str	r3, [sp, #8]
 800ef16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	ab16      	add	r3, sp, #88	; 0x58
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	4a8e      	ldr	r2, [pc, #568]	; (800f158 <_strtod_l+0x290>)
 800ef20:	ab17      	add	r3, sp, #92	; 0x5c
 800ef22:	a915      	add	r1, sp, #84	; 0x54
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 f89b 	bl	8010060 <__gethex>
 800ef2a:	f010 070f 	ands.w	r7, r0, #15
 800ef2e:	4605      	mov	r5, r0
 800ef30:	d005      	beq.n	800ef3e <_strtod_l+0x76>
 800ef32:	2f06      	cmp	r7, #6
 800ef34:	d12a      	bne.n	800ef8c <_strtod_l+0xc4>
 800ef36:	3601      	adds	r6, #1
 800ef38:	2300      	movs	r3, #0
 800ef3a:	9615      	str	r6, [sp, #84]	; 0x54
 800ef3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f040 857f 	bne.w	800fa44 <_strtod_l+0xb7c>
 800ef46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef48:	b1db      	cbz	r3, 800ef82 <_strtod_l+0xba>
 800ef4a:	4642      	mov	r2, r8
 800ef4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef50:	ec43 2b10 	vmov	d0, r2, r3
 800ef54:	b01b      	add	sp, #108	; 0x6c
 800ef56:	ecbd 8b02 	vpop	{d8}
 800ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5e:	2920      	cmp	r1, #32
 800ef60:	d1cc      	bne.n	800eefc <_strtod_l+0x34>
 800ef62:	3201      	adds	r2, #1
 800ef64:	e7bf      	b.n	800eee6 <_strtod_l+0x1e>
 800ef66:	292d      	cmp	r1, #45	; 0x2d
 800ef68:	d1c8      	bne.n	800eefc <_strtod_l+0x34>
 800ef6a:	2101      	movs	r1, #1
 800ef6c:	910a      	str	r1, [sp, #40]	; 0x28
 800ef6e:	1c51      	adds	r1, r2, #1
 800ef70:	9115      	str	r1, [sp, #84]	; 0x54
 800ef72:	7852      	ldrb	r2, [r2, #1]
 800ef74:	2a00      	cmp	r2, #0
 800ef76:	d1c3      	bne.n	800ef00 <_strtod_l+0x38>
 800ef78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef7a:	9515      	str	r5, [sp, #84]	; 0x54
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f040 855f 	bne.w	800fa40 <_strtod_l+0xb78>
 800ef82:	4642      	mov	r2, r8
 800ef84:	464b      	mov	r3, r9
 800ef86:	e7e3      	b.n	800ef50 <_strtod_l+0x88>
 800ef88:	2100      	movs	r1, #0
 800ef8a:	e7ef      	b.n	800ef6c <_strtod_l+0xa4>
 800ef8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ef8e:	b13a      	cbz	r2, 800efa0 <_strtod_l+0xd8>
 800ef90:	2135      	movs	r1, #53	; 0x35
 800ef92:	a818      	add	r0, sp, #96	; 0x60
 800ef94:	f7ff ff37 	bl	800ee06 <__copybits>
 800ef98:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7ff fb0a 	bl	800e5b4 <_Bfree>
 800efa0:	3f01      	subs	r7, #1
 800efa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800efa4:	2f04      	cmp	r7, #4
 800efa6:	d806      	bhi.n	800efb6 <_strtod_l+0xee>
 800efa8:	e8df f007 	tbb	[pc, r7]
 800efac:	201d0314 	.word	0x201d0314
 800efb0:	14          	.byte	0x14
 800efb1:	00          	.byte	0x00
 800efb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800efb6:	05e9      	lsls	r1, r5, #23
 800efb8:	bf48      	it	mi
 800efba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800efbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efc2:	0d1b      	lsrs	r3, r3, #20
 800efc4:	051b      	lsls	r3, r3, #20
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1b9      	bne.n	800ef3e <_strtod_l+0x76>
 800efca:	f7fe fba9 	bl	800d720 <__errno>
 800efce:	2322      	movs	r3, #34	; 0x22
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	e7b4      	b.n	800ef3e <_strtod_l+0x76>
 800efd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800efd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800efdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800efe0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800efe4:	e7e7      	b.n	800efb6 <_strtod_l+0xee>
 800efe6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f160 <_strtod_l+0x298>
 800efea:	e7e4      	b.n	800efb6 <_strtod_l+0xee>
 800efec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800eff0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800eff4:	e7df      	b.n	800efb6 <_strtod_l+0xee>
 800eff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eff8:	1c5a      	adds	r2, r3, #1
 800effa:	9215      	str	r2, [sp, #84]	; 0x54
 800effc:	785b      	ldrb	r3, [r3, #1]
 800effe:	2b30      	cmp	r3, #48	; 0x30
 800f000:	d0f9      	beq.n	800eff6 <_strtod_l+0x12e>
 800f002:	2b00      	cmp	r3, #0
 800f004:	d09b      	beq.n	800ef3e <_strtod_l+0x76>
 800f006:	2301      	movs	r3, #1
 800f008:	f04f 0a00 	mov.w	sl, #0
 800f00c:	9304      	str	r3, [sp, #16]
 800f00e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f010:	930b      	str	r3, [sp, #44]	; 0x2c
 800f012:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f016:	46d3      	mov	fp, sl
 800f018:	220a      	movs	r2, #10
 800f01a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f01c:	7806      	ldrb	r6, [r0, #0]
 800f01e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f022:	b2d9      	uxtb	r1, r3
 800f024:	2909      	cmp	r1, #9
 800f026:	d926      	bls.n	800f076 <_strtod_l+0x1ae>
 800f028:	494c      	ldr	r1, [pc, #304]	; (800f15c <_strtod_l+0x294>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	f000 ff62 	bl	800fef4 <strncmp>
 800f030:	2800      	cmp	r0, #0
 800f032:	d030      	beq.n	800f096 <_strtod_l+0x1ce>
 800f034:	2000      	movs	r0, #0
 800f036:	4632      	mov	r2, r6
 800f038:	9005      	str	r0, [sp, #20]
 800f03a:	465e      	mov	r6, fp
 800f03c:	4603      	mov	r3, r0
 800f03e:	2a65      	cmp	r2, #101	; 0x65
 800f040:	d001      	beq.n	800f046 <_strtod_l+0x17e>
 800f042:	2a45      	cmp	r2, #69	; 0x45
 800f044:	d113      	bne.n	800f06e <_strtod_l+0x1a6>
 800f046:	b91e      	cbnz	r6, 800f050 <_strtod_l+0x188>
 800f048:	9a04      	ldr	r2, [sp, #16]
 800f04a:	4302      	orrs	r2, r0
 800f04c:	d094      	beq.n	800ef78 <_strtod_l+0xb0>
 800f04e:	2600      	movs	r6, #0
 800f050:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f052:	1c6a      	adds	r2, r5, #1
 800f054:	9215      	str	r2, [sp, #84]	; 0x54
 800f056:	786a      	ldrb	r2, [r5, #1]
 800f058:	2a2b      	cmp	r2, #43	; 0x2b
 800f05a:	d074      	beq.n	800f146 <_strtod_l+0x27e>
 800f05c:	2a2d      	cmp	r2, #45	; 0x2d
 800f05e:	d078      	beq.n	800f152 <_strtod_l+0x28a>
 800f060:	f04f 0c00 	mov.w	ip, #0
 800f064:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f068:	2909      	cmp	r1, #9
 800f06a:	d97f      	bls.n	800f16c <_strtod_l+0x2a4>
 800f06c:	9515      	str	r5, [sp, #84]	; 0x54
 800f06e:	2700      	movs	r7, #0
 800f070:	e09e      	b.n	800f1b0 <_strtod_l+0x2e8>
 800f072:	2300      	movs	r3, #0
 800f074:	e7c8      	b.n	800f008 <_strtod_l+0x140>
 800f076:	f1bb 0f08 	cmp.w	fp, #8
 800f07a:	bfd8      	it	le
 800f07c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f07e:	f100 0001 	add.w	r0, r0, #1
 800f082:	bfda      	itte	le
 800f084:	fb02 3301 	mlale	r3, r2, r1, r3
 800f088:	9309      	strle	r3, [sp, #36]	; 0x24
 800f08a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f08e:	f10b 0b01 	add.w	fp, fp, #1
 800f092:	9015      	str	r0, [sp, #84]	; 0x54
 800f094:	e7c1      	b.n	800f01a <_strtod_l+0x152>
 800f096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	9215      	str	r2, [sp, #84]	; 0x54
 800f09c:	785a      	ldrb	r2, [r3, #1]
 800f09e:	f1bb 0f00 	cmp.w	fp, #0
 800f0a2:	d037      	beq.n	800f114 <_strtod_l+0x24c>
 800f0a4:	9005      	str	r0, [sp, #20]
 800f0a6:	465e      	mov	r6, fp
 800f0a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f0ac:	2b09      	cmp	r3, #9
 800f0ae:	d912      	bls.n	800f0d6 <_strtod_l+0x20e>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e7c4      	b.n	800f03e <_strtod_l+0x176>
 800f0b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	9215      	str	r2, [sp, #84]	; 0x54
 800f0ba:	785a      	ldrb	r2, [r3, #1]
 800f0bc:	3001      	adds	r0, #1
 800f0be:	2a30      	cmp	r2, #48	; 0x30
 800f0c0:	d0f8      	beq.n	800f0b4 <_strtod_l+0x1ec>
 800f0c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f0c6:	2b08      	cmp	r3, #8
 800f0c8:	f200 84c1 	bhi.w	800fa4e <_strtod_l+0xb86>
 800f0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0ce:	9005      	str	r0, [sp, #20]
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	3a30      	subs	r2, #48	; 0x30
 800f0d8:	f100 0301 	add.w	r3, r0, #1
 800f0dc:	d014      	beq.n	800f108 <_strtod_l+0x240>
 800f0de:	9905      	ldr	r1, [sp, #20]
 800f0e0:	4419      	add	r1, r3
 800f0e2:	9105      	str	r1, [sp, #20]
 800f0e4:	4633      	mov	r3, r6
 800f0e6:	eb00 0c06 	add.w	ip, r0, r6
 800f0ea:	210a      	movs	r1, #10
 800f0ec:	4563      	cmp	r3, ip
 800f0ee:	d113      	bne.n	800f118 <_strtod_l+0x250>
 800f0f0:	1833      	adds	r3, r6, r0
 800f0f2:	2b08      	cmp	r3, #8
 800f0f4:	f106 0601 	add.w	r6, r6, #1
 800f0f8:	4406      	add	r6, r0
 800f0fa:	dc1a      	bgt.n	800f132 <_strtod_l+0x26a>
 800f0fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0fe:	230a      	movs	r3, #10
 800f100:	fb03 2301 	mla	r3, r3, r1, r2
 800f104:	9309      	str	r3, [sp, #36]	; 0x24
 800f106:	2300      	movs	r3, #0
 800f108:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f10a:	1c51      	adds	r1, r2, #1
 800f10c:	9115      	str	r1, [sp, #84]	; 0x54
 800f10e:	7852      	ldrb	r2, [r2, #1]
 800f110:	4618      	mov	r0, r3
 800f112:	e7c9      	b.n	800f0a8 <_strtod_l+0x1e0>
 800f114:	4658      	mov	r0, fp
 800f116:	e7d2      	b.n	800f0be <_strtod_l+0x1f6>
 800f118:	2b08      	cmp	r3, #8
 800f11a:	f103 0301 	add.w	r3, r3, #1
 800f11e:	dc03      	bgt.n	800f128 <_strtod_l+0x260>
 800f120:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f122:	434f      	muls	r7, r1
 800f124:	9709      	str	r7, [sp, #36]	; 0x24
 800f126:	e7e1      	b.n	800f0ec <_strtod_l+0x224>
 800f128:	2b10      	cmp	r3, #16
 800f12a:	bfd8      	it	le
 800f12c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f130:	e7dc      	b.n	800f0ec <_strtod_l+0x224>
 800f132:	2e10      	cmp	r6, #16
 800f134:	bfdc      	itt	le
 800f136:	230a      	movle	r3, #10
 800f138:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f13c:	e7e3      	b.n	800f106 <_strtod_l+0x23e>
 800f13e:	2300      	movs	r3, #0
 800f140:	9305      	str	r3, [sp, #20]
 800f142:	2301      	movs	r3, #1
 800f144:	e780      	b.n	800f048 <_strtod_l+0x180>
 800f146:	f04f 0c00 	mov.w	ip, #0
 800f14a:	1caa      	adds	r2, r5, #2
 800f14c:	9215      	str	r2, [sp, #84]	; 0x54
 800f14e:	78aa      	ldrb	r2, [r5, #2]
 800f150:	e788      	b.n	800f064 <_strtod_l+0x19c>
 800f152:	f04f 0c01 	mov.w	ip, #1
 800f156:	e7f8      	b.n	800f14a <_strtod_l+0x282>
 800f158:	080113c0 	.word	0x080113c0
 800f15c:	080113bc 	.word	0x080113bc
 800f160:	7ff00000 	.word	0x7ff00000
 800f164:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f166:	1c51      	adds	r1, r2, #1
 800f168:	9115      	str	r1, [sp, #84]	; 0x54
 800f16a:	7852      	ldrb	r2, [r2, #1]
 800f16c:	2a30      	cmp	r2, #48	; 0x30
 800f16e:	d0f9      	beq.n	800f164 <_strtod_l+0x29c>
 800f170:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f174:	2908      	cmp	r1, #8
 800f176:	f63f af7a 	bhi.w	800f06e <_strtod_l+0x1a6>
 800f17a:	3a30      	subs	r2, #48	; 0x30
 800f17c:	9208      	str	r2, [sp, #32]
 800f17e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f180:	920c      	str	r2, [sp, #48]	; 0x30
 800f182:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f184:	1c57      	adds	r7, r2, #1
 800f186:	9715      	str	r7, [sp, #84]	; 0x54
 800f188:	7852      	ldrb	r2, [r2, #1]
 800f18a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f18e:	f1be 0f09 	cmp.w	lr, #9
 800f192:	d938      	bls.n	800f206 <_strtod_l+0x33e>
 800f194:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f196:	1a7f      	subs	r7, r7, r1
 800f198:	2f08      	cmp	r7, #8
 800f19a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f19e:	dc03      	bgt.n	800f1a8 <_strtod_l+0x2e0>
 800f1a0:	9908      	ldr	r1, [sp, #32]
 800f1a2:	428f      	cmp	r7, r1
 800f1a4:	bfa8      	it	ge
 800f1a6:	460f      	movge	r7, r1
 800f1a8:	f1bc 0f00 	cmp.w	ip, #0
 800f1ac:	d000      	beq.n	800f1b0 <_strtod_l+0x2e8>
 800f1ae:	427f      	negs	r7, r7
 800f1b0:	2e00      	cmp	r6, #0
 800f1b2:	d14f      	bne.n	800f254 <_strtod_l+0x38c>
 800f1b4:	9904      	ldr	r1, [sp, #16]
 800f1b6:	4301      	orrs	r1, r0
 800f1b8:	f47f aec1 	bne.w	800ef3e <_strtod_l+0x76>
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f47f aedb 	bne.w	800ef78 <_strtod_l+0xb0>
 800f1c2:	2a69      	cmp	r2, #105	; 0x69
 800f1c4:	d029      	beq.n	800f21a <_strtod_l+0x352>
 800f1c6:	dc26      	bgt.n	800f216 <_strtod_l+0x34e>
 800f1c8:	2a49      	cmp	r2, #73	; 0x49
 800f1ca:	d026      	beq.n	800f21a <_strtod_l+0x352>
 800f1cc:	2a4e      	cmp	r2, #78	; 0x4e
 800f1ce:	f47f aed3 	bne.w	800ef78 <_strtod_l+0xb0>
 800f1d2:	499b      	ldr	r1, [pc, #620]	; (800f440 <_strtod_l+0x578>)
 800f1d4:	a815      	add	r0, sp, #84	; 0x54
 800f1d6:	f001 f983 	bl	80104e0 <__match>
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f43f aecc 	beq.w	800ef78 <_strtod_l+0xb0>
 800f1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	2b28      	cmp	r3, #40	; 0x28
 800f1e6:	d12f      	bne.n	800f248 <_strtod_l+0x380>
 800f1e8:	4996      	ldr	r1, [pc, #600]	; (800f444 <_strtod_l+0x57c>)
 800f1ea:	aa18      	add	r2, sp, #96	; 0x60
 800f1ec:	a815      	add	r0, sp, #84	; 0x54
 800f1ee:	f001 f98b 	bl	8010508 <__hexnan>
 800f1f2:	2805      	cmp	r0, #5
 800f1f4:	d128      	bne.n	800f248 <_strtod_l+0x380>
 800f1f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f1f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f1fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f200:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f204:	e69b      	b.n	800ef3e <_strtod_l+0x76>
 800f206:	9f08      	ldr	r7, [sp, #32]
 800f208:	210a      	movs	r1, #10
 800f20a:	fb01 2107 	mla	r1, r1, r7, r2
 800f20e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f212:	9208      	str	r2, [sp, #32]
 800f214:	e7b5      	b.n	800f182 <_strtod_l+0x2ba>
 800f216:	2a6e      	cmp	r2, #110	; 0x6e
 800f218:	e7d9      	b.n	800f1ce <_strtod_l+0x306>
 800f21a:	498b      	ldr	r1, [pc, #556]	; (800f448 <_strtod_l+0x580>)
 800f21c:	a815      	add	r0, sp, #84	; 0x54
 800f21e:	f001 f95f 	bl	80104e0 <__match>
 800f222:	2800      	cmp	r0, #0
 800f224:	f43f aea8 	beq.w	800ef78 <_strtod_l+0xb0>
 800f228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f22a:	4988      	ldr	r1, [pc, #544]	; (800f44c <_strtod_l+0x584>)
 800f22c:	3b01      	subs	r3, #1
 800f22e:	a815      	add	r0, sp, #84	; 0x54
 800f230:	9315      	str	r3, [sp, #84]	; 0x54
 800f232:	f001 f955 	bl	80104e0 <__match>
 800f236:	b910      	cbnz	r0, 800f23e <_strtod_l+0x376>
 800f238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f23a:	3301      	adds	r3, #1
 800f23c:	9315      	str	r3, [sp, #84]	; 0x54
 800f23e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f45c <_strtod_l+0x594>
 800f242:	f04f 0800 	mov.w	r8, #0
 800f246:	e67a      	b.n	800ef3e <_strtod_l+0x76>
 800f248:	4881      	ldr	r0, [pc, #516]	; (800f450 <_strtod_l+0x588>)
 800f24a:	f000 fe65 	bl	800ff18 <nan>
 800f24e:	ec59 8b10 	vmov	r8, r9, d0
 800f252:	e674      	b.n	800ef3e <_strtod_l+0x76>
 800f254:	9b05      	ldr	r3, [sp, #20]
 800f256:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f258:	1afb      	subs	r3, r7, r3
 800f25a:	f1bb 0f00 	cmp.w	fp, #0
 800f25e:	bf08      	it	eq
 800f260:	46b3      	moveq	fp, r6
 800f262:	2e10      	cmp	r6, #16
 800f264:	9308      	str	r3, [sp, #32]
 800f266:	4635      	mov	r5, r6
 800f268:	bfa8      	it	ge
 800f26a:	2510      	movge	r5, #16
 800f26c:	f7f1 f94a 	bl	8000504 <__aeabi_ui2d>
 800f270:	2e09      	cmp	r6, #9
 800f272:	4680      	mov	r8, r0
 800f274:	4689      	mov	r9, r1
 800f276:	dd13      	ble.n	800f2a0 <_strtod_l+0x3d8>
 800f278:	4b76      	ldr	r3, [pc, #472]	; (800f454 <_strtod_l+0x58c>)
 800f27a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f27e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f282:	f7f1 f9b9 	bl	80005f8 <__aeabi_dmul>
 800f286:	4680      	mov	r8, r0
 800f288:	4650      	mov	r0, sl
 800f28a:	4689      	mov	r9, r1
 800f28c:	f7f1 f93a 	bl	8000504 <__aeabi_ui2d>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4640      	mov	r0, r8
 800f296:	4649      	mov	r1, r9
 800f298:	f7f0 fff8 	bl	800028c <__adddf3>
 800f29c:	4680      	mov	r8, r0
 800f29e:	4689      	mov	r9, r1
 800f2a0:	2e0f      	cmp	r6, #15
 800f2a2:	dc38      	bgt.n	800f316 <_strtod_l+0x44e>
 800f2a4:	9b08      	ldr	r3, [sp, #32]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f43f ae49 	beq.w	800ef3e <_strtod_l+0x76>
 800f2ac:	dd24      	ble.n	800f2f8 <_strtod_l+0x430>
 800f2ae:	2b16      	cmp	r3, #22
 800f2b0:	dc0b      	bgt.n	800f2ca <_strtod_l+0x402>
 800f2b2:	4968      	ldr	r1, [pc, #416]	; (800f454 <_strtod_l+0x58c>)
 800f2b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2bc:	4642      	mov	r2, r8
 800f2be:	464b      	mov	r3, r9
 800f2c0:	f7f1 f99a 	bl	80005f8 <__aeabi_dmul>
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	4689      	mov	r9, r1
 800f2c8:	e639      	b.n	800ef3e <_strtod_l+0x76>
 800f2ca:	9a08      	ldr	r2, [sp, #32]
 800f2cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	db20      	blt.n	800f316 <_strtod_l+0x44e>
 800f2d4:	4c5f      	ldr	r4, [pc, #380]	; (800f454 <_strtod_l+0x58c>)
 800f2d6:	f1c6 060f 	rsb	r6, r6, #15
 800f2da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f2de:	4642      	mov	r2, r8
 800f2e0:	464b      	mov	r3, r9
 800f2e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	9b08      	ldr	r3, [sp, #32]
 800f2ec:	1b9e      	subs	r6, r3, r6
 800f2ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f2f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2f6:	e7e3      	b.n	800f2c0 <_strtod_l+0x3f8>
 800f2f8:	9b08      	ldr	r3, [sp, #32]
 800f2fa:	3316      	adds	r3, #22
 800f2fc:	db0b      	blt.n	800f316 <_strtod_l+0x44e>
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	1bdf      	subs	r7, r3, r7
 800f302:	4b54      	ldr	r3, [pc, #336]	; (800f454 <_strtod_l+0x58c>)
 800f304:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f30c:	4640      	mov	r0, r8
 800f30e:	4649      	mov	r1, r9
 800f310:	f7f1 fa9c 	bl	800084c <__aeabi_ddiv>
 800f314:	e7d6      	b.n	800f2c4 <_strtod_l+0x3fc>
 800f316:	9b08      	ldr	r3, [sp, #32]
 800f318:	1b75      	subs	r5, r6, r5
 800f31a:	441d      	add	r5, r3
 800f31c:	2d00      	cmp	r5, #0
 800f31e:	dd70      	ble.n	800f402 <_strtod_l+0x53a>
 800f320:	f015 030f 	ands.w	r3, r5, #15
 800f324:	d00a      	beq.n	800f33c <_strtod_l+0x474>
 800f326:	494b      	ldr	r1, [pc, #300]	; (800f454 <_strtod_l+0x58c>)
 800f328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f32c:	4642      	mov	r2, r8
 800f32e:	464b      	mov	r3, r9
 800f330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f334:	f7f1 f960 	bl	80005f8 <__aeabi_dmul>
 800f338:	4680      	mov	r8, r0
 800f33a:	4689      	mov	r9, r1
 800f33c:	f035 050f 	bics.w	r5, r5, #15
 800f340:	d04d      	beq.n	800f3de <_strtod_l+0x516>
 800f342:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f346:	dd22      	ble.n	800f38e <_strtod_l+0x4c6>
 800f348:	2500      	movs	r5, #0
 800f34a:	46ab      	mov	fp, r5
 800f34c:	9509      	str	r5, [sp, #36]	; 0x24
 800f34e:	9505      	str	r5, [sp, #20]
 800f350:	2322      	movs	r3, #34	; 0x22
 800f352:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f45c <_strtod_l+0x594>
 800f356:	6023      	str	r3, [r4, #0]
 800f358:	f04f 0800 	mov.w	r8, #0
 800f35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f43f aded 	beq.w	800ef3e <_strtod_l+0x76>
 800f364:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f366:	4620      	mov	r0, r4
 800f368:	f7ff f924 	bl	800e5b4 <_Bfree>
 800f36c:	9905      	ldr	r1, [sp, #20]
 800f36e:	4620      	mov	r0, r4
 800f370:	f7ff f920 	bl	800e5b4 <_Bfree>
 800f374:	4659      	mov	r1, fp
 800f376:	4620      	mov	r0, r4
 800f378:	f7ff f91c 	bl	800e5b4 <_Bfree>
 800f37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f37e:	4620      	mov	r0, r4
 800f380:	f7ff f918 	bl	800e5b4 <_Bfree>
 800f384:	4629      	mov	r1, r5
 800f386:	4620      	mov	r0, r4
 800f388:	f7ff f914 	bl	800e5b4 <_Bfree>
 800f38c:	e5d7      	b.n	800ef3e <_strtod_l+0x76>
 800f38e:	4b32      	ldr	r3, [pc, #200]	; (800f458 <_strtod_l+0x590>)
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	2300      	movs	r3, #0
 800f394:	112d      	asrs	r5, r5, #4
 800f396:	4640      	mov	r0, r8
 800f398:	4649      	mov	r1, r9
 800f39a:	469a      	mov	sl, r3
 800f39c:	2d01      	cmp	r5, #1
 800f39e:	dc21      	bgt.n	800f3e4 <_strtod_l+0x51c>
 800f3a0:	b10b      	cbz	r3, 800f3a6 <_strtod_l+0x4de>
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	4689      	mov	r9, r1
 800f3a6:	492c      	ldr	r1, [pc, #176]	; (800f458 <_strtod_l+0x590>)
 800f3a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f3ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f3b0:	4642      	mov	r2, r8
 800f3b2:	464b      	mov	r3, r9
 800f3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b8:	f7f1 f91e 	bl	80005f8 <__aeabi_dmul>
 800f3bc:	4b27      	ldr	r3, [pc, #156]	; (800f45c <_strtod_l+0x594>)
 800f3be:	460a      	mov	r2, r1
 800f3c0:	400b      	ands	r3, r1
 800f3c2:	4927      	ldr	r1, [pc, #156]	; (800f460 <_strtod_l+0x598>)
 800f3c4:	428b      	cmp	r3, r1
 800f3c6:	4680      	mov	r8, r0
 800f3c8:	d8be      	bhi.n	800f348 <_strtod_l+0x480>
 800f3ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f3ce:	428b      	cmp	r3, r1
 800f3d0:	bf86      	itte	hi
 800f3d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f464 <_strtod_l+0x59c>
 800f3d6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800f3da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9304      	str	r3, [sp, #16]
 800f3e2:	e07b      	b.n	800f4dc <_strtod_l+0x614>
 800f3e4:	07ea      	lsls	r2, r5, #31
 800f3e6:	d505      	bpl.n	800f3f4 <_strtod_l+0x52c>
 800f3e8:	9b04      	ldr	r3, [sp, #16]
 800f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ee:	f7f1 f903 	bl	80005f8 <__aeabi_dmul>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	9a04      	ldr	r2, [sp, #16]
 800f3f6:	3208      	adds	r2, #8
 800f3f8:	f10a 0a01 	add.w	sl, sl, #1
 800f3fc:	106d      	asrs	r5, r5, #1
 800f3fe:	9204      	str	r2, [sp, #16]
 800f400:	e7cc      	b.n	800f39c <_strtod_l+0x4d4>
 800f402:	d0ec      	beq.n	800f3de <_strtod_l+0x516>
 800f404:	426d      	negs	r5, r5
 800f406:	f015 020f 	ands.w	r2, r5, #15
 800f40a:	d00a      	beq.n	800f422 <_strtod_l+0x55a>
 800f40c:	4b11      	ldr	r3, [pc, #68]	; (800f454 <_strtod_l+0x58c>)
 800f40e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f412:	4640      	mov	r0, r8
 800f414:	4649      	mov	r1, r9
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	f7f1 fa17 	bl	800084c <__aeabi_ddiv>
 800f41e:	4680      	mov	r8, r0
 800f420:	4689      	mov	r9, r1
 800f422:	112d      	asrs	r5, r5, #4
 800f424:	d0db      	beq.n	800f3de <_strtod_l+0x516>
 800f426:	2d1f      	cmp	r5, #31
 800f428:	dd1e      	ble.n	800f468 <_strtod_l+0x5a0>
 800f42a:	2500      	movs	r5, #0
 800f42c:	46ab      	mov	fp, r5
 800f42e:	9509      	str	r5, [sp, #36]	; 0x24
 800f430:	9505      	str	r5, [sp, #20]
 800f432:	2322      	movs	r3, #34	; 0x22
 800f434:	f04f 0800 	mov.w	r8, #0
 800f438:	f04f 0900 	mov.w	r9, #0
 800f43c:	6023      	str	r3, [r4, #0]
 800f43e:	e78d      	b.n	800f35c <_strtod_l+0x494>
 800f440:	080111aa 	.word	0x080111aa
 800f444:	080113d4 	.word	0x080113d4
 800f448:	080111a2 	.word	0x080111a2
 800f44c:	080111d9 	.word	0x080111d9
 800f450:	08011464 	.word	0x08011464
 800f454:	080112e8 	.word	0x080112e8
 800f458:	080112c0 	.word	0x080112c0
 800f45c:	7ff00000 	.word	0x7ff00000
 800f460:	7ca00000 	.word	0x7ca00000
 800f464:	7fefffff 	.word	0x7fefffff
 800f468:	f015 0310 	ands.w	r3, r5, #16
 800f46c:	bf18      	it	ne
 800f46e:	236a      	movne	r3, #106	; 0x6a
 800f470:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f814 <_strtod_l+0x94c>
 800f474:	9304      	str	r3, [sp, #16]
 800f476:	4640      	mov	r0, r8
 800f478:	4649      	mov	r1, r9
 800f47a:	2300      	movs	r3, #0
 800f47c:	07ea      	lsls	r2, r5, #31
 800f47e:	d504      	bpl.n	800f48a <_strtod_l+0x5c2>
 800f480:	e9da 2300 	ldrd	r2, r3, [sl]
 800f484:	f7f1 f8b8 	bl	80005f8 <__aeabi_dmul>
 800f488:	2301      	movs	r3, #1
 800f48a:	106d      	asrs	r5, r5, #1
 800f48c:	f10a 0a08 	add.w	sl, sl, #8
 800f490:	d1f4      	bne.n	800f47c <_strtod_l+0x5b4>
 800f492:	b10b      	cbz	r3, 800f498 <_strtod_l+0x5d0>
 800f494:	4680      	mov	r8, r0
 800f496:	4689      	mov	r9, r1
 800f498:	9b04      	ldr	r3, [sp, #16]
 800f49a:	b1bb      	cbz	r3, 800f4cc <_strtod_l+0x604>
 800f49c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f4a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	dd10      	ble.n	800f4cc <_strtod_l+0x604>
 800f4aa:	2b1f      	cmp	r3, #31
 800f4ac:	f340 811e 	ble.w	800f6ec <_strtod_l+0x824>
 800f4b0:	2b34      	cmp	r3, #52	; 0x34
 800f4b2:	bfde      	ittt	le
 800f4b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800f4b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f4bc:	4093      	lslle	r3, r2
 800f4be:	f04f 0800 	mov.w	r8, #0
 800f4c2:	bfcc      	ite	gt
 800f4c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f4c8:	ea03 0901 	andle.w	r9, r3, r1
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	f7f1 faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d1a6      	bne.n	800f42a <_strtod_l+0x562>
 800f4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4e2:	4633      	mov	r3, r6
 800f4e4:	465a      	mov	r2, fp
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f7ff f8cc 	bl	800e684 <__s2b>
 800f4ec:	9009      	str	r0, [sp, #36]	; 0x24
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f43f af2a 	beq.w	800f348 <_strtod_l+0x480>
 800f4f4:	9a08      	ldr	r2, [sp, #32]
 800f4f6:	9b05      	ldr	r3, [sp, #20]
 800f4f8:	2a00      	cmp	r2, #0
 800f4fa:	eba3 0307 	sub.w	r3, r3, r7
 800f4fe:	bfa8      	it	ge
 800f500:	2300      	movge	r3, #0
 800f502:	930c      	str	r3, [sp, #48]	; 0x30
 800f504:	2500      	movs	r5, #0
 800f506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f50a:	9312      	str	r3, [sp, #72]	; 0x48
 800f50c:	46ab      	mov	fp, r5
 800f50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f510:	4620      	mov	r0, r4
 800f512:	6859      	ldr	r1, [r3, #4]
 800f514:	f7ff f80e 	bl	800e534 <_Balloc>
 800f518:	9005      	str	r0, [sp, #20]
 800f51a:	2800      	cmp	r0, #0
 800f51c:	f43f af18 	beq.w	800f350 <_strtod_l+0x488>
 800f520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f522:	691a      	ldr	r2, [r3, #16]
 800f524:	3202      	adds	r2, #2
 800f526:	f103 010c 	add.w	r1, r3, #12
 800f52a:	0092      	lsls	r2, r2, #2
 800f52c:	300c      	adds	r0, #12
 800f52e:	f7fe f924 	bl	800d77a <memcpy>
 800f532:	ec49 8b10 	vmov	d0, r8, r9
 800f536:	aa18      	add	r2, sp, #96	; 0x60
 800f538:	a917      	add	r1, sp, #92	; 0x5c
 800f53a:	4620      	mov	r0, r4
 800f53c:	f7ff fbd6 	bl	800ecec <__d2b>
 800f540:	ec49 8b18 	vmov	d8, r8, r9
 800f544:	9016      	str	r0, [sp, #88]	; 0x58
 800f546:	2800      	cmp	r0, #0
 800f548:	f43f af02 	beq.w	800f350 <_strtod_l+0x488>
 800f54c:	2101      	movs	r1, #1
 800f54e:	4620      	mov	r0, r4
 800f550:	f7ff f930 	bl	800e7b4 <__i2b>
 800f554:	4683      	mov	fp, r0
 800f556:	2800      	cmp	r0, #0
 800f558:	f43f aefa 	beq.w	800f350 <_strtod_l+0x488>
 800f55c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f55e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f560:	2e00      	cmp	r6, #0
 800f562:	bfab      	itete	ge
 800f564:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f566:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f568:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f56a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f56e:	bfac      	ite	ge
 800f570:	eb06 0a03 	addge.w	sl, r6, r3
 800f574:	1b9f      	sublt	r7, r3, r6
 800f576:	9b04      	ldr	r3, [sp, #16]
 800f578:	1af6      	subs	r6, r6, r3
 800f57a:	4416      	add	r6, r2
 800f57c:	4ba0      	ldr	r3, [pc, #640]	; (800f800 <_strtod_l+0x938>)
 800f57e:	3e01      	subs	r6, #1
 800f580:	429e      	cmp	r6, r3
 800f582:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f586:	f280 80c4 	bge.w	800f712 <_strtod_l+0x84a>
 800f58a:	1b9b      	subs	r3, r3, r6
 800f58c:	2b1f      	cmp	r3, #31
 800f58e:	eba2 0203 	sub.w	r2, r2, r3
 800f592:	f04f 0101 	mov.w	r1, #1
 800f596:	f300 80b0 	bgt.w	800f6fa <_strtod_l+0x832>
 800f59a:	fa01 f303 	lsl.w	r3, r1, r3
 800f59e:	930e      	str	r3, [sp, #56]	; 0x38
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f5a4:	eb0a 0602 	add.w	r6, sl, r2
 800f5a8:	9b04      	ldr	r3, [sp, #16]
 800f5aa:	45b2      	cmp	sl, r6
 800f5ac:	4417      	add	r7, r2
 800f5ae:	441f      	add	r7, r3
 800f5b0:	4653      	mov	r3, sl
 800f5b2:	bfa8      	it	ge
 800f5b4:	4633      	movge	r3, r6
 800f5b6:	42bb      	cmp	r3, r7
 800f5b8:	bfa8      	it	ge
 800f5ba:	463b      	movge	r3, r7
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bfc2      	ittt	gt
 800f5c0:	1af6      	subgt	r6, r6, r3
 800f5c2:	1aff      	subgt	r7, r7, r3
 800f5c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dd17      	ble.n	800f5fe <_strtod_l+0x736>
 800f5ce:	4659      	mov	r1, fp
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f7ff f9ae 	bl	800e934 <__pow5mult>
 800f5d8:	4683      	mov	fp, r0
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	f43f aeb8 	beq.w	800f350 <_strtod_l+0x488>
 800f5e0:	4601      	mov	r1, r0
 800f5e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff f8fb 	bl	800e7e0 <__multiply>
 800f5ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f43f aeaf 	beq.w	800f350 <_strtod_l+0x488>
 800f5f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f7fe ffdd 	bl	800e5b4 <_Bfree>
 800f5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5fc:	9316      	str	r3, [sp, #88]	; 0x58
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	f300 808c 	bgt.w	800f71c <_strtod_l+0x854>
 800f604:	9b08      	ldr	r3, [sp, #32]
 800f606:	2b00      	cmp	r3, #0
 800f608:	dd08      	ble.n	800f61c <_strtod_l+0x754>
 800f60a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f60c:	9905      	ldr	r1, [sp, #20]
 800f60e:	4620      	mov	r0, r4
 800f610:	f7ff f990 	bl	800e934 <__pow5mult>
 800f614:	9005      	str	r0, [sp, #20]
 800f616:	2800      	cmp	r0, #0
 800f618:	f43f ae9a 	beq.w	800f350 <_strtod_l+0x488>
 800f61c:	2f00      	cmp	r7, #0
 800f61e:	dd08      	ble.n	800f632 <_strtod_l+0x76a>
 800f620:	9905      	ldr	r1, [sp, #20]
 800f622:	463a      	mov	r2, r7
 800f624:	4620      	mov	r0, r4
 800f626:	f7ff f9df 	bl	800e9e8 <__lshift>
 800f62a:	9005      	str	r0, [sp, #20]
 800f62c:	2800      	cmp	r0, #0
 800f62e:	f43f ae8f 	beq.w	800f350 <_strtod_l+0x488>
 800f632:	f1ba 0f00 	cmp.w	sl, #0
 800f636:	dd08      	ble.n	800f64a <_strtod_l+0x782>
 800f638:	4659      	mov	r1, fp
 800f63a:	4652      	mov	r2, sl
 800f63c:	4620      	mov	r0, r4
 800f63e:	f7ff f9d3 	bl	800e9e8 <__lshift>
 800f642:	4683      	mov	fp, r0
 800f644:	2800      	cmp	r0, #0
 800f646:	f43f ae83 	beq.w	800f350 <_strtod_l+0x488>
 800f64a:	9a05      	ldr	r2, [sp, #20]
 800f64c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f64e:	4620      	mov	r0, r4
 800f650:	f7ff fa52 	bl	800eaf8 <__mdiff>
 800f654:	4605      	mov	r5, r0
 800f656:	2800      	cmp	r0, #0
 800f658:	f43f ae7a 	beq.w	800f350 <_strtod_l+0x488>
 800f65c:	68c3      	ldr	r3, [r0, #12]
 800f65e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f660:	2300      	movs	r3, #0
 800f662:	60c3      	str	r3, [r0, #12]
 800f664:	4659      	mov	r1, fp
 800f666:	f7ff fa2b 	bl	800eac0 <__mcmp>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	da60      	bge.n	800f730 <_strtod_l+0x868>
 800f66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f670:	ea53 0308 	orrs.w	r3, r3, r8
 800f674:	f040 8084 	bne.w	800f780 <_strtod_l+0x8b8>
 800f678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d17f      	bne.n	800f780 <_strtod_l+0x8b8>
 800f680:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f684:	0d1b      	lsrs	r3, r3, #20
 800f686:	051b      	lsls	r3, r3, #20
 800f688:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f68c:	d978      	bls.n	800f780 <_strtod_l+0x8b8>
 800f68e:	696b      	ldr	r3, [r5, #20]
 800f690:	b913      	cbnz	r3, 800f698 <_strtod_l+0x7d0>
 800f692:	692b      	ldr	r3, [r5, #16]
 800f694:	2b01      	cmp	r3, #1
 800f696:	dd73      	ble.n	800f780 <_strtod_l+0x8b8>
 800f698:	4629      	mov	r1, r5
 800f69a:	2201      	movs	r2, #1
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7ff f9a3 	bl	800e9e8 <__lshift>
 800f6a2:	4659      	mov	r1, fp
 800f6a4:	4605      	mov	r5, r0
 800f6a6:	f7ff fa0b 	bl	800eac0 <__mcmp>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	dd68      	ble.n	800f780 <_strtod_l+0x8b8>
 800f6ae:	9904      	ldr	r1, [sp, #16]
 800f6b0:	4a54      	ldr	r2, [pc, #336]	; (800f804 <_strtod_l+0x93c>)
 800f6b2:	464b      	mov	r3, r9
 800f6b4:	2900      	cmp	r1, #0
 800f6b6:	f000 8084 	beq.w	800f7c2 <_strtod_l+0x8fa>
 800f6ba:	ea02 0109 	and.w	r1, r2, r9
 800f6be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f6c2:	dc7e      	bgt.n	800f7c2 <_strtod_l+0x8fa>
 800f6c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f6c8:	f77f aeb3 	ble.w	800f432 <_strtod_l+0x56a>
 800f6cc:	4b4e      	ldr	r3, [pc, #312]	; (800f808 <_strtod_l+0x940>)
 800f6ce:	4640      	mov	r0, r8
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f7f0 ff90 	bl	80005f8 <__aeabi_dmul>
 800f6d8:	4b4a      	ldr	r3, [pc, #296]	; (800f804 <_strtod_l+0x93c>)
 800f6da:	400b      	ands	r3, r1
 800f6dc:	4680      	mov	r8, r0
 800f6de:	4689      	mov	r9, r1
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f47f ae3f 	bne.w	800f364 <_strtod_l+0x49c>
 800f6e6:	2322      	movs	r3, #34	; 0x22
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	e63b      	b.n	800f364 <_strtod_l+0x49c>
 800f6ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f6f4:	ea03 0808 	and.w	r8, r3, r8
 800f6f8:	e6e8      	b.n	800f4cc <_strtod_l+0x604>
 800f6fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f6fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f702:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f706:	36e2      	adds	r6, #226	; 0xe2
 800f708:	fa01 f306 	lsl.w	r3, r1, r6
 800f70c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f710:	e748      	b.n	800f5a4 <_strtod_l+0x6dc>
 800f712:	2100      	movs	r1, #0
 800f714:	2301      	movs	r3, #1
 800f716:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f71a:	e743      	b.n	800f5a4 <_strtod_l+0x6dc>
 800f71c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f71e:	4632      	mov	r2, r6
 800f720:	4620      	mov	r0, r4
 800f722:	f7ff f961 	bl	800e9e8 <__lshift>
 800f726:	9016      	str	r0, [sp, #88]	; 0x58
 800f728:	2800      	cmp	r0, #0
 800f72a:	f47f af6b 	bne.w	800f604 <_strtod_l+0x73c>
 800f72e:	e60f      	b.n	800f350 <_strtod_l+0x488>
 800f730:	46ca      	mov	sl, r9
 800f732:	d171      	bne.n	800f818 <_strtod_l+0x950>
 800f734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f73a:	b352      	cbz	r2, 800f792 <_strtod_l+0x8ca>
 800f73c:	4a33      	ldr	r2, [pc, #204]	; (800f80c <_strtod_l+0x944>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d12a      	bne.n	800f798 <_strtod_l+0x8d0>
 800f742:	9b04      	ldr	r3, [sp, #16]
 800f744:	4641      	mov	r1, r8
 800f746:	b1fb      	cbz	r3, 800f788 <_strtod_l+0x8c0>
 800f748:	4b2e      	ldr	r3, [pc, #184]	; (800f804 <_strtod_l+0x93c>)
 800f74a:	ea09 0303 	and.w	r3, r9, r3
 800f74e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f756:	d81a      	bhi.n	800f78e <_strtod_l+0x8c6>
 800f758:	0d1b      	lsrs	r3, r3, #20
 800f75a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f75e:	fa02 f303 	lsl.w	r3, r2, r3
 800f762:	4299      	cmp	r1, r3
 800f764:	d118      	bne.n	800f798 <_strtod_l+0x8d0>
 800f766:	4b2a      	ldr	r3, [pc, #168]	; (800f810 <_strtod_l+0x948>)
 800f768:	459a      	cmp	sl, r3
 800f76a:	d102      	bne.n	800f772 <_strtod_l+0x8aa>
 800f76c:	3101      	adds	r1, #1
 800f76e:	f43f adef 	beq.w	800f350 <_strtod_l+0x488>
 800f772:	4b24      	ldr	r3, [pc, #144]	; (800f804 <_strtod_l+0x93c>)
 800f774:	ea0a 0303 	and.w	r3, sl, r3
 800f778:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f77c:	f04f 0800 	mov.w	r8, #0
 800f780:	9b04      	ldr	r3, [sp, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1a2      	bne.n	800f6cc <_strtod_l+0x804>
 800f786:	e5ed      	b.n	800f364 <_strtod_l+0x49c>
 800f788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f78c:	e7e9      	b.n	800f762 <_strtod_l+0x89a>
 800f78e:	4613      	mov	r3, r2
 800f790:	e7e7      	b.n	800f762 <_strtod_l+0x89a>
 800f792:	ea53 0308 	orrs.w	r3, r3, r8
 800f796:	d08a      	beq.n	800f6ae <_strtod_l+0x7e6>
 800f798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f79a:	b1e3      	cbz	r3, 800f7d6 <_strtod_l+0x90e>
 800f79c:	ea13 0f0a 	tst.w	r3, sl
 800f7a0:	d0ee      	beq.n	800f780 <_strtod_l+0x8b8>
 800f7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a4:	9a04      	ldr	r2, [sp, #16]
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	b1c3      	cbz	r3, 800f7de <_strtod_l+0x916>
 800f7ac:	f7ff fb6f 	bl	800ee8e <sulp>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	ec51 0b18 	vmov	r0, r1, d8
 800f7b8:	f7f0 fd68 	bl	800028c <__adddf3>
 800f7bc:	4680      	mov	r8, r0
 800f7be:	4689      	mov	r9, r1
 800f7c0:	e7de      	b.n	800f780 <_strtod_l+0x8b8>
 800f7c2:	4013      	ands	r3, r2
 800f7c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f7c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f7cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f7d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f7d4:	e7d4      	b.n	800f780 <_strtod_l+0x8b8>
 800f7d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7d8:	ea13 0f08 	tst.w	r3, r8
 800f7dc:	e7e0      	b.n	800f7a0 <_strtod_l+0x8d8>
 800f7de:	f7ff fb56 	bl	800ee8e <sulp>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	ec51 0b18 	vmov	r0, r1, d8
 800f7ea:	f7f0 fd4d 	bl	8000288 <__aeabi_dsub>
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	4689      	mov	r9, r1
 800f7f6:	f7f1 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d0c0      	beq.n	800f780 <_strtod_l+0x8b8>
 800f7fe:	e618      	b.n	800f432 <_strtod_l+0x56a>
 800f800:	fffffc02 	.word	0xfffffc02
 800f804:	7ff00000 	.word	0x7ff00000
 800f808:	39500000 	.word	0x39500000
 800f80c:	000fffff 	.word	0x000fffff
 800f810:	7fefffff 	.word	0x7fefffff
 800f814:	080113e8 	.word	0x080113e8
 800f818:	4659      	mov	r1, fp
 800f81a:	4628      	mov	r0, r5
 800f81c:	f7ff fac0 	bl	800eda0 <__ratio>
 800f820:	ec57 6b10 	vmov	r6, r7, d0
 800f824:	ee10 0a10 	vmov	r0, s0
 800f828:	2200      	movs	r2, #0
 800f82a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f82e:	4639      	mov	r1, r7
 800f830:	f7f1 f95e 	bl	8000af0 <__aeabi_dcmple>
 800f834:	2800      	cmp	r0, #0
 800f836:	d071      	beq.n	800f91c <_strtod_l+0xa54>
 800f838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d17c      	bne.n	800f938 <_strtod_l+0xa70>
 800f83e:	f1b8 0f00 	cmp.w	r8, #0
 800f842:	d15a      	bne.n	800f8fa <_strtod_l+0xa32>
 800f844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d15d      	bne.n	800f908 <_strtod_l+0xa40>
 800f84c:	4b90      	ldr	r3, [pc, #576]	; (800fa90 <_strtod_l+0xbc8>)
 800f84e:	2200      	movs	r2, #0
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f7f1 f942 	bl	8000adc <__aeabi_dcmplt>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d15c      	bne.n	800f916 <_strtod_l+0xa4e>
 800f85c:	4630      	mov	r0, r6
 800f85e:	4639      	mov	r1, r7
 800f860:	4b8c      	ldr	r3, [pc, #560]	; (800fa94 <_strtod_l+0xbcc>)
 800f862:	2200      	movs	r2, #0
 800f864:	f7f0 fec8 	bl	80005f8 <__aeabi_dmul>
 800f868:	4606      	mov	r6, r0
 800f86a:	460f      	mov	r7, r1
 800f86c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f870:	9606      	str	r6, [sp, #24]
 800f872:	9307      	str	r3, [sp, #28]
 800f874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f87c:	4b86      	ldr	r3, [pc, #536]	; (800fa98 <_strtod_l+0xbd0>)
 800f87e:	ea0a 0303 	and.w	r3, sl, r3
 800f882:	930d      	str	r3, [sp, #52]	; 0x34
 800f884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f886:	4b85      	ldr	r3, [pc, #532]	; (800fa9c <_strtod_l+0xbd4>)
 800f888:	429a      	cmp	r2, r3
 800f88a:	f040 8090 	bne.w	800f9ae <_strtod_l+0xae6>
 800f88e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f892:	ec49 8b10 	vmov	d0, r8, r9
 800f896:	f7ff f9b9 	bl	800ec0c <__ulp>
 800f89a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f89e:	ec51 0b10 	vmov	r0, r1, d0
 800f8a2:	f7f0 fea9 	bl	80005f8 <__aeabi_dmul>
 800f8a6:	4642      	mov	r2, r8
 800f8a8:	464b      	mov	r3, r9
 800f8aa:	f7f0 fcef 	bl	800028c <__adddf3>
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	4979      	ldr	r1, [pc, #484]	; (800fa98 <_strtod_l+0xbd0>)
 800f8b2:	4a7b      	ldr	r2, [pc, #492]	; (800faa0 <_strtod_l+0xbd8>)
 800f8b4:	4019      	ands	r1, r3
 800f8b6:	4291      	cmp	r1, r2
 800f8b8:	4680      	mov	r8, r0
 800f8ba:	d944      	bls.n	800f946 <_strtod_l+0xa7e>
 800f8bc:	ee18 2a90 	vmov	r2, s17
 800f8c0:	4b78      	ldr	r3, [pc, #480]	; (800faa4 <_strtod_l+0xbdc>)
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d104      	bne.n	800f8d0 <_strtod_l+0xa08>
 800f8c6:	ee18 3a10 	vmov	r3, s16
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	f43f ad40 	beq.w	800f350 <_strtod_l+0x488>
 800f8d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800faa4 <_strtod_l+0xbdc>
 800f8d4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f8d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7fe fe6a 	bl	800e5b4 <_Bfree>
 800f8e0:	9905      	ldr	r1, [sp, #20]
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f7fe fe66 	bl	800e5b4 <_Bfree>
 800f8e8:	4659      	mov	r1, fp
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f7fe fe62 	bl	800e5b4 <_Bfree>
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f7fe fe5e 	bl	800e5b4 <_Bfree>
 800f8f8:	e609      	b.n	800f50e <_strtod_l+0x646>
 800f8fa:	f1b8 0f01 	cmp.w	r8, #1
 800f8fe:	d103      	bne.n	800f908 <_strtod_l+0xa40>
 800f900:	f1b9 0f00 	cmp.w	r9, #0
 800f904:	f43f ad95 	beq.w	800f432 <_strtod_l+0x56a>
 800f908:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800fa60 <_strtod_l+0xb98>
 800f90c:	4f60      	ldr	r7, [pc, #384]	; (800fa90 <_strtod_l+0xbc8>)
 800f90e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f912:	2600      	movs	r6, #0
 800f914:	e7ae      	b.n	800f874 <_strtod_l+0x9ac>
 800f916:	4f5f      	ldr	r7, [pc, #380]	; (800fa94 <_strtod_l+0xbcc>)
 800f918:	2600      	movs	r6, #0
 800f91a:	e7a7      	b.n	800f86c <_strtod_l+0x9a4>
 800f91c:	4b5d      	ldr	r3, [pc, #372]	; (800fa94 <_strtod_l+0xbcc>)
 800f91e:	4630      	mov	r0, r6
 800f920:	4639      	mov	r1, r7
 800f922:	2200      	movs	r2, #0
 800f924:	f7f0 fe68 	bl	80005f8 <__aeabi_dmul>
 800f928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f92a:	4606      	mov	r6, r0
 800f92c:	460f      	mov	r7, r1
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d09c      	beq.n	800f86c <_strtod_l+0x9a4>
 800f932:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f936:	e79d      	b.n	800f874 <_strtod_l+0x9ac>
 800f938:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fa68 <_strtod_l+0xba0>
 800f93c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f940:	ec57 6b17 	vmov	r6, r7, d7
 800f944:	e796      	b.n	800f874 <_strtod_l+0x9ac>
 800f946:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f94a:	9b04      	ldr	r3, [sp, #16]
 800f94c:	46ca      	mov	sl, r9
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1c2      	bne.n	800f8d8 <_strtod_l+0xa10>
 800f952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f956:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f958:	0d1b      	lsrs	r3, r3, #20
 800f95a:	051b      	lsls	r3, r3, #20
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d1bb      	bne.n	800f8d8 <_strtod_l+0xa10>
 800f960:	4630      	mov	r0, r6
 800f962:	4639      	mov	r1, r7
 800f964:	f7f1 f9a8 	bl	8000cb8 <__aeabi_d2lz>
 800f968:	f7f0 fe18 	bl	800059c <__aeabi_l2d>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fc88 	bl	8000288 <__aeabi_dsub>
 800f978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f97a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f97e:	ea43 0308 	orr.w	r3, r3, r8
 800f982:	4313      	orrs	r3, r2
 800f984:	4606      	mov	r6, r0
 800f986:	460f      	mov	r7, r1
 800f988:	d054      	beq.n	800fa34 <_strtod_l+0xb6c>
 800f98a:	a339      	add	r3, pc, #228	; (adr r3, 800fa70 <_strtod_l+0xba8>)
 800f98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f990:	f7f1 f8a4 	bl	8000adc <__aeabi_dcmplt>
 800f994:	2800      	cmp	r0, #0
 800f996:	f47f ace5 	bne.w	800f364 <_strtod_l+0x49c>
 800f99a:	a337      	add	r3, pc, #220	; (adr r3, 800fa78 <_strtod_l+0xbb0>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	f7f1 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d095      	beq.n	800f8d8 <_strtod_l+0xa10>
 800f9ac:	e4da      	b.n	800f364 <_strtod_l+0x49c>
 800f9ae:	9b04      	ldr	r3, [sp, #16]
 800f9b0:	b333      	cbz	r3, 800fa00 <_strtod_l+0xb38>
 800f9b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f9b8:	d822      	bhi.n	800fa00 <_strtod_l+0xb38>
 800f9ba:	a331      	add	r3, pc, #196	; (adr r3, 800fa80 <_strtod_l+0xbb8>)
 800f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	4639      	mov	r1, r7
 800f9c4:	f7f1 f894 	bl	8000af0 <__aeabi_dcmple>
 800f9c8:	b1a0      	cbz	r0, 800f9f4 <_strtod_l+0xb2c>
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f7f1 f8eb 	bl	8000ba8 <__aeabi_d2uiz>
 800f9d2:	2801      	cmp	r0, #1
 800f9d4:	bf38      	it	cc
 800f9d6:	2001      	movcc	r0, #1
 800f9d8:	f7f0 fd94 	bl	8000504 <__aeabi_ui2d>
 800f9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9de:	4606      	mov	r6, r0
 800f9e0:	460f      	mov	r7, r1
 800f9e2:	bb23      	cbnz	r3, 800fa2e <_strtod_l+0xb66>
 800f9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9e8:	9010      	str	r0, [sp, #64]	; 0x40
 800f9ea:	9311      	str	r3, [sp, #68]	; 0x44
 800f9ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f9f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f9fc:	1a9b      	subs	r3, r3, r2
 800f9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fa04:	eeb0 0a48 	vmov.f32	s0, s16
 800fa08:	eef0 0a68 	vmov.f32	s1, s17
 800fa0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fa10:	f7ff f8fc 	bl	800ec0c <__ulp>
 800fa14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fa18:	ec53 2b10 	vmov	r2, r3, d0
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	ec53 2b18 	vmov	r2, r3, d8
 800fa24:	f7f0 fc32 	bl	800028c <__adddf3>
 800fa28:	4680      	mov	r8, r0
 800fa2a:	4689      	mov	r9, r1
 800fa2c:	e78d      	b.n	800f94a <_strtod_l+0xa82>
 800fa2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fa32:	e7db      	b.n	800f9ec <_strtod_l+0xb24>
 800fa34:	a314      	add	r3, pc, #80	; (adr r3, 800fa88 <_strtod_l+0xbc0>)
 800fa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3a:	f7f1 f84f 	bl	8000adc <__aeabi_dcmplt>
 800fa3e:	e7b3      	b.n	800f9a8 <_strtod_l+0xae0>
 800fa40:	2300      	movs	r3, #0
 800fa42:	930a      	str	r3, [sp, #40]	; 0x28
 800fa44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	f7ff ba7c 	b.w	800ef46 <_strtod_l+0x7e>
 800fa4e:	2a65      	cmp	r2, #101	; 0x65
 800fa50:	f43f ab75 	beq.w	800f13e <_strtod_l+0x276>
 800fa54:	2a45      	cmp	r2, #69	; 0x45
 800fa56:	f43f ab72 	beq.w	800f13e <_strtod_l+0x276>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	f7ff bbaa 	b.w	800f1b4 <_strtod_l+0x2ec>
 800fa60:	00000000 	.word	0x00000000
 800fa64:	bff00000 	.word	0xbff00000
 800fa68:	00000000 	.word	0x00000000
 800fa6c:	3ff00000 	.word	0x3ff00000
 800fa70:	94a03595 	.word	0x94a03595
 800fa74:	3fdfffff 	.word	0x3fdfffff
 800fa78:	35afe535 	.word	0x35afe535
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	ffc00000 	.word	0xffc00000
 800fa84:	41dfffff 	.word	0x41dfffff
 800fa88:	94a03595 	.word	0x94a03595
 800fa8c:	3fcfffff 	.word	0x3fcfffff
 800fa90:	3ff00000 	.word	0x3ff00000
 800fa94:	3fe00000 	.word	0x3fe00000
 800fa98:	7ff00000 	.word	0x7ff00000
 800fa9c:	7fe00000 	.word	0x7fe00000
 800faa0:	7c9fffff 	.word	0x7c9fffff
 800faa4:	7fefffff 	.word	0x7fefffff

0800faa8 <_strtod_r>:
 800faa8:	4b01      	ldr	r3, [pc, #4]	; (800fab0 <_strtod_r+0x8>)
 800faaa:	f7ff ba0d 	b.w	800eec8 <_strtod_l>
 800faae:	bf00      	nop
 800fab0:	20000070 	.word	0x20000070

0800fab4 <__ssputs_r>:
 800fab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fab8:	688e      	ldr	r6, [r1, #8]
 800faba:	461f      	mov	r7, r3
 800fabc:	42be      	cmp	r6, r7
 800fabe:	680b      	ldr	r3, [r1, #0]
 800fac0:	4682      	mov	sl, r0
 800fac2:	460c      	mov	r4, r1
 800fac4:	4690      	mov	r8, r2
 800fac6:	d82c      	bhi.n	800fb22 <__ssputs_r+0x6e>
 800fac8:	898a      	ldrh	r2, [r1, #12]
 800faca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800face:	d026      	beq.n	800fb1e <__ssputs_r+0x6a>
 800fad0:	6965      	ldr	r5, [r4, #20]
 800fad2:	6909      	ldr	r1, [r1, #16]
 800fad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fad8:	eba3 0901 	sub.w	r9, r3, r1
 800fadc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fae0:	1c7b      	adds	r3, r7, #1
 800fae2:	444b      	add	r3, r9
 800fae4:	106d      	asrs	r5, r5, #1
 800fae6:	429d      	cmp	r5, r3
 800fae8:	bf38      	it	cc
 800faea:	461d      	movcc	r5, r3
 800faec:	0553      	lsls	r3, r2, #21
 800faee:	d527      	bpl.n	800fb40 <__ssputs_r+0x8c>
 800faf0:	4629      	mov	r1, r5
 800faf2:	f7fc fc6f 	bl	800c3d4 <_malloc_r>
 800faf6:	4606      	mov	r6, r0
 800faf8:	b360      	cbz	r0, 800fb54 <__ssputs_r+0xa0>
 800fafa:	6921      	ldr	r1, [r4, #16]
 800fafc:	464a      	mov	r2, r9
 800fafe:	f7fd fe3c 	bl	800d77a <memcpy>
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb0c:	81a3      	strh	r3, [r4, #12]
 800fb0e:	6126      	str	r6, [r4, #16]
 800fb10:	6165      	str	r5, [r4, #20]
 800fb12:	444e      	add	r6, r9
 800fb14:	eba5 0509 	sub.w	r5, r5, r9
 800fb18:	6026      	str	r6, [r4, #0]
 800fb1a:	60a5      	str	r5, [r4, #8]
 800fb1c:	463e      	mov	r6, r7
 800fb1e:	42be      	cmp	r6, r7
 800fb20:	d900      	bls.n	800fb24 <__ssputs_r+0x70>
 800fb22:	463e      	mov	r6, r7
 800fb24:	6820      	ldr	r0, [r4, #0]
 800fb26:	4632      	mov	r2, r6
 800fb28:	4641      	mov	r1, r8
 800fb2a:	f000 f9c9 	bl	800fec0 <memmove>
 800fb2e:	68a3      	ldr	r3, [r4, #8]
 800fb30:	1b9b      	subs	r3, r3, r6
 800fb32:	60a3      	str	r3, [r4, #8]
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	4433      	add	r3, r6
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb40:	462a      	mov	r2, r5
 800fb42:	f000 fd8e 	bl	8010662 <_realloc_r>
 800fb46:	4606      	mov	r6, r0
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	d1e0      	bne.n	800fb0e <__ssputs_r+0x5a>
 800fb4c:	6921      	ldr	r1, [r4, #16]
 800fb4e:	4650      	mov	r0, sl
 800fb50:	f7fe fca4 	bl	800e49c <_free_r>
 800fb54:	230c      	movs	r3, #12
 800fb56:	f8ca 3000 	str.w	r3, [sl]
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb66:	e7e9      	b.n	800fb3c <__ssputs_r+0x88>

0800fb68 <_svfiprintf_r>:
 800fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	4698      	mov	r8, r3
 800fb6e:	898b      	ldrh	r3, [r1, #12]
 800fb70:	061b      	lsls	r3, r3, #24
 800fb72:	b09d      	sub	sp, #116	; 0x74
 800fb74:	4607      	mov	r7, r0
 800fb76:	460d      	mov	r5, r1
 800fb78:	4614      	mov	r4, r2
 800fb7a:	d50e      	bpl.n	800fb9a <_svfiprintf_r+0x32>
 800fb7c:	690b      	ldr	r3, [r1, #16]
 800fb7e:	b963      	cbnz	r3, 800fb9a <_svfiprintf_r+0x32>
 800fb80:	2140      	movs	r1, #64	; 0x40
 800fb82:	f7fc fc27 	bl	800c3d4 <_malloc_r>
 800fb86:	6028      	str	r0, [r5, #0]
 800fb88:	6128      	str	r0, [r5, #16]
 800fb8a:	b920      	cbnz	r0, 800fb96 <_svfiprintf_r+0x2e>
 800fb8c:	230c      	movs	r3, #12
 800fb8e:	603b      	str	r3, [r7, #0]
 800fb90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb94:	e0d0      	b.n	800fd38 <_svfiprintf_r+0x1d0>
 800fb96:	2340      	movs	r3, #64	; 0x40
 800fb98:	616b      	str	r3, [r5, #20]
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800fb9e:	2320      	movs	r3, #32
 800fba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fba8:	2330      	movs	r3, #48	; 0x30
 800fbaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fd50 <_svfiprintf_r+0x1e8>
 800fbae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbb2:	f04f 0901 	mov.w	r9, #1
 800fbb6:	4623      	mov	r3, r4
 800fbb8:	469a      	mov	sl, r3
 800fbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbbe:	b10a      	cbz	r2, 800fbc4 <_svfiprintf_r+0x5c>
 800fbc0:	2a25      	cmp	r2, #37	; 0x25
 800fbc2:	d1f9      	bne.n	800fbb8 <_svfiprintf_r+0x50>
 800fbc4:	ebba 0b04 	subs.w	fp, sl, r4
 800fbc8:	d00b      	beq.n	800fbe2 <_svfiprintf_r+0x7a>
 800fbca:	465b      	mov	r3, fp
 800fbcc:	4622      	mov	r2, r4
 800fbce:	4629      	mov	r1, r5
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	f7ff ff6f 	bl	800fab4 <__ssputs_r>
 800fbd6:	3001      	adds	r0, #1
 800fbd8:	f000 80a9 	beq.w	800fd2e <_svfiprintf_r+0x1c6>
 800fbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbde:	445a      	add	r2, fp
 800fbe0:	9209      	str	r2, [sp, #36]	; 0x24
 800fbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f000 80a1 	beq.w	800fd2e <_svfiprintf_r+0x1c6>
 800fbec:	2300      	movs	r3, #0
 800fbee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbf6:	f10a 0a01 	add.w	sl, sl, #1
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	9307      	str	r3, [sp, #28]
 800fbfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc02:	931a      	str	r3, [sp, #104]	; 0x68
 800fc04:	4654      	mov	r4, sl
 800fc06:	2205      	movs	r2, #5
 800fc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc0c:	4850      	ldr	r0, [pc, #320]	; (800fd50 <_svfiprintf_r+0x1e8>)
 800fc0e:	f7f0 fadf 	bl	80001d0 <memchr>
 800fc12:	9a04      	ldr	r2, [sp, #16]
 800fc14:	b9d8      	cbnz	r0, 800fc4e <_svfiprintf_r+0xe6>
 800fc16:	06d0      	lsls	r0, r2, #27
 800fc18:	bf44      	itt	mi
 800fc1a:	2320      	movmi	r3, #32
 800fc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc20:	0711      	lsls	r1, r2, #28
 800fc22:	bf44      	itt	mi
 800fc24:	232b      	movmi	r3, #43	; 0x2b
 800fc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc2e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc30:	d015      	beq.n	800fc5e <_svfiprintf_r+0xf6>
 800fc32:	9a07      	ldr	r2, [sp, #28]
 800fc34:	4654      	mov	r4, sl
 800fc36:	2000      	movs	r0, #0
 800fc38:	f04f 0c0a 	mov.w	ip, #10
 800fc3c:	4621      	mov	r1, r4
 800fc3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc42:	3b30      	subs	r3, #48	; 0x30
 800fc44:	2b09      	cmp	r3, #9
 800fc46:	d94d      	bls.n	800fce4 <_svfiprintf_r+0x17c>
 800fc48:	b1b0      	cbz	r0, 800fc78 <_svfiprintf_r+0x110>
 800fc4a:	9207      	str	r2, [sp, #28]
 800fc4c:	e014      	b.n	800fc78 <_svfiprintf_r+0x110>
 800fc4e:	eba0 0308 	sub.w	r3, r0, r8
 800fc52:	fa09 f303 	lsl.w	r3, r9, r3
 800fc56:	4313      	orrs	r3, r2
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	46a2      	mov	sl, r4
 800fc5c:	e7d2      	b.n	800fc04 <_svfiprintf_r+0x9c>
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	1d19      	adds	r1, r3, #4
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	9103      	str	r1, [sp, #12]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bfbb      	ittet	lt
 800fc6a:	425b      	neglt	r3, r3
 800fc6c:	f042 0202 	orrlt.w	r2, r2, #2
 800fc70:	9307      	strge	r3, [sp, #28]
 800fc72:	9307      	strlt	r3, [sp, #28]
 800fc74:	bfb8      	it	lt
 800fc76:	9204      	strlt	r2, [sp, #16]
 800fc78:	7823      	ldrb	r3, [r4, #0]
 800fc7a:	2b2e      	cmp	r3, #46	; 0x2e
 800fc7c:	d10c      	bne.n	800fc98 <_svfiprintf_r+0x130>
 800fc7e:	7863      	ldrb	r3, [r4, #1]
 800fc80:	2b2a      	cmp	r3, #42	; 0x2a
 800fc82:	d134      	bne.n	800fcee <_svfiprintf_r+0x186>
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	1d1a      	adds	r2, r3, #4
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	9203      	str	r2, [sp, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	bfb8      	it	lt
 800fc90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fc94:	3402      	adds	r4, #2
 800fc96:	9305      	str	r3, [sp, #20]
 800fc98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fd60 <_svfiprintf_r+0x1f8>
 800fc9c:	7821      	ldrb	r1, [r4, #0]
 800fc9e:	2203      	movs	r2, #3
 800fca0:	4650      	mov	r0, sl
 800fca2:	f7f0 fa95 	bl	80001d0 <memchr>
 800fca6:	b138      	cbz	r0, 800fcb8 <_svfiprintf_r+0x150>
 800fca8:	9b04      	ldr	r3, [sp, #16]
 800fcaa:	eba0 000a 	sub.w	r0, r0, sl
 800fcae:	2240      	movs	r2, #64	; 0x40
 800fcb0:	4082      	lsls	r2, r0
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	3401      	adds	r4, #1
 800fcb6:	9304      	str	r3, [sp, #16]
 800fcb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcbc:	4825      	ldr	r0, [pc, #148]	; (800fd54 <_svfiprintf_r+0x1ec>)
 800fcbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcc2:	2206      	movs	r2, #6
 800fcc4:	f7f0 fa84 	bl	80001d0 <memchr>
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d038      	beq.n	800fd3e <_svfiprintf_r+0x1d6>
 800fccc:	4b22      	ldr	r3, [pc, #136]	; (800fd58 <_svfiprintf_r+0x1f0>)
 800fcce:	bb1b      	cbnz	r3, 800fd18 <_svfiprintf_r+0x1b0>
 800fcd0:	9b03      	ldr	r3, [sp, #12]
 800fcd2:	3307      	adds	r3, #7
 800fcd4:	f023 0307 	bic.w	r3, r3, #7
 800fcd8:	3308      	adds	r3, #8
 800fcda:	9303      	str	r3, [sp, #12]
 800fcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcde:	4433      	add	r3, r6
 800fce0:	9309      	str	r3, [sp, #36]	; 0x24
 800fce2:	e768      	b.n	800fbb6 <_svfiprintf_r+0x4e>
 800fce4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fce8:	460c      	mov	r4, r1
 800fcea:	2001      	movs	r0, #1
 800fcec:	e7a6      	b.n	800fc3c <_svfiprintf_r+0xd4>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	3401      	adds	r4, #1
 800fcf2:	9305      	str	r3, [sp, #20]
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	f04f 0c0a 	mov.w	ip, #10
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd00:	3a30      	subs	r2, #48	; 0x30
 800fd02:	2a09      	cmp	r2, #9
 800fd04:	d903      	bls.n	800fd0e <_svfiprintf_r+0x1a6>
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d0c6      	beq.n	800fc98 <_svfiprintf_r+0x130>
 800fd0a:	9105      	str	r1, [sp, #20]
 800fd0c:	e7c4      	b.n	800fc98 <_svfiprintf_r+0x130>
 800fd0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd12:	4604      	mov	r4, r0
 800fd14:	2301      	movs	r3, #1
 800fd16:	e7f0      	b.n	800fcfa <_svfiprintf_r+0x192>
 800fd18:	ab03      	add	r3, sp, #12
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	462a      	mov	r2, r5
 800fd1e:	4b0f      	ldr	r3, [pc, #60]	; (800fd5c <_svfiprintf_r+0x1f4>)
 800fd20:	a904      	add	r1, sp, #16
 800fd22:	4638      	mov	r0, r7
 800fd24:	f7fc fd10 	bl	800c748 <_printf_float>
 800fd28:	1c42      	adds	r2, r0, #1
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	d1d6      	bne.n	800fcdc <_svfiprintf_r+0x174>
 800fd2e:	89ab      	ldrh	r3, [r5, #12]
 800fd30:	065b      	lsls	r3, r3, #25
 800fd32:	f53f af2d 	bmi.w	800fb90 <_svfiprintf_r+0x28>
 800fd36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd38:	b01d      	add	sp, #116	; 0x74
 800fd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd3e:	ab03      	add	r3, sp, #12
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	462a      	mov	r2, r5
 800fd44:	4b05      	ldr	r3, [pc, #20]	; (800fd5c <_svfiprintf_r+0x1f4>)
 800fd46:	a904      	add	r1, sp, #16
 800fd48:	4638      	mov	r0, r7
 800fd4a:	f7fc ffa1 	bl	800cc90 <_printf_i>
 800fd4e:	e7eb      	b.n	800fd28 <_svfiprintf_r+0x1c0>
 800fd50:	08011410 	.word	0x08011410
 800fd54:	0801141a 	.word	0x0801141a
 800fd58:	0800c749 	.word	0x0800c749
 800fd5c:	0800fab5 	.word	0x0800fab5
 800fd60:	08011416 	.word	0x08011416

0800fd64 <__sflush_r>:
 800fd64:	898a      	ldrh	r2, [r1, #12]
 800fd66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd6a:	4605      	mov	r5, r0
 800fd6c:	0710      	lsls	r0, r2, #28
 800fd6e:	460c      	mov	r4, r1
 800fd70:	d458      	bmi.n	800fe24 <__sflush_r+0xc0>
 800fd72:	684b      	ldr	r3, [r1, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	dc05      	bgt.n	800fd84 <__sflush_r+0x20>
 800fd78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	dc02      	bgt.n	800fd84 <__sflush_r+0x20>
 800fd7e:	2000      	movs	r0, #0
 800fd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd86:	2e00      	cmp	r6, #0
 800fd88:	d0f9      	beq.n	800fd7e <__sflush_r+0x1a>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd90:	682f      	ldr	r7, [r5, #0]
 800fd92:	6a21      	ldr	r1, [r4, #32]
 800fd94:	602b      	str	r3, [r5, #0]
 800fd96:	d032      	beq.n	800fdfe <__sflush_r+0x9a>
 800fd98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	075a      	lsls	r2, r3, #29
 800fd9e:	d505      	bpl.n	800fdac <__sflush_r+0x48>
 800fda0:	6863      	ldr	r3, [r4, #4]
 800fda2:	1ac0      	subs	r0, r0, r3
 800fda4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fda6:	b10b      	cbz	r3, 800fdac <__sflush_r+0x48>
 800fda8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdaa:	1ac0      	subs	r0, r0, r3
 800fdac:	2300      	movs	r3, #0
 800fdae:	4602      	mov	r2, r0
 800fdb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdb2:	6a21      	ldr	r1, [r4, #32]
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	47b0      	blx	r6
 800fdb8:	1c43      	adds	r3, r0, #1
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	d106      	bne.n	800fdcc <__sflush_r+0x68>
 800fdbe:	6829      	ldr	r1, [r5, #0]
 800fdc0:	291d      	cmp	r1, #29
 800fdc2:	d82b      	bhi.n	800fe1c <__sflush_r+0xb8>
 800fdc4:	4a29      	ldr	r2, [pc, #164]	; (800fe6c <__sflush_r+0x108>)
 800fdc6:	410a      	asrs	r2, r1
 800fdc8:	07d6      	lsls	r6, r2, #31
 800fdca:	d427      	bmi.n	800fe1c <__sflush_r+0xb8>
 800fdcc:	2200      	movs	r2, #0
 800fdce:	6062      	str	r2, [r4, #4]
 800fdd0:	04d9      	lsls	r1, r3, #19
 800fdd2:	6922      	ldr	r2, [r4, #16]
 800fdd4:	6022      	str	r2, [r4, #0]
 800fdd6:	d504      	bpl.n	800fde2 <__sflush_r+0x7e>
 800fdd8:	1c42      	adds	r2, r0, #1
 800fdda:	d101      	bne.n	800fde0 <__sflush_r+0x7c>
 800fddc:	682b      	ldr	r3, [r5, #0]
 800fdde:	b903      	cbnz	r3, 800fde2 <__sflush_r+0x7e>
 800fde0:	6560      	str	r0, [r4, #84]	; 0x54
 800fde2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fde4:	602f      	str	r7, [r5, #0]
 800fde6:	2900      	cmp	r1, #0
 800fde8:	d0c9      	beq.n	800fd7e <__sflush_r+0x1a>
 800fdea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdee:	4299      	cmp	r1, r3
 800fdf0:	d002      	beq.n	800fdf8 <__sflush_r+0x94>
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f7fe fb52 	bl	800e49c <_free_r>
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	6360      	str	r0, [r4, #52]	; 0x34
 800fdfc:	e7c0      	b.n	800fd80 <__sflush_r+0x1c>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	4628      	mov	r0, r5
 800fe02:	47b0      	blx	r6
 800fe04:	1c41      	adds	r1, r0, #1
 800fe06:	d1c8      	bne.n	800fd9a <__sflush_r+0x36>
 800fe08:	682b      	ldr	r3, [r5, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d0c5      	beq.n	800fd9a <__sflush_r+0x36>
 800fe0e:	2b1d      	cmp	r3, #29
 800fe10:	d001      	beq.n	800fe16 <__sflush_r+0xb2>
 800fe12:	2b16      	cmp	r3, #22
 800fe14:	d101      	bne.n	800fe1a <__sflush_r+0xb6>
 800fe16:	602f      	str	r7, [r5, #0]
 800fe18:	e7b1      	b.n	800fd7e <__sflush_r+0x1a>
 800fe1a:	89a3      	ldrh	r3, [r4, #12]
 800fe1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe20:	81a3      	strh	r3, [r4, #12]
 800fe22:	e7ad      	b.n	800fd80 <__sflush_r+0x1c>
 800fe24:	690f      	ldr	r7, [r1, #16]
 800fe26:	2f00      	cmp	r7, #0
 800fe28:	d0a9      	beq.n	800fd7e <__sflush_r+0x1a>
 800fe2a:	0793      	lsls	r3, r2, #30
 800fe2c:	680e      	ldr	r6, [r1, #0]
 800fe2e:	bf08      	it	eq
 800fe30:	694b      	ldreq	r3, [r1, #20]
 800fe32:	600f      	str	r7, [r1, #0]
 800fe34:	bf18      	it	ne
 800fe36:	2300      	movne	r3, #0
 800fe38:	eba6 0807 	sub.w	r8, r6, r7
 800fe3c:	608b      	str	r3, [r1, #8]
 800fe3e:	f1b8 0f00 	cmp.w	r8, #0
 800fe42:	dd9c      	ble.n	800fd7e <__sflush_r+0x1a>
 800fe44:	6a21      	ldr	r1, [r4, #32]
 800fe46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe48:	4643      	mov	r3, r8
 800fe4a:	463a      	mov	r2, r7
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	47b0      	blx	r6
 800fe50:	2800      	cmp	r0, #0
 800fe52:	dc06      	bgt.n	800fe62 <__sflush_r+0xfe>
 800fe54:	89a3      	ldrh	r3, [r4, #12]
 800fe56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe5a:	81a3      	strh	r3, [r4, #12]
 800fe5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe60:	e78e      	b.n	800fd80 <__sflush_r+0x1c>
 800fe62:	4407      	add	r7, r0
 800fe64:	eba8 0800 	sub.w	r8, r8, r0
 800fe68:	e7e9      	b.n	800fe3e <__sflush_r+0xda>
 800fe6a:	bf00      	nop
 800fe6c:	dfbffffe 	.word	0xdfbffffe

0800fe70 <_fflush_r>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	690b      	ldr	r3, [r1, #16]
 800fe74:	4605      	mov	r5, r0
 800fe76:	460c      	mov	r4, r1
 800fe78:	b913      	cbnz	r3, 800fe80 <_fflush_r+0x10>
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	bd38      	pop	{r3, r4, r5, pc}
 800fe80:	b118      	cbz	r0, 800fe8a <_fflush_r+0x1a>
 800fe82:	6a03      	ldr	r3, [r0, #32]
 800fe84:	b90b      	cbnz	r3, 800fe8a <_fflush_r+0x1a>
 800fe86:	f7fd fac1 	bl	800d40c <__sinit>
 800fe8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d0f3      	beq.n	800fe7a <_fflush_r+0xa>
 800fe92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe94:	07d0      	lsls	r0, r2, #31
 800fe96:	d404      	bmi.n	800fea2 <_fflush_r+0x32>
 800fe98:	0599      	lsls	r1, r3, #22
 800fe9a:	d402      	bmi.n	800fea2 <_fflush_r+0x32>
 800fe9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe9e:	f7fd fc6a 	bl	800d776 <__retarget_lock_acquire_recursive>
 800fea2:	4628      	mov	r0, r5
 800fea4:	4621      	mov	r1, r4
 800fea6:	f7ff ff5d 	bl	800fd64 <__sflush_r>
 800feaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feac:	07da      	lsls	r2, r3, #31
 800feae:	4605      	mov	r5, r0
 800feb0:	d4e4      	bmi.n	800fe7c <_fflush_r+0xc>
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	059b      	lsls	r3, r3, #22
 800feb6:	d4e1      	bmi.n	800fe7c <_fflush_r+0xc>
 800feb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feba:	f7fd fc5d 	bl	800d778 <__retarget_lock_release_recursive>
 800febe:	e7dd      	b.n	800fe7c <_fflush_r+0xc>

0800fec0 <memmove>:
 800fec0:	4288      	cmp	r0, r1
 800fec2:	b510      	push	{r4, lr}
 800fec4:	eb01 0402 	add.w	r4, r1, r2
 800fec8:	d902      	bls.n	800fed0 <memmove+0x10>
 800feca:	4284      	cmp	r4, r0
 800fecc:	4623      	mov	r3, r4
 800fece:	d807      	bhi.n	800fee0 <memmove+0x20>
 800fed0:	1e43      	subs	r3, r0, #1
 800fed2:	42a1      	cmp	r1, r4
 800fed4:	d008      	beq.n	800fee8 <memmove+0x28>
 800fed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fede:	e7f8      	b.n	800fed2 <memmove+0x12>
 800fee0:	4402      	add	r2, r0
 800fee2:	4601      	mov	r1, r0
 800fee4:	428a      	cmp	r2, r1
 800fee6:	d100      	bne.n	800feea <memmove+0x2a>
 800fee8:	bd10      	pop	{r4, pc}
 800feea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fef2:	e7f7      	b.n	800fee4 <memmove+0x24>

0800fef4 <strncmp>:
 800fef4:	b510      	push	{r4, lr}
 800fef6:	b16a      	cbz	r2, 800ff14 <strncmp+0x20>
 800fef8:	3901      	subs	r1, #1
 800fefa:	1884      	adds	r4, r0, r2
 800fefc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d103      	bne.n	800ff10 <strncmp+0x1c>
 800ff08:	42a0      	cmp	r0, r4
 800ff0a:	d001      	beq.n	800ff10 <strncmp+0x1c>
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	d1f5      	bne.n	800fefc <strncmp+0x8>
 800ff10:	1ad0      	subs	r0, r2, r3
 800ff12:	bd10      	pop	{r4, pc}
 800ff14:	4610      	mov	r0, r2
 800ff16:	e7fc      	b.n	800ff12 <strncmp+0x1e>

0800ff18 <nan>:
 800ff18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff20 <nan+0x8>
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	00000000 	.word	0x00000000
 800ff24:	7ff80000 	.word	0x7ff80000

0800ff28 <__assert_func>:
 800ff28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff2a:	4614      	mov	r4, r2
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <__assert_func+0x2c>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4605      	mov	r5, r0
 800ff34:	68d8      	ldr	r0, [r3, #12]
 800ff36:	b14c      	cbz	r4, 800ff4c <__assert_func+0x24>
 800ff38:	4b07      	ldr	r3, [pc, #28]	; (800ff58 <__assert_func+0x30>)
 800ff3a:	9100      	str	r1, [sp, #0]
 800ff3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff40:	4906      	ldr	r1, [pc, #24]	; (800ff5c <__assert_func+0x34>)
 800ff42:	462b      	mov	r3, r5
 800ff44:	f000 fbca 	bl	80106dc <fiprintf>
 800ff48:	f000 fbda 	bl	8010700 <abort>
 800ff4c:	4b04      	ldr	r3, [pc, #16]	; (800ff60 <__assert_func+0x38>)
 800ff4e:	461c      	mov	r4, r3
 800ff50:	e7f3      	b.n	800ff3a <__assert_func+0x12>
 800ff52:	bf00      	nop
 800ff54:	2000006c 	.word	0x2000006c
 800ff58:	08011429 	.word	0x08011429
 800ff5c:	08011436 	.word	0x08011436
 800ff60:	08011464 	.word	0x08011464

0800ff64 <_calloc_r>:
 800ff64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff66:	fba1 2402 	umull	r2, r4, r1, r2
 800ff6a:	b94c      	cbnz	r4, 800ff80 <_calloc_r+0x1c>
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	9201      	str	r2, [sp, #4]
 800ff70:	f7fc fa30 	bl	800c3d4 <_malloc_r>
 800ff74:	9a01      	ldr	r2, [sp, #4]
 800ff76:	4605      	mov	r5, r0
 800ff78:	b930      	cbnz	r0, 800ff88 <_calloc_r+0x24>
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	b003      	add	sp, #12
 800ff7e:	bd30      	pop	{r4, r5, pc}
 800ff80:	220c      	movs	r2, #12
 800ff82:	6002      	str	r2, [r0, #0]
 800ff84:	2500      	movs	r5, #0
 800ff86:	e7f8      	b.n	800ff7a <_calloc_r+0x16>
 800ff88:	4621      	mov	r1, r4
 800ff8a:	f7fd fad8 	bl	800d53e <memset>
 800ff8e:	e7f4      	b.n	800ff7a <_calloc_r+0x16>

0800ff90 <rshift>:
 800ff90:	6903      	ldr	r3, [r0, #16]
 800ff92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ff9e:	f100 0414 	add.w	r4, r0, #20
 800ffa2:	dd45      	ble.n	8010030 <rshift+0xa0>
 800ffa4:	f011 011f 	ands.w	r1, r1, #31
 800ffa8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ffac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ffb0:	d10c      	bne.n	800ffcc <rshift+0x3c>
 800ffb2:	f100 0710 	add.w	r7, r0, #16
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	42b1      	cmp	r1, r6
 800ffba:	d334      	bcc.n	8010026 <rshift+0x96>
 800ffbc:	1a9b      	subs	r3, r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	1eea      	subs	r2, r5, #3
 800ffc2:	4296      	cmp	r6, r2
 800ffc4:	bf38      	it	cc
 800ffc6:	2300      	movcc	r3, #0
 800ffc8:	4423      	add	r3, r4
 800ffca:	e015      	b.n	800fff8 <rshift+0x68>
 800ffcc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ffd0:	f1c1 0820 	rsb	r8, r1, #32
 800ffd4:	40cf      	lsrs	r7, r1
 800ffd6:	f105 0e04 	add.w	lr, r5, #4
 800ffda:	46a1      	mov	r9, r4
 800ffdc:	4576      	cmp	r6, lr
 800ffde:	46f4      	mov	ip, lr
 800ffe0:	d815      	bhi.n	801000e <rshift+0x7e>
 800ffe2:	1a9a      	subs	r2, r3, r2
 800ffe4:	0092      	lsls	r2, r2, #2
 800ffe6:	3a04      	subs	r2, #4
 800ffe8:	3501      	adds	r5, #1
 800ffea:	42ae      	cmp	r6, r5
 800ffec:	bf38      	it	cc
 800ffee:	2200      	movcc	r2, #0
 800fff0:	18a3      	adds	r3, r4, r2
 800fff2:	50a7      	str	r7, [r4, r2]
 800fff4:	b107      	cbz	r7, 800fff8 <rshift+0x68>
 800fff6:	3304      	adds	r3, #4
 800fff8:	1b1a      	subs	r2, r3, r4
 800fffa:	42a3      	cmp	r3, r4
 800fffc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010000:	bf08      	it	eq
 8010002:	2300      	moveq	r3, #0
 8010004:	6102      	str	r2, [r0, #16]
 8010006:	bf08      	it	eq
 8010008:	6143      	streq	r3, [r0, #20]
 801000a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801000e:	f8dc c000 	ldr.w	ip, [ip]
 8010012:	fa0c fc08 	lsl.w	ip, ip, r8
 8010016:	ea4c 0707 	orr.w	r7, ip, r7
 801001a:	f849 7b04 	str.w	r7, [r9], #4
 801001e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010022:	40cf      	lsrs	r7, r1
 8010024:	e7da      	b.n	800ffdc <rshift+0x4c>
 8010026:	f851 cb04 	ldr.w	ip, [r1], #4
 801002a:	f847 cf04 	str.w	ip, [r7, #4]!
 801002e:	e7c3      	b.n	800ffb8 <rshift+0x28>
 8010030:	4623      	mov	r3, r4
 8010032:	e7e1      	b.n	800fff8 <rshift+0x68>

08010034 <__hexdig_fun>:
 8010034:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010038:	2b09      	cmp	r3, #9
 801003a:	d802      	bhi.n	8010042 <__hexdig_fun+0xe>
 801003c:	3820      	subs	r0, #32
 801003e:	b2c0      	uxtb	r0, r0
 8010040:	4770      	bx	lr
 8010042:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010046:	2b05      	cmp	r3, #5
 8010048:	d801      	bhi.n	801004e <__hexdig_fun+0x1a>
 801004a:	3847      	subs	r0, #71	; 0x47
 801004c:	e7f7      	b.n	801003e <__hexdig_fun+0xa>
 801004e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010052:	2b05      	cmp	r3, #5
 8010054:	d801      	bhi.n	801005a <__hexdig_fun+0x26>
 8010056:	3827      	subs	r0, #39	; 0x27
 8010058:	e7f1      	b.n	801003e <__hexdig_fun+0xa>
 801005a:	2000      	movs	r0, #0
 801005c:	4770      	bx	lr
	...

08010060 <__gethex>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	4617      	mov	r7, r2
 8010066:	680a      	ldr	r2, [r1, #0]
 8010068:	b085      	sub	sp, #20
 801006a:	f102 0b02 	add.w	fp, r2, #2
 801006e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010072:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010076:	4681      	mov	r9, r0
 8010078:	468a      	mov	sl, r1
 801007a:	9302      	str	r3, [sp, #8]
 801007c:	32fe      	adds	r2, #254	; 0xfe
 801007e:	eb02 030b 	add.w	r3, r2, fp
 8010082:	46d8      	mov	r8, fp
 8010084:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010088:	9301      	str	r3, [sp, #4]
 801008a:	2830      	cmp	r0, #48	; 0x30
 801008c:	d0f7      	beq.n	801007e <__gethex+0x1e>
 801008e:	f7ff ffd1 	bl	8010034 <__hexdig_fun>
 8010092:	4604      	mov	r4, r0
 8010094:	2800      	cmp	r0, #0
 8010096:	d138      	bne.n	801010a <__gethex+0xaa>
 8010098:	49a7      	ldr	r1, [pc, #668]	; (8010338 <__gethex+0x2d8>)
 801009a:	2201      	movs	r2, #1
 801009c:	4640      	mov	r0, r8
 801009e:	f7ff ff29 	bl	800fef4 <strncmp>
 80100a2:	4606      	mov	r6, r0
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d169      	bne.n	801017c <__gethex+0x11c>
 80100a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80100ac:	465d      	mov	r5, fp
 80100ae:	f7ff ffc1 	bl	8010034 <__hexdig_fun>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d064      	beq.n	8010180 <__gethex+0x120>
 80100b6:	465a      	mov	r2, fp
 80100b8:	7810      	ldrb	r0, [r2, #0]
 80100ba:	2830      	cmp	r0, #48	; 0x30
 80100bc:	4690      	mov	r8, r2
 80100be:	f102 0201 	add.w	r2, r2, #1
 80100c2:	d0f9      	beq.n	80100b8 <__gethex+0x58>
 80100c4:	f7ff ffb6 	bl	8010034 <__hexdig_fun>
 80100c8:	2301      	movs	r3, #1
 80100ca:	fab0 f480 	clz	r4, r0
 80100ce:	0964      	lsrs	r4, r4, #5
 80100d0:	465e      	mov	r6, fp
 80100d2:	9301      	str	r3, [sp, #4]
 80100d4:	4642      	mov	r2, r8
 80100d6:	4615      	mov	r5, r2
 80100d8:	3201      	adds	r2, #1
 80100da:	7828      	ldrb	r0, [r5, #0]
 80100dc:	f7ff ffaa 	bl	8010034 <__hexdig_fun>
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d1f8      	bne.n	80100d6 <__gethex+0x76>
 80100e4:	4994      	ldr	r1, [pc, #592]	; (8010338 <__gethex+0x2d8>)
 80100e6:	2201      	movs	r2, #1
 80100e8:	4628      	mov	r0, r5
 80100ea:	f7ff ff03 	bl	800fef4 <strncmp>
 80100ee:	b978      	cbnz	r0, 8010110 <__gethex+0xb0>
 80100f0:	b946      	cbnz	r6, 8010104 <__gethex+0xa4>
 80100f2:	1c6e      	adds	r6, r5, #1
 80100f4:	4632      	mov	r2, r6
 80100f6:	4615      	mov	r5, r2
 80100f8:	3201      	adds	r2, #1
 80100fa:	7828      	ldrb	r0, [r5, #0]
 80100fc:	f7ff ff9a 	bl	8010034 <__hexdig_fun>
 8010100:	2800      	cmp	r0, #0
 8010102:	d1f8      	bne.n	80100f6 <__gethex+0x96>
 8010104:	1b73      	subs	r3, r6, r5
 8010106:	009e      	lsls	r6, r3, #2
 8010108:	e004      	b.n	8010114 <__gethex+0xb4>
 801010a:	2400      	movs	r4, #0
 801010c:	4626      	mov	r6, r4
 801010e:	e7e1      	b.n	80100d4 <__gethex+0x74>
 8010110:	2e00      	cmp	r6, #0
 8010112:	d1f7      	bne.n	8010104 <__gethex+0xa4>
 8010114:	782b      	ldrb	r3, [r5, #0]
 8010116:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801011a:	2b50      	cmp	r3, #80	; 0x50
 801011c:	d13d      	bne.n	801019a <__gethex+0x13a>
 801011e:	786b      	ldrb	r3, [r5, #1]
 8010120:	2b2b      	cmp	r3, #43	; 0x2b
 8010122:	d02f      	beq.n	8010184 <__gethex+0x124>
 8010124:	2b2d      	cmp	r3, #45	; 0x2d
 8010126:	d031      	beq.n	801018c <__gethex+0x12c>
 8010128:	1c69      	adds	r1, r5, #1
 801012a:	f04f 0b00 	mov.w	fp, #0
 801012e:	7808      	ldrb	r0, [r1, #0]
 8010130:	f7ff ff80 	bl	8010034 <__hexdig_fun>
 8010134:	1e42      	subs	r2, r0, #1
 8010136:	b2d2      	uxtb	r2, r2
 8010138:	2a18      	cmp	r2, #24
 801013a:	d82e      	bhi.n	801019a <__gethex+0x13a>
 801013c:	f1a0 0210 	sub.w	r2, r0, #16
 8010140:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010144:	f7ff ff76 	bl	8010034 <__hexdig_fun>
 8010148:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801014c:	fa5f fc8c 	uxtb.w	ip, ip
 8010150:	f1bc 0f18 	cmp.w	ip, #24
 8010154:	d91d      	bls.n	8010192 <__gethex+0x132>
 8010156:	f1bb 0f00 	cmp.w	fp, #0
 801015a:	d000      	beq.n	801015e <__gethex+0xfe>
 801015c:	4252      	negs	r2, r2
 801015e:	4416      	add	r6, r2
 8010160:	f8ca 1000 	str.w	r1, [sl]
 8010164:	b1dc      	cbz	r4, 801019e <__gethex+0x13e>
 8010166:	9b01      	ldr	r3, [sp, #4]
 8010168:	2b00      	cmp	r3, #0
 801016a:	bf14      	ite	ne
 801016c:	f04f 0800 	movne.w	r8, #0
 8010170:	f04f 0806 	moveq.w	r8, #6
 8010174:	4640      	mov	r0, r8
 8010176:	b005      	add	sp, #20
 8010178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017c:	4645      	mov	r5, r8
 801017e:	4626      	mov	r6, r4
 8010180:	2401      	movs	r4, #1
 8010182:	e7c7      	b.n	8010114 <__gethex+0xb4>
 8010184:	f04f 0b00 	mov.w	fp, #0
 8010188:	1ca9      	adds	r1, r5, #2
 801018a:	e7d0      	b.n	801012e <__gethex+0xce>
 801018c:	f04f 0b01 	mov.w	fp, #1
 8010190:	e7fa      	b.n	8010188 <__gethex+0x128>
 8010192:	230a      	movs	r3, #10
 8010194:	fb03 0002 	mla	r0, r3, r2, r0
 8010198:	e7d0      	b.n	801013c <__gethex+0xdc>
 801019a:	4629      	mov	r1, r5
 801019c:	e7e0      	b.n	8010160 <__gethex+0x100>
 801019e:	eba5 0308 	sub.w	r3, r5, r8
 80101a2:	3b01      	subs	r3, #1
 80101a4:	4621      	mov	r1, r4
 80101a6:	2b07      	cmp	r3, #7
 80101a8:	dc0a      	bgt.n	80101c0 <__gethex+0x160>
 80101aa:	4648      	mov	r0, r9
 80101ac:	f7fe f9c2 	bl	800e534 <_Balloc>
 80101b0:	4604      	mov	r4, r0
 80101b2:	b940      	cbnz	r0, 80101c6 <__gethex+0x166>
 80101b4:	4b61      	ldr	r3, [pc, #388]	; (801033c <__gethex+0x2dc>)
 80101b6:	4602      	mov	r2, r0
 80101b8:	21e4      	movs	r1, #228	; 0xe4
 80101ba:	4861      	ldr	r0, [pc, #388]	; (8010340 <__gethex+0x2e0>)
 80101bc:	f7ff feb4 	bl	800ff28 <__assert_func>
 80101c0:	3101      	adds	r1, #1
 80101c2:	105b      	asrs	r3, r3, #1
 80101c4:	e7ef      	b.n	80101a6 <__gethex+0x146>
 80101c6:	f100 0a14 	add.w	sl, r0, #20
 80101ca:	2300      	movs	r3, #0
 80101cc:	495a      	ldr	r1, [pc, #360]	; (8010338 <__gethex+0x2d8>)
 80101ce:	f8cd a004 	str.w	sl, [sp, #4]
 80101d2:	469b      	mov	fp, r3
 80101d4:	45a8      	cmp	r8, r5
 80101d6:	d342      	bcc.n	801025e <__gethex+0x1fe>
 80101d8:	9801      	ldr	r0, [sp, #4]
 80101da:	f840 bb04 	str.w	fp, [r0], #4
 80101de:	eba0 000a 	sub.w	r0, r0, sl
 80101e2:	1080      	asrs	r0, r0, #2
 80101e4:	6120      	str	r0, [r4, #16]
 80101e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80101ea:	4658      	mov	r0, fp
 80101ec:	f7fe fa94 	bl	800e718 <__hi0bits>
 80101f0:	683d      	ldr	r5, [r7, #0]
 80101f2:	eba8 0000 	sub.w	r0, r8, r0
 80101f6:	42a8      	cmp	r0, r5
 80101f8:	dd59      	ble.n	80102ae <__gethex+0x24e>
 80101fa:	eba0 0805 	sub.w	r8, r0, r5
 80101fe:	4641      	mov	r1, r8
 8010200:	4620      	mov	r0, r4
 8010202:	f7fe fe23 	bl	800ee4c <__any_on>
 8010206:	4683      	mov	fp, r0
 8010208:	b1b8      	cbz	r0, 801023a <__gethex+0x1da>
 801020a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801020e:	1159      	asrs	r1, r3, #5
 8010210:	f003 021f 	and.w	r2, r3, #31
 8010214:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010218:	f04f 0b01 	mov.w	fp, #1
 801021c:	fa0b f202 	lsl.w	r2, fp, r2
 8010220:	420a      	tst	r2, r1
 8010222:	d00a      	beq.n	801023a <__gethex+0x1da>
 8010224:	455b      	cmp	r3, fp
 8010226:	dd06      	ble.n	8010236 <__gethex+0x1d6>
 8010228:	f1a8 0102 	sub.w	r1, r8, #2
 801022c:	4620      	mov	r0, r4
 801022e:	f7fe fe0d 	bl	800ee4c <__any_on>
 8010232:	2800      	cmp	r0, #0
 8010234:	d138      	bne.n	80102a8 <__gethex+0x248>
 8010236:	f04f 0b02 	mov.w	fp, #2
 801023a:	4641      	mov	r1, r8
 801023c:	4620      	mov	r0, r4
 801023e:	f7ff fea7 	bl	800ff90 <rshift>
 8010242:	4446      	add	r6, r8
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	42b3      	cmp	r3, r6
 8010248:	da41      	bge.n	80102ce <__gethex+0x26e>
 801024a:	4621      	mov	r1, r4
 801024c:	4648      	mov	r0, r9
 801024e:	f7fe f9b1 	bl	800e5b4 <_Bfree>
 8010252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010254:	2300      	movs	r3, #0
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801025c:	e78a      	b.n	8010174 <__gethex+0x114>
 801025e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010262:	2a2e      	cmp	r2, #46	; 0x2e
 8010264:	d014      	beq.n	8010290 <__gethex+0x230>
 8010266:	2b20      	cmp	r3, #32
 8010268:	d106      	bne.n	8010278 <__gethex+0x218>
 801026a:	9b01      	ldr	r3, [sp, #4]
 801026c:	f843 bb04 	str.w	fp, [r3], #4
 8010270:	f04f 0b00 	mov.w	fp, #0
 8010274:	9301      	str	r3, [sp, #4]
 8010276:	465b      	mov	r3, fp
 8010278:	7828      	ldrb	r0, [r5, #0]
 801027a:	9303      	str	r3, [sp, #12]
 801027c:	f7ff feda 	bl	8010034 <__hexdig_fun>
 8010280:	9b03      	ldr	r3, [sp, #12]
 8010282:	f000 000f 	and.w	r0, r0, #15
 8010286:	4098      	lsls	r0, r3
 8010288:	ea4b 0b00 	orr.w	fp, fp, r0
 801028c:	3304      	adds	r3, #4
 801028e:	e7a1      	b.n	80101d4 <__gethex+0x174>
 8010290:	45a8      	cmp	r8, r5
 8010292:	d8e8      	bhi.n	8010266 <__gethex+0x206>
 8010294:	2201      	movs	r2, #1
 8010296:	4628      	mov	r0, r5
 8010298:	9303      	str	r3, [sp, #12]
 801029a:	f7ff fe2b 	bl	800fef4 <strncmp>
 801029e:	4926      	ldr	r1, [pc, #152]	; (8010338 <__gethex+0x2d8>)
 80102a0:	9b03      	ldr	r3, [sp, #12]
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d1df      	bne.n	8010266 <__gethex+0x206>
 80102a6:	e795      	b.n	80101d4 <__gethex+0x174>
 80102a8:	f04f 0b03 	mov.w	fp, #3
 80102ac:	e7c5      	b.n	801023a <__gethex+0x1da>
 80102ae:	da0b      	bge.n	80102c8 <__gethex+0x268>
 80102b0:	eba5 0800 	sub.w	r8, r5, r0
 80102b4:	4621      	mov	r1, r4
 80102b6:	4642      	mov	r2, r8
 80102b8:	4648      	mov	r0, r9
 80102ba:	f7fe fb95 	bl	800e9e8 <__lshift>
 80102be:	eba6 0608 	sub.w	r6, r6, r8
 80102c2:	4604      	mov	r4, r0
 80102c4:	f100 0a14 	add.w	sl, r0, #20
 80102c8:	f04f 0b00 	mov.w	fp, #0
 80102cc:	e7ba      	b.n	8010244 <__gethex+0x1e4>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	42b3      	cmp	r3, r6
 80102d2:	dd73      	ble.n	80103bc <__gethex+0x35c>
 80102d4:	1b9e      	subs	r6, r3, r6
 80102d6:	42b5      	cmp	r5, r6
 80102d8:	dc34      	bgt.n	8010344 <__gethex+0x2e4>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b02      	cmp	r3, #2
 80102de:	d023      	beq.n	8010328 <__gethex+0x2c8>
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d025      	beq.n	8010330 <__gethex+0x2d0>
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d115      	bne.n	8010314 <__gethex+0x2b4>
 80102e8:	42b5      	cmp	r5, r6
 80102ea:	d113      	bne.n	8010314 <__gethex+0x2b4>
 80102ec:	2d01      	cmp	r5, #1
 80102ee:	d10b      	bne.n	8010308 <__gethex+0x2a8>
 80102f0:	9a02      	ldr	r2, [sp, #8]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6013      	str	r3, [r2, #0]
 80102f6:	2301      	movs	r3, #1
 80102f8:	6123      	str	r3, [r4, #16]
 80102fa:	f8ca 3000 	str.w	r3, [sl]
 80102fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010300:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010304:	601c      	str	r4, [r3, #0]
 8010306:	e735      	b.n	8010174 <__gethex+0x114>
 8010308:	1e69      	subs	r1, r5, #1
 801030a:	4620      	mov	r0, r4
 801030c:	f7fe fd9e 	bl	800ee4c <__any_on>
 8010310:	2800      	cmp	r0, #0
 8010312:	d1ed      	bne.n	80102f0 <__gethex+0x290>
 8010314:	4621      	mov	r1, r4
 8010316:	4648      	mov	r0, r9
 8010318:	f7fe f94c 	bl	800e5b4 <_Bfree>
 801031c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801031e:	2300      	movs	r3, #0
 8010320:	6013      	str	r3, [r2, #0]
 8010322:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010326:	e725      	b.n	8010174 <__gethex+0x114>
 8010328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801032a:	2b00      	cmp	r3, #0
 801032c:	d1f2      	bne.n	8010314 <__gethex+0x2b4>
 801032e:	e7df      	b.n	80102f0 <__gethex+0x290>
 8010330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010332:	2b00      	cmp	r3, #0
 8010334:	d1dc      	bne.n	80102f0 <__gethex+0x290>
 8010336:	e7ed      	b.n	8010314 <__gethex+0x2b4>
 8010338:	080113bc 	.word	0x080113bc
 801033c:	08011252 	.word	0x08011252
 8010340:	08011465 	.word	0x08011465
 8010344:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8010348:	f1bb 0f00 	cmp.w	fp, #0
 801034c:	d133      	bne.n	80103b6 <__gethex+0x356>
 801034e:	f1b8 0f00 	cmp.w	r8, #0
 8010352:	d004      	beq.n	801035e <__gethex+0x2fe>
 8010354:	4641      	mov	r1, r8
 8010356:	4620      	mov	r0, r4
 8010358:	f7fe fd78 	bl	800ee4c <__any_on>
 801035c:	4683      	mov	fp, r0
 801035e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010362:	2301      	movs	r3, #1
 8010364:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010368:	f008 081f 	and.w	r8, r8, #31
 801036c:	fa03 f308 	lsl.w	r3, r3, r8
 8010370:	4213      	tst	r3, r2
 8010372:	4631      	mov	r1, r6
 8010374:	4620      	mov	r0, r4
 8010376:	bf18      	it	ne
 8010378:	f04b 0b02 	orrne.w	fp, fp, #2
 801037c:	1bad      	subs	r5, r5, r6
 801037e:	f7ff fe07 	bl	800ff90 <rshift>
 8010382:	687e      	ldr	r6, [r7, #4]
 8010384:	f04f 0802 	mov.w	r8, #2
 8010388:	f1bb 0f00 	cmp.w	fp, #0
 801038c:	d04a      	beq.n	8010424 <__gethex+0x3c4>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b02      	cmp	r3, #2
 8010392:	d016      	beq.n	80103c2 <__gethex+0x362>
 8010394:	2b03      	cmp	r3, #3
 8010396:	d018      	beq.n	80103ca <__gethex+0x36a>
 8010398:	2b01      	cmp	r3, #1
 801039a:	d109      	bne.n	80103b0 <__gethex+0x350>
 801039c:	f01b 0f02 	tst.w	fp, #2
 80103a0:	d006      	beq.n	80103b0 <__gethex+0x350>
 80103a2:	f8da 3000 	ldr.w	r3, [sl]
 80103a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80103aa:	f01b 0f01 	tst.w	fp, #1
 80103ae:	d10f      	bne.n	80103d0 <__gethex+0x370>
 80103b0:	f048 0810 	orr.w	r8, r8, #16
 80103b4:	e036      	b.n	8010424 <__gethex+0x3c4>
 80103b6:	f04f 0b01 	mov.w	fp, #1
 80103ba:	e7d0      	b.n	801035e <__gethex+0x2fe>
 80103bc:	f04f 0801 	mov.w	r8, #1
 80103c0:	e7e2      	b.n	8010388 <__gethex+0x328>
 80103c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103c4:	f1c3 0301 	rsb	r3, r3, #1
 80103c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80103ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d0ef      	beq.n	80103b0 <__gethex+0x350>
 80103d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80103d4:	f104 0214 	add.w	r2, r4, #20
 80103d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80103dc:	9301      	str	r3, [sp, #4]
 80103de:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80103e2:	2300      	movs	r3, #0
 80103e4:	4694      	mov	ip, r2
 80103e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80103ea:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80103ee:	d01e      	beq.n	801042e <__gethex+0x3ce>
 80103f0:	3101      	adds	r1, #1
 80103f2:	f8cc 1000 	str.w	r1, [ip]
 80103f6:	f1b8 0f02 	cmp.w	r8, #2
 80103fa:	f104 0214 	add.w	r2, r4, #20
 80103fe:	d13d      	bne.n	801047c <__gethex+0x41c>
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	3b01      	subs	r3, #1
 8010404:	42ab      	cmp	r3, r5
 8010406:	d10b      	bne.n	8010420 <__gethex+0x3c0>
 8010408:	1169      	asrs	r1, r5, #5
 801040a:	2301      	movs	r3, #1
 801040c:	f005 051f 	and.w	r5, r5, #31
 8010410:	fa03 f505 	lsl.w	r5, r3, r5
 8010414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010418:	421d      	tst	r5, r3
 801041a:	bf18      	it	ne
 801041c:	f04f 0801 	movne.w	r8, #1
 8010420:	f048 0820 	orr.w	r8, r8, #32
 8010424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010426:	601c      	str	r4, [r3, #0]
 8010428:	9b02      	ldr	r3, [sp, #8]
 801042a:	601e      	str	r6, [r3, #0]
 801042c:	e6a2      	b.n	8010174 <__gethex+0x114>
 801042e:	4290      	cmp	r0, r2
 8010430:	f842 3c04 	str.w	r3, [r2, #-4]
 8010434:	d8d6      	bhi.n	80103e4 <__gethex+0x384>
 8010436:	68a2      	ldr	r2, [r4, #8]
 8010438:	4593      	cmp	fp, r2
 801043a:	db17      	blt.n	801046c <__gethex+0x40c>
 801043c:	6861      	ldr	r1, [r4, #4]
 801043e:	4648      	mov	r0, r9
 8010440:	3101      	adds	r1, #1
 8010442:	f7fe f877 	bl	800e534 <_Balloc>
 8010446:	4682      	mov	sl, r0
 8010448:	b918      	cbnz	r0, 8010452 <__gethex+0x3f2>
 801044a:	4b1b      	ldr	r3, [pc, #108]	; (80104b8 <__gethex+0x458>)
 801044c:	4602      	mov	r2, r0
 801044e:	2184      	movs	r1, #132	; 0x84
 8010450:	e6b3      	b.n	80101ba <__gethex+0x15a>
 8010452:	6922      	ldr	r2, [r4, #16]
 8010454:	3202      	adds	r2, #2
 8010456:	f104 010c 	add.w	r1, r4, #12
 801045a:	0092      	lsls	r2, r2, #2
 801045c:	300c      	adds	r0, #12
 801045e:	f7fd f98c 	bl	800d77a <memcpy>
 8010462:	4621      	mov	r1, r4
 8010464:	4648      	mov	r0, r9
 8010466:	f7fe f8a5 	bl	800e5b4 <_Bfree>
 801046a:	4654      	mov	r4, sl
 801046c:	6922      	ldr	r2, [r4, #16]
 801046e:	1c51      	adds	r1, r2, #1
 8010470:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010474:	6121      	str	r1, [r4, #16]
 8010476:	2101      	movs	r1, #1
 8010478:	6151      	str	r1, [r2, #20]
 801047a:	e7bc      	b.n	80103f6 <__gethex+0x396>
 801047c:	6921      	ldr	r1, [r4, #16]
 801047e:	4559      	cmp	r1, fp
 8010480:	dd0b      	ble.n	801049a <__gethex+0x43a>
 8010482:	2101      	movs	r1, #1
 8010484:	4620      	mov	r0, r4
 8010486:	f7ff fd83 	bl	800ff90 <rshift>
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	3601      	adds	r6, #1
 801048e:	42b3      	cmp	r3, r6
 8010490:	f6ff aedb 	blt.w	801024a <__gethex+0x1ea>
 8010494:	f04f 0801 	mov.w	r8, #1
 8010498:	e7c2      	b.n	8010420 <__gethex+0x3c0>
 801049a:	f015 051f 	ands.w	r5, r5, #31
 801049e:	d0f9      	beq.n	8010494 <__gethex+0x434>
 80104a0:	9b01      	ldr	r3, [sp, #4]
 80104a2:	441a      	add	r2, r3
 80104a4:	f1c5 0520 	rsb	r5, r5, #32
 80104a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80104ac:	f7fe f934 	bl	800e718 <__hi0bits>
 80104b0:	42a8      	cmp	r0, r5
 80104b2:	dbe6      	blt.n	8010482 <__gethex+0x422>
 80104b4:	e7ee      	b.n	8010494 <__gethex+0x434>
 80104b6:	bf00      	nop
 80104b8:	08011252 	.word	0x08011252

080104bc <L_shift>:
 80104bc:	f1c2 0208 	rsb	r2, r2, #8
 80104c0:	0092      	lsls	r2, r2, #2
 80104c2:	b570      	push	{r4, r5, r6, lr}
 80104c4:	f1c2 0620 	rsb	r6, r2, #32
 80104c8:	6843      	ldr	r3, [r0, #4]
 80104ca:	6804      	ldr	r4, [r0, #0]
 80104cc:	fa03 f506 	lsl.w	r5, r3, r6
 80104d0:	432c      	orrs	r4, r5
 80104d2:	40d3      	lsrs	r3, r2
 80104d4:	6004      	str	r4, [r0, #0]
 80104d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80104da:	4288      	cmp	r0, r1
 80104dc:	d3f4      	bcc.n	80104c8 <L_shift+0xc>
 80104de:	bd70      	pop	{r4, r5, r6, pc}

080104e0 <__match>:
 80104e0:	b530      	push	{r4, r5, lr}
 80104e2:	6803      	ldr	r3, [r0, #0]
 80104e4:	3301      	adds	r3, #1
 80104e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104ea:	b914      	cbnz	r4, 80104f2 <__match+0x12>
 80104ec:	6003      	str	r3, [r0, #0]
 80104ee:	2001      	movs	r0, #1
 80104f0:	bd30      	pop	{r4, r5, pc}
 80104f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80104fa:	2d19      	cmp	r5, #25
 80104fc:	bf98      	it	ls
 80104fe:	3220      	addls	r2, #32
 8010500:	42a2      	cmp	r2, r4
 8010502:	d0f0      	beq.n	80104e6 <__match+0x6>
 8010504:	2000      	movs	r0, #0
 8010506:	e7f3      	b.n	80104f0 <__match+0x10>

08010508 <__hexnan>:
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050c:	680b      	ldr	r3, [r1, #0]
 801050e:	6801      	ldr	r1, [r0, #0]
 8010510:	115e      	asrs	r6, r3, #5
 8010512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010516:	f013 031f 	ands.w	r3, r3, #31
 801051a:	b087      	sub	sp, #28
 801051c:	bf18      	it	ne
 801051e:	3604      	addne	r6, #4
 8010520:	2500      	movs	r5, #0
 8010522:	1f37      	subs	r7, r6, #4
 8010524:	4682      	mov	sl, r0
 8010526:	4690      	mov	r8, r2
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	f846 5c04 	str.w	r5, [r6, #-4]
 801052e:	46b9      	mov	r9, r7
 8010530:	463c      	mov	r4, r7
 8010532:	9502      	str	r5, [sp, #8]
 8010534:	46ab      	mov	fp, r5
 8010536:	784a      	ldrb	r2, [r1, #1]
 8010538:	1c4b      	adds	r3, r1, #1
 801053a:	9303      	str	r3, [sp, #12]
 801053c:	b342      	cbz	r2, 8010590 <__hexnan+0x88>
 801053e:	4610      	mov	r0, r2
 8010540:	9105      	str	r1, [sp, #20]
 8010542:	9204      	str	r2, [sp, #16]
 8010544:	f7ff fd76 	bl	8010034 <__hexdig_fun>
 8010548:	2800      	cmp	r0, #0
 801054a:	d14f      	bne.n	80105ec <__hexnan+0xe4>
 801054c:	9a04      	ldr	r2, [sp, #16]
 801054e:	9905      	ldr	r1, [sp, #20]
 8010550:	2a20      	cmp	r2, #32
 8010552:	d818      	bhi.n	8010586 <__hexnan+0x7e>
 8010554:	9b02      	ldr	r3, [sp, #8]
 8010556:	459b      	cmp	fp, r3
 8010558:	dd13      	ble.n	8010582 <__hexnan+0x7a>
 801055a:	454c      	cmp	r4, r9
 801055c:	d206      	bcs.n	801056c <__hexnan+0x64>
 801055e:	2d07      	cmp	r5, #7
 8010560:	dc04      	bgt.n	801056c <__hexnan+0x64>
 8010562:	462a      	mov	r2, r5
 8010564:	4649      	mov	r1, r9
 8010566:	4620      	mov	r0, r4
 8010568:	f7ff ffa8 	bl	80104bc <L_shift>
 801056c:	4544      	cmp	r4, r8
 801056e:	d950      	bls.n	8010612 <__hexnan+0x10a>
 8010570:	2300      	movs	r3, #0
 8010572:	f1a4 0904 	sub.w	r9, r4, #4
 8010576:	f844 3c04 	str.w	r3, [r4, #-4]
 801057a:	f8cd b008 	str.w	fp, [sp, #8]
 801057e:	464c      	mov	r4, r9
 8010580:	461d      	mov	r5, r3
 8010582:	9903      	ldr	r1, [sp, #12]
 8010584:	e7d7      	b.n	8010536 <__hexnan+0x2e>
 8010586:	2a29      	cmp	r2, #41	; 0x29
 8010588:	d155      	bne.n	8010636 <__hexnan+0x12e>
 801058a:	3102      	adds	r1, #2
 801058c:	f8ca 1000 	str.w	r1, [sl]
 8010590:	f1bb 0f00 	cmp.w	fp, #0
 8010594:	d04f      	beq.n	8010636 <__hexnan+0x12e>
 8010596:	454c      	cmp	r4, r9
 8010598:	d206      	bcs.n	80105a8 <__hexnan+0xa0>
 801059a:	2d07      	cmp	r5, #7
 801059c:	dc04      	bgt.n	80105a8 <__hexnan+0xa0>
 801059e:	462a      	mov	r2, r5
 80105a0:	4649      	mov	r1, r9
 80105a2:	4620      	mov	r0, r4
 80105a4:	f7ff ff8a 	bl	80104bc <L_shift>
 80105a8:	4544      	cmp	r4, r8
 80105aa:	d934      	bls.n	8010616 <__hexnan+0x10e>
 80105ac:	f1a8 0204 	sub.w	r2, r8, #4
 80105b0:	4623      	mov	r3, r4
 80105b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80105b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80105ba:	429f      	cmp	r7, r3
 80105bc:	d2f9      	bcs.n	80105b2 <__hexnan+0xaa>
 80105be:	1b3b      	subs	r3, r7, r4
 80105c0:	f023 0303 	bic.w	r3, r3, #3
 80105c4:	3304      	adds	r3, #4
 80105c6:	3e03      	subs	r6, #3
 80105c8:	3401      	adds	r4, #1
 80105ca:	42a6      	cmp	r6, r4
 80105cc:	bf38      	it	cc
 80105ce:	2304      	movcc	r3, #4
 80105d0:	4443      	add	r3, r8
 80105d2:	2200      	movs	r2, #0
 80105d4:	f843 2b04 	str.w	r2, [r3], #4
 80105d8:	429f      	cmp	r7, r3
 80105da:	d2fb      	bcs.n	80105d4 <__hexnan+0xcc>
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	b91b      	cbnz	r3, 80105e8 <__hexnan+0xe0>
 80105e0:	4547      	cmp	r7, r8
 80105e2:	d126      	bne.n	8010632 <__hexnan+0x12a>
 80105e4:	2301      	movs	r3, #1
 80105e6:	603b      	str	r3, [r7, #0]
 80105e8:	2005      	movs	r0, #5
 80105ea:	e025      	b.n	8010638 <__hexnan+0x130>
 80105ec:	3501      	adds	r5, #1
 80105ee:	2d08      	cmp	r5, #8
 80105f0:	f10b 0b01 	add.w	fp, fp, #1
 80105f4:	dd06      	ble.n	8010604 <__hexnan+0xfc>
 80105f6:	4544      	cmp	r4, r8
 80105f8:	d9c3      	bls.n	8010582 <__hexnan+0x7a>
 80105fa:	2300      	movs	r3, #0
 80105fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010600:	2501      	movs	r5, #1
 8010602:	3c04      	subs	r4, #4
 8010604:	6822      	ldr	r2, [r4, #0]
 8010606:	f000 000f 	and.w	r0, r0, #15
 801060a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801060e:	6020      	str	r0, [r4, #0]
 8010610:	e7b7      	b.n	8010582 <__hexnan+0x7a>
 8010612:	2508      	movs	r5, #8
 8010614:	e7b5      	b.n	8010582 <__hexnan+0x7a>
 8010616:	9b01      	ldr	r3, [sp, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d0df      	beq.n	80105dc <__hexnan+0xd4>
 801061c:	f1c3 0320 	rsb	r3, r3, #32
 8010620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010624:	40da      	lsrs	r2, r3
 8010626:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801062a:	4013      	ands	r3, r2
 801062c:	f846 3c04 	str.w	r3, [r6, #-4]
 8010630:	e7d4      	b.n	80105dc <__hexnan+0xd4>
 8010632:	3f04      	subs	r7, #4
 8010634:	e7d2      	b.n	80105dc <__hexnan+0xd4>
 8010636:	2004      	movs	r0, #4
 8010638:	b007      	add	sp, #28
 801063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801063e <__ascii_mbtowc>:
 801063e:	b082      	sub	sp, #8
 8010640:	b901      	cbnz	r1, 8010644 <__ascii_mbtowc+0x6>
 8010642:	a901      	add	r1, sp, #4
 8010644:	b142      	cbz	r2, 8010658 <__ascii_mbtowc+0x1a>
 8010646:	b14b      	cbz	r3, 801065c <__ascii_mbtowc+0x1e>
 8010648:	7813      	ldrb	r3, [r2, #0]
 801064a:	600b      	str	r3, [r1, #0]
 801064c:	7812      	ldrb	r2, [r2, #0]
 801064e:	1e10      	subs	r0, r2, #0
 8010650:	bf18      	it	ne
 8010652:	2001      	movne	r0, #1
 8010654:	b002      	add	sp, #8
 8010656:	4770      	bx	lr
 8010658:	4610      	mov	r0, r2
 801065a:	e7fb      	b.n	8010654 <__ascii_mbtowc+0x16>
 801065c:	f06f 0001 	mvn.w	r0, #1
 8010660:	e7f8      	b.n	8010654 <__ascii_mbtowc+0x16>

08010662 <_realloc_r>:
 8010662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010666:	4680      	mov	r8, r0
 8010668:	4614      	mov	r4, r2
 801066a:	460e      	mov	r6, r1
 801066c:	b921      	cbnz	r1, 8010678 <_realloc_r+0x16>
 801066e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010672:	4611      	mov	r1, r2
 8010674:	f7fb beae 	b.w	800c3d4 <_malloc_r>
 8010678:	b92a      	cbnz	r2, 8010686 <_realloc_r+0x24>
 801067a:	f7fd ff0f 	bl	800e49c <_free_r>
 801067e:	4625      	mov	r5, r4
 8010680:	4628      	mov	r0, r5
 8010682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010686:	f000 f842 	bl	801070e <_malloc_usable_size_r>
 801068a:	4284      	cmp	r4, r0
 801068c:	4607      	mov	r7, r0
 801068e:	d802      	bhi.n	8010696 <_realloc_r+0x34>
 8010690:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010694:	d812      	bhi.n	80106bc <_realloc_r+0x5a>
 8010696:	4621      	mov	r1, r4
 8010698:	4640      	mov	r0, r8
 801069a:	f7fb fe9b 	bl	800c3d4 <_malloc_r>
 801069e:	4605      	mov	r5, r0
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d0ed      	beq.n	8010680 <_realloc_r+0x1e>
 80106a4:	42bc      	cmp	r4, r7
 80106a6:	4622      	mov	r2, r4
 80106a8:	4631      	mov	r1, r6
 80106aa:	bf28      	it	cs
 80106ac:	463a      	movcs	r2, r7
 80106ae:	f7fd f864 	bl	800d77a <memcpy>
 80106b2:	4631      	mov	r1, r6
 80106b4:	4640      	mov	r0, r8
 80106b6:	f7fd fef1 	bl	800e49c <_free_r>
 80106ba:	e7e1      	b.n	8010680 <_realloc_r+0x1e>
 80106bc:	4635      	mov	r5, r6
 80106be:	e7df      	b.n	8010680 <_realloc_r+0x1e>

080106c0 <__ascii_wctomb>:
 80106c0:	b149      	cbz	r1, 80106d6 <__ascii_wctomb+0x16>
 80106c2:	2aff      	cmp	r2, #255	; 0xff
 80106c4:	bf85      	ittet	hi
 80106c6:	238a      	movhi	r3, #138	; 0x8a
 80106c8:	6003      	strhi	r3, [r0, #0]
 80106ca:	700a      	strbls	r2, [r1, #0]
 80106cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80106d0:	bf98      	it	ls
 80106d2:	2001      	movls	r0, #1
 80106d4:	4770      	bx	lr
 80106d6:	4608      	mov	r0, r1
 80106d8:	4770      	bx	lr
	...

080106dc <fiprintf>:
 80106dc:	b40e      	push	{r1, r2, r3}
 80106de:	b503      	push	{r0, r1, lr}
 80106e0:	4601      	mov	r1, r0
 80106e2:	ab03      	add	r3, sp, #12
 80106e4:	4805      	ldr	r0, [pc, #20]	; (80106fc <fiprintf+0x20>)
 80106e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ea:	6800      	ldr	r0, [r0, #0]
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	f000 f83f 	bl	8010770 <_vfiprintf_r>
 80106f2:	b002      	add	sp, #8
 80106f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80106f8:	b003      	add	sp, #12
 80106fa:	4770      	bx	lr
 80106fc:	2000006c 	.word	0x2000006c

08010700 <abort>:
 8010700:	b508      	push	{r3, lr}
 8010702:	2006      	movs	r0, #6
 8010704:	f000 fa0c 	bl	8010b20 <raise>
 8010708:	2001      	movs	r0, #1
 801070a:	f7f2 fa93 	bl	8002c34 <_exit>

0801070e <_malloc_usable_size_r>:
 801070e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010712:	1f18      	subs	r0, r3, #4
 8010714:	2b00      	cmp	r3, #0
 8010716:	bfbc      	itt	lt
 8010718:	580b      	ldrlt	r3, [r1, r0]
 801071a:	18c0      	addlt	r0, r0, r3
 801071c:	4770      	bx	lr

0801071e <__sfputc_r>:
 801071e:	6893      	ldr	r3, [r2, #8]
 8010720:	3b01      	subs	r3, #1
 8010722:	2b00      	cmp	r3, #0
 8010724:	b410      	push	{r4}
 8010726:	6093      	str	r3, [r2, #8]
 8010728:	da08      	bge.n	801073c <__sfputc_r+0x1e>
 801072a:	6994      	ldr	r4, [r2, #24]
 801072c:	42a3      	cmp	r3, r4
 801072e:	db01      	blt.n	8010734 <__sfputc_r+0x16>
 8010730:	290a      	cmp	r1, #10
 8010732:	d103      	bne.n	801073c <__sfputc_r+0x1e>
 8010734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010738:	f000 b934 	b.w	80109a4 <__swbuf_r>
 801073c:	6813      	ldr	r3, [r2, #0]
 801073e:	1c58      	adds	r0, r3, #1
 8010740:	6010      	str	r0, [r2, #0]
 8010742:	7019      	strb	r1, [r3, #0]
 8010744:	4608      	mov	r0, r1
 8010746:	f85d 4b04 	ldr.w	r4, [sp], #4
 801074a:	4770      	bx	lr

0801074c <__sfputs_r>:
 801074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074e:	4606      	mov	r6, r0
 8010750:	460f      	mov	r7, r1
 8010752:	4614      	mov	r4, r2
 8010754:	18d5      	adds	r5, r2, r3
 8010756:	42ac      	cmp	r4, r5
 8010758:	d101      	bne.n	801075e <__sfputs_r+0x12>
 801075a:	2000      	movs	r0, #0
 801075c:	e007      	b.n	801076e <__sfputs_r+0x22>
 801075e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010762:	463a      	mov	r2, r7
 8010764:	4630      	mov	r0, r6
 8010766:	f7ff ffda 	bl	801071e <__sfputc_r>
 801076a:	1c43      	adds	r3, r0, #1
 801076c:	d1f3      	bne.n	8010756 <__sfputs_r+0xa>
 801076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010770 <_vfiprintf_r>:
 8010770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010774:	460d      	mov	r5, r1
 8010776:	b09d      	sub	sp, #116	; 0x74
 8010778:	4614      	mov	r4, r2
 801077a:	4698      	mov	r8, r3
 801077c:	4606      	mov	r6, r0
 801077e:	b118      	cbz	r0, 8010788 <_vfiprintf_r+0x18>
 8010780:	6a03      	ldr	r3, [r0, #32]
 8010782:	b90b      	cbnz	r3, 8010788 <_vfiprintf_r+0x18>
 8010784:	f7fc fe42 	bl	800d40c <__sinit>
 8010788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801078a:	07d9      	lsls	r1, r3, #31
 801078c:	d405      	bmi.n	801079a <_vfiprintf_r+0x2a>
 801078e:	89ab      	ldrh	r3, [r5, #12]
 8010790:	059a      	lsls	r2, r3, #22
 8010792:	d402      	bmi.n	801079a <_vfiprintf_r+0x2a>
 8010794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010796:	f7fc ffee 	bl	800d776 <__retarget_lock_acquire_recursive>
 801079a:	89ab      	ldrh	r3, [r5, #12]
 801079c:	071b      	lsls	r3, r3, #28
 801079e:	d501      	bpl.n	80107a4 <_vfiprintf_r+0x34>
 80107a0:	692b      	ldr	r3, [r5, #16]
 80107a2:	b99b      	cbnz	r3, 80107cc <_vfiprintf_r+0x5c>
 80107a4:	4629      	mov	r1, r5
 80107a6:	4630      	mov	r0, r6
 80107a8:	f000 f93a 	bl	8010a20 <__swsetup_r>
 80107ac:	b170      	cbz	r0, 80107cc <_vfiprintf_r+0x5c>
 80107ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107b0:	07dc      	lsls	r4, r3, #31
 80107b2:	d504      	bpl.n	80107be <_vfiprintf_r+0x4e>
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107b8:	b01d      	add	sp, #116	; 0x74
 80107ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107be:	89ab      	ldrh	r3, [r5, #12]
 80107c0:	0598      	lsls	r0, r3, #22
 80107c2:	d4f7      	bmi.n	80107b4 <_vfiprintf_r+0x44>
 80107c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107c6:	f7fc ffd7 	bl	800d778 <__retarget_lock_release_recursive>
 80107ca:	e7f3      	b.n	80107b4 <_vfiprintf_r+0x44>
 80107cc:	2300      	movs	r3, #0
 80107ce:	9309      	str	r3, [sp, #36]	; 0x24
 80107d0:	2320      	movs	r3, #32
 80107d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80107da:	2330      	movs	r3, #48	; 0x30
 80107dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010990 <_vfiprintf_r+0x220>
 80107e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107e4:	f04f 0901 	mov.w	r9, #1
 80107e8:	4623      	mov	r3, r4
 80107ea:	469a      	mov	sl, r3
 80107ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107f0:	b10a      	cbz	r2, 80107f6 <_vfiprintf_r+0x86>
 80107f2:	2a25      	cmp	r2, #37	; 0x25
 80107f4:	d1f9      	bne.n	80107ea <_vfiprintf_r+0x7a>
 80107f6:	ebba 0b04 	subs.w	fp, sl, r4
 80107fa:	d00b      	beq.n	8010814 <_vfiprintf_r+0xa4>
 80107fc:	465b      	mov	r3, fp
 80107fe:	4622      	mov	r2, r4
 8010800:	4629      	mov	r1, r5
 8010802:	4630      	mov	r0, r6
 8010804:	f7ff ffa2 	bl	801074c <__sfputs_r>
 8010808:	3001      	adds	r0, #1
 801080a:	f000 80a9 	beq.w	8010960 <_vfiprintf_r+0x1f0>
 801080e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010810:	445a      	add	r2, fp
 8010812:	9209      	str	r2, [sp, #36]	; 0x24
 8010814:	f89a 3000 	ldrb.w	r3, [sl]
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 80a1 	beq.w	8010960 <_vfiprintf_r+0x1f0>
 801081e:	2300      	movs	r3, #0
 8010820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010828:	f10a 0a01 	add.w	sl, sl, #1
 801082c:	9304      	str	r3, [sp, #16]
 801082e:	9307      	str	r3, [sp, #28]
 8010830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010834:	931a      	str	r3, [sp, #104]	; 0x68
 8010836:	4654      	mov	r4, sl
 8010838:	2205      	movs	r2, #5
 801083a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801083e:	4854      	ldr	r0, [pc, #336]	; (8010990 <_vfiprintf_r+0x220>)
 8010840:	f7ef fcc6 	bl	80001d0 <memchr>
 8010844:	9a04      	ldr	r2, [sp, #16]
 8010846:	b9d8      	cbnz	r0, 8010880 <_vfiprintf_r+0x110>
 8010848:	06d1      	lsls	r1, r2, #27
 801084a:	bf44      	itt	mi
 801084c:	2320      	movmi	r3, #32
 801084e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010852:	0713      	lsls	r3, r2, #28
 8010854:	bf44      	itt	mi
 8010856:	232b      	movmi	r3, #43	; 0x2b
 8010858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801085c:	f89a 3000 	ldrb.w	r3, [sl]
 8010860:	2b2a      	cmp	r3, #42	; 0x2a
 8010862:	d015      	beq.n	8010890 <_vfiprintf_r+0x120>
 8010864:	9a07      	ldr	r2, [sp, #28]
 8010866:	4654      	mov	r4, sl
 8010868:	2000      	movs	r0, #0
 801086a:	f04f 0c0a 	mov.w	ip, #10
 801086e:	4621      	mov	r1, r4
 8010870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010874:	3b30      	subs	r3, #48	; 0x30
 8010876:	2b09      	cmp	r3, #9
 8010878:	d94d      	bls.n	8010916 <_vfiprintf_r+0x1a6>
 801087a:	b1b0      	cbz	r0, 80108aa <_vfiprintf_r+0x13a>
 801087c:	9207      	str	r2, [sp, #28]
 801087e:	e014      	b.n	80108aa <_vfiprintf_r+0x13a>
 8010880:	eba0 0308 	sub.w	r3, r0, r8
 8010884:	fa09 f303 	lsl.w	r3, r9, r3
 8010888:	4313      	orrs	r3, r2
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	46a2      	mov	sl, r4
 801088e:	e7d2      	b.n	8010836 <_vfiprintf_r+0xc6>
 8010890:	9b03      	ldr	r3, [sp, #12]
 8010892:	1d19      	adds	r1, r3, #4
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	9103      	str	r1, [sp, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	bfbb      	ittet	lt
 801089c:	425b      	neglt	r3, r3
 801089e:	f042 0202 	orrlt.w	r2, r2, #2
 80108a2:	9307      	strge	r3, [sp, #28]
 80108a4:	9307      	strlt	r3, [sp, #28]
 80108a6:	bfb8      	it	lt
 80108a8:	9204      	strlt	r2, [sp, #16]
 80108aa:	7823      	ldrb	r3, [r4, #0]
 80108ac:	2b2e      	cmp	r3, #46	; 0x2e
 80108ae:	d10c      	bne.n	80108ca <_vfiprintf_r+0x15a>
 80108b0:	7863      	ldrb	r3, [r4, #1]
 80108b2:	2b2a      	cmp	r3, #42	; 0x2a
 80108b4:	d134      	bne.n	8010920 <_vfiprintf_r+0x1b0>
 80108b6:	9b03      	ldr	r3, [sp, #12]
 80108b8:	1d1a      	adds	r2, r3, #4
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	9203      	str	r2, [sp, #12]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	bfb8      	it	lt
 80108c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80108c6:	3402      	adds	r4, #2
 80108c8:	9305      	str	r3, [sp, #20]
 80108ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80109a0 <_vfiprintf_r+0x230>
 80108ce:	7821      	ldrb	r1, [r4, #0]
 80108d0:	2203      	movs	r2, #3
 80108d2:	4650      	mov	r0, sl
 80108d4:	f7ef fc7c 	bl	80001d0 <memchr>
 80108d8:	b138      	cbz	r0, 80108ea <_vfiprintf_r+0x17a>
 80108da:	9b04      	ldr	r3, [sp, #16]
 80108dc:	eba0 000a 	sub.w	r0, r0, sl
 80108e0:	2240      	movs	r2, #64	; 0x40
 80108e2:	4082      	lsls	r2, r0
 80108e4:	4313      	orrs	r3, r2
 80108e6:	3401      	adds	r4, #1
 80108e8:	9304      	str	r3, [sp, #16]
 80108ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ee:	4829      	ldr	r0, [pc, #164]	; (8010994 <_vfiprintf_r+0x224>)
 80108f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108f4:	2206      	movs	r2, #6
 80108f6:	f7ef fc6b 	bl	80001d0 <memchr>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d03f      	beq.n	801097e <_vfiprintf_r+0x20e>
 80108fe:	4b26      	ldr	r3, [pc, #152]	; (8010998 <_vfiprintf_r+0x228>)
 8010900:	bb1b      	cbnz	r3, 801094a <_vfiprintf_r+0x1da>
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	3307      	adds	r3, #7
 8010906:	f023 0307 	bic.w	r3, r3, #7
 801090a:	3308      	adds	r3, #8
 801090c:	9303      	str	r3, [sp, #12]
 801090e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010910:	443b      	add	r3, r7
 8010912:	9309      	str	r3, [sp, #36]	; 0x24
 8010914:	e768      	b.n	80107e8 <_vfiprintf_r+0x78>
 8010916:	fb0c 3202 	mla	r2, ip, r2, r3
 801091a:	460c      	mov	r4, r1
 801091c:	2001      	movs	r0, #1
 801091e:	e7a6      	b.n	801086e <_vfiprintf_r+0xfe>
 8010920:	2300      	movs	r3, #0
 8010922:	3401      	adds	r4, #1
 8010924:	9305      	str	r3, [sp, #20]
 8010926:	4619      	mov	r1, r3
 8010928:	f04f 0c0a 	mov.w	ip, #10
 801092c:	4620      	mov	r0, r4
 801092e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010932:	3a30      	subs	r2, #48	; 0x30
 8010934:	2a09      	cmp	r2, #9
 8010936:	d903      	bls.n	8010940 <_vfiprintf_r+0x1d0>
 8010938:	2b00      	cmp	r3, #0
 801093a:	d0c6      	beq.n	80108ca <_vfiprintf_r+0x15a>
 801093c:	9105      	str	r1, [sp, #20]
 801093e:	e7c4      	b.n	80108ca <_vfiprintf_r+0x15a>
 8010940:	fb0c 2101 	mla	r1, ip, r1, r2
 8010944:	4604      	mov	r4, r0
 8010946:	2301      	movs	r3, #1
 8010948:	e7f0      	b.n	801092c <_vfiprintf_r+0x1bc>
 801094a:	ab03      	add	r3, sp, #12
 801094c:	9300      	str	r3, [sp, #0]
 801094e:	462a      	mov	r2, r5
 8010950:	4b12      	ldr	r3, [pc, #72]	; (801099c <_vfiprintf_r+0x22c>)
 8010952:	a904      	add	r1, sp, #16
 8010954:	4630      	mov	r0, r6
 8010956:	f7fb fef7 	bl	800c748 <_printf_float>
 801095a:	4607      	mov	r7, r0
 801095c:	1c78      	adds	r0, r7, #1
 801095e:	d1d6      	bne.n	801090e <_vfiprintf_r+0x19e>
 8010960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010962:	07d9      	lsls	r1, r3, #31
 8010964:	d405      	bmi.n	8010972 <_vfiprintf_r+0x202>
 8010966:	89ab      	ldrh	r3, [r5, #12]
 8010968:	059a      	lsls	r2, r3, #22
 801096a:	d402      	bmi.n	8010972 <_vfiprintf_r+0x202>
 801096c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801096e:	f7fc ff03 	bl	800d778 <__retarget_lock_release_recursive>
 8010972:	89ab      	ldrh	r3, [r5, #12]
 8010974:	065b      	lsls	r3, r3, #25
 8010976:	f53f af1d 	bmi.w	80107b4 <_vfiprintf_r+0x44>
 801097a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801097c:	e71c      	b.n	80107b8 <_vfiprintf_r+0x48>
 801097e:	ab03      	add	r3, sp, #12
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	462a      	mov	r2, r5
 8010984:	4b05      	ldr	r3, [pc, #20]	; (801099c <_vfiprintf_r+0x22c>)
 8010986:	a904      	add	r1, sp, #16
 8010988:	4630      	mov	r0, r6
 801098a:	f7fc f981 	bl	800cc90 <_printf_i>
 801098e:	e7e4      	b.n	801095a <_vfiprintf_r+0x1ea>
 8010990:	08011410 	.word	0x08011410
 8010994:	0801141a 	.word	0x0801141a
 8010998:	0800c749 	.word	0x0800c749
 801099c:	0801074d 	.word	0x0801074d
 80109a0:	08011416 	.word	0x08011416

080109a4 <__swbuf_r>:
 80109a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a6:	460e      	mov	r6, r1
 80109a8:	4614      	mov	r4, r2
 80109aa:	4605      	mov	r5, r0
 80109ac:	b118      	cbz	r0, 80109b6 <__swbuf_r+0x12>
 80109ae:	6a03      	ldr	r3, [r0, #32]
 80109b0:	b90b      	cbnz	r3, 80109b6 <__swbuf_r+0x12>
 80109b2:	f7fc fd2b 	bl	800d40c <__sinit>
 80109b6:	69a3      	ldr	r3, [r4, #24]
 80109b8:	60a3      	str	r3, [r4, #8]
 80109ba:	89a3      	ldrh	r3, [r4, #12]
 80109bc:	071a      	lsls	r2, r3, #28
 80109be:	d525      	bpl.n	8010a0c <__swbuf_r+0x68>
 80109c0:	6923      	ldr	r3, [r4, #16]
 80109c2:	b31b      	cbz	r3, 8010a0c <__swbuf_r+0x68>
 80109c4:	6823      	ldr	r3, [r4, #0]
 80109c6:	6922      	ldr	r2, [r4, #16]
 80109c8:	1a98      	subs	r0, r3, r2
 80109ca:	6963      	ldr	r3, [r4, #20]
 80109cc:	b2f6      	uxtb	r6, r6
 80109ce:	4283      	cmp	r3, r0
 80109d0:	4637      	mov	r7, r6
 80109d2:	dc04      	bgt.n	80109de <__swbuf_r+0x3a>
 80109d4:	4621      	mov	r1, r4
 80109d6:	4628      	mov	r0, r5
 80109d8:	f7ff fa4a 	bl	800fe70 <_fflush_r>
 80109dc:	b9e0      	cbnz	r0, 8010a18 <__swbuf_r+0x74>
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	60a3      	str	r3, [r4, #8]
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	6022      	str	r2, [r4, #0]
 80109ea:	701e      	strb	r6, [r3, #0]
 80109ec:	6962      	ldr	r2, [r4, #20]
 80109ee:	1c43      	adds	r3, r0, #1
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d004      	beq.n	80109fe <__swbuf_r+0x5a>
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	07db      	lsls	r3, r3, #31
 80109f8:	d506      	bpl.n	8010a08 <__swbuf_r+0x64>
 80109fa:	2e0a      	cmp	r6, #10
 80109fc:	d104      	bne.n	8010a08 <__swbuf_r+0x64>
 80109fe:	4621      	mov	r1, r4
 8010a00:	4628      	mov	r0, r5
 8010a02:	f7ff fa35 	bl	800fe70 <_fflush_r>
 8010a06:	b938      	cbnz	r0, 8010a18 <__swbuf_r+0x74>
 8010a08:	4638      	mov	r0, r7
 8010a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f000 f806 	bl	8010a20 <__swsetup_r>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	d0d5      	beq.n	80109c4 <__swbuf_r+0x20>
 8010a18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010a1c:	e7f4      	b.n	8010a08 <__swbuf_r+0x64>
	...

08010a20 <__swsetup_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4b2a      	ldr	r3, [pc, #168]	; (8010acc <__swsetup_r+0xac>)
 8010a24:	4605      	mov	r5, r0
 8010a26:	6818      	ldr	r0, [r3, #0]
 8010a28:	460c      	mov	r4, r1
 8010a2a:	b118      	cbz	r0, 8010a34 <__swsetup_r+0x14>
 8010a2c:	6a03      	ldr	r3, [r0, #32]
 8010a2e:	b90b      	cbnz	r3, 8010a34 <__swsetup_r+0x14>
 8010a30:	f7fc fcec 	bl	800d40c <__sinit>
 8010a34:	89a3      	ldrh	r3, [r4, #12]
 8010a36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a3a:	0718      	lsls	r0, r3, #28
 8010a3c:	d422      	bmi.n	8010a84 <__swsetup_r+0x64>
 8010a3e:	06d9      	lsls	r1, r3, #27
 8010a40:	d407      	bmi.n	8010a52 <__swsetup_r+0x32>
 8010a42:	2309      	movs	r3, #9
 8010a44:	602b      	str	r3, [r5, #0]
 8010a46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a4a:	81a3      	strh	r3, [r4, #12]
 8010a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a50:	e034      	b.n	8010abc <__swsetup_r+0x9c>
 8010a52:	0758      	lsls	r0, r3, #29
 8010a54:	d512      	bpl.n	8010a7c <__swsetup_r+0x5c>
 8010a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a58:	b141      	cbz	r1, 8010a6c <__swsetup_r+0x4c>
 8010a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a5e:	4299      	cmp	r1, r3
 8010a60:	d002      	beq.n	8010a68 <__swsetup_r+0x48>
 8010a62:	4628      	mov	r0, r5
 8010a64:	f7fd fd1a 	bl	800e49c <_free_r>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	6363      	str	r3, [r4, #52]	; 0x34
 8010a6c:	89a3      	ldrh	r3, [r4, #12]
 8010a6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a72:	81a3      	strh	r3, [r4, #12]
 8010a74:	2300      	movs	r3, #0
 8010a76:	6063      	str	r3, [r4, #4]
 8010a78:	6923      	ldr	r3, [r4, #16]
 8010a7a:	6023      	str	r3, [r4, #0]
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	f043 0308 	orr.w	r3, r3, #8
 8010a82:	81a3      	strh	r3, [r4, #12]
 8010a84:	6923      	ldr	r3, [r4, #16]
 8010a86:	b94b      	cbnz	r3, 8010a9c <__swsetup_r+0x7c>
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a92:	d003      	beq.n	8010a9c <__swsetup_r+0x7c>
 8010a94:	4621      	mov	r1, r4
 8010a96:	4628      	mov	r0, r5
 8010a98:	f000 f884 	bl	8010ba4 <__smakebuf_r>
 8010a9c:	89a0      	ldrh	r0, [r4, #12]
 8010a9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010aa2:	f010 0301 	ands.w	r3, r0, #1
 8010aa6:	d00a      	beq.n	8010abe <__swsetup_r+0x9e>
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	60a3      	str	r3, [r4, #8]
 8010aac:	6963      	ldr	r3, [r4, #20]
 8010aae:	425b      	negs	r3, r3
 8010ab0:	61a3      	str	r3, [r4, #24]
 8010ab2:	6923      	ldr	r3, [r4, #16]
 8010ab4:	b943      	cbnz	r3, 8010ac8 <__swsetup_r+0xa8>
 8010ab6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010aba:	d1c4      	bne.n	8010a46 <__swsetup_r+0x26>
 8010abc:	bd38      	pop	{r3, r4, r5, pc}
 8010abe:	0781      	lsls	r1, r0, #30
 8010ac0:	bf58      	it	pl
 8010ac2:	6963      	ldrpl	r3, [r4, #20]
 8010ac4:	60a3      	str	r3, [r4, #8]
 8010ac6:	e7f4      	b.n	8010ab2 <__swsetup_r+0x92>
 8010ac8:	2000      	movs	r0, #0
 8010aca:	e7f7      	b.n	8010abc <__swsetup_r+0x9c>
 8010acc:	2000006c 	.word	0x2000006c

08010ad0 <_raise_r>:
 8010ad0:	291f      	cmp	r1, #31
 8010ad2:	b538      	push	{r3, r4, r5, lr}
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	d904      	bls.n	8010ae4 <_raise_r+0x14>
 8010ada:	2316      	movs	r3, #22
 8010adc:	6003      	str	r3, [r0, #0]
 8010ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ae2:	bd38      	pop	{r3, r4, r5, pc}
 8010ae4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010ae6:	b112      	cbz	r2, 8010aee <_raise_r+0x1e>
 8010ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aec:	b94b      	cbnz	r3, 8010b02 <_raise_r+0x32>
 8010aee:	4620      	mov	r0, r4
 8010af0:	f000 f830 	bl	8010b54 <_getpid_r>
 8010af4:	462a      	mov	r2, r5
 8010af6:	4601      	mov	r1, r0
 8010af8:	4620      	mov	r0, r4
 8010afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010afe:	f000 b817 	b.w	8010b30 <_kill_r>
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d00a      	beq.n	8010b1c <_raise_r+0x4c>
 8010b06:	1c59      	adds	r1, r3, #1
 8010b08:	d103      	bne.n	8010b12 <_raise_r+0x42>
 8010b0a:	2316      	movs	r3, #22
 8010b0c:	6003      	str	r3, [r0, #0]
 8010b0e:	2001      	movs	r0, #1
 8010b10:	e7e7      	b.n	8010ae2 <_raise_r+0x12>
 8010b12:	2400      	movs	r4, #0
 8010b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b18:	4628      	mov	r0, r5
 8010b1a:	4798      	blx	r3
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	e7e0      	b.n	8010ae2 <_raise_r+0x12>

08010b20 <raise>:
 8010b20:	4b02      	ldr	r3, [pc, #8]	; (8010b2c <raise+0xc>)
 8010b22:	4601      	mov	r1, r0
 8010b24:	6818      	ldr	r0, [r3, #0]
 8010b26:	f7ff bfd3 	b.w	8010ad0 <_raise_r>
 8010b2a:	bf00      	nop
 8010b2c:	2000006c 	.word	0x2000006c

08010b30 <_kill_r>:
 8010b30:	b538      	push	{r3, r4, r5, lr}
 8010b32:	4d07      	ldr	r5, [pc, #28]	; (8010b50 <_kill_r+0x20>)
 8010b34:	2300      	movs	r3, #0
 8010b36:	4604      	mov	r4, r0
 8010b38:	4608      	mov	r0, r1
 8010b3a:	4611      	mov	r1, r2
 8010b3c:	602b      	str	r3, [r5, #0]
 8010b3e:	f7f2 f869 	bl	8002c14 <_kill>
 8010b42:	1c43      	adds	r3, r0, #1
 8010b44:	d102      	bne.n	8010b4c <_kill_r+0x1c>
 8010b46:	682b      	ldr	r3, [r5, #0]
 8010b48:	b103      	cbz	r3, 8010b4c <_kill_r+0x1c>
 8010b4a:	6023      	str	r3, [r4, #0]
 8010b4c:	bd38      	pop	{r3, r4, r5, pc}
 8010b4e:	bf00      	nop
 8010b50:	200021b8 	.word	0x200021b8

08010b54 <_getpid_r>:
 8010b54:	f7f2 b856 	b.w	8002c04 <_getpid>

08010b58 <__swhatbuf_r>:
 8010b58:	b570      	push	{r4, r5, r6, lr}
 8010b5a:	460c      	mov	r4, r1
 8010b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b60:	2900      	cmp	r1, #0
 8010b62:	b096      	sub	sp, #88	; 0x58
 8010b64:	4615      	mov	r5, r2
 8010b66:	461e      	mov	r6, r3
 8010b68:	da0d      	bge.n	8010b86 <__swhatbuf_r+0x2e>
 8010b6a:	89a3      	ldrh	r3, [r4, #12]
 8010b6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010b70:	f04f 0100 	mov.w	r1, #0
 8010b74:	bf0c      	ite	eq
 8010b76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010b7a:	2340      	movne	r3, #64	; 0x40
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	6031      	str	r1, [r6, #0]
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	b016      	add	sp, #88	; 0x58
 8010b84:	bd70      	pop	{r4, r5, r6, pc}
 8010b86:	466a      	mov	r2, sp
 8010b88:	f000 f848 	bl	8010c1c <_fstat_r>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	dbec      	blt.n	8010b6a <__swhatbuf_r+0x12>
 8010b90:	9901      	ldr	r1, [sp, #4]
 8010b92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010b96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010b9a:	4259      	negs	r1, r3
 8010b9c:	4159      	adcs	r1, r3
 8010b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ba2:	e7eb      	b.n	8010b7c <__swhatbuf_r+0x24>

08010ba4 <__smakebuf_r>:
 8010ba4:	898b      	ldrh	r3, [r1, #12]
 8010ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ba8:	079d      	lsls	r5, r3, #30
 8010baa:	4606      	mov	r6, r0
 8010bac:	460c      	mov	r4, r1
 8010bae:	d507      	bpl.n	8010bc0 <__smakebuf_r+0x1c>
 8010bb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010bb4:	6023      	str	r3, [r4, #0]
 8010bb6:	6123      	str	r3, [r4, #16]
 8010bb8:	2301      	movs	r3, #1
 8010bba:	6163      	str	r3, [r4, #20]
 8010bbc:	b002      	add	sp, #8
 8010bbe:	bd70      	pop	{r4, r5, r6, pc}
 8010bc0:	ab01      	add	r3, sp, #4
 8010bc2:	466a      	mov	r2, sp
 8010bc4:	f7ff ffc8 	bl	8010b58 <__swhatbuf_r>
 8010bc8:	9900      	ldr	r1, [sp, #0]
 8010bca:	4605      	mov	r5, r0
 8010bcc:	4630      	mov	r0, r6
 8010bce:	f7fb fc01 	bl	800c3d4 <_malloc_r>
 8010bd2:	b948      	cbnz	r0, 8010be8 <__smakebuf_r+0x44>
 8010bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bd8:	059a      	lsls	r2, r3, #22
 8010bda:	d4ef      	bmi.n	8010bbc <__smakebuf_r+0x18>
 8010bdc:	f023 0303 	bic.w	r3, r3, #3
 8010be0:	f043 0302 	orr.w	r3, r3, #2
 8010be4:	81a3      	strh	r3, [r4, #12]
 8010be6:	e7e3      	b.n	8010bb0 <__smakebuf_r+0xc>
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	6020      	str	r0, [r4, #0]
 8010bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bf0:	81a3      	strh	r3, [r4, #12]
 8010bf2:	9b00      	ldr	r3, [sp, #0]
 8010bf4:	6163      	str	r3, [r4, #20]
 8010bf6:	9b01      	ldr	r3, [sp, #4]
 8010bf8:	6120      	str	r0, [r4, #16]
 8010bfa:	b15b      	cbz	r3, 8010c14 <__smakebuf_r+0x70>
 8010bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c00:	4630      	mov	r0, r6
 8010c02:	f000 f81d 	bl	8010c40 <_isatty_r>
 8010c06:	b128      	cbz	r0, 8010c14 <__smakebuf_r+0x70>
 8010c08:	89a3      	ldrh	r3, [r4, #12]
 8010c0a:	f023 0303 	bic.w	r3, r3, #3
 8010c0e:	f043 0301 	orr.w	r3, r3, #1
 8010c12:	81a3      	strh	r3, [r4, #12]
 8010c14:	89a3      	ldrh	r3, [r4, #12]
 8010c16:	431d      	orrs	r5, r3
 8010c18:	81a5      	strh	r5, [r4, #12]
 8010c1a:	e7cf      	b.n	8010bbc <__smakebuf_r+0x18>

08010c1c <_fstat_r>:
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	4d07      	ldr	r5, [pc, #28]	; (8010c3c <_fstat_r+0x20>)
 8010c20:	2300      	movs	r3, #0
 8010c22:	4604      	mov	r4, r0
 8010c24:	4608      	mov	r0, r1
 8010c26:	4611      	mov	r1, r2
 8010c28:	602b      	str	r3, [r5, #0]
 8010c2a:	f7f2 f852 	bl	8002cd2 <_fstat>
 8010c2e:	1c43      	adds	r3, r0, #1
 8010c30:	d102      	bne.n	8010c38 <_fstat_r+0x1c>
 8010c32:	682b      	ldr	r3, [r5, #0]
 8010c34:	b103      	cbz	r3, 8010c38 <_fstat_r+0x1c>
 8010c36:	6023      	str	r3, [r4, #0]
 8010c38:	bd38      	pop	{r3, r4, r5, pc}
 8010c3a:	bf00      	nop
 8010c3c:	200021b8 	.word	0x200021b8

08010c40 <_isatty_r>:
 8010c40:	b538      	push	{r3, r4, r5, lr}
 8010c42:	4d06      	ldr	r5, [pc, #24]	; (8010c5c <_isatty_r+0x1c>)
 8010c44:	2300      	movs	r3, #0
 8010c46:	4604      	mov	r4, r0
 8010c48:	4608      	mov	r0, r1
 8010c4a:	602b      	str	r3, [r5, #0]
 8010c4c:	f7f2 f851 	bl	8002cf2 <_isatty>
 8010c50:	1c43      	adds	r3, r0, #1
 8010c52:	d102      	bne.n	8010c5a <_isatty_r+0x1a>
 8010c54:	682b      	ldr	r3, [r5, #0]
 8010c56:	b103      	cbz	r3, 8010c5a <_isatty_r+0x1a>
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	200021b8 	.word	0x200021b8

08010c60 <sqrtf>:
 8010c60:	b508      	push	{r3, lr}
 8010c62:	ed2d 8b02 	vpush	{d8}
 8010c66:	eeb0 8a40 	vmov.f32	s16, s0
 8010c6a:	f000 f817 	bl	8010c9c <__ieee754_sqrtf>
 8010c6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	d60c      	bvs.n	8010c92 <sqrtf+0x32>
 8010c78:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010c98 <sqrtf+0x38>
 8010c7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c84:	d505      	bpl.n	8010c92 <sqrtf+0x32>
 8010c86:	f7fc fd4b 	bl	800d720 <__errno>
 8010c8a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010c8e:	2321      	movs	r3, #33	; 0x21
 8010c90:	6003      	str	r3, [r0, #0]
 8010c92:	ecbd 8b02 	vpop	{d8}
 8010c96:	bd08      	pop	{r3, pc}
 8010c98:	00000000 	.word	0x00000000

08010c9c <__ieee754_sqrtf>:
 8010c9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ca0:	4770      	bx	lr
	...

08010ca4 <_init>:
 8010ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca6:	bf00      	nop
 8010ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010caa:	bc08      	pop	{r3}
 8010cac:	469e      	mov	lr, r3
 8010cae:	4770      	bx	lr

08010cb0 <_fini>:
 8010cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb2:	bf00      	nop
 8010cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb6:	bc08      	pop	{r3}
 8010cb8:	469e      	mov	lr, r3
 8010cba:	4770      	bx	lr
