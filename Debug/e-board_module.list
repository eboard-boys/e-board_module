
e-board_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08010178  08010178  00020178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108a0  080108a0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080108a0  080108a0  000208a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108a8  080108a8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108a8  080108a8  000208a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108ac  080108ac  000208ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080108b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  200001dc  08010a8c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000208c  08010a8c  0003208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026467  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d20  00000000  00000000  000566b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002010  00000000  00000000  0005b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018fb  00000000  00000000  0005d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af24  00000000  00000000  0005ece3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240bd  00000000  00000000  00089c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116509  00000000  00000000  000adcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009e98  00000000  00000000  001c41d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001ce068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801015c 	.word	0x0801015c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0801015c 	.word	0x0801015c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <init_mpu>:
vector_t gravitational_acceleration[3] = {0, 0, 0};

float unit_conversion = NO_CONVERSION;


HAL_StatusTypeDef init_mpu(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	hi2c_mpu = i2c_handler;
 8000ffa:	4a41      	ldr	r2, [pc, #260]	; (8001100 <init_mpu+0x110>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
	uart_debug_handler = debug_handler;
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <init_mpu+0x114>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
    // Write power management configuration
	uint8_t data = MPU_PWR_MGMT_1_DEFAULT_CONFIG;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <init_mpu+0x110>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	f002 ffcd 	bl	8003fc0 <HAL_I2C_Mem_Write>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <init_mpu+0x52>
		DEBUG_PRINT("Failed to initialize power management configuration\r\n");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <init_mpu+0x114>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	2235      	movs	r2, #53	; 0x35
 8001038:	4933      	ldr	r1, [pc, #204]	; (8001108 <init_mpu+0x118>)
 800103a:	f006 faed 	bl	8007618 <HAL_UART_Transmit>
		return ret;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e05a      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write filter configuration
	data = MPU_FILTER_DELAY_5_MS;
 8001042:	2303      	movs	r3, #3
 8001044:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_FILTER_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <init_mpu+0x110>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221a      	movs	r2, #26
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f002 ffaf 	bl	8003fc0 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <init_mpu+0x8e>
		DEBUG_PRINT("Failed to initialize DLPF configuration\r\n");
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <init_mpu+0x114>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	2229      	movs	r2, #41	; 0x29
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <init_mpu+0x11c>)
 8001076:	f006 facf 	bl	8007618 <HAL_UART_Transmit>
		return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	e03c      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write gyroscope configuration
	data = MPU_GYRO_RANGE_500_DPS;
 800107e:	2308      	movs	r3, #8
 8001080:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_mpu+0x110>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	221b      	movs	r2, #27
 8001098:	21d0      	movs	r1, #208	; 0xd0
 800109a:	f002 ff91 	bl	8003fc0 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <init_mpu+0xca>
		DEBUG_PRINT("Failed to initialize gyroscope configuration\r\n");
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <init_mpu+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	222e      	movs	r2, #46	; 0x2e
 80010b0:	4917      	ldr	r1, [pc, #92]	; (8001110 <init_mpu+0x120>)
 80010b2:	f006 fab1 	bl	8007618 <HAL_UART_Transmit>
		return ret;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	e01e      	b.n	80010f8 <init_mpu+0x108>
	}
    // Write accelerometer configuration
	data = MPU_ACCEL_RANGE_8G;
 80010ba:	2310      	movs	r3, #16
 80010bc:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Write(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_DELAY);
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <init_mpu+0x110>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	221c      	movs	r2, #28
 80010d4:	21d0      	movs	r1, #208	; 0xd0
 80010d6:	f002 ff73 	bl	8003fc0 <HAL_I2C_Mem_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <init_mpu+0x106>
		DEBUG_PRINT("Failed to initialize accelerometer configuration\r\n");
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <init_mpu+0x114>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <init_mpu+0x124>)
 80010ee:	f006 fa93 	bl	8007618 <HAL_UART_Transmit>
		return ret;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	e000      	b.n	80010f8 <init_mpu+0x108>
	}
    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f8 	.word	0x200001f8
 8001104:	200001fc 	.word	0x200001fc
 8001108:	08010178 	.word	0x08010178
 800110c:	080101b0 	.word	0x080101b0
 8001110:	080101dc 	.word	0x080101dc
 8001114:	0801020c 	.word	0x0801020c

08001118 <calibrate_mpu>:

HAL_StatusTypeDef calibrate_mpu() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	vector_t target_vector[3] = {1, 0, 0};
 800111e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
	vector_t measured_accel[3];
	vector_t preliminary_bias[3];
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001134:	e038      	b.n	80011a8 <calibrate_mpu+0x90>
		ret = get_accel(measured_accel);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f88e 	bl	800125c <get_accel>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret) {
 8001146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <calibrate_mpu+0x4a>
			DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <calibrate_mpu+0x120>)
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2223      	movs	r2, #35	; 0x23
 8001156:	4939      	ldr	r1, [pc, #228]	; (800123c <calibrate_mpu+0x124>)
 8001158:	f006 fa5e 	bl	8007618 <HAL_UART_Transmit>
			return ret;
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	e066      	b.n	8001230 <calibrate_mpu+0x118>
		}
		for (int j = 0; j < 3; j++) {
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
 8001166:	e019      	b.n	800119c <calibrate_mpu+0x84>
			preliminary_bias[j] += measured_accel[j];
 8001168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	3330      	adds	r3, #48	; 0x30
 800116e:	443b      	add	r3, r7
 8001170:	3b30      	subs	r3, #48	; 0x30
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	3330      	adds	r3, #48	; 0x30
 800117c:	443b      	add	r3, r7
 800117e:	3b24      	subs	r3, #36	; 0x24
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	3330      	adds	r3, #48	; 0x30
 800118e:	443b      	add	r3, r7
 8001190:	3b30      	subs	r3, #48	; 0x30
 8001192:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++) {
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	3301      	adds	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	2b02      	cmp	r3, #2
 80011a0:	dde2      	ble.n	8001168 <calibrate_mpu+0x50>
	for (int i = 0; i < CALIBRATION_ITERATIONS; i++) {
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	3301      	adds	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	f240 52db 	movw	r2, #1499	; 0x5db
 80011ae:	4293      	cmp	r3, r2
 80011b0:	ddc1      	ble.n	8001136 <calibrate_mpu+0x1e>
		}
	}
	accel_bias_x = target_vector[0] - (preliminary_bias[0] / CALIBRATION_ITERATIONS);
 80011b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b6:	edd7 6a00 	vldr	s13, [r7]
 80011ba:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001240 <calibrate_mpu+0x128>
 80011be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <calibrate_mpu+0x12c>)
 80011c8:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_y = target_vector[1] - (preliminary_bias[1] / CALIBRATION_ITERATIONS);
 80011cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80011d0:	edd7 6a01 	vldr	s13, [r7, #4]
 80011d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8001240 <calibrate_mpu+0x128>
 80011d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <calibrate_mpu+0x130>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	accel_bias_z = target_vector[2] - (preliminary_bias[2] / CALIBRATION_ITERATIONS);
 80011e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80011ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80011ee:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001240 <calibrate_mpu+0x128>
 80011f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <calibrate_mpu+0x134>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	ret = get_accel(gravitational_acceleration);
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <calibrate_mpu+0x138>)
 8001202:	f000 f82b 	bl	800125c <get_accel>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret) {
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <calibrate_mpu+0x110>
		DEBUG_PRINT("Failed to calibrate accelerometer\r\n");
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <calibrate_mpu+0x120>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	2223      	movs	r2, #35	; 0x23
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <calibrate_mpu+0x124>)
 800121e:	f006 f9fb 	bl	8007618 <HAL_UART_Transmit>
		return ret;
 8001222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001226:	e003      	b.n	8001230 <calibrate_mpu+0x118>
	}
	unit_conversion = GS_TO_MPSPS;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <calibrate_mpu+0x13c>)
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <calibrate_mpu+0x140>)
 800122c:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3730      	adds	r7, #48	; 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001fc 	.word	0x200001fc
 800123c:	08010240 	.word	0x08010240
 8001240:	44bb8000 	.word	0x44bb8000
 8001244:	20000200 	.word	0x20000200
 8001248:	20000204 	.word	0x20000204
 800124c:	20000208 	.word	0x20000208
 8001250:	2000020c 	.word	0x2000020c
 8001254:	20000000 	.word	0x20000000
 8001258:	411cf5c3 	.word	0x411cf5c3

0800125c <get_accel>:

HAL_StatusTypeDef get_accel(vector_t accel[3]) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af04      	add	r7, sp, #16
 8001262:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t accel_buf[6];
	ret = HAL_I2C_Mem_Read(hi2c_mpu, MPU_ADDRESS, MPU_REG_ACEL_DATA, I2C_MEMADD_SIZE_8BIT, accel_buf, 6, I2C_DELAY);
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <get_accel+0x194>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2306      	movs	r3, #6
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	223b      	movs	r2, #59	; 0x3b
 800127a:	21d0      	movs	r1, #208	; 0xd0
 800127c:	f002 ffb4 	bl	80041e8 <HAL_I2C_Mem_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <get_accel+0x40>
		DEBUG_PRINT("Failed to fetch accelerometer value\r\n");
 800128a:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <get_accel+0x198>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	2225      	movs	r2, #37	; 0x25
 8001292:	4959      	ldr	r1, [pc, #356]	; (80013f8 <get_accel+0x19c>)
 8001294:	f006 f9c0 	bl	8007618 <HAL_UART_Transmit>
		return ret;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	e0a5      	b.n	80013e8 <get_accel+0x18c>
	}
	int16_t accel_raw_x = (accel_buf[0] << 8) | accel_buf[1];
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	82bb      	strh	r3, [r7, #20]
	int16_t accel_raw_y = (accel_buf[2] << 8) | accel_buf[3];
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	827b      	strh	r3, [r7, #18]
	int16_t accel_raw_z = (accel_buf[4] << 8) | accel_buf[5];
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	823b      	strh	r3, [r7, #16]

	accel[0] = (vector_t)accel_raw_x / MPU_ACCEL_RANGE_8G_LSB + accel_bias_x - gravitational_acceleration[0];
 80012c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80013fc <get_accel+0x1a0>
 80012d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <get_accel+0x1a4>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <get_accel+0x1a8>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)accel_raw_y / MPU_ACCEL_RANGE_8G_LSB + accel_bias_y - gravitational_acceleration[1];
 80012f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80013fc <get_accel+0x1a0>
 8001304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <get_accel+0x1ac>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001312:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <get_accel+0x1a8>)
 8001314:	edd3 7a01 	vldr	s15, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)accel_raw_z / MPU_ACCEL_RANGE_8G_LSB + accel_bias_z - gravitational_acceleration[2];
 8001324:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	eddf 6a32 	vldr	s13, [pc, #200]	; 80013fc <get_accel+0x1a0>
 8001334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <get_accel+0x1b0>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001342:	4b30      	ldr	r3, [pc, #192]	; (8001404 <get_accel+0x1a8>)
 8001344:	edd3 7a02 	vldr	s15, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3308      	adds	r3, #8
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	edc3 7a00 	vstr	s15, [r3]

	accel[0] = (vector_t)(int)(accel[0] * 10) / 10 * unit_conversion;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800136e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <get_accel+0x1b4>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = (vector_t)(int)(accel[1] * 10) / 10 * unit_conversion;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800139e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <get_accel+0x1b4>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b0:	edc3 7a00 	vstr	s15, [r3]
	accel[2] = (vector_t)(int)(accel[2] * 10) / 10 * unit_conversion;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3308      	adds	r3, #8
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80013d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <get_accel+0x1b4>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3308      	adds	r3, #8
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	edc3 7a00 	vstr	s15, [r3]
	return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	200001fc 	.word	0x200001fc
 80013f8:	08010264 	.word	0x08010264
 80013fc:	45800000 	.word	0x45800000
 8001400:	20000200 	.word	0x20000200
 8001404:	2000020c 	.word	0x2000020c
 8001408:	20000204 	.word	0x20000204
 800140c:	20000208 	.word	0x20000208
 8001410:	20000000 	.word	0x20000000

08001414 <init_spatial>:

// Internal globals
vector_t accleration_sample_array[ACCEL_SAMPLES][3];
uint8_t accel_sample_index = 0;

HAL_StatusTypeDef init_spatial(I2C_HandleTypeDef* i2c_handler, UART_HandleTypeDef* debug_handler) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;
	ret = init_mpu(i2c_handler, debug_handler);
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fde5 	bl	8000ff0 <init_mpu>
 8001426:	4603      	mov	r3, r0
 8001428:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <init_spatial+0x20>
//		DEBUG_PRINT("Failed hardware initialization");
		return ret;
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	e01c      	b.n	800146e <init_spatial+0x5a>
	}
	ret = calibrate_mpu();
 8001434:	f7ff fe70 	bl	8001118 <calibrate_mpu>
 8001438:	4603      	mov	r3, r0
 800143a:	72fb      	strb	r3, [r7, #11]
	if (ret) {
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <init_spatial+0x32>
		return ret;
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	e013      	b.n	800146e <init_spatial+0x5a>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e00c      	b.n	8001466 <init_spatial+0x52>
		get_accel(accleration_sample_array[i]);
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <init_spatial+0x64>)
 8001458:	4413      	add	r3, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fefe 	bl	800125c <get_accel>
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b09      	cmp	r3, #9
 800146a:	ddef      	ble.n	800144c <init_spatial+0x38>
	}
	return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000244 	.word	0x20000244

0800147c <update_acceleration_averages>:
	current_position[2] = 0;

	current_distance = 0;
}

HAL_StatusTypeDef update_acceleration_averages() {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e026      	b.n	80014d6 <update_acceleration_averages+0x5a>
		HAL_StatusTypeDef ret;
		ret = get_accel(accleration_sample_array[accel_sample_index]);
 8001488:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <update_acceleration_averages+0x124>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <update_acceleration_averages+0x128>)
 8001498:	4413      	add	r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fede 	bl	800125c <get_accel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
		if (ret)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <update_acceleration_averages+0x32>
			return ret;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	e073      	b.n	8001596 <update_acceleration_averages+0x11a>
		accel_sample_index = (accel_sample_index + 1) % ACCEL_SAMPLES;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <update_acceleration_averages+0x124>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <update_acceleration_averages+0x12c>)
 80014b6:	fb83 1302 	smull	r1, r3, r3, r2
 80014ba:	1099      	asrs	r1, r3, #2
 80014bc:	17d3      	asrs	r3, r2, #31
 80014be:	1ac9      	subs	r1, r1, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1ad1      	subs	r1, r2, r3
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <update_acceleration_averages+0x124>)
 80014ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	ddd5      	ble.n	8001488 <update_acceleration_averages+0xc>
	}
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e037      	b.n	8001552 <update_acceleration_averages+0xd6>
		current_acceleration[0] += accleration_sample_array[i][0];
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <update_acceleration_averages+0x130>)
 80014e4:	ed93 7a00 	vldr	s14, [r3]
 80014e8:	492e      	ldr	r1, [pc, #184]	; (80015a4 <update_acceleration_averages+0x128>)
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <update_acceleration_averages+0x130>)
 8001500:	edc3 7a00 	vstr	s15, [r3]
		current_acceleration[1] += accleration_sample_array[i][1];
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <update_acceleration_averages+0x130>)
 8001506:	ed93 7a01 	vldr	s14, [r3, #4]
 800150a:	4926      	ldr	r1, [pc, #152]	; (80015a4 <update_acceleration_averages+0x128>)
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3304      	adds	r3, #4
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <update_acceleration_averages+0x130>)
 8001524:	edc3 7a01 	vstr	s15, [r3, #4]
		current_acceleration[2] += accleration_sample_array[i][2];
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <update_acceleration_averages+0x130>)
 800152a:	ed93 7a02 	vldr	s14, [r3, #8]
 800152e:	491d      	ldr	r1, [pc, #116]	; (80015a4 <update_acceleration_averages+0x128>)
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3308      	adds	r3, #8
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <update_acceleration_averages+0x130>)
 8001548:	edc3 7a02 	vstr	s15, [r3, #8]
	for (int i = 0; i < ACCEL_SAMPLES; i++) {
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3301      	adds	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddc4      	ble.n	80014e2 <update_acceleration_averages+0x66>
	}
	current_acceleration[0] /= ACCEL_SAMPLES;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <update_acceleration_averages+0x130>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <update_acceleration_averages+0x130>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
	current_acceleration[1] /= ACCEL_SAMPLES;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <update_acceleration_averages+0x130>)
 800156e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001572:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <update_acceleration_averages+0x130>)
 800157c:	edc3 7a01 	vstr	s15, [r3, #4]
	current_acceleration[2] /= ACCEL_SAMPLES;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <update_acceleration_averages+0x130>)
 8001582:	ed93 7a02 	vldr	s14, [r3, #8]
 8001586:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <update_acceleration_averages+0x130>)
 8001590:	edc3 7a02 	vstr	s15, [r3, #8]
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002bc 	.word	0x200002bc
 80015a4:	20000244 	.word	0x20000244
 80015a8:	66666667 	.word	0x66666667
 80015ac:	20000218 	.word	0x20000218

080015b0 <update_spatial>:

HAL_StatusTypeDef update_spatial(float delta_t) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef ret;
	vector_euler_step(current_acceleration, current_velocity, delta_t);
 80015ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80015be:	4915      	ldr	r1, [pc, #84]	; (8001614 <update_spatial+0x64>)
 80015c0:	4815      	ldr	r0, [pc, #84]	; (8001618 <update_spatial+0x68>)
 80015c2:	f000 f860 	bl	8001686 <vector_euler_step>
	vector_euler_step(current_velocity, current_position, delta_t);
 80015c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <update_spatial+0x6c>)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <update_spatial+0x64>)
 80015ce:	f000 f85a 	bl	8001686 <vector_euler_step>
	current_speed = magnitude(current_velocity);
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <update_spatial+0x64>)
 80015d4:	f000 f828 	bl	8001628 <magnitude>
 80015d8:	eef0 7a40 	vmov.f32	s15, s0
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <update_spatial+0x70>)
 80015de:	edc3 7a00 	vstr	s15, [r3]
	euler_step(current_speed, &current_distance, delta_t);
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <update_spatial+0x70>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	edd7 0a01 	vldr	s1, [r7, #4]
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <update_spatial+0x74>)
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f000 f888 	bl	8001706 <euler_step>
	ret = update_acceleration_averages();
 80015f6:	f7ff ff41 	bl	800147c <update_acceleration_averages>
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <update_spatial+0x58>
//		DEBUG_PRINT("Failed to update acceleration");
		return ret;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	e000      	b.n	800160a <update_spatial+0x5a>
	}
	return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000224 	.word	0x20000224
 8001618:	20000218 	.word	0x20000218
 800161c:	20000234 	.word	0x20000234
 8001620:	20000230 	.word	0x20000230
 8001624:	20000240 	.word	0x20000240

08001628 <magnitude>:
#include "vectors.h"
#include <math.h>
#include <stdlib.h>

// Get the magnitude of a given vector
magnitude_t magnitude(vector_t* vec) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    return root_func((vec[x] * vec[x]) + (vec[y] * vec[y]) + (vec[z] * vec[z]));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	edd3 6a00 	vldr	s13, [r3]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3308      	adds	r3, #8
 800165c:	edd3 6a00 	vldr	s13, [r3]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3308      	adds	r3, #8
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f00e fd50 	bl	8010118 <sqrtf>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
}
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <vector_euler_step>:

// Eulers method for integration in respect to time in 3 dimensions.
// Example: pass acceleration vector to source and velocity to target to integrate acceleration
void vector_euler_step(vector_t* source_vec, vector_t* target_vec, float delta_t) {
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	ed87 0a01 	vstr	s0, [r7, #4]
    target_vec[x] += source_vec[x] * delta_t;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	edc3 7a00 	vstr	s15, [r3]
    target_vec[y] += source_vec[y] * delta_t;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3304      	adds	r3, #4
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	edd3 6a00 	vldr	s13, [r3]
 80016c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3304      	adds	r3, #4
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	edc3 7a00 	vstr	s15, [r3]
    target_vec[z] += source_vec[z] * delta_t;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3308      	adds	r3, #8
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3308      	adds	r3, #8
 80016e2:	edd3 6a00 	vldr	s13, [r3]
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3308      	adds	r3, #8
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	edc3 7a00 	vstr	s15, [r3]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <euler_step>:

// Eulers method for integration in respect to time for scalars.
// This is used for calculating arc length.
void euler_step(magnitude_t source, magnitude_t* destination, float delta_t) {
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001710:	60b8      	str	r0, [r7, #8]
 8001712:	edc7 0a01 	vstr	s1, [r7, #4]
    *destination += source * delta_t;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	edc3 7a00 	vstr	s15, [r3]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001744:	f001 f874 	bl	8002830 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001748:	f000 f854 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174c:	f000 fa82 	bl	8001c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001750:	f000 fa50 	bl	8001bf4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001754:	f000 f9a6 	bl	8001aa4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001758:	f000 f89e 	bl	8001898 <MX_ADC1_Init>
  MX_I2C1_Init();
 800175c:	f000 f912 	bl	8001984 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001760:	f000 f950 	bl	8001a04 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001764:	f000 fa16 	bl	8001b94 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001768:	210c      	movs	r1, #12
 800176a:	4815      	ldr	r0, [pc, #84]	; (80017c0 <main+0x80>)
 800176c:	f004 fe22 	bl	80063b4 <HAL_TIM_PWM_Start>
  Lora_Init();
 8001770:	f000 fad6 	bl	8001d20 <Lora_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001774:	f007 fb18 	bl	8008da8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <main+0x84>)
 800177a:	2100      	movs	r1, #0
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <main+0x88>)
 800177e:	f007 fb5d 	bl	8008e3c <osThreadNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a11      	ldr	r2, [pc, #68]	; (80017cc <main+0x8c>)
 8001786:	6013      	str	r3, [r2, #0]

  /* creation of readThrottle */
  readThrottleHandle = osThreadNew(ReadThrottle, NULL, &readThrottle_attributes);
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <main+0x90>)
 800178a:	2100      	movs	r1, #0
 800178c:	4811      	ldr	r0, [pc, #68]	; (80017d4 <main+0x94>)
 800178e:	f007 fb55 	bl	8008e3c <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <main+0x98>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of sendSpeed */
  sendSpeedHandle = osThreadNew(SendSpeed, NULL, &sendSpeed_attributes);
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <main+0x9c>)
 800179a:	2100      	movs	r1, #0
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <main+0xa0>)
 800179e:	f007 fb4d 	bl	8008e3c <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <main+0xa4>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* creation of accelUpdateTask */
  accelUpdateTaskHandle = osThreadNew(startAccelUpdateTask, NULL, &accelUpdateTask_attributes);
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <main+0xa8>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	480f      	ldr	r0, [pc, #60]	; (80017ec <main+0xac>)
 80017ae:	f007 fb45 	bl	8008e3c <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <main+0xb0>)
 80017b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017b8:	f007 fb1a 	bl	8008df0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <main+0x7c>
 80017be:	bf00      	nop
 80017c0:	200003c4 	.word	0x200003c4
 80017c4:	0801039c 	.word	0x0801039c
 80017c8:	08001f99 	.word	0x08001f99
 80017cc:	20000520 	.word	0x20000520
 80017d0:	080103c0 	.word	0x080103c0
 80017d4:	08001fa9 	.word	0x08001fa9
 80017d8:	20000524 	.word	0x20000524
 80017dc:	080103e4 	.word	0x080103e4
 80017e0:	08002039 	.word	0x08002039
 80017e4:	20000528 	.word	0x20000528
 80017e8:	08010408 	.word	0x08010408
 80017ec:	08002079 	.word	0x08002079
 80017f0:	2000052c 	.word	0x2000052c

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b096      	sub	sp, #88	; 0x58
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2244      	movs	r2, #68	; 0x44
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00b f899 	bl	800c93a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001816:	f44f 7000 	mov.w	r0, #512	; 0x200
 800181a:	f003 f95d 	bl	8004ad8 <HAL_PWREx_ControlVoltageScaling>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001824:	f000 fc54 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001830:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001832:	2310      	movs	r3, #16
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183a:	2302      	movs	r3, #2
 800183c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001842:	230a      	movs	r3, #10
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001846:	2307      	movs	r3, #7
 8001848:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f994 	bl	8004b84 <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001862:	f000 fc35 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2303      	movs	r3, #3
 800186c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800187a:	463b      	mov	r3, r7
 800187c:	2104      	movs	r1, #4
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fd5c 	bl	800533c <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800188a:	f000 fc21 	bl	80020d0 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3758      	adds	r7, #88	; 0x58
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018bc:	4a2f      	ldr	r2, [pc, #188]	; (800197c <MX_ADC1_Init+0xe4>)
 80018be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018da:	2204      	movs	r2, #4
 80018dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_ADC1_Init+0xe0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <MX_ADC1_Init+0xe0>)
 8001900:	2200      	movs	r2, #0
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_ADC1_Init+0xe0>)
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_ADC1_Init+0xe0>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_ADC1_Init+0xe0>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800191a:	4817      	ldr	r0, [pc, #92]	; (8001978 <MX_ADC1_Init+0xe0>)
 800191c:	f001 f978 	bl	8002c10 <HAL_ADC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001926:	f000 fbd3 	bl	80020d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4810      	ldr	r0, [pc, #64]	; (8001978 <MX_ADC1_Init+0xe0>)
 8001936:	f001 fed3 	bl	80036e0 <HAL_ADCEx_MultiModeConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001940:	f000 fbc6 	bl	80020d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_ADC1_Init+0xe8>)
 8001946:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001948:	2306      	movs	r3, #6
 800194a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001950:	237f      	movs	r3, #127	; 0x7f
 8001952:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001954:	2304      	movs	r3, #4
 8001956:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_ADC1_Init+0xe0>)
 8001962:	f001 faa5 	bl	8002eb0 <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800196c:	f000 fbb0 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200002c0 	.word	0x200002c0
 800197c:	50040000 	.word	0x50040000
 8001980:	04300002 	.word	0x04300002

08001984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_I2C1_Init+0x74>)
 800198a:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <MX_I2C1_Init+0x78>)
 800198c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_I2C1_Init+0x74>)
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <MX_I2C1_Init+0x7c>)
 8001992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_I2C1_Init+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_I2C1_Init+0x74>)
 800199c:	2201      	movs	r2, #1
 800199e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019be:	480e      	ldr	r0, [pc, #56]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019c0:	f002 fa62 	bl	8003e88 <HAL_I2C_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ca:	f000 fb81 	bl	80020d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019d2:	f002 ffdb 	bl	800498c <HAL_I2CEx_ConfigAnalogFilter>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019dc:	f000 fb78 	bl	80020d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_I2C1_Init+0x74>)
 80019e4:	f003 f81d 	bl	8004a22 <HAL_I2CEx_ConfigDigitalFilter>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019ee:	f000 fb6f 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000324 	.word	0x20000324
 80019fc:	40005400 	.word	0x40005400
 8001a00:	10909cec 	.word	0x10909cec

08001a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a4e:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a50:	f004 fb86 	bl	8006160 <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a5a:	f000 fb39 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a6c:	f004 ffbe 	bl	80069ec <HAL_TIM_ConfigClockSource>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001a76:	f000 fb2b 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM2_Init+0x9c>)
 8001a88:	f005 fcd2 	bl	8007430 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a92:	f000 fb1d 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000378 	.word	0x20000378

08001aa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]
 8001ad4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <MX_TIM3_Init+0xec>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001ade:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001aec:	f240 623f 	movw	r2, #1599	; 0x63f
 8001af0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001afe:	4823      	ldr	r0, [pc, #140]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001b00:	f004 fb2e 	bl	8006160 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b0a:	f000 fae1 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481c      	ldr	r0, [pc, #112]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001b1c:	f004 ff66 	bl	80069ec <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001b26:	f000 fad3 	bl	80020d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b2a:	4818      	ldr	r0, [pc, #96]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001b2c:	f004 fbe0 	bl	80062f0 <HAL_TIM_PWM_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b36:	f000 facb 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4810      	ldr	r0, [pc, #64]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001b4a:	f005 fc71 	bl	8007430 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001b54:	f000 fabc 	bl	80020d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b58:	2360      	movs	r3, #96	; 0x60
 8001b5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001b70:	f004 fe28 	bl	80067c4 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001b7a:	f000 faa9 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b7e:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM3_Init+0xe8>)
 8001b80:	f000 fbce 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8001b84:	bf00      	nop
 8001b86:	3738      	adds	r7, #56	; 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200003c4 	.word	0x200003c4
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <MX_USART1_UART_Init+0x5c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART1_UART_Init+0x58>)
 8001bd8:	f005 fcd0 	bl	800757c <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001be2:	f000 fa75 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000410 	.word	0x20000410
 8001bf0:	40013800 	.word	0x40013800

08001bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <MX_USART2_UART_Init+0x5c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_USART2_UART_Init+0x58>)
 8001c38:	f005 fca0 	bl	800757c <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c42:	f000 fa45 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000498 	.word	0x20000498
 8001c50:	40004400 	.word	0x40004400

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	4a2a      	ldr	r2, [pc, #168]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <MX_GPIO_Init+0xc4>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2120      	movs	r1, #32
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f002 f8c1 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cdc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480b      	ldr	r0, [pc, #44]	; (8001d1c <MX_GPIO_Init+0xc8>)
 8001cee:	f001 ff09 	bl	8003b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0c:	f001 fefa 	bl	8003b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000800 	.word	0x48000800

08001d20 <Lora_Init>:

/* USER CODE BEGIN 4 */

void Lora_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b09a      	sub	sp, #104	; 0x68
 8001d24:	af00      	add	r7, sp, #0
	// Set LORA Chip To Transmit/Receive Mode
	char msg[100] = "";
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	2260      	movs	r2, #96	; 0x60
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f00a fe01 	bl	800c93a <memset>
	// Spreading Factor: 7
	// Bandwidth: 500 KHz
	// Coding Rate: 1
	// Programmed Preamble: 10
	// This favors speed over dependabilitySerial2.println("AT+PARAMETER=7,9,1,4");
	sprintf(msg, "AT+PARAMETER=10,8,1,4\r\n");
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4960      	ldr	r1, [pc, #384]	; (8001ebc <Lora_Init+0x19c>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00a fd99 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fa93 	bl	8000270 <strlen>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	1d39      	adds	r1, r7, #4
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d54:	485a      	ldr	r0, [pc, #360]	; (8001ec0 <Lora_Init+0x1a0>)
 8001d56:	f005 fc5f 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5e:	f000 fda7 	bl	80028b0 <HAL_Delay>

	// Sets LORA Chip address to 24
	sprintf(msg, "AT+ADDRESS=24\r\n");
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4957      	ldr	r1, [pc, #348]	; (8001ec4 <Lora_Init+0x1a4>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00a fd84 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fa7e 	bl	8000270 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	1d39      	adds	r1, r7, #4
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7e:	4850      	ldr	r0, [pc, #320]	; (8001ec0 <Lora_Init+0x1a0>)
 8001d80:	f005 fc4a 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d88:	f000 fd92 	bl	80028b0 <HAL_Delay>

	// Reads back address to verify setup
	sprintf(msg, "AT+NETWORKID=3\r\n");
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	494e      	ldr	r1, [pc, #312]	; (8001ec8 <Lora_Init+0x1a8>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00a fd6f 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fa69 	bl	8000270 <strlen>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	1d39      	adds	r1, r7, #4
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	4845      	ldr	r0, [pc, #276]	; (8001ec0 <Lora_Init+0x1a0>)
 8001daa:	f005 fc35 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db2:	f000 fd7d 	bl	80028b0 <HAL_Delay>

	sprintf(msg, "AT+CPIN?\r\n");
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4944      	ldr	r1, [pc, #272]	; (8001ecc <Lora_Init+0x1ac>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00a fd5a 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fa54 	bl	8000270 <strlen>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	1d39      	adds	r1, r7, #4
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd2:	483b      	ldr	r0, [pc, #236]	; (8001ec0 <Lora_Init+0x1a0>)
 8001dd4:	f005 fc20 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001dd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ddc:	f000 fd68 	bl	80028b0 <HAL_Delay>


	sprintf(msg, "AT+CRFOP?\r\n");
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	493b      	ldr	r1, [pc, #236]	; (8001ed0 <Lora_Init+0x1b0>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00a fd45 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fa3f 	bl	8000270 <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	1d39      	adds	r1, r7, #4
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <Lora_Init+0x1a0>)
 8001dfe:	f005 fc0b 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e06:	f000 fd53 	bl	80028b0 <HAL_Delay>

	sprintf(msg, "AT+ADDRESS?\r\n");
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4931      	ldr	r1, [pc, #196]	; (8001ed4 <Lora_Init+0x1b4>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00a fd30 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fa2a 	bl	8000270 <strlen>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	1d39      	adds	r1, r7, #4
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e26:	4826      	ldr	r0, [pc, #152]	; (8001ec0 <Lora_Init+0x1a0>)
 8001e28:	f005 fbf6 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e30:	f000 fd3e 	bl	80028b0 <HAL_Delay>

	sprintf(msg, "AT+NETWORKID?\r\n");
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4928      	ldr	r1, [pc, #160]	; (8001ed8 <Lora_Init+0x1b8>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00a fd1b 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fa15 	bl	8000270 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	1d39      	adds	r1, r7, #4
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e50:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <Lora_Init+0x1a0>)
 8001e52:	f005 fbe1 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e5a:	f000 fd29 	bl	80028b0 <HAL_Delay>

	sprintf(msg, "AT+BAND?\r\n");
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	491e      	ldr	r1, [pc, #120]	; (8001edc <Lora_Init+0x1bc>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00a fd06 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fa00 	bl	8000270 <strlen>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	1d39      	adds	r1, r7, #4
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7a:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <Lora_Init+0x1a0>)
 8001e7c:	f005 fbcc 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e84:	f000 fd14 	bl	80028b0 <HAL_Delay>

	sprintf(msg, "AT+MODE=0\r\n");
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4915      	ldr	r1, [pc, #84]	; (8001ee0 <Lora_Init+0x1c0>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00a fcf1 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f9eb 	bl	8000270 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	1d39      	adds	r1, r7, #4
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea4:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <Lora_Init+0x1a0>)
 8001ea6:	f005 fbb7 	bl	8007618 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001eaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eae:	f000 fcff 	bl	80028b0 <HAL_Delay>
}
 8001eb2:	bf00      	nop
 8001eb4:	3768      	adds	r7, #104	; 0x68
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	080102c4 	.word	0x080102c4
 8001ec0:	20000410 	.word	0x20000410
 8001ec4:	080102dc 	.word	0x080102dc
 8001ec8:	080102ec 	.word	0x080102ec
 8001ecc:	08010300 	.word	0x08010300
 8001ed0:	0801030c 	.word	0x0801030c
 8001ed4:	08010318 	.word	0x08010318
 8001ed8:	08010328 	.word	0x08010328
 8001edc:	08010338 	.word	0x08010338
 8001ee0:	08010344 	.word	0x08010344

08001ee4 <Lora_Send_Data>:

void Lora_Send_Data(char data[])
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
	// Combines message to be sent with the data passed in
	char msg[100] = "";
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2260      	movs	r2, #96	; 0x60
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f00a fd1e 	bl	800c93a <memset>
	sprintf(msg, "AT+SEND=%i,%i,%s\r\n", ESP_LORA_ADDRESS, strlen(data), data);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe f9b6 	bl	8000270 <strlen>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f107 000c 	add.w	r0, r7, #12
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	2219      	movs	r2, #25
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <Lora_Send_Data+0x58>)
 8001f14:	f00a fcae 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe f9a7 	bl	8000270 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f107 010c 	add.w	r1, r7, #12
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <Lora_Send_Data+0x5c>)
 8001f30:	f005 fb72 	bl	8007618 <HAL_UART_Transmit>
}
 8001f34:	bf00      	nop
 8001f36:	3770      	adds	r7, #112	; 0x70
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	08010350 	.word	0x08010350
 8001f40:	20000410 	.word	0x20000410

08001f44 <get_timestep>:
{
	char data[4];
}

// Get stored time in timer 2 in terms of seconds
double get_timestep() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
	long double cur_time = TIM2->CNT;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fad7 	bl	8000504 <__aeabi_ui2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 2300 	strd	r2, r3, [r7]
	// Reset timer for next call
	TIM2->CNT = 0;
 8001f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
	// Division to make time in terms of seconds
	cur_time /= 8000;
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <get_timestep+0x50>)
 8001f6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f70:	f7fe fc6c 	bl	800084c <__aeabi_ddiv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	e9c7 2300 	strd	r2, r3, [r7]
	return (double)cur_time;
 8001f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f80:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f84:	eeb0 0a47 	vmov.f32	s0, s14
 8001f88:	eef0 0a67 	vmov.f32	s1, s15
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40bf4000 	.word	0x40bf4000

08001f98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f006 ffdd 	bl	8008f60 <osDelay>
 8001fa6:	e7fb      	b.n	8001fa0 <StartDefaultTask+0x8>

08001fa8 <ReadThrottle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadThrottle */
void ReadThrottle(void *argument)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0a4      	sub	sp, #144	; 0x90
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  {
	char msg[50];
	char Rx_data[100];
	int Throttle;
	char oldMSG[25];
	strncpy(oldMSG, UART1_rxBuffer, 25);
 8001fb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb4:	2219      	movs	r2, #25
 8001fb6:	491b      	ldr	r1, [pc, #108]	; (8002024 <ReadThrottle+0x7c>)
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00a fcc6 	bl	800c94a <strncpy>
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 25);
 8001fbe:	2219      	movs	r2, #25
 8001fc0:	4918      	ldr	r1, [pc, #96]	; (8002024 <ReadThrottle+0x7c>)
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <ReadThrottle+0x80>)
 8001fc4:	f005 fbb2 	bl	800772c <HAL_UART_Receive_IT>
	if (UART1_rxBuffer != oldMSG)
	{
		HAL_UART_Transmit(&huart2, UART1_rxBuffer, 25, 100);
 8001fc8:	2364      	movs	r3, #100	; 0x64
 8001fca:	2219      	movs	r2, #25
 8001fcc:	4915      	ldr	r1, [pc, #84]	; (8002024 <ReadThrottle+0x7c>)
 8001fce:	4817      	ldr	r0, [pc, #92]	; (800202c <ReadThrottle+0x84>)
 8001fd0:	f005 fb22 	bl	8007618 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, oldMSG, 25, 100);
 8001fd4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fd8:	2364      	movs	r3, #100	; 0x64
 8001fda:	2219      	movs	r2, #25
 8001fdc:	4813      	ldr	r0, [pc, #76]	; (800202c <ReadThrottle+0x84>)
 8001fde:	f005 fb1b 	bl	8007618 <HAL_UART_Transmit>
	}
	Throttle = 80;
 8001fe2:	2350      	movs	r3, #80	; 0x50
 8001fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	TIM3->CCR4 = Throttle;
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <ReadThrottle+0x88>)
 8001fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
	sprintf(msg, "Set Throttle to : %i\r\n", Throttle);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <ReadThrottle+0x8c>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00a fc3a 	bl	800c874 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), I2C_DELAY);
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe f933 	bl	8000270 <strlen>
 800200a:	4603      	mov	r3, r0
 800200c:	b29a      	uxth	r2, r3
 800200e:	f107 010c 	add.w	r1, r7, #12
 8002012:	2332      	movs	r3, #50	; 0x32
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <ReadThrottle+0x84>)
 8002016:	f005 faff 	bl	8007618 <HAL_UART_Transmit>
    osDelay(1);
 800201a:	2001      	movs	r0, #1
 800201c:	f006 ffa0 	bl	8008f60 <osDelay>
  {
 8002020:	e7c6      	b.n	8001fb0 <ReadThrottle+0x8>
 8002022:	bf00      	nop
 8002024:	20000530 	.word	0x20000530
 8002028:	20000410 	.word	0x20000410
 800202c:	20000498 	.word	0x20000498
 8002030:	40000400 	.word	0x40000400
 8002034:	08010364 	.word	0x08010364

08002038 <SendSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSpeed */
void SendSpeed(void *argument)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendSpeed */
  /* Infinite loop */
  for(;;)
  {
	// Calculate Speed
	char formatted_speed[4] = "";
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
	sprintf(formatted_speed, "%.1f", current_speed);
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <SendSpeed+0x38>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa7d 	bl	8000548 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	f107 000c 	add.w	r0, r7, #12
 8002056:	4907      	ldr	r1, [pc, #28]	; (8002074 <SendSpeed+0x3c>)
 8002058:	f00a fc0c 	bl	800c874 <siprintf>
	Lora_Send_Data(formatted_speed);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff3f 	bl	8001ee4 <Lora_Send_Data>
    osDelay(20000);
 8002066:	f644 6020 	movw	r0, #20000	; 0x4e20
 800206a:	f006 ff79 	bl	8008f60 <osDelay>
  {
 800206e:	e7e7      	b.n	8002040 <SendSpeed+0x8>
 8002070:	20000230 	.word	0x20000230
 8002074:	0801037c 	.word	0x0801037c

08002078 <startAccelUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAccelUpdateTask */
void startAccelUpdateTask(void *argument)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAccelUpdateTask */
  init_spatial(&hi2c1, &huart2);
 8002080:	4908      	ldr	r1, [pc, #32]	; (80020a4 <startAccelUpdateTask+0x2c>)
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <startAccelUpdateTask+0x30>)
 8002084:	f7ff f9c6 	bl	8001414 <init_spatial>
  /* Infinite loop */
  for(;;) {
    update_spatial(get_timestep());
 8002088:	f7ff ff5c 	bl	8001f44 <get_timestep>
 800208c:	ec53 2b10 	vmov	r2, r3, d0
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fda8 	bl	8000be8 <__aeabi_d2f>
 8002098:	4603      	mov	r3, r0
 800209a:	ee00 3a10 	vmov	s0, r3
 800209e:	f7ff fa87 	bl	80015b0 <update_spatial>
 80020a2:	e7f1      	b.n	8002088 <startAccelUpdateTask+0x10>
 80020a4:	20000498 	.word	0x20000498
 80020a8:	20000324 	.word	0x20000324

080020ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020be:	f000 fbd7 	bl	8002870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40001000 	.word	0x40001000

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <Error_Handler+0x8>
	...

080020dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_MspInit+0x4c>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_MspInit+0x4c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6613      	str	r3, [r2, #96]	; 0x60
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_MspInit+0x4c>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_MspInit+0x4c>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_MspInit+0x4c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_MspInit+0x4c>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	210f      	movs	r1, #15
 8002116:	f06f 0001 	mvn.w	r0, #1
 800211a:	f001 fc49 	bl	80039b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0ac      	sub	sp, #176	; 0xb0
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2288      	movs	r2, #136	; 0x88
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f00a fbf4 	bl	800c93a <memset>
  if(hadc->Instance==ADC1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <HAL_ADC_MspInit+0xc8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d146      	bne.n	80021ea <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800215c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002160:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800216a:	2302      	movs	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002172:	2308      	movs	r3, #8
 8002174:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002176:	2307      	movs	r3, #7
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800217a:	2302      	movs	r3, #2
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800217e:	2302      	movs	r3, #2
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fb2b 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002198:	f7ff ff9a 	bl	80020d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_ADC_MspInit+0xcc>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_ADC_MspInit+0xcc>)
 80021a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_ADC_MspInit+0xcc>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_ADC_MspInit+0xcc>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <HAL_ADC_MspInit+0xcc>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_ADC_MspInit+0xcc>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021d2:	230b      	movs	r3, #11
 80021d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_ADC_MspInit+0xd0>)
 80021e6:	f001 fc8d 	bl	8003b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	37b0      	adds	r7, #176	; 0xb0
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	50040000 	.word	0x50040000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	48000800 	.word	0x48000800

08002200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b0ac      	sub	sp, #176	; 0xb0
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2288      	movs	r2, #136	; 0x88
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f00a fb8a 	bl	800c93a <memset>
  if(hi2c->Instance==I2C1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <HAL_I2C_MspInit+0xb0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d13b      	bne.n	80022a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002234:	2300      	movs	r3, #0
 8002236:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fad3 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002248:	f7ff ff42 	bl	80020d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_I2C_MspInit+0xb4>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_I2C_MspInit+0xb4>)
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_I2C_MspInit+0xb4>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 8002264:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800227e:	2304      	movs	r3, #4
 8002280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002288:	4619      	mov	r1, r3
 800228a:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_I2C_MspInit+0xb8>)
 800228c:	f001 fc3a 	bl	8003b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_I2C_MspInit+0xb4>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_I2C_MspInit+0xb4>)
 8002296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800229a:	6593      	str	r3, [r2, #88]	; 0x58
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_I2C_MspInit+0xb4>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	37b0      	adds	r7, #176	; 0xb0
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40005400 	.word	0x40005400
 80022b4:	40021000 	.word	0x40021000
 80022b8:	48000400 	.word	0x48000400

080022bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d10c      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_TIM_Base_MspInit+0x5c>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_TIM_Base_MspInit+0x5c>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_TIM_Base_MspInit+0x5c>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022e6:	e010      	b.n	800230a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0b      	ldr	r2, [pc, #44]	; (800231c <HAL_TIM_Base_MspInit+0x60>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10b      	bne.n	800230a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_TIM_Base_MspInit+0x5c>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_TIM_Base_MspInit+0x5c>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_TIM_Base_MspInit+0x5c>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40000400 	.word	0x40000400

08002320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_TIM_MspPostInit+0x64>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d11c      	bne.n	800237c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_TIM_MspPostInit+0x68>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_TIM_MspPostInit+0x68>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_TIM_MspPostInit+0x68>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800235a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800236c:	2302      	movs	r3, #2
 800236e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	4619      	mov	r1, r3
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <HAL_TIM_MspPostInit+0x6c>)
 8002378:	f001 fbc4 	bl	8003b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40000400 	.word	0x40000400
 8002388:	40021000 	.word	0x40021000
 800238c:	48000800 	.word	0x48000800

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0ae      	sub	sp, #184	; 0xb8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2288      	movs	r2, #136	; 0x88
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00a fac2 	bl	800c93a <memset>
  if(huart->Instance==USART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_UART_MspInit+0x148>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d145      	bne.n	800244c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023c4:	2300      	movs	r3, #0
 80023c6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4618      	mov	r0, r3
 80023ce:	f003 fa0b 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023d8:	f7ff fe7a 	bl	80020d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_UART_MspInit+0x14c>)
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <HAL_UART_MspInit+0x14c>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e6:	6613      	str	r3, [r2, #96]	; 0x60
 80023e8:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_UART_MspInit+0x14c>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_UART_MspInit+0x14c>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a38      	ldr	r2, [pc, #224]	; (80024dc <HAL_UART_MspInit+0x14c>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_UART_MspInit+0x14c>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800240c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002426:	2307      	movs	r3, #7
 8002428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002436:	f001 fb65 	bl	8003b04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	2025      	movs	r0, #37	; 0x25
 8002440:	f001 fab6 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002444:	2025      	movs	r0, #37	; 0x25
 8002446:	f001 facf 	bl	80039e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800244a:	e040      	b.n	80024ce <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_UART_MspInit+0x150>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d13b      	bne.n	80024ce <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002456:	2302      	movs	r3, #2
 8002458:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800245a:	2300      	movs	r3, #0
 800245c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4618      	mov	r0, r3
 8002464:	f003 f9c0 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800246e:	f7ff fe2f 	bl	80020d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_UART_MspInit+0x14c>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_UART_MspInit+0x14c>)
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_UART_MspInit+0x14c>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_UART_MspInit+0x14c>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_UART_MspInit+0x14c>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_UART_MspInit+0x14c>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024a2:	230c      	movs	r3, #12
 80024a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ba:	2307      	movs	r3, #7
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ca:	f001 fb1b 	bl	8003b04 <HAL_GPIO_Init>
}
 80024ce:	bf00      	nop
 80024d0:	37b8      	adds	r7, #184	; 0xb8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40013800 	.word	0x40013800
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40004400 	.word	0x40004400

080024e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	; 0x38
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024f2:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_InitTick+0xe0>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a33      	ldr	r2, [pc, #204]	; (80025c4 <HAL_InitTick+0xe0>)
 80024f8:	f043 0310 	orr.w	r3, r3, #16
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_InitTick+0xe0>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800250a:	f107 0210 	add.w	r2, r7, #16
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f003 f8d5 	bl	80056c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d103      	bne.n	800252c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002524:	f003 f8a2 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8002528:	6378      	str	r0, [r7, #52]	; 0x34
 800252a:	e004      	b.n	8002536 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800252c:	f003 f89e 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8002530:	4603      	mov	r3, r0
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_InitTick+0xe4>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	3b01      	subs	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_InitTick+0xe8>)
 8002546:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_InitTick+0xec>)
 8002548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_InitTick+0xe8>)
 800254c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002550:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <HAL_InitTick+0xe8>)
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_InitTick+0xe8>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_InitTick+0xe8>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_InitTick+0xe8>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800256a:	4818      	ldr	r0, [pc, #96]	; (80025cc <HAL_InitTick+0xe8>)
 800256c:	f003 fdf8 	bl	8006160 <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11b      	bne.n	80025b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800257e:	4813      	ldr	r0, [pc, #76]	; (80025cc <HAL_InitTick+0xe8>)
 8002580:	f003 fe46 	bl	8006210 <HAL_TIM_Base_Start_IT>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800258a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800258e:	2b00      	cmp	r3, #0
 8002590:	d111      	bne.n	80025b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002592:	2036      	movs	r0, #54	; 0x36
 8002594:	f001 fa28 	bl	80039e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	d808      	bhi.n	80025b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800259e:	2200      	movs	r2, #0
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	2036      	movs	r0, #54	; 0x36
 80025a4:	f001 fa04 	bl	80039b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_InitTick+0xf0>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e002      	b.n	80025b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3738      	adds	r7, #56	; 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	2000054c 	.word	0x2000054c
 80025d0:	40001000 	.word	0x40001000
 80025d4:	20000008 	.word	0x20000008

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler+0x4>

080025de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <USART1_IRQHandler+0x10>)
 800260a:	f005 f8db 	bl	80077c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000410 	.word	0x20000410

08002618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <TIM6_DAC_IRQHandler+0x10>)
 800261e:	f003 ffcf 	bl	80065c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2000054c 	.word	0x2000054c

0800262c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return 1;
 8002630:	2301      	movs	r3, #1
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <_kill>:

int _kill(int pid, int sig)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002646:	f00a fa43 	bl	800cad0 <__errno>
 800264a:	4603      	mov	r3, r0
 800264c:	2216      	movs	r2, #22
 800264e:	601a      	str	r2, [r3, #0]
  return -1;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_exit>:

void _exit (int status)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffe7 	bl	800263c <_kill>
  while (1) {}    /* Make sure we hang here */
 800266e:	e7fe      	b.n	800266e <_exit+0x12>

08002670 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e00a      	b.n	8002698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002682:	f3af 8000 	nop.w
 8002686:	4601      	mov	r1, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf0      	blt.n	8002682 <_read+0x12>
  }

  return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e009      	b.n	80026d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60ba      	str	r2, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf1      	blt.n	80026bc <_write+0x12>
  }
  return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_close>:

int _close(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800270a:	605a      	str	r2, [r3, #4]
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_isatty>:

int _isatty(int file)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f00a f9a8 	bl	800cad0 <__errno>
 8002780:	4603      	mov	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <_sbrk+0x64>)
 800279c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20018000 	.word	0x20018000
 80027ac:	00000400 	.word	0x00000400
 80027b0:	20000598 	.word	0x20000598
 80027b4:	20002090 	.word	0x20002090

080027b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <SystemInit+0x20>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <SystemInit+0x20>)
 80027c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002814 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027e0:	f7ff ffea 	bl	80027b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <LoopForever+0x6>)
  ldr r1, =_edata
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <LoopForever+0xe>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <LoopForever+0x16>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800280a:	f00a f967 	bl	800cadc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800280e:	f7fe ff97 	bl	8001740 <main>

08002812 <LoopForever>:

LoopForever:
    b LoopForever
 8002812:	e7fe      	b.n	8002812 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002814:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002820:	080108b0 	.word	0x080108b0
  ldr r2, =_sbss
 8002824:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002828:	2000208c 	.word	0x2000208c

0800282c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC1_2_IRQHandler>
	...

08002830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_Init+0x3c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_Init+0x3c>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002846:	2003      	movs	r0, #3
 8002848:	f001 f8a7 	bl	800399a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800284c:	200f      	movs	r0, #15
 800284e:	f7ff fe49 	bl	80024e4 <HAL_InitTick>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	e001      	b.n	8002862 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800285e:	f7ff fc3d 	bl	80020dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002862:	79fb      	ldrb	r3, [r7, #7]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40022000 	.word	0x40022000

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000000c 	.word	0x2000000c
 8002894:	2000059c 	.word	0x2000059c

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	2000059c 	.word	0x2000059c

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff ffee 	bl	8002898 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_Delay+0x44>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d6:	bf00      	nop
 80028d8:	f7ff ffde 	bl	8002898 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c

080028f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3360      	adds	r3, #96	; 0x60
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <LL_ADC_SetOffset+0x44>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	03fff000 	.word	0x03fff000

080029a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3360      	adds	r3, #96	; 0x60
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3330      	adds	r3, #48	; 0x30
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	4413      	add	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	211f      	movs	r1, #31
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 011f 	and.w	r1, r3, #31
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b087      	sub	sp, #28
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3314      	adds	r3, #20
 8002a72:	461a      	mov	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	0e5b      	lsrs	r3, r3, #25
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	4413      	add	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	0d1b      	lsrs	r3, r3, #20
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2107      	movs	r1, #7
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	0d1b      	lsrs	r3, r3, #20
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0318 	and.w	r3, r3, #24
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002adc:	40d9      	lsrs	r1, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	0007ffff 	.word	0x0007ffff

08002b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6093      	str	r3, [r2, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b38:	d101      	bne.n	8002b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_IsEnabled+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_IsEnabled+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d101      	bne.n	8002c00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e130      	b.n	8002e8c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fa77 	bl	800212c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff67 	bl	8002b24 <LL_ADC_IsDeepPowerDownEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff4d 	bl	8002b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff82 	bl	8002b74 <LL_ADC_IsInternalRegulatorEnabled>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff66 	bl	8002b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c80:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <HAL_ADC_Init+0x284>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	4a84      	ldr	r2, [pc, #528]	; (8002e98 <HAL_ADC_Init+0x288>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c94:	e002      	b.n	8002c9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f9      	bne.n	8002c96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff64 	bl	8002b74 <LL_ADC_IsInternalRegulatorEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff75 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002cd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 80c9 	bne.w	8002e7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 80c5 	bne.w	8002e7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff49 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d115      	bne.n	8002d3c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d10:	4862      	ldr	r0, [pc, #392]	; (8002e9c <HAL_ADC_Init+0x28c>)
 8002d12:	f7ff ff43 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d16:	4604      	mov	r4, r0
 8002d18:	4861      	ldr	r0, [pc, #388]	; (8002ea0 <HAL_ADC_Init+0x290>)
 8002d1a:	f7ff ff3f 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	431c      	orrs	r4, r3
 8002d22:	4860      	ldr	r0, [pc, #384]	; (8002ea4 <HAL_ADC_Init+0x294>)
 8002d24:	f7ff ff3a 	bl	8002b9c <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4619      	mov	r1, r3
 8002d36:	485c      	ldr	r0, [pc, #368]	; (8002ea8 <HAL_ADC_Init+0x298>)
 8002d38:	f7ff fdde 	bl	80028f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e5b      	ldrb	r3, [r3, #25]
 8002d40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d106      	bne.n	8002d78 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	045b      	lsls	r3, r3, #17
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_ADC_Init+0x29c>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff1b 	bl	8002be8 <LL_ADC_INJ_IsConversionOngoing>
 8002db2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d13d      	bne.n	8002e36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13a      	bne.n	8002e36 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dc4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dcc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ddc:	f023 0302 	bic.w	r3, r3, #2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d118      	bne.n	8002e26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e10:	4311      	orrs	r1, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e16:	430a      	orrs	r2, r1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	e007      	b.n	8002e36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10c      	bne.n	8002e58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	f023 010f 	bic.w	r1, r3, #15
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
 8002e56:	e007      	b.n	8002e68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 020f 	bic.w	r2, r2, #15
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f023 0303 	bic.w	r3, r3, #3
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
 8002e78:	e007      	b.n	8002e8a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f043 0210 	orr.w	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3724      	adds	r7, #36	; 0x24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	20000004 	.word	0x20000004
 8002e98:	053e2d63 	.word	0x053e2d63
 8002e9c:	50040000 	.word	0x50040000
 8002ea0:	50040100 	.word	0x50040100
 8002ea4:	50040200 	.word	0x50040200
 8002ea8:	50040300 	.word	0x50040300
 8002eac:	fff0c007 	.word	0xfff0c007

08002eb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b0b6      	sub	sp, #216	; 0xd8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x22>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e3c9      	b.n	8003666 <HAL_ADC_ConfigChannel+0x7b6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fe6f 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 83aa 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d824      	bhi.n	8002f46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	3b02      	subs	r3, #2
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d81b      	bhi.n	8002f3e <HAL_ADC_ConfigChannel+0x8e>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <HAL_ADC_ConfigChannel+0x5c>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f25 	.word	0x08002f25
 8002f14:	08002f2d 	.word	0x08002f2d
 8002f18:	08002f35 	.word	0x08002f35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f22:	e010      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f24:	2312      	movs	r3, #18
 8002f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f2a:	e00c      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f2c:	2318      	movs	r3, #24
 8002f2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f32:	e008      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f3c:	e003      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f3e:	2306      	movs	r3, #6
 8002f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002f54:	f7ff fd59 	bl	8002a0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fe30 	bl	8002bc2 <LL_ADC_REG_IsConversionOngoing>
 8002f62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fe3c 	bl	8002be8 <LL_ADC_INJ_IsConversionOngoing>
 8002f70:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 81a4 	bne.w	80032c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 819f 	bne.w	80032c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7ff fd64 	bl	8002a62 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	08db      	lsrs	r3, r3, #3
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d00a      	beq.n	8002fd2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6919      	ldr	r1, [r3, #16]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fcc:	f7ff fcc8 	bl	8002960 <LL_ADC_SetOffset>
 8002fd0:	e179      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fce5 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x14e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fcda 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	0e9b      	lsrs	r3, r3, #26
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	e01e      	b.n	800303c <HAL_ADC_ConfigChannel+0x18c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fccf 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800301c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003024:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e004      	b.n	800303a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1a4>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	e018      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1d6>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800306c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e004      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800307c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003086:	429a      	cmp	r2, r3
 8003088:	d106      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fc9e 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fc82 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x214>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fc77 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	e01e      	b.n	8003102 <HAL_ADC_ConfigChannel+0x252>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fc6c 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80030e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80030ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80030f2:	2320      	movs	r3, #32
 80030f4:	e004      	b.n	8003100 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80030f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_ADC_ConfigChannel+0x26a>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0e9b      	lsrs	r3, r3, #26
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	e018      	b.n	800314c <HAL_ADC_ConfigChannel+0x29c>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800312e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003132:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003136:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e004      	b.n	800314c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800314c:	429a      	cmp	r2, r3
 800314e:	d106      	bne.n	800315e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2200      	movs	r2, #0
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fc3b 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2102      	movs	r1, #2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fc1f 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_ADC_ConfigChannel+0x2da>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2102      	movs	r1, #2
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fc14 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	e01e      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x318>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fc09 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80031a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80031b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e004      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80031bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x330>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	e014      	b.n	800320a <HAL_ADC_ConfigChannel+0x35a>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80031ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e004      	b.n	800320a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800320a:	429a      	cmp	r2, r3
 800320c:	d106      	bne.n	800321c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	2102      	movs	r1, #2
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fbdc 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2103      	movs	r1, #3
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fbc0 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x398>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2103      	movs	r1, #3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fbb5 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	f003 021f 	and.w	r2, r3, #31
 8003246:	e017      	b.n	8003278 <HAL_ADC_ConfigChannel+0x3c8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2103      	movs	r1, #3
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fbaa 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003262:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800326a:	2320      	movs	r3, #32
 800326c:	e003      	b.n	8003276 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800326e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x3e0>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	e011      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x404>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800329e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80032a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e003      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80032ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d106      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	2103      	movs	r1, #3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fb87 	bl	80029d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fc66 	bl	8002b9c <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8140 	bne.w	8003558 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	461a      	mov	r2, r3
 80032e6:	f7ff fbe7 	bl	8002ab8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4a8f      	ldr	r2, [pc, #572]	; (800352c <HAL_ADC_ConfigChannel+0x67c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	f040 8131 	bne.w	8003558 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_ADC_ConfigChannel+0x46e>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	3301      	adds	r3, #1
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2b09      	cmp	r3, #9
 8003314:	bf94      	ite	ls
 8003316:	2301      	movls	r3, #1
 8003318:	2300      	movhi	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e019      	b.n	8003352 <HAL_ADC_ConfigChannel+0x4a2>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800332c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e003      	b.n	8003342 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2b09      	cmp	r3, #9
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003352:	2b00      	cmp	r3, #0
 8003354:	d079      	beq.n	800344a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x4c2>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	3301      	adds	r3, #1
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003370:	e015      	b.n	800339e <HAL_ADC_ConfigChannel+0x4ee>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800338e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	069b      	lsls	r3, r3, #26
 800339a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_ADC_ConfigChannel+0x50e>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	e017      	b.n	80033ee <HAL_ADC_ConfigChannel+0x53e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e003      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80033da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x564>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	3301      	adds	r3, #1
 8003406:	f003 021f 	and.w	r2, r3, #31
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	051b      	lsls	r3, r3, #20
 8003412:	e018      	b.n	8003446 <HAL_ADC_ConfigChannel+0x596>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800342c:	2320      	movs	r3, #32
 800342e:	e003      	b.n	8003438 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f003 021f 	and.w	r2, r3, #31
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003446:	430b      	orrs	r3, r1
 8003448:	e081      	b.n	800354e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x5b6>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0e9b      	lsrs	r3, r3, #26
 800345c:	3301      	adds	r3, #1
 800345e:	069b      	lsls	r3, r3, #26
 8003460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003464:	e015      	b.n	8003492 <HAL_ADC_ConfigChannel+0x5e2>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800347e:	2320      	movs	r3, #32
 8003480:	e003      	b.n	800348a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	3301      	adds	r3, #1
 800348c:	069b      	lsls	r3, r3, #26
 800348e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x602>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0e9b      	lsrs	r3, r3, #26
 80034a4:	3301      	adds	r3, #1
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	e017      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x632>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	61bb      	str	r3, [r7, #24]
  return result;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	ea42 0103 	orr.w	r1, r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_ADC_ConfigChannel+0x65e>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	3301      	adds	r3, #1
 80034fa:	f003 021f 	and.w	r2, r3, #31
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	3b1e      	subs	r3, #30
 8003506:	051b      	lsls	r3, r3, #20
 8003508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800350c:	e01e      	b.n	800354c <HAL_ADC_ConfigChannel+0x69c>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	60fb      	str	r3, [r7, #12]
  return result;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003526:	2320      	movs	r3, #32
 8003528:	e006      	b.n	8003538 <HAL_ADC_ConfigChannel+0x688>
 800352a:	bf00      	nop
 800352c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f003 021f 	and.w	r2, r3, #31
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	3b1e      	subs	r3, #30
 8003546:	051b      	lsls	r3, r3, #20
 8003548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003552:	4619      	mov	r1, r3
 8003554:	f7ff fa85 	bl	8002a62 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b44      	ldr	r3, [pc, #272]	; (8003670 <HAL_ADC_ConfigChannel+0x7c0>)
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d07a      	beq.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003564:	4843      	ldr	r0, [pc, #268]	; (8003674 <HAL_ADC_ConfigChannel+0x7c4>)
 8003566:	f7ff f9ed 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 800356a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a41      	ldr	r2, [pc, #260]	; (8003678 <HAL_ADC_ConfigChannel+0x7c8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d12c      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800357c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d126      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3c      	ldr	r2, [pc, #240]	; (800367c <HAL_ADC_ConfigChannel+0x7cc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x6e8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <HAL_ADC_ConfigChannel+0x7d0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d15d      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800359c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a0:	4619      	mov	r1, r3
 80035a2:	4834      	ldr	r0, [pc, #208]	; (8003674 <HAL_ADC_ConfigChannel+0x7c4>)
 80035a4:	f7ff f9bb 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_ADC_ConfigChannel+0x7d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	4a36      	ldr	r2, [pc, #216]	; (8003688 <HAL_ADC_ConfigChannel+0x7d8>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035c2:	e002      	b.n	80035ca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f9      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035d0:	e040      	b.n	8003654 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2d      	ldr	r2, [pc, #180]	; (800368c <HAL_ADC_ConfigChannel+0x7dc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d118      	bne.n	800360e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d112      	bne.n	800360e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a23      	ldr	r2, [pc, #140]	; (800367c <HAL_ADC_ConfigChannel+0x7cc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_ADC_ConfigChannel+0x74c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_ADC_ConfigChannel+0x7d0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d12d      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003604:	4619      	mov	r1, r3
 8003606:	481b      	ldr	r0, [pc, #108]	; (8003674 <HAL_ADC_ConfigChannel+0x7c4>)
 8003608:	f7ff f989 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360c:	e024      	b.n	8003658 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_ADC_ConfigChannel+0x7e0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d120      	bne.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800361c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <HAL_ADC_ConfigChannel+0x7cc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d115      	bne.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003632:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003636:	4619      	mov	r1, r3
 8003638:	480e      	ldr	r0, [pc, #56]	; (8003674 <HAL_ADC_ConfigChannel+0x7c4>)
 800363a:	f7ff f970 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
 800363e:	e00c      	b.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003652:	e002      	b.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003654:	bf00      	nop
 8003656:	e000      	b.n	800365a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003658:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003662:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003666:	4618      	mov	r0, r3
 8003668:	37d8      	adds	r7, #216	; 0xd8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	80080000 	.word	0x80080000
 8003674:	50040300 	.word	0x50040300
 8003678:	c7520000 	.word	0xc7520000
 800367c:	50040000 	.word	0x50040000
 8003680:	50040200 	.word	0x50040200
 8003684:	20000004 	.word	0x20000004
 8003688:	053e2d63 	.word	0x053e2d63
 800368c:	cb840000 	.word	0xcb840000
 8003690:	80000001 	.word	0x80000001

08003694 <LL_ADC_IsEnabled>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <LL_ADC_IsEnabled+0x18>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <LL_ADC_IsEnabled+0x1a>
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_ADC_REG_IsConversionOngoing>:
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d101      	bne.n	80036d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036e0:	b590      	push	{r4, r7, lr}
 80036e2:	b09f      	sub	sp, #124	; 0x7c
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e093      	b.n	8003826 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003706:	2300      	movs	r3, #0
 8003708:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800370a:	2300      	movs	r3, #0
 800370c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a47      	ldr	r2, [pc, #284]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d102      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	e001      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e072      	b.n	8003826 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ffb9 	bl	80036ba <LL_ADC_REG_IsConversionOngoing>
 8003748:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ffb3 	bl	80036ba <LL_ADC_REG_IsConversionOngoing>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d154      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800375a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375c:	2b00      	cmp	r3, #0
 800375e:	d151      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003760:	4b35      	ldr	r3, [pc, #212]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003762:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02c      	beq.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800377e:	035b      	lsls	r3, r3, #13
 8003780:	430b      	orrs	r3, r1
 8003782:	431a      	orrs	r2, r3
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003788:	4829      	ldr	r0, [pc, #164]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800378a:	f7ff ff83 	bl	8003694 <LL_ADC_IsEnabled>
 800378e:	4604      	mov	r4, r0
 8003790:	4828      	ldr	r0, [pc, #160]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003792:	f7ff ff7f 	bl	8003694 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	431c      	orrs	r4, r3
 800379a:	4828      	ldr	r0, [pc, #160]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800379c:	f7ff ff7a 	bl	8003694 <LL_ADC_IsEnabled>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4323      	orrs	r3, r4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d137      	bne.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037b0:	f023 030f 	bic.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	6811      	ldr	r1, [r2, #0]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	430a      	orrs	r2, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037c4:	e028      	b.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037d2:	4817      	ldr	r0, [pc, #92]	; (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037d4:	f7ff ff5e 	bl	8003694 <LL_ADC_IsEnabled>
 80037d8:	4604      	mov	r4, r0
 80037da:	4816      	ldr	r0, [pc, #88]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037dc:	f7ff ff5a 	bl	8003694 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	431c      	orrs	r4, r3
 80037e4:	4815      	ldr	r0, [pc, #84]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037e6:	f7ff ff55 	bl	8003694 <LL_ADC_IsEnabled>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4323      	orrs	r3, r4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d112      	bne.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037fa:	f023 030f 	bic.w	r3, r3, #15
 80037fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003800:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003802:	e009      	b.n	8003818 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003816:	e000      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003818:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003822:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003826:	4618      	mov	r0, r3
 8003828:	377c      	adds	r7, #124	; 0x7c
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	50040000 	.word	0x50040000
 8003834:	50040100 	.word	0x50040100
 8003838:	50040300 	.word	0x50040300
 800383c:	50040200 	.word	0x50040200

08003840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800386c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003872:	4a04      	ldr	r2, [pc, #16]	; (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	60d3      	str	r3, [r2, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <__NVIC_GetPriorityGrouping+0x18>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db0b      	blt.n	80038ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	4907      	ldr	r1, [pc, #28]	; (80038dc <__NVIC_EnableIRQ+0x38>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2001      	movs	r0, #1
 80038c6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000e100 	.word	0xe000e100

080038e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	db0a      	blt.n	800390a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	490c      	ldr	r1, [pc, #48]	; (800392c <__NVIC_SetPriority+0x4c>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	440b      	add	r3, r1
 8003904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003908:	e00a      	b.n	8003920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <__NVIC_SetPriority+0x50>)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	3b04      	subs	r3, #4
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	440b      	add	r3, r1
 800391e:	761a      	strb	r2, [r3, #24]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000e100 	.word	0xe000e100
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	; 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f1c3 0307 	rsb	r3, r3, #7
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf28      	it	cs
 8003952:	2304      	movcs	r3, #4
 8003954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3304      	adds	r3, #4
 800395a:	2b06      	cmp	r3, #6
 800395c:	d902      	bls.n	8003964 <NVIC_EncodePriority+0x30>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3b03      	subs	r3, #3
 8003962:	e000      	b.n	8003966 <NVIC_EncodePriority+0x32>
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	401a      	ands	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800397c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43d9      	mvns	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	4313      	orrs	r3, r2
         );
}
 800398e:	4618      	mov	r0, r3
 8003990:	3724      	adds	r7, #36	; 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff4c 	bl	8003840 <__NVIC_SetPriorityGrouping>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039c2:	f7ff ff61 	bl	8003888 <__NVIC_GetPriorityGrouping>
 80039c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	6978      	ldr	r0, [r7, #20]
 80039ce:	f7ff ffb1 	bl	8003934 <NVIC_EncodePriority>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff80 	bl	80038e0 <__NVIC_SetPriority>
}
 80039e0:	bf00      	nop
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff ff54 	bl	80038a4 <__NVIC_EnableIRQ>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e022      	b.n	8003a74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 020e 	bic.w	r2, r2, #14
 8003a3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f003 021c 	and.w	r2, r3, #28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d005      	beq.n	8003aa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
 8003aa2:	e029      	b.n	8003af8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020e 	bic.w	r2, r2, #14
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 021c 	and.w	r2, r3, #28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
    }
  }
  return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b12:	e17f      	b.n	8003e14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	4013      	ands	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8171 	beq.w	8003e0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d005      	beq.n	8003b44 <HAL_GPIO_Init+0x40>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d130      	bne.n	8003ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0201 	and.w	r2, r3, #1
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d118      	bne.n	8003be4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	08db      	lsrs	r3, r3, #3
 8003bce:	f003 0201 	and.w	r2, r3, #1
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d017      	beq.n	8003c20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d123      	bne.n	8003c74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	08da      	lsrs	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3208      	adds	r2, #8
 8003c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	6939      	ldr	r1, [r7, #16]
 8003c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ac 	beq.w	8003e0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <HAL_GPIO_Init+0x330>)
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	4a5e      	ldr	r2, [pc, #376]	; (8003e34 <HAL_GPIO_Init+0x330>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8003cc2:	4b5c      	ldr	r3, [pc, #368]	; (8003e34 <HAL_GPIO_Init+0x330>)
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cce:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_GPIO_Init+0x334>)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cf8:	d025      	beq.n	8003d46 <HAL_GPIO_Init+0x242>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4f      	ldr	r2, [pc, #316]	; (8003e3c <HAL_GPIO_Init+0x338>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <HAL_GPIO_Init+0x23e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4e      	ldr	r2, [pc, #312]	; (8003e40 <HAL_GPIO_Init+0x33c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d019      	beq.n	8003d3e <HAL_GPIO_Init+0x23a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4d      	ldr	r2, [pc, #308]	; (8003e44 <HAL_GPIO_Init+0x340>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_Init+0x236>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4c      	ldr	r2, [pc, #304]	; (8003e48 <HAL_GPIO_Init+0x344>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00d      	beq.n	8003d36 <HAL_GPIO_Init+0x232>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <HAL_GPIO_Init+0x348>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <HAL_GPIO_Init+0x22e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <HAL_GPIO_Init+0x34c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_GPIO_Init+0x22a>
 8003d2a:	2306      	movs	r3, #6
 8003d2c:	e00c      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d2e:	2307      	movs	r3, #7
 8003d30:	e00a      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d32:	2305      	movs	r3, #5
 8003d34:	e008      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e006      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e004      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_GPIO_Init+0x244>
 8003d46:	2300      	movs	r3, #0
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	f002 0203 	and.w	r2, r2, #3
 8003d4e:	0092      	lsls	r2, r2, #2
 8003d50:	4093      	lsls	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d58:	4937      	ldr	r1, [pc, #220]	; (8003e38 <HAL_GPIO_Init+0x334>)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d90:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e08:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_GPIO_Init+0x350>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	3301      	adds	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f47f ae78 	bne.w	8003b14 <HAL_GPIO_Init+0x10>
  }
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	48000400 	.word	0x48000400
 8003e40:	48000800 	.word	0x48000800
 8003e44:	48000c00 	.word	0x48000c00
 8003e48:	48001000 	.word	0x48001000
 8003e4c:	48001400 	.word	0x48001400
 8003e50:	48001800 	.word	0x48001800
 8003e54:	40010400 	.word	0x40010400

08003e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e68:	787b      	ldrb	r3, [r7, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e74:	e002      	b.n	8003e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e08d      	b.n	8003fb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe f9a6 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e006      	b.n	8003f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d108      	bne.n	8003f2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	e007      	b.n	8003f3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	f040 80f9 	bne.w	80041da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0x34>
 8003fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0ed      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_I2C_Mem_Write+0x4e>
 800400a:	2302      	movs	r3, #2
 800400c:	e0e6      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004016:	f7fe fc3f 	bl	8002898 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2319      	movs	r3, #25
 8004022:	2201      	movs	r2, #1
 8004024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fac3 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0d1      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2221      	movs	r2, #33	; 0x21
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2240      	movs	r2, #64	; 0x40
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004060:	88f8      	ldrh	r0, [r7, #6]
 8004062:	893a      	ldrh	r2, [r7, #8]
 8004064:	8979      	ldrh	r1, [r7, #10]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4603      	mov	r3, r0
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f9d3 	bl	800441c <I2C_RequestMemoryWrite>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0a9      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2bff      	cmp	r3, #255	; 0xff
 8004090:	d90e      	bls.n	80040b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	b2da      	uxtb	r2, r3
 800409e:	8979      	ldrh	r1, [r7, #10]
 80040a0:	2300      	movs	r3, #0
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fc3d 	bl	8004928 <I2C_TransferConfig>
 80040ae:	e00f      	b.n	80040d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	8979      	ldrh	r1, [r7, #10]
 80040c2:	2300      	movs	r3, #0
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fc2c 	bl	8004928 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fabc 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e07b      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d034      	beq.n	8004188 <HAL_I2C_Mem_Write+0x1c8>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d130      	bne.n	8004188 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fa3f 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e04d      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2bff      	cmp	r3, #255	; 0xff
 8004148:	d90e      	bls.n	8004168 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	b2da      	uxtb	r2, r3
 8004156:	8979      	ldrh	r1, [r7, #10]
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fbe1 	bl	8004928 <I2C_TransferConfig>
 8004166:	e00f      	b.n	8004188 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	b2da      	uxtb	r2, r3
 8004178:	8979      	ldrh	r1, [r7, #10]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fbd0 	bl	8004928 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d19e      	bne.n	80040d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 faa2 	bl	80046e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01a      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2220      	movs	r2, #32
 80041ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_I2C_Mem_Write+0x224>)
 80041ba:	400b      	ands	r3, r1
 80041bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	fe00e800 	.word	0xfe00e800

080041e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	817b      	strh	r3, [r7, #10]
 80041fa:	460b      	mov	r3, r1
 80041fc:	813b      	strh	r3, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	f040 80fd 	bne.w	800440a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_I2C_Mem_Read+0x34>
 8004216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0f1      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_I2C_Mem_Read+0x4e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0ea      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800423e:	f7fe fb2b 	bl	8002898 <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9af 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d5      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2222      	movs	r2, #34	; 0x22
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004288:	88f8      	ldrh	r0, [r7, #6]
 800428a:	893a      	ldrh	r2, [r7, #8]
 800428c:	8979      	ldrh	r1, [r7, #10]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4603      	mov	r3, r0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f913 	bl	80044c4 <I2C_RequestMemoryRead>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0ad      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	d90e      	bls.n	80042d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	22ff      	movs	r2, #255	; 0xff
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	4b52      	ldr	r3, [pc, #328]	; (8004414 <HAL_I2C_Mem_Read+0x22c>)
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fb29 	bl	8004928 <I2C_TransferConfig>
 80042d6:	e00f      	b.n	80042f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	8979      	ldrh	r1, [r7, #10]
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_I2C_Mem_Read+0x22c>)
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fb18 	bl	8004928 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	2104      	movs	r1, #4
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f956 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07c      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d034      	beq.n	80043b8 <HAL_I2C_Mem_Read+0x1d0>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d130      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f927 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e04d      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2bff      	cmp	r3, #255	; 0xff
 8004378:	d90e      	bls.n	8004398 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	b2da      	uxtb	r2, r3
 8004386:	8979      	ldrh	r1, [r7, #10]
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fac9 	bl	8004928 <I2C_TransferConfig>
 8004396:	e00f      	b.n	80043b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	8979      	ldrh	r1, [r7, #10]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fab8 	bl	8004928 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d19a      	bne.n	80042f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f98a 	bl	80046e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e01a      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2220      	movs	r2, #32
 80043dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_I2C_Mem_Read+0x230>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	80002400 	.word	0x80002400
 8004418:	fe00e800 	.word	0xfe00e800

0800441c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	8979      	ldrh	r1, [r7, #10]
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <I2C_RequestMemoryWrite+0xa4>)
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fa6f 	bl	8004928 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8ff 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02c      	b.n	80044b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
 800446e:	e015      	b.n	800449c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004470:	893b      	ldrh	r3, [r7, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	b29b      	uxth	r3, r3
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f8e5 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e012      	b.n	80044b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f884 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	80002000 	.word	0x80002000

080044c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <I2C_RequestMemoryRead+0xa4>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa1c 	bl	8004928 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f8ac 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e02c      	b.n	800455e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800450a:	893b      	ldrh	r3, [r7, #8]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
 8004514:	e015      	b.n	8004542 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004516:	893b      	ldrh	r3, [r7, #8]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	b29b      	uxth	r3, r3
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	69b9      	ldr	r1, [r7, #24]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f892 	bl	8004652 <I2C_WaitOnTXISFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e012      	b.n	800455e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004538:	893b      	ldrh	r3, [r7, #8]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2200      	movs	r2, #0
 800454a:	2140      	movs	r1, #64	; 0x40
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f831 	bl	80045b4 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	80002000 	.word	0x80002000

0800456c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d103      	bne.n	800458a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d007      	beq.n	80045a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	619a      	str	r2, [r3, #24]
  }
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045c4:	e031      	b.n	800462a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045cc:	d02d      	beq.n	800462a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fe f963 	bl	8002898 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d122      	bne.n	800462a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d113      	bne.n	800462a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d0be      	beq.n	80045c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800465e:	e033      	b.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f87f 	bl	8004768 <I2C_IsErrorOccurred>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e031      	b.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467a:	d025      	beq.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe f90c 	bl	8002898 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d11a      	bne.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d013      	beq.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d1c4      	bne.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ec:	e02f      	b.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f838 	bl	8004768 <I2C_IsErrorOccurred>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e02d      	b.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004702:	f7fe f8c9 	bl	8002898 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11a      	bne.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	d013      	beq.n	800474e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e007      	b.n	800475e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b20      	cmp	r3, #32
 800475a:	d1c8      	bne.n	80046ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d068      	beq.n	8004866 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800479c:	e049      	b.n	8004832 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a4:	d045      	beq.n	8004832 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fe f877 	bl	8002898 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_IsErrorOccurred+0x54>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d13a      	bne.n	8004832 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d121      	bne.n	8004824 <I2C_IsErrorOccurred+0xbc>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e6:	d01d      	beq.n	8004824 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d01a      	beq.n	8004824 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047fe:	f7fe f84b 	bl	8002898 <HAL_GetTick>
 8004802:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004804:	e00e      	b.n	8004824 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004806:	f7fe f847 	bl	8002898 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b19      	cmp	r3, #25
 8004812:	d907      	bls.n	8004824 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004822:	e006      	b.n	8004832 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b20      	cmp	r3, #32
 8004830:	d1e9      	bne.n	8004806 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d003      	beq.n	8004848 <I2C_IsErrorOccurred+0xe0>
 8004840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0aa      	beq.n	800479e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2220      	movs	r2, #32
 8004856:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004888:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00b      	beq.n	80048d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f043 0302 	orr.w	r3, r3, #2
 80048c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80048d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01c      	beq.n	8004916 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fe45 	bl	800456c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <I2C_IsErrorOccurred+0x1bc>)
 80048ee:	400b      	ands	r3, r1
 80048f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	fe00e800 	.word	0xfe00e800

08004928 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	4613      	mov	r3, r2
 8004938:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004940:	7a7b      	ldrb	r3, [r7, #9]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004948:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	4313      	orrs	r3, r2
 8004952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004956:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	0d5b      	lsrs	r3, r3, #21
 8004962:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <I2C_TransferConfig+0x60>)
 8004968:	430b      	orrs	r3, r1
 800496a:	43db      	mvns	r3, r3
 800496c:	ea02 0103 	and.w	r1, r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	03ff63ff 	.word	0x03ff63ff

0800498c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d138      	bne.n	8004a14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e032      	b.n	8004a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d139      	bne.n	8004aac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e033      	b.n	8004aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2224      	movs	r2, #36	; 0x24
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40007000 	.word	0x40007000

08004ad8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae6:	d130      	bne.n	8004b4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ae8:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af4:	d038      	beq.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004af6:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2232      	movs	r2, #50	; 0x32
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	0c9b      	lsrs	r3, r3, #18
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b1c:	e002      	b.n	8004b24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b30:	d102      	bne.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f2      	bne.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d110      	bne.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e00f      	b.n	8004b6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d007      	beq.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b60:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	431bde83 	.word	0x431bde83

08004b84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e3ca      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b96:	4b97      	ldr	r3, [pc, #604]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba0:	4b94      	ldr	r3, [pc, #592]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80e4 	beq.w	8004d80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_RCC_OscConfig+0x4a>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	f040 808b 	bne.w	8004cdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f040 8087 	bne.w	8004cdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bce:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCC_OscConfig+0x62>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e3a2      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1a      	ldr	r2, [r3, #32]
 8004bea:	4b82      	ldr	r3, [pc, #520]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <HAL_RCC_OscConfig+0x7c>
 8004bf6:	4b7f      	ldr	r3, [pc, #508]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfe:	e005      	b.n	8004c0c <HAL_RCC_OscConfig+0x88>
 8004c00:	4b7c      	ldr	r3, [pc, #496]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d223      	bcs.n	8004c58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd87 	bl	8005728 <RCC_SetFlashLatencyFromMSIRange>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e383      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c24:	4b73      	ldr	r3, [pc, #460]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a72      	ldr	r2, [pc, #456]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b70      	ldr	r3, [pc, #448]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	496d      	ldr	r1, [pc, #436]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c42:	4b6c      	ldr	r3, [pc, #432]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	4968      	ldr	r1, [pc, #416]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	604b      	str	r3, [r1, #4]
 8004c56:	e025      	b.n	8004ca4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c58:	4b66      	ldr	r3, [pc, #408]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a65      	ldr	r2, [pc, #404]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c5e:	f043 0308 	orr.w	r3, r3, #8
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4960      	ldr	r1, [pc, #384]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c76:	4b5f      	ldr	r3, [pc, #380]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	495b      	ldr	r1, [pc, #364]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fd47 	bl	8005728 <RCC_SetFlashLatencyFromMSIRange>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e343      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca4:	f000 fc4a 	bl	800553c <HAL_RCC_GetSysClockFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4950      	ldr	r1, [pc, #320]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	4a4e      	ldr	r2, [pc, #312]	; (8004dfc <HAL_RCC_OscConfig+0x278>)
 8004cc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cc4:	4b4e      	ldr	r3, [pc, #312]	; (8004e00 <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fd fc0b 	bl	80024e4 <HAL_InitTick>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d052      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	e327      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d032      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ce4:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a42      	ldr	r2, [pc, #264]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fdd2 	bl	8002898 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cf8:	f7fd fdce 	bl	8002898 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e310      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d16:	4b37      	ldr	r3, [pc, #220]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a36      	ldr	r2, [pc, #216]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	f043 0308 	orr.w	r3, r3, #8
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b34      	ldr	r3, [pc, #208]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4931      	ldr	r1, [pc, #196]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	492c      	ldr	r1, [pc, #176]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
 8004d48:	e01a      	b.n	8004d80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d4a:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d56:	f7fd fd9f 	bl	8002898 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d5e:	f7fd fd9b 	bl	8002898 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e2dd      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d70:	4b20      	ldr	r3, [pc, #128]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x1da>
 8004d7c:	e000      	b.n	8004d80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d074      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d005      	beq.n	8004d9e <HAL_RCC_OscConfig+0x21a>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d10e      	bne.n	8004db6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d10b      	bne.n	8004db6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d064      	beq.n	8004e74 <HAL_RCC_OscConfig+0x2f0>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d160      	bne.n	8004e74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e2ba      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x24a>
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a0b      	ldr	r2, [pc, #44]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e026      	b.n	8004e1c <HAL_RCC_OscConfig+0x298>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd6:	d115      	bne.n	8004e04 <HAL_RCC_OscConfig+0x280>
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a02      	ldr	r2, [pc, #8]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e014      	b.n	8004e1c <HAL_RCC_OscConfig+0x298>
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	0801042c 	.word	0x0801042c
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	20000008 	.word	0x20000008
 8004e04:	4ba0      	ldr	r3, [pc, #640]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a9f      	ldr	r2, [pc, #636]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4b9d      	ldr	r3, [pc, #628]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a9c      	ldr	r2, [pc, #624]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d013      	beq.n	8004e4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd fd38 	bl	8002898 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e2c:	f7fd fd34 	bl	8002898 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	; 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e276      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3e:	4b92      	ldr	r3, [pc, #584]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x2a8>
 8004e4a:	e014      	b.n	8004e76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fd24 	bl	8002898 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7fd fd20 	bl	8002898 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	; 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e262      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e66:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2d0>
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d060      	beq.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_OscConfig+0x310>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d119      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d116      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e94:	4b7c      	ldr	r3, [pc, #496]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_OscConfig+0x328>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e23f      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b76      	ldr	r3, [pc, #472]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	4973      	ldr	r1, [pc, #460]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec0:	e040      	b.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d023      	beq.n	8004f12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eca:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fd fcdf 	bl	8002898 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ede:	f7fd fcdb 	bl	8002898 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e21d      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef0:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b62      	ldr	r3, [pc, #392]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	495f      	ldr	r1, [pc, #380]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
 8004f10:	e018      	b.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f12:	4b5d      	ldr	r3, [pc, #372]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a5c      	ldr	r2, [pc, #368]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fd fcbb 	bl	8002898 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f26:	f7fd fcb7 	bl	8002898 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e1f9      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f38:	4b53      	ldr	r3, [pc, #332]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d03c      	beq.n	8004fca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01c      	beq.n	8004f92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f58:	4b4b      	ldr	r3, [pc, #300]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5e:	4a4a      	ldr	r2, [pc, #296]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fd fc96 	bl	8002898 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fd fc92 	bl	8002898 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1d4      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0ef      	beq.n	8004f70 <HAL_RCC_OscConfig+0x3ec>
 8004f90:	e01b      	b.n	8004fca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f92:	4b3d      	ldr	r3, [pc, #244]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f98:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fc79 	bl	8002898 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004faa:	f7fd fc75 	bl	8002898 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e1b7      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fbc:	4b32      	ldr	r3, [pc, #200]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ef      	bne.n	8004faa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80a6 	beq.w	8005124 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe8:	4b27      	ldr	r3, [pc, #156]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	4a26      	ldr	r2, [pc, #152]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff4:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005000:	2301      	movs	r3, #1
 8005002:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005004:	4b21      	ldr	r3, [pc, #132]	; (800508c <HAL_RCC_OscConfig+0x508>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d118      	bne.n	8005042 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005010:	4b1e      	ldr	r3, [pc, #120]	; (800508c <HAL_RCC_OscConfig+0x508>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <HAL_RCC_OscConfig+0x508>)
 8005016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501c:	f7fd fc3c 	bl	8002898 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005024:	f7fd fc38 	bl	8002898 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e17a      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <HAL_RCC_OscConfig+0x508>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d108      	bne.n	800505c <HAL_RCC_OscConfig+0x4d8>
 800504a:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800505a:	e029      	b.n	80050b0 <HAL_RCC_OscConfig+0x52c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d115      	bne.n	8005090 <HAL_RCC_OscConfig+0x50c>
 8005064:	4b08      	ldr	r3, [pc, #32]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 800506c:	f043 0304 	orr.w	r3, r3, #4
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	4a03      	ldr	r2, [pc, #12]	; (8005088 <HAL_RCC_OscConfig+0x504>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005084:	e014      	b.n	80050b0 <HAL_RCC_OscConfig+0x52c>
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000
 800508c:	40007000 	.word	0x40007000
 8005090:	4b9c      	ldr	r3, [pc, #624]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	4a9b      	ldr	r2, [pc, #620]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050a0:	4b98      	ldr	r3, [pc, #608]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	4a97      	ldr	r2, [pc, #604]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80050a8:	f023 0304 	bic.w	r3, r3, #4
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d016      	beq.n	80050e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fd fbee 	bl	8002898 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c0:	f7fd fbea 	bl	8002898 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e12a      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d6:	4b8b      	ldr	r3, [pc, #556]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ed      	beq.n	80050c0 <HAL_RCC_OscConfig+0x53c>
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fd fbd7 	bl	8002898 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fd fbd3 	bl	8002898 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e113      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005104:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ed      	bne.n	80050ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005112:	7ffb      	ldrb	r3, [r7, #31]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d105      	bne.n	8005124 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005118:	4b7a      	ldr	r3, [pc, #488]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	4a79      	ldr	r2, [pc, #484]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800511e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005122:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80fe 	beq.w	800532a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	2b02      	cmp	r3, #2
 8005134:	f040 80d0 	bne.w	80052d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005138:	4b72      	ldr	r3, [pc, #456]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d130      	bne.n	80051ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	3b01      	subs	r3, #1
 8005158:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d127      	bne.n	80051ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d11f      	bne.n	80051ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005178:	2a07      	cmp	r2, #7
 800517a:	bf14      	ite	ne
 800517c:	2201      	movne	r2, #1
 800517e:	2200      	moveq	r2, #0
 8005180:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	3b01      	subs	r3, #1
 8005194:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d109      	bne.n	80051ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	3b01      	subs	r3, #1
 80051a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d06e      	beq.n	800528c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	d069      	beq.n	8005288 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051b4:	4b53      	ldr	r3, [pc, #332]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051c0:	4b50      	ldr	r3, [pc, #320]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0ad      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051d0:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a4b      	ldr	r2, [pc, #300]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80051d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051dc:	f7fd fb5c 	bl	8002898 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd fb58 	bl	8002898 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e09a      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f6:	4b43      	ldr	r3, [pc, #268]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005202:	4b40      	ldr	r3, [pc, #256]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	4b40      	ldr	r3, [pc, #256]	; (8005308 <HAL_RCC_OscConfig+0x784>)
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005212:	3a01      	subs	r2, #1
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	4311      	orrs	r1, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800521c:	0212      	lsls	r2, r2, #8
 800521e:	4311      	orrs	r1, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005224:	0852      	lsrs	r2, r2, #1
 8005226:	3a01      	subs	r2, #1
 8005228:	0552      	lsls	r2, r2, #21
 800522a:	4311      	orrs	r1, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005230:	0852      	lsrs	r2, r2, #1
 8005232:	3a01      	subs	r2, #1
 8005234:	0652      	lsls	r2, r2, #25
 8005236:	4311      	orrs	r1, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800523c:	0912      	lsrs	r2, r2, #4
 800523e:	0452      	lsls	r2, r2, #17
 8005240:	430a      	orrs	r2, r1
 8005242:	4930      	ldr	r1, [pc, #192]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 8005244:	4313      	orrs	r3, r2
 8005246:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005248:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800524e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005252:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a2a      	ldr	r2, [pc, #168]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800525a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005260:	f7fd fb1a 	bl	8002898 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fd fb16 	bl	8002898 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e058      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005286:	e050      	b.n	800532a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e04f      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d148      	bne.n	800532a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a16      	ldr	r2, [pc, #88]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052b0:	f7fd faf2 	bl	8002898 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fd faee 	bl	8002898 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e030      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x734>
 80052d6:	e028      	b.n	800532a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d023      	beq.n	8005326 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a08      	ldr	r2, [pc, #32]	; (8005304 <HAL_RCC_OscConfig+0x780>)
 80052e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7fd fad5 	bl	8002898 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f0:	e00c      	b.n	800530c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fd fad1 	bl	8002898 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d905      	bls.n	800530c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e013      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
 8005304:	40021000 	.word	0x40021000
 8005308:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCC_OscConfig+0x7b0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ec      	bne.n	80052f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_RCC_OscConfig+0x7b0>)
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	4905      	ldr	r1, [pc, #20]	; (8005334 <HAL_RCC_OscConfig+0x7b0>)
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_OscConfig+0x7b4>)
 8005320:	4013      	ands	r3, r2
 8005322:	60cb      	str	r3, [r1, #12]
 8005324:	e001      	b.n	800532a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	feeefffc 	.word	0xfeeefffc

0800533c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0e7      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b75      	ldr	r3, [pc, #468]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d910      	bls.n	8005380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b72      	ldr	r3, [pc, #456]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 0207 	bic.w	r2, r3, #7
 8005366:	4970      	ldr	r1, [pc, #448]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b6e      	ldr	r3, [pc, #440]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0cf      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	4b66      	ldr	r3, [pc, #408]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005398:	429a      	cmp	r2, r3
 800539a:	d908      	bls.n	80053ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539c:	4b63      	ldr	r3, [pc, #396]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4960      	ldr	r1, [pc, #384]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04c      	beq.n	8005454 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c2:	4b5a      	ldr	r3, [pc, #360]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d121      	bne.n	8005412 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0a6      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053da:	4b54      	ldr	r3, [pc, #336]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d115      	bne.n	8005412 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e09a      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053f2:	4b4e      	ldr	r3, [pc, #312]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e08e      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005402:	4b4a      	ldr	r3, [pc, #296]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e086      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005412:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4943      	ldr	r1, [pc, #268]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005420:	4313      	orrs	r3, r2
 8005422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005424:	f7fd fa38 	bl	8002898 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	e00a      	b.n	8005442 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542c:	f7fd fa34 	bl	8002898 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e06e      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	4b3a      	ldr	r3, [pc, #232]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 020c 	and.w	r2, r3, #12
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	429a      	cmp	r2, r3
 8005452:	d1eb      	bne.n	800542c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d010      	beq.n	8005482 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	4b31      	ldr	r3, [pc, #196]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800546c:	429a      	cmp	r2, r3
 800546e:	d208      	bcs.n	8005482 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005470:	4b2e      	ldr	r3, [pc, #184]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	492b      	ldr	r1, [pc, #172]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005482:	4b29      	ldr	r3, [pc, #164]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d210      	bcs.n	80054b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f023 0207 	bic.w	r2, r3, #7
 8005498:	4923      	ldr	r1, [pc, #140]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <HAL_RCC_ClockConfig+0x1ec>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e036      	b.n	8005520 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054be:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4918      	ldr	r1, [pc, #96]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4910      	ldr	r1, [pc, #64]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f0:	f000 f824 	bl	800553c <HAL_RCC_GetSysClockFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <HAL_RCC_ClockConfig+0x1f0>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	490b      	ldr	r1, [pc, #44]	; (8005530 <HAL_RCC_ClockConfig+0x1f4>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_RCC_ClockConfig+0x1f8>)
 800550e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCC_ClockConfig+0x1fc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fc ffe5 	bl	80024e4 <HAL_InitTick>
 800551a:	4603      	mov	r3, r0
 800551c:	72fb      	strb	r3, [r7, #11]

  return status;
 800551e:	7afb      	ldrb	r3, [r7, #11]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40022000 	.word	0x40022000
 800552c:	40021000 	.word	0x40021000
 8005530:	0801042c 	.word	0x0801042c
 8005534:	20000004 	.word	0x20000004
 8005538:	20000008 	.word	0x20000008

0800553c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	; 0x24
 8005540:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554a:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005554:	4b3b      	ldr	r3, [pc, #236]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x34>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d121      	bne.n	80055ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d11e      	bne.n	80055ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005570:	4b34      	ldr	r3, [pc, #208]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d107      	bne.n	800558c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800557c:	4b31      	ldr	r3, [pc, #196]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e005      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800558c:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_RCC_GetSysClockFreq+0x10c>)
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ac:	e00a      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_RCC_GetSysClockFreq+0x110>)
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	e004      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d101      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c0:	4b23      	ldr	r3, [pc, #140]	; (8005650 <HAL_RCC_GetSysClockFreq+0x114>)
 80055c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d134      	bne.n	8005634 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ca:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d003      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d003      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0xac>
 80055e0:	e005      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055e2:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_RCC_GetSysClockFreq+0x110>)
 80055e4:	617b      	str	r3, [r7, #20]
      break;
 80055e6:	e005      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ea:	617b      	str	r3, [r7, #20]
      break;
 80055ec:	e002      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	617b      	str	r3, [r7, #20]
      break;
 80055f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	3301      	adds	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	fb03 f202 	mul.w	r2, r3, r2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_RCC_GetSysClockFreq+0x108>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	0e5b      	lsrs	r3, r3, #25
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	3301      	adds	r3, #1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005634:	69bb      	ldr	r3, [r7, #24]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3724      	adds	r7, #36	; 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	08010444 	.word	0x08010444
 800564c:	00f42400 	.word	0x00f42400
 8005650:	007a1200 	.word	0x007a1200

08005654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <HAL_RCC_GetHCLKFreq+0x14>)
 800565a:	681b      	ldr	r3, [r3, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000004 	.word	0x20000004

0800566c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005670:	f7ff fff0 	bl	8005654 <HAL_RCC_GetHCLKFreq>
 8005674:	4602      	mov	r2, r0
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	4904      	ldr	r1, [pc, #16]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005682:	5ccb      	ldrb	r3, [r1, r3]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40021000 	.word	0x40021000
 8005694:	0801043c 	.word	0x0801043c

08005698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800569c:	f7ff ffda 	bl	8005654 <HAL_RCC_GetHCLKFreq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0adb      	lsrs	r3, r3, #11
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4904      	ldr	r1, [pc, #16]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ae:	5ccb      	ldrb	r3, [r1, r3]
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0801043c 	.word	0x0801043c

080056c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	220f      	movs	r2, #15
 80056d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <HAL_RCC_GetClockConfig+0x5c>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0203 	and.w	r2, r3, #3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <HAL_RCC_GetClockConfig+0x5c>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <HAL_RCC_GetClockConfig+0x5c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_GetClockConfig+0x5c>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	08db      	lsrs	r3, r3, #3
 80056fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <HAL_RCC_GetClockConfig+0x60>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0207 	and.w	r2, r3, #7
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	601a      	str	r2, [r3, #0]
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	40022000 	.word	0x40022000

08005728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005740:	f7ff f9bc 	bl	8004abc <HAL_PWREx_GetVoltageRange>
 8005744:	6178      	str	r0, [r7, #20]
 8005746:	e014      	b.n	8005772 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005752:	6593      	str	r3, [r2, #88]	; 0x58
 8005754:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005760:	f7ff f9ac 	bl	8004abc <HAL_PWREx_GetVoltageRange>
 8005764:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800576c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005770:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d10b      	bne.n	8005792 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d919      	bls.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2ba0      	cmp	r3, #160	; 0xa0
 8005784:	d902      	bls.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005786:	2302      	movs	r3, #2
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e013      	b.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800578c:	2301      	movs	r3, #1
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e010      	b.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d902      	bls.n	800579e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005798:	2303      	movs	r3, #3
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	e00a      	b.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d102      	bne.n	80057aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057a4:	2302      	movs	r3, #2
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e004      	b.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b70      	cmp	r3, #112	; 0x70
 80057ae:	d101      	bne.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057b0:	2301      	movs	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f023 0207 	bic.w	r2, r3, #7
 80057bc:	4909      	ldr	r1, [pc, #36]	; (80057e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057c4:	4b07      	ldr	r3, [pc, #28]	; (80057e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d001      	beq.n	80057d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40022000 	.word	0x40022000

080057e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f0:	2300      	movs	r3, #0
 80057f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f4:	2300      	movs	r3, #0
 80057f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005800:	2b00      	cmp	r3, #0
 8005802:	d041      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005808:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800580c:	d02a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800580e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005812:	d824      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005814:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005818:	d008      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800581a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800581e:	d81e      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005828:	d010      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800582a:	e018      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800582c:	4b86      	ldr	r3, [pc, #536]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a85      	ldr	r2, [pc, #532]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005836:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005838:	e015      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fabb 	bl	8005dbc <RCCEx_PLLSAI1_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800584a:	e00c      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3320      	adds	r3, #32
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fba6 	bl	8005fa4 <RCCEx_PLLSAI2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800585c:	e003      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	74fb      	strb	r3, [r7, #19]
      break;
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005866:	7cfb      	ldrb	r3, [r7, #19]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800586c:	4b76      	ldr	r3, [pc, #472]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587a:	4973      	ldr	r1, [pc, #460]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005882:	e001      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	7cfb      	ldrb	r3, [r7, #19]
 8005886:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d041      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005898:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800589c:	d02a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800589e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058a2:	d824      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a8:	d008      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ae:	d81e      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b8:	d010      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058ba:	e018      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058bc:	4b62      	ldr	r3, [pc, #392]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a61      	ldr	r2, [pc, #388]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058c8:	e015      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fa73 	bl	8005dbc <RCCEx_PLLSAI1_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058da:	e00c      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3320      	adds	r3, #32
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fb5e 	bl	8005fa4 <RCCEx_PLLSAI2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	74fb      	strb	r3, [r7, #19]
      break;
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80058f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058fc:	4b52      	ldr	r3, [pc, #328]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800590a:	494f      	ldr	r1, [pc, #316]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005912:	e001      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80a0 	beq.w	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005926:	2300      	movs	r3, #0
 8005928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800592a:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00d      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005940:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	4a40      	ldr	r2, [pc, #256]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594a:	6593      	str	r3, [r2, #88]	; 0x58
 800594c:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005958:	2301      	movs	r3, #1
 800595a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595c:	4b3b      	ldr	r3, [pc, #236]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a3a      	ldr	r2, [pc, #232]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005968:	f7fc ff96 	bl	8002898 <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800596e:	e009      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005970:	f7fc ff92 	bl	8002898 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	74fb      	strb	r3, [r7, #19]
        break;
 8005982:	e005      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005984:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0ef      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d15c      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005996:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01f      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d019      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059b4:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d0:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059e0:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fc ff51 	bl	8002898 <HAL_GetTick>
 80059f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f8:	e00b      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fa:	f7fc ff4d 	bl	8002898 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d902      	bls.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8005a10:	e006      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ec      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a36:	4904      	ldr	r1, [pc, #16]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a3e:	e009      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a40:	7cfb      	ldrb	r3, [r7, #19]
 8005a42:	74bb      	strb	r3, [r7, #18]
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a54:	7c7b      	ldrb	r3, [r7, #17]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d105      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5a:	4b9e      	ldr	r3, [pc, #632]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5e:	4a9d      	ldr	r2, [pc, #628]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a72:	4b98      	ldr	r3, [pc, #608]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	f023 0203 	bic.w	r2, r3, #3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	4994      	ldr	r1, [pc, #592]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a94:	4b8f      	ldr	r3, [pc, #572]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 020c 	bic.w	r2, r3, #12
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	498c      	ldr	r1, [pc, #560]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ab6:	4b87      	ldr	r3, [pc, #540]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	4983      	ldr	r1, [pc, #524]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ad8:	4b7e      	ldr	r3, [pc, #504]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	497b      	ldr	r1, [pc, #492]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005afa:	4b76      	ldr	r3, [pc, #472]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	4972      	ldr	r1, [pc, #456]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b1c:	4b6d      	ldr	r3, [pc, #436]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	496a      	ldr	r1, [pc, #424]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b3e:	4b65      	ldr	r3, [pc, #404]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4c:	4961      	ldr	r1, [pc, #388]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b60:	4b5c      	ldr	r3, [pc, #368]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6e:	4959      	ldr	r1, [pc, #356]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b82:	4b54      	ldr	r3, [pc, #336]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b90:	4950      	ldr	r1, [pc, #320]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005baa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	4948      	ldr	r1, [pc, #288]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bc6:	4b43      	ldr	r3, [pc, #268]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd4:	493f      	ldr	r1, [pc, #252]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d028      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005be8:	4b3a      	ldr	r3, [pc, #232]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf6:	4937      	ldr	r1, [pc, #220]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c06:	d106      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c08:	4b32      	ldr	r3, [pc, #200]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a31      	ldr	r2, [pc, #196]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c12:	60d3      	str	r3, [r2, #12]
 8005c14:	e011      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c1e:	d10c      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	2101      	movs	r1, #1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f8c8 	bl	8005dbc <RCCEx_PLLSAI1_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d028      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c46:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	491f      	ldr	r1, [pc, #124]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c64:	d106      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c66:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c70:	60d3      	str	r3, [r2, #12]
 8005c72:	e011      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	2101      	movs	r1, #1
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f899 	bl	8005dbc <RCCEx_PLLSAI1_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c8e:	7cfb      	ldrb	r3, [r7, #19]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d02b      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	4908      	ldr	r1, [pc, #32]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc2:	d109      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4a02      	ldr	r2, [pc, #8]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cce:	60d3      	str	r3, [r2, #12]
 8005cd0:	e014      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005cd2:	bf00      	nop
 8005cd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f867 	bl	8005dbc <RCCEx_PLLSAI1_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cf2:	7cfb      	ldrb	r3, [r7, #19]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005cf8:	7cfb      	ldrb	r3, [r7, #19]
 8005cfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02f      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d08:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d16:	4928      	ldr	r1, [pc, #160]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	2102      	movs	r1, #2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f844 	bl	8005dbc <RCCEx_PLLSAI1_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d38:	7cfb      	ldrb	r3, [r7, #19]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d014      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d3e:	7cfb      	ldrb	r3, [r7, #19]
 8005d40:	74bb      	strb	r3, [r7, #18]
 8005d42:	e011      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3320      	adds	r3, #32
 8005d52:	2102      	movs	r1, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f925 	bl	8005fa4 <RCCEx_PLLSAI2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d5e:	7cfb      	ldrb	r3, [r7, #19]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d74:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d82:	490d      	ldr	r1, [pc, #52]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d96:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da6:	4904      	ldr	r1, [pc, #16]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005dae:	7cbb      	ldrb	r3, [r7, #18]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40021000 	.word	0x40021000

08005dbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dca:	4b75      	ldr	r3, [pc, #468]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d018      	beq.n	8005e08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005dd6:	4b72      	ldr	r3, [pc, #456]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0203 	and.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d10d      	bne.n	8005e02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
       ||
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005dee:	4b6c      	ldr	r3, [pc, #432]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	091b      	lsrs	r3, r3, #4
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d047      	beq.n	8005e92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
 8005e06:	e044      	b.n	8005e92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d018      	beq.n	8005e42 <RCCEx_PLLSAI1_Config+0x86>
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d825      	bhi.n	8005e60 <RCCEx_PLLSAI1_Config+0xa4>
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d002      	beq.n	8005e1e <RCCEx_PLLSAI1_Config+0x62>
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d009      	beq.n	8005e30 <RCCEx_PLLSAI1_Config+0x74>
 8005e1c:	e020      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e1e:	4b60      	ldr	r3, [pc, #384]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d11d      	bne.n	8005e66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e2e:	e01a      	b.n	8005e66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e30:	4b5b      	ldr	r3, [pc, #364]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d116      	bne.n	8005e6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e40:	e013      	b.n	8005e6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e42:	4b57      	ldr	r3, [pc, #348]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10f      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e4e:	4b54      	ldr	r3, [pc, #336]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e5e:	e006      	b.n	8005e6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
      break;
 8005e64:	e004      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e76:	4b4a      	ldr	r3, [pc, #296]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6819      	ldr	r1, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	4944      	ldr	r1, [pc, #272]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d17d      	bne.n	8005f94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e98:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a40      	ldr	r2, [pc, #256]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fc fcf8 	bl	8002898 <HAL_GetTick>
 8005ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005eaa:	e009      	b.n	8005ec0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eac:	f7fc fcf4 	bl	8002898 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d902      	bls.n	8005ec0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ebe:	e005      	b.n	8005ecc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ec0:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ef      	bne.n	8005eac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d160      	bne.n	8005f94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d111      	bne.n	8005efc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ed8:	4b31      	ldr	r3, [pc, #196]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6892      	ldr	r2, [r2, #8]
 8005ee8:	0211      	lsls	r1, r2, #8
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68d2      	ldr	r2, [r2, #12]
 8005eee:	0912      	lsrs	r2, r2, #4
 8005ef0:	0452      	lsls	r2, r2, #17
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	492a      	ldr	r1, [pc, #168]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	610b      	str	r3, [r1, #16]
 8005efa:	e027      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d112      	bne.n	8005f28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6892      	ldr	r2, [r2, #8]
 8005f12:	0211      	lsls	r1, r2, #8
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6912      	ldr	r2, [r2, #16]
 8005f18:	0852      	lsrs	r2, r2, #1
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	0552      	lsls	r2, r2, #21
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	491f      	ldr	r1, [pc, #124]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	610b      	str	r3, [r1, #16]
 8005f26:	e011      	b.n	8005f4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f28:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6892      	ldr	r2, [r2, #8]
 8005f38:	0211      	lsls	r1, r2, #8
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6952      	ldr	r2, [r2, #20]
 8005f3e:	0852      	lsrs	r2, r2, #1
 8005f40:	3a01      	subs	r2, #1
 8005f42:	0652      	lsls	r2, r2, #25
 8005f44:	430a      	orrs	r2, r1
 8005f46:	4916      	ldr	r1, [pc, #88]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f4c:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fc fc9e 	bl	8002898 <HAL_GetTick>
 8005f5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f5e:	e009      	b.n	8005f74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f60:	f7fc fc9a 	bl	8002898 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d902      	bls.n	8005f74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	73fb      	strb	r3, [r7, #15]
          break;
 8005f72:	e005      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0ef      	beq.n	8005f60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	4904      	ldr	r1, [pc, #16]	; (8005fa0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40021000 	.word	0x40021000

08005fa4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d018      	beq.n	8005ff0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005fbe:	4b67      	ldr	r3, [pc, #412]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0203 	and.w	r2, r3, #3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d10d      	bne.n	8005fea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
       ||
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005fd6:	4b61      	ldr	r3, [pc, #388]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
       ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d047      	beq.n	800607a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e044      	b.n	800607a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d018      	beq.n	800602a <RCCEx_PLLSAI2_Config+0x86>
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d825      	bhi.n	8006048 <RCCEx_PLLSAI2_Config+0xa4>
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d002      	beq.n	8006006 <RCCEx_PLLSAI2_Config+0x62>
 8006000:	2b02      	cmp	r3, #2
 8006002:	d009      	beq.n	8006018 <RCCEx_PLLSAI2_Config+0x74>
 8006004:	e020      	b.n	8006048 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006006:	4b55      	ldr	r3, [pc, #340]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11d      	bne.n	800604e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006016:	e01a      	b.n	800604e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006018:	4b50      	ldr	r3, [pc, #320]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006020:	2b00      	cmp	r3, #0
 8006022:	d116      	bne.n	8006052 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006028:	e013      	b.n	8006052 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800602a:	4b4c      	ldr	r3, [pc, #304]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006036:	4b49      	ldr	r3, [pc, #292]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006046:	e006      	b.n	8006056 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e004      	b.n	8006058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006056:	bf00      	nop
    }

    if(status == HAL_OK)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10d      	bne.n	800607a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800605e:	4b3f      	ldr	r3, [pc, #252]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	430b      	orrs	r3, r1
 8006074:	4939      	ldr	r1, [pc, #228]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d167      	bne.n	8006150 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a35      	ldr	r2, [pc, #212]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608c:	f7fc fc04 	bl	8002898 <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006092:	e009      	b.n	80060a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006094:	f7fc fc00 	bl	8002898 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d902      	bls.n	80060a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	73fb      	strb	r3, [r7, #15]
        break;
 80060a6:	e005      	b.n	80060b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060a8:	4b2c      	ldr	r3, [pc, #176]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ef      	bne.n	8006094 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d14a      	bne.n	8006150 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d111      	bne.n	80060e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060c0:	4b26      	ldr	r3, [pc, #152]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6892      	ldr	r2, [r2, #8]
 80060d0:	0211      	lsls	r1, r2, #8
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68d2      	ldr	r2, [r2, #12]
 80060d6:	0912      	lsrs	r2, r2, #4
 80060d8:	0452      	lsls	r2, r2, #17
 80060da:	430a      	orrs	r2, r1
 80060dc:	491f      	ldr	r1, [pc, #124]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	614b      	str	r3, [r1, #20]
 80060e2:	e011      	b.n	8006108 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6892      	ldr	r2, [r2, #8]
 80060f4:	0211      	lsls	r1, r2, #8
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6912      	ldr	r2, [r2, #16]
 80060fa:	0852      	lsrs	r2, r2, #1
 80060fc:	3a01      	subs	r2, #1
 80060fe:	0652      	lsls	r2, r2, #25
 8006100:	430a      	orrs	r2, r1
 8006102:	4916      	ldr	r1, [pc, #88]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006104:	4313      	orrs	r3, r2
 8006106:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006108:	4b14      	ldr	r3, [pc, #80]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fc fbc0 	bl	8002898 <HAL_GetTick>
 8006118:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800611a:	e009      	b.n	8006130 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800611c:	f7fc fbbc 	bl	8002898 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d902      	bls.n	8006130 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	73fb      	strb	r3, [r7, #15]
          break;
 800612e:	e005      	b.n	800613c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006130:	4b0a      	ldr	r3, [pc, #40]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0ef      	beq.n	800611c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	4904      	ldr	r1, [pc, #16]	; (800615c <RCCEx_PLLSAI2_Config+0x1b8>)
 800614c:	4313      	orrs	r3, r2
 800614e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000

08006160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e049      	b.n	8006206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fc f898 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f000 fd16 	bl	8006bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d001      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e04f      	b.n	80062c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006252:	d018      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1e      	ldr	r2, [pc, #120]	; (80062dc <HAL_TIM_Base_Start_IT+0xcc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIM_Base_Start_IT+0x76>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d115      	bne.n	80062b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	4b17      	ldr	r3, [pc, #92]	; (80062ec <HAL_TIM_Base_Start_IT+0xdc>)
 800628e:	4013      	ands	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b06      	cmp	r3, #6
 8006296:	d015      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0xb4>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629e:	d011      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	e008      	b.n	80062c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e000      	b.n	80062c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40013400 	.word	0x40013400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	00010007 	.word	0x00010007

080062f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e049      	b.n	8006396 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f841 	bl	800639e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f000 fc4e 	bl	8006bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start+0x24>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e03c      	b.n	8006452 <HAL_TIM_PWM_Start+0x9e>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d109      	bne.n	80063f2 <HAL_TIM_PWM_Start+0x3e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e02f      	b.n	8006452 <HAL_TIM_PWM_Start+0x9e>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start+0x58>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e022      	b.n	8006452 <HAL_TIM_PWM_Start+0x9e>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d109      	bne.n	8006426 <HAL_TIM_PWM_Start+0x72>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	e015      	b.n	8006452 <HAL_TIM_PWM_Start+0x9e>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b10      	cmp	r3, #16
 800642a:	d109      	bne.n	8006440 <HAL_TIM_PWM_Start+0x8c>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e008      	b.n	8006452 <HAL_TIM_PWM_Start+0x9e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e09c      	b.n	8006594 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start+0xb6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006468:	e023      	b.n	80064b2 <HAL_TIM_PWM_Start+0xfe>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b04      	cmp	r3, #4
 800646e:	d104      	bne.n	800647a <HAL_TIM_PWM_Start+0xc6>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006478:	e01b      	b.n	80064b2 <HAL_TIM_PWM_Start+0xfe>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d104      	bne.n	800648a <HAL_TIM_PWM_Start+0xd6>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006488:	e013      	b.n	80064b2 <HAL_TIM_PWM_Start+0xfe>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b0c      	cmp	r3, #12
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Start+0xe6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006498:	e00b      	b.n	80064b2 <HAL_TIM_PWM_Start+0xfe>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b10      	cmp	r3, #16
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start+0xf6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a8:	e003      	b.n	80064b2 <HAL_TIM_PWM_Start+0xfe>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2201      	movs	r2, #1
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 ff92 	bl	80073e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a35      	ldr	r2, [pc, #212]	; (800659c <HAL_TIM_PWM_Start+0x1e8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x13e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a34      	ldr	r2, [pc, #208]	; (80065a0 <HAL_TIM_PWM_Start+0x1ec>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x13e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a32      	ldr	r2, [pc, #200]	; (80065a4 <HAL_TIM_PWM_Start+0x1f0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x13e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a31      	ldr	r2, [pc, #196]	; (80065a8 <HAL_TIM_PWM_Start+0x1f4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x13e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_TIM_PWM_Start+0x1f8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <HAL_TIM_PWM_Start+0x142>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <HAL_TIM_PWM_Start+0x144>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <HAL_TIM_PWM_Start+0x1e8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01d      	beq.n	8006552 <HAL_TIM_PWM_Start+0x19e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651e:	d018      	beq.n	8006552 <HAL_TIM_PWM_Start+0x19e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <HAL_TIM_PWM_Start+0x1fc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_TIM_PWM_Start+0x19e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <HAL_TIM_PWM_Start+0x200>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_TIM_PWM_Start+0x19e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_TIM_PWM_Start+0x204>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_TIM_PWM_Start+0x19e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <HAL_TIM_PWM_Start+0x1ec>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_TIM_PWM_Start+0x19e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <HAL_TIM_PWM_Start+0x1f0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d115      	bne.n	800657e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	4b18      	ldr	r3, [pc, #96]	; (80065bc <HAL_TIM_PWM_Start+0x208>)
 800655a:	4013      	ands	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b06      	cmp	r3, #6
 8006562:	d015      	beq.n	8006590 <HAL_TIM_PWM_Start+0x1dc>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656a:	d011      	beq.n	8006590 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	e008      	b.n	8006590 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e000      	b.n	8006592 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40013400 	.word	0x40013400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400
 80065ac:	40014800 	.word	0x40014800
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	00010007 	.word	0x00010007

080065c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0202 	mvn.w	r2, #2
 80065f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fac1 	bl	8006b92 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fab3 	bl	8006b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fac4 	bl	8006ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0204 	mvn.w	r2, #4
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa9b 	bl	8006b92 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa8d 	bl	8006b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fa9e 	bl	8006ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d020      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0208 	mvn.w	r2, #8
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa75 	bl	8006b92 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa67 	bl	8006b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa78 	bl	8006ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0210 	mvn.w	r2, #16
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa4f 	bl	8006b92 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa41 	bl	8006b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa52 	bl	8006ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0201 	mvn.w	r2, #1
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fb fcc0 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 ff02 	bl	8007554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fefa 	bl	8007568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa11 	bl	8006bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0220 	mvn.w	r2, #32
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fec2 	bl	8007540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067de:	2302      	movs	r3, #2
 80067e0:	e0ff      	b.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b14      	cmp	r3, #20
 80067ee:	f200 80f0 	bhi.w	80069d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080069d3 	.word	0x080069d3
 8006800:	080069d3 	.word	0x080069d3
 8006804:	080069d3 	.word	0x080069d3
 8006808:	0800688d 	.word	0x0800688d
 800680c:	080069d3 	.word	0x080069d3
 8006810:	080069d3 	.word	0x080069d3
 8006814:	080069d3 	.word	0x080069d3
 8006818:	080068cf 	.word	0x080068cf
 800681c:	080069d3 	.word	0x080069d3
 8006820:	080069d3 	.word	0x080069d3
 8006824:	080069d3 	.word	0x080069d3
 8006828:	0800690f 	.word	0x0800690f
 800682c:	080069d3 	.word	0x080069d3
 8006830:	080069d3 	.word	0x080069d3
 8006834:	080069d3 	.word	0x080069d3
 8006838:	08006951 	.word	0x08006951
 800683c:	080069d3 	.word	0x080069d3
 8006840:	080069d3 	.word	0x080069d3
 8006844:	080069d3 	.word	0x080069d3
 8006848:	08006991 	.word	0x08006991
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fa56 	bl	8006d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0204 	bic.w	r2, r2, #4
 8006876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6999      	ldr	r1, [r3, #24]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	619a      	str	r2, [r3, #24]
      break;
 800688a:	e0a5      	b.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fac6 	bl	8006e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6999      	ldr	r1, [r3, #24]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	619a      	str	r2, [r3, #24]
      break;
 80068cc:	e084      	b.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fb2f 	bl	8006f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0208 	orr.w	r2, r2, #8
 80068e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0204 	bic.w	r2, r2, #4
 80068f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69d9      	ldr	r1, [r3, #28]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	61da      	str	r2, [r3, #28]
      break;
 800690c:	e064      	b.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fb97 	bl	8007048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69d9      	ldr	r1, [r3, #28]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	021a      	lsls	r2, r3, #8
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	61da      	str	r2, [r3, #28]
      break;
 800694e:	e043      	b.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fbe0 	bl	800711c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0208 	orr.w	r2, r2, #8
 800696a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0204 	bic.w	r2, r2, #4
 800697a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800698e:	e023      	b.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fc24 	bl	80071e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	021a      	lsls	r2, r3, #8
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069d0:	e002      	b.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
      break;
 80069d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop

080069ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIM_ConfigClockSource+0x1c>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e0b6      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x18a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a44:	d03e      	beq.n	8006ac4 <HAL_TIM_ConfigClockSource+0xd8>
 8006a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4a:	f200 8087 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a52:	f000 8086 	beq.w	8006b62 <HAL_TIM_ConfigClockSource+0x176>
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	d87f      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a5c:	2b70      	cmp	r3, #112	; 0x70
 8006a5e:	d01a      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0xaa>
 8006a60:	2b70      	cmp	r3, #112	; 0x70
 8006a62:	d87b      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d050      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x11e>
 8006a68:	2b60      	cmp	r3, #96	; 0x60
 8006a6a:	d877      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a6c:	2b50      	cmp	r3, #80	; 0x50
 8006a6e:	d03c      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0xfe>
 8006a70:	2b50      	cmp	r3, #80	; 0x50
 8006a72:	d873      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d058      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x13e>
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d86f      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a7c:	2b30      	cmp	r3, #48	; 0x30
 8006a7e:	d064      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x15e>
 8006a80:	2b30      	cmp	r3, #48	; 0x30
 8006a82:	d86b      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d060      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x15e>
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d867      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05c      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x15e>
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d05a      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x15e>
 8006a94:	e062      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	f000 fc7d 	bl	80073a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	609a      	str	r2, [r3, #8]
      break;
 8006ac2:	e04f      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	f000 fc66 	bl	80073a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ae6:	609a      	str	r2, [r3, #8]
      break;
 8006ae8:	e03c      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af6:	461a      	mov	r2, r3
 8006af8:	f000 fbda 	bl	80072b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2150      	movs	r1, #80	; 0x50
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fc33 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b08:	e02c      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b16:	461a      	mov	r2, r3
 8006b18:	f000 fbf9 	bl	800730e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2160      	movs	r1, #96	; 0x60
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fc23 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b28:	e01c      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b36:	461a      	mov	r2, r3
 8006b38:	f000 fbba 	bl	80072b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2140      	movs	r1, #64	; 0x40
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fc13 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b48:	e00c      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f000 fc0a 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b5a:	e003      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b60:	e000      	b.n	8006b64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a40      	ldr	r2, [pc, #256]	; (8006ce4 <TIM_Base_SetConfig+0x114>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d013      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bee:	d00f      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a3d      	ldr	r2, [pc, #244]	; (8006ce8 <TIM_Base_SetConfig+0x118>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3c      	ldr	r2, [pc, #240]	; (8006cec <TIM_Base_SetConfig+0x11c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3b      	ldr	r2, [pc, #236]	; (8006cf0 <TIM_Base_SetConfig+0x120>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3a      	ldr	r2, [pc, #232]	; (8006cf4 <TIM_Base_SetConfig+0x124>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d108      	bne.n	8006c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a2f      	ldr	r2, [pc, #188]	; (8006ce4 <TIM_Base_SetConfig+0x114>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01f      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c30:	d01b      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <TIM_Base_SetConfig+0x118>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d017      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2b      	ldr	r2, [pc, #172]	; (8006cec <TIM_Base_SetConfig+0x11c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <TIM_Base_SetConfig+0x120>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00f      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a29      	ldr	r2, [pc, #164]	; (8006cf4 <TIM_Base_SetConfig+0x124>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <TIM_Base_SetConfig+0x128>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d007      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a27      	ldr	r2, [pc, #156]	; (8006cfc <TIM_Base_SetConfig+0x12c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_Base_SetConfig+0x9a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <TIM_Base_SetConfig+0x130>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d108      	bne.n	8006c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a10      	ldr	r2, [pc, #64]	; (8006ce4 <TIM_Base_SetConfig+0x114>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_Base_SetConfig+0xf8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <TIM_Base_SetConfig+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_Base_SetConfig+0xf8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <TIM_Base_SetConfig+0x128>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_Base_SetConfig+0xf8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a10      	ldr	r2, [pc, #64]	; (8006cfc <TIM_Base_SetConfig+0x12c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0xf8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0f      	ldr	r2, [pc, #60]	; (8006d00 <TIM_Base_SetConfig+0x130>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d103      	bne.n	8006cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	615a      	str	r2, [r3, #20]
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800

08006d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	f023 0201 	bic.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 0302 	bic.w	r3, r3, #2
 8006d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a2c      	ldr	r2, [pc, #176]	; (8006e10 <TIM_OC1_SetConfig+0x10c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_OC1_SetConfig+0x80>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <TIM_OC1_SetConfig+0x110>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC1_SetConfig+0x80>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <TIM_OC1_SetConfig+0x114>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC1_SetConfig+0x80>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a29      	ldr	r2, [pc, #164]	; (8006e1c <TIM_OC1_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC1_SetConfig+0x80>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a28      	ldr	r2, [pc, #160]	; (8006e20 <TIM_OC1_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10c      	bne.n	8006d9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0308 	bic.w	r3, r3, #8
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <TIM_OC1_SetConfig+0x10c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00f      	beq.n	8006dc6 <TIM_OC1_SetConfig+0xc2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1a      	ldr	r2, [pc, #104]	; (8006e14 <TIM_OC1_SetConfig+0x110>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00b      	beq.n	8006dc6 <TIM_OC1_SetConfig+0xc2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a19      	ldr	r2, [pc, #100]	; (8006e18 <TIM_OC1_SetConfig+0x114>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d007      	beq.n	8006dc6 <TIM_OC1_SetConfig+0xc2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <TIM_OC1_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_OC1_SetConfig+0xc2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <TIM_OC1_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d111      	bne.n	8006dea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40013400 	.word	0x40013400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800

08006e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f023 0210 	bic.w	r2, r3, #16
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f023 0320 	bic.w	r3, r3, #32
 8006e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <TIM_OC2_SetConfig+0x100>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_OC2_SetConfig+0x6c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <TIM_OC2_SetConfig+0x104>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d10d      	bne.n	8006eac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <TIM_OC2_SetConfig+0x100>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00f      	beq.n	8006ed4 <TIM_OC2_SetConfig+0xb0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <TIM_OC2_SetConfig+0x104>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <TIM_OC2_SetConfig+0xb0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <TIM_OC2_SetConfig+0x108>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d007      	beq.n	8006ed4 <TIM_OC2_SetConfig+0xb0>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1a      	ldr	r2, [pc, #104]	; (8006f30 <TIM_OC2_SetConfig+0x10c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_OC2_SetConfig+0xb0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <TIM_OC2_SetConfig+0x110>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d113      	bne.n	8006efc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40013400 	.word	0x40013400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800

08006f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a27      	ldr	r2, [pc, #156]	; (8007034 <TIM_OC3_SetConfig+0xfc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC3_SetConfig+0x6a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a26      	ldr	r2, [pc, #152]	; (8007038 <TIM_OC3_SetConfig+0x100>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10d      	bne.n	8006fbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <TIM_OC3_SetConfig+0xfc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <TIM_OC3_SetConfig+0xae>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	; (8007038 <TIM_OC3_SetConfig+0x100>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <TIM_OC3_SetConfig+0xae>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a1a      	ldr	r2, [pc, #104]	; (800703c <TIM_OC3_SetConfig+0x104>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_OC3_SetConfig+0xae>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a19      	ldr	r2, [pc, #100]	; (8007040 <TIM_OC3_SetConfig+0x108>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_OC3_SetConfig+0xae>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a18      	ldr	r2, [pc, #96]	; (8007044 <TIM_OC3_SetConfig+0x10c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d113      	bne.n	800700e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	621a      	str	r2, [r3, #32]
}
 8007028:	bf00      	nop
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800

08007048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	031b      	lsls	r3, r3, #12
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a18      	ldr	r2, [pc, #96]	; (8007108 <TIM_OC4_SetConfig+0xc0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00f      	beq.n	80070cc <TIM_OC4_SetConfig+0x84>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a17      	ldr	r2, [pc, #92]	; (800710c <TIM_OC4_SetConfig+0xc4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00b      	beq.n	80070cc <TIM_OC4_SetConfig+0x84>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <TIM_OC4_SetConfig+0xc8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d007      	beq.n	80070cc <TIM_OC4_SetConfig+0x84>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a15      	ldr	r2, [pc, #84]	; (8007114 <TIM_OC4_SetConfig+0xcc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_OC4_SetConfig+0x84>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a14      	ldr	r2, [pc, #80]	; (8007118 <TIM_OC4_SetConfig+0xd0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d109      	bne.n	80070e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	019b      	lsls	r3, r3, #6
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40013400 	.word	0x40013400
 8007110:	40014000 	.word	0x40014000
 8007114:	40014400 	.word	0x40014400
 8007118:	40014800 	.word	0x40014800

0800711c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <TIM_OC5_SetConfig+0xb4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <TIM_OC5_SetConfig+0xb8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <TIM_OC5_SetConfig+0xbc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a14      	ldr	r2, [pc, #80]	; (80071dc <TIM_OC5_SetConfig+0xc0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <TIM_OC5_SetConfig+0xc4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d109      	bne.n	80071aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	621a      	str	r2, [r3, #32]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800

080071e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800722a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	051b      	lsls	r3, r3, #20
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a18      	ldr	r2, [pc, #96]	; (800729c <TIM_OC6_SetConfig+0xb8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00f      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <TIM_OC6_SetConfig+0xbc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00b      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <TIM_OC6_SetConfig+0xc0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <TIM_OC6_SetConfig+0xc4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a14      	ldr	r2, [pc, #80]	; (80072ac <TIM_OC6_SetConfig+0xc8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d109      	bne.n	8007274 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800

080072b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f023 030a 	bic.w	r3, r3, #10
 80072ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730e:	b480      	push	{r7}
 8007310:	b087      	sub	sp, #28
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f023 0210 	bic.w	r2, r3, #16
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	031b      	lsls	r3, r3, #12
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4313      	orrs	r3, r2
 8007342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800734a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	f043 0307 	orr.w	r3, r3, #7
 8007390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	021a      	lsls	r2, r3, #8
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	609a      	str	r2, [r3, #8]
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	2201      	movs	r2, #1
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	43db      	mvns	r3, r3
 8007406:	401a      	ands	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	fa01 f303 	lsl.w	r3, r1, r3
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007444:	2302      	movs	r3, #2
 8007446:	e068      	b.n	800751a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a2e      	ldr	r2, [pc, #184]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2d      	ldr	r2, [pc, #180]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d108      	bne.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01d      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ba:	d018      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00e      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a18      	ldr	r2, [pc, #96]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d009      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a13      	ldr	r2, [pc, #76]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a14      	ldr	r2, [pc, #80]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d10c      	bne.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40014000 	.word	0x40014000

08007540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e040      	b.n	8007610 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fa fef6 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2224      	movs	r2, #36	; 0x24
 80075a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0201 	bic.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 feca 	bl	800835c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc0f 	bl	8007dec <UART_SetConfig>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e01b      	b.n	8007610 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 ff49 	bl	80084a0 <UART_CheckIdleState>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	; 0x28
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800762c:	2b20      	cmp	r3, #32
 800762e:	d178      	bne.n	8007722 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_UART_Transmit+0x24>
 8007636:	88fb      	ldrh	r3, [r7, #6]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e071      	b.n	8007724 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2221      	movs	r2, #33	; 0x21
 800764c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800764e:	f7fb f923 	bl	8002898 <HAL_GetTick>
 8007652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766c:	d108      	bne.n	8007680 <HAL_UART_Transmit+0x68>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e003      	b.n	8007688 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007688:	e030      	b.n	80076ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	2180      	movs	r1, #128	; 0x80
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 ffab 	bl	80085f0 <UART_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e03c      	b.n	8007724 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	881a      	ldrh	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076bc:	b292      	uxth	r2, r2
 80076be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	3302      	adds	r3, #2
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	e008      	b.n	80076da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	781a      	ldrb	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	b292      	uxth	r2, r2
 80076d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1c8      	bne.n	800768a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2200      	movs	r2, #0
 8007700:	2140      	movs	r1, #64	; 0x40
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 ff74 	bl	80085f0 <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e005      	b.n	8007724 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e000      	b.n	8007724 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007722:	2302      	movs	r3, #2
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	; 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	4613      	mov	r3, r2
 8007738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007740:	2b20      	cmp	r3, #32
 8007742:	d137      	bne.n	80077b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_UART_Receive_IT+0x24>
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e030      	b.n	80077b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_UART_Receive_IT+0x94>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d01f      	beq.n	80077a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d018      	beq.n	80077a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	613b      	str	r3, [r7, #16]
   return(result);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	623b      	str	r3, [r7, #32]
 8007792:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	69f9      	ldr	r1, [r7, #28]
 8007796:	6a3a      	ldr	r2, [r7, #32]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	61bb      	str	r3, [r7, #24]
   return(result);
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	461a      	mov	r2, r3
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 ff88 	bl	80086c0 <UART_Start_Receive_IT>
 80077b0:	4603      	mov	r3, r0
 80077b2:	e000      	b.n	80077b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3728      	adds	r7, #40	; 0x28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40008000 	.word	0x40008000

080077c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b0ba      	sub	sp, #232	; 0xe8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80077f2:	4013      	ands	r3, r2
 80077f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d115      	bne.n	800782c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d009      	beq.n	800782c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 82ae 	beq.w	8007d7e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
      }
      return;
 800782a:	e2a8      	b.n	8007d7e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800782c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8117 	beq.w	8007a64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007842:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007846:	4b85      	ldr	r3, [pc, #532]	; (8007a5c <HAL_UART_IRQHandler+0x298>)
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 810a 	beq.w	8007a64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d011      	beq.n	8007880 <HAL_UART_IRQHandler+0xbc>
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2201      	movs	r2, #1
 800786e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f043 0201 	orr.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d011      	beq.n	80078b0 <HAL_UART_IRQHandler+0xec>
 800788c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2202      	movs	r2, #2
 800789e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a6:	f043 0204 	orr.w	r2, r3, #4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d011      	beq.n	80078e0 <HAL_UART_IRQHandler+0x11c>
 80078bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2204      	movs	r2, #4
 80078ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d6:	f043 0202 	orr.w	r2, r3, #2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d105      	bne.n	8007904 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2208      	movs	r2, #8
 800790a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007912:	f043 0208 	orr.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007924:	2b00      	cmp	r3, #0
 8007926:	d012      	beq.n	800794e <HAL_UART_IRQHandler+0x18a>
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00c      	beq.n	800794e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800793c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007944:	f043 0220 	orr.w	r2, r3, #32
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8214 	beq.w	8007d82 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d005      	beq.n	80079a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800799a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800799e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d04f      	beq.n	8007a46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 ff50 	bl	800884c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d141      	bne.n	8007a3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1d9      	bne.n	80079ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d013      	beq.n	8007a36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a12:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <HAL_UART_IRQHandler+0x29c>)
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fc f830 	bl	8003a80 <HAL_DMA_Abort_IT>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d017      	beq.n	8007a56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	e00f      	b.n	8007a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9c2 	bl	8007dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	e00b      	b.n	8007a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9be 	bl	8007dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e007      	b.n	8007a56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9ba 	bl	8007dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007a54:	e195      	b.n	8007d82 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a56:	bf00      	nop
    return;
 8007a58:	e193      	b.n	8007d82 <HAL_UART_IRQHandler+0x5be>
 8007a5a:	bf00      	nop
 8007a5c:	04000120 	.word	0x04000120
 8007a60:	08008915 	.word	0x08008915

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 814e 	bne.w	8007d0a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8147 	beq.w	8007d0a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8140 	beq.w	8007d0a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2210      	movs	r2, #16
 8007a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	f040 80b8 	bne.w	8007c12 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8167 	beq.w	8007d86 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	f080 815f 	bcs.w	8007d86 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 8086 	bne.w	8007bf0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1da      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e1      	bne.n	8007b2e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e3      	bne.n	8007b6a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e4      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fb ff0a 	bl	8003a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f8e2 	bl	8007dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c10:	e0b9      	b.n	8007d86 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 80ab 	beq.w	8007d8a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80a6 	beq.w	8007d8a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c60:	647b      	str	r3, [r7, #68]	; 0x44
 8007c62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e4      	bne.n	8007c3e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	623b      	str	r3, [r7, #32]
   return(result);
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c98:	633a      	str	r2, [r7, #48]	; 0x30
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e3      	bne.n	8007c74 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f023 0310 	bic.w	r3, r3, #16
 8007cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e4      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f866 	bl	8007dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d08:	e03f      	b.n	8007d8a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00e      	beq.n	8007d34 <HAL_UART_IRQHandler+0x570>
 8007d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 ffed 	bl	8008d0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d32:	e02d      	b.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00e      	beq.n	8007d5e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01c      	beq.n	8007d8e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
    }
    return;
 8007d5c:	e017      	b.n	8007d8e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d012      	beq.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
 8007d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00c      	beq.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fde2 	bl	8008940 <UART_EndTransmit_IT>
    return;
 8007d7c:	e008      	b.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d7e:	bf00      	nop
 8007d80:	e006      	b.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007d82:	bf00      	nop
 8007d84:	e004      	b.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d86:	bf00      	nop
 8007d88:	e002      	b.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d8a:	bf00      	nop
 8007d8c:	e000      	b.n	8007d90 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007d8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d90:	37e8      	adds	r7, #232	; 0xe8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop

08007d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df0:	b08a      	sub	sp, #40	; 0x28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4ba4      	ldr	r3, [pc, #656]	; (80080ac <UART_SetConfig+0x2c0>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a99      	ldr	r2, [pc, #612]	; (80080b0 <UART_SetConfig+0x2c4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e54:	4313      	orrs	r3, r2
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a90      	ldr	r2, [pc, #576]	; (80080b4 <UART_SetConfig+0x2c8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d126      	bne.n	8007ec4 <UART_SetConfig+0xd8>
 8007e76:	4b90      	ldr	r3, [pc, #576]	; (80080b8 <UART_SetConfig+0x2cc>)
 8007e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d81b      	bhi.n	8007ebc <UART_SetConfig+0xd0>
 8007e84:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0xa0>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007e9d 	.word	0x08007e9d
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007eb5 	.word	0x08007eb5
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ea2:	e116      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eaa:	e112      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007eac:	2304      	movs	r3, #4
 8007eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eb2:	e10e      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eba:	e10a      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec2:	e106      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a7c      	ldr	r2, [pc, #496]	; (80080bc <UART_SetConfig+0x2d0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d138      	bne.n	8007f40 <UART_SetConfig+0x154>
 8007ece:	4b7a      	ldr	r3, [pc, #488]	; (80080b8 <UART_SetConfig+0x2cc>)
 8007ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed4:	f003 030c 	and.w	r3, r3, #12
 8007ed8:	2b0c      	cmp	r3, #12
 8007eda:	d82d      	bhi.n	8007f38 <UART_SetConfig+0x14c>
 8007edc:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <UART_SetConfig+0xf8>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007f19 	.word	0x08007f19
 8007ee8:	08007f39 	.word	0x08007f39
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f29 	.word	0x08007f29
 8007ef8:	08007f39 	.word	0x08007f39
 8007efc:	08007f39 	.word	0x08007f39
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f21 	.word	0x08007f21
 8007f08:	08007f39 	.word	0x08007f39
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f31 	.word	0x08007f31
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f1e:	e0d8      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f20:	2302      	movs	r3, #2
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f26:	e0d4      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f2e:	e0d0      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f30:	2308      	movs	r3, #8
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f36:	e0cc      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f3e:	e0c8      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5e      	ldr	r2, [pc, #376]	; (80080c0 <UART_SetConfig+0x2d4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d125      	bne.n	8007f96 <UART_SetConfig+0x1aa>
 8007f4a:	4b5b      	ldr	r3, [pc, #364]	; (80080b8 <UART_SetConfig+0x2cc>)
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f54:	2b30      	cmp	r3, #48	; 0x30
 8007f56:	d016      	beq.n	8007f86 <UART_SetConfig+0x19a>
 8007f58:	2b30      	cmp	r3, #48	; 0x30
 8007f5a:	d818      	bhi.n	8007f8e <UART_SetConfig+0x1a2>
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d00a      	beq.n	8007f76 <UART_SetConfig+0x18a>
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d814      	bhi.n	8007f8e <UART_SetConfig+0x1a2>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <UART_SetConfig+0x182>
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d008      	beq.n	8007f7e <UART_SetConfig+0x192>
 8007f6c:	e00f      	b.n	8007f8e <UART_SetConfig+0x1a2>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f74:	e0ad      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f76:	2302      	movs	r3, #2
 8007f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7c:	e0a9      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f7e:	2304      	movs	r3, #4
 8007f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f84:	e0a5      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f86:	2308      	movs	r3, #8
 8007f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8c:	e0a1      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f8e:	2310      	movs	r3, #16
 8007f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f94:	e09d      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a4a      	ldr	r2, [pc, #296]	; (80080c4 <UART_SetConfig+0x2d8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d125      	bne.n	8007fec <UART_SetConfig+0x200>
 8007fa0:	4b45      	ldr	r3, [pc, #276]	; (80080b8 <UART_SetConfig+0x2cc>)
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007faa:	2bc0      	cmp	r3, #192	; 0xc0
 8007fac:	d016      	beq.n	8007fdc <UART_SetConfig+0x1f0>
 8007fae:	2bc0      	cmp	r3, #192	; 0xc0
 8007fb0:	d818      	bhi.n	8007fe4 <UART_SetConfig+0x1f8>
 8007fb2:	2b80      	cmp	r3, #128	; 0x80
 8007fb4:	d00a      	beq.n	8007fcc <UART_SetConfig+0x1e0>
 8007fb6:	2b80      	cmp	r3, #128	; 0x80
 8007fb8:	d814      	bhi.n	8007fe4 <UART_SetConfig+0x1f8>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <UART_SetConfig+0x1d8>
 8007fbe:	2b40      	cmp	r3, #64	; 0x40
 8007fc0:	d008      	beq.n	8007fd4 <UART_SetConfig+0x1e8>
 8007fc2:	e00f      	b.n	8007fe4 <UART_SetConfig+0x1f8>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fca:	e082      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd2:	e07e      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007fd4:	2304      	movs	r3, #4
 8007fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fda:	e07a      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007fdc:	2308      	movs	r3, #8
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe2:	e076      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fea:	e072      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a35      	ldr	r2, [pc, #212]	; (80080c8 <UART_SetConfig+0x2dc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d12a      	bne.n	800804c <UART_SetConfig+0x260>
 8007ff6:	4b30      	ldr	r3, [pc, #192]	; (80080b8 <UART_SetConfig+0x2cc>)
 8007ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008004:	d01a      	beq.n	800803c <UART_SetConfig+0x250>
 8008006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800800a:	d81b      	bhi.n	8008044 <UART_SetConfig+0x258>
 800800c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008010:	d00c      	beq.n	800802c <UART_SetConfig+0x240>
 8008012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008016:	d815      	bhi.n	8008044 <UART_SetConfig+0x258>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <UART_SetConfig+0x238>
 800801c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008020:	d008      	beq.n	8008034 <UART_SetConfig+0x248>
 8008022:	e00f      	b.n	8008044 <UART_SetConfig+0x258>
 8008024:	2300      	movs	r3, #0
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802a:	e052      	b.n	80080d2 <UART_SetConfig+0x2e6>
 800802c:	2302      	movs	r3, #2
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e04e      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8008034:	2304      	movs	r3, #4
 8008036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800803a:	e04a      	b.n	80080d2 <UART_SetConfig+0x2e6>
 800803c:	2308      	movs	r3, #8
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008042:	e046      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8008044:	2310      	movs	r3, #16
 8008046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800804a:	e042      	b.n	80080d2 <UART_SetConfig+0x2e6>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <UART_SetConfig+0x2c4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d13a      	bne.n	80080cc <UART_SetConfig+0x2e0>
 8008056:	4b18      	ldr	r3, [pc, #96]	; (80080b8 <UART_SetConfig+0x2cc>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008064:	d01a      	beq.n	800809c <UART_SetConfig+0x2b0>
 8008066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800806a:	d81b      	bhi.n	80080a4 <UART_SetConfig+0x2b8>
 800806c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008070:	d00c      	beq.n	800808c <UART_SetConfig+0x2a0>
 8008072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008076:	d815      	bhi.n	80080a4 <UART_SetConfig+0x2b8>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <UART_SetConfig+0x298>
 800807c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008080:	d008      	beq.n	8008094 <UART_SetConfig+0x2a8>
 8008082:	e00f      	b.n	80080a4 <UART_SetConfig+0x2b8>
 8008084:	2300      	movs	r3, #0
 8008086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808a:	e022      	b.n	80080d2 <UART_SetConfig+0x2e6>
 800808c:	2302      	movs	r3, #2
 800808e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008092:	e01e      	b.n	80080d2 <UART_SetConfig+0x2e6>
 8008094:	2304      	movs	r3, #4
 8008096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800809a:	e01a      	b.n	80080d2 <UART_SetConfig+0x2e6>
 800809c:	2308      	movs	r3, #8
 800809e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080a2:	e016      	b.n	80080d2 <UART_SetConfig+0x2e6>
 80080a4:	2310      	movs	r3, #16
 80080a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080aa:	e012      	b.n	80080d2 <UART_SetConfig+0x2e6>
 80080ac:	efff69f3 	.word	0xefff69f3
 80080b0:	40008000 	.word	0x40008000
 80080b4:	40013800 	.word	0x40013800
 80080b8:	40021000 	.word	0x40021000
 80080bc:	40004400 	.word	0x40004400
 80080c0:	40004800 	.word	0x40004800
 80080c4:	40004c00 	.word	0x40004c00
 80080c8:	40005000 	.word	0x40005000
 80080cc:	2310      	movs	r3, #16
 80080ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a9f      	ldr	r2, [pc, #636]	; (8008354 <UART_SetConfig+0x568>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d17a      	bne.n	80081d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d824      	bhi.n	800812e <UART_SetConfig+0x342>
 80080e4:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x300>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	08008111 	.word	0x08008111
 80080f0:	0800812f 	.word	0x0800812f
 80080f4:	08008119 	.word	0x08008119
 80080f8:	0800812f 	.word	0x0800812f
 80080fc:	0800811f 	.word	0x0800811f
 8008100:	0800812f 	.word	0x0800812f
 8008104:	0800812f 	.word	0x0800812f
 8008108:	0800812f 	.word	0x0800812f
 800810c:	08008127 	.word	0x08008127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008110:	f7fd faac 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8008114:	61f8      	str	r0, [r7, #28]
        break;
 8008116:	e010      	b.n	800813a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008118:	4b8f      	ldr	r3, [pc, #572]	; (8008358 <UART_SetConfig+0x56c>)
 800811a:	61fb      	str	r3, [r7, #28]
        break;
 800811c:	e00d      	b.n	800813a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811e:	f7fd fa0d 	bl	800553c <HAL_RCC_GetSysClockFreq>
 8008122:	61f8      	str	r0, [r7, #28]
        break;
 8008124:	e009      	b.n	800813a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	61fb      	str	r3, [r7, #28]
        break;
 800812c:	e005      	b.n	800813a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80fb 	beq.w	8008338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	429a      	cmp	r2, r3
 8008150:	d305      	bcc.n	800815e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	429a      	cmp	r2, r3
 800815c:	d903      	bls.n	8008166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008164:	e0e8      	b.n	8008338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	2200      	movs	r2, #0
 800816a:	461c      	mov	r4, r3
 800816c:	4615      	mov	r5, r2
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	022b      	lsls	r3, r5, #8
 8008178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800817c:	0222      	lsls	r2, r4, #8
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	6849      	ldr	r1, [r1, #4]
 8008182:	0849      	lsrs	r1, r1, #1
 8008184:	2000      	movs	r0, #0
 8008186:	4688      	mov	r8, r1
 8008188:	4681      	mov	r9, r0
 800818a:	eb12 0a08 	adds.w	sl, r2, r8
 800818e:	eb43 0b09 	adc.w	fp, r3, r9
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a0:	4650      	mov	r0, sl
 80081a2:	4659      	mov	r1, fp
 80081a4:	f7f8 fd70 	bl	8000c88 <__aeabi_uldivmod>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4613      	mov	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b6:	d308      	bcc.n	80081ca <UART_SetConfig+0x3de>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081be:	d204      	bcs.n	80081ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	60da      	str	r2, [r3, #12]
 80081c8:	e0b6      	b.n	8008338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081d0:	e0b2      	b.n	8008338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081da:	d15e      	bne.n	800829a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80081dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d828      	bhi.n	8008236 <UART_SetConfig+0x44a>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <UART_SetConfig+0x400>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	08008211 	.word	0x08008211
 80081f0:	08008219 	.word	0x08008219
 80081f4:	08008221 	.word	0x08008221
 80081f8:	08008237 	.word	0x08008237
 80081fc:	08008227 	.word	0x08008227
 8008200:	08008237 	.word	0x08008237
 8008204:	08008237 	.word	0x08008237
 8008208:	08008237 	.word	0x08008237
 800820c:	0800822f 	.word	0x0800822f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008210:	f7fd fa2c 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 8008214:	61f8      	str	r0, [r7, #28]
        break;
 8008216:	e014      	b.n	8008242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008218:	f7fd fa3e 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 800821c:	61f8      	str	r0, [r7, #28]
        break;
 800821e:	e010      	b.n	8008242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008220:	4b4d      	ldr	r3, [pc, #308]	; (8008358 <UART_SetConfig+0x56c>)
 8008222:	61fb      	str	r3, [r7, #28]
        break;
 8008224:	e00d      	b.n	8008242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008226:	f7fd f989 	bl	800553c <HAL_RCC_GetSysClockFreq>
 800822a:	61f8      	str	r0, [r7, #28]
        break;
 800822c:	e009      	b.n	8008242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800822e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008232:	61fb      	str	r3, [r7, #28]
        break;
 8008234:	e005      	b.n	8008242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d077      	beq.n	8008338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	005a      	lsls	r2, r3, #1
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	441a      	add	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b0f      	cmp	r3, #15
 8008262:	d916      	bls.n	8008292 <UART_SetConfig+0x4a6>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826a:	d212      	bcs.n	8008292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	b29b      	uxth	r3, r3
 8008270:	f023 030f 	bic.w	r3, r3, #15
 8008274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	085b      	lsrs	r3, r3, #1
 800827a:	b29b      	uxth	r3, r3
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	b29a      	uxth	r2, r3
 8008282:	8afb      	ldrh	r3, [r7, #22]
 8008284:	4313      	orrs	r3, r2
 8008286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	8afa      	ldrh	r2, [r7, #22]
 800828e:	60da      	str	r2, [r3, #12]
 8008290:	e052      	b.n	8008338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008298:	e04e      	b.n	8008338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800829a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d827      	bhi.n	80082f2 <UART_SetConfig+0x506>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <UART_SetConfig+0x4bc>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	080082f3 	.word	0x080082f3
 80082b8:	080082e3 	.word	0x080082e3
 80082bc:	080082f3 	.word	0x080082f3
 80082c0:	080082f3 	.word	0x080082f3
 80082c4:	080082f3 	.word	0x080082f3
 80082c8:	080082eb 	.word	0x080082eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082cc:	f7fd f9ce 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 80082d0:	61f8      	str	r0, [r7, #28]
        break;
 80082d2:	e014      	b.n	80082fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082d4:	f7fd f9e0 	bl	8005698 <HAL_RCC_GetPCLK2Freq>
 80082d8:	61f8      	str	r0, [r7, #28]
        break;
 80082da:	e010      	b.n	80082fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082dc:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <UART_SetConfig+0x56c>)
 80082de:	61fb      	str	r3, [r7, #28]
        break;
 80082e0:	e00d      	b.n	80082fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082e2:	f7fd f92b 	bl	800553c <HAL_RCC_GetSysClockFreq>
 80082e6:	61f8      	str	r0, [r7, #28]
        break;
 80082e8:	e009      	b.n	80082fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ee:	61fb      	str	r3, [r7, #28]
        break;
 80082f0:	e005      	b.n	80082fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80082fc:	bf00      	nop
    }

    if (pclk != 0U)
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d019      	beq.n	8008338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	085a      	lsrs	r2, r3, #1
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	441a      	add	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b0f      	cmp	r3, #15
 800831c:	d909      	bls.n	8008332 <UART_SetConfig+0x546>
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008324:	d205      	bcs.n	8008332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60da      	str	r2, [r3, #12]
 8008330:	e002      	b.n	8008338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008344:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008348:	4618      	mov	r0, r3
 800834a:	3728      	adds	r7, #40	; 0x28
 800834c:	46bd      	mov	sp, r7
 800834e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008352:	bf00      	nop
 8008354:	40008000 	.word	0x40008000
 8008358:	00f42400 	.word	0x00f42400

0800835c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01a      	beq.n	8008472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800845a:	d10a      	bne.n	8008472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	605a      	str	r2, [r3, #4]
  }
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b098      	sub	sp, #96	; 0x60
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b0:	f7fa f9f2 	bl	8002898 <HAL_GetTick>
 80084b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d12e      	bne.n	8008522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084cc:	2200      	movs	r2, #0
 80084ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f88c 	bl	80085f0 <UART_WaitOnFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d021      	beq.n	8008522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084f2:	653b      	str	r3, [r7, #80]	; 0x50
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fc:	647b      	str	r3, [r7, #68]	; 0x44
 80084fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800850a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e6      	bne.n	80084de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e062      	b.n	80085e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b04      	cmp	r3, #4
 800852e:	d149      	bne.n	80085c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008538:	2200      	movs	r2, #0
 800853a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f856 	bl	80085f0 <UART_WaitOnFlagUntilTimeout>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d03c      	beq.n	80085c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	623b      	str	r3, [r7, #32]
   return(result);
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800855e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008568:	633b      	str	r3, [r7, #48]	; 0x30
 800856a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e6      	bne.n	800854a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	60fb      	str	r3, [r7, #12]
   return(result);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0301 	bic.w	r3, r3, #1
 8008592:	64bb      	str	r3, [r7, #72]	; 0x48
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3308      	adds	r3, #8
 800859a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800859c:	61fa      	str	r2, [r7, #28]
 800859e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	617b      	str	r3, [r7, #20]
   return(result);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e5      	bne.n	800857c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e011      	b.n	80085e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3758      	adds	r7, #88	; 0x58
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	4613      	mov	r3, r2
 80085fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008600:	e049      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008608:	d045      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800860a:	f7fa f945 	bl	8002898 <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	429a      	cmp	r2, r3
 8008618:	d302      	bcc.n	8008620 <UART_WaitOnFlagUntilTimeout+0x30>
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e048      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d031      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b08      	cmp	r3, #8
 800863e:	d110      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2208      	movs	r2, #8
 8008646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f8ff 	bl	800884c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2208      	movs	r2, #8
 8008652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e029      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800866c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008670:	d111      	bne.n	8008696 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800867a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f8e5 	bl	800884c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e00f      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d0a6      	beq.n	8008602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b097      	sub	sp, #92	; 0x5c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	88fa      	ldrh	r2, [r7, #6]
 80086e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f2:	d10e      	bne.n	8008712 <UART_Start_Receive_IT+0x52>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d105      	bne.n	8008708 <UART_Start_Receive_IT+0x48>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008706:	e02d      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	22ff      	movs	r2, #255	; 0xff
 800870c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008710:	e028      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10d      	bne.n	8008736 <UART_Start_Receive_IT+0x76>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d104      	bne.n	800872c <UART_Start_Receive_IT+0x6c>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	22ff      	movs	r2, #255	; 0xff
 8008726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800872a:	e01b      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	227f      	movs	r2, #127	; 0x7f
 8008730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008734:	e016      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800873e:	d10d      	bne.n	800875c <UART_Start_Receive_IT+0x9c>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d104      	bne.n	8008752 <UART_Start_Receive_IT+0x92>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	227f      	movs	r2, #127	; 0x7f
 800874c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008750:	e008      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	223f      	movs	r2, #63	; 0x3f
 8008756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800875a:	e003      	b.n	8008764 <UART_Start_Receive_IT+0xa4>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2222      	movs	r2, #34	; 0x22
 8008770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	657b      	str	r3, [r7, #84]	; 0x54
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3308      	adds	r3, #8
 8008792:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008794:	64ba      	str	r2, [r7, #72]	; 0x48
 8008796:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800879a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b0:	d107      	bne.n	80087c2 <UART_Start_Receive_IT+0x102>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d103      	bne.n	80087c2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4a21      	ldr	r2, [pc, #132]	; (8008844 <UART_Start_Receive_IT+0x184>)
 80087be:	669a      	str	r2, [r3, #104]	; 0x68
 80087c0:	e002      	b.n	80087c8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4a20      	ldr	r2, [pc, #128]	; (8008848 <UART_Start_Receive_IT+0x188>)
 80087c6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d019      	beq.n	8008804 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80087e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
 80087f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e6      	bne.n	80087d0 <UART_Start_Receive_IT+0x110>
 8008802:	e018      	b.n	8008836 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	613b      	str	r3, [r7, #16]
   return(result);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f043 0320 	orr.w	r3, r3, #32
 8008818:	653b      	str	r3, [r7, #80]	; 0x50
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008822:	623b      	str	r3, [r7, #32]
 8008824:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	69f9      	ldr	r1, [r7, #28]
 8008828:	6a3a      	ldr	r2, [r7, #32]
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e6      	bne.n	8008804 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	375c      	adds	r7, #92	; 0x5c
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	08008b51 	.word	0x08008b51
 8008848:	08008995 	.word	0x08008995

0800884c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b095      	sub	sp, #84	; 0x54
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008872:	643b      	str	r3, [r7, #64]	; 0x40
 8008874:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800887a:	e841 2300 	strex	r3, r2, [r1]
 800887e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1e6      	bne.n	8008854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3308      	adds	r3, #8
 800888c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	61fb      	str	r3, [r7, #28]
   return(result);
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f023 0301 	bic.w	r3, r3, #1
 800889c:	64bb      	str	r3, [r7, #72]	; 0x48
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e5      	bne.n	8008886 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d118      	bne.n	80088f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f023 0310 	bic.w	r3, r3, #16
 80088d6:	647b      	str	r3, [r7, #68]	; 0x44
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6979      	ldr	r1, [r7, #20]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	613b      	str	r3, [r7, #16]
   return(result);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e6      	bne.n	80088c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008908:	bf00      	nop
 800890a:	3754      	adds	r7, #84	; 0x54
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f7ff fa44 	bl	8007dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	60bb      	str	r3, [r7, #8]
   return(result);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800895c:	61fb      	str	r3, [r7, #28]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	61bb      	str	r3, [r7, #24]
 8008968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6979      	ldr	r1, [r7, #20]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	613b      	str	r3, [r7, #16]
   return(result);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e6      	bne.n	8008948 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fa06 	bl	8007d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800898c:	bf00      	nop
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b09c      	sub	sp, #112	; 0x70
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ac:	2b22      	cmp	r3, #34	; 0x22
 80089ae:	f040 80be 	bne.w	8008b2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80089c0:	b2d9      	uxtb	r1, r3
 80089c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	400a      	ands	r2, r1
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f040 80a3 	bne.w	8008b42 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e6      	bne.n	80089fc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a40:	f023 0301 	bic.w	r3, r3, #1
 8008a44:	667b      	str	r3, [r7, #100]	; 0x64
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e5      	bne.n	8008a2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a34      	ldr	r2, [pc, #208]	; (8008b4c <UART_RxISR_8BIT+0x1b8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d01f      	beq.n	8008ac0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d018      	beq.n	8008ac0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aac:	633b      	str	r3, [r7, #48]	; 0x30
 8008aae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e6      	bne.n	8008a8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d12e      	bne.n	8008b26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	69b9      	ldr	r1, [r7, #24]
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	617b      	str	r3, [r7, #20]
   return(result);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e6      	bne.n	8008ace <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d103      	bne.n	8008b16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2210      	movs	r2, #16
 8008b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7ff f958 	bl	8007dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b24:	e00d      	b.n	8008b42 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff f940 	bl	8007dac <HAL_UART_RxCpltCallback>
}
 8008b2c:	e009      	b.n	8008b42 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	8b1b      	ldrh	r3, [r3, #24]
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0208 	orr.w	r2, r2, #8
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	831a      	strh	r2, [r3, #24]
}
 8008b42:	bf00      	nop
 8008b44:	3770      	adds	r7, #112	; 0x70
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40008000 	.word	0x40008000

08008b50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b09c      	sub	sp, #112	; 0x70
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b68:	2b22      	cmp	r3, #34	; 0x22
 8008b6a:	f040 80be 	bne.w	8008cea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008b82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b86:	4013      	ands	r3, r2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b92:	1c9a      	adds	r2, r3, #2
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f040 80a3 	bne.w	8008cfe <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8008bd8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e6      	bne.n	8008bb8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	f023 0301 	bic.w	r3, r3, #1
 8008c00:	663b      	str	r3, [r7, #96]	; 0x60
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c0a:	643a      	str	r2, [r7, #64]	; 0x40
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e5      	bne.n	8008bea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a34      	ldr	r2, [pc, #208]	; (8008d08 <UART_RxISR_16BIT+0x1b8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d01f      	beq.n	8008c7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d018      	beq.n	8008c7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c6a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e6      	bne.n	8008c4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d12e      	bne.n	8008ce2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f023 0310 	bic.w	r3, r3, #16
 8008c9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d103      	bne.n	8008cd2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2210      	movs	r2, #16
 8008cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff f87a 	bl	8007dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ce0:	e00d      	b.n	8008cfe <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff f862 	bl	8007dac <HAL_UART_RxCpltCallback>
}
 8008ce8:	e009      	b.n	8008cfe <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	8b1b      	ldrh	r3, [r3, #24]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0208 	orr.w	r2, r2, #8
 8008cfa:	b292      	uxth	r2, r2
 8008cfc:	831a      	strh	r2, [r3, #24]
}
 8008cfe:	bf00      	nop
 8008d00:	3770      	adds	r7, #112	; 0x70
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	40008000 	.word	0x40008000

08008d0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <__NVIC_SetPriority>:
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	6039      	str	r1, [r7, #0]
 8008d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	db0a      	blt.n	8008d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	490c      	ldr	r1, [pc, #48]	; (8008d6c <__NVIC_SetPriority+0x4c>)
 8008d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3e:	0112      	lsls	r2, r2, #4
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	440b      	add	r3, r1
 8008d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d48:	e00a      	b.n	8008d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	4908      	ldr	r1, [pc, #32]	; (8008d70 <__NVIC_SetPriority+0x50>)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	3b04      	subs	r3, #4
 8008d58:	0112      	lsls	r2, r2, #4
 8008d5a:	b2d2      	uxtb	r2, r2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	761a      	strb	r2, [r3, #24]
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	e000e100 	.word	0xe000e100
 8008d70:	e000ed00 	.word	0xe000ed00

08008d74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <SysTick_Handler+0x1c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008d7c:	f001 fd28 	bl	800a7d0 <xTaskGetSchedulerState>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d001      	beq.n	8008d8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d86:	f002 fb0f 	bl	800b3a8 <xPortSysTickHandler>
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	e000e010 	.word	0xe000e010

08008d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d98:	2100      	movs	r1, #0
 8008d9a:	f06f 0004 	mvn.w	r0, #4
 8008d9e:	f7ff ffbf 	bl	8008d20 <__NVIC_SetPriority>
#endif
}
 8008da2:	bf00      	nop
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	603b      	str	r3, [r7, #0]
  return(result);
 8008db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008dba:	f06f 0305 	mvn.w	r3, #5
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	e00c      	b.n	8008ddc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <osKernelInitialize+0x44>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <osKernelInitialize+0x44>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	607b      	str	r3, [r7, #4]
 8008dd4:	e002      	b.n	8008ddc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ddc:	687b      	ldr	r3, [r7, #4]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	200005a0 	.word	0x200005a0

08008df0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008df6:	f3ef 8305 	mrs	r3, IPSR
 8008dfa:	603b      	str	r3, [r7, #0]
  return(result);
 8008dfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e02:	f06f 0305 	mvn.w	r3, #5
 8008e06:	607b      	str	r3, [r7, #4]
 8008e08:	e010      	b.n	8008e2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e0a:	4b0b      	ldr	r3, [pc, #44]	; (8008e38 <osKernelStart+0x48>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d109      	bne.n	8008e26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e12:	f7ff ffbf 	bl	8008d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <osKernelStart+0x48>)
 8008e18:	2202      	movs	r2, #2
 8008e1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e1c:	f001 f87c 	bl	8009f18 <vTaskStartScheduler>
      stat = osOK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	607b      	str	r3, [r7, #4]
 8008e24:	e002      	b.n	8008e2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e2c:	687b      	ldr	r3, [r7, #4]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	200005a0 	.word	0x200005a0

08008e3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08e      	sub	sp, #56	; 0x38
 8008e40:	af04      	add	r7, sp, #16
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e4c:	f3ef 8305 	mrs	r3, IPSR
 8008e50:	617b      	str	r3, [r7, #20]
  return(result);
 8008e52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d17e      	bne.n	8008f56 <osThreadNew+0x11a>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d07b      	beq.n	8008f56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e5e:	2380      	movs	r3, #128	; 0x80
 8008e60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e62:	2318      	movs	r3, #24
 8008e64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d045      	beq.n	8008f02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <osThreadNew+0x48>
        name = attr->name;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <osThreadNew+0x6e>
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b38      	cmp	r3, #56	; 0x38
 8008e9c:	d805      	bhi.n	8008eaa <osThreadNew+0x6e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <osThreadNew+0x72>
        return (NULL);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e054      	b.n	8008f58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	089b      	lsrs	r3, r3, #2
 8008ebc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00e      	beq.n	8008ee4 <osThreadNew+0xa8>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	2ba7      	cmp	r3, #167	; 0xa7
 8008ecc:	d90a      	bls.n	8008ee4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d006      	beq.n	8008ee4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <osThreadNew+0xa8>
        mem = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	e010      	b.n	8008f06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10c      	bne.n	8008f06 <osThreadNew+0xca>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d108      	bne.n	8008f06 <osThreadNew+0xca>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d104      	bne.n	8008f06 <osThreadNew+0xca>
          mem = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61bb      	str	r3, [r7, #24]
 8008f00:	e001      	b.n	8008f06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d110      	bne.n	8008f2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 fe0c 	bl	8009b40 <xTaskCreateStatic>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e013      	b.n	8008f56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	f107 0310 	add.w	r3, r7, #16
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fe57 	bl	8009bfa <xTaskCreate>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d001      	beq.n	8008f56 <osThreadNew+0x11a>
            hTask = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f56:	693b      	ldr	r3, [r7, #16]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3728      	adds	r7, #40	; 0x28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f68:	f3ef 8305 	mrs	r3, IPSR
 8008f6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <osDelay+0x1c>
    stat = osErrorISR;
 8008f74:	f06f 0305 	mvn.w	r3, #5
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e007      	b.n	8008f8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 ff92 	bl	8009eb0 <vTaskDelay>
    }
  }

  return (stat);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4a07      	ldr	r2, [pc, #28]	; (8008fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4a06      	ldr	r2, [pc, #24]	; (8008fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8008fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2280      	movs	r2, #128	; 0x80
 8008fb4:	601a      	str	r2, [r3, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	200005a4 	.word	0x200005a4
 8008fc8:	2000064c 	.word	0x2000064c

08008fcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a07      	ldr	r2, [pc, #28]	; (8008ff8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008fdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4a06      	ldr	r2, [pc, #24]	; (8008ffc <vApplicationGetTimerTaskMemory+0x30>)
 8008fe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fea:	601a      	str	r2, [r3, #0]
}
 8008fec:	bf00      	nop
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	2000084c 	.word	0x2000084c
 8008ffc:	200008f4 	.word	0x200008f4

08009000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f103 0208 	add.w	r2, r3, #8
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f103 0208 	add.w	r2, r3, #8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f103 0208 	add.w	r2, r3, #8
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090a2:	b480      	push	{r7}
 80090a4:	b085      	sub	sp, #20
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b8:	d103      	bne.n	80090c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e00c      	b.n	80090dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3308      	adds	r3, #8
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e002      	b.n	80090d0 <vListInsert+0x2e>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d2f6      	bcs.n	80090ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	601a      	str	r2, [r3, #0]
}
 8009108:	bf00      	nop
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6892      	ldr	r2, [r2, #8]
 800912a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6852      	ldr	r2, [r2, #4]
 8009134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d103      	bne.n	8009148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	1e5a      	subs	r2, r3, #1
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009192:	f002 f877 	bl	800b284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	441a      	add	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c2:	3b01      	subs	r3, #1
 80091c4:	68f9      	ldr	r1, [r7, #12]
 80091c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	441a      	add	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	22ff      	movs	r2, #255	; 0xff
 80091d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	22ff      	movs	r2, #255	; 0xff
 80091de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d114      	bne.n	8009212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01a      	beq.n	8009226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3310      	adds	r3, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	f001 f929 	bl	800a44c <xTaskRemoveFromEventList>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d012      	beq.n	8009226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009200:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <xQueueGenericReset+0xcc>)
 8009202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	e009      	b.n	8009226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3310      	adds	r3, #16
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff fef2 	bl	8009000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3324      	adds	r3, #36	; 0x24
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff feed 	bl	8009000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009226:	f002 f85d 	bl	800b2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800922a:	2301      	movs	r3, #1
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	e000ed04 	.word	0xe000ed04

08009238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	; 0x38
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <xQueueGenericCreateStatic+0x52>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <xQueueGenericCreateStatic+0x56>
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <xQueueGenericCreateStatic+0x58>
 800928e:	2300      	movs	r3, #0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	623b      	str	r3, [r7, #32]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <xQueueGenericCreateStatic+0x7e>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <xQueueGenericCreateStatic+0x82>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <xQueueGenericCreateStatic+0x84>
 80092ba:	2300      	movs	r3, #0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	61fb      	str	r3, [r7, #28]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092d6:	2350      	movs	r3, #80	; 0x50
 80092d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b50      	cmp	r3, #80	; 0x50
 80092de:	d00a      	beq.n	80092f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	61bb      	str	r3, [r7, #24]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800930a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	4613      	mov	r3, r2
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f805 	bl	8009328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009320:	4618      	mov	r0, r3
 8009322:	3730      	adds	r7, #48	; 0x30
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e002      	b.n	800934a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009356:	2101      	movs	r1, #1
 8009358:	69b8      	ldr	r0, [r7, #24]
 800935a:	f7ff ff05 	bl	8009168 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08e      	sub	sp, #56	; 0x38
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800937e:	2300      	movs	r3, #0
 8009380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10a      	bne.n	80093a2 <xQueueGenericSend+0x32>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <xQueueGenericSend+0x40>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <xQueueGenericSend+0x44>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <xQueueGenericSend+0x46>
 80093b4:	2300      	movs	r3, #0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <xQueueGenericSend+0x60>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d103      	bne.n	80093de <xQueueGenericSend+0x6e>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <xQueueGenericSend+0x72>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueGenericSend+0x74>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <xQueueGenericSend+0x8e>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	623b      	str	r3, [r7, #32]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093fe:	f001 f9e7 	bl	800a7d0 <xTaskGetSchedulerState>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <xQueueGenericSend+0x9e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <xQueueGenericSend+0xa2>
 800940e:	2301      	movs	r3, #1
 8009410:	e000      	b.n	8009414 <xQueueGenericSend+0xa4>
 8009412:	2300      	movs	r3, #0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <xQueueGenericSend+0xbe>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	61fb      	str	r3, [r7, #28]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800942e:	f001 ff29 	bl	800b284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943a:	429a      	cmp	r2, r3
 800943c:	d302      	bcc.n	8009444 <xQueueGenericSend+0xd4>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d129      	bne.n	8009498 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800944a:	f000 fa0b 	bl	8009864 <prvCopyDataToQueue>
 800944e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d010      	beq.n	800947a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	3324      	adds	r3, #36	; 0x24
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fff5 	bl	800a44c <xTaskRemoveFromEventList>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d013      	beq.n	8009490 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009468:	4b3f      	ldr	r3, [pc, #252]	; (8009568 <xQueueGenericSend+0x1f8>)
 800946a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	e00a      	b.n	8009490 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d007      	beq.n	8009490 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009480:	4b39      	ldr	r3, [pc, #228]	; (8009568 <xQueueGenericSend+0x1f8>)
 8009482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009490:	f001 ff28 	bl	800b2e4 <vPortExitCritical>
				return pdPASS;
 8009494:	2301      	movs	r3, #1
 8009496:	e063      	b.n	8009560 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d103      	bne.n	80094a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800949e:	f001 ff21 	bl	800b2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e05c      	b.n	8009560 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094ac:	f107 0314 	add.w	r3, r7, #20
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 f82f 	bl	800a514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094b6:	2301      	movs	r3, #1
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094ba:	f001 ff13 	bl	800b2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094be:	f000 fd9b 	bl	8009ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094c2:	f001 fedf 	bl	800b284 <vPortEnterCritical>
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094cc:	b25b      	sxtb	r3, r3
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094d2:	d103      	bne.n	80094dc <xQueueGenericSend+0x16c>
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094e2:	b25b      	sxtb	r3, r3
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e8:	d103      	bne.n	80094f2 <xQueueGenericSend+0x182>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094f2:	f001 fef7 	bl	800b2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094f6:	1d3a      	adds	r2, r7, #4
 80094f8:	f107 0314 	add.w	r3, r7, #20
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 f81e 	bl	800a540 <xTaskCheckForTimeOut>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d124      	bne.n	8009554 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800950a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800950c:	f000 faa2 	bl	8009a54 <prvIsQueueFull>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d018      	beq.n	8009548 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	3310      	adds	r3, #16
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f000 ff44 	bl	800a3ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009526:	f000 fa2d 	bl	8009984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800952a:	f000 fd73 	bl	800a014 <xTaskResumeAll>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f47f af7c 	bne.w	800942e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <xQueueGenericSend+0x1f8>)
 8009538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	e772      	b.n	800942e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954a:	f000 fa1b 	bl	8009984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800954e:	f000 fd61 	bl	800a014 <xTaskResumeAll>
 8009552:	e76c      	b.n	800942e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009556:	f000 fa15 	bl	8009984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800955a:	f000 fd5b 	bl	800a014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800955e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009560:	4618      	mov	r0, r3
 8009562:	3738      	adds	r7, #56	; 0x38
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b090      	sub	sp, #64	; 0x40
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d103      	bne.n	80095a8 <xQueueGenericSendFromISR+0x3c>
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <xQueueGenericSendFromISR+0x40>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e000      	b.n	80095ae <xQueueGenericSendFromISR+0x42>
 80095ac:	2300      	movs	r3, #0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095c4:	bf00      	nop
 80095c6:	e7fe      	b.n	80095c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d103      	bne.n	80095d6 <xQueueGenericSendFromISR+0x6a>
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <xQueueGenericSendFromISR+0x6e>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e000      	b.n	80095dc <xQueueGenericSendFromISR+0x70>
 80095da:	2300      	movs	r3, #0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	623b      	str	r3, [r7, #32]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095f6:	f001 ff27 	bl	800b448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095fa:	f3ef 8211 	mrs	r2, BASEPRI
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	61fa      	str	r2, [r7, #28]
 8009610:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009612:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961e:	429a      	cmp	r2, r3
 8009620:	d302      	bcc.n	8009628 <xQueueGenericSendFromISR+0xbc>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d12f      	bne.n	8009688 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800963e:	f000 f911 	bl	8009864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009642:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800964a:	d112      	bne.n	8009672 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	d016      	beq.n	8009682 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	3324      	adds	r3, #36	; 0x24
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fef7 	bl	800a44c <xTaskRemoveFromEventList>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00b      	beq.n	8009682 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e007      	b.n	8009682 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009676:	3301      	adds	r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	b25a      	sxtb	r2, r3
 800967c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009682:	2301      	movs	r3, #1
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009686:	e001      	b.n	800968c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009688:	2300      	movs	r3, #0
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009696:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800969a:	4618      	mov	r0, r3
 800969c:	3740      	adds	r7, #64	; 0x40
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08c      	sub	sp, #48	; 0x30
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096b0:	2300      	movs	r3, #0
 80096b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <xQueueReceive+0x30>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	623b      	str	r3, [r7, #32]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d103      	bne.n	80096e2 <xQueueReceive+0x3e>
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <xQueueReceive+0x42>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <xQueueReceive+0x44>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <xQueueReceive+0x5e>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	61fb      	str	r3, [r7, #28]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009702:	f001 f865 	bl	800a7d0 <xTaskGetSchedulerState>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d102      	bne.n	8009712 <xQueueReceive+0x6e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <xQueueReceive+0x72>
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <xQueueReceive+0x74>
 8009716:	2300      	movs	r3, #0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <xQueueReceive+0x8e>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	61bb      	str	r3, [r7, #24]
}
 800972e:	bf00      	nop
 8009730:	e7fe      	b.n	8009730 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009732:	f001 fda7 	bl	800b284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01f      	beq.n	8009782 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009746:	f000 f8f7 	bl	8009938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	1e5a      	subs	r2, r3, #1
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00f      	beq.n	800977a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	3310      	adds	r3, #16
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fe74 	bl	800a44c <xTaskRemoveFromEventList>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800976a:	4b3d      	ldr	r3, [pc, #244]	; (8009860 <xQueueReceive+0x1bc>)
 800976c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800977a:	f001 fdb3 	bl	800b2e4 <vPortExitCritical>
				return pdPASS;
 800977e:	2301      	movs	r3, #1
 8009780:	e069      	b.n	8009856 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d103      	bne.n	8009790 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009788:	f001 fdac 	bl	800b2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800978c:	2300      	movs	r3, #0
 800978e:	e062      	b.n	8009856 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d106      	bne.n	80097a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009796:	f107 0310 	add.w	r3, r7, #16
 800979a:	4618      	mov	r0, r3
 800979c:	f000 feba 	bl	800a514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097a0:	2301      	movs	r3, #1
 80097a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097a4:	f001 fd9e 	bl	800b2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097a8:	f000 fc26 	bl	8009ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097ac:	f001 fd6a 	bl	800b284 <vPortEnterCritical>
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097b6:	b25b      	sxtb	r3, r3
 80097b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097bc:	d103      	bne.n	80097c6 <xQueueReceive+0x122>
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097cc:	b25b      	sxtb	r3, r3
 80097ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d2:	d103      	bne.n	80097dc <xQueueReceive+0x138>
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097dc:	f001 fd82 	bl	800b2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097e0:	1d3a      	adds	r2, r7, #4
 80097e2:	f107 0310 	add.w	r3, r7, #16
 80097e6:	4611      	mov	r1, r2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fea9 	bl	800a540 <xTaskCheckForTimeOut>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d123      	bne.n	800983c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f6:	f000 f917 	bl	8009a28 <prvIsQueueEmpty>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d017      	beq.n	8009830 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	3324      	adds	r3, #36	; 0x24
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	4611      	mov	r1, r2
 8009808:	4618      	mov	r0, r3
 800980a:	f000 fdcf 	bl	800a3ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800980e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009810:	f000 f8b8 	bl	8009984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009814:	f000 fbfe 	bl	800a014 <xTaskResumeAll>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d189      	bne.n	8009732 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800981e:	4b10      	ldr	r3, [pc, #64]	; (8009860 <xQueueReceive+0x1bc>)
 8009820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	e780      	b.n	8009732 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009832:	f000 f8a7 	bl	8009984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009836:	f000 fbed 	bl	800a014 <xTaskResumeAll>
 800983a:	e77a      	b.n	8009732 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800983c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800983e:	f000 f8a1 	bl	8009984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009842:	f000 fbe7 	bl	800a014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009848:	f000 f8ee 	bl	8009a28 <prvIsQueueEmpty>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	f43f af6f 	beq.w	8009732 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009854:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009856:	4618      	mov	r0, r3
 8009858:	3730      	adds	r7, #48	; 0x30
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10d      	bne.n	800989e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d14d      	bne.n	8009926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 ffbc 	bl	800a80c <xTaskPriorityDisinherit>
 8009894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	609a      	str	r2, [r3, #8]
 800989c:	e043      	b.n	8009926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d119      	bne.n	80098d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6858      	ldr	r0, [r3, #4]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ac:	461a      	mov	r2, r3
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	f003 f93b 	bl	800cb2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098bc:	441a      	add	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d32b      	bcc.n	8009926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	605a      	str	r2, [r3, #4]
 80098d6:	e026      	b.n	8009926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68d8      	ldr	r0, [r3, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	461a      	mov	r2, r3
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	f003 f921 	bl	800cb2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68da      	ldr	r2, [r3, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	425b      	negs	r3, r3
 80098f2:	441a      	add	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d207      	bcs.n	8009914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	425b      	negs	r3, r3
 800990e:	441a      	add	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d105      	bne.n	8009926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	3b01      	subs	r3, #1
 8009924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800992e:	697b      	ldr	r3, [r7, #20]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009946:	2b00      	cmp	r3, #0
 8009948:	d018      	beq.n	800997c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68da      	ldr	r2, [r3, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	441a      	add	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68da      	ldr	r2, [r3, #12]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	429a      	cmp	r2, r3
 8009962:	d303      	bcc.n	800996c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68d9      	ldr	r1, [r3, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009974:	461a      	mov	r2, r3
 8009976:	6838      	ldr	r0, [r7, #0]
 8009978:	f003 f8d7 	bl	800cb2a <memcpy>
	}
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800998c:	f001 fc7a 	bl	800b284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009998:	e011      	b.n	80099be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d012      	beq.n	80099c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3324      	adds	r3, #36	; 0x24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fd50 	bl	800a44c <xTaskRemoveFromEventList>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099b2:	f000 fe27 	bl	800a604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dce9      	bgt.n	800999a <prvUnlockQueue+0x16>
 80099c6:	e000      	b.n	80099ca <prvUnlockQueue+0x46>
					break;
 80099c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099d2:	f001 fc87 	bl	800b2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099d6:	f001 fc55 	bl	800b284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099e2:	e011      	b.n	8009a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d012      	beq.n	8009a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3310      	adds	r3, #16
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fd2b 	bl	800a44c <xTaskRemoveFromEventList>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099fc:	f000 fe02 	bl	800a604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dce9      	bgt.n	80099e4 <prvUnlockQueue+0x60>
 8009a10:	e000      	b.n	8009a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	22ff      	movs	r2, #255	; 0xff
 8009a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a1c:	f001 fc62 	bl	800b2e4 <vPortExitCritical>
}
 8009a20:	bf00      	nop
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a30:	f001 fc28 	bl	800b284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d102      	bne.n	8009a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e001      	b.n	8009a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a46:	f001 fc4d 	bl	800b2e4 <vPortExitCritical>

	return xReturn;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a5c:	f001 fc12 	bl	800b284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d102      	bne.n	8009a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	e001      	b.n	8009a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a76:	f001 fc35 	bl	800b2e4 <vPortExitCritical>

	return xReturn;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	e014      	b.n	8009abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a94:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <vQueueAddToRegistry+0x50>)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009aa0:	490c      	ldr	r1, [pc, #48]	; (8009ad4 <vQueueAddToRegistry+0x50>)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009aaa:	4a0a      	ldr	r2, [pc, #40]	; (8009ad4 <vQueueAddToRegistry+0x50>)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	4413      	add	r3, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ab6:	e006      	b.n	8009ac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b07      	cmp	r3, #7
 8009ac2:	d9e7      	bls.n	8009a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20000cf4 	.word	0x20000cf4

08009ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ae8:	f001 fbcc 	bl	800b284 <vPortEnterCritical>
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009af2:	b25b      	sxtb	r3, r3
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009af8:	d103      	bne.n	8009b02 <vQueueWaitForMessageRestricted+0x2a>
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b08:	b25b      	sxtb	r3, r3
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b0e:	d103      	bne.n	8009b18 <vQueueWaitForMessageRestricted+0x40>
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b18:	f001 fbe4 	bl	800b2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	3324      	adds	r3, #36	; 0x24
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	68b9      	ldr	r1, [r7, #8]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fc61 	bl	800a3f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b32:	6978      	ldr	r0, [r7, #20]
 8009b34:	f7ff ff26 	bl	8009984 <prvUnlockQueue>
	}
 8009b38:	bf00      	nop
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08e      	sub	sp, #56	; 0x38
 8009b44:	af04      	add	r7, sp, #16
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	623b      	str	r3, [r7, #32]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <xTaskCreateStatic+0x46>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	61fb      	str	r3, [r7, #28]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b86:	23a8      	movs	r3, #168	; 0xa8
 8009b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2ba8      	cmp	r3, #168	; 0xa8
 8009b8e:	d00a      	beq.n	8009ba6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	61bb      	str	r3, [r7, #24]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ba6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d01e      	beq.n	8009bec <xTaskCreateStatic+0xac>
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d01b      	beq.n	8009bec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9303      	str	r3, [sp, #12]
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	f107 0314 	add.w	r3, r7, #20
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	68b9      	ldr	r1, [r7, #8]
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 f850 	bl	8009c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009be6:	f000 f8f3 	bl	8009dd0 <prvAddNewTaskToReadyList>
 8009bea:	e001      	b.n	8009bf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bf0:	697b      	ldr	r3, [r7, #20]
	}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3728      	adds	r7, #40	; 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b08c      	sub	sp, #48	; 0x30
 8009bfe:	af04      	add	r7, sp, #16
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	603b      	str	r3, [r7, #0]
 8009c06:	4613      	mov	r3, r2
 8009c08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 fc5a 	bl	800b4c8 <pvPortMalloc>
 8009c14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00e      	beq.n	8009c3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c1c:	20a8      	movs	r0, #168	; 0xa8
 8009c1e:	f001 fc53 	bl	800b4c8 <pvPortMalloc>
 8009c22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8009c30:	e005      	b.n	8009c3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c32:	6978      	ldr	r0, [r7, #20]
 8009c34:	f001 fd14 	bl	800b660 <vPortFree>
 8009c38:	e001      	b.n	8009c3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d017      	beq.n	8009c74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c4c:	88fa      	ldrh	r2, [r7, #6]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9303      	str	r3, [sp, #12]
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	9302      	str	r3, [sp, #8]
 8009c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 f80e 	bl	8009c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c68:	69f8      	ldr	r0, [r7, #28]
 8009c6a:	f000 f8b1 	bl	8009dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	e002      	b.n	8009c7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
	}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	21a5      	movs	r1, #165	; 0xa5
 8009c9e:	f002 fe4c 	bl	800c93a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cac:	3b01      	subs	r3, #1
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f023 0307 	bic.w	r3, r3, #7
 8009cba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	f003 0307 	and.w	r3, r3, #7
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	617b      	str	r3, [r7, #20]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d01f      	beq.n	8009d22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	e012      	b.n	8009d0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	7819      	ldrb	r1, [r3, #0]
 8009cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	3334      	adds	r3, #52	; 0x34
 8009cf8:	460a      	mov	r2, r1
 8009cfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d006      	beq.n	8009d16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	2b0f      	cmp	r3, #15
 8009d12:	d9e9      	bls.n	8009ce8 <prvInitialiseNewTask+0x64>
 8009d14:	e000      	b.n	8009d18 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d20:	e003      	b.n	8009d2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2c:	2b37      	cmp	r3, #55	; 0x37
 8009d2e:	d901      	bls.n	8009d34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d30:	2337      	movs	r3, #55	; 0x37
 8009d32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2200      	movs	r2, #0
 8009d44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff f978 	bl	8009040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	3318      	adds	r3, #24
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff f973 	bl	8009040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	3354      	adds	r3, #84	; 0x54
 8009d84:	224c      	movs	r2, #76	; 0x4c
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f002 fdd6 	bl	800c93a <memset>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	4a0c      	ldr	r2, [pc, #48]	; (8009dc4 <prvInitialiseNewTask+0x140>)
 8009d92:	659a      	str	r2, [r3, #88]	; 0x58
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	4a0c      	ldr	r2, [pc, #48]	; (8009dc8 <prvInitialiseNewTask+0x144>)
 8009d98:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	4a0b      	ldr	r2, [pc, #44]	; (8009dcc <prvInitialiseNewTask+0x148>)
 8009d9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	69b8      	ldr	r0, [r7, #24]
 8009da6:	f001 f941 	bl	800b02c <pxPortInitialiseStack>
 8009daa:	4602      	mov	r2, r0
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dbc:	bf00      	nop
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001f48 	.word	0x20001f48
 8009dc8:	20001fb0 	.word	0x20001fb0
 8009dcc:	20002018 	.word	0x20002018

08009dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009dd8:	f001 fa54 	bl	800b284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ddc:	4b2d      	ldr	r3, [pc, #180]	; (8009e94 <prvAddNewTaskToReadyList+0xc4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a2c      	ldr	r2, [pc, #176]	; (8009e94 <prvAddNewTaskToReadyList+0xc4>)
 8009de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009de6:	4b2c      	ldr	r3, [pc, #176]	; (8009e98 <prvAddNewTaskToReadyList+0xc8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dee:	4a2a      	ldr	r2, [pc, #168]	; (8009e98 <prvAddNewTaskToReadyList+0xc8>)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009df4:	4b27      	ldr	r3, [pc, #156]	; (8009e94 <prvAddNewTaskToReadyList+0xc4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d110      	bne.n	8009e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009dfc:	f000 fc26 	bl	800a64c <prvInitialiseTaskLists>
 8009e00:	e00d      	b.n	8009e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e02:	4b26      	ldr	r3, [pc, #152]	; (8009e9c <prvAddNewTaskToReadyList+0xcc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d109      	bne.n	8009e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e0a:	4b23      	ldr	r3, [pc, #140]	; (8009e98 <prvAddNewTaskToReadyList+0xc8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d802      	bhi.n	8009e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e18:	4a1f      	ldr	r2, [pc, #124]	; (8009e98 <prvAddNewTaskToReadyList+0xc8>)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e1e:	4b20      	ldr	r3, [pc, #128]	; (8009ea0 <prvAddNewTaskToReadyList+0xd0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	4a1e      	ldr	r2, [pc, #120]	; (8009ea0 <prvAddNewTaskToReadyList+0xd0>)
 8009e26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e28:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <prvAddNewTaskToReadyList+0xd0>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e34:	4b1b      	ldr	r3, [pc, #108]	; (8009ea4 <prvAddNewTaskToReadyList+0xd4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d903      	bls.n	8009e44 <prvAddNewTaskToReadyList+0x74>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a18      	ldr	r2, [pc, #96]	; (8009ea4 <prvAddNewTaskToReadyList+0xd4>)
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4a15      	ldr	r2, [pc, #84]	; (8009ea8 <prvAddNewTaskToReadyList+0xd8>)
 8009e52:	441a      	add	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f7ff f8fd 	bl	800905a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e60:	f001 fa40 	bl	800b2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e64:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <prvAddNewTaskToReadyList+0xcc>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00e      	beq.n	8009e8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <prvAddNewTaskToReadyList+0xc8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d207      	bcs.n	8009e8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <prvAddNewTaskToReadyList+0xdc>)
 8009e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e8a:	bf00      	nop
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20001208 	.word	0x20001208
 8009e98:	20000d34 	.word	0x20000d34
 8009e9c:	20001214 	.word	0x20001214
 8009ea0:	20001224 	.word	0x20001224
 8009ea4:	20001210 	.word	0x20001210
 8009ea8:	20000d38 	.word	0x20000d38
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d017      	beq.n	8009ef2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ec2:	4b13      	ldr	r3, [pc, #76]	; (8009f10 <vTaskDelay+0x60>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <vTaskDelay+0x30>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	60bb      	str	r3, [r7, #8]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ee0:	f000 f88a 	bl	8009ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fcfe 	bl	800a8e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009eec:	f000 f892 	bl	800a014 <xTaskResumeAll>
 8009ef0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d107      	bne.n	8009f08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ef8:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <vTaskDelay+0x64>)
 8009efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f08:	bf00      	nop
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20001230 	.word	0x20001230
 8009f14:	e000ed04 	.word	0xe000ed04

08009f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08a      	sub	sp, #40	; 0x28
 8009f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f26:	463a      	mov	r2, r7
 8009f28:	1d39      	adds	r1, r7, #4
 8009f2a:	f107 0308 	add.w	r3, r7, #8
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff f832 	bl	8008f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	9202      	str	r2, [sp, #8]
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	2300      	movs	r3, #0
 8009f44:	460a      	mov	r2, r1
 8009f46:	4924      	ldr	r1, [pc, #144]	; (8009fd8 <vTaskStartScheduler+0xc0>)
 8009f48:	4824      	ldr	r0, [pc, #144]	; (8009fdc <vTaskStartScheduler+0xc4>)
 8009f4a:	f7ff fdf9 	bl	8009b40 <xTaskCreateStatic>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4a23      	ldr	r2, [pc, #140]	; (8009fe0 <vTaskStartScheduler+0xc8>)
 8009f52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f54:	4b22      	ldr	r3, [pc, #136]	; (8009fe0 <vTaskStartScheduler+0xc8>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e001      	b.n	8009f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d102      	bne.n	8009f72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f6c:	f000 fd10 	bl	800a990 <xTimerCreateTimerTask>
 8009f70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d11b      	bne.n	8009fb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	613b      	str	r3, [r7, #16]
}
 8009f8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f8c:	4b15      	ldr	r3, [pc, #84]	; (8009fe4 <vTaskStartScheduler+0xcc>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3354      	adds	r3, #84	; 0x54
 8009f92:	4a15      	ldr	r2, [pc, #84]	; (8009fe8 <vTaskStartScheduler+0xd0>)
 8009f94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f96:	4b15      	ldr	r3, [pc, #84]	; (8009fec <vTaskStartScheduler+0xd4>)
 8009f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f9e:	4b14      	ldr	r3, [pc, #80]	; (8009ff0 <vTaskStartScheduler+0xd8>)
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fa4:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <vTaskStartScheduler+0xdc>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009faa:	f001 f8c9 	bl	800b140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fae:	e00e      	b.n	8009fce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb6:	d10a      	bne.n	8009fce <vTaskStartScheduler+0xb6>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60fb      	str	r3, [r7, #12]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <vTaskStartScheduler+0xb4>
}
 8009fce:	bf00      	nop
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08010384 	.word	0x08010384
 8009fdc:	0800a61d 	.word	0x0800a61d
 8009fe0:	2000122c 	.word	0x2000122c
 8009fe4:	20000d34 	.word	0x20000d34
 8009fe8:	2000006c 	.word	0x2000006c
 8009fec:	20001228 	.word	0x20001228
 8009ff0:	20001214 	.word	0x20001214
 8009ff4:	2000120c 	.word	0x2000120c

08009ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ffc:	4b04      	ldr	r3, [pc, #16]	; (800a010 <vTaskSuspendAll+0x18>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3301      	adds	r3, #1
 800a002:	4a03      	ldr	r2, [pc, #12]	; (800a010 <vTaskSuspendAll+0x18>)
 800a004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a006:	bf00      	nop
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	20001230 	.word	0x20001230

0800a014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a022:	4b42      	ldr	r3, [pc, #264]	; (800a12c <xTaskResumeAll+0x118>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10a      	bne.n	800a040 <xTaskResumeAll+0x2c>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	603b      	str	r3, [r7, #0]
}
 800a03c:	bf00      	nop
 800a03e:	e7fe      	b.n	800a03e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a040:	f001 f920 	bl	800b284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a044:	4b39      	ldr	r3, [pc, #228]	; (800a12c <xTaskResumeAll+0x118>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3b01      	subs	r3, #1
 800a04a:	4a38      	ldr	r2, [pc, #224]	; (800a12c <xTaskResumeAll+0x118>)
 800a04c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a04e:	4b37      	ldr	r3, [pc, #220]	; (800a12c <xTaskResumeAll+0x118>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d162      	bne.n	800a11c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a056:	4b36      	ldr	r3, [pc, #216]	; (800a130 <xTaskResumeAll+0x11c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d05e      	beq.n	800a11c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a05e:	e02f      	b.n	800a0c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a060:	4b34      	ldr	r3, [pc, #208]	; (800a134 <xTaskResumeAll+0x120>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3318      	adds	r3, #24
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7ff f851 	bl	8009114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3304      	adds	r3, #4
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff f84c 	bl	8009114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a080:	4b2d      	ldr	r3, [pc, #180]	; (800a138 <xTaskResumeAll+0x124>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d903      	bls.n	800a090 <xTaskResumeAll+0x7c>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	4a2a      	ldr	r2, [pc, #168]	; (800a138 <xTaskResumeAll+0x124>)
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4a27      	ldr	r2, [pc, #156]	; (800a13c <xTaskResumeAll+0x128>)
 800a09e:	441a      	add	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f7fe ffd7 	bl	800905a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	4b23      	ldr	r3, [pc, #140]	; (800a140 <xTaskResumeAll+0x12c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d302      	bcc.n	800a0c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0ba:	4b22      	ldr	r3, [pc, #136]	; (800a144 <xTaskResumeAll+0x130>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0c0:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <xTaskResumeAll+0x120>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1cb      	bne.n	800a060 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0ce:	f000 fb5f 	bl	800a790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0d2:	4b1d      	ldr	r3, [pc, #116]	; (800a148 <xTaskResumeAll+0x134>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d010      	beq.n	800a100 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0de:	f000 f847 	bl	800a170 <xTaskIncrementTick>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0e8:	4b16      	ldr	r3, [pc, #88]	; (800a144 <xTaskResumeAll+0x130>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1f1      	bne.n	800a0de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a0fa:	4b13      	ldr	r3, [pc, #76]	; (800a148 <xTaskResumeAll+0x134>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a100:	4b10      	ldr	r3, [pc, #64]	; (800a144 <xTaskResumeAll+0x130>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d009      	beq.n	800a11c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a108:	2301      	movs	r3, #1
 800a10a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <xTaskResumeAll+0x138>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a11c:	f001 f8e2 	bl	800b2e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a120:	68bb      	ldr	r3, [r7, #8]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20001230 	.word	0x20001230
 800a130:	20001208 	.word	0x20001208
 800a134:	200011c8 	.word	0x200011c8
 800a138:	20001210 	.word	0x20001210
 800a13c:	20000d38 	.word	0x20000d38
 800a140:	20000d34 	.word	0x20000d34
 800a144:	2000121c 	.word	0x2000121c
 800a148:	20001218 	.word	0x20001218
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a156:	4b05      	ldr	r3, [pc, #20]	; (800a16c <xTaskGetTickCount+0x1c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a15c:	687b      	ldr	r3, [r7, #4]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	2000120c 	.word	0x2000120c

0800a170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a17a:	4b4f      	ldr	r3, [pc, #316]	; (800a2b8 <xTaskIncrementTick+0x148>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 808f 	bne.w	800a2a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a184:	4b4d      	ldr	r3, [pc, #308]	; (800a2bc <xTaskIncrementTick+0x14c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3301      	adds	r3, #1
 800a18a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a18c:	4a4b      	ldr	r2, [pc, #300]	; (800a2bc <xTaskIncrementTick+0x14c>)
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d120      	bne.n	800a1da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a198:	4b49      	ldr	r3, [pc, #292]	; (800a2c0 <xTaskIncrementTick+0x150>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	603b      	str	r3, [r7, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xTaskIncrementTick+0x46>
 800a1b8:	4b41      	ldr	r3, [pc, #260]	; (800a2c0 <xTaskIncrementTick+0x150>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	4b41      	ldr	r3, [pc, #260]	; (800a2c4 <xTaskIncrementTick+0x154>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a3f      	ldr	r2, [pc, #252]	; (800a2c0 <xTaskIncrementTick+0x150>)
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	4a3f      	ldr	r2, [pc, #252]	; (800a2c4 <xTaskIncrementTick+0x154>)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	4b3e      	ldr	r3, [pc, #248]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	4a3d      	ldr	r2, [pc, #244]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	f000 fadb 	bl	800a790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1da:	4b3c      	ldr	r3, [pc, #240]	; (800a2cc <xTaskIncrementTick+0x15c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d349      	bcc.n	800a278 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e4:	4b36      	ldr	r3, [pc, #216]	; (800a2c0 <xTaskIncrementTick+0x150>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ee:	4b37      	ldr	r3, [pc, #220]	; (800a2cc <xTaskIncrementTick+0x15c>)
 800a1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1f4:	601a      	str	r2, [r3, #0]
					break;
 800a1f6:	e03f      	b.n	800a278 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1f8:	4b31      	ldr	r3, [pc, #196]	; (800a2c0 <xTaskIncrementTick+0x150>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d203      	bcs.n	800a218 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a210:	4a2e      	ldr	r2, [pc, #184]	; (800a2cc <xTaskIncrementTick+0x15c>)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a216:	e02f      	b.n	800a278 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe ff79 	bl	8009114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	3318      	adds	r3, #24
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe ff70 	bl	8009114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a238:	4b25      	ldr	r3, [pc, #148]	; (800a2d0 <xTaskIncrementTick+0x160>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d903      	bls.n	800a248 <xTaskIncrementTick+0xd8>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a244:	4a22      	ldr	r2, [pc, #136]	; (800a2d0 <xTaskIncrementTick+0x160>)
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4a1f      	ldr	r2, [pc, #124]	; (800a2d4 <xTaskIncrementTick+0x164>)
 800a256:	441a      	add	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe fefb 	bl	800905a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <xTaskIncrementTick+0x168>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3b8      	bcc.n	800a1e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a272:	2301      	movs	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a276:	e7b5      	b.n	800a1e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <xTaskIncrementTick+0x168>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27e:	4915      	ldr	r1, [pc, #84]	; (800a2d4 <xTaskIncrementTick+0x164>)
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d901      	bls.n	800a294 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a290:	2301      	movs	r3, #1
 800a292:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a294:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <xTaskIncrementTick+0x16c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d007      	beq.n	800a2ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a29c:	2301      	movs	r3, #1
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	e004      	b.n	800a2ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2a2:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <xTaskIncrementTick+0x170>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	4a0d      	ldr	r2, [pc, #52]	; (800a2e0 <xTaskIncrementTick+0x170>)
 800a2aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2ac:	697b      	ldr	r3, [r7, #20]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001230 	.word	0x20001230
 800a2bc:	2000120c 	.word	0x2000120c
 800a2c0:	200011c0 	.word	0x200011c0
 800a2c4:	200011c4 	.word	0x200011c4
 800a2c8:	20001220 	.word	0x20001220
 800a2cc:	20001228 	.word	0x20001228
 800a2d0:	20001210 	.word	0x20001210
 800a2d4:	20000d38 	.word	0x20000d38
 800a2d8:	20000d34 	.word	0x20000d34
 800a2dc:	2000121c 	.word	0x2000121c
 800a2e0:	20001218 	.word	0x20001218

0800a2e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ea:	4b2a      	ldr	r3, [pc, #168]	; (800a394 <vTaskSwitchContext+0xb0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2f2:	4b29      	ldr	r3, [pc, #164]	; (800a398 <vTaskSwitchContext+0xb4>)
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2f8:	e046      	b.n	800a388 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a2fa:	4b27      	ldr	r3, [pc, #156]	; (800a398 <vTaskSwitchContext+0xb4>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a300:	4b26      	ldr	r3, [pc, #152]	; (800a39c <vTaskSwitchContext+0xb8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	60fb      	str	r3, [r7, #12]
 800a306:	e010      	b.n	800a32a <vTaskSwitchContext+0x46>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10a      	bne.n	800a324 <vTaskSwitchContext+0x40>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	607b      	str	r3, [r7, #4]
}
 800a320:	bf00      	nop
 800a322:	e7fe      	b.n	800a322 <vTaskSwitchContext+0x3e>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3b01      	subs	r3, #1
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	491d      	ldr	r1, [pc, #116]	; (800a3a0 <vTaskSwitchContext+0xbc>)
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	440b      	add	r3, r1
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0e4      	beq.n	800a308 <vTaskSwitchContext+0x24>
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4a15      	ldr	r2, [pc, #84]	; (800a3a0 <vTaskSwitchContext+0xbc>)
 800a34a:	4413      	add	r3, r2
 800a34c:	60bb      	str	r3, [r7, #8]
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	605a      	str	r2, [r3, #4]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	3308      	adds	r3, #8
 800a360:	429a      	cmp	r2, r3
 800a362:	d104      	bne.n	800a36e <vTaskSwitchContext+0x8a>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	605a      	str	r2, [r3, #4]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	4a0b      	ldr	r2, [pc, #44]	; (800a3a4 <vTaskSwitchContext+0xc0>)
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	4a08      	ldr	r2, [pc, #32]	; (800a39c <vTaskSwitchContext+0xb8>)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a37e:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <vTaskSwitchContext+0xc0>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3354      	adds	r3, #84	; 0x54
 800a384:	4a08      	ldr	r2, [pc, #32]	; (800a3a8 <vTaskSwitchContext+0xc4>)
 800a386:	6013      	str	r3, [r2, #0]
}
 800a388:	bf00      	nop
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	20001230 	.word	0x20001230
 800a398:	2000121c 	.word	0x2000121c
 800a39c:	20001210 	.word	0x20001210
 800a3a0:	20000d38 	.word	0x20000d38
 800a3a4:	20000d34 	.word	0x20000d34
 800a3a8:	2000006c 	.word	0x2000006c

0800a3ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	60fb      	str	r3, [r7, #12]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3d2:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <vTaskPlaceOnEventList+0x44>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3318      	adds	r3, #24
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7fe fe61 	bl	80090a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	6838      	ldr	r0, [r7, #0]
 800a3e4:	f000 fa80 	bl	800a8e8 <prvAddCurrentTaskToDelayedList>
}
 800a3e8:	bf00      	nop
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000d34 	.word	0x20000d34

0800a3f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10a      	bne.n	800a41c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	617b      	str	r3, [r7, #20]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <vTaskPlaceOnEventListRestricted+0x54>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3318      	adds	r3, #24
 800a422:	4619      	mov	r1, r3
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7fe fe18 	bl	800905a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a434:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	68b8      	ldr	r0, [r7, #8]
 800a43a:	f000 fa55 	bl	800a8e8 <prvAddCurrentTaskToDelayedList>
	}
 800a43e:	bf00      	nop
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000d34 	.word	0x20000d34

0800a44c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	60fb      	str	r3, [r7, #12]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	3318      	adds	r3, #24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe fe49 	bl	8009114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a482:	4b1e      	ldr	r3, [pc, #120]	; (800a4fc <xTaskRemoveFromEventList+0xb0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d11d      	bne.n	800a4c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	3304      	adds	r3, #4
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fe40 	bl	8009114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a498:	4b19      	ldr	r3, [pc, #100]	; (800a500 <xTaskRemoveFromEventList+0xb4>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d903      	bls.n	800a4a8 <xTaskRemoveFromEventList+0x5c>
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	4a16      	ldr	r2, [pc, #88]	; (800a500 <xTaskRemoveFromEventList+0xb4>)
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4a13      	ldr	r2, [pc, #76]	; (800a504 <xTaskRemoveFromEventList+0xb8>)
 800a4b6:	441a      	add	r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4610      	mov	r0, r2
 800a4c0:	f7fe fdcb 	bl	800905a <vListInsertEnd>
 800a4c4:	e005      	b.n	800a4d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	3318      	adds	r3, #24
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	480e      	ldr	r0, [pc, #56]	; (800a508 <xTaskRemoveFromEventList+0xbc>)
 800a4ce:	f7fe fdc4 	bl	800905a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <xTaskRemoveFromEventList+0xc0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d905      	bls.n	800a4ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <xTaskRemoveFromEventList+0xc4>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e001      	b.n	800a4f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4f0:	697b      	ldr	r3, [r7, #20]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20001230 	.word	0x20001230
 800a500:	20001210 	.word	0x20001210
 800a504:	20000d38 	.word	0x20000d38
 800a508:	200011c8 	.word	0x200011c8
 800a50c:	20000d34 	.word	0x20000d34
 800a510:	2000121c 	.word	0x2000121c

0800a514 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a51c:	4b06      	ldr	r3, [pc, #24]	; (800a538 <vTaskInternalSetTimeOutState+0x24>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <vTaskInternalSetTimeOutState+0x28>)
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	605a      	str	r2, [r3, #4]
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	20001220 	.word	0x20001220
 800a53c:	2000120c 	.word	0x2000120c

0800a540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10a      	bne.n	800a566 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	613b      	str	r3, [r7, #16]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60fb      	str	r3, [r7, #12]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a582:	f000 fe7f 	bl	800b284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a586:	4b1d      	ldr	r3, [pc, #116]	; (800a5fc <xTaskCheckForTimeOut+0xbc>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59e:	d102      	bne.n	800a5a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	e023      	b.n	800a5ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b15      	ldr	r3, [pc, #84]	; (800a600 <xTaskCheckForTimeOut+0xc0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d007      	beq.n	800a5c2 <xTaskCheckForTimeOut+0x82>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d302      	bcc.n	800a5c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	e015      	b.n	800a5ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d20b      	bcs.n	800a5e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	1ad2      	subs	r2, r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ff9b 	bl	800a514 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	e004      	b.n	800a5ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5ee:	f000 fe79 	bl	800b2e4 <vPortExitCritical>

	return xReturn;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	2000120c 	.word	0x2000120c
 800a600:	20001220 	.word	0x20001220

0800a604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a608:	4b03      	ldr	r3, [pc, #12]	; (800a618 <vTaskMissedYield+0x14>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	601a      	str	r2, [r3, #0]
}
 800a60e:	bf00      	nop
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	2000121c 	.word	0x2000121c

0800a61c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a624:	f000 f852 	bl	800a6cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <prvIdleTask+0x28>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d9f9      	bls.n	800a624 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a630:	4b05      	ldr	r3, [pc, #20]	; (800a648 <prvIdleTask+0x2c>)
 800a632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a640:	e7f0      	b.n	800a624 <prvIdleTask+0x8>
 800a642:	bf00      	nop
 800a644:	20000d38 	.word	0x20000d38
 800a648:	e000ed04 	.word	0xe000ed04

0800a64c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a652:	2300      	movs	r3, #0
 800a654:	607b      	str	r3, [r7, #4]
 800a656:	e00c      	b.n	800a672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4a12      	ldr	r2, [pc, #72]	; (800a6ac <prvInitialiseTaskLists+0x60>)
 800a664:	4413      	add	r3, r2
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fcca 	bl	8009000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3301      	adds	r3, #1
 800a670:	607b      	str	r3, [r7, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b37      	cmp	r3, #55	; 0x37
 800a676:	d9ef      	bls.n	800a658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a678:	480d      	ldr	r0, [pc, #52]	; (800a6b0 <prvInitialiseTaskLists+0x64>)
 800a67a:	f7fe fcc1 	bl	8009000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a67e:	480d      	ldr	r0, [pc, #52]	; (800a6b4 <prvInitialiseTaskLists+0x68>)
 800a680:	f7fe fcbe 	bl	8009000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a684:	480c      	ldr	r0, [pc, #48]	; (800a6b8 <prvInitialiseTaskLists+0x6c>)
 800a686:	f7fe fcbb 	bl	8009000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a68a:	480c      	ldr	r0, [pc, #48]	; (800a6bc <prvInitialiseTaskLists+0x70>)
 800a68c:	f7fe fcb8 	bl	8009000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a690:	480b      	ldr	r0, [pc, #44]	; (800a6c0 <prvInitialiseTaskLists+0x74>)
 800a692:	f7fe fcb5 	bl	8009000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <prvInitialiseTaskLists+0x78>)
 800a698:	4a05      	ldr	r2, [pc, #20]	; (800a6b0 <prvInitialiseTaskLists+0x64>)
 800a69a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a69c:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <prvInitialiseTaskLists+0x7c>)
 800a69e:	4a05      	ldr	r2, [pc, #20]	; (800a6b4 <prvInitialiseTaskLists+0x68>)
 800a6a0:	601a      	str	r2, [r3, #0]
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000d38 	.word	0x20000d38
 800a6b0:	20001198 	.word	0x20001198
 800a6b4:	200011ac 	.word	0x200011ac
 800a6b8:	200011c8 	.word	0x200011c8
 800a6bc:	200011dc 	.word	0x200011dc
 800a6c0:	200011f4 	.word	0x200011f4
 800a6c4:	200011c0 	.word	0x200011c0
 800a6c8:	200011c4 	.word	0x200011c4

0800a6cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6d2:	e019      	b.n	800a708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6d4:	f000 fdd6 	bl	800b284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d8:	4b10      	ldr	r3, [pc, #64]	; (800a71c <prvCheckTasksWaitingTermination+0x50>)
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe fd15 	bl	8009114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <prvCheckTasksWaitingTermination+0x54>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	4a0b      	ldr	r2, [pc, #44]	; (800a720 <prvCheckTasksWaitingTermination+0x54>)
 800a6f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <prvCheckTasksWaitingTermination+0x58>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	4a0a      	ldr	r2, [pc, #40]	; (800a724 <prvCheckTasksWaitingTermination+0x58>)
 800a6fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6fe:	f000 fdf1 	bl	800b2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f810 	bl	800a728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <prvCheckTasksWaitingTermination+0x58>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e1      	bne.n	800a6d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200011dc 	.word	0x200011dc
 800a720:	20001208 	.word	0x20001208
 800a724:	200011f0 	.word	0x200011f0

0800a728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3354      	adds	r3, #84	; 0x54
 800a734:	4618      	mov	r0, r3
 800a736:	f002 f92f 	bl	800c998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a740:	2b00      	cmp	r3, #0
 800a742:	d108      	bne.n	800a756 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 ff89 	bl	800b660 <vPortFree>
				vPortFree( pxTCB );
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 ff86 	bl	800b660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a754:	e018      	b.n	800a788 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d103      	bne.n	800a768 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 ff7d 	bl	800b660 <vPortFree>
	}
 800a766:	e00f      	b.n	800a788 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d00a      	beq.n	800a788 <prvDeleteTCB+0x60>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	60fb      	str	r3, [r7, #12]
}
 800a784:	bf00      	nop
 800a786:	e7fe      	b.n	800a786 <prvDeleteTCB+0x5e>
	}
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <prvResetNextTaskUnblockTime+0x38>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d104      	bne.n	800a7aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <prvResetNextTaskUnblockTime+0x3c>)
 800a7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7a8:	e008      	b.n	800a7bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7aa:	4b07      	ldr	r3, [pc, #28]	; (800a7c8 <prvResetNextTaskUnblockTime+0x38>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	4a04      	ldr	r2, [pc, #16]	; (800a7cc <prvResetNextTaskUnblockTime+0x3c>)
 800a7ba:	6013      	str	r3, [r2, #0]
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	200011c0 	.word	0x200011c0
 800a7cc:	20001228 	.word	0x20001228

0800a7d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <xTaskGetSchedulerState+0x34>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	e008      	b.n	800a7f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e4:	4b08      	ldr	r3, [pc, #32]	; (800a808 <xTaskGetSchedulerState+0x38>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	607b      	str	r3, [r7, #4]
 800a7f0:	e001      	b.n	800a7f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7f6:	687b      	ldr	r3, [r7, #4]
	}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	20001214 	.word	0x20001214
 800a808:	20001230 	.word	0x20001230

0800a80c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a818:	2300      	movs	r3, #0
 800a81a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d056      	beq.n	800a8d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a822:	4b2e      	ldr	r3, [pc, #184]	; (800a8dc <xTaskPriorityDisinherit+0xd0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d00a      	beq.n	800a842 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	60fb      	str	r3, [r7, #12]
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	60bb      	str	r3, [r7, #8]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a864:	1e5a      	subs	r2, r3, #1
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a872:	429a      	cmp	r2, r3
 800a874:	d02c      	beq.n	800a8d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d128      	bne.n	800a8d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	3304      	adds	r3, #4
 800a882:	4618      	mov	r0, r3
 800a884:	f7fe fc46 	bl	8009114 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a894:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	; (800a8e0 <xTaskPriorityDisinherit+0xd4>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d903      	bls.n	800a8b0 <xTaskPriorityDisinherit+0xa4>
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ac:	4a0c      	ldr	r2, [pc, #48]	; (800a8e0 <xTaskPriorityDisinherit+0xd4>)
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4a09      	ldr	r2, [pc, #36]	; (800a8e4 <xTaskPriorityDisinherit+0xd8>)
 800a8be:	441a      	add	r2, r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	f7fe fbc7 	bl	800905a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8d0:	697b      	ldr	r3, [r7, #20]
	}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000d34 	.word	0x20000d34
 800a8e0:	20001210 	.word	0x20001210
 800a8e4:	20000d38 	.word	0x20000d38

0800a8e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8f2:	4b21      	ldr	r3, [pc, #132]	; (800a978 <prvAddCurrentTaskToDelayedList+0x90>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8f8:	4b20      	ldr	r3, [pc, #128]	; (800a97c <prvAddCurrentTaskToDelayedList+0x94>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fc08 	bl	8009114 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a90a:	d10a      	bne.n	800a922 <prvAddCurrentTaskToDelayedList+0x3a>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d007      	beq.n	800a922 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a912:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <prvAddCurrentTaskToDelayedList+0x94>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3304      	adds	r3, #4
 800a918:	4619      	mov	r1, r3
 800a91a:	4819      	ldr	r0, [pc, #100]	; (800a980 <prvAddCurrentTaskToDelayedList+0x98>)
 800a91c:	f7fe fb9d 	bl	800905a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a920:	e026      	b.n	800a970 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4413      	add	r3, r2
 800a928:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a92a:	4b14      	ldr	r3, [pc, #80]	; (800a97c <prvAddCurrentTaskToDelayedList+0x94>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	429a      	cmp	r2, r3
 800a938:	d209      	bcs.n	800a94e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a93a:	4b12      	ldr	r3, [pc, #72]	; (800a984 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	4b0f      	ldr	r3, [pc, #60]	; (800a97c <prvAddCurrentTaskToDelayedList+0x94>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3304      	adds	r3, #4
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	f7fe fbab 	bl	80090a2 <vListInsert>
}
 800a94c:	e010      	b.n	800a970 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a94e:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b0a      	ldr	r3, [pc, #40]	; (800a97c <prvAddCurrentTaskToDelayedList+0x94>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3304      	adds	r3, #4
 800a958:	4619      	mov	r1, r3
 800a95a:	4610      	mov	r0, r2
 800a95c:	f7fe fba1 	bl	80090a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a960:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	429a      	cmp	r2, r3
 800a968:	d202      	bcs.n	800a970 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a96a:	4a08      	ldr	r2, [pc, #32]	; (800a98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	6013      	str	r3, [r2, #0]
}
 800a970:	bf00      	nop
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	2000120c 	.word	0x2000120c
 800a97c:	20000d34 	.word	0x20000d34
 800a980:	200011f4 	.word	0x200011f4
 800a984:	200011c4 	.word	0x200011c4
 800a988:	200011c0 	.word	0x200011c0
 800a98c:	20001228 	.word	0x20001228

0800a990 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	; 0x28
 800a994:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a99a:	f000 fb07 	bl	800afac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a99e:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <xTimerCreateTimerTask+0x80>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d021      	beq.n	800a9ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9ae:	1d3a      	adds	r2, r7, #4
 800a9b0:	f107 0108 	add.w	r1, r7, #8
 800a9b4:	f107 030c 	add.w	r3, r7, #12
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe fb07 	bl	8008fcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9be:	6879      	ldr	r1, [r7, #4]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	9202      	str	r2, [sp, #8]
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	460a      	mov	r2, r1
 800a9d0:	4910      	ldr	r1, [pc, #64]	; (800aa14 <xTimerCreateTimerTask+0x84>)
 800a9d2:	4811      	ldr	r0, [pc, #68]	; (800aa18 <xTimerCreateTimerTask+0x88>)
 800a9d4:	f7ff f8b4 	bl	8009b40 <xTaskCreateStatic>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	4a10      	ldr	r2, [pc, #64]	; (800aa1c <xTimerCreateTimerTask+0x8c>)
 800a9dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9de:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <xTimerCreateTimerTask+0x8c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	613b      	str	r3, [r7, #16]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa06:	697b      	ldr	r3, [r7, #20]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20001264 	.word	0x20001264
 800aa14:	0801038c 	.word	0x0801038c
 800aa18:	0800ab55 	.word	0x0800ab55
 800aa1c:	20001268 	.word	0x20001268

0800aa20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08a      	sub	sp, #40	; 0x28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10a      	bne.n	800aa4e <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	623b      	str	r3, [r7, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	e7fe      	b.n	800aa4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa4e:	4b1a      	ldr	r3, [pc, #104]	; (800aab8 <xTimerGenericCommand+0x98>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d02a      	beq.n	800aaac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b05      	cmp	r3, #5
 800aa66:	dc18      	bgt.n	800aa9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa68:	f7ff feb2 	bl	800a7d0 <xTaskGetSchedulerState>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d109      	bne.n	800aa86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa72:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <xTimerGenericCommand+0x98>)
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f107 0110 	add.w	r1, r7, #16
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa7e:	f7fe fc77 	bl	8009370 <xQueueGenericSend>
 800aa82:	6278      	str	r0, [r7, #36]	; 0x24
 800aa84:	e012      	b.n	800aaac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <xTimerGenericCommand+0x98>)
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f107 0110 	add.w	r1, r7, #16
 800aa8e:	2300      	movs	r3, #0
 800aa90:	2200      	movs	r2, #0
 800aa92:	f7fe fc6d 	bl	8009370 <xQueueGenericSend>
 800aa96:	6278      	str	r0, [r7, #36]	; 0x24
 800aa98:	e008      	b.n	800aaac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa9a:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <xTimerGenericCommand+0x98>)
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	f107 0110 	add.w	r1, r7, #16
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	f7fe fd61 	bl	800956c <xQueueGenericSendFromISR>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20001264 	.word	0x20001264

0800aabc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b088      	sub	sp, #32
 800aac0:	af02      	add	r7, sp, #8
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac6:	4b22      	ldr	r3, [pc, #136]	; (800ab50 <prvProcessExpiredTimer+0x94>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe fb1d 	bl	8009114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aae0:	f003 0304 	and.w	r3, r3, #4
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d022      	beq.n	800ab2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	699a      	ldr	r2, [r3, #24]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	18d1      	adds	r1, r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	6978      	ldr	r0, [r7, #20]
 800aaf6:	f000 f8d1 	bl	800ac9c <prvInsertTimerInActiveList>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01f      	beq.n	800ab40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab00:	2300      	movs	r3, #0
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	2100      	movs	r1, #0
 800ab0a:	6978      	ldr	r0, [r7, #20]
 800ab0c:	f7ff ff88 	bl	800aa20 <xTimerGenericCommand>
 800ab10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d113      	bne.n	800ab40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	60fb      	str	r3, [r7, #12]
}
 800ab2a:	bf00      	nop
 800ab2c:	e7fe      	b.n	800ab2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab34:	f023 0301 	bic.w	r3, r3, #1
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	6978      	ldr	r0, [r7, #20]
 800ab46:	4798      	blx	r3
}
 800ab48:	bf00      	nop
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	2000125c 	.word	0x2000125c

0800ab54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab5c:	f107 0308 	add.w	r3, r7, #8
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 f857 	bl	800ac14 <prvGetNextExpireTime>
 800ab66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 f803 	bl	800ab78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab72:	f000 f8d5 	bl	800ad20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab76:	e7f1      	b.n	800ab5c <prvTimerTask+0x8>

0800ab78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab82:	f7ff fa39 	bl	8009ff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab86:	f107 0308 	add.w	r3, r7, #8
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 f866 	bl	800ac5c <prvSampleTimeNow>
 800ab90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d130      	bne.n	800abfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <prvProcessTimerOrBlockTask+0x3c>
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d806      	bhi.n	800abb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aba6:	f7ff fa35 	bl	800a014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abaa:	68f9      	ldr	r1, [r7, #12]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff ff85 	bl	800aabc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abb2:	e024      	b.n	800abfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d008      	beq.n	800abcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <prvProcessTimerOrBlockTask+0x90>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <prvProcessTimerOrBlockTask+0x50>
 800abc4:	2301      	movs	r3, #1
 800abc6:	e000      	b.n	800abca <prvProcessTimerOrBlockTask+0x52>
 800abc8:	2300      	movs	r3, #0
 800abca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abcc:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <prvProcessTimerOrBlockTask+0x94>)
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	4619      	mov	r1, r3
 800abda:	f7fe ff7d 	bl	8009ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abde:	f7ff fa19 	bl	800a014 <xTaskResumeAll>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abe8:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <prvProcessTimerOrBlockTask+0x98>)
 800abea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	f3bf 8f6f 	isb	sy
}
 800abf8:	e001      	b.n	800abfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abfa:	f7ff fa0b 	bl	800a014 <xTaskResumeAll>
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20001260 	.word	0x20001260
 800ac0c:	20001264 	.word	0x20001264
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac1c:	4b0e      	ldr	r3, [pc, #56]	; (800ac58 <prvGetNextExpireTime+0x44>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <prvGetNextExpireTime+0x16>
 800ac26:	2201      	movs	r2, #1
 800ac28:	e000      	b.n	800ac2c <prvGetNextExpireTime+0x18>
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d105      	bne.n	800ac44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <prvGetNextExpireTime+0x44>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
 800ac42:	e001      	b.n	800ac48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac48:	68fb      	ldr	r3, [r7, #12]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	2000125c 	.word	0x2000125c

0800ac5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac64:	f7ff fa74 	bl	800a150 <xTaskGetTickCount>
 800ac68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac6a:	4b0b      	ldr	r3, [pc, #44]	; (800ac98 <prvSampleTimeNow+0x3c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d205      	bcs.n	800ac80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac74:	f000 f936 	bl	800aee4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	e002      	b.n	800ac86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac86:	4a04      	ldr	r2, [pc, #16]	; (800ac98 <prvSampleTimeNow+0x3c>)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	2000126c 	.word	0x2000126c

0800ac9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d812      	bhi.n	800ace8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	1ad2      	subs	r2, r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	429a      	cmp	r2, r3
 800acce:	d302      	bcc.n	800acd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	e01b      	b.n	800ad0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <prvInsertTimerInActiveList+0x7c>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3304      	adds	r3, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f7fe f9de 	bl	80090a2 <vListInsert>
 800ace6:	e012      	b.n	800ad0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	429a      	cmp	r2, r3
 800acee:	d206      	bcs.n	800acfe <prvInsertTimerInActiveList+0x62>
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d302      	bcc.n	800acfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	e007      	b.n	800ad0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <prvInsertTimerInActiveList+0x80>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7fe f9ca 	bl	80090a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad0e:	697b      	ldr	r3, [r7, #20]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20001260 	.word	0x20001260
 800ad1c:	2000125c 	.word	0x2000125c

0800ad20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08e      	sub	sp, #56	; 0x38
 800ad24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad26:	e0ca      	b.n	800aebe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da18      	bge.n	800ad60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad2e:	1d3b      	adds	r3, r7, #4
 800ad30:	3304      	adds	r3, #4
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10a      	bne.n	800ad50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	61fb      	str	r3, [r7, #28]
}
 800ad4c:	bf00      	nop
 800ad4e:	e7fe      	b.n	800ad4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad56:	6850      	ldr	r0, [r2, #4]
 800ad58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad5a:	6892      	ldr	r2, [r2, #8]
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f2c0 80ab 	blt.w	800aebe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d004      	beq.n	800ad7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	3304      	adds	r3, #4
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe f9cb 	bl	8009114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad7e:	463b      	mov	r3, r7
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff ff6b 	bl	800ac5c <prvSampleTimeNow>
 800ad86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b09      	cmp	r3, #9
 800ad8c:	f200 8096 	bhi.w	800aebc <prvProcessReceivedCommands+0x19c>
 800ad90:	a201      	add	r2, pc, #4	; (adr r2, 800ad98 <prvProcessReceivedCommands+0x78>)
 800ad92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad96:	bf00      	nop
 800ad98:	0800adc1 	.word	0x0800adc1
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800adc1 	.word	0x0800adc1
 800ada4:	0800ae35 	.word	0x0800ae35
 800ada8:	0800ae49 	.word	0x0800ae49
 800adac:	0800ae93 	.word	0x0800ae93
 800adb0:	0800adc1 	.word	0x0800adc1
 800adb4:	0800adc1 	.word	0x0800adc1
 800adb8:	0800ae35 	.word	0x0800ae35
 800adbc:	0800ae49 	.word	0x0800ae49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc6:	f043 0301 	orr.w	r3, r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	18d1      	adds	r1, r2, r3
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade0:	f7ff ff5c 	bl	800ac9c <prvInsertTimerInActiveList>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d069      	beq.n	800aebe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d05e      	beq.n	800aebe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	441a      	add	r2, r3
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2100      	movs	r1, #0
 800ae10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae12:	f7ff fe05 	bl	800aa20 <xTimerGenericCommand>
 800ae16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d14f      	bne.n	800aebe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	61bb      	str	r3, [r7, #24]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae3a:	f023 0301 	bic.w	r3, r3, #1
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae46:	e03a      	b.n	800aebe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae4e:	f043 0301 	orr.w	r3, r3, #1
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	617b      	str	r3, [r7, #20]
}
 800ae7a:	bf00      	nop
 800ae7c:	e7fe      	b.n	800ae7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	18d1      	adds	r1, r2, r3
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8c:	f7ff ff06 	bl	800ac9c <prvInsertTimerInActiveList>
					break;
 800ae90:	e015      	b.n	800aebe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d103      	bne.n	800aea8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea2:	f000 fbdd 	bl	800b660 <vPortFree>
 800aea6:	e00a      	b.n	800aebe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeae:	f023 0301 	bic.w	r3, r3, #1
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeba:	e000      	b.n	800aebe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aebc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aebe:	4b08      	ldr	r3, [pc, #32]	; (800aee0 <prvProcessReceivedCommands+0x1c0>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	1d39      	adds	r1, r7, #4
 800aec4:	2200      	movs	r2, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fbec 	bl	80096a4 <xQueueReceive>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f47f af2a 	bne.w	800ad28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
 800aed8:	3730      	adds	r7, #48	; 0x30
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20001264 	.word	0x20001264

0800aee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aeea:	e048      	b.n	800af7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeec:	4b2d      	ldr	r3, [pc, #180]	; (800afa4 <prvSwitchTimerLists+0xc0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef6:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <prvSwitchTimerLists+0xc0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	3304      	adds	r3, #4
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe f905 	bl	8009114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d02e      	beq.n	800af7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	4413      	add	r3, r2
 800af28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d90e      	bls.n	800af50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af3e:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <prvSwitchTimerLists+0xc0>)
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3304      	adds	r3, #4
 800af46:	4619      	mov	r1, r3
 800af48:	4610      	mov	r0, r2
 800af4a:	f7fe f8aa 	bl	80090a2 <vListInsert>
 800af4e:	e016      	b.n	800af7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af50:	2300      	movs	r3, #0
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	2100      	movs	r1, #0
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fd60 	bl	800aa20 <xTimerGenericCommand>
 800af60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	603b      	str	r3, [r7, #0]
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <prvSwitchTimerLists+0xc0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1b1      	bne.n	800aeec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af88:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <prvSwitchTimerLists+0xc0>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af8e:	4b06      	ldr	r3, [pc, #24]	; (800afa8 <prvSwitchTimerLists+0xc4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <prvSwitchTimerLists+0xc0>)
 800af94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af96:	4a04      	ldr	r2, [pc, #16]	; (800afa8 <prvSwitchTimerLists+0xc4>)
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	6013      	str	r3, [r2, #0]
}
 800af9c:	bf00      	nop
 800af9e:	3718      	adds	r7, #24
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	2000125c 	.word	0x2000125c
 800afa8:	20001260 	.word	0x20001260

0800afac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afb2:	f000 f967 	bl	800b284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afb6:	4b15      	ldr	r3, [pc, #84]	; (800b00c <prvCheckForValidListAndQueue+0x60>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d120      	bne.n	800b000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afbe:	4814      	ldr	r0, [pc, #80]	; (800b010 <prvCheckForValidListAndQueue+0x64>)
 800afc0:	f7fe f81e 	bl	8009000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afc4:	4813      	ldr	r0, [pc, #76]	; (800b014 <prvCheckForValidListAndQueue+0x68>)
 800afc6:	f7fe f81b 	bl	8009000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <prvCheckForValidListAndQueue+0x6c>)
 800afcc:	4a10      	ldr	r2, [pc, #64]	; (800b010 <prvCheckForValidListAndQueue+0x64>)
 800afce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afd0:	4b12      	ldr	r3, [pc, #72]	; (800b01c <prvCheckForValidListAndQueue+0x70>)
 800afd2:	4a10      	ldr	r2, [pc, #64]	; (800b014 <prvCheckForValidListAndQueue+0x68>)
 800afd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afd6:	2300      	movs	r3, #0
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	4b11      	ldr	r3, [pc, #68]	; (800b020 <prvCheckForValidListAndQueue+0x74>)
 800afdc:	4a11      	ldr	r2, [pc, #68]	; (800b024 <prvCheckForValidListAndQueue+0x78>)
 800afde:	2110      	movs	r1, #16
 800afe0:	200a      	movs	r0, #10
 800afe2:	f7fe f929 	bl	8009238 <xQueueGenericCreateStatic>
 800afe6:	4603      	mov	r3, r0
 800afe8:	4a08      	ldr	r2, [pc, #32]	; (800b00c <prvCheckForValidListAndQueue+0x60>)
 800afea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afec:	4b07      	ldr	r3, [pc, #28]	; (800b00c <prvCheckForValidListAndQueue+0x60>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d005      	beq.n	800b000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <prvCheckForValidListAndQueue+0x60>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	490b      	ldr	r1, [pc, #44]	; (800b028 <prvCheckForValidListAndQueue+0x7c>)
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fd42 	bl	8009a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b000:	f000 f970 	bl	800b2e4 <vPortExitCritical>
}
 800b004:	bf00      	nop
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20001264 	.word	0x20001264
 800b010:	20001234 	.word	0x20001234
 800b014:	20001248 	.word	0x20001248
 800b018:	2000125c 	.word	0x2000125c
 800b01c:	20001260 	.word	0x20001260
 800b020:	20001310 	.word	0x20001310
 800b024:	20001270 	.word	0x20001270
 800b028:	08010394 	.word	0x08010394

0800b02c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3b04      	subs	r3, #4
 800b03c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	3b04      	subs	r3, #4
 800b04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f023 0201 	bic.w	r2, r3, #1
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3b04      	subs	r3, #4
 800b05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b05c:	4a0c      	ldr	r2, [pc, #48]	; (800b090 <pxPortInitialiseStack+0x64>)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3b14      	subs	r3, #20
 800b066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3b04      	subs	r3, #4
 800b072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f06f 0202 	mvn.w	r2, #2
 800b07a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	3b20      	subs	r3, #32
 800b080:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b082:	68fb      	ldr	r3, [r7, #12]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	0800b095 	.word	0x0800b095

0800b094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b09e:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <prvTaskExitError+0x54>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0a6:	d00a      	beq.n	800b0be <prvTaskExitError+0x2a>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	60fb      	str	r3, [r7, #12]
}
 800b0ba:	bf00      	nop
 800b0bc:	e7fe      	b.n	800b0bc <prvTaskExitError+0x28>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	60bb      	str	r3, [r7, #8]
}
 800b0d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0d2:	bf00      	nop
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0fc      	beq.n	800b0d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0da:	bf00      	nop
 800b0dc:	bf00      	nop
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	20000010 	.word	0x20000010
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <pxCurrentTCBConst2>)
 800b0f2:	6819      	ldr	r1, [r3, #0]
 800b0f4:	6808      	ldr	r0, [r1, #0]
 800b0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	f380 8809 	msr	PSP, r0
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f04f 0000 	mov.w	r0, #0
 800b106:	f380 8811 	msr	BASEPRI, r0
 800b10a:	4770      	bx	lr
 800b10c:	f3af 8000 	nop.w

0800b110 <pxCurrentTCBConst2>:
 800b110:	20000d34 	.word	0x20000d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop

0800b118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b118:	4808      	ldr	r0, [pc, #32]	; (800b13c <prvPortStartFirstTask+0x24>)
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	6800      	ldr	r0, [r0, #0]
 800b11e:	f380 8808 	msr	MSP, r0
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f380 8814 	msr	CONTROL, r0
 800b12a:	b662      	cpsie	i
 800b12c:	b661      	cpsie	f
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	df00      	svc	0
 800b138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b13a:	bf00      	nop
 800b13c:	e000ed08 	.word	0xe000ed08

0800b140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b146:	4b46      	ldr	r3, [pc, #280]	; (800b260 <xPortStartScheduler+0x120>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a46      	ldr	r2, [pc, #280]	; (800b264 <xPortStartScheduler+0x124>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d10a      	bne.n	800b166 <xPortStartScheduler+0x26>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b166:	4b3e      	ldr	r3, [pc, #248]	; (800b260 <xPortStartScheduler+0x120>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a3f      	ldr	r2, [pc, #252]	; (800b268 <xPortStartScheduler+0x128>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d10a      	bne.n	800b186 <xPortStartScheduler+0x46>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60fb      	str	r3, [r7, #12]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b186:	4b39      	ldr	r3, [pc, #228]	; (800b26c <xPortStartScheduler+0x12c>)
 800b188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	22ff      	movs	r2, #255	; 0xff
 800b196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1a0:	78fb      	ldrb	r3, [r7, #3]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	4b31      	ldr	r3, [pc, #196]	; (800b270 <xPortStartScheduler+0x130>)
 800b1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1ae:	4b31      	ldr	r3, [pc, #196]	; (800b274 <xPortStartScheduler+0x134>)
 800b1b0:	2207      	movs	r2, #7
 800b1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1b4:	e009      	b.n	800b1ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b1b6:	4b2f      	ldr	r3, [pc, #188]	; (800b274 <xPortStartScheduler+0x134>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	4a2d      	ldr	r2, [pc, #180]	; (800b274 <xPortStartScheduler+0x134>)
 800b1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d2:	2b80      	cmp	r3, #128	; 0x80
 800b1d4:	d0ef      	beq.n	800b1b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1d6:	4b27      	ldr	r3, [pc, #156]	; (800b274 <xPortStartScheduler+0x134>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f1c3 0307 	rsb	r3, r3, #7
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d00a      	beq.n	800b1f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	60bb      	str	r3, [r7, #8]
}
 800b1f4:	bf00      	nop
 800b1f6:	e7fe      	b.n	800b1f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1f8:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <xPortStartScheduler+0x134>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	021b      	lsls	r3, r3, #8
 800b1fe:	4a1d      	ldr	r2, [pc, #116]	; (800b274 <xPortStartScheduler+0x134>)
 800b200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b202:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <xPortStartScheduler+0x134>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b20a:	4a1a      	ldr	r2, [pc, #104]	; (800b274 <xPortStartScheduler+0x134>)
 800b20c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	b2da      	uxtb	r2, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b216:	4b18      	ldr	r3, [pc, #96]	; (800b278 <xPortStartScheduler+0x138>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <xPortStartScheduler+0x138>)
 800b21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b222:	4b15      	ldr	r3, [pc, #84]	; (800b278 <xPortStartScheduler+0x138>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a14      	ldr	r2, [pc, #80]	; (800b278 <xPortStartScheduler+0x138>)
 800b228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b22c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b22e:	f000 f8dd 	bl	800b3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b232:	4b12      	ldr	r3, [pc, #72]	; (800b27c <xPortStartScheduler+0x13c>)
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b238:	f000 f8fc 	bl	800b434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b23c:	4b10      	ldr	r3, [pc, #64]	; (800b280 <xPortStartScheduler+0x140>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0f      	ldr	r2, [pc, #60]	; (800b280 <xPortStartScheduler+0x140>)
 800b242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b248:	f7ff ff66 	bl	800b118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b24c:	f7ff f84a 	bl	800a2e4 <vTaskSwitchContext>
	prvTaskExitError();
 800b250:	f7ff ff20 	bl	800b094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	e000ed00 	.word	0xe000ed00
 800b264:	410fc271 	.word	0x410fc271
 800b268:	410fc270 	.word	0x410fc270
 800b26c:	e000e400 	.word	0xe000e400
 800b270:	20001360 	.word	0x20001360
 800b274:	20001364 	.word	0x20001364
 800b278:	e000ed20 	.word	0xe000ed20
 800b27c:	20000010 	.word	0x20000010
 800b280:	e000ef34 	.word	0xe000ef34

0800b284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	607b      	str	r3, [r7, #4]
}
 800b29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b29e:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <vPortEnterCritical+0x58>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	4a0d      	ldr	r2, [pc, #52]	; (800b2dc <vPortEnterCritical+0x58>)
 800b2a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2a8:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <vPortEnterCritical+0x58>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d10f      	bne.n	800b2d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2b0:	4b0b      	ldr	r3, [pc, #44]	; (800b2e0 <vPortEnterCritical+0x5c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	603b      	str	r3, [r7, #0]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <vPortEnterCritical+0x4a>
	}
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	20000010 	.word	0x20000010
 800b2e0:	e000ed04 	.word	0xe000ed04

0800b2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2ea:	4b12      	ldr	r3, [pc, #72]	; (800b334 <vPortExitCritical+0x50>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <vPortExitCritical+0x24>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	607b      	str	r3, [r7, #4]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <vPortExitCritical+0x50>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	4a09      	ldr	r2, [pc, #36]	; (800b334 <vPortExitCritical+0x50>)
 800b310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b312:	4b08      	ldr	r3, [pc, #32]	; (800b334 <vPortExitCritical+0x50>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <vPortExitCritical+0x42>
 800b31a:	2300      	movs	r3, #0
 800b31c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f383 8811 	msr	BASEPRI, r3
}
 800b324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20000010 	.word	0x20000010
	...

0800b340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b340:	f3ef 8009 	mrs	r0, PSP
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <pxCurrentTCBConst>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	f01e 0f10 	tst.w	lr, #16
 800b350:	bf08      	it	eq
 800b352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35a:	6010      	str	r0, [r2, #0]
 800b35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b364:	f380 8811 	msr	BASEPRI, r0
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f7fe ffb8 	bl	800a2e4 <vTaskSwitchContext>
 800b374:	f04f 0000 	mov.w	r0, #0
 800b378:	f380 8811 	msr	BASEPRI, r0
 800b37c:	bc09      	pop	{r0, r3}
 800b37e:	6819      	ldr	r1, [r3, #0]
 800b380:	6808      	ldr	r0, [r1, #0]
 800b382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b386:	f01e 0f10 	tst.w	lr, #16
 800b38a:	bf08      	it	eq
 800b38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b390:	f380 8809 	msr	PSP, r0
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	f3af 8000 	nop.w

0800b3a0 <pxCurrentTCBConst>:
 800b3a0:	20000d34 	.word	0x20000d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop

0800b3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	607b      	str	r3, [r7, #4]
}
 800b3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3c2:	f7fe fed5 	bl	800a170 <xTaskIncrementTick>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3cc:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <xPortSysTickHandler+0x40>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	f383 8811 	msr	BASEPRI, r3
}
 800b3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	e000ed04 	.word	0xe000ed04

0800b3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	; (800b420 <vPortSetupTimerInterrupt+0x34>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <vPortSetupTimerInterrupt+0x38>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <vPortSetupTimerInterrupt+0x3c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <vPortSetupTimerInterrupt+0x40>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	099b      	lsrs	r3, r3, #6
 800b408:	4a09      	ldr	r2, [pc, #36]	; (800b430 <vPortSetupTimerInterrupt+0x44>)
 800b40a:	3b01      	subs	r3, #1
 800b40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b40e:	4b04      	ldr	r3, [pc, #16]	; (800b420 <vPortSetupTimerInterrupt+0x34>)
 800b410:	2207      	movs	r2, #7
 800b412:	601a      	str	r2, [r3, #0]
}
 800b414:	bf00      	nop
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	e000e010 	.word	0xe000e010
 800b424:	e000e018 	.word	0xe000e018
 800b428:	20000004 	.word	0x20000004
 800b42c:	10624dd3 	.word	0x10624dd3
 800b430:	e000e014 	.word	0xe000e014

0800b434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b444 <vPortEnableVFP+0x10>
 800b438:	6801      	ldr	r1, [r0, #0]
 800b43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b43e:	6001      	str	r1, [r0, #0]
 800b440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b442:	bf00      	nop
 800b444:	e000ed88 	.word	0xe000ed88

0800b448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b44e:	f3ef 8305 	mrs	r3, IPSR
 800b452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2b0f      	cmp	r3, #15
 800b458:	d914      	bls.n	800b484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b45a:	4a17      	ldr	r2, [pc, #92]	; (800b4b8 <vPortValidateInterruptPriority+0x70>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b464:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <vPortValidateInterruptPriority+0x74>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	7afa      	ldrb	r2, [r7, #11]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d20a      	bcs.n	800b484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	607b      	str	r3, [r7, #4]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b484:	4b0e      	ldr	r3, [pc, #56]	; (800b4c0 <vPortValidateInterruptPriority+0x78>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b48c:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <vPortValidateInterruptPriority+0x7c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d90a      	bls.n	800b4aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	603b      	str	r3, [r7, #0]
}
 800b4a6:	bf00      	nop
 800b4a8:	e7fe      	b.n	800b4a8 <vPortValidateInterruptPriority+0x60>
	}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	e000e3f0 	.word	0xe000e3f0
 800b4bc:	20001360 	.word	0x20001360
 800b4c0:	e000ed0c 	.word	0xe000ed0c
 800b4c4:	20001364 	.word	0x20001364

0800b4c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08a      	sub	sp, #40	; 0x28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4d4:	f7fe fd90 	bl	8009ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4d8:	4b5b      	ldr	r3, [pc, #364]	; (800b648 <pvPortMalloc+0x180>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4e0:	f000 f920 	bl	800b724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4e4:	4b59      	ldr	r3, [pc, #356]	; (800b64c <pvPortMalloc+0x184>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f040 8093 	bne.w	800b618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d01d      	beq.n	800b534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f003 0307 	and.w	r3, r3, #7
 800b506:	2b00      	cmp	r3, #0
 800b508:	d014      	beq.n	800b534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f023 0307 	bic.w	r3, r3, #7
 800b510:	3308      	adds	r3, #8
 800b512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <pvPortMalloc+0x6c>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	617b      	str	r3, [r7, #20]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d06e      	beq.n	800b618 <pvPortMalloc+0x150>
 800b53a:	4b45      	ldr	r3, [pc, #276]	; (800b650 <pvPortMalloc+0x188>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	429a      	cmp	r2, r3
 800b542:	d869      	bhi.n	800b618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b544:	4b43      	ldr	r3, [pc, #268]	; (800b654 <pvPortMalloc+0x18c>)
 800b546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b548:	4b42      	ldr	r3, [pc, #264]	; (800b654 <pvPortMalloc+0x18c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b54e:	e004      	b.n	800b55a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	d903      	bls.n	800b56c <pvPortMalloc+0xa4>
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f1      	bne.n	800b550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b56c:	4b36      	ldr	r3, [pc, #216]	; (800b648 <pvPortMalloc+0x180>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	429a      	cmp	r2, r3
 800b574:	d050      	beq.n	800b618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2208      	movs	r2, #8
 800b57c:	4413      	add	r3, r2
 800b57e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	1ad2      	subs	r2, r2, r3
 800b590:	2308      	movs	r3, #8
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	429a      	cmp	r2, r3
 800b596:	d91f      	bls.n	800b5d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4413      	add	r3, r2
 800b59e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	f003 0307 	and.w	r3, r3, #7
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	613b      	str	r3, [r7, #16]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	1ad2      	subs	r2, r2, r3
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5d2:	69b8      	ldr	r0, [r7, #24]
 800b5d4:	f000 f908 	bl	800b7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5d8:	4b1d      	ldr	r3, [pc, #116]	; (800b650 <pvPortMalloc+0x188>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	4a1b      	ldr	r2, [pc, #108]	; (800b650 <pvPortMalloc+0x188>)
 800b5e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <pvPortMalloc+0x188>)
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <pvPortMalloc+0x190>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d203      	bcs.n	800b5fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5f2:	4b17      	ldr	r3, [pc, #92]	; (800b650 <pvPortMalloc+0x188>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a18      	ldr	r2, [pc, #96]	; (800b658 <pvPortMalloc+0x190>)
 800b5f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	4b13      	ldr	r3, [pc, #76]	; (800b64c <pvPortMalloc+0x184>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	431a      	orrs	r2, r3
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <pvPortMalloc+0x194>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	4a11      	ldr	r2, [pc, #68]	; (800b65c <pvPortMalloc+0x194>)
 800b616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b618:	f7fe fcfc 	bl	800a014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	f003 0307 	and.w	r3, r3, #7
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <pvPortMalloc+0x174>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	60fb      	str	r3, [r7, #12]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <pvPortMalloc+0x172>
	return pvReturn;
 800b63c:	69fb      	ldr	r3, [r7, #28]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3728      	adds	r7, #40	; 0x28
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	20001f28 	.word	0x20001f28
 800b64c:	20001f3c 	.word	0x20001f3c
 800b650:	20001f2c 	.word	0x20001f2c
 800b654:	20001f20 	.word	0x20001f20
 800b658:	20001f30 	.word	0x20001f30
 800b65c:	20001f34 	.word	0x20001f34

0800b660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d04d      	beq.n	800b70e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b672:	2308      	movs	r3, #8
 800b674:	425b      	negs	r3, r3
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4413      	add	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	4b24      	ldr	r3, [pc, #144]	; (800b718 <vPortFree+0xb8>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4013      	ands	r3, r2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <vPortFree+0x44>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60fb      	str	r3, [r7, #12]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <vPortFree+0x62>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	60bb      	str	r3, [r7, #8]
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	4b14      	ldr	r3, [pc, #80]	; (800b718 <vPortFree+0xb8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d01e      	beq.n	800b70e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d11a      	bne.n	800b70e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	4b0e      	ldr	r3, [pc, #56]	; (800b718 <vPortFree+0xb8>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	43db      	mvns	r3, r3
 800b6e2:	401a      	ands	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6e8:	f7fe fc86 	bl	8009ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <vPortFree+0xbc>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	4a09      	ldr	r2, [pc, #36]	; (800b71c <vPortFree+0xbc>)
 800b6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6fa:	6938      	ldr	r0, [r7, #16]
 800b6fc:	f000 f874 	bl	800b7e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <vPortFree+0xc0>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3301      	adds	r3, #1
 800b706:	4a06      	ldr	r2, [pc, #24]	; (800b720 <vPortFree+0xc0>)
 800b708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b70a:	f7fe fc83 	bl	800a014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b70e:	bf00      	nop
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20001f3c 	.word	0x20001f3c
 800b71c:	20001f2c 	.word	0x20001f2c
 800b720:	20001f38 	.word	0x20001f38

0800b724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b72a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b730:	4b27      	ldr	r3, [pc, #156]	; (800b7d0 <prvHeapInit+0xac>)
 800b732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00c      	beq.n	800b758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3307      	adds	r3, #7
 800b742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	4a1f      	ldr	r2, [pc, #124]	; (800b7d0 <prvHeapInit+0xac>)
 800b754:	4413      	add	r3, r2
 800b756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b75c:	4a1d      	ldr	r2, [pc, #116]	; (800b7d4 <prvHeapInit+0xb0>)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b762:	4b1c      	ldr	r3, [pc, #112]	; (800b7d4 <prvHeapInit+0xb0>)
 800b764:	2200      	movs	r2, #0
 800b766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	4413      	add	r3, r2
 800b76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b770:	2208      	movs	r2, #8
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f023 0307 	bic.w	r3, r3, #7
 800b77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <prvHeapInit+0xb4>)
 800b784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b786:	4b14      	ldr	r3, [pc, #80]	; (800b7d8 <prvHeapInit+0xb4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2200      	movs	r2, #0
 800b78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b78e:	4b12      	ldr	r3, [pc, #72]	; (800b7d8 <prvHeapInit+0xb4>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	1ad2      	subs	r2, r2, r3
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <prvHeapInit+0xb4>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <prvHeapInit+0xb8>)
 800b7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4a09      	ldr	r2, [pc, #36]	; (800b7e0 <prvHeapInit+0xbc>)
 800b7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7bc:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <prvHeapInit+0xc0>)
 800b7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b7c2:	601a      	str	r2, [r3, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	20001368 	.word	0x20001368
 800b7d4:	20001f20 	.word	0x20001f20
 800b7d8:	20001f28 	.word	0x20001f28
 800b7dc:	20001f30 	.word	0x20001f30
 800b7e0:	20001f2c 	.word	0x20001f2c
 800b7e4:	20001f3c 	.word	0x20001f3c

0800b7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7f0:	4b28      	ldr	r3, [pc, #160]	; (800b894 <prvInsertBlockIntoFreeList+0xac>)
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	e002      	b.n	800b7fc <prvInsertBlockIntoFreeList+0x14>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d8f7      	bhi.n	800b7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	4413      	add	r3, r2
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d108      	bne.n	800b82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	441a      	add	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	68ba      	ldr	r2, [r7, #8]
 800b834:	441a      	add	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d118      	bne.n	800b870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <prvInsertBlockIntoFreeList+0xb0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d00d      	beq.n	800b866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	441a      	add	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	e008      	b.n	800b878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b866:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <prvInsertBlockIntoFreeList+0xb0>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	e003      	b.n	800b878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d002      	beq.n	800b886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b886:	bf00      	nop
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20001f20 	.word	0x20001f20
 800b898:	20001f28 	.word	0x20001f28

0800b89c <malloc>:
 800b89c:	4b02      	ldr	r3, [pc, #8]	; (800b8a8 <malloc+0xc>)
 800b89e:	4601      	mov	r1, r0
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	f000 b823 	b.w	800b8ec <_malloc_r>
 800b8a6:	bf00      	nop
 800b8a8:	2000006c 	.word	0x2000006c

0800b8ac <sbrk_aligned>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	4e0e      	ldr	r6, [pc, #56]	; (800b8e8 <sbrk_aligned+0x3c>)
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	6831      	ldr	r1, [r6, #0]
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	b911      	cbnz	r1, 800b8be <sbrk_aligned+0x12>
 800b8b8:	f001 f8e8 	bl	800ca8c <_sbrk_r>
 800b8bc:	6030      	str	r0, [r6, #0]
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f001 f8e3 	bl	800ca8c <_sbrk_r>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	d00a      	beq.n	800b8e0 <sbrk_aligned+0x34>
 800b8ca:	1cc4      	adds	r4, r0, #3
 800b8cc:	f024 0403 	bic.w	r4, r4, #3
 800b8d0:	42a0      	cmp	r0, r4
 800b8d2:	d007      	beq.n	800b8e4 <sbrk_aligned+0x38>
 800b8d4:	1a21      	subs	r1, r4, r0
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f001 f8d8 	bl	800ca8c <_sbrk_r>
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d101      	bne.n	800b8e4 <sbrk_aligned+0x38>
 800b8e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	20001f44 	.word	0x20001f44

0800b8ec <_malloc_r>:
 800b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	1ccd      	adds	r5, r1, #3
 800b8f2:	f025 0503 	bic.w	r5, r5, #3
 800b8f6:	3508      	adds	r5, #8
 800b8f8:	2d0c      	cmp	r5, #12
 800b8fa:	bf38      	it	cc
 800b8fc:	250c      	movcc	r5, #12
 800b8fe:	2d00      	cmp	r5, #0
 800b900:	4607      	mov	r7, r0
 800b902:	db01      	blt.n	800b908 <_malloc_r+0x1c>
 800b904:	42a9      	cmp	r1, r5
 800b906:	d905      	bls.n	800b914 <_malloc_r+0x28>
 800b908:	230c      	movs	r3, #12
 800b90a:	603b      	str	r3, [r7, #0]
 800b90c:	2600      	movs	r6, #0
 800b90e:	4630      	mov	r0, r6
 800b910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b9e8 <_malloc_r+0xfc>
 800b918:	f000 f868 	bl	800b9ec <__malloc_lock>
 800b91c:	f8d8 3000 	ldr.w	r3, [r8]
 800b920:	461c      	mov	r4, r3
 800b922:	bb5c      	cbnz	r4, 800b97c <_malloc_r+0x90>
 800b924:	4629      	mov	r1, r5
 800b926:	4638      	mov	r0, r7
 800b928:	f7ff ffc0 	bl	800b8ac <sbrk_aligned>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	4604      	mov	r4, r0
 800b930:	d155      	bne.n	800b9de <_malloc_r+0xf2>
 800b932:	f8d8 4000 	ldr.w	r4, [r8]
 800b936:	4626      	mov	r6, r4
 800b938:	2e00      	cmp	r6, #0
 800b93a:	d145      	bne.n	800b9c8 <_malloc_r+0xdc>
 800b93c:	2c00      	cmp	r4, #0
 800b93e:	d048      	beq.n	800b9d2 <_malloc_r+0xe6>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	4631      	mov	r1, r6
 800b944:	4638      	mov	r0, r7
 800b946:	eb04 0903 	add.w	r9, r4, r3
 800b94a:	f001 f89f 	bl	800ca8c <_sbrk_r>
 800b94e:	4581      	cmp	r9, r0
 800b950:	d13f      	bne.n	800b9d2 <_malloc_r+0xe6>
 800b952:	6821      	ldr	r1, [r4, #0]
 800b954:	1a6d      	subs	r5, r5, r1
 800b956:	4629      	mov	r1, r5
 800b958:	4638      	mov	r0, r7
 800b95a:	f7ff ffa7 	bl	800b8ac <sbrk_aligned>
 800b95e:	3001      	adds	r0, #1
 800b960:	d037      	beq.n	800b9d2 <_malloc_r+0xe6>
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	442b      	add	r3, r5
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	f8d8 3000 	ldr.w	r3, [r8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d038      	beq.n	800b9e2 <_malloc_r+0xf6>
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	42a2      	cmp	r2, r4
 800b974:	d12b      	bne.n	800b9ce <_malloc_r+0xe2>
 800b976:	2200      	movs	r2, #0
 800b978:	605a      	str	r2, [r3, #4]
 800b97a:	e00f      	b.n	800b99c <_malloc_r+0xb0>
 800b97c:	6822      	ldr	r2, [r4, #0]
 800b97e:	1b52      	subs	r2, r2, r5
 800b980:	d41f      	bmi.n	800b9c2 <_malloc_r+0xd6>
 800b982:	2a0b      	cmp	r2, #11
 800b984:	d917      	bls.n	800b9b6 <_malloc_r+0xca>
 800b986:	1961      	adds	r1, r4, r5
 800b988:	42a3      	cmp	r3, r4
 800b98a:	6025      	str	r5, [r4, #0]
 800b98c:	bf18      	it	ne
 800b98e:	6059      	strne	r1, [r3, #4]
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	bf08      	it	eq
 800b994:	f8c8 1000 	streq.w	r1, [r8]
 800b998:	5162      	str	r2, [r4, r5]
 800b99a:	604b      	str	r3, [r1, #4]
 800b99c:	4638      	mov	r0, r7
 800b99e:	f104 060b 	add.w	r6, r4, #11
 800b9a2:	f000 f829 	bl	800b9f8 <__malloc_unlock>
 800b9a6:	f026 0607 	bic.w	r6, r6, #7
 800b9aa:	1d23      	adds	r3, r4, #4
 800b9ac:	1af2      	subs	r2, r6, r3
 800b9ae:	d0ae      	beq.n	800b90e <_malloc_r+0x22>
 800b9b0:	1b9b      	subs	r3, r3, r6
 800b9b2:	50a3      	str	r3, [r4, r2]
 800b9b4:	e7ab      	b.n	800b90e <_malloc_r+0x22>
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	6862      	ldr	r2, [r4, #4]
 800b9ba:	d1dd      	bne.n	800b978 <_malloc_r+0x8c>
 800b9bc:	f8c8 2000 	str.w	r2, [r8]
 800b9c0:	e7ec      	b.n	800b99c <_malloc_r+0xb0>
 800b9c2:	4623      	mov	r3, r4
 800b9c4:	6864      	ldr	r4, [r4, #4]
 800b9c6:	e7ac      	b.n	800b922 <_malloc_r+0x36>
 800b9c8:	4634      	mov	r4, r6
 800b9ca:	6876      	ldr	r6, [r6, #4]
 800b9cc:	e7b4      	b.n	800b938 <_malloc_r+0x4c>
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	e7cc      	b.n	800b96c <_malloc_r+0x80>
 800b9d2:	230c      	movs	r3, #12
 800b9d4:	603b      	str	r3, [r7, #0]
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	f000 f80e 	bl	800b9f8 <__malloc_unlock>
 800b9dc:	e797      	b.n	800b90e <_malloc_r+0x22>
 800b9de:	6025      	str	r5, [r4, #0]
 800b9e0:	e7dc      	b.n	800b99c <_malloc_r+0xb0>
 800b9e2:	605b      	str	r3, [r3, #4]
 800b9e4:	deff      	udf	#255	; 0xff
 800b9e6:	bf00      	nop
 800b9e8:	20001f40 	.word	0x20001f40

0800b9ec <__malloc_lock>:
 800b9ec:	4801      	ldr	r0, [pc, #4]	; (800b9f4 <__malloc_lock+0x8>)
 800b9ee:	f001 b89a 	b.w	800cb26 <__retarget_lock_acquire_recursive>
 800b9f2:	bf00      	nop
 800b9f4:	20002088 	.word	0x20002088

0800b9f8 <__malloc_unlock>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__malloc_unlock+0x8>)
 800b9fa:	f001 b895 	b.w	800cb28 <__retarget_lock_release_recursive>
 800b9fe:	bf00      	nop
 800ba00:	20002088 	.word	0x20002088

0800ba04 <__cvt>:
 800ba04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba08:	ec55 4b10 	vmov	r4, r5, d0
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	460e      	mov	r6, r1
 800ba10:	4619      	mov	r1, r3
 800ba12:	462b      	mov	r3, r5
 800ba14:	bfbb      	ittet	lt
 800ba16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ba1a:	461d      	movlt	r5, r3
 800ba1c:	2300      	movge	r3, #0
 800ba1e:	232d      	movlt	r3, #45	; 0x2d
 800ba20:	700b      	strb	r3, [r1, #0]
 800ba22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ba28:	4691      	mov	r9, r2
 800ba2a:	f023 0820 	bic.w	r8, r3, #32
 800ba2e:	bfbc      	itt	lt
 800ba30:	4622      	movlt	r2, r4
 800ba32:	4614      	movlt	r4, r2
 800ba34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba38:	d005      	beq.n	800ba46 <__cvt+0x42>
 800ba3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba3e:	d100      	bne.n	800ba42 <__cvt+0x3e>
 800ba40:	3601      	adds	r6, #1
 800ba42:	2102      	movs	r1, #2
 800ba44:	e000      	b.n	800ba48 <__cvt+0x44>
 800ba46:	2103      	movs	r1, #3
 800ba48:	ab03      	add	r3, sp, #12
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	ab02      	add	r3, sp, #8
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	ec45 4b10 	vmov	d0, r4, r5
 800ba54:	4653      	mov	r3, sl
 800ba56:	4632      	mov	r2, r6
 800ba58:	f001 f906 	bl	800cc68 <_dtoa_r>
 800ba5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ba60:	4607      	mov	r7, r0
 800ba62:	d102      	bne.n	800ba6a <__cvt+0x66>
 800ba64:	f019 0f01 	tst.w	r9, #1
 800ba68:	d022      	beq.n	800bab0 <__cvt+0xac>
 800ba6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba6e:	eb07 0906 	add.w	r9, r7, r6
 800ba72:	d110      	bne.n	800ba96 <__cvt+0x92>
 800ba74:	783b      	ldrb	r3, [r7, #0]
 800ba76:	2b30      	cmp	r3, #48	; 0x30
 800ba78:	d10a      	bne.n	800ba90 <__cvt+0x8c>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7f5 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba86:	b918      	cbnz	r0, 800ba90 <__cvt+0x8c>
 800ba88:	f1c6 0601 	rsb	r6, r6, #1
 800ba8c:	f8ca 6000 	str.w	r6, [sl]
 800ba90:	f8da 3000 	ldr.w	r3, [sl]
 800ba94:	4499      	add	r9, r3
 800ba96:	2200      	movs	r2, #0
 800ba98:	2300      	movs	r3, #0
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f7f5 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 800baa2:	b108      	cbz	r0, 800baa8 <__cvt+0xa4>
 800baa4:	f8cd 900c 	str.w	r9, [sp, #12]
 800baa8:	2230      	movs	r2, #48	; 0x30
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	454b      	cmp	r3, r9
 800baae:	d307      	bcc.n	800bac0 <__cvt+0xbc>
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bab4:	1bdb      	subs	r3, r3, r7
 800bab6:	4638      	mov	r0, r7
 800bab8:	6013      	str	r3, [r2, #0]
 800baba:	b004      	add	sp, #16
 800babc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac0:	1c59      	adds	r1, r3, #1
 800bac2:	9103      	str	r1, [sp, #12]
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	e7f0      	b.n	800baaa <__cvt+0xa6>

0800bac8 <__exponent>:
 800bac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baca:	4603      	mov	r3, r0
 800bacc:	2900      	cmp	r1, #0
 800bace:	bfb8      	it	lt
 800bad0:	4249      	neglt	r1, r1
 800bad2:	f803 2b02 	strb.w	r2, [r3], #2
 800bad6:	bfb4      	ite	lt
 800bad8:	222d      	movlt	r2, #45	; 0x2d
 800bada:	222b      	movge	r2, #43	; 0x2b
 800badc:	2909      	cmp	r1, #9
 800bade:	7042      	strb	r2, [r0, #1]
 800bae0:	dd2a      	ble.n	800bb38 <__exponent+0x70>
 800bae2:	f10d 0207 	add.w	r2, sp, #7
 800bae6:	4617      	mov	r7, r2
 800bae8:	260a      	movs	r6, #10
 800baea:	4694      	mov	ip, r2
 800baec:	fb91 f5f6 	sdiv	r5, r1, r6
 800baf0:	fb06 1415 	mls	r4, r6, r5, r1
 800baf4:	3430      	adds	r4, #48	; 0x30
 800baf6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bafa:	460c      	mov	r4, r1
 800bafc:	2c63      	cmp	r4, #99	; 0x63
 800bafe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bb02:	4629      	mov	r1, r5
 800bb04:	dcf1      	bgt.n	800baea <__exponent+0x22>
 800bb06:	3130      	adds	r1, #48	; 0x30
 800bb08:	f1ac 0402 	sub.w	r4, ip, #2
 800bb0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bb10:	1c41      	adds	r1, r0, #1
 800bb12:	4622      	mov	r2, r4
 800bb14:	42ba      	cmp	r2, r7
 800bb16:	d30a      	bcc.n	800bb2e <__exponent+0x66>
 800bb18:	f10d 0209 	add.w	r2, sp, #9
 800bb1c:	eba2 020c 	sub.w	r2, r2, ip
 800bb20:	42bc      	cmp	r4, r7
 800bb22:	bf88      	it	hi
 800bb24:	2200      	movhi	r2, #0
 800bb26:	4413      	add	r3, r2
 800bb28:	1a18      	subs	r0, r3, r0
 800bb2a:	b003      	add	sp, #12
 800bb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bb32:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bb36:	e7ed      	b.n	800bb14 <__exponent+0x4c>
 800bb38:	2330      	movs	r3, #48	; 0x30
 800bb3a:	3130      	adds	r1, #48	; 0x30
 800bb3c:	7083      	strb	r3, [r0, #2]
 800bb3e:	70c1      	strb	r1, [r0, #3]
 800bb40:	1d03      	adds	r3, r0, #4
 800bb42:	e7f1      	b.n	800bb28 <__exponent+0x60>

0800bb44 <_printf_float>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	ed2d 8b02 	vpush	{d8}
 800bb4c:	b08d      	sub	sp, #52	; 0x34
 800bb4e:	460c      	mov	r4, r1
 800bb50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb54:	4616      	mov	r6, r2
 800bb56:	461f      	mov	r7, r3
 800bb58:	4605      	mov	r5, r0
 800bb5a:	f000 ff09 	bl	800c970 <_localeconv_r>
 800bb5e:	f8d0 a000 	ldr.w	sl, [r0]
 800bb62:	4650      	mov	r0, sl
 800bb64:	f7f4 fb84 	bl	8000270 <strlen>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	9305      	str	r3, [sp, #20]
 800bb70:	f8d8 3000 	ldr.w	r3, [r8]
 800bb74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bb78:	3307      	adds	r3, #7
 800bb7a:	f023 0307 	bic.w	r3, r3, #7
 800bb7e:	f103 0208 	add.w	r2, r3, #8
 800bb82:	f8c8 2000 	str.w	r2, [r8]
 800bb86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb8e:	9307      	str	r3, [sp, #28]
 800bb90:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb94:	ee08 0a10 	vmov	s16, r0
 800bb98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bb9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bba0:	4b9e      	ldr	r3, [pc, #632]	; (800be1c <_printf_float+0x2d8>)
 800bba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bba6:	f7f4 ffc1 	bl	8000b2c <__aeabi_dcmpun>
 800bbaa:	bb88      	cbnz	r0, 800bc10 <_printf_float+0xcc>
 800bbac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbb0:	4b9a      	ldr	r3, [pc, #616]	; (800be1c <_printf_float+0x2d8>)
 800bbb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbb6:	f7f4 ff9b 	bl	8000af0 <__aeabi_dcmple>
 800bbba:	bb48      	cbnz	r0, 800bc10 <_printf_float+0xcc>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	f7f4 ff8a 	bl	8000adc <__aeabi_dcmplt>
 800bbc8:	b110      	cbz	r0, 800bbd0 <_printf_float+0x8c>
 800bbca:	232d      	movs	r3, #45	; 0x2d
 800bbcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd0:	4a93      	ldr	r2, [pc, #588]	; (800be20 <_printf_float+0x2dc>)
 800bbd2:	4b94      	ldr	r3, [pc, #592]	; (800be24 <_printf_float+0x2e0>)
 800bbd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bbd8:	bf94      	ite	ls
 800bbda:	4690      	movls	r8, r2
 800bbdc:	4698      	movhi	r8, r3
 800bbde:	2303      	movs	r3, #3
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	9b05      	ldr	r3, [sp, #20]
 800bbe4:	f023 0304 	bic.w	r3, r3, #4
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	9700      	str	r7, [sp, #0]
 800bbf0:	4633      	mov	r3, r6
 800bbf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f000 f9da 	bl	800bfb0 <_printf_common>
 800bbfc:	3001      	adds	r0, #1
 800bbfe:	f040 8090 	bne.w	800bd22 <_printf_float+0x1de>
 800bc02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc06:	b00d      	add	sp, #52	; 0x34
 800bc08:	ecbd 8b02 	vpop	{d8}
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc10:	4642      	mov	r2, r8
 800bc12:	464b      	mov	r3, r9
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f4 ff88 	bl	8000b2c <__aeabi_dcmpun>
 800bc1c:	b140      	cbz	r0, 800bc30 <_printf_float+0xec>
 800bc1e:	464b      	mov	r3, r9
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	bfbc      	itt	lt
 800bc24:	232d      	movlt	r3, #45	; 0x2d
 800bc26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc2a:	4a7f      	ldr	r2, [pc, #508]	; (800be28 <_printf_float+0x2e4>)
 800bc2c:	4b7f      	ldr	r3, [pc, #508]	; (800be2c <_printf_float+0x2e8>)
 800bc2e:	e7d1      	b.n	800bbd4 <_printf_float+0x90>
 800bc30:	6863      	ldr	r3, [r4, #4]
 800bc32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bc36:	9206      	str	r2, [sp, #24]
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	d13f      	bne.n	800bcbc <_printf_float+0x178>
 800bc3c:	2306      	movs	r3, #6
 800bc3e:	6063      	str	r3, [r4, #4]
 800bc40:	9b05      	ldr	r3, [sp, #20]
 800bc42:	6861      	ldr	r1, [r4, #4]
 800bc44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9303      	str	r3, [sp, #12]
 800bc4c:	ab0a      	add	r3, sp, #40	; 0x28
 800bc4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bc52:	ab09      	add	r3, sp, #36	; 0x24
 800bc54:	ec49 8b10 	vmov	d0, r8, r9
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	6022      	str	r2, [r4, #0]
 800bc5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bc60:	4628      	mov	r0, r5
 800bc62:	f7ff fecf 	bl	800ba04 <__cvt>
 800bc66:	9b06      	ldr	r3, [sp, #24]
 800bc68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc6a:	2b47      	cmp	r3, #71	; 0x47
 800bc6c:	4680      	mov	r8, r0
 800bc6e:	d108      	bne.n	800bc82 <_printf_float+0x13e>
 800bc70:	1cc8      	adds	r0, r1, #3
 800bc72:	db02      	blt.n	800bc7a <_printf_float+0x136>
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	4299      	cmp	r1, r3
 800bc78:	dd41      	ble.n	800bcfe <_printf_float+0x1ba>
 800bc7a:	f1ab 0302 	sub.w	r3, fp, #2
 800bc7e:	fa5f fb83 	uxtb.w	fp, r3
 800bc82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc86:	d820      	bhi.n	800bcca <_printf_float+0x186>
 800bc88:	3901      	subs	r1, #1
 800bc8a:	465a      	mov	r2, fp
 800bc8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc90:	9109      	str	r1, [sp, #36]	; 0x24
 800bc92:	f7ff ff19 	bl	800bac8 <__exponent>
 800bc96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc98:	1813      	adds	r3, r2, r0
 800bc9a:	2a01      	cmp	r2, #1
 800bc9c:	4681      	mov	r9, r0
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	dc02      	bgt.n	800bca8 <_printf_float+0x164>
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	07d2      	lsls	r2, r2, #31
 800bca6:	d501      	bpl.n	800bcac <_printf_float+0x168>
 800bca8:	3301      	adds	r3, #1
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d09c      	beq.n	800bbee <_printf_float+0xaa>
 800bcb4:	232d      	movs	r3, #45	; 0x2d
 800bcb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcba:	e798      	b.n	800bbee <_printf_float+0xaa>
 800bcbc:	9a06      	ldr	r2, [sp, #24]
 800bcbe:	2a47      	cmp	r2, #71	; 0x47
 800bcc0:	d1be      	bne.n	800bc40 <_printf_float+0xfc>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1bc      	bne.n	800bc40 <_printf_float+0xfc>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e7b9      	b.n	800bc3e <_printf_float+0xfa>
 800bcca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bcce:	d118      	bne.n	800bd02 <_printf_float+0x1be>
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	dd0b      	ble.n	800bcee <_printf_float+0x1aa>
 800bcd6:	6121      	str	r1, [r4, #16]
 800bcd8:	b913      	cbnz	r3, 800bce0 <_printf_float+0x19c>
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	07d0      	lsls	r0, r2, #31
 800bcde:	d502      	bpl.n	800bce6 <_printf_float+0x1a2>
 800bce0:	3301      	adds	r3, #1
 800bce2:	440b      	add	r3, r1
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bce8:	f04f 0900 	mov.w	r9, #0
 800bcec:	e7de      	b.n	800bcac <_printf_float+0x168>
 800bcee:	b913      	cbnz	r3, 800bcf6 <_printf_float+0x1b2>
 800bcf0:	6822      	ldr	r2, [r4, #0]
 800bcf2:	07d2      	lsls	r2, r2, #31
 800bcf4:	d501      	bpl.n	800bcfa <_printf_float+0x1b6>
 800bcf6:	3302      	adds	r3, #2
 800bcf8:	e7f4      	b.n	800bce4 <_printf_float+0x1a0>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e7f2      	b.n	800bce4 <_printf_float+0x1a0>
 800bcfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd04:	4299      	cmp	r1, r3
 800bd06:	db05      	blt.n	800bd14 <_printf_float+0x1d0>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	6121      	str	r1, [r4, #16]
 800bd0c:	07d8      	lsls	r0, r3, #31
 800bd0e:	d5ea      	bpl.n	800bce6 <_printf_float+0x1a2>
 800bd10:	1c4b      	adds	r3, r1, #1
 800bd12:	e7e7      	b.n	800bce4 <_printf_float+0x1a0>
 800bd14:	2900      	cmp	r1, #0
 800bd16:	bfd4      	ite	le
 800bd18:	f1c1 0202 	rsble	r2, r1, #2
 800bd1c:	2201      	movgt	r2, #1
 800bd1e:	4413      	add	r3, r2
 800bd20:	e7e0      	b.n	800bce4 <_printf_float+0x1a0>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	055a      	lsls	r2, r3, #21
 800bd26:	d407      	bmi.n	800bd38 <_printf_float+0x1f4>
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	4642      	mov	r2, r8
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	d12c      	bne.n	800bd90 <_printf_float+0x24c>
 800bd36:	e764      	b.n	800bc02 <_printf_float+0xbe>
 800bd38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd3c:	f240 80e0 	bls.w	800bf00 <_printf_float+0x3bc>
 800bd40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd44:	2200      	movs	r2, #0
 800bd46:	2300      	movs	r3, #0
 800bd48:	f7f4 febe 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d034      	beq.n	800bdba <_printf_float+0x276>
 800bd50:	4a37      	ldr	r2, [pc, #220]	; (800be30 <_printf_float+0x2ec>)
 800bd52:	2301      	movs	r3, #1
 800bd54:	4631      	mov	r1, r6
 800bd56:	4628      	mov	r0, r5
 800bd58:	47b8      	blx	r7
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	f43f af51 	beq.w	800bc02 <_printf_float+0xbe>
 800bd60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd64:	429a      	cmp	r2, r3
 800bd66:	db02      	blt.n	800bd6e <_printf_float+0x22a>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	07d8      	lsls	r0, r3, #31
 800bd6c:	d510      	bpl.n	800bd90 <_printf_float+0x24c>
 800bd6e:	ee18 3a10 	vmov	r3, s16
 800bd72:	4652      	mov	r2, sl
 800bd74:	4631      	mov	r1, r6
 800bd76:	4628      	mov	r0, r5
 800bd78:	47b8      	blx	r7
 800bd7a:	3001      	adds	r0, #1
 800bd7c:	f43f af41 	beq.w	800bc02 <_printf_float+0xbe>
 800bd80:	f04f 0800 	mov.w	r8, #0
 800bd84:	f104 091a 	add.w	r9, r4, #26
 800bd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	4543      	cmp	r3, r8
 800bd8e:	dc09      	bgt.n	800bda4 <_printf_float+0x260>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	079b      	lsls	r3, r3, #30
 800bd94:	f100 8107 	bmi.w	800bfa6 <_printf_float+0x462>
 800bd98:	68e0      	ldr	r0, [r4, #12]
 800bd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9c:	4298      	cmp	r0, r3
 800bd9e:	bfb8      	it	lt
 800bda0:	4618      	movlt	r0, r3
 800bda2:	e730      	b.n	800bc06 <_printf_float+0xc2>
 800bda4:	2301      	movs	r3, #1
 800bda6:	464a      	mov	r2, r9
 800bda8:	4631      	mov	r1, r6
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f af27 	beq.w	800bc02 <_printf_float+0xbe>
 800bdb4:	f108 0801 	add.w	r8, r8, #1
 800bdb8:	e7e6      	b.n	800bd88 <_printf_float+0x244>
 800bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dc39      	bgt.n	800be34 <_printf_float+0x2f0>
 800bdc0:	4a1b      	ldr	r2, [pc, #108]	; (800be30 <_printf_float+0x2ec>)
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	47b8      	blx	r7
 800bdca:	3001      	adds	r0, #1
 800bdcc:	f43f af19 	beq.w	800bc02 <_printf_float+0xbe>
 800bdd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	d102      	bne.n	800bdde <_printf_float+0x29a>
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d5d8      	bpl.n	800bd90 <_printf_float+0x24c>
 800bdde:	ee18 3a10 	vmov	r3, s16
 800bde2:	4652      	mov	r2, sl
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b8      	blx	r7
 800bdea:	3001      	adds	r0, #1
 800bdec:	f43f af09 	beq.w	800bc02 <_printf_float+0xbe>
 800bdf0:	f04f 0900 	mov.w	r9, #0
 800bdf4:	f104 0a1a 	add.w	sl, r4, #26
 800bdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfa:	425b      	negs	r3, r3
 800bdfc:	454b      	cmp	r3, r9
 800bdfe:	dc01      	bgt.n	800be04 <_printf_float+0x2c0>
 800be00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be02:	e792      	b.n	800bd2a <_printf_float+0x1e6>
 800be04:	2301      	movs	r3, #1
 800be06:	4652      	mov	r2, sl
 800be08:	4631      	mov	r1, r6
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b8      	blx	r7
 800be0e:	3001      	adds	r0, #1
 800be10:	f43f aef7 	beq.w	800bc02 <_printf_float+0xbe>
 800be14:	f109 0901 	add.w	r9, r9, #1
 800be18:	e7ee      	b.n	800bdf8 <_printf_float+0x2b4>
 800be1a:	bf00      	nop
 800be1c:	7fefffff 	.word	0x7fefffff
 800be20:	08010474 	.word	0x08010474
 800be24:	08010478 	.word	0x08010478
 800be28:	0801047c 	.word	0x0801047c
 800be2c:	08010480 	.word	0x08010480
 800be30:	08010484 	.word	0x08010484
 800be34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be38:	429a      	cmp	r2, r3
 800be3a:	bfa8      	it	ge
 800be3c:	461a      	movge	r2, r3
 800be3e:	2a00      	cmp	r2, #0
 800be40:	4691      	mov	r9, r2
 800be42:	dc37      	bgt.n	800beb4 <_printf_float+0x370>
 800be44:	f04f 0b00 	mov.w	fp, #0
 800be48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be4c:	f104 021a 	add.w	r2, r4, #26
 800be50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	eba3 0309 	sub.w	r3, r3, r9
 800be58:	455b      	cmp	r3, fp
 800be5a:	dc33      	bgt.n	800bec4 <_printf_float+0x380>
 800be5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be60:	429a      	cmp	r2, r3
 800be62:	db3b      	blt.n	800bedc <_printf_float+0x398>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	07da      	lsls	r2, r3, #31
 800be68:	d438      	bmi.n	800bedc <_printf_float+0x398>
 800be6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800be6e:	eba2 0903 	sub.w	r9, r2, r3
 800be72:	9b05      	ldr	r3, [sp, #20]
 800be74:	1ad2      	subs	r2, r2, r3
 800be76:	4591      	cmp	r9, r2
 800be78:	bfa8      	it	ge
 800be7a:	4691      	movge	r9, r2
 800be7c:	f1b9 0f00 	cmp.w	r9, #0
 800be80:	dc35      	bgt.n	800beee <_printf_float+0x3aa>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be8a:	f104 0a1a 	add.w	sl, r4, #26
 800be8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	eba3 0309 	sub.w	r3, r3, r9
 800be98:	4543      	cmp	r3, r8
 800be9a:	f77f af79 	ble.w	800bd90 <_printf_float+0x24c>
 800be9e:	2301      	movs	r3, #1
 800bea0:	4652      	mov	r2, sl
 800bea2:	4631      	mov	r1, r6
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b8      	blx	r7
 800bea8:	3001      	adds	r0, #1
 800beaa:	f43f aeaa 	beq.w	800bc02 <_printf_float+0xbe>
 800beae:	f108 0801 	add.w	r8, r8, #1
 800beb2:	e7ec      	b.n	800be8e <_printf_float+0x34a>
 800beb4:	4613      	mov	r3, r2
 800beb6:	4631      	mov	r1, r6
 800beb8:	4642      	mov	r2, r8
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	d1c0      	bne.n	800be44 <_printf_float+0x300>
 800bec2:	e69e      	b.n	800bc02 <_printf_float+0xbe>
 800bec4:	2301      	movs	r3, #1
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	9205      	str	r2, [sp, #20]
 800becc:	47b8      	blx	r7
 800bece:	3001      	adds	r0, #1
 800bed0:	f43f ae97 	beq.w	800bc02 <_printf_float+0xbe>
 800bed4:	9a05      	ldr	r2, [sp, #20]
 800bed6:	f10b 0b01 	add.w	fp, fp, #1
 800beda:	e7b9      	b.n	800be50 <_printf_float+0x30c>
 800bedc:	ee18 3a10 	vmov	r3, s16
 800bee0:	4652      	mov	r2, sl
 800bee2:	4631      	mov	r1, r6
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b8      	blx	r7
 800bee8:	3001      	adds	r0, #1
 800beea:	d1be      	bne.n	800be6a <_printf_float+0x326>
 800beec:	e689      	b.n	800bc02 <_printf_float+0xbe>
 800beee:	9a05      	ldr	r2, [sp, #20]
 800bef0:	464b      	mov	r3, r9
 800bef2:	4442      	add	r2, r8
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	d1c1      	bne.n	800be82 <_printf_float+0x33e>
 800befe:	e680      	b.n	800bc02 <_printf_float+0xbe>
 800bf00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf02:	2a01      	cmp	r2, #1
 800bf04:	dc01      	bgt.n	800bf0a <_printf_float+0x3c6>
 800bf06:	07db      	lsls	r3, r3, #31
 800bf08:	d53a      	bpl.n	800bf80 <_printf_float+0x43c>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	f43f ae74 	beq.w	800bc02 <_printf_float+0xbe>
 800bf1a:	ee18 3a10 	vmov	r3, s16
 800bf1e:	4652      	mov	r2, sl
 800bf20:	4631      	mov	r1, r6
 800bf22:	4628      	mov	r0, r5
 800bf24:	47b8      	blx	r7
 800bf26:	3001      	adds	r0, #1
 800bf28:	f43f ae6b 	beq.w	800bc02 <_printf_float+0xbe>
 800bf2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf30:	2200      	movs	r2, #0
 800bf32:	2300      	movs	r3, #0
 800bf34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bf38:	f7f4 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf3c:	b9d8      	cbnz	r0, 800bf76 <_printf_float+0x432>
 800bf3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bf42:	f108 0201 	add.w	r2, r8, #1
 800bf46:	4631      	mov	r1, r6
 800bf48:	4628      	mov	r0, r5
 800bf4a:	47b8      	blx	r7
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d10e      	bne.n	800bf6e <_printf_float+0x42a>
 800bf50:	e657      	b.n	800bc02 <_printf_float+0xbe>
 800bf52:	2301      	movs	r3, #1
 800bf54:	4652      	mov	r2, sl
 800bf56:	4631      	mov	r1, r6
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b8      	blx	r7
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	f43f ae50 	beq.w	800bc02 <_printf_float+0xbe>
 800bf62:	f108 0801 	add.w	r8, r8, #1
 800bf66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	4543      	cmp	r3, r8
 800bf6c:	dcf1      	bgt.n	800bf52 <_printf_float+0x40e>
 800bf6e:	464b      	mov	r3, r9
 800bf70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bf74:	e6da      	b.n	800bd2c <_printf_float+0x1e8>
 800bf76:	f04f 0800 	mov.w	r8, #0
 800bf7a:	f104 0a1a 	add.w	sl, r4, #26
 800bf7e:	e7f2      	b.n	800bf66 <_printf_float+0x422>
 800bf80:	2301      	movs	r3, #1
 800bf82:	4642      	mov	r2, r8
 800bf84:	e7df      	b.n	800bf46 <_printf_float+0x402>
 800bf86:	2301      	movs	r3, #1
 800bf88:	464a      	mov	r2, r9
 800bf8a:	4631      	mov	r1, r6
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b8      	blx	r7
 800bf90:	3001      	adds	r0, #1
 800bf92:	f43f ae36 	beq.w	800bc02 <_printf_float+0xbe>
 800bf96:	f108 0801 	add.w	r8, r8, #1
 800bf9a:	68e3      	ldr	r3, [r4, #12]
 800bf9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf9e:	1a5b      	subs	r3, r3, r1
 800bfa0:	4543      	cmp	r3, r8
 800bfa2:	dcf0      	bgt.n	800bf86 <_printf_float+0x442>
 800bfa4:	e6f8      	b.n	800bd98 <_printf_float+0x254>
 800bfa6:	f04f 0800 	mov.w	r8, #0
 800bfaa:	f104 0919 	add.w	r9, r4, #25
 800bfae:	e7f4      	b.n	800bf9a <_printf_float+0x456>

0800bfb0 <_printf_common>:
 800bfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb4:	4616      	mov	r6, r2
 800bfb6:	4699      	mov	r9, r3
 800bfb8:	688a      	ldr	r2, [r1, #8]
 800bfba:	690b      	ldr	r3, [r1, #16]
 800bfbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	bfb8      	it	lt
 800bfc4:	4613      	movlt	r3, r2
 800bfc6:	6033      	str	r3, [r6, #0]
 800bfc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfcc:	4607      	mov	r7, r0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	b10a      	cbz	r2, 800bfd6 <_printf_common+0x26>
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	6033      	str	r3, [r6, #0]
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	0699      	lsls	r1, r3, #26
 800bfda:	bf42      	ittt	mi
 800bfdc:	6833      	ldrmi	r3, [r6, #0]
 800bfde:	3302      	addmi	r3, #2
 800bfe0:	6033      	strmi	r3, [r6, #0]
 800bfe2:	6825      	ldr	r5, [r4, #0]
 800bfe4:	f015 0506 	ands.w	r5, r5, #6
 800bfe8:	d106      	bne.n	800bff8 <_printf_common+0x48>
 800bfea:	f104 0a19 	add.w	sl, r4, #25
 800bfee:	68e3      	ldr	r3, [r4, #12]
 800bff0:	6832      	ldr	r2, [r6, #0]
 800bff2:	1a9b      	subs	r3, r3, r2
 800bff4:	42ab      	cmp	r3, r5
 800bff6:	dc26      	bgt.n	800c046 <_printf_common+0x96>
 800bff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bffc:	1e13      	subs	r3, r2, #0
 800bffe:	6822      	ldr	r2, [r4, #0]
 800c000:	bf18      	it	ne
 800c002:	2301      	movne	r3, #1
 800c004:	0692      	lsls	r2, r2, #26
 800c006:	d42b      	bmi.n	800c060 <_printf_common+0xb0>
 800c008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c00c:	4649      	mov	r1, r9
 800c00e:	4638      	mov	r0, r7
 800c010:	47c0      	blx	r8
 800c012:	3001      	adds	r0, #1
 800c014:	d01e      	beq.n	800c054 <_printf_common+0xa4>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	6922      	ldr	r2, [r4, #16]
 800c01a:	f003 0306 	and.w	r3, r3, #6
 800c01e:	2b04      	cmp	r3, #4
 800c020:	bf02      	ittt	eq
 800c022:	68e5      	ldreq	r5, [r4, #12]
 800c024:	6833      	ldreq	r3, [r6, #0]
 800c026:	1aed      	subeq	r5, r5, r3
 800c028:	68a3      	ldr	r3, [r4, #8]
 800c02a:	bf0c      	ite	eq
 800c02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c030:	2500      	movne	r5, #0
 800c032:	4293      	cmp	r3, r2
 800c034:	bfc4      	itt	gt
 800c036:	1a9b      	subgt	r3, r3, r2
 800c038:	18ed      	addgt	r5, r5, r3
 800c03a:	2600      	movs	r6, #0
 800c03c:	341a      	adds	r4, #26
 800c03e:	42b5      	cmp	r5, r6
 800c040:	d11a      	bne.n	800c078 <_printf_common+0xc8>
 800c042:	2000      	movs	r0, #0
 800c044:	e008      	b.n	800c058 <_printf_common+0xa8>
 800c046:	2301      	movs	r3, #1
 800c048:	4652      	mov	r2, sl
 800c04a:	4649      	mov	r1, r9
 800c04c:	4638      	mov	r0, r7
 800c04e:	47c0      	blx	r8
 800c050:	3001      	adds	r0, #1
 800c052:	d103      	bne.n	800c05c <_printf_common+0xac>
 800c054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05c:	3501      	adds	r5, #1
 800c05e:	e7c6      	b.n	800bfee <_printf_common+0x3e>
 800c060:	18e1      	adds	r1, r4, r3
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	2030      	movs	r0, #48	; 0x30
 800c066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c06a:	4422      	add	r2, r4
 800c06c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c074:	3302      	adds	r3, #2
 800c076:	e7c7      	b.n	800c008 <_printf_common+0x58>
 800c078:	2301      	movs	r3, #1
 800c07a:	4622      	mov	r2, r4
 800c07c:	4649      	mov	r1, r9
 800c07e:	4638      	mov	r0, r7
 800c080:	47c0      	blx	r8
 800c082:	3001      	adds	r0, #1
 800c084:	d0e6      	beq.n	800c054 <_printf_common+0xa4>
 800c086:	3601      	adds	r6, #1
 800c088:	e7d9      	b.n	800c03e <_printf_common+0x8e>
	...

0800c08c <_printf_i>:
 800c08c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	7e0f      	ldrb	r7, [r1, #24]
 800c092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c094:	2f78      	cmp	r7, #120	; 0x78
 800c096:	4691      	mov	r9, r2
 800c098:	4680      	mov	r8, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	469a      	mov	sl, r3
 800c09e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0a2:	d807      	bhi.n	800c0b4 <_printf_i+0x28>
 800c0a4:	2f62      	cmp	r7, #98	; 0x62
 800c0a6:	d80a      	bhi.n	800c0be <_printf_i+0x32>
 800c0a8:	2f00      	cmp	r7, #0
 800c0aa:	f000 80d4 	beq.w	800c256 <_printf_i+0x1ca>
 800c0ae:	2f58      	cmp	r7, #88	; 0x58
 800c0b0:	f000 80c0 	beq.w	800c234 <_printf_i+0x1a8>
 800c0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0bc:	e03a      	b.n	800c134 <_printf_i+0xa8>
 800c0be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0c2:	2b15      	cmp	r3, #21
 800c0c4:	d8f6      	bhi.n	800c0b4 <_printf_i+0x28>
 800c0c6:	a101      	add	r1, pc, #4	; (adr r1, 800c0cc <_printf_i+0x40>)
 800c0c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0cc:	0800c125 	.word	0x0800c125
 800c0d0:	0800c139 	.word	0x0800c139
 800c0d4:	0800c0b5 	.word	0x0800c0b5
 800c0d8:	0800c0b5 	.word	0x0800c0b5
 800c0dc:	0800c0b5 	.word	0x0800c0b5
 800c0e0:	0800c0b5 	.word	0x0800c0b5
 800c0e4:	0800c139 	.word	0x0800c139
 800c0e8:	0800c0b5 	.word	0x0800c0b5
 800c0ec:	0800c0b5 	.word	0x0800c0b5
 800c0f0:	0800c0b5 	.word	0x0800c0b5
 800c0f4:	0800c0b5 	.word	0x0800c0b5
 800c0f8:	0800c23d 	.word	0x0800c23d
 800c0fc:	0800c165 	.word	0x0800c165
 800c100:	0800c1f7 	.word	0x0800c1f7
 800c104:	0800c0b5 	.word	0x0800c0b5
 800c108:	0800c0b5 	.word	0x0800c0b5
 800c10c:	0800c25f 	.word	0x0800c25f
 800c110:	0800c0b5 	.word	0x0800c0b5
 800c114:	0800c165 	.word	0x0800c165
 800c118:	0800c0b5 	.word	0x0800c0b5
 800c11c:	0800c0b5 	.word	0x0800c0b5
 800c120:	0800c1ff 	.word	0x0800c1ff
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	1d1a      	adds	r2, r3, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	602a      	str	r2, [r5, #0]
 800c12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c134:	2301      	movs	r3, #1
 800c136:	e09f      	b.n	800c278 <_printf_i+0x1ec>
 800c138:	6820      	ldr	r0, [r4, #0]
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	0607      	lsls	r7, r0, #24
 800c13e:	f103 0104 	add.w	r1, r3, #4
 800c142:	6029      	str	r1, [r5, #0]
 800c144:	d501      	bpl.n	800c14a <_printf_i+0xbe>
 800c146:	681e      	ldr	r6, [r3, #0]
 800c148:	e003      	b.n	800c152 <_printf_i+0xc6>
 800c14a:	0646      	lsls	r6, r0, #25
 800c14c:	d5fb      	bpl.n	800c146 <_printf_i+0xba>
 800c14e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c152:	2e00      	cmp	r6, #0
 800c154:	da03      	bge.n	800c15e <_printf_i+0xd2>
 800c156:	232d      	movs	r3, #45	; 0x2d
 800c158:	4276      	negs	r6, r6
 800c15a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c15e:	485a      	ldr	r0, [pc, #360]	; (800c2c8 <_printf_i+0x23c>)
 800c160:	230a      	movs	r3, #10
 800c162:	e012      	b.n	800c18a <_printf_i+0xfe>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	6820      	ldr	r0, [r4, #0]
 800c168:	1d19      	adds	r1, r3, #4
 800c16a:	6029      	str	r1, [r5, #0]
 800c16c:	0605      	lsls	r5, r0, #24
 800c16e:	d501      	bpl.n	800c174 <_printf_i+0xe8>
 800c170:	681e      	ldr	r6, [r3, #0]
 800c172:	e002      	b.n	800c17a <_printf_i+0xee>
 800c174:	0641      	lsls	r1, r0, #25
 800c176:	d5fb      	bpl.n	800c170 <_printf_i+0xe4>
 800c178:	881e      	ldrh	r6, [r3, #0]
 800c17a:	4853      	ldr	r0, [pc, #332]	; (800c2c8 <_printf_i+0x23c>)
 800c17c:	2f6f      	cmp	r7, #111	; 0x6f
 800c17e:	bf0c      	ite	eq
 800c180:	2308      	moveq	r3, #8
 800c182:	230a      	movne	r3, #10
 800c184:	2100      	movs	r1, #0
 800c186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c18a:	6865      	ldr	r5, [r4, #4]
 800c18c:	60a5      	str	r5, [r4, #8]
 800c18e:	2d00      	cmp	r5, #0
 800c190:	bfa2      	ittt	ge
 800c192:	6821      	ldrge	r1, [r4, #0]
 800c194:	f021 0104 	bicge.w	r1, r1, #4
 800c198:	6021      	strge	r1, [r4, #0]
 800c19a:	b90e      	cbnz	r6, 800c1a0 <_printf_i+0x114>
 800c19c:	2d00      	cmp	r5, #0
 800c19e:	d04b      	beq.n	800c238 <_printf_i+0x1ac>
 800c1a0:	4615      	mov	r5, r2
 800c1a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1a6:	fb03 6711 	mls	r7, r3, r1, r6
 800c1aa:	5dc7      	ldrb	r7, [r0, r7]
 800c1ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1b0:	4637      	mov	r7, r6
 800c1b2:	42bb      	cmp	r3, r7
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	d9f4      	bls.n	800c1a2 <_printf_i+0x116>
 800c1b8:	2b08      	cmp	r3, #8
 800c1ba:	d10b      	bne.n	800c1d4 <_printf_i+0x148>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	07de      	lsls	r6, r3, #31
 800c1c0:	d508      	bpl.n	800c1d4 <_printf_i+0x148>
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	6861      	ldr	r1, [r4, #4]
 800c1c6:	4299      	cmp	r1, r3
 800c1c8:	bfde      	ittt	le
 800c1ca:	2330      	movle	r3, #48	; 0x30
 800c1cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1d4:	1b52      	subs	r2, r2, r5
 800c1d6:	6122      	str	r2, [r4, #16]
 800c1d8:	f8cd a000 	str.w	sl, [sp]
 800c1dc:	464b      	mov	r3, r9
 800c1de:	aa03      	add	r2, sp, #12
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	f7ff fee4 	bl	800bfb0 <_printf_common>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d14a      	bne.n	800c282 <_printf_i+0x1f6>
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1f0:	b004      	add	sp, #16
 800c1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	f043 0320 	orr.w	r3, r3, #32
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	4833      	ldr	r0, [pc, #204]	; (800c2cc <_printf_i+0x240>)
 800c200:	2778      	movs	r7, #120	; 0x78
 800c202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	6829      	ldr	r1, [r5, #0]
 800c20a:	061f      	lsls	r7, r3, #24
 800c20c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c210:	d402      	bmi.n	800c218 <_printf_i+0x18c>
 800c212:	065f      	lsls	r7, r3, #25
 800c214:	bf48      	it	mi
 800c216:	b2b6      	uxthmi	r6, r6
 800c218:	07df      	lsls	r7, r3, #31
 800c21a:	bf48      	it	mi
 800c21c:	f043 0320 	orrmi.w	r3, r3, #32
 800c220:	6029      	str	r1, [r5, #0]
 800c222:	bf48      	it	mi
 800c224:	6023      	strmi	r3, [r4, #0]
 800c226:	b91e      	cbnz	r6, 800c230 <_printf_i+0x1a4>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	f023 0320 	bic.w	r3, r3, #32
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	2310      	movs	r3, #16
 800c232:	e7a7      	b.n	800c184 <_printf_i+0xf8>
 800c234:	4824      	ldr	r0, [pc, #144]	; (800c2c8 <_printf_i+0x23c>)
 800c236:	e7e4      	b.n	800c202 <_printf_i+0x176>
 800c238:	4615      	mov	r5, r2
 800c23a:	e7bd      	b.n	800c1b8 <_printf_i+0x12c>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	6826      	ldr	r6, [r4, #0]
 800c240:	6961      	ldr	r1, [r4, #20]
 800c242:	1d18      	adds	r0, r3, #4
 800c244:	6028      	str	r0, [r5, #0]
 800c246:	0635      	lsls	r5, r6, #24
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	d501      	bpl.n	800c250 <_printf_i+0x1c4>
 800c24c:	6019      	str	r1, [r3, #0]
 800c24e:	e002      	b.n	800c256 <_printf_i+0x1ca>
 800c250:	0670      	lsls	r0, r6, #25
 800c252:	d5fb      	bpl.n	800c24c <_printf_i+0x1c0>
 800c254:	8019      	strh	r1, [r3, #0]
 800c256:	2300      	movs	r3, #0
 800c258:	6123      	str	r3, [r4, #16]
 800c25a:	4615      	mov	r5, r2
 800c25c:	e7bc      	b.n	800c1d8 <_printf_i+0x14c>
 800c25e:	682b      	ldr	r3, [r5, #0]
 800c260:	1d1a      	adds	r2, r3, #4
 800c262:	602a      	str	r2, [r5, #0]
 800c264:	681d      	ldr	r5, [r3, #0]
 800c266:	6862      	ldr	r2, [r4, #4]
 800c268:	2100      	movs	r1, #0
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7f3 ffb0 	bl	80001d0 <memchr>
 800c270:	b108      	cbz	r0, 800c276 <_printf_i+0x1ea>
 800c272:	1b40      	subs	r0, r0, r5
 800c274:	6060      	str	r0, [r4, #4]
 800c276:	6863      	ldr	r3, [r4, #4]
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	2300      	movs	r3, #0
 800c27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c280:	e7aa      	b.n	800c1d8 <_printf_i+0x14c>
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	462a      	mov	r2, r5
 800c286:	4649      	mov	r1, r9
 800c288:	4640      	mov	r0, r8
 800c28a:	47d0      	blx	sl
 800c28c:	3001      	adds	r0, #1
 800c28e:	d0ad      	beq.n	800c1ec <_printf_i+0x160>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	079b      	lsls	r3, r3, #30
 800c294:	d413      	bmi.n	800c2be <_printf_i+0x232>
 800c296:	68e0      	ldr	r0, [r4, #12]
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	4298      	cmp	r0, r3
 800c29c:	bfb8      	it	lt
 800c29e:	4618      	movlt	r0, r3
 800c2a0:	e7a6      	b.n	800c1f0 <_printf_i+0x164>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	47d0      	blx	sl
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d09d      	beq.n	800c1ec <_printf_i+0x160>
 800c2b0:	3501      	adds	r5, #1
 800c2b2:	68e3      	ldr	r3, [r4, #12]
 800c2b4:	9903      	ldr	r1, [sp, #12]
 800c2b6:	1a5b      	subs	r3, r3, r1
 800c2b8:	42ab      	cmp	r3, r5
 800c2ba:	dcf2      	bgt.n	800c2a2 <_printf_i+0x216>
 800c2bc:	e7eb      	b.n	800c296 <_printf_i+0x20a>
 800c2be:	2500      	movs	r5, #0
 800c2c0:	f104 0619 	add.w	r6, r4, #25
 800c2c4:	e7f5      	b.n	800c2b2 <_printf_i+0x226>
 800c2c6:	bf00      	nop
 800c2c8:	08010486 	.word	0x08010486
 800c2cc:	08010497 	.word	0x08010497

0800c2d0 <_scanf_float>:
 800c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d4:	b087      	sub	sp, #28
 800c2d6:	4617      	mov	r7, r2
 800c2d8:	9303      	str	r3, [sp, #12]
 800c2da:	688b      	ldr	r3, [r1, #8]
 800c2dc:	1e5a      	subs	r2, r3, #1
 800c2de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c2e2:	bf83      	ittte	hi
 800c2e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c2e8:	195b      	addhi	r3, r3, r5
 800c2ea:	9302      	strhi	r3, [sp, #8]
 800c2ec:	2300      	movls	r3, #0
 800c2ee:	bf86      	itte	hi
 800c2f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c2f4:	608b      	strhi	r3, [r1, #8]
 800c2f6:	9302      	strls	r3, [sp, #8]
 800c2f8:	680b      	ldr	r3, [r1, #0]
 800c2fa:	468b      	mov	fp, r1
 800c2fc:	2500      	movs	r5, #0
 800c2fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c302:	f84b 3b1c 	str.w	r3, [fp], #28
 800c306:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c30a:	4680      	mov	r8, r0
 800c30c:	460c      	mov	r4, r1
 800c30e:	465e      	mov	r6, fp
 800c310:	46aa      	mov	sl, r5
 800c312:	46a9      	mov	r9, r5
 800c314:	9501      	str	r5, [sp, #4]
 800c316:	68a2      	ldr	r2, [r4, #8]
 800c318:	b152      	cbz	r2, 800c330 <_scanf_float+0x60>
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b4e      	cmp	r3, #78	; 0x4e
 800c320:	d864      	bhi.n	800c3ec <_scanf_float+0x11c>
 800c322:	2b40      	cmp	r3, #64	; 0x40
 800c324:	d83c      	bhi.n	800c3a0 <_scanf_float+0xd0>
 800c326:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c32a:	b2c8      	uxtb	r0, r1
 800c32c:	280e      	cmp	r0, #14
 800c32e:	d93a      	bls.n	800c3a6 <_scanf_float+0xd6>
 800c330:	f1b9 0f00 	cmp.w	r9, #0
 800c334:	d003      	beq.n	800c33e <_scanf_float+0x6e>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c342:	f1ba 0f01 	cmp.w	sl, #1
 800c346:	f200 8113 	bhi.w	800c570 <_scanf_float+0x2a0>
 800c34a:	455e      	cmp	r6, fp
 800c34c:	f200 8105 	bhi.w	800c55a <_scanf_float+0x28a>
 800c350:	2501      	movs	r5, #1
 800c352:	4628      	mov	r0, r5
 800c354:	b007      	add	sp, #28
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c35e:	2a0d      	cmp	r2, #13
 800c360:	d8e6      	bhi.n	800c330 <_scanf_float+0x60>
 800c362:	a101      	add	r1, pc, #4	; (adr r1, 800c368 <_scanf_float+0x98>)
 800c364:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c368:	0800c4a7 	.word	0x0800c4a7
 800c36c:	0800c331 	.word	0x0800c331
 800c370:	0800c331 	.word	0x0800c331
 800c374:	0800c331 	.word	0x0800c331
 800c378:	0800c507 	.word	0x0800c507
 800c37c:	0800c4df 	.word	0x0800c4df
 800c380:	0800c331 	.word	0x0800c331
 800c384:	0800c331 	.word	0x0800c331
 800c388:	0800c4b5 	.word	0x0800c4b5
 800c38c:	0800c331 	.word	0x0800c331
 800c390:	0800c331 	.word	0x0800c331
 800c394:	0800c331 	.word	0x0800c331
 800c398:	0800c331 	.word	0x0800c331
 800c39c:	0800c46d 	.word	0x0800c46d
 800c3a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c3a4:	e7db      	b.n	800c35e <_scanf_float+0x8e>
 800c3a6:	290e      	cmp	r1, #14
 800c3a8:	d8c2      	bhi.n	800c330 <_scanf_float+0x60>
 800c3aa:	a001      	add	r0, pc, #4	; (adr r0, 800c3b0 <_scanf_float+0xe0>)
 800c3ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c3b0:	0800c45f 	.word	0x0800c45f
 800c3b4:	0800c331 	.word	0x0800c331
 800c3b8:	0800c45f 	.word	0x0800c45f
 800c3bc:	0800c4f3 	.word	0x0800c4f3
 800c3c0:	0800c331 	.word	0x0800c331
 800c3c4:	0800c40d 	.word	0x0800c40d
 800c3c8:	0800c449 	.word	0x0800c449
 800c3cc:	0800c449 	.word	0x0800c449
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c449 	.word	0x0800c449
 800c3d8:	0800c449 	.word	0x0800c449
 800c3dc:	0800c449 	.word	0x0800c449
 800c3e0:	0800c449 	.word	0x0800c449
 800c3e4:	0800c449 	.word	0x0800c449
 800c3e8:	0800c449 	.word	0x0800c449
 800c3ec:	2b6e      	cmp	r3, #110	; 0x6e
 800c3ee:	d809      	bhi.n	800c404 <_scanf_float+0x134>
 800c3f0:	2b60      	cmp	r3, #96	; 0x60
 800c3f2:	d8b2      	bhi.n	800c35a <_scanf_float+0x8a>
 800c3f4:	2b54      	cmp	r3, #84	; 0x54
 800c3f6:	d077      	beq.n	800c4e8 <_scanf_float+0x218>
 800c3f8:	2b59      	cmp	r3, #89	; 0x59
 800c3fa:	d199      	bne.n	800c330 <_scanf_float+0x60>
 800c3fc:	2d07      	cmp	r5, #7
 800c3fe:	d197      	bne.n	800c330 <_scanf_float+0x60>
 800c400:	2508      	movs	r5, #8
 800c402:	e029      	b.n	800c458 <_scanf_float+0x188>
 800c404:	2b74      	cmp	r3, #116	; 0x74
 800c406:	d06f      	beq.n	800c4e8 <_scanf_float+0x218>
 800c408:	2b79      	cmp	r3, #121	; 0x79
 800c40a:	e7f6      	b.n	800c3fa <_scanf_float+0x12a>
 800c40c:	6821      	ldr	r1, [r4, #0]
 800c40e:	05c8      	lsls	r0, r1, #23
 800c410:	d51a      	bpl.n	800c448 <_scanf_float+0x178>
 800c412:	9b02      	ldr	r3, [sp, #8]
 800c414:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c418:	6021      	str	r1, [r4, #0]
 800c41a:	f109 0901 	add.w	r9, r9, #1
 800c41e:	b11b      	cbz	r3, 800c428 <_scanf_float+0x158>
 800c420:	3b01      	subs	r3, #1
 800c422:	3201      	adds	r2, #1
 800c424:	9302      	str	r3, [sp, #8]
 800c426:	60a2      	str	r2, [r4, #8]
 800c428:	68a3      	ldr	r3, [r4, #8]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	60a3      	str	r3, [r4, #8]
 800c42e:	6923      	ldr	r3, [r4, #16]
 800c430:	3301      	adds	r3, #1
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3b01      	subs	r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	f340 8084 	ble.w	800c548 <_scanf_float+0x278>
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	603b      	str	r3, [r7, #0]
 800c446:	e766      	b.n	800c316 <_scanf_float+0x46>
 800c448:	eb1a 0f05 	cmn.w	sl, r5
 800c44c:	f47f af70 	bne.w	800c330 <_scanf_float+0x60>
 800c450:	6822      	ldr	r2, [r4, #0]
 800c452:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c456:	6022      	str	r2, [r4, #0]
 800c458:	f806 3b01 	strb.w	r3, [r6], #1
 800c45c:	e7e4      	b.n	800c428 <_scanf_float+0x158>
 800c45e:	6822      	ldr	r2, [r4, #0]
 800c460:	0610      	lsls	r0, r2, #24
 800c462:	f57f af65 	bpl.w	800c330 <_scanf_float+0x60>
 800c466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c46a:	e7f4      	b.n	800c456 <_scanf_float+0x186>
 800c46c:	f1ba 0f00 	cmp.w	sl, #0
 800c470:	d10e      	bne.n	800c490 <_scanf_float+0x1c0>
 800c472:	f1b9 0f00 	cmp.w	r9, #0
 800c476:	d10e      	bne.n	800c496 <_scanf_float+0x1c6>
 800c478:	6822      	ldr	r2, [r4, #0]
 800c47a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c47e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c482:	d108      	bne.n	800c496 <_scanf_float+0x1c6>
 800c484:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c488:	6022      	str	r2, [r4, #0]
 800c48a:	f04f 0a01 	mov.w	sl, #1
 800c48e:	e7e3      	b.n	800c458 <_scanf_float+0x188>
 800c490:	f1ba 0f02 	cmp.w	sl, #2
 800c494:	d055      	beq.n	800c542 <_scanf_float+0x272>
 800c496:	2d01      	cmp	r5, #1
 800c498:	d002      	beq.n	800c4a0 <_scanf_float+0x1d0>
 800c49a:	2d04      	cmp	r5, #4
 800c49c:	f47f af48 	bne.w	800c330 <_scanf_float+0x60>
 800c4a0:	3501      	adds	r5, #1
 800c4a2:	b2ed      	uxtb	r5, r5
 800c4a4:	e7d8      	b.n	800c458 <_scanf_float+0x188>
 800c4a6:	f1ba 0f01 	cmp.w	sl, #1
 800c4aa:	f47f af41 	bne.w	800c330 <_scanf_float+0x60>
 800c4ae:	f04f 0a02 	mov.w	sl, #2
 800c4b2:	e7d1      	b.n	800c458 <_scanf_float+0x188>
 800c4b4:	b97d      	cbnz	r5, 800c4d6 <_scanf_float+0x206>
 800c4b6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ba:	f47f af3c 	bne.w	800c336 <_scanf_float+0x66>
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c4c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c4c8:	f47f af39 	bne.w	800c33e <_scanf_float+0x6e>
 800c4cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c4d0:	6022      	str	r2, [r4, #0]
 800c4d2:	2501      	movs	r5, #1
 800c4d4:	e7c0      	b.n	800c458 <_scanf_float+0x188>
 800c4d6:	2d03      	cmp	r5, #3
 800c4d8:	d0e2      	beq.n	800c4a0 <_scanf_float+0x1d0>
 800c4da:	2d05      	cmp	r5, #5
 800c4dc:	e7de      	b.n	800c49c <_scanf_float+0x1cc>
 800c4de:	2d02      	cmp	r5, #2
 800c4e0:	f47f af26 	bne.w	800c330 <_scanf_float+0x60>
 800c4e4:	2503      	movs	r5, #3
 800c4e6:	e7b7      	b.n	800c458 <_scanf_float+0x188>
 800c4e8:	2d06      	cmp	r5, #6
 800c4ea:	f47f af21 	bne.w	800c330 <_scanf_float+0x60>
 800c4ee:	2507      	movs	r5, #7
 800c4f0:	e7b2      	b.n	800c458 <_scanf_float+0x188>
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	0591      	lsls	r1, r2, #22
 800c4f6:	f57f af1b 	bpl.w	800c330 <_scanf_float+0x60>
 800c4fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c4fe:	6022      	str	r2, [r4, #0]
 800c500:	f8cd 9004 	str.w	r9, [sp, #4]
 800c504:	e7a8      	b.n	800c458 <_scanf_float+0x188>
 800c506:	6822      	ldr	r2, [r4, #0]
 800c508:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c50c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c510:	d006      	beq.n	800c520 <_scanf_float+0x250>
 800c512:	0550      	lsls	r0, r2, #21
 800c514:	f57f af0c 	bpl.w	800c330 <_scanf_float+0x60>
 800c518:	f1b9 0f00 	cmp.w	r9, #0
 800c51c:	f43f af0f 	beq.w	800c33e <_scanf_float+0x6e>
 800c520:	0591      	lsls	r1, r2, #22
 800c522:	bf58      	it	pl
 800c524:	9901      	ldrpl	r1, [sp, #4]
 800c526:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c52a:	bf58      	it	pl
 800c52c:	eba9 0101 	subpl.w	r1, r9, r1
 800c530:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c534:	bf58      	it	pl
 800c536:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c53a:	6022      	str	r2, [r4, #0]
 800c53c:	f04f 0900 	mov.w	r9, #0
 800c540:	e78a      	b.n	800c458 <_scanf_float+0x188>
 800c542:	f04f 0a03 	mov.w	sl, #3
 800c546:	e787      	b.n	800c458 <_scanf_float+0x188>
 800c548:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c54c:	4639      	mov	r1, r7
 800c54e:	4640      	mov	r0, r8
 800c550:	4798      	blx	r3
 800c552:	2800      	cmp	r0, #0
 800c554:	f43f aedf 	beq.w	800c316 <_scanf_float+0x46>
 800c558:	e6ea      	b.n	800c330 <_scanf_float+0x60>
 800c55a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c55e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c562:	463a      	mov	r2, r7
 800c564:	4640      	mov	r0, r8
 800c566:	4798      	blx	r3
 800c568:	6923      	ldr	r3, [r4, #16]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	6123      	str	r3, [r4, #16]
 800c56e:	e6ec      	b.n	800c34a <_scanf_float+0x7a>
 800c570:	1e6b      	subs	r3, r5, #1
 800c572:	2b06      	cmp	r3, #6
 800c574:	d825      	bhi.n	800c5c2 <_scanf_float+0x2f2>
 800c576:	2d02      	cmp	r5, #2
 800c578:	d836      	bhi.n	800c5e8 <_scanf_float+0x318>
 800c57a:	455e      	cmp	r6, fp
 800c57c:	f67f aee8 	bls.w	800c350 <_scanf_float+0x80>
 800c580:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c584:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c588:	463a      	mov	r2, r7
 800c58a:	4640      	mov	r0, r8
 800c58c:	4798      	blx	r3
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	3b01      	subs	r3, #1
 800c592:	6123      	str	r3, [r4, #16]
 800c594:	e7f1      	b.n	800c57a <_scanf_float+0x2aa>
 800c596:	9802      	ldr	r0, [sp, #8]
 800c598:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c59c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c5a0:	9002      	str	r0, [sp, #8]
 800c5a2:	463a      	mov	r2, r7
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4798      	blx	r3
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	6123      	str	r3, [r4, #16]
 800c5ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c5b2:	fa5f fa8a 	uxtb.w	sl, sl
 800c5b6:	f1ba 0f02 	cmp.w	sl, #2
 800c5ba:	d1ec      	bne.n	800c596 <_scanf_float+0x2c6>
 800c5bc:	3d03      	subs	r5, #3
 800c5be:	b2ed      	uxtb	r5, r5
 800c5c0:	1b76      	subs	r6, r6, r5
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	05da      	lsls	r2, r3, #23
 800c5c6:	d52f      	bpl.n	800c628 <_scanf_float+0x358>
 800c5c8:	055b      	lsls	r3, r3, #21
 800c5ca:	d510      	bpl.n	800c5ee <_scanf_float+0x31e>
 800c5cc:	455e      	cmp	r6, fp
 800c5ce:	f67f aebf 	bls.w	800c350 <_scanf_float+0x80>
 800c5d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c5d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c5da:	463a      	mov	r2, r7
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4798      	blx	r3
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	6123      	str	r3, [r4, #16]
 800c5e6:	e7f1      	b.n	800c5cc <_scanf_float+0x2fc>
 800c5e8:	46aa      	mov	sl, r5
 800c5ea:	9602      	str	r6, [sp, #8]
 800c5ec:	e7df      	b.n	800c5ae <_scanf_float+0x2de>
 800c5ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c5f2:	6923      	ldr	r3, [r4, #16]
 800c5f4:	2965      	cmp	r1, #101	; 0x65
 800c5f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c5fa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	d00c      	beq.n	800c61c <_scanf_float+0x34c>
 800c602:	2945      	cmp	r1, #69	; 0x45
 800c604:	d00a      	beq.n	800c61c <_scanf_float+0x34c>
 800c606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c60a:	463a      	mov	r2, r7
 800c60c:	4640      	mov	r0, r8
 800c60e:	4798      	blx	r3
 800c610:	6923      	ldr	r3, [r4, #16]
 800c612:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c616:	3b01      	subs	r3, #1
 800c618:	1eb5      	subs	r5, r6, #2
 800c61a:	6123      	str	r3, [r4, #16]
 800c61c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c620:	463a      	mov	r2, r7
 800c622:	4640      	mov	r0, r8
 800c624:	4798      	blx	r3
 800c626:	462e      	mov	r6, r5
 800c628:	6825      	ldr	r5, [r4, #0]
 800c62a:	f015 0510 	ands.w	r5, r5, #16
 800c62e:	d158      	bne.n	800c6e2 <_scanf_float+0x412>
 800c630:	7035      	strb	r5, [r6, #0]
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c63c:	d11c      	bne.n	800c678 <_scanf_float+0x3a8>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	454b      	cmp	r3, r9
 800c642:	eba3 0209 	sub.w	r2, r3, r9
 800c646:	d124      	bne.n	800c692 <_scanf_float+0x3c2>
 800c648:	2200      	movs	r2, #0
 800c64a:	4659      	mov	r1, fp
 800c64c:	4640      	mov	r0, r8
 800c64e:	f002 fc03 	bl	800ee58 <_strtod_r>
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	6821      	ldr	r1, [r4, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f011 0f02 	tst.w	r1, #2
 800c65c:	ec57 6b10 	vmov	r6, r7, d0
 800c660:	f103 0204 	add.w	r2, r3, #4
 800c664:	d020      	beq.n	800c6a8 <_scanf_float+0x3d8>
 800c666:	9903      	ldr	r1, [sp, #12]
 800c668:	600a      	str	r2, [r1, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	e9c3 6700 	strd	r6, r7, [r3]
 800c670:	68e3      	ldr	r3, [r4, #12]
 800c672:	3301      	adds	r3, #1
 800c674:	60e3      	str	r3, [r4, #12]
 800c676:	e66c      	b.n	800c352 <_scanf_float+0x82>
 800c678:	9b04      	ldr	r3, [sp, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0e4      	beq.n	800c648 <_scanf_float+0x378>
 800c67e:	9905      	ldr	r1, [sp, #20]
 800c680:	230a      	movs	r3, #10
 800c682:	462a      	mov	r2, r5
 800c684:	3101      	adds	r1, #1
 800c686:	4640      	mov	r0, r8
 800c688:	f002 fc6e 	bl	800ef68 <_strtol_r>
 800c68c:	9b04      	ldr	r3, [sp, #16]
 800c68e:	9e05      	ldr	r6, [sp, #20]
 800c690:	1ac2      	subs	r2, r0, r3
 800c692:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c696:	429e      	cmp	r6, r3
 800c698:	bf28      	it	cs
 800c69a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c69e:	4912      	ldr	r1, [pc, #72]	; (800c6e8 <_scanf_float+0x418>)
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f000 f8e7 	bl	800c874 <siprintf>
 800c6a6:	e7cf      	b.n	800c648 <_scanf_float+0x378>
 800c6a8:	f011 0f04 	tst.w	r1, #4
 800c6ac:	9903      	ldr	r1, [sp, #12]
 800c6ae:	600a      	str	r2, [r1, #0]
 800c6b0:	d1db      	bne.n	800c66a <_scanf_float+0x39a>
 800c6b2:	f8d3 8000 	ldr.w	r8, [r3]
 800c6b6:	ee10 2a10 	vmov	r2, s0
 800c6ba:	ee10 0a10 	vmov	r0, s0
 800c6be:	463b      	mov	r3, r7
 800c6c0:	4639      	mov	r1, r7
 800c6c2:	f7f4 fa33 	bl	8000b2c <__aeabi_dcmpun>
 800c6c6:	b128      	cbz	r0, 800c6d4 <_scanf_float+0x404>
 800c6c8:	4808      	ldr	r0, [pc, #32]	; (800c6ec <_scanf_float+0x41c>)
 800c6ca:	f000 fa3d 	bl	800cb48 <nanf>
 800c6ce:	ed88 0a00 	vstr	s0, [r8]
 800c6d2:	e7cd      	b.n	800c670 <_scanf_float+0x3a0>
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	f7f4 fa86 	bl	8000be8 <__aeabi_d2f>
 800c6dc:	f8c8 0000 	str.w	r0, [r8]
 800c6e0:	e7c6      	b.n	800c670 <_scanf_float+0x3a0>
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	e635      	b.n	800c352 <_scanf_float+0x82>
 800c6e6:	bf00      	nop
 800c6e8:	080104a8 	.word	0x080104a8
 800c6ec:	0801083d 	.word	0x0801083d

0800c6f0 <std>:
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	b510      	push	{r4, lr}
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6fe:	6083      	str	r3, [r0, #8]
 800c700:	8181      	strh	r1, [r0, #12]
 800c702:	6643      	str	r3, [r0, #100]	; 0x64
 800c704:	81c2      	strh	r2, [r0, #14]
 800c706:	6183      	str	r3, [r0, #24]
 800c708:	4619      	mov	r1, r3
 800c70a:	2208      	movs	r2, #8
 800c70c:	305c      	adds	r0, #92	; 0x5c
 800c70e:	f000 f914 	bl	800c93a <memset>
 800c712:	4b0d      	ldr	r3, [pc, #52]	; (800c748 <std+0x58>)
 800c714:	6263      	str	r3, [r4, #36]	; 0x24
 800c716:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <std+0x5c>)
 800c718:	62a3      	str	r3, [r4, #40]	; 0x28
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <std+0x60>)
 800c71c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c71e:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <std+0x64>)
 800c720:	6323      	str	r3, [r4, #48]	; 0x30
 800c722:	4b0d      	ldr	r3, [pc, #52]	; (800c758 <std+0x68>)
 800c724:	6224      	str	r4, [r4, #32]
 800c726:	429c      	cmp	r4, r3
 800c728:	d006      	beq.n	800c738 <std+0x48>
 800c72a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c72e:	4294      	cmp	r4, r2
 800c730:	d002      	beq.n	800c738 <std+0x48>
 800c732:	33d0      	adds	r3, #208	; 0xd0
 800c734:	429c      	cmp	r4, r3
 800c736:	d105      	bne.n	800c744 <std+0x54>
 800c738:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c740:	f000 b9f0 	b.w	800cb24 <__retarget_lock_init_recursive>
 800c744:	bd10      	pop	{r4, pc}
 800c746:	bf00      	nop
 800c748:	0800c8b5 	.word	0x0800c8b5
 800c74c:	0800c8d7 	.word	0x0800c8d7
 800c750:	0800c90f 	.word	0x0800c90f
 800c754:	0800c933 	.word	0x0800c933
 800c758:	20001f48 	.word	0x20001f48

0800c75c <stdio_exit_handler>:
 800c75c:	4a02      	ldr	r2, [pc, #8]	; (800c768 <stdio_exit_handler+0xc>)
 800c75e:	4903      	ldr	r1, [pc, #12]	; (800c76c <stdio_exit_handler+0x10>)
 800c760:	4803      	ldr	r0, [pc, #12]	; (800c770 <stdio_exit_handler+0x14>)
 800c762:	f000 b869 	b.w	800c838 <_fwalk_sglue>
 800c766:	bf00      	nop
 800c768:	20000014 	.word	0x20000014
 800c76c:	0800f329 	.word	0x0800f329
 800c770:	20000020 	.word	0x20000020

0800c774 <cleanup_stdio>:
 800c774:	6841      	ldr	r1, [r0, #4]
 800c776:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <cleanup_stdio+0x34>)
 800c778:	4299      	cmp	r1, r3
 800c77a:	b510      	push	{r4, lr}
 800c77c:	4604      	mov	r4, r0
 800c77e:	d001      	beq.n	800c784 <cleanup_stdio+0x10>
 800c780:	f002 fdd2 	bl	800f328 <_fflush_r>
 800c784:	68a1      	ldr	r1, [r4, #8]
 800c786:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <cleanup_stdio+0x38>)
 800c788:	4299      	cmp	r1, r3
 800c78a:	d002      	beq.n	800c792 <cleanup_stdio+0x1e>
 800c78c:	4620      	mov	r0, r4
 800c78e:	f002 fdcb 	bl	800f328 <_fflush_r>
 800c792:	68e1      	ldr	r1, [r4, #12]
 800c794:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <cleanup_stdio+0x3c>)
 800c796:	4299      	cmp	r1, r3
 800c798:	d004      	beq.n	800c7a4 <cleanup_stdio+0x30>
 800c79a:	4620      	mov	r0, r4
 800c79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a0:	f002 bdc2 	b.w	800f328 <_fflush_r>
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20001f48 	.word	0x20001f48
 800c7ac:	20001fb0 	.word	0x20001fb0
 800c7b0:	20002018 	.word	0x20002018

0800c7b4 <global_stdio_init.part.0>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	4b0b      	ldr	r3, [pc, #44]	; (800c7e4 <global_stdio_init.part.0+0x30>)
 800c7b8:	4c0b      	ldr	r4, [pc, #44]	; (800c7e8 <global_stdio_init.part.0+0x34>)
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <global_stdio_init.part.0+0x38>)
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	4620      	mov	r0, r4
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2104      	movs	r1, #4
 800c7c4:	f7ff ff94 	bl	800c6f0 <std>
 800c7c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	2109      	movs	r1, #9
 800c7d0:	f7ff ff8e 	bl	800c6f0 <std>
 800c7d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c7d8:	2202      	movs	r2, #2
 800c7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7de:	2112      	movs	r1, #18
 800c7e0:	f7ff bf86 	b.w	800c6f0 <std>
 800c7e4:	20002080 	.word	0x20002080
 800c7e8:	20001f48 	.word	0x20001f48
 800c7ec:	0800c75d 	.word	0x0800c75d

0800c7f0 <__sfp_lock_acquire>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	; (800c7f8 <__sfp_lock_acquire+0x8>)
 800c7f2:	f000 b998 	b.w	800cb26 <__retarget_lock_acquire_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	20002089 	.word	0x20002089

0800c7fc <__sfp_lock_release>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	; (800c804 <__sfp_lock_release+0x8>)
 800c7fe:	f000 b993 	b.w	800cb28 <__retarget_lock_release_recursive>
 800c802:	bf00      	nop
 800c804:	20002089 	.word	0x20002089

0800c808 <__sinit>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	4604      	mov	r4, r0
 800c80c:	f7ff fff0 	bl	800c7f0 <__sfp_lock_acquire>
 800c810:	6a23      	ldr	r3, [r4, #32]
 800c812:	b11b      	cbz	r3, 800c81c <__sinit+0x14>
 800c814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c818:	f7ff bff0 	b.w	800c7fc <__sfp_lock_release>
 800c81c:	4b04      	ldr	r3, [pc, #16]	; (800c830 <__sinit+0x28>)
 800c81e:	6223      	str	r3, [r4, #32]
 800c820:	4b04      	ldr	r3, [pc, #16]	; (800c834 <__sinit+0x2c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1f5      	bne.n	800c814 <__sinit+0xc>
 800c828:	f7ff ffc4 	bl	800c7b4 <global_stdio_init.part.0>
 800c82c:	e7f2      	b.n	800c814 <__sinit+0xc>
 800c82e:	bf00      	nop
 800c830:	0800c775 	.word	0x0800c775
 800c834:	20002080 	.word	0x20002080

0800c838 <_fwalk_sglue>:
 800c838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c83c:	4607      	mov	r7, r0
 800c83e:	4688      	mov	r8, r1
 800c840:	4614      	mov	r4, r2
 800c842:	2600      	movs	r6, #0
 800c844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c848:	f1b9 0901 	subs.w	r9, r9, #1
 800c84c:	d505      	bpl.n	800c85a <_fwalk_sglue+0x22>
 800c84e:	6824      	ldr	r4, [r4, #0]
 800c850:	2c00      	cmp	r4, #0
 800c852:	d1f7      	bne.n	800c844 <_fwalk_sglue+0xc>
 800c854:	4630      	mov	r0, r6
 800c856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d907      	bls.n	800c870 <_fwalk_sglue+0x38>
 800c860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c864:	3301      	adds	r3, #1
 800c866:	d003      	beq.n	800c870 <_fwalk_sglue+0x38>
 800c868:	4629      	mov	r1, r5
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c0      	blx	r8
 800c86e:	4306      	orrs	r6, r0
 800c870:	3568      	adds	r5, #104	; 0x68
 800c872:	e7e9      	b.n	800c848 <_fwalk_sglue+0x10>

0800c874 <siprintf>:
 800c874:	b40e      	push	{r1, r2, r3}
 800c876:	b500      	push	{lr}
 800c878:	b09c      	sub	sp, #112	; 0x70
 800c87a:	ab1d      	add	r3, sp, #116	; 0x74
 800c87c:	9002      	str	r0, [sp, #8]
 800c87e:	9006      	str	r0, [sp, #24]
 800c880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c884:	4809      	ldr	r0, [pc, #36]	; (800c8ac <siprintf+0x38>)
 800c886:	9107      	str	r1, [sp, #28]
 800c888:	9104      	str	r1, [sp, #16]
 800c88a:	4909      	ldr	r1, [pc, #36]	; (800c8b0 <siprintf+0x3c>)
 800c88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c890:	9105      	str	r1, [sp, #20]
 800c892:	6800      	ldr	r0, [r0, #0]
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	a902      	add	r1, sp, #8
 800c898:	f002 fbc2 	bl	800f020 <_svfiprintf_r>
 800c89c:	9b02      	ldr	r3, [sp, #8]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	b01c      	add	sp, #112	; 0x70
 800c8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a8:	b003      	add	sp, #12
 800c8aa:	4770      	bx	lr
 800c8ac:	2000006c 	.word	0x2000006c
 800c8b0:	ffff0208 	.word	0xffff0208

0800c8b4 <__sread>:
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8bc:	f000 f8d4 	bl	800ca68 <_read_r>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	bfab      	itete	ge
 800c8c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c8c8:	181b      	addge	r3, r3, r0
 800c8ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8ce:	bfac      	ite	ge
 800c8d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8d2:	81a3      	strhlt	r3, [r4, #12]
 800c8d4:	bd10      	pop	{r4, pc}

0800c8d6 <__swrite>:
 800c8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8da:	461f      	mov	r7, r3
 800c8dc:	898b      	ldrh	r3, [r1, #12]
 800c8de:	05db      	lsls	r3, r3, #23
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	d505      	bpl.n	800c8f4 <__swrite+0x1e>
 800c8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f000 f8a8 	bl	800ca44 <_lseek_r>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8fe:	81a3      	strh	r3, [r4, #12]
 800c900:	4632      	mov	r2, r6
 800c902:	463b      	mov	r3, r7
 800c904:	4628      	mov	r0, r5
 800c906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c90a:	f000 b8cf 	b.w	800caac <_write_r>

0800c90e <__sseek>:
 800c90e:	b510      	push	{r4, lr}
 800c910:	460c      	mov	r4, r1
 800c912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c916:	f000 f895 	bl	800ca44 <_lseek_r>
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	bf15      	itete	ne
 800c920:	6560      	strne	r0, [r4, #84]	; 0x54
 800c922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c92a:	81a3      	strheq	r3, [r4, #12]
 800c92c:	bf18      	it	ne
 800c92e:	81a3      	strhne	r3, [r4, #12]
 800c930:	bd10      	pop	{r4, pc}

0800c932 <__sclose>:
 800c932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c936:	f000 b81f 	b.w	800c978 <_close_r>

0800c93a <memset>:
 800c93a:	4402      	add	r2, r0
 800c93c:	4603      	mov	r3, r0
 800c93e:	4293      	cmp	r3, r2
 800c940:	d100      	bne.n	800c944 <memset+0xa>
 800c942:	4770      	bx	lr
 800c944:	f803 1b01 	strb.w	r1, [r3], #1
 800c948:	e7f9      	b.n	800c93e <memset+0x4>

0800c94a <strncpy>:
 800c94a:	b510      	push	{r4, lr}
 800c94c:	3901      	subs	r1, #1
 800c94e:	4603      	mov	r3, r0
 800c950:	b132      	cbz	r2, 800c960 <strncpy+0x16>
 800c952:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c956:	f803 4b01 	strb.w	r4, [r3], #1
 800c95a:	3a01      	subs	r2, #1
 800c95c:	2c00      	cmp	r4, #0
 800c95e:	d1f7      	bne.n	800c950 <strncpy+0x6>
 800c960:	441a      	add	r2, r3
 800c962:	2100      	movs	r1, #0
 800c964:	4293      	cmp	r3, r2
 800c966:	d100      	bne.n	800c96a <strncpy+0x20>
 800c968:	bd10      	pop	{r4, pc}
 800c96a:	f803 1b01 	strb.w	r1, [r3], #1
 800c96e:	e7f9      	b.n	800c964 <strncpy+0x1a>

0800c970 <_localeconv_r>:
 800c970:	4800      	ldr	r0, [pc, #0]	; (800c974 <_localeconv_r+0x4>)
 800c972:	4770      	bx	lr
 800c974:	20000160 	.word	0x20000160

0800c978 <_close_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d06      	ldr	r5, [pc, #24]	; (800c994 <_close_r+0x1c>)
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	602b      	str	r3, [r5, #0]
 800c984:	f7f5 fead 	bl	80026e2 <_close>
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	d102      	bne.n	800c992 <_close_r+0x1a>
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	b103      	cbz	r3, 800c992 <_close_r+0x1a>
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	20002084 	.word	0x20002084

0800c998 <_reclaim_reent>:
 800c998:	4b29      	ldr	r3, [pc, #164]	; (800ca40 <_reclaim_reent+0xa8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4283      	cmp	r3, r0
 800c99e:	b570      	push	{r4, r5, r6, lr}
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	d04b      	beq.n	800ca3c <_reclaim_reent+0xa4>
 800c9a4:	69c3      	ldr	r3, [r0, #28]
 800c9a6:	b143      	cbz	r3, 800c9ba <_reclaim_reent+0x22>
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d144      	bne.n	800ca38 <_reclaim_reent+0xa0>
 800c9ae:	69e3      	ldr	r3, [r4, #28]
 800c9b0:	6819      	ldr	r1, [r3, #0]
 800c9b2:	b111      	cbz	r1, 800c9ba <_reclaim_reent+0x22>
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f000 ff49 	bl	800d84c <_free_r>
 800c9ba:	6961      	ldr	r1, [r4, #20]
 800c9bc:	b111      	cbz	r1, 800c9c4 <_reclaim_reent+0x2c>
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f000 ff44 	bl	800d84c <_free_r>
 800c9c4:	69e1      	ldr	r1, [r4, #28]
 800c9c6:	b111      	cbz	r1, 800c9ce <_reclaim_reent+0x36>
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f000 ff3f 	bl	800d84c <_free_r>
 800c9ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c9d0:	b111      	cbz	r1, 800c9d8 <_reclaim_reent+0x40>
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f000 ff3a 	bl	800d84c <_free_r>
 800c9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9da:	b111      	cbz	r1, 800c9e2 <_reclaim_reent+0x4a>
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f000 ff35 	bl	800d84c <_free_r>
 800c9e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c9e4:	b111      	cbz	r1, 800c9ec <_reclaim_reent+0x54>
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 ff30 	bl	800d84c <_free_r>
 800c9ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c9ee:	b111      	cbz	r1, 800c9f6 <_reclaim_reent+0x5e>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 ff2b 	bl	800d84c <_free_r>
 800c9f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c9f8:	b111      	cbz	r1, 800ca00 <_reclaim_reent+0x68>
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f000 ff26 	bl	800d84c <_free_r>
 800ca00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ca02:	b111      	cbz	r1, 800ca0a <_reclaim_reent+0x72>
 800ca04:	4620      	mov	r0, r4
 800ca06:	f000 ff21 	bl	800d84c <_free_r>
 800ca0a:	6a23      	ldr	r3, [r4, #32]
 800ca0c:	b1b3      	cbz	r3, 800ca3c <_reclaim_reent+0xa4>
 800ca0e:	4620      	mov	r0, r4
 800ca10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca14:	4718      	bx	r3
 800ca16:	5949      	ldr	r1, [r1, r5]
 800ca18:	b941      	cbnz	r1, 800ca2c <_reclaim_reent+0x94>
 800ca1a:	3504      	adds	r5, #4
 800ca1c:	69e3      	ldr	r3, [r4, #28]
 800ca1e:	2d80      	cmp	r5, #128	; 0x80
 800ca20:	68d9      	ldr	r1, [r3, #12]
 800ca22:	d1f8      	bne.n	800ca16 <_reclaim_reent+0x7e>
 800ca24:	4620      	mov	r0, r4
 800ca26:	f000 ff11 	bl	800d84c <_free_r>
 800ca2a:	e7c0      	b.n	800c9ae <_reclaim_reent+0x16>
 800ca2c:	680e      	ldr	r6, [r1, #0]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 ff0c 	bl	800d84c <_free_r>
 800ca34:	4631      	mov	r1, r6
 800ca36:	e7ef      	b.n	800ca18 <_reclaim_reent+0x80>
 800ca38:	2500      	movs	r5, #0
 800ca3a:	e7ef      	b.n	800ca1c <_reclaim_reent+0x84>
 800ca3c:	bd70      	pop	{r4, r5, r6, pc}
 800ca3e:	bf00      	nop
 800ca40:	2000006c 	.word	0x2000006c

0800ca44 <_lseek_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	4d07      	ldr	r5, [pc, #28]	; (800ca64 <_lseek_r+0x20>)
 800ca48:	4604      	mov	r4, r0
 800ca4a:	4608      	mov	r0, r1
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	2200      	movs	r2, #0
 800ca50:	602a      	str	r2, [r5, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	f7f5 fe6c 	bl	8002730 <_lseek>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_lseek_r+0x1e>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_lseek_r+0x1e>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20002084 	.word	0x20002084

0800ca68 <_read_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4d07      	ldr	r5, [pc, #28]	; (800ca88 <_read_r+0x20>)
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	4608      	mov	r0, r1
 800ca70:	4611      	mov	r1, r2
 800ca72:	2200      	movs	r2, #0
 800ca74:	602a      	str	r2, [r5, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	f7f5 fdfa 	bl	8002670 <_read>
 800ca7c:	1c43      	adds	r3, r0, #1
 800ca7e:	d102      	bne.n	800ca86 <_read_r+0x1e>
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	b103      	cbz	r3, 800ca86 <_read_r+0x1e>
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	bd38      	pop	{r3, r4, r5, pc}
 800ca88:	20002084 	.word	0x20002084

0800ca8c <_sbrk_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4d06      	ldr	r5, [pc, #24]	; (800caa8 <_sbrk_r+0x1c>)
 800ca90:	2300      	movs	r3, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	4608      	mov	r0, r1
 800ca96:	602b      	str	r3, [r5, #0]
 800ca98:	f7f5 fe58 	bl	800274c <_sbrk>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	d102      	bne.n	800caa6 <_sbrk_r+0x1a>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <_sbrk_r+0x1a>
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	20002084 	.word	0x20002084

0800caac <_write_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d07      	ldr	r5, [pc, #28]	; (800cacc <_write_r+0x20>)
 800cab0:	4604      	mov	r4, r0
 800cab2:	4608      	mov	r0, r1
 800cab4:	4611      	mov	r1, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	602a      	str	r2, [r5, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	f7f5 fdf5 	bl	80026aa <_write>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_write_r+0x1e>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_write_r+0x1e>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	20002084 	.word	0x20002084

0800cad0 <__errno>:
 800cad0:	4b01      	ldr	r3, [pc, #4]	; (800cad8 <__errno+0x8>)
 800cad2:	6818      	ldr	r0, [r3, #0]
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	2000006c 	.word	0x2000006c

0800cadc <__libc_init_array>:
 800cadc:	b570      	push	{r4, r5, r6, lr}
 800cade:	4d0d      	ldr	r5, [pc, #52]	; (800cb14 <__libc_init_array+0x38>)
 800cae0:	4c0d      	ldr	r4, [pc, #52]	; (800cb18 <__libc_init_array+0x3c>)
 800cae2:	1b64      	subs	r4, r4, r5
 800cae4:	10a4      	asrs	r4, r4, #2
 800cae6:	2600      	movs	r6, #0
 800cae8:	42a6      	cmp	r6, r4
 800caea:	d109      	bne.n	800cb00 <__libc_init_array+0x24>
 800caec:	4d0b      	ldr	r5, [pc, #44]	; (800cb1c <__libc_init_array+0x40>)
 800caee:	4c0c      	ldr	r4, [pc, #48]	; (800cb20 <__libc_init_array+0x44>)
 800caf0:	f003 fb34 	bl	801015c <_init>
 800caf4:	1b64      	subs	r4, r4, r5
 800caf6:	10a4      	asrs	r4, r4, #2
 800caf8:	2600      	movs	r6, #0
 800cafa:	42a6      	cmp	r6, r4
 800cafc:	d105      	bne.n	800cb0a <__libc_init_array+0x2e>
 800cafe:	bd70      	pop	{r4, r5, r6, pc}
 800cb00:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb04:	4798      	blx	r3
 800cb06:	3601      	adds	r6, #1
 800cb08:	e7ee      	b.n	800cae8 <__libc_init_array+0xc>
 800cb0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb0e:	4798      	blx	r3
 800cb10:	3601      	adds	r6, #1
 800cb12:	e7f2      	b.n	800cafa <__libc_init_array+0x1e>
 800cb14:	080108a8 	.word	0x080108a8
 800cb18:	080108a8 	.word	0x080108a8
 800cb1c:	080108a8 	.word	0x080108a8
 800cb20:	080108ac 	.word	0x080108ac

0800cb24 <__retarget_lock_init_recursive>:
 800cb24:	4770      	bx	lr

0800cb26 <__retarget_lock_acquire_recursive>:
 800cb26:	4770      	bx	lr

0800cb28 <__retarget_lock_release_recursive>:
 800cb28:	4770      	bx	lr

0800cb2a <memcpy>:
 800cb2a:	440a      	add	r2, r1
 800cb2c:	4291      	cmp	r1, r2
 800cb2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb32:	d100      	bne.n	800cb36 <memcpy+0xc>
 800cb34:	4770      	bx	lr
 800cb36:	b510      	push	{r4, lr}
 800cb38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb40:	4291      	cmp	r1, r2
 800cb42:	d1f9      	bne.n	800cb38 <memcpy+0xe>
 800cb44:	bd10      	pop	{r4, pc}
	...

0800cb48 <nanf>:
 800cb48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb50 <nanf+0x8>
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	7fc00000 	.word	0x7fc00000

0800cb54 <quorem>:
 800cb54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	6903      	ldr	r3, [r0, #16]
 800cb5a:	690c      	ldr	r4, [r1, #16]
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	4607      	mov	r7, r0
 800cb60:	db7e      	blt.n	800cc60 <quorem+0x10c>
 800cb62:	3c01      	subs	r4, #1
 800cb64:	f101 0814 	add.w	r8, r1, #20
 800cb68:	f100 0514 	add.w	r5, r0, #20
 800cb6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb86:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb8a:	d331      	bcc.n	800cbf0 <quorem+0x9c>
 800cb8c:	f04f 0e00 	mov.w	lr, #0
 800cb90:	4640      	mov	r0, r8
 800cb92:	46ac      	mov	ip, r5
 800cb94:	46f2      	mov	sl, lr
 800cb96:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb9a:	b293      	uxth	r3, r2
 800cb9c:	fb06 e303 	mla	r3, r6, r3, lr
 800cba0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cba4:	0c1a      	lsrs	r2, r3, #16
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	ebaa 0303 	sub.w	r3, sl, r3
 800cbac:	f8dc a000 	ldr.w	sl, [ip]
 800cbb0:	fa13 f38a 	uxtah	r3, r3, sl
 800cbb4:	fb06 220e 	mla	r2, r6, lr, r2
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	9b00      	ldr	r3, [sp, #0]
 800cbbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cbc0:	b292      	uxth	r2, r2
 800cbc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cbc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbca:	f8bd 3000 	ldrh.w	r3, [sp]
 800cbce:	4581      	cmp	r9, r0
 800cbd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbd4:	f84c 3b04 	str.w	r3, [ip], #4
 800cbd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cbdc:	d2db      	bcs.n	800cb96 <quorem+0x42>
 800cbde:	f855 300b 	ldr.w	r3, [r5, fp]
 800cbe2:	b92b      	cbnz	r3, 800cbf0 <quorem+0x9c>
 800cbe4:	9b01      	ldr	r3, [sp, #4]
 800cbe6:	3b04      	subs	r3, #4
 800cbe8:	429d      	cmp	r5, r3
 800cbea:	461a      	mov	r2, r3
 800cbec:	d32c      	bcc.n	800cc48 <quorem+0xf4>
 800cbee:	613c      	str	r4, [r7, #16]
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f001 f93d 	bl	800de70 <__mcmp>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	db22      	blt.n	800cc40 <quorem+0xec>
 800cbfa:	3601      	adds	r6, #1
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	2000      	movs	r0, #0
 800cc00:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc04:	f8d1 c000 	ldr.w	ip, [r1]
 800cc08:	b293      	uxth	r3, r2
 800cc0a:	1ac3      	subs	r3, r0, r3
 800cc0c:	0c12      	lsrs	r2, r2, #16
 800cc0e:	fa13 f38c 	uxtah	r3, r3, ip
 800cc12:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cc16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc20:	45c1      	cmp	r9, r8
 800cc22:	f841 3b04 	str.w	r3, [r1], #4
 800cc26:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc2a:	d2e9      	bcs.n	800cc00 <quorem+0xac>
 800cc2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc34:	b922      	cbnz	r2, 800cc40 <quorem+0xec>
 800cc36:	3b04      	subs	r3, #4
 800cc38:	429d      	cmp	r5, r3
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	d30a      	bcc.n	800cc54 <quorem+0x100>
 800cc3e:	613c      	str	r4, [r7, #16]
 800cc40:	4630      	mov	r0, r6
 800cc42:	b003      	add	sp, #12
 800cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc48:	6812      	ldr	r2, [r2, #0]
 800cc4a:	3b04      	subs	r3, #4
 800cc4c:	2a00      	cmp	r2, #0
 800cc4e:	d1ce      	bne.n	800cbee <quorem+0x9a>
 800cc50:	3c01      	subs	r4, #1
 800cc52:	e7c9      	b.n	800cbe8 <quorem+0x94>
 800cc54:	6812      	ldr	r2, [r2, #0]
 800cc56:	3b04      	subs	r3, #4
 800cc58:	2a00      	cmp	r2, #0
 800cc5a:	d1f0      	bne.n	800cc3e <quorem+0xea>
 800cc5c:	3c01      	subs	r4, #1
 800cc5e:	e7eb      	b.n	800cc38 <quorem+0xe4>
 800cc60:	2000      	movs	r0, #0
 800cc62:	e7ee      	b.n	800cc42 <quorem+0xee>
 800cc64:	0000      	movs	r0, r0
	...

0800cc68 <_dtoa_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	ed2d 8b04 	vpush	{d8-d9}
 800cc70:	69c5      	ldr	r5, [r0, #28]
 800cc72:	b093      	sub	sp, #76	; 0x4c
 800cc74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc78:	ec57 6b10 	vmov	r6, r7, d0
 800cc7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc80:	9107      	str	r1, [sp, #28]
 800cc82:	4604      	mov	r4, r0
 800cc84:	920a      	str	r2, [sp, #40]	; 0x28
 800cc86:	930d      	str	r3, [sp, #52]	; 0x34
 800cc88:	b975      	cbnz	r5, 800cca8 <_dtoa_r+0x40>
 800cc8a:	2010      	movs	r0, #16
 800cc8c:	f7fe fe06 	bl	800b89c <malloc>
 800cc90:	4602      	mov	r2, r0
 800cc92:	61e0      	str	r0, [r4, #28]
 800cc94:	b920      	cbnz	r0, 800cca0 <_dtoa_r+0x38>
 800cc96:	4bae      	ldr	r3, [pc, #696]	; (800cf50 <_dtoa_r+0x2e8>)
 800cc98:	21ef      	movs	r1, #239	; 0xef
 800cc9a:	48ae      	ldr	r0, [pc, #696]	; (800cf54 <_dtoa_r+0x2ec>)
 800cc9c:	f002 fba0 	bl	800f3e0 <__assert_func>
 800cca0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cca4:	6005      	str	r5, [r0, #0]
 800cca6:	60c5      	str	r5, [r0, #12]
 800cca8:	69e3      	ldr	r3, [r4, #28]
 800ccaa:	6819      	ldr	r1, [r3, #0]
 800ccac:	b151      	cbz	r1, 800ccc4 <_dtoa_r+0x5c>
 800ccae:	685a      	ldr	r2, [r3, #4]
 800ccb0:	604a      	str	r2, [r1, #4]
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4093      	lsls	r3, r2
 800ccb6:	608b      	str	r3, [r1, #8]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 fe53 	bl	800d964 <_Bfree>
 800ccbe:	69e3      	ldr	r3, [r4, #28]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	1e3b      	subs	r3, r7, #0
 800ccc6:	bfbb      	ittet	lt
 800ccc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cccc:	9303      	strlt	r3, [sp, #12]
 800ccce:	2300      	movge	r3, #0
 800ccd0:	2201      	movlt	r2, #1
 800ccd2:	bfac      	ite	ge
 800ccd4:	f8c8 3000 	strge.w	r3, [r8]
 800ccd8:	f8c8 2000 	strlt.w	r2, [r8]
 800ccdc:	4b9e      	ldr	r3, [pc, #632]	; (800cf58 <_dtoa_r+0x2f0>)
 800ccde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cce2:	ea33 0308 	bics.w	r3, r3, r8
 800cce6:	d11b      	bne.n	800cd20 <_dtoa_r+0xb8>
 800cce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccea:	f242 730f 	movw	r3, #9999	; 0x270f
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ccf4:	4333      	orrs	r3, r6
 800ccf6:	f000 8593 	beq.w	800d820 <_dtoa_r+0xbb8>
 800ccfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccfc:	b963      	cbnz	r3, 800cd18 <_dtoa_r+0xb0>
 800ccfe:	4b97      	ldr	r3, [pc, #604]	; (800cf5c <_dtoa_r+0x2f4>)
 800cd00:	e027      	b.n	800cd52 <_dtoa_r+0xea>
 800cd02:	4b97      	ldr	r3, [pc, #604]	; (800cf60 <_dtoa_r+0x2f8>)
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	3308      	adds	r3, #8
 800cd08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd0a:	6013      	str	r3, [r2, #0]
 800cd0c:	9800      	ldr	r0, [sp, #0]
 800cd0e:	b013      	add	sp, #76	; 0x4c
 800cd10:	ecbd 8b04 	vpop	{d8-d9}
 800cd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd18:	4b90      	ldr	r3, [pc, #576]	; (800cf5c <_dtoa_r+0x2f4>)
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	3303      	adds	r3, #3
 800cd1e:	e7f3      	b.n	800cd08 <_dtoa_r+0xa0>
 800cd20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd24:	2200      	movs	r2, #0
 800cd26:	ec51 0b17 	vmov	r0, r1, d7
 800cd2a:	eeb0 8a47 	vmov.f32	s16, s14
 800cd2e:	eef0 8a67 	vmov.f32	s17, s15
 800cd32:	2300      	movs	r3, #0
 800cd34:	f7f3 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd38:	4681      	mov	r9, r0
 800cd3a:	b160      	cbz	r0, 800cd56 <_dtoa_r+0xee>
 800cd3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd3e:	2301      	movs	r3, #1
 800cd40:	6013      	str	r3, [r2, #0]
 800cd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 8568 	beq.w	800d81a <_dtoa_r+0xbb2>
 800cd4a:	4b86      	ldr	r3, [pc, #536]	; (800cf64 <_dtoa_r+0x2fc>)
 800cd4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	e7da      	b.n	800cd0c <_dtoa_r+0xa4>
 800cd56:	aa10      	add	r2, sp, #64	; 0x40
 800cd58:	a911      	add	r1, sp, #68	; 0x44
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	eeb0 0a48 	vmov.f32	s0, s16
 800cd60:	eef0 0a68 	vmov.f32	s1, s17
 800cd64:	f001 f99a 	bl	800e09c <__d2b>
 800cd68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cd6c:	4682      	mov	sl, r0
 800cd6e:	2d00      	cmp	r5, #0
 800cd70:	d07f      	beq.n	800ce72 <_dtoa_r+0x20a>
 800cd72:	ee18 3a90 	vmov	r3, s17
 800cd76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cd7e:	ec51 0b18 	vmov	r0, r1, d8
 800cd82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cd8e:	4619      	mov	r1, r3
 800cd90:	2200      	movs	r2, #0
 800cd92:	4b75      	ldr	r3, [pc, #468]	; (800cf68 <_dtoa_r+0x300>)
 800cd94:	f7f3 fa78 	bl	8000288 <__aeabi_dsub>
 800cd98:	a367      	add	r3, pc, #412	; (adr r3, 800cf38 <_dtoa_r+0x2d0>)
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	f7f3 fc2b 	bl	80005f8 <__aeabi_dmul>
 800cda2:	a367      	add	r3, pc, #412	; (adr r3, 800cf40 <_dtoa_r+0x2d8>)
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f7f3 fa70 	bl	800028c <__adddf3>
 800cdac:	4606      	mov	r6, r0
 800cdae:	4628      	mov	r0, r5
 800cdb0:	460f      	mov	r7, r1
 800cdb2:	f7f3 fbb7 	bl	8000524 <__aeabi_i2d>
 800cdb6:	a364      	add	r3, pc, #400	; (adr r3, 800cf48 <_dtoa_r+0x2e0>)
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	4639      	mov	r1, r7
 800cdc8:	f7f3 fa60 	bl	800028c <__adddf3>
 800cdcc:	4606      	mov	r6, r0
 800cdce:	460f      	mov	r7, r1
 800cdd0:	f7f3 fec2 	bl	8000b58 <__aeabi_d2iz>
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4683      	mov	fp, r0
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	f7f3 fe7d 	bl	8000adc <__aeabi_dcmplt>
 800cde2:	b148      	cbz	r0, 800cdf8 <_dtoa_r+0x190>
 800cde4:	4658      	mov	r0, fp
 800cde6:	f7f3 fb9d 	bl	8000524 <__aeabi_i2d>
 800cdea:	4632      	mov	r2, r6
 800cdec:	463b      	mov	r3, r7
 800cdee:	f7f3 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdf2:	b908      	cbnz	r0, 800cdf8 <_dtoa_r+0x190>
 800cdf4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cdf8:	f1bb 0f16 	cmp.w	fp, #22
 800cdfc:	d857      	bhi.n	800ceae <_dtoa_r+0x246>
 800cdfe:	4b5b      	ldr	r3, [pc, #364]	; (800cf6c <_dtoa_r+0x304>)
 800ce00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	ec51 0b18 	vmov	r0, r1, d8
 800ce0c:	f7f3 fe66 	bl	8000adc <__aeabi_dcmplt>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d04e      	beq.n	800ceb2 <_dtoa_r+0x24a>
 800ce14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ce18:	2300      	movs	r3, #0
 800ce1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ce1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce1e:	1b5b      	subs	r3, r3, r5
 800ce20:	1e5a      	subs	r2, r3, #1
 800ce22:	bf45      	ittet	mi
 800ce24:	f1c3 0301 	rsbmi	r3, r3, #1
 800ce28:	9305      	strmi	r3, [sp, #20]
 800ce2a:	2300      	movpl	r3, #0
 800ce2c:	2300      	movmi	r3, #0
 800ce2e:	9206      	str	r2, [sp, #24]
 800ce30:	bf54      	ite	pl
 800ce32:	9305      	strpl	r3, [sp, #20]
 800ce34:	9306      	strmi	r3, [sp, #24]
 800ce36:	f1bb 0f00 	cmp.w	fp, #0
 800ce3a:	db3c      	blt.n	800ceb6 <_dtoa_r+0x24e>
 800ce3c:	9b06      	ldr	r3, [sp, #24]
 800ce3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ce42:	445b      	add	r3, fp
 800ce44:	9306      	str	r3, [sp, #24]
 800ce46:	2300      	movs	r3, #0
 800ce48:	9308      	str	r3, [sp, #32]
 800ce4a:	9b07      	ldr	r3, [sp, #28]
 800ce4c:	2b09      	cmp	r3, #9
 800ce4e:	d868      	bhi.n	800cf22 <_dtoa_r+0x2ba>
 800ce50:	2b05      	cmp	r3, #5
 800ce52:	bfc4      	itt	gt
 800ce54:	3b04      	subgt	r3, #4
 800ce56:	9307      	strgt	r3, [sp, #28]
 800ce58:	9b07      	ldr	r3, [sp, #28]
 800ce5a:	f1a3 0302 	sub.w	r3, r3, #2
 800ce5e:	bfcc      	ite	gt
 800ce60:	2500      	movgt	r5, #0
 800ce62:	2501      	movle	r5, #1
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	f200 8085 	bhi.w	800cf74 <_dtoa_r+0x30c>
 800ce6a:	e8df f003 	tbb	[pc, r3]
 800ce6e:	3b2e      	.short	0x3b2e
 800ce70:	5839      	.short	0x5839
 800ce72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce76:	441d      	add	r5, r3
 800ce78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce7c:	2b20      	cmp	r3, #32
 800ce7e:	bfc1      	itttt	gt
 800ce80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce84:	fa08 f803 	lslgt.w	r8, r8, r3
 800ce88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ce8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ce90:	bfd6      	itet	le
 800ce92:	f1c3 0320 	rsble	r3, r3, #32
 800ce96:	ea48 0003 	orrgt.w	r0, r8, r3
 800ce9a:	fa06 f003 	lslle.w	r0, r6, r3
 800ce9e:	f7f3 fb31 	bl	8000504 <__aeabi_ui2d>
 800cea2:	2201      	movs	r2, #1
 800cea4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cea8:	3d01      	subs	r5, #1
 800ceaa:	920e      	str	r2, [sp, #56]	; 0x38
 800ceac:	e76f      	b.n	800cd8e <_dtoa_r+0x126>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e7b3      	b.n	800ce1a <_dtoa_r+0x1b2>
 800ceb2:	900c      	str	r0, [sp, #48]	; 0x30
 800ceb4:	e7b2      	b.n	800ce1c <_dtoa_r+0x1b4>
 800ceb6:	9b05      	ldr	r3, [sp, #20]
 800ceb8:	eba3 030b 	sub.w	r3, r3, fp
 800cebc:	9305      	str	r3, [sp, #20]
 800cebe:	f1cb 0300 	rsb	r3, fp, #0
 800cec2:	9308      	str	r3, [sp, #32]
 800cec4:	2300      	movs	r3, #0
 800cec6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cec8:	e7bf      	b.n	800ce4a <_dtoa_r+0x1e2>
 800ceca:	2300      	movs	r3, #0
 800cecc:	9309      	str	r3, [sp, #36]	; 0x24
 800cece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dc52      	bgt.n	800cf7a <_dtoa_r+0x312>
 800ced4:	2301      	movs	r3, #1
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	9304      	str	r3, [sp, #16]
 800ceda:	461a      	mov	r2, r3
 800cedc:	920a      	str	r2, [sp, #40]	; 0x28
 800cede:	e00b      	b.n	800cef8 <_dtoa_r+0x290>
 800cee0:	2301      	movs	r3, #1
 800cee2:	e7f3      	b.n	800cecc <_dtoa_r+0x264>
 800cee4:	2300      	movs	r3, #0
 800cee6:	9309      	str	r3, [sp, #36]	; 0x24
 800cee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceea:	445b      	add	r3, fp
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	3301      	adds	r3, #1
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	bfb8      	it	lt
 800cef6:	2301      	movlt	r3, #1
 800cef8:	69e0      	ldr	r0, [r4, #28]
 800cefa:	2100      	movs	r1, #0
 800cefc:	2204      	movs	r2, #4
 800cefe:	f102 0614 	add.w	r6, r2, #20
 800cf02:	429e      	cmp	r6, r3
 800cf04:	d93d      	bls.n	800cf82 <_dtoa_r+0x31a>
 800cf06:	6041      	str	r1, [r0, #4]
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 fceb 	bl	800d8e4 <_Balloc>
 800cf0e:	9000      	str	r0, [sp, #0]
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d139      	bne.n	800cf88 <_dtoa_r+0x320>
 800cf14:	4b16      	ldr	r3, [pc, #88]	; (800cf70 <_dtoa_r+0x308>)
 800cf16:	4602      	mov	r2, r0
 800cf18:	f240 11af 	movw	r1, #431	; 0x1af
 800cf1c:	e6bd      	b.n	800cc9a <_dtoa_r+0x32>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e7e1      	b.n	800cee6 <_dtoa_r+0x27e>
 800cf22:	2501      	movs	r5, #1
 800cf24:	2300      	movs	r3, #0
 800cf26:	9307      	str	r3, [sp, #28]
 800cf28:	9509      	str	r5, [sp, #36]	; 0x24
 800cf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	2200      	movs	r2, #0
 800cf34:	2312      	movs	r3, #18
 800cf36:	e7d1      	b.n	800cedc <_dtoa_r+0x274>
 800cf38:	636f4361 	.word	0x636f4361
 800cf3c:	3fd287a7 	.word	0x3fd287a7
 800cf40:	8b60c8b3 	.word	0x8b60c8b3
 800cf44:	3fc68a28 	.word	0x3fc68a28
 800cf48:	509f79fb 	.word	0x509f79fb
 800cf4c:	3fd34413 	.word	0x3fd34413
 800cf50:	080104ba 	.word	0x080104ba
 800cf54:	080104d1 	.word	0x080104d1
 800cf58:	7ff00000 	.word	0x7ff00000
 800cf5c:	080104b6 	.word	0x080104b6
 800cf60:	080104ad 	.word	0x080104ad
 800cf64:	08010485 	.word	0x08010485
 800cf68:	3ff80000 	.word	0x3ff80000
 800cf6c:	080105c0 	.word	0x080105c0
 800cf70:	08010529 	.word	0x08010529
 800cf74:	2301      	movs	r3, #1
 800cf76:	9309      	str	r3, [sp, #36]	; 0x24
 800cf78:	e7d7      	b.n	800cf2a <_dtoa_r+0x2c2>
 800cf7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	9304      	str	r3, [sp, #16]
 800cf80:	e7ba      	b.n	800cef8 <_dtoa_r+0x290>
 800cf82:	3101      	adds	r1, #1
 800cf84:	0052      	lsls	r2, r2, #1
 800cf86:	e7ba      	b.n	800cefe <_dtoa_r+0x296>
 800cf88:	69e3      	ldr	r3, [r4, #28]
 800cf8a:	9a00      	ldr	r2, [sp, #0]
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	2b0e      	cmp	r3, #14
 800cf92:	f200 80a8 	bhi.w	800d0e6 <_dtoa_r+0x47e>
 800cf96:	2d00      	cmp	r5, #0
 800cf98:	f000 80a5 	beq.w	800d0e6 <_dtoa_r+0x47e>
 800cf9c:	f1bb 0f00 	cmp.w	fp, #0
 800cfa0:	dd38      	ble.n	800d014 <_dtoa_r+0x3ac>
 800cfa2:	4bc0      	ldr	r3, [pc, #768]	; (800d2a4 <_dtoa_r+0x63c>)
 800cfa4:	f00b 020f 	and.w	r2, fp, #15
 800cfa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cfb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cfb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cfb8:	d019      	beq.n	800cfee <_dtoa_r+0x386>
 800cfba:	4bbb      	ldr	r3, [pc, #748]	; (800d2a8 <_dtoa_r+0x640>)
 800cfbc:	ec51 0b18 	vmov	r0, r1, d8
 800cfc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfc4:	f7f3 fc42 	bl	800084c <__aeabi_ddiv>
 800cfc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfcc:	f008 080f 	and.w	r8, r8, #15
 800cfd0:	2503      	movs	r5, #3
 800cfd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d2a8 <_dtoa_r+0x640>
 800cfd6:	f1b8 0f00 	cmp.w	r8, #0
 800cfda:	d10a      	bne.n	800cff2 <_dtoa_r+0x38a>
 800cfdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	463b      	mov	r3, r7
 800cfe4:	f7f3 fc32 	bl	800084c <__aeabi_ddiv>
 800cfe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfec:	e02b      	b.n	800d046 <_dtoa_r+0x3de>
 800cfee:	2502      	movs	r5, #2
 800cff0:	e7ef      	b.n	800cfd2 <_dtoa_r+0x36a>
 800cff2:	f018 0f01 	tst.w	r8, #1
 800cff6:	d008      	beq.n	800d00a <_dtoa_r+0x3a2>
 800cff8:	4630      	mov	r0, r6
 800cffa:	4639      	mov	r1, r7
 800cffc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d000:	f7f3 fafa 	bl	80005f8 <__aeabi_dmul>
 800d004:	3501      	adds	r5, #1
 800d006:	4606      	mov	r6, r0
 800d008:	460f      	mov	r7, r1
 800d00a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d00e:	f109 0908 	add.w	r9, r9, #8
 800d012:	e7e0      	b.n	800cfd6 <_dtoa_r+0x36e>
 800d014:	f000 809f 	beq.w	800d156 <_dtoa_r+0x4ee>
 800d018:	f1cb 0600 	rsb	r6, fp, #0
 800d01c:	4ba1      	ldr	r3, [pc, #644]	; (800d2a4 <_dtoa_r+0x63c>)
 800d01e:	4fa2      	ldr	r7, [pc, #648]	; (800d2a8 <_dtoa_r+0x640>)
 800d020:	f006 020f 	and.w	r2, r6, #15
 800d024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	ec51 0b18 	vmov	r0, r1, d8
 800d030:	f7f3 fae2 	bl	80005f8 <__aeabi_dmul>
 800d034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d038:	1136      	asrs	r6, r6, #4
 800d03a:	2300      	movs	r3, #0
 800d03c:	2502      	movs	r5, #2
 800d03e:	2e00      	cmp	r6, #0
 800d040:	d17e      	bne.n	800d140 <_dtoa_r+0x4d8>
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1d0      	bne.n	800cfe8 <_dtoa_r+0x380>
 800d046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d048:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f000 8084 	beq.w	800d15a <_dtoa_r+0x4f2>
 800d052:	4b96      	ldr	r3, [pc, #600]	; (800d2ac <_dtoa_r+0x644>)
 800d054:	2200      	movs	r2, #0
 800d056:	4640      	mov	r0, r8
 800d058:	4649      	mov	r1, r9
 800d05a:	f7f3 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d07b      	beq.n	800d15a <_dtoa_r+0x4f2>
 800d062:	9b04      	ldr	r3, [sp, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d078      	beq.n	800d15a <_dtoa_r+0x4f2>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	dd39      	ble.n	800d0e2 <_dtoa_r+0x47a>
 800d06e:	4b90      	ldr	r3, [pc, #576]	; (800d2b0 <_dtoa_r+0x648>)
 800d070:	2200      	movs	r2, #0
 800d072:	4640      	mov	r0, r8
 800d074:	4649      	mov	r1, r9
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d07e:	9e01      	ldr	r6, [sp, #4]
 800d080:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d084:	3501      	adds	r5, #1
 800d086:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d08a:	4628      	mov	r0, r5
 800d08c:	f7f3 fa4a 	bl	8000524 <__aeabi_i2d>
 800d090:	4642      	mov	r2, r8
 800d092:	464b      	mov	r3, r9
 800d094:	f7f3 fab0 	bl	80005f8 <__aeabi_dmul>
 800d098:	4b86      	ldr	r3, [pc, #536]	; (800d2b4 <_dtoa_r+0x64c>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	f7f3 f8f6 	bl	800028c <__adddf3>
 800d0a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a8:	9303      	str	r3, [sp, #12]
 800d0aa:	2e00      	cmp	r6, #0
 800d0ac:	d158      	bne.n	800d160 <_dtoa_r+0x4f8>
 800d0ae:	4b82      	ldr	r3, [pc, #520]	; (800d2b8 <_dtoa_r+0x650>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	4640      	mov	r0, r8
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	f7f3 f8e7 	bl	8000288 <__aeabi_dsub>
 800d0ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0be:	4680      	mov	r8, r0
 800d0c0:	4689      	mov	r9, r1
 800d0c2:	f7f3 fd29 	bl	8000b18 <__aeabi_dcmpgt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f040 8296 	bne.w	800d5f8 <_dtoa_r+0x990>
 800d0cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d0d0:	4640      	mov	r0, r8
 800d0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	f7f3 fd00 	bl	8000adc <__aeabi_dcmplt>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f040 8289 	bne.w	800d5f4 <_dtoa_r+0x98c>
 800d0e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f2c0 814e 	blt.w	800d38a <_dtoa_r+0x722>
 800d0ee:	f1bb 0f0e 	cmp.w	fp, #14
 800d0f2:	f300 814a 	bgt.w	800d38a <_dtoa_r+0x722>
 800d0f6:	4b6b      	ldr	r3, [pc, #428]	; (800d2a4 <_dtoa_r+0x63c>)
 800d0f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d0fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d102:	2b00      	cmp	r3, #0
 800d104:	f280 80dc 	bge.w	800d2c0 <_dtoa_r+0x658>
 800d108:	9b04      	ldr	r3, [sp, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f300 80d8 	bgt.w	800d2c0 <_dtoa_r+0x658>
 800d110:	f040 826f 	bne.w	800d5f2 <_dtoa_r+0x98a>
 800d114:	4b68      	ldr	r3, [pc, #416]	; (800d2b8 <_dtoa_r+0x650>)
 800d116:	2200      	movs	r2, #0
 800d118:	4640      	mov	r0, r8
 800d11a:	4649      	mov	r1, r9
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d124:	f7f3 fcee 	bl	8000b04 <__aeabi_dcmpge>
 800d128:	9e04      	ldr	r6, [sp, #16]
 800d12a:	4637      	mov	r7, r6
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f040 8245 	bne.w	800d5bc <_dtoa_r+0x954>
 800d132:	9d00      	ldr	r5, [sp, #0]
 800d134:	2331      	movs	r3, #49	; 0x31
 800d136:	f805 3b01 	strb.w	r3, [r5], #1
 800d13a:	f10b 0b01 	add.w	fp, fp, #1
 800d13e:	e241      	b.n	800d5c4 <_dtoa_r+0x95c>
 800d140:	07f2      	lsls	r2, r6, #31
 800d142:	d505      	bpl.n	800d150 <_dtoa_r+0x4e8>
 800d144:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d148:	f7f3 fa56 	bl	80005f8 <__aeabi_dmul>
 800d14c:	3501      	adds	r5, #1
 800d14e:	2301      	movs	r3, #1
 800d150:	1076      	asrs	r6, r6, #1
 800d152:	3708      	adds	r7, #8
 800d154:	e773      	b.n	800d03e <_dtoa_r+0x3d6>
 800d156:	2502      	movs	r5, #2
 800d158:	e775      	b.n	800d046 <_dtoa_r+0x3de>
 800d15a:	9e04      	ldr	r6, [sp, #16]
 800d15c:	465f      	mov	r7, fp
 800d15e:	e792      	b.n	800d086 <_dtoa_r+0x41e>
 800d160:	9900      	ldr	r1, [sp, #0]
 800d162:	4b50      	ldr	r3, [pc, #320]	; (800d2a4 <_dtoa_r+0x63c>)
 800d164:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d168:	4431      	add	r1, r6
 800d16a:	9102      	str	r1, [sp, #8]
 800d16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d16e:	eeb0 9a47 	vmov.f32	s18, s14
 800d172:	eef0 9a67 	vmov.f32	s19, s15
 800d176:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d17a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d17e:	2900      	cmp	r1, #0
 800d180:	d044      	beq.n	800d20c <_dtoa_r+0x5a4>
 800d182:	494e      	ldr	r1, [pc, #312]	; (800d2bc <_dtoa_r+0x654>)
 800d184:	2000      	movs	r0, #0
 800d186:	f7f3 fb61 	bl	800084c <__aeabi_ddiv>
 800d18a:	ec53 2b19 	vmov	r2, r3, d9
 800d18e:	f7f3 f87b 	bl	8000288 <__aeabi_dsub>
 800d192:	9d00      	ldr	r5, [sp, #0]
 800d194:	ec41 0b19 	vmov	d9, r0, r1
 800d198:	4649      	mov	r1, r9
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7f3 fcdc 	bl	8000b58 <__aeabi_d2iz>
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	f7f3 f9bf 	bl	8000524 <__aeabi_i2d>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	f7f3 f86b 	bl	8000288 <__aeabi_dsub>
 800d1b2:	3630      	adds	r6, #48	; 0x30
 800d1b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d1b8:	ec53 2b19 	vmov	r2, r3, d9
 800d1bc:	4680      	mov	r8, r0
 800d1be:	4689      	mov	r9, r1
 800d1c0:	f7f3 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d164      	bne.n	800d292 <_dtoa_r+0x62a>
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	464b      	mov	r3, r9
 800d1cc:	4937      	ldr	r1, [pc, #220]	; (800d2ac <_dtoa_r+0x644>)
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	f7f3 f85a 	bl	8000288 <__aeabi_dsub>
 800d1d4:	ec53 2b19 	vmov	r2, r3, d9
 800d1d8:	f7f3 fc80 	bl	8000adc <__aeabi_dcmplt>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	f040 80b6 	bne.w	800d34e <_dtoa_r+0x6e6>
 800d1e2:	9b02      	ldr	r3, [sp, #8]
 800d1e4:	429d      	cmp	r5, r3
 800d1e6:	f43f af7c 	beq.w	800d0e2 <_dtoa_r+0x47a>
 800d1ea:	4b31      	ldr	r3, [pc, #196]	; (800d2b0 <_dtoa_r+0x648>)
 800d1ec:	ec51 0b19 	vmov	r0, r1, d9
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <_dtoa_r+0x648>)
 800d1f8:	ec41 0b19 	vmov	d9, r0, r1
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	4640      	mov	r0, r8
 800d200:	4649      	mov	r1, r9
 800d202:	f7f3 f9f9 	bl	80005f8 <__aeabi_dmul>
 800d206:	4680      	mov	r8, r0
 800d208:	4689      	mov	r9, r1
 800d20a:	e7c5      	b.n	800d198 <_dtoa_r+0x530>
 800d20c:	ec51 0b17 	vmov	r0, r1, d7
 800d210:	f7f3 f9f2 	bl	80005f8 <__aeabi_dmul>
 800d214:	9b02      	ldr	r3, [sp, #8]
 800d216:	9d00      	ldr	r5, [sp, #0]
 800d218:	930f      	str	r3, [sp, #60]	; 0x3c
 800d21a:	ec41 0b19 	vmov	d9, r0, r1
 800d21e:	4649      	mov	r1, r9
 800d220:	4640      	mov	r0, r8
 800d222:	f7f3 fc99 	bl	8000b58 <__aeabi_d2iz>
 800d226:	4606      	mov	r6, r0
 800d228:	f7f3 f97c 	bl	8000524 <__aeabi_i2d>
 800d22c:	3630      	adds	r6, #48	; 0x30
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4640      	mov	r0, r8
 800d234:	4649      	mov	r1, r9
 800d236:	f7f3 f827 	bl	8000288 <__aeabi_dsub>
 800d23a:	f805 6b01 	strb.w	r6, [r5], #1
 800d23e:	9b02      	ldr	r3, [sp, #8]
 800d240:	429d      	cmp	r5, r3
 800d242:	4680      	mov	r8, r0
 800d244:	4689      	mov	r9, r1
 800d246:	f04f 0200 	mov.w	r2, #0
 800d24a:	d124      	bne.n	800d296 <_dtoa_r+0x62e>
 800d24c:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <_dtoa_r+0x654>)
 800d24e:	ec51 0b19 	vmov	r0, r1, d9
 800d252:	f7f3 f81b 	bl	800028c <__adddf3>
 800d256:	4602      	mov	r2, r0
 800d258:	460b      	mov	r3, r1
 800d25a:	4640      	mov	r0, r8
 800d25c:	4649      	mov	r1, r9
 800d25e:	f7f3 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 800d262:	2800      	cmp	r0, #0
 800d264:	d173      	bne.n	800d34e <_dtoa_r+0x6e6>
 800d266:	ec53 2b19 	vmov	r2, r3, d9
 800d26a:	4914      	ldr	r1, [pc, #80]	; (800d2bc <_dtoa_r+0x654>)
 800d26c:	2000      	movs	r0, #0
 800d26e:	f7f3 f80b 	bl	8000288 <__aeabi_dsub>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	4640      	mov	r0, r8
 800d278:	4649      	mov	r1, r9
 800d27a:	f7f3 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800d27e:	2800      	cmp	r0, #0
 800d280:	f43f af2f 	beq.w	800d0e2 <_dtoa_r+0x47a>
 800d284:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d286:	1e6b      	subs	r3, r5, #1
 800d288:	930f      	str	r3, [sp, #60]	; 0x3c
 800d28a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d28e:	2b30      	cmp	r3, #48	; 0x30
 800d290:	d0f8      	beq.n	800d284 <_dtoa_r+0x61c>
 800d292:	46bb      	mov	fp, r7
 800d294:	e04a      	b.n	800d32c <_dtoa_r+0x6c4>
 800d296:	4b06      	ldr	r3, [pc, #24]	; (800d2b0 <_dtoa_r+0x648>)
 800d298:	f7f3 f9ae 	bl	80005f8 <__aeabi_dmul>
 800d29c:	4680      	mov	r8, r0
 800d29e:	4689      	mov	r9, r1
 800d2a0:	e7bd      	b.n	800d21e <_dtoa_r+0x5b6>
 800d2a2:	bf00      	nop
 800d2a4:	080105c0 	.word	0x080105c0
 800d2a8:	08010598 	.word	0x08010598
 800d2ac:	3ff00000 	.word	0x3ff00000
 800d2b0:	40240000 	.word	0x40240000
 800d2b4:	401c0000 	.word	0x401c0000
 800d2b8:	40140000 	.word	0x40140000
 800d2bc:	3fe00000 	.word	0x3fe00000
 800d2c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d2c4:	9d00      	ldr	r5, [sp, #0]
 800d2c6:	4642      	mov	r2, r8
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	f7f3 fabd 	bl	800084c <__aeabi_ddiv>
 800d2d2:	f7f3 fc41 	bl	8000b58 <__aeabi_d2iz>
 800d2d6:	9001      	str	r0, [sp, #4]
 800d2d8:	f7f3 f924 	bl	8000524 <__aeabi_i2d>
 800d2dc:	4642      	mov	r2, r8
 800d2de:	464b      	mov	r3, r9
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	f7f2 ffcc 	bl	8000288 <__aeabi_dsub>
 800d2f0:	9e01      	ldr	r6, [sp, #4]
 800d2f2:	9f04      	ldr	r7, [sp, #16]
 800d2f4:	3630      	adds	r6, #48	; 0x30
 800d2f6:	f805 6b01 	strb.w	r6, [r5], #1
 800d2fa:	9e00      	ldr	r6, [sp, #0]
 800d2fc:	1bae      	subs	r6, r5, r6
 800d2fe:	42b7      	cmp	r7, r6
 800d300:	4602      	mov	r2, r0
 800d302:	460b      	mov	r3, r1
 800d304:	d134      	bne.n	800d370 <_dtoa_r+0x708>
 800d306:	f7f2 ffc1 	bl	800028c <__adddf3>
 800d30a:	4642      	mov	r2, r8
 800d30c:	464b      	mov	r3, r9
 800d30e:	4606      	mov	r6, r0
 800d310:	460f      	mov	r7, r1
 800d312:	f7f3 fc01 	bl	8000b18 <__aeabi_dcmpgt>
 800d316:	b9c8      	cbnz	r0, 800d34c <_dtoa_r+0x6e4>
 800d318:	4642      	mov	r2, r8
 800d31a:	464b      	mov	r3, r9
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	f7f3 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d324:	b110      	cbz	r0, 800d32c <_dtoa_r+0x6c4>
 800d326:	9b01      	ldr	r3, [sp, #4]
 800d328:	07db      	lsls	r3, r3, #31
 800d32a:	d40f      	bmi.n	800d34c <_dtoa_r+0x6e4>
 800d32c:	4651      	mov	r1, sl
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fb18 	bl	800d964 <_Bfree>
 800d334:	2300      	movs	r3, #0
 800d336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d338:	702b      	strb	r3, [r5, #0]
 800d33a:	f10b 0301 	add.w	r3, fp, #1
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d342:	2b00      	cmp	r3, #0
 800d344:	f43f ace2 	beq.w	800cd0c <_dtoa_r+0xa4>
 800d348:	601d      	str	r5, [r3, #0]
 800d34a:	e4df      	b.n	800cd0c <_dtoa_r+0xa4>
 800d34c:	465f      	mov	r7, fp
 800d34e:	462b      	mov	r3, r5
 800d350:	461d      	mov	r5, r3
 800d352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d356:	2a39      	cmp	r2, #57	; 0x39
 800d358:	d106      	bne.n	800d368 <_dtoa_r+0x700>
 800d35a:	9a00      	ldr	r2, [sp, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d1f7      	bne.n	800d350 <_dtoa_r+0x6e8>
 800d360:	9900      	ldr	r1, [sp, #0]
 800d362:	2230      	movs	r2, #48	; 0x30
 800d364:	3701      	adds	r7, #1
 800d366:	700a      	strb	r2, [r1, #0]
 800d368:	781a      	ldrb	r2, [r3, #0]
 800d36a:	3201      	adds	r2, #1
 800d36c:	701a      	strb	r2, [r3, #0]
 800d36e:	e790      	b.n	800d292 <_dtoa_r+0x62a>
 800d370:	4ba3      	ldr	r3, [pc, #652]	; (800d600 <_dtoa_r+0x998>)
 800d372:	2200      	movs	r2, #0
 800d374:	f7f3 f940 	bl	80005f8 <__aeabi_dmul>
 800d378:	2200      	movs	r2, #0
 800d37a:	2300      	movs	r3, #0
 800d37c:	4606      	mov	r6, r0
 800d37e:	460f      	mov	r7, r1
 800d380:	f7f3 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d384:	2800      	cmp	r0, #0
 800d386:	d09e      	beq.n	800d2c6 <_dtoa_r+0x65e>
 800d388:	e7d0      	b.n	800d32c <_dtoa_r+0x6c4>
 800d38a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d38c:	2a00      	cmp	r2, #0
 800d38e:	f000 80ca 	beq.w	800d526 <_dtoa_r+0x8be>
 800d392:	9a07      	ldr	r2, [sp, #28]
 800d394:	2a01      	cmp	r2, #1
 800d396:	f300 80ad 	bgt.w	800d4f4 <_dtoa_r+0x88c>
 800d39a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d39c:	2a00      	cmp	r2, #0
 800d39e:	f000 80a5 	beq.w	800d4ec <_dtoa_r+0x884>
 800d3a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3a6:	9e08      	ldr	r6, [sp, #32]
 800d3a8:	9d05      	ldr	r5, [sp, #20]
 800d3aa:	9a05      	ldr	r2, [sp, #20]
 800d3ac:	441a      	add	r2, r3
 800d3ae:	9205      	str	r2, [sp, #20]
 800d3b0:	9a06      	ldr	r2, [sp, #24]
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	441a      	add	r2, r3
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	9206      	str	r2, [sp, #24]
 800d3ba:	f000 fbd3 	bl	800db64 <__i2b>
 800d3be:	4607      	mov	r7, r0
 800d3c0:	b165      	cbz	r5, 800d3dc <_dtoa_r+0x774>
 800d3c2:	9b06      	ldr	r3, [sp, #24]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dd09      	ble.n	800d3dc <_dtoa_r+0x774>
 800d3c8:	42ab      	cmp	r3, r5
 800d3ca:	9a05      	ldr	r2, [sp, #20]
 800d3cc:	bfa8      	it	ge
 800d3ce:	462b      	movge	r3, r5
 800d3d0:	1ad2      	subs	r2, r2, r3
 800d3d2:	9205      	str	r2, [sp, #20]
 800d3d4:	9a06      	ldr	r2, [sp, #24]
 800d3d6:	1aed      	subs	r5, r5, r3
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	9306      	str	r3, [sp, #24]
 800d3dc:	9b08      	ldr	r3, [sp, #32]
 800d3de:	b1f3      	cbz	r3, 800d41e <_dtoa_r+0x7b6>
 800d3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 80a3 	beq.w	800d52e <_dtoa_r+0x8c6>
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	dd10      	ble.n	800d40e <_dtoa_r+0x7a6>
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4632      	mov	r2, r6
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f000 fc77 	bl	800dce4 <__pow5mult>
 800d3f6:	4652      	mov	r2, sl
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	4607      	mov	r7, r0
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fbc7 	bl	800db90 <__multiply>
 800d402:	4651      	mov	r1, sl
 800d404:	4680      	mov	r8, r0
 800d406:	4620      	mov	r0, r4
 800d408:	f000 faac 	bl	800d964 <_Bfree>
 800d40c:	46c2      	mov	sl, r8
 800d40e:	9b08      	ldr	r3, [sp, #32]
 800d410:	1b9a      	subs	r2, r3, r6
 800d412:	d004      	beq.n	800d41e <_dtoa_r+0x7b6>
 800d414:	4651      	mov	r1, sl
 800d416:	4620      	mov	r0, r4
 800d418:	f000 fc64 	bl	800dce4 <__pow5mult>
 800d41c:	4682      	mov	sl, r0
 800d41e:	2101      	movs	r1, #1
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fb9f 	bl	800db64 <__i2b>
 800d426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	4606      	mov	r6, r0
 800d42c:	f340 8081 	ble.w	800d532 <_dtoa_r+0x8ca>
 800d430:	461a      	mov	r2, r3
 800d432:	4601      	mov	r1, r0
 800d434:	4620      	mov	r0, r4
 800d436:	f000 fc55 	bl	800dce4 <__pow5mult>
 800d43a:	9b07      	ldr	r3, [sp, #28]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	4606      	mov	r6, r0
 800d440:	dd7a      	ble.n	800d538 <_dtoa_r+0x8d0>
 800d442:	f04f 0800 	mov.w	r8, #0
 800d446:	6933      	ldr	r3, [r6, #16]
 800d448:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d44c:	6918      	ldr	r0, [r3, #16]
 800d44e:	f000 fb3b 	bl	800dac8 <__hi0bits>
 800d452:	f1c0 0020 	rsb	r0, r0, #32
 800d456:	9b06      	ldr	r3, [sp, #24]
 800d458:	4418      	add	r0, r3
 800d45a:	f010 001f 	ands.w	r0, r0, #31
 800d45e:	f000 8094 	beq.w	800d58a <_dtoa_r+0x922>
 800d462:	f1c0 0320 	rsb	r3, r0, #32
 800d466:	2b04      	cmp	r3, #4
 800d468:	f340 8085 	ble.w	800d576 <_dtoa_r+0x90e>
 800d46c:	9b05      	ldr	r3, [sp, #20]
 800d46e:	f1c0 001c 	rsb	r0, r0, #28
 800d472:	4403      	add	r3, r0
 800d474:	9305      	str	r3, [sp, #20]
 800d476:	9b06      	ldr	r3, [sp, #24]
 800d478:	4403      	add	r3, r0
 800d47a:	4405      	add	r5, r0
 800d47c:	9306      	str	r3, [sp, #24]
 800d47e:	9b05      	ldr	r3, [sp, #20]
 800d480:	2b00      	cmp	r3, #0
 800d482:	dd05      	ble.n	800d490 <_dtoa_r+0x828>
 800d484:	4651      	mov	r1, sl
 800d486:	461a      	mov	r2, r3
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fc85 	bl	800dd98 <__lshift>
 800d48e:	4682      	mov	sl, r0
 800d490:	9b06      	ldr	r3, [sp, #24]
 800d492:	2b00      	cmp	r3, #0
 800d494:	dd05      	ble.n	800d4a2 <_dtoa_r+0x83a>
 800d496:	4631      	mov	r1, r6
 800d498:	461a      	mov	r2, r3
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 fc7c 	bl	800dd98 <__lshift>
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d072      	beq.n	800d58e <_dtoa_r+0x926>
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	4650      	mov	r0, sl
 800d4ac:	f000 fce0 	bl	800de70 <__mcmp>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	da6c      	bge.n	800d58e <_dtoa_r+0x926>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4651      	mov	r1, sl
 800d4b8:	220a      	movs	r2, #10
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	f000 fa74 	bl	800d9a8 <__multadd>
 800d4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d4c6:	4682      	mov	sl, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 81b0 	beq.w	800d82e <_dtoa_r+0xbc6>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	220a      	movs	r2, #10
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fa67 	bl	800d9a8 <__multadd>
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	4607      	mov	r7, r0
 800d4e0:	f300 8096 	bgt.w	800d610 <_dtoa_r+0x9a8>
 800d4e4:	9b07      	ldr	r3, [sp, #28]
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	dc59      	bgt.n	800d59e <_dtoa_r+0x936>
 800d4ea:	e091      	b.n	800d610 <_dtoa_r+0x9a8>
 800d4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4f2:	e758      	b.n	800d3a6 <_dtoa_r+0x73e>
 800d4f4:	9b04      	ldr	r3, [sp, #16]
 800d4f6:	1e5e      	subs	r6, r3, #1
 800d4f8:	9b08      	ldr	r3, [sp, #32]
 800d4fa:	42b3      	cmp	r3, r6
 800d4fc:	bfbf      	itttt	lt
 800d4fe:	9b08      	ldrlt	r3, [sp, #32]
 800d500:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d502:	9608      	strlt	r6, [sp, #32]
 800d504:	1af3      	sublt	r3, r6, r3
 800d506:	bfb4      	ite	lt
 800d508:	18d2      	addlt	r2, r2, r3
 800d50a:	1b9e      	subge	r6, r3, r6
 800d50c:	9b04      	ldr	r3, [sp, #16]
 800d50e:	bfbc      	itt	lt
 800d510:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d512:	2600      	movlt	r6, #0
 800d514:	2b00      	cmp	r3, #0
 800d516:	bfb7      	itett	lt
 800d518:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d51c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d520:	1a9d      	sublt	r5, r3, r2
 800d522:	2300      	movlt	r3, #0
 800d524:	e741      	b.n	800d3aa <_dtoa_r+0x742>
 800d526:	9e08      	ldr	r6, [sp, #32]
 800d528:	9d05      	ldr	r5, [sp, #20]
 800d52a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d52c:	e748      	b.n	800d3c0 <_dtoa_r+0x758>
 800d52e:	9a08      	ldr	r2, [sp, #32]
 800d530:	e770      	b.n	800d414 <_dtoa_r+0x7ac>
 800d532:	9b07      	ldr	r3, [sp, #28]
 800d534:	2b01      	cmp	r3, #1
 800d536:	dc19      	bgt.n	800d56c <_dtoa_r+0x904>
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	b9bb      	cbnz	r3, 800d56c <_dtoa_r+0x904>
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d542:	b99b      	cbnz	r3, 800d56c <_dtoa_r+0x904>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d54a:	0d1b      	lsrs	r3, r3, #20
 800d54c:	051b      	lsls	r3, r3, #20
 800d54e:	b183      	cbz	r3, 800d572 <_dtoa_r+0x90a>
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	3301      	adds	r3, #1
 800d554:	9305      	str	r3, [sp, #20]
 800d556:	9b06      	ldr	r3, [sp, #24]
 800d558:	3301      	adds	r3, #1
 800d55a:	9306      	str	r3, [sp, #24]
 800d55c:	f04f 0801 	mov.w	r8, #1
 800d560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d562:	2b00      	cmp	r3, #0
 800d564:	f47f af6f 	bne.w	800d446 <_dtoa_r+0x7de>
 800d568:	2001      	movs	r0, #1
 800d56a:	e774      	b.n	800d456 <_dtoa_r+0x7ee>
 800d56c:	f04f 0800 	mov.w	r8, #0
 800d570:	e7f6      	b.n	800d560 <_dtoa_r+0x8f8>
 800d572:	4698      	mov	r8, r3
 800d574:	e7f4      	b.n	800d560 <_dtoa_r+0x8f8>
 800d576:	d082      	beq.n	800d47e <_dtoa_r+0x816>
 800d578:	9a05      	ldr	r2, [sp, #20]
 800d57a:	331c      	adds	r3, #28
 800d57c:	441a      	add	r2, r3
 800d57e:	9205      	str	r2, [sp, #20]
 800d580:	9a06      	ldr	r2, [sp, #24]
 800d582:	441a      	add	r2, r3
 800d584:	441d      	add	r5, r3
 800d586:	9206      	str	r2, [sp, #24]
 800d588:	e779      	b.n	800d47e <_dtoa_r+0x816>
 800d58a:	4603      	mov	r3, r0
 800d58c:	e7f4      	b.n	800d578 <_dtoa_r+0x910>
 800d58e:	9b04      	ldr	r3, [sp, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	dc37      	bgt.n	800d604 <_dtoa_r+0x99c>
 800d594:	9b07      	ldr	r3, [sp, #28]
 800d596:	2b02      	cmp	r3, #2
 800d598:	dd34      	ble.n	800d604 <_dtoa_r+0x99c>
 800d59a:	9b04      	ldr	r3, [sp, #16]
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	9b01      	ldr	r3, [sp, #4]
 800d5a0:	b963      	cbnz	r3, 800d5bc <_dtoa_r+0x954>
 800d5a2:	4631      	mov	r1, r6
 800d5a4:	2205      	movs	r2, #5
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f000 f9fe 	bl	800d9a8 <__multadd>
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	f000 fc5d 	bl	800de70 <__mcmp>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	f73f adbb 	bgt.w	800d132 <_dtoa_r+0x4ca>
 800d5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5be:	9d00      	ldr	r5, [sp, #0]
 800d5c0:	ea6f 0b03 	mvn.w	fp, r3
 800d5c4:	f04f 0800 	mov.w	r8, #0
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 f9ca 	bl	800d964 <_Bfree>
 800d5d0:	2f00      	cmp	r7, #0
 800d5d2:	f43f aeab 	beq.w	800d32c <_dtoa_r+0x6c4>
 800d5d6:	f1b8 0f00 	cmp.w	r8, #0
 800d5da:	d005      	beq.n	800d5e8 <_dtoa_r+0x980>
 800d5dc:	45b8      	cmp	r8, r7
 800d5de:	d003      	beq.n	800d5e8 <_dtoa_r+0x980>
 800d5e0:	4641      	mov	r1, r8
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f000 f9be 	bl	800d964 <_Bfree>
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f000 f9ba 	bl	800d964 <_Bfree>
 800d5f0:	e69c      	b.n	800d32c <_dtoa_r+0x6c4>
 800d5f2:	2600      	movs	r6, #0
 800d5f4:	4637      	mov	r7, r6
 800d5f6:	e7e1      	b.n	800d5bc <_dtoa_r+0x954>
 800d5f8:	46bb      	mov	fp, r7
 800d5fa:	4637      	mov	r7, r6
 800d5fc:	e599      	b.n	800d132 <_dtoa_r+0x4ca>
 800d5fe:	bf00      	nop
 800d600:	40240000 	.word	0x40240000
 800d604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 80c8 	beq.w	800d79c <_dtoa_r+0xb34>
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	2d00      	cmp	r5, #0
 800d612:	dd05      	ble.n	800d620 <_dtoa_r+0x9b8>
 800d614:	4639      	mov	r1, r7
 800d616:	462a      	mov	r2, r5
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 fbbd 	bl	800dd98 <__lshift>
 800d61e:	4607      	mov	r7, r0
 800d620:	f1b8 0f00 	cmp.w	r8, #0
 800d624:	d05b      	beq.n	800d6de <_dtoa_r+0xa76>
 800d626:	6879      	ldr	r1, [r7, #4]
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 f95b 	bl	800d8e4 <_Balloc>
 800d62e:	4605      	mov	r5, r0
 800d630:	b928      	cbnz	r0, 800d63e <_dtoa_r+0x9d6>
 800d632:	4b83      	ldr	r3, [pc, #524]	; (800d840 <_dtoa_r+0xbd8>)
 800d634:	4602      	mov	r2, r0
 800d636:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d63a:	f7ff bb2e 	b.w	800cc9a <_dtoa_r+0x32>
 800d63e:	693a      	ldr	r2, [r7, #16]
 800d640:	3202      	adds	r2, #2
 800d642:	0092      	lsls	r2, r2, #2
 800d644:	f107 010c 	add.w	r1, r7, #12
 800d648:	300c      	adds	r0, #12
 800d64a:	f7ff fa6e 	bl	800cb2a <memcpy>
 800d64e:	2201      	movs	r2, #1
 800d650:	4629      	mov	r1, r5
 800d652:	4620      	mov	r0, r4
 800d654:	f000 fba0 	bl	800dd98 <__lshift>
 800d658:	9b00      	ldr	r3, [sp, #0]
 800d65a:	3301      	adds	r3, #1
 800d65c:	9304      	str	r3, [sp, #16]
 800d65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d662:	4413      	add	r3, r2
 800d664:	9308      	str	r3, [sp, #32]
 800d666:	9b02      	ldr	r3, [sp, #8]
 800d668:	f003 0301 	and.w	r3, r3, #1
 800d66c:	46b8      	mov	r8, r7
 800d66e:	9306      	str	r3, [sp, #24]
 800d670:	4607      	mov	r7, r0
 800d672:	9b04      	ldr	r3, [sp, #16]
 800d674:	4631      	mov	r1, r6
 800d676:	3b01      	subs	r3, #1
 800d678:	4650      	mov	r0, sl
 800d67a:	9301      	str	r3, [sp, #4]
 800d67c:	f7ff fa6a 	bl	800cb54 <quorem>
 800d680:	4641      	mov	r1, r8
 800d682:	9002      	str	r0, [sp, #8]
 800d684:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d688:	4650      	mov	r0, sl
 800d68a:	f000 fbf1 	bl	800de70 <__mcmp>
 800d68e:	463a      	mov	r2, r7
 800d690:	9005      	str	r0, [sp, #20]
 800d692:	4631      	mov	r1, r6
 800d694:	4620      	mov	r0, r4
 800d696:	f000 fc07 	bl	800dea8 <__mdiff>
 800d69a:	68c2      	ldr	r2, [r0, #12]
 800d69c:	4605      	mov	r5, r0
 800d69e:	bb02      	cbnz	r2, 800d6e2 <_dtoa_r+0xa7a>
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	4650      	mov	r0, sl
 800d6a4:	f000 fbe4 	bl	800de70 <__mcmp>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b0:	f000 f958 	bl	800d964 <_Bfree>
 800d6b4:	9b07      	ldr	r3, [sp, #28]
 800d6b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6b8:	9d04      	ldr	r5, [sp, #16]
 800d6ba:	ea43 0102 	orr.w	r1, r3, r2
 800d6be:	9b06      	ldr	r3, [sp, #24]
 800d6c0:	4319      	orrs	r1, r3
 800d6c2:	d110      	bne.n	800d6e6 <_dtoa_r+0xa7e>
 800d6c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d6c8:	d029      	beq.n	800d71e <_dtoa_r+0xab6>
 800d6ca:	9b05      	ldr	r3, [sp, #20]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	dd02      	ble.n	800d6d6 <_dtoa_r+0xa6e>
 800d6d0:	9b02      	ldr	r3, [sp, #8]
 800d6d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	f883 9000 	strb.w	r9, [r3]
 800d6dc:	e774      	b.n	800d5c8 <_dtoa_r+0x960>
 800d6de:	4638      	mov	r0, r7
 800d6e0:	e7ba      	b.n	800d658 <_dtoa_r+0x9f0>
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	e7e1      	b.n	800d6aa <_dtoa_r+0xa42>
 800d6e6:	9b05      	ldr	r3, [sp, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	db04      	blt.n	800d6f6 <_dtoa_r+0xa8e>
 800d6ec:	9907      	ldr	r1, [sp, #28]
 800d6ee:	430b      	orrs	r3, r1
 800d6f0:	9906      	ldr	r1, [sp, #24]
 800d6f2:	430b      	orrs	r3, r1
 800d6f4:	d120      	bne.n	800d738 <_dtoa_r+0xad0>
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	dded      	ble.n	800d6d6 <_dtoa_r+0xa6e>
 800d6fa:	4651      	mov	r1, sl
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 fb4a 	bl	800dd98 <__lshift>
 800d704:	4631      	mov	r1, r6
 800d706:	4682      	mov	sl, r0
 800d708:	f000 fbb2 	bl	800de70 <__mcmp>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	dc03      	bgt.n	800d718 <_dtoa_r+0xab0>
 800d710:	d1e1      	bne.n	800d6d6 <_dtoa_r+0xa6e>
 800d712:	f019 0f01 	tst.w	r9, #1
 800d716:	d0de      	beq.n	800d6d6 <_dtoa_r+0xa6e>
 800d718:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d71c:	d1d8      	bne.n	800d6d0 <_dtoa_r+0xa68>
 800d71e:	9a01      	ldr	r2, [sp, #4]
 800d720:	2339      	movs	r3, #57	; 0x39
 800d722:	7013      	strb	r3, [r2, #0]
 800d724:	462b      	mov	r3, r5
 800d726:	461d      	mov	r5, r3
 800d728:	3b01      	subs	r3, #1
 800d72a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d72e:	2a39      	cmp	r2, #57	; 0x39
 800d730:	d06c      	beq.n	800d80c <_dtoa_r+0xba4>
 800d732:	3201      	adds	r2, #1
 800d734:	701a      	strb	r2, [r3, #0]
 800d736:	e747      	b.n	800d5c8 <_dtoa_r+0x960>
 800d738:	2a00      	cmp	r2, #0
 800d73a:	dd07      	ble.n	800d74c <_dtoa_r+0xae4>
 800d73c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d740:	d0ed      	beq.n	800d71e <_dtoa_r+0xab6>
 800d742:	9a01      	ldr	r2, [sp, #4]
 800d744:	f109 0301 	add.w	r3, r9, #1
 800d748:	7013      	strb	r3, [r2, #0]
 800d74a:	e73d      	b.n	800d5c8 <_dtoa_r+0x960>
 800d74c:	9b04      	ldr	r3, [sp, #16]
 800d74e:	9a08      	ldr	r2, [sp, #32]
 800d750:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d754:	4293      	cmp	r3, r2
 800d756:	d043      	beq.n	800d7e0 <_dtoa_r+0xb78>
 800d758:	4651      	mov	r1, sl
 800d75a:	2300      	movs	r3, #0
 800d75c:	220a      	movs	r2, #10
 800d75e:	4620      	mov	r0, r4
 800d760:	f000 f922 	bl	800d9a8 <__multadd>
 800d764:	45b8      	cmp	r8, r7
 800d766:	4682      	mov	sl, r0
 800d768:	f04f 0300 	mov.w	r3, #0
 800d76c:	f04f 020a 	mov.w	r2, #10
 800d770:	4641      	mov	r1, r8
 800d772:	4620      	mov	r0, r4
 800d774:	d107      	bne.n	800d786 <_dtoa_r+0xb1e>
 800d776:	f000 f917 	bl	800d9a8 <__multadd>
 800d77a:	4680      	mov	r8, r0
 800d77c:	4607      	mov	r7, r0
 800d77e:	9b04      	ldr	r3, [sp, #16]
 800d780:	3301      	adds	r3, #1
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	e775      	b.n	800d672 <_dtoa_r+0xa0a>
 800d786:	f000 f90f 	bl	800d9a8 <__multadd>
 800d78a:	4639      	mov	r1, r7
 800d78c:	4680      	mov	r8, r0
 800d78e:	2300      	movs	r3, #0
 800d790:	220a      	movs	r2, #10
 800d792:	4620      	mov	r0, r4
 800d794:	f000 f908 	bl	800d9a8 <__multadd>
 800d798:	4607      	mov	r7, r0
 800d79a:	e7f0      	b.n	800d77e <_dtoa_r+0xb16>
 800d79c:	9b04      	ldr	r3, [sp, #16]
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	9d00      	ldr	r5, [sp, #0]
 800d7a2:	4631      	mov	r1, r6
 800d7a4:	4650      	mov	r0, sl
 800d7a6:	f7ff f9d5 	bl	800cb54 <quorem>
 800d7aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d7ae:	9b00      	ldr	r3, [sp, #0]
 800d7b0:	f805 9b01 	strb.w	r9, [r5], #1
 800d7b4:	1aea      	subs	r2, r5, r3
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	dd07      	ble.n	800d7cc <_dtoa_r+0xb64>
 800d7bc:	4651      	mov	r1, sl
 800d7be:	2300      	movs	r3, #0
 800d7c0:	220a      	movs	r2, #10
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f000 f8f0 	bl	800d9a8 <__multadd>
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	e7ea      	b.n	800d7a2 <_dtoa_r+0xb3a>
 800d7cc:	9b01      	ldr	r3, [sp, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bfc8      	it	gt
 800d7d2:	461d      	movgt	r5, r3
 800d7d4:	9b00      	ldr	r3, [sp, #0]
 800d7d6:	bfd8      	it	le
 800d7d8:	2501      	movle	r5, #1
 800d7da:	441d      	add	r5, r3
 800d7dc:	f04f 0800 	mov.w	r8, #0
 800d7e0:	4651      	mov	r1, sl
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f000 fad7 	bl	800dd98 <__lshift>
 800d7ea:	4631      	mov	r1, r6
 800d7ec:	4682      	mov	sl, r0
 800d7ee:	f000 fb3f 	bl	800de70 <__mcmp>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	dc96      	bgt.n	800d724 <_dtoa_r+0xabc>
 800d7f6:	d102      	bne.n	800d7fe <_dtoa_r+0xb96>
 800d7f8:	f019 0f01 	tst.w	r9, #1
 800d7fc:	d192      	bne.n	800d724 <_dtoa_r+0xabc>
 800d7fe:	462b      	mov	r3, r5
 800d800:	461d      	mov	r5, r3
 800d802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d806:	2a30      	cmp	r2, #48	; 0x30
 800d808:	d0fa      	beq.n	800d800 <_dtoa_r+0xb98>
 800d80a:	e6dd      	b.n	800d5c8 <_dtoa_r+0x960>
 800d80c:	9a00      	ldr	r2, [sp, #0]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d189      	bne.n	800d726 <_dtoa_r+0xabe>
 800d812:	f10b 0b01 	add.w	fp, fp, #1
 800d816:	2331      	movs	r3, #49	; 0x31
 800d818:	e796      	b.n	800d748 <_dtoa_r+0xae0>
 800d81a:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <_dtoa_r+0xbdc>)
 800d81c:	f7ff ba99 	b.w	800cd52 <_dtoa_r+0xea>
 800d820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d822:	2b00      	cmp	r3, #0
 800d824:	f47f aa6d 	bne.w	800cd02 <_dtoa_r+0x9a>
 800d828:	4b07      	ldr	r3, [pc, #28]	; (800d848 <_dtoa_r+0xbe0>)
 800d82a:	f7ff ba92 	b.w	800cd52 <_dtoa_r+0xea>
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	dcb5      	bgt.n	800d7a0 <_dtoa_r+0xb38>
 800d834:	9b07      	ldr	r3, [sp, #28]
 800d836:	2b02      	cmp	r3, #2
 800d838:	f73f aeb1 	bgt.w	800d59e <_dtoa_r+0x936>
 800d83c:	e7b0      	b.n	800d7a0 <_dtoa_r+0xb38>
 800d83e:	bf00      	nop
 800d840:	08010529 	.word	0x08010529
 800d844:	08010484 	.word	0x08010484
 800d848:	080104ad 	.word	0x080104ad

0800d84c <_free_r>:
 800d84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d84e:	2900      	cmp	r1, #0
 800d850:	d044      	beq.n	800d8dc <_free_r+0x90>
 800d852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d856:	9001      	str	r0, [sp, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f1a1 0404 	sub.w	r4, r1, #4
 800d85e:	bfb8      	it	lt
 800d860:	18e4      	addlt	r4, r4, r3
 800d862:	f7fe f8c3 	bl	800b9ec <__malloc_lock>
 800d866:	4a1e      	ldr	r2, [pc, #120]	; (800d8e0 <_free_r+0x94>)
 800d868:	9801      	ldr	r0, [sp, #4]
 800d86a:	6813      	ldr	r3, [r2, #0]
 800d86c:	b933      	cbnz	r3, 800d87c <_free_r+0x30>
 800d86e:	6063      	str	r3, [r4, #4]
 800d870:	6014      	str	r4, [r2, #0]
 800d872:	b003      	add	sp, #12
 800d874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d878:	f7fe b8be 	b.w	800b9f8 <__malloc_unlock>
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	d908      	bls.n	800d892 <_free_r+0x46>
 800d880:	6825      	ldr	r5, [r4, #0]
 800d882:	1961      	adds	r1, r4, r5
 800d884:	428b      	cmp	r3, r1
 800d886:	bf01      	itttt	eq
 800d888:	6819      	ldreq	r1, [r3, #0]
 800d88a:	685b      	ldreq	r3, [r3, #4]
 800d88c:	1949      	addeq	r1, r1, r5
 800d88e:	6021      	streq	r1, [r4, #0]
 800d890:	e7ed      	b.n	800d86e <_free_r+0x22>
 800d892:	461a      	mov	r2, r3
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	b10b      	cbz	r3, 800d89c <_free_r+0x50>
 800d898:	42a3      	cmp	r3, r4
 800d89a:	d9fa      	bls.n	800d892 <_free_r+0x46>
 800d89c:	6811      	ldr	r1, [r2, #0]
 800d89e:	1855      	adds	r5, r2, r1
 800d8a0:	42a5      	cmp	r5, r4
 800d8a2:	d10b      	bne.n	800d8bc <_free_r+0x70>
 800d8a4:	6824      	ldr	r4, [r4, #0]
 800d8a6:	4421      	add	r1, r4
 800d8a8:	1854      	adds	r4, r2, r1
 800d8aa:	42a3      	cmp	r3, r4
 800d8ac:	6011      	str	r1, [r2, #0]
 800d8ae:	d1e0      	bne.n	800d872 <_free_r+0x26>
 800d8b0:	681c      	ldr	r4, [r3, #0]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	6053      	str	r3, [r2, #4]
 800d8b6:	440c      	add	r4, r1
 800d8b8:	6014      	str	r4, [r2, #0]
 800d8ba:	e7da      	b.n	800d872 <_free_r+0x26>
 800d8bc:	d902      	bls.n	800d8c4 <_free_r+0x78>
 800d8be:	230c      	movs	r3, #12
 800d8c0:	6003      	str	r3, [r0, #0]
 800d8c2:	e7d6      	b.n	800d872 <_free_r+0x26>
 800d8c4:	6825      	ldr	r5, [r4, #0]
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	428b      	cmp	r3, r1
 800d8ca:	bf04      	itt	eq
 800d8cc:	6819      	ldreq	r1, [r3, #0]
 800d8ce:	685b      	ldreq	r3, [r3, #4]
 800d8d0:	6063      	str	r3, [r4, #4]
 800d8d2:	bf04      	itt	eq
 800d8d4:	1949      	addeq	r1, r1, r5
 800d8d6:	6021      	streq	r1, [r4, #0]
 800d8d8:	6054      	str	r4, [r2, #4]
 800d8da:	e7ca      	b.n	800d872 <_free_r+0x26>
 800d8dc:	b003      	add	sp, #12
 800d8de:	bd30      	pop	{r4, r5, pc}
 800d8e0:	20001f40 	.word	0x20001f40

0800d8e4 <_Balloc>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	69c6      	ldr	r6, [r0, #28]
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	b976      	cbnz	r6, 800d90c <_Balloc+0x28>
 800d8ee:	2010      	movs	r0, #16
 800d8f0:	f7fd ffd4 	bl	800b89c <malloc>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	61e0      	str	r0, [r4, #28]
 800d8f8:	b920      	cbnz	r0, 800d904 <_Balloc+0x20>
 800d8fa:	4b18      	ldr	r3, [pc, #96]	; (800d95c <_Balloc+0x78>)
 800d8fc:	4818      	ldr	r0, [pc, #96]	; (800d960 <_Balloc+0x7c>)
 800d8fe:	216b      	movs	r1, #107	; 0x6b
 800d900:	f001 fd6e 	bl	800f3e0 <__assert_func>
 800d904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d908:	6006      	str	r6, [r0, #0]
 800d90a:	60c6      	str	r6, [r0, #12]
 800d90c:	69e6      	ldr	r6, [r4, #28]
 800d90e:	68f3      	ldr	r3, [r6, #12]
 800d910:	b183      	cbz	r3, 800d934 <_Balloc+0x50>
 800d912:	69e3      	ldr	r3, [r4, #28]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d91a:	b9b8      	cbnz	r0, 800d94c <_Balloc+0x68>
 800d91c:	2101      	movs	r1, #1
 800d91e:	fa01 f605 	lsl.w	r6, r1, r5
 800d922:	1d72      	adds	r2, r6, #5
 800d924:	0092      	lsls	r2, r2, #2
 800d926:	4620      	mov	r0, r4
 800d928:	f001 fd78 	bl	800f41c <_calloc_r>
 800d92c:	b160      	cbz	r0, 800d948 <_Balloc+0x64>
 800d92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d932:	e00e      	b.n	800d952 <_Balloc+0x6e>
 800d934:	2221      	movs	r2, #33	; 0x21
 800d936:	2104      	movs	r1, #4
 800d938:	4620      	mov	r0, r4
 800d93a:	f001 fd6f 	bl	800f41c <_calloc_r>
 800d93e:	69e3      	ldr	r3, [r4, #28]
 800d940:	60f0      	str	r0, [r6, #12]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1e4      	bne.n	800d912 <_Balloc+0x2e>
 800d948:	2000      	movs	r0, #0
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	6802      	ldr	r2, [r0, #0]
 800d94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d952:	2300      	movs	r3, #0
 800d954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d958:	e7f7      	b.n	800d94a <_Balloc+0x66>
 800d95a:	bf00      	nop
 800d95c:	080104ba 	.word	0x080104ba
 800d960:	0801053a 	.word	0x0801053a

0800d964 <_Bfree>:
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	69c6      	ldr	r6, [r0, #28]
 800d968:	4605      	mov	r5, r0
 800d96a:	460c      	mov	r4, r1
 800d96c:	b976      	cbnz	r6, 800d98c <_Bfree+0x28>
 800d96e:	2010      	movs	r0, #16
 800d970:	f7fd ff94 	bl	800b89c <malloc>
 800d974:	4602      	mov	r2, r0
 800d976:	61e8      	str	r0, [r5, #28]
 800d978:	b920      	cbnz	r0, 800d984 <_Bfree+0x20>
 800d97a:	4b09      	ldr	r3, [pc, #36]	; (800d9a0 <_Bfree+0x3c>)
 800d97c:	4809      	ldr	r0, [pc, #36]	; (800d9a4 <_Bfree+0x40>)
 800d97e:	218f      	movs	r1, #143	; 0x8f
 800d980:	f001 fd2e 	bl	800f3e0 <__assert_func>
 800d984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d988:	6006      	str	r6, [r0, #0]
 800d98a:	60c6      	str	r6, [r0, #12]
 800d98c:	b13c      	cbz	r4, 800d99e <_Bfree+0x3a>
 800d98e:	69eb      	ldr	r3, [r5, #28]
 800d990:	6862      	ldr	r2, [r4, #4]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d998:	6021      	str	r1, [r4, #0]
 800d99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	080104ba 	.word	0x080104ba
 800d9a4:	0801053a 	.word	0x0801053a

0800d9a8 <__multadd>:
 800d9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ac:	690d      	ldr	r5, [r1, #16]
 800d9ae:	4607      	mov	r7, r0
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	461e      	mov	r6, r3
 800d9b4:	f101 0c14 	add.w	ip, r1, #20
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	f8dc 3000 	ldr.w	r3, [ip]
 800d9be:	b299      	uxth	r1, r3
 800d9c0:	fb02 6101 	mla	r1, r2, r1, r6
 800d9c4:	0c1e      	lsrs	r6, r3, #16
 800d9c6:	0c0b      	lsrs	r3, r1, #16
 800d9c8:	fb02 3306 	mla	r3, r2, r6, r3
 800d9cc:	b289      	uxth	r1, r1
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9d4:	4285      	cmp	r5, r0
 800d9d6:	f84c 1b04 	str.w	r1, [ip], #4
 800d9da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9de:	dcec      	bgt.n	800d9ba <__multadd+0x12>
 800d9e0:	b30e      	cbz	r6, 800da26 <__multadd+0x7e>
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	42ab      	cmp	r3, r5
 800d9e6:	dc19      	bgt.n	800da1c <__multadd+0x74>
 800d9e8:	6861      	ldr	r1, [r4, #4]
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	3101      	adds	r1, #1
 800d9ee:	f7ff ff79 	bl	800d8e4 <_Balloc>
 800d9f2:	4680      	mov	r8, r0
 800d9f4:	b928      	cbnz	r0, 800da02 <__multadd+0x5a>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <__multadd+0x84>)
 800d9fa:	480d      	ldr	r0, [pc, #52]	; (800da30 <__multadd+0x88>)
 800d9fc:	21ba      	movs	r1, #186	; 0xba
 800d9fe:	f001 fcef 	bl	800f3e0 <__assert_func>
 800da02:	6922      	ldr	r2, [r4, #16]
 800da04:	3202      	adds	r2, #2
 800da06:	f104 010c 	add.w	r1, r4, #12
 800da0a:	0092      	lsls	r2, r2, #2
 800da0c:	300c      	adds	r0, #12
 800da0e:	f7ff f88c 	bl	800cb2a <memcpy>
 800da12:	4621      	mov	r1, r4
 800da14:	4638      	mov	r0, r7
 800da16:	f7ff ffa5 	bl	800d964 <_Bfree>
 800da1a:	4644      	mov	r4, r8
 800da1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da20:	3501      	adds	r5, #1
 800da22:	615e      	str	r6, [r3, #20]
 800da24:	6125      	str	r5, [r4, #16]
 800da26:	4620      	mov	r0, r4
 800da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da2c:	08010529 	.word	0x08010529
 800da30:	0801053a 	.word	0x0801053a

0800da34 <__s2b>:
 800da34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da38:	460c      	mov	r4, r1
 800da3a:	4615      	mov	r5, r2
 800da3c:	461f      	mov	r7, r3
 800da3e:	2209      	movs	r2, #9
 800da40:	3308      	adds	r3, #8
 800da42:	4606      	mov	r6, r0
 800da44:	fb93 f3f2 	sdiv	r3, r3, r2
 800da48:	2100      	movs	r1, #0
 800da4a:	2201      	movs	r2, #1
 800da4c:	429a      	cmp	r2, r3
 800da4e:	db09      	blt.n	800da64 <__s2b+0x30>
 800da50:	4630      	mov	r0, r6
 800da52:	f7ff ff47 	bl	800d8e4 <_Balloc>
 800da56:	b940      	cbnz	r0, 800da6a <__s2b+0x36>
 800da58:	4602      	mov	r2, r0
 800da5a:	4b19      	ldr	r3, [pc, #100]	; (800dac0 <__s2b+0x8c>)
 800da5c:	4819      	ldr	r0, [pc, #100]	; (800dac4 <__s2b+0x90>)
 800da5e:	21d3      	movs	r1, #211	; 0xd3
 800da60:	f001 fcbe 	bl	800f3e0 <__assert_func>
 800da64:	0052      	lsls	r2, r2, #1
 800da66:	3101      	adds	r1, #1
 800da68:	e7f0      	b.n	800da4c <__s2b+0x18>
 800da6a:	9b08      	ldr	r3, [sp, #32]
 800da6c:	6143      	str	r3, [r0, #20]
 800da6e:	2d09      	cmp	r5, #9
 800da70:	f04f 0301 	mov.w	r3, #1
 800da74:	6103      	str	r3, [r0, #16]
 800da76:	dd16      	ble.n	800daa6 <__s2b+0x72>
 800da78:	f104 0909 	add.w	r9, r4, #9
 800da7c:	46c8      	mov	r8, r9
 800da7e:	442c      	add	r4, r5
 800da80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da84:	4601      	mov	r1, r0
 800da86:	3b30      	subs	r3, #48	; 0x30
 800da88:	220a      	movs	r2, #10
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff ff8c 	bl	800d9a8 <__multadd>
 800da90:	45a0      	cmp	r8, r4
 800da92:	d1f5      	bne.n	800da80 <__s2b+0x4c>
 800da94:	f1a5 0408 	sub.w	r4, r5, #8
 800da98:	444c      	add	r4, r9
 800da9a:	1b2d      	subs	r5, r5, r4
 800da9c:	1963      	adds	r3, r4, r5
 800da9e:	42bb      	cmp	r3, r7
 800daa0:	db04      	blt.n	800daac <__s2b+0x78>
 800daa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa6:	340a      	adds	r4, #10
 800daa8:	2509      	movs	r5, #9
 800daaa:	e7f6      	b.n	800da9a <__s2b+0x66>
 800daac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dab0:	4601      	mov	r1, r0
 800dab2:	3b30      	subs	r3, #48	; 0x30
 800dab4:	220a      	movs	r2, #10
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7ff ff76 	bl	800d9a8 <__multadd>
 800dabc:	e7ee      	b.n	800da9c <__s2b+0x68>
 800dabe:	bf00      	nop
 800dac0:	08010529 	.word	0x08010529
 800dac4:	0801053a 	.word	0x0801053a

0800dac8 <__hi0bits>:
 800dac8:	0c03      	lsrs	r3, r0, #16
 800daca:	041b      	lsls	r3, r3, #16
 800dacc:	b9d3      	cbnz	r3, 800db04 <__hi0bits+0x3c>
 800dace:	0400      	lsls	r0, r0, #16
 800dad0:	2310      	movs	r3, #16
 800dad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dad6:	bf04      	itt	eq
 800dad8:	0200      	lsleq	r0, r0, #8
 800dada:	3308      	addeq	r3, #8
 800dadc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dae0:	bf04      	itt	eq
 800dae2:	0100      	lsleq	r0, r0, #4
 800dae4:	3304      	addeq	r3, #4
 800dae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800daea:	bf04      	itt	eq
 800daec:	0080      	lsleq	r0, r0, #2
 800daee:	3302      	addeq	r3, #2
 800daf0:	2800      	cmp	r0, #0
 800daf2:	db05      	blt.n	800db00 <__hi0bits+0x38>
 800daf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800daf8:	f103 0301 	add.w	r3, r3, #1
 800dafc:	bf08      	it	eq
 800dafe:	2320      	moveq	r3, #32
 800db00:	4618      	mov	r0, r3
 800db02:	4770      	bx	lr
 800db04:	2300      	movs	r3, #0
 800db06:	e7e4      	b.n	800dad2 <__hi0bits+0xa>

0800db08 <__lo0bits>:
 800db08:	6803      	ldr	r3, [r0, #0]
 800db0a:	f013 0207 	ands.w	r2, r3, #7
 800db0e:	d00c      	beq.n	800db2a <__lo0bits+0x22>
 800db10:	07d9      	lsls	r1, r3, #31
 800db12:	d422      	bmi.n	800db5a <__lo0bits+0x52>
 800db14:	079a      	lsls	r2, r3, #30
 800db16:	bf49      	itett	mi
 800db18:	085b      	lsrmi	r3, r3, #1
 800db1a:	089b      	lsrpl	r3, r3, #2
 800db1c:	6003      	strmi	r3, [r0, #0]
 800db1e:	2201      	movmi	r2, #1
 800db20:	bf5c      	itt	pl
 800db22:	6003      	strpl	r3, [r0, #0]
 800db24:	2202      	movpl	r2, #2
 800db26:	4610      	mov	r0, r2
 800db28:	4770      	bx	lr
 800db2a:	b299      	uxth	r1, r3
 800db2c:	b909      	cbnz	r1, 800db32 <__lo0bits+0x2a>
 800db2e:	0c1b      	lsrs	r3, r3, #16
 800db30:	2210      	movs	r2, #16
 800db32:	b2d9      	uxtb	r1, r3
 800db34:	b909      	cbnz	r1, 800db3a <__lo0bits+0x32>
 800db36:	3208      	adds	r2, #8
 800db38:	0a1b      	lsrs	r3, r3, #8
 800db3a:	0719      	lsls	r1, r3, #28
 800db3c:	bf04      	itt	eq
 800db3e:	091b      	lsreq	r3, r3, #4
 800db40:	3204      	addeq	r2, #4
 800db42:	0799      	lsls	r1, r3, #30
 800db44:	bf04      	itt	eq
 800db46:	089b      	lsreq	r3, r3, #2
 800db48:	3202      	addeq	r2, #2
 800db4a:	07d9      	lsls	r1, r3, #31
 800db4c:	d403      	bmi.n	800db56 <__lo0bits+0x4e>
 800db4e:	085b      	lsrs	r3, r3, #1
 800db50:	f102 0201 	add.w	r2, r2, #1
 800db54:	d003      	beq.n	800db5e <__lo0bits+0x56>
 800db56:	6003      	str	r3, [r0, #0]
 800db58:	e7e5      	b.n	800db26 <__lo0bits+0x1e>
 800db5a:	2200      	movs	r2, #0
 800db5c:	e7e3      	b.n	800db26 <__lo0bits+0x1e>
 800db5e:	2220      	movs	r2, #32
 800db60:	e7e1      	b.n	800db26 <__lo0bits+0x1e>
	...

0800db64 <__i2b>:
 800db64:	b510      	push	{r4, lr}
 800db66:	460c      	mov	r4, r1
 800db68:	2101      	movs	r1, #1
 800db6a:	f7ff febb 	bl	800d8e4 <_Balloc>
 800db6e:	4602      	mov	r2, r0
 800db70:	b928      	cbnz	r0, 800db7e <__i2b+0x1a>
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <__i2b+0x24>)
 800db74:	4805      	ldr	r0, [pc, #20]	; (800db8c <__i2b+0x28>)
 800db76:	f240 1145 	movw	r1, #325	; 0x145
 800db7a:	f001 fc31 	bl	800f3e0 <__assert_func>
 800db7e:	2301      	movs	r3, #1
 800db80:	6144      	str	r4, [r0, #20]
 800db82:	6103      	str	r3, [r0, #16]
 800db84:	bd10      	pop	{r4, pc}
 800db86:	bf00      	nop
 800db88:	08010529 	.word	0x08010529
 800db8c:	0801053a 	.word	0x0801053a

0800db90 <__multiply>:
 800db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	4691      	mov	r9, r2
 800db96:	690a      	ldr	r2, [r1, #16]
 800db98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	bfb8      	it	lt
 800dba0:	460b      	movlt	r3, r1
 800dba2:	460c      	mov	r4, r1
 800dba4:	bfbc      	itt	lt
 800dba6:	464c      	movlt	r4, r9
 800dba8:	4699      	movlt	r9, r3
 800dbaa:	6927      	ldr	r7, [r4, #16]
 800dbac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbb0:	68a3      	ldr	r3, [r4, #8]
 800dbb2:	6861      	ldr	r1, [r4, #4]
 800dbb4:	eb07 060a 	add.w	r6, r7, sl
 800dbb8:	42b3      	cmp	r3, r6
 800dbba:	b085      	sub	sp, #20
 800dbbc:	bfb8      	it	lt
 800dbbe:	3101      	addlt	r1, #1
 800dbc0:	f7ff fe90 	bl	800d8e4 <_Balloc>
 800dbc4:	b930      	cbnz	r0, 800dbd4 <__multiply+0x44>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	4b44      	ldr	r3, [pc, #272]	; (800dcdc <__multiply+0x14c>)
 800dbca:	4845      	ldr	r0, [pc, #276]	; (800dce0 <__multiply+0x150>)
 800dbcc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dbd0:	f001 fc06 	bl	800f3e0 <__assert_func>
 800dbd4:	f100 0514 	add.w	r5, r0, #20
 800dbd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbdc:	462b      	mov	r3, r5
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4543      	cmp	r3, r8
 800dbe2:	d321      	bcc.n	800dc28 <__multiply+0x98>
 800dbe4:	f104 0314 	add.w	r3, r4, #20
 800dbe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbec:	f109 0314 	add.w	r3, r9, #20
 800dbf0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbf4:	9202      	str	r2, [sp, #8]
 800dbf6:	1b3a      	subs	r2, r7, r4
 800dbf8:	3a15      	subs	r2, #21
 800dbfa:	f022 0203 	bic.w	r2, r2, #3
 800dbfe:	3204      	adds	r2, #4
 800dc00:	f104 0115 	add.w	r1, r4, #21
 800dc04:	428f      	cmp	r7, r1
 800dc06:	bf38      	it	cc
 800dc08:	2204      	movcc	r2, #4
 800dc0a:	9201      	str	r2, [sp, #4]
 800dc0c:	9a02      	ldr	r2, [sp, #8]
 800dc0e:	9303      	str	r3, [sp, #12]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d80c      	bhi.n	800dc2e <__multiply+0x9e>
 800dc14:	2e00      	cmp	r6, #0
 800dc16:	dd03      	ble.n	800dc20 <__multiply+0x90>
 800dc18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d05b      	beq.n	800dcd8 <__multiply+0x148>
 800dc20:	6106      	str	r6, [r0, #16]
 800dc22:	b005      	add	sp, #20
 800dc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc28:	f843 2b04 	str.w	r2, [r3], #4
 800dc2c:	e7d8      	b.n	800dbe0 <__multiply+0x50>
 800dc2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc32:	f1ba 0f00 	cmp.w	sl, #0
 800dc36:	d024      	beq.n	800dc82 <__multiply+0xf2>
 800dc38:	f104 0e14 	add.w	lr, r4, #20
 800dc3c:	46a9      	mov	r9, r5
 800dc3e:	f04f 0c00 	mov.w	ip, #0
 800dc42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc46:	f8d9 1000 	ldr.w	r1, [r9]
 800dc4a:	fa1f fb82 	uxth.w	fp, r2
 800dc4e:	b289      	uxth	r1, r1
 800dc50:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc58:	f8d9 2000 	ldr.w	r2, [r9]
 800dc5c:	4461      	add	r1, ip
 800dc5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc62:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc6a:	b289      	uxth	r1, r1
 800dc6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc70:	4577      	cmp	r7, lr
 800dc72:	f849 1b04 	str.w	r1, [r9], #4
 800dc76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc7a:	d8e2      	bhi.n	800dc42 <__multiply+0xb2>
 800dc7c:	9a01      	ldr	r2, [sp, #4]
 800dc7e:	f845 c002 	str.w	ip, [r5, r2]
 800dc82:	9a03      	ldr	r2, [sp, #12]
 800dc84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc88:	3304      	adds	r3, #4
 800dc8a:	f1b9 0f00 	cmp.w	r9, #0
 800dc8e:	d021      	beq.n	800dcd4 <__multiply+0x144>
 800dc90:	6829      	ldr	r1, [r5, #0]
 800dc92:	f104 0c14 	add.w	ip, r4, #20
 800dc96:	46ae      	mov	lr, r5
 800dc98:	f04f 0a00 	mov.w	sl, #0
 800dc9c:	f8bc b000 	ldrh.w	fp, [ip]
 800dca0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dca4:	fb09 220b 	mla	r2, r9, fp, r2
 800dca8:	4452      	add	r2, sl
 800dcaa:	b289      	uxth	r1, r1
 800dcac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcb0:	f84e 1b04 	str.w	r1, [lr], #4
 800dcb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dcb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcbc:	f8be 1000 	ldrh.w	r1, [lr]
 800dcc0:	fb09 110a 	mla	r1, r9, sl, r1
 800dcc4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dcc8:	4567      	cmp	r7, ip
 800dcca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcce:	d8e5      	bhi.n	800dc9c <__multiply+0x10c>
 800dcd0:	9a01      	ldr	r2, [sp, #4]
 800dcd2:	50a9      	str	r1, [r5, r2]
 800dcd4:	3504      	adds	r5, #4
 800dcd6:	e799      	b.n	800dc0c <__multiply+0x7c>
 800dcd8:	3e01      	subs	r6, #1
 800dcda:	e79b      	b.n	800dc14 <__multiply+0x84>
 800dcdc:	08010529 	.word	0x08010529
 800dce0:	0801053a 	.word	0x0801053a

0800dce4 <__pow5mult>:
 800dce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce8:	4615      	mov	r5, r2
 800dcea:	f012 0203 	ands.w	r2, r2, #3
 800dcee:	4606      	mov	r6, r0
 800dcf0:	460f      	mov	r7, r1
 800dcf2:	d007      	beq.n	800dd04 <__pow5mult+0x20>
 800dcf4:	4c25      	ldr	r4, [pc, #148]	; (800dd8c <__pow5mult+0xa8>)
 800dcf6:	3a01      	subs	r2, #1
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcfe:	f7ff fe53 	bl	800d9a8 <__multadd>
 800dd02:	4607      	mov	r7, r0
 800dd04:	10ad      	asrs	r5, r5, #2
 800dd06:	d03d      	beq.n	800dd84 <__pow5mult+0xa0>
 800dd08:	69f4      	ldr	r4, [r6, #28]
 800dd0a:	b97c      	cbnz	r4, 800dd2c <__pow5mult+0x48>
 800dd0c:	2010      	movs	r0, #16
 800dd0e:	f7fd fdc5 	bl	800b89c <malloc>
 800dd12:	4602      	mov	r2, r0
 800dd14:	61f0      	str	r0, [r6, #28]
 800dd16:	b928      	cbnz	r0, 800dd24 <__pow5mult+0x40>
 800dd18:	4b1d      	ldr	r3, [pc, #116]	; (800dd90 <__pow5mult+0xac>)
 800dd1a:	481e      	ldr	r0, [pc, #120]	; (800dd94 <__pow5mult+0xb0>)
 800dd1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dd20:	f001 fb5e 	bl	800f3e0 <__assert_func>
 800dd24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd28:	6004      	str	r4, [r0, #0]
 800dd2a:	60c4      	str	r4, [r0, #12]
 800dd2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dd30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd34:	b94c      	cbnz	r4, 800dd4a <__pow5mult+0x66>
 800dd36:	f240 2171 	movw	r1, #625	; 0x271
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f7ff ff12 	bl	800db64 <__i2b>
 800dd40:	2300      	movs	r3, #0
 800dd42:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd46:	4604      	mov	r4, r0
 800dd48:	6003      	str	r3, [r0, #0]
 800dd4a:	f04f 0900 	mov.w	r9, #0
 800dd4e:	07eb      	lsls	r3, r5, #31
 800dd50:	d50a      	bpl.n	800dd68 <__pow5mult+0x84>
 800dd52:	4639      	mov	r1, r7
 800dd54:	4622      	mov	r2, r4
 800dd56:	4630      	mov	r0, r6
 800dd58:	f7ff ff1a 	bl	800db90 <__multiply>
 800dd5c:	4639      	mov	r1, r7
 800dd5e:	4680      	mov	r8, r0
 800dd60:	4630      	mov	r0, r6
 800dd62:	f7ff fdff 	bl	800d964 <_Bfree>
 800dd66:	4647      	mov	r7, r8
 800dd68:	106d      	asrs	r5, r5, #1
 800dd6a:	d00b      	beq.n	800dd84 <__pow5mult+0xa0>
 800dd6c:	6820      	ldr	r0, [r4, #0]
 800dd6e:	b938      	cbnz	r0, 800dd80 <__pow5mult+0x9c>
 800dd70:	4622      	mov	r2, r4
 800dd72:	4621      	mov	r1, r4
 800dd74:	4630      	mov	r0, r6
 800dd76:	f7ff ff0b 	bl	800db90 <__multiply>
 800dd7a:	6020      	str	r0, [r4, #0]
 800dd7c:	f8c0 9000 	str.w	r9, [r0]
 800dd80:	4604      	mov	r4, r0
 800dd82:	e7e4      	b.n	800dd4e <__pow5mult+0x6a>
 800dd84:	4638      	mov	r0, r7
 800dd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd8a:	bf00      	nop
 800dd8c:	08010688 	.word	0x08010688
 800dd90:	080104ba 	.word	0x080104ba
 800dd94:	0801053a 	.word	0x0801053a

0800dd98 <__lshift>:
 800dd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	6849      	ldr	r1, [r1, #4]
 800dda0:	6923      	ldr	r3, [r4, #16]
 800dda2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dda6:	68a3      	ldr	r3, [r4, #8]
 800dda8:	4607      	mov	r7, r0
 800ddaa:	4691      	mov	r9, r2
 800ddac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ddb0:	f108 0601 	add.w	r6, r8, #1
 800ddb4:	42b3      	cmp	r3, r6
 800ddb6:	db0b      	blt.n	800ddd0 <__lshift+0x38>
 800ddb8:	4638      	mov	r0, r7
 800ddba:	f7ff fd93 	bl	800d8e4 <_Balloc>
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	b948      	cbnz	r0, 800ddd6 <__lshift+0x3e>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	4b28      	ldr	r3, [pc, #160]	; (800de68 <__lshift+0xd0>)
 800ddc6:	4829      	ldr	r0, [pc, #164]	; (800de6c <__lshift+0xd4>)
 800ddc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ddcc:	f001 fb08 	bl	800f3e0 <__assert_func>
 800ddd0:	3101      	adds	r1, #1
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	e7ee      	b.n	800ddb4 <__lshift+0x1c>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f100 0114 	add.w	r1, r0, #20
 800dddc:	f100 0210 	add.w	r2, r0, #16
 800dde0:	4618      	mov	r0, r3
 800dde2:	4553      	cmp	r3, sl
 800dde4:	db33      	blt.n	800de4e <__lshift+0xb6>
 800dde6:	6920      	ldr	r0, [r4, #16]
 800dde8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddec:	f104 0314 	add.w	r3, r4, #20
 800ddf0:	f019 091f 	ands.w	r9, r9, #31
 800ddf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddfc:	d02b      	beq.n	800de56 <__lshift+0xbe>
 800ddfe:	f1c9 0e20 	rsb	lr, r9, #32
 800de02:	468a      	mov	sl, r1
 800de04:	2200      	movs	r2, #0
 800de06:	6818      	ldr	r0, [r3, #0]
 800de08:	fa00 f009 	lsl.w	r0, r0, r9
 800de0c:	4310      	orrs	r0, r2
 800de0e:	f84a 0b04 	str.w	r0, [sl], #4
 800de12:	f853 2b04 	ldr.w	r2, [r3], #4
 800de16:	459c      	cmp	ip, r3
 800de18:	fa22 f20e 	lsr.w	r2, r2, lr
 800de1c:	d8f3      	bhi.n	800de06 <__lshift+0x6e>
 800de1e:	ebac 0304 	sub.w	r3, ip, r4
 800de22:	3b15      	subs	r3, #21
 800de24:	f023 0303 	bic.w	r3, r3, #3
 800de28:	3304      	adds	r3, #4
 800de2a:	f104 0015 	add.w	r0, r4, #21
 800de2e:	4584      	cmp	ip, r0
 800de30:	bf38      	it	cc
 800de32:	2304      	movcc	r3, #4
 800de34:	50ca      	str	r2, [r1, r3]
 800de36:	b10a      	cbz	r2, 800de3c <__lshift+0xa4>
 800de38:	f108 0602 	add.w	r6, r8, #2
 800de3c:	3e01      	subs	r6, #1
 800de3e:	4638      	mov	r0, r7
 800de40:	612e      	str	r6, [r5, #16]
 800de42:	4621      	mov	r1, r4
 800de44:	f7ff fd8e 	bl	800d964 <_Bfree>
 800de48:	4628      	mov	r0, r5
 800de4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800de52:	3301      	adds	r3, #1
 800de54:	e7c5      	b.n	800dde2 <__lshift+0x4a>
 800de56:	3904      	subs	r1, #4
 800de58:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800de60:	459c      	cmp	ip, r3
 800de62:	d8f9      	bhi.n	800de58 <__lshift+0xc0>
 800de64:	e7ea      	b.n	800de3c <__lshift+0xa4>
 800de66:	bf00      	nop
 800de68:	08010529 	.word	0x08010529
 800de6c:	0801053a 	.word	0x0801053a

0800de70 <__mcmp>:
 800de70:	b530      	push	{r4, r5, lr}
 800de72:	6902      	ldr	r2, [r0, #16]
 800de74:	690c      	ldr	r4, [r1, #16]
 800de76:	1b12      	subs	r2, r2, r4
 800de78:	d10e      	bne.n	800de98 <__mcmp+0x28>
 800de7a:	f100 0314 	add.w	r3, r0, #20
 800de7e:	3114      	adds	r1, #20
 800de80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de90:	42a5      	cmp	r5, r4
 800de92:	d003      	beq.n	800de9c <__mcmp+0x2c>
 800de94:	d305      	bcc.n	800dea2 <__mcmp+0x32>
 800de96:	2201      	movs	r2, #1
 800de98:	4610      	mov	r0, r2
 800de9a:	bd30      	pop	{r4, r5, pc}
 800de9c:	4283      	cmp	r3, r0
 800de9e:	d3f3      	bcc.n	800de88 <__mcmp+0x18>
 800dea0:	e7fa      	b.n	800de98 <__mcmp+0x28>
 800dea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dea6:	e7f7      	b.n	800de98 <__mcmp+0x28>

0800dea8 <__mdiff>:
 800dea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	460c      	mov	r4, r1
 800deae:	4606      	mov	r6, r0
 800deb0:	4611      	mov	r1, r2
 800deb2:	4620      	mov	r0, r4
 800deb4:	4690      	mov	r8, r2
 800deb6:	f7ff ffdb 	bl	800de70 <__mcmp>
 800deba:	1e05      	subs	r5, r0, #0
 800debc:	d110      	bne.n	800dee0 <__mdiff+0x38>
 800debe:	4629      	mov	r1, r5
 800dec0:	4630      	mov	r0, r6
 800dec2:	f7ff fd0f 	bl	800d8e4 <_Balloc>
 800dec6:	b930      	cbnz	r0, 800ded6 <__mdiff+0x2e>
 800dec8:	4b3a      	ldr	r3, [pc, #232]	; (800dfb4 <__mdiff+0x10c>)
 800deca:	4602      	mov	r2, r0
 800decc:	f240 2137 	movw	r1, #567	; 0x237
 800ded0:	4839      	ldr	r0, [pc, #228]	; (800dfb8 <__mdiff+0x110>)
 800ded2:	f001 fa85 	bl	800f3e0 <__assert_func>
 800ded6:	2301      	movs	r3, #1
 800ded8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dedc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee0:	bfa4      	itt	ge
 800dee2:	4643      	movge	r3, r8
 800dee4:	46a0      	movge	r8, r4
 800dee6:	4630      	mov	r0, r6
 800dee8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800deec:	bfa6      	itte	ge
 800deee:	461c      	movge	r4, r3
 800def0:	2500      	movge	r5, #0
 800def2:	2501      	movlt	r5, #1
 800def4:	f7ff fcf6 	bl	800d8e4 <_Balloc>
 800def8:	b920      	cbnz	r0, 800df04 <__mdiff+0x5c>
 800defa:	4b2e      	ldr	r3, [pc, #184]	; (800dfb4 <__mdiff+0x10c>)
 800defc:	4602      	mov	r2, r0
 800defe:	f240 2145 	movw	r1, #581	; 0x245
 800df02:	e7e5      	b.n	800ded0 <__mdiff+0x28>
 800df04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df08:	6926      	ldr	r6, [r4, #16]
 800df0a:	60c5      	str	r5, [r0, #12]
 800df0c:	f104 0914 	add.w	r9, r4, #20
 800df10:	f108 0514 	add.w	r5, r8, #20
 800df14:	f100 0e14 	add.w	lr, r0, #20
 800df18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df20:	f108 0210 	add.w	r2, r8, #16
 800df24:	46f2      	mov	sl, lr
 800df26:	2100      	movs	r1, #0
 800df28:	f859 3b04 	ldr.w	r3, [r9], #4
 800df2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df30:	fa11 f88b 	uxtah	r8, r1, fp
 800df34:	b299      	uxth	r1, r3
 800df36:	0c1b      	lsrs	r3, r3, #16
 800df38:	eba8 0801 	sub.w	r8, r8, r1
 800df3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df44:	fa1f f888 	uxth.w	r8, r8
 800df48:	1419      	asrs	r1, r3, #16
 800df4a:	454e      	cmp	r6, r9
 800df4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df50:	f84a 3b04 	str.w	r3, [sl], #4
 800df54:	d8e8      	bhi.n	800df28 <__mdiff+0x80>
 800df56:	1b33      	subs	r3, r6, r4
 800df58:	3b15      	subs	r3, #21
 800df5a:	f023 0303 	bic.w	r3, r3, #3
 800df5e:	3304      	adds	r3, #4
 800df60:	3415      	adds	r4, #21
 800df62:	42a6      	cmp	r6, r4
 800df64:	bf38      	it	cc
 800df66:	2304      	movcc	r3, #4
 800df68:	441d      	add	r5, r3
 800df6a:	4473      	add	r3, lr
 800df6c:	469e      	mov	lr, r3
 800df6e:	462e      	mov	r6, r5
 800df70:	4566      	cmp	r6, ip
 800df72:	d30e      	bcc.n	800df92 <__mdiff+0xea>
 800df74:	f10c 0203 	add.w	r2, ip, #3
 800df78:	1b52      	subs	r2, r2, r5
 800df7a:	f022 0203 	bic.w	r2, r2, #3
 800df7e:	3d03      	subs	r5, #3
 800df80:	45ac      	cmp	ip, r5
 800df82:	bf38      	it	cc
 800df84:	2200      	movcc	r2, #0
 800df86:	4413      	add	r3, r2
 800df88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df8c:	b17a      	cbz	r2, 800dfae <__mdiff+0x106>
 800df8e:	6107      	str	r7, [r0, #16]
 800df90:	e7a4      	b.n	800dedc <__mdiff+0x34>
 800df92:	f856 8b04 	ldr.w	r8, [r6], #4
 800df96:	fa11 f288 	uxtah	r2, r1, r8
 800df9a:	1414      	asrs	r4, r2, #16
 800df9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dfa0:	b292      	uxth	r2, r2
 800dfa2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dfa6:	f84e 2b04 	str.w	r2, [lr], #4
 800dfaa:	1421      	asrs	r1, r4, #16
 800dfac:	e7e0      	b.n	800df70 <__mdiff+0xc8>
 800dfae:	3f01      	subs	r7, #1
 800dfb0:	e7ea      	b.n	800df88 <__mdiff+0xe0>
 800dfb2:	bf00      	nop
 800dfb4:	08010529 	.word	0x08010529
 800dfb8:	0801053a 	.word	0x0801053a

0800dfbc <__ulp>:
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	ed8d 0b00 	vstr	d0, [sp]
 800dfc2:	9a01      	ldr	r2, [sp, #4]
 800dfc4:	4b0f      	ldr	r3, [pc, #60]	; (800e004 <__ulp+0x48>)
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dc08      	bgt.n	800dfe2 <__ulp+0x26>
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800dfd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfda:	da04      	bge.n	800dfe6 <__ulp+0x2a>
 800dfdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dfe0:	4113      	asrs	r3, r2
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	e008      	b.n	800dff8 <__ulp+0x3c>
 800dfe6:	f1a2 0314 	sub.w	r3, r2, #20
 800dfea:	2b1e      	cmp	r3, #30
 800dfec:	bfda      	itte	le
 800dfee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800dff2:	40da      	lsrle	r2, r3
 800dff4:	2201      	movgt	r2, #1
 800dff6:	2300      	movs	r3, #0
 800dff8:	4619      	mov	r1, r3
 800dffa:	4610      	mov	r0, r2
 800dffc:	ec41 0b10 	vmov	d0, r0, r1
 800e000:	b002      	add	sp, #8
 800e002:	4770      	bx	lr
 800e004:	7ff00000 	.word	0x7ff00000

0800e008 <__b2d>:
 800e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00c:	6906      	ldr	r6, [r0, #16]
 800e00e:	f100 0814 	add.w	r8, r0, #20
 800e012:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e016:	1f37      	subs	r7, r6, #4
 800e018:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e01c:	4610      	mov	r0, r2
 800e01e:	f7ff fd53 	bl	800dac8 <__hi0bits>
 800e022:	f1c0 0320 	rsb	r3, r0, #32
 800e026:	280a      	cmp	r0, #10
 800e028:	600b      	str	r3, [r1, #0]
 800e02a:	491b      	ldr	r1, [pc, #108]	; (800e098 <__b2d+0x90>)
 800e02c:	dc15      	bgt.n	800e05a <__b2d+0x52>
 800e02e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e032:	fa22 f30c 	lsr.w	r3, r2, ip
 800e036:	45b8      	cmp	r8, r7
 800e038:	ea43 0501 	orr.w	r5, r3, r1
 800e03c:	bf34      	ite	cc
 800e03e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e042:	2300      	movcs	r3, #0
 800e044:	3015      	adds	r0, #21
 800e046:	fa02 f000 	lsl.w	r0, r2, r0
 800e04a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e04e:	4303      	orrs	r3, r0
 800e050:	461c      	mov	r4, r3
 800e052:	ec45 4b10 	vmov	d0, r4, r5
 800e056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e05a:	45b8      	cmp	r8, r7
 800e05c:	bf3a      	itte	cc
 800e05e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e062:	f1a6 0708 	subcc.w	r7, r6, #8
 800e066:	2300      	movcs	r3, #0
 800e068:	380b      	subs	r0, #11
 800e06a:	d012      	beq.n	800e092 <__b2d+0x8a>
 800e06c:	f1c0 0120 	rsb	r1, r0, #32
 800e070:	fa23 f401 	lsr.w	r4, r3, r1
 800e074:	4082      	lsls	r2, r0
 800e076:	4322      	orrs	r2, r4
 800e078:	4547      	cmp	r7, r8
 800e07a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e07e:	bf8c      	ite	hi
 800e080:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e084:	2200      	movls	r2, #0
 800e086:	4083      	lsls	r3, r0
 800e088:	40ca      	lsrs	r2, r1
 800e08a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e08e:	4313      	orrs	r3, r2
 800e090:	e7de      	b.n	800e050 <__b2d+0x48>
 800e092:	ea42 0501 	orr.w	r5, r2, r1
 800e096:	e7db      	b.n	800e050 <__b2d+0x48>
 800e098:	3ff00000 	.word	0x3ff00000

0800e09c <__d2b>:
 800e09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0a0:	460f      	mov	r7, r1
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	ec59 8b10 	vmov	r8, r9, d0
 800e0a8:	4616      	mov	r6, r2
 800e0aa:	f7ff fc1b 	bl	800d8e4 <_Balloc>
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	b930      	cbnz	r0, 800e0c0 <__d2b+0x24>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	4b24      	ldr	r3, [pc, #144]	; (800e148 <__d2b+0xac>)
 800e0b6:	4825      	ldr	r0, [pc, #148]	; (800e14c <__d2b+0xb0>)
 800e0b8:	f240 310f 	movw	r1, #783	; 0x30f
 800e0bc:	f001 f990 	bl	800f3e0 <__assert_func>
 800e0c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0c8:	bb2d      	cbnz	r5, 800e116 <__d2b+0x7a>
 800e0ca:	9301      	str	r3, [sp, #4]
 800e0cc:	f1b8 0300 	subs.w	r3, r8, #0
 800e0d0:	d026      	beq.n	800e120 <__d2b+0x84>
 800e0d2:	4668      	mov	r0, sp
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	f7ff fd17 	bl	800db08 <__lo0bits>
 800e0da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0de:	b1e8      	cbz	r0, 800e11c <__d2b+0x80>
 800e0e0:	f1c0 0320 	rsb	r3, r0, #32
 800e0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0e8:	430b      	orrs	r3, r1
 800e0ea:	40c2      	lsrs	r2, r0
 800e0ec:	6163      	str	r3, [r4, #20]
 800e0ee:	9201      	str	r2, [sp, #4]
 800e0f0:	9b01      	ldr	r3, [sp, #4]
 800e0f2:	61a3      	str	r3, [r4, #24]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	bf14      	ite	ne
 800e0f8:	2202      	movne	r2, #2
 800e0fa:	2201      	moveq	r2, #1
 800e0fc:	6122      	str	r2, [r4, #16]
 800e0fe:	b1bd      	cbz	r5, 800e130 <__d2b+0x94>
 800e100:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e104:	4405      	add	r5, r0
 800e106:	603d      	str	r5, [r7, #0]
 800e108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e10c:	6030      	str	r0, [r6, #0]
 800e10e:	4620      	mov	r0, r4
 800e110:	b003      	add	sp, #12
 800e112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e11a:	e7d6      	b.n	800e0ca <__d2b+0x2e>
 800e11c:	6161      	str	r1, [r4, #20]
 800e11e:	e7e7      	b.n	800e0f0 <__d2b+0x54>
 800e120:	a801      	add	r0, sp, #4
 800e122:	f7ff fcf1 	bl	800db08 <__lo0bits>
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	6163      	str	r3, [r4, #20]
 800e12a:	3020      	adds	r0, #32
 800e12c:	2201      	movs	r2, #1
 800e12e:	e7e5      	b.n	800e0fc <__d2b+0x60>
 800e130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e138:	6038      	str	r0, [r7, #0]
 800e13a:	6918      	ldr	r0, [r3, #16]
 800e13c:	f7ff fcc4 	bl	800dac8 <__hi0bits>
 800e140:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e144:	e7e2      	b.n	800e10c <__d2b+0x70>
 800e146:	bf00      	nop
 800e148:	08010529 	.word	0x08010529
 800e14c:	0801053a 	.word	0x0801053a

0800e150 <__ratio>:
 800e150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	4688      	mov	r8, r1
 800e156:	4669      	mov	r1, sp
 800e158:	4681      	mov	r9, r0
 800e15a:	f7ff ff55 	bl	800e008 <__b2d>
 800e15e:	a901      	add	r1, sp, #4
 800e160:	4640      	mov	r0, r8
 800e162:	ec55 4b10 	vmov	r4, r5, d0
 800e166:	f7ff ff4f 	bl	800e008 <__b2d>
 800e16a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e16e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e172:	eba3 0c02 	sub.w	ip, r3, r2
 800e176:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e17a:	1a9b      	subs	r3, r3, r2
 800e17c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e180:	ec51 0b10 	vmov	r0, r1, d0
 800e184:	2b00      	cmp	r3, #0
 800e186:	bfd6      	itet	le
 800e188:	460a      	movle	r2, r1
 800e18a:	462a      	movgt	r2, r5
 800e18c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e190:	468b      	mov	fp, r1
 800e192:	462f      	mov	r7, r5
 800e194:	bfd4      	ite	le
 800e196:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e19a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e19e:	4620      	mov	r0, r4
 800e1a0:	ee10 2a10 	vmov	r2, s0
 800e1a4:	465b      	mov	r3, fp
 800e1a6:	4639      	mov	r1, r7
 800e1a8:	f7f2 fb50 	bl	800084c <__aeabi_ddiv>
 800e1ac:	ec41 0b10 	vmov	d0, r0, r1
 800e1b0:	b003      	add	sp, #12
 800e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1b6 <__copybits>:
 800e1b6:	3901      	subs	r1, #1
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	1149      	asrs	r1, r1, #5
 800e1bc:	6914      	ldr	r4, [r2, #16]
 800e1be:	3101      	adds	r1, #1
 800e1c0:	f102 0314 	add.w	r3, r2, #20
 800e1c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1cc:	1f05      	subs	r5, r0, #4
 800e1ce:	42a3      	cmp	r3, r4
 800e1d0:	d30c      	bcc.n	800e1ec <__copybits+0x36>
 800e1d2:	1aa3      	subs	r3, r4, r2
 800e1d4:	3b11      	subs	r3, #17
 800e1d6:	f023 0303 	bic.w	r3, r3, #3
 800e1da:	3211      	adds	r2, #17
 800e1dc:	42a2      	cmp	r2, r4
 800e1de:	bf88      	it	hi
 800e1e0:	2300      	movhi	r3, #0
 800e1e2:	4418      	add	r0, r3
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	4288      	cmp	r0, r1
 800e1e8:	d305      	bcc.n	800e1f6 <__copybits+0x40>
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1f0:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1f4:	e7eb      	b.n	800e1ce <__copybits+0x18>
 800e1f6:	f840 3b04 	str.w	r3, [r0], #4
 800e1fa:	e7f4      	b.n	800e1e6 <__copybits+0x30>

0800e1fc <__any_on>:
 800e1fc:	f100 0214 	add.w	r2, r0, #20
 800e200:	6900      	ldr	r0, [r0, #16]
 800e202:	114b      	asrs	r3, r1, #5
 800e204:	4298      	cmp	r0, r3
 800e206:	b510      	push	{r4, lr}
 800e208:	db11      	blt.n	800e22e <__any_on+0x32>
 800e20a:	dd0a      	ble.n	800e222 <__any_on+0x26>
 800e20c:	f011 011f 	ands.w	r1, r1, #31
 800e210:	d007      	beq.n	800e222 <__any_on+0x26>
 800e212:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e216:	fa24 f001 	lsr.w	r0, r4, r1
 800e21a:	fa00 f101 	lsl.w	r1, r0, r1
 800e21e:	428c      	cmp	r4, r1
 800e220:	d10b      	bne.n	800e23a <__any_on+0x3e>
 800e222:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e226:	4293      	cmp	r3, r2
 800e228:	d803      	bhi.n	800e232 <__any_on+0x36>
 800e22a:	2000      	movs	r0, #0
 800e22c:	bd10      	pop	{r4, pc}
 800e22e:	4603      	mov	r3, r0
 800e230:	e7f7      	b.n	800e222 <__any_on+0x26>
 800e232:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e236:	2900      	cmp	r1, #0
 800e238:	d0f5      	beq.n	800e226 <__any_on+0x2a>
 800e23a:	2001      	movs	r0, #1
 800e23c:	e7f6      	b.n	800e22c <__any_on+0x30>

0800e23e <sulp>:
 800e23e:	b570      	push	{r4, r5, r6, lr}
 800e240:	4604      	mov	r4, r0
 800e242:	460d      	mov	r5, r1
 800e244:	ec45 4b10 	vmov	d0, r4, r5
 800e248:	4616      	mov	r6, r2
 800e24a:	f7ff feb7 	bl	800dfbc <__ulp>
 800e24e:	ec51 0b10 	vmov	r0, r1, d0
 800e252:	b17e      	cbz	r6, 800e274 <sulp+0x36>
 800e254:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e258:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dd09      	ble.n	800e274 <sulp+0x36>
 800e260:	051b      	lsls	r3, r3, #20
 800e262:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e266:	2400      	movs	r4, #0
 800e268:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e26c:	4622      	mov	r2, r4
 800e26e:	462b      	mov	r3, r5
 800e270:	f7f2 f9c2 	bl	80005f8 <__aeabi_dmul>
 800e274:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e278 <_strtod_l>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	ed2d 8b02 	vpush	{d8}
 800e280:	b09b      	sub	sp, #108	; 0x6c
 800e282:	4604      	mov	r4, r0
 800e284:	9213      	str	r2, [sp, #76]	; 0x4c
 800e286:	2200      	movs	r2, #0
 800e288:	9216      	str	r2, [sp, #88]	; 0x58
 800e28a:	460d      	mov	r5, r1
 800e28c:	f04f 0800 	mov.w	r8, #0
 800e290:	f04f 0900 	mov.w	r9, #0
 800e294:	460a      	mov	r2, r1
 800e296:	9215      	str	r2, [sp, #84]	; 0x54
 800e298:	7811      	ldrb	r1, [r2, #0]
 800e29a:	292b      	cmp	r1, #43	; 0x2b
 800e29c:	d04c      	beq.n	800e338 <_strtod_l+0xc0>
 800e29e:	d83a      	bhi.n	800e316 <_strtod_l+0x9e>
 800e2a0:	290d      	cmp	r1, #13
 800e2a2:	d834      	bhi.n	800e30e <_strtod_l+0x96>
 800e2a4:	2908      	cmp	r1, #8
 800e2a6:	d834      	bhi.n	800e312 <_strtod_l+0x9a>
 800e2a8:	2900      	cmp	r1, #0
 800e2aa:	d03d      	beq.n	800e328 <_strtod_l+0xb0>
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	920a      	str	r2, [sp, #40]	; 0x28
 800e2b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e2b2:	7832      	ldrb	r2, [r6, #0]
 800e2b4:	2a30      	cmp	r2, #48	; 0x30
 800e2b6:	f040 80b4 	bne.w	800e422 <_strtod_l+0x1aa>
 800e2ba:	7872      	ldrb	r2, [r6, #1]
 800e2bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e2c0:	2a58      	cmp	r2, #88	; 0x58
 800e2c2:	d170      	bne.n	800e3a6 <_strtod_l+0x12e>
 800e2c4:	9302      	str	r3, [sp, #8]
 800e2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c8:	9301      	str	r3, [sp, #4]
 800e2ca:	ab16      	add	r3, sp, #88	; 0x58
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	4a8e      	ldr	r2, [pc, #568]	; (800e508 <_strtod_l+0x290>)
 800e2d0:	ab17      	add	r3, sp, #92	; 0x5c
 800e2d2:	a915      	add	r1, sp, #84	; 0x54
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f001 f91f 	bl	800f518 <__gethex>
 800e2da:	f010 070f 	ands.w	r7, r0, #15
 800e2de:	4605      	mov	r5, r0
 800e2e0:	d005      	beq.n	800e2ee <_strtod_l+0x76>
 800e2e2:	2f06      	cmp	r7, #6
 800e2e4:	d12a      	bne.n	800e33c <_strtod_l+0xc4>
 800e2e6:	3601      	adds	r6, #1
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	9615      	str	r6, [sp, #84]	; 0x54
 800e2ec:	930a      	str	r3, [sp, #40]	; 0x28
 800e2ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f040 857f 	bne.w	800edf4 <_strtod_l+0xb7c>
 800e2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f8:	b1db      	cbz	r3, 800e332 <_strtod_l+0xba>
 800e2fa:	4642      	mov	r2, r8
 800e2fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e300:	ec43 2b10 	vmov	d0, r2, r3
 800e304:	b01b      	add	sp, #108	; 0x6c
 800e306:	ecbd 8b02 	vpop	{d8}
 800e30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30e:	2920      	cmp	r1, #32
 800e310:	d1cc      	bne.n	800e2ac <_strtod_l+0x34>
 800e312:	3201      	adds	r2, #1
 800e314:	e7bf      	b.n	800e296 <_strtod_l+0x1e>
 800e316:	292d      	cmp	r1, #45	; 0x2d
 800e318:	d1c8      	bne.n	800e2ac <_strtod_l+0x34>
 800e31a:	2101      	movs	r1, #1
 800e31c:	910a      	str	r1, [sp, #40]	; 0x28
 800e31e:	1c51      	adds	r1, r2, #1
 800e320:	9115      	str	r1, [sp, #84]	; 0x54
 800e322:	7852      	ldrb	r2, [r2, #1]
 800e324:	2a00      	cmp	r2, #0
 800e326:	d1c3      	bne.n	800e2b0 <_strtod_l+0x38>
 800e328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e32a:	9515      	str	r5, [sp, #84]	; 0x54
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f040 855f 	bne.w	800edf0 <_strtod_l+0xb78>
 800e332:	4642      	mov	r2, r8
 800e334:	464b      	mov	r3, r9
 800e336:	e7e3      	b.n	800e300 <_strtod_l+0x88>
 800e338:	2100      	movs	r1, #0
 800e33a:	e7ef      	b.n	800e31c <_strtod_l+0xa4>
 800e33c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e33e:	b13a      	cbz	r2, 800e350 <_strtod_l+0xd8>
 800e340:	2135      	movs	r1, #53	; 0x35
 800e342:	a818      	add	r0, sp, #96	; 0x60
 800e344:	f7ff ff37 	bl	800e1b6 <__copybits>
 800e348:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e34a:	4620      	mov	r0, r4
 800e34c:	f7ff fb0a 	bl	800d964 <_Bfree>
 800e350:	3f01      	subs	r7, #1
 800e352:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e354:	2f04      	cmp	r7, #4
 800e356:	d806      	bhi.n	800e366 <_strtod_l+0xee>
 800e358:	e8df f007 	tbb	[pc, r7]
 800e35c:	201d0314 	.word	0x201d0314
 800e360:	14          	.byte	0x14
 800e361:	00          	.byte	0x00
 800e362:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e366:	05e9      	lsls	r1, r5, #23
 800e368:	bf48      	it	mi
 800e36a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e36e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e372:	0d1b      	lsrs	r3, r3, #20
 800e374:	051b      	lsls	r3, r3, #20
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1b9      	bne.n	800e2ee <_strtod_l+0x76>
 800e37a:	f7fe fba9 	bl	800cad0 <__errno>
 800e37e:	2322      	movs	r3, #34	; 0x22
 800e380:	6003      	str	r3, [r0, #0]
 800e382:	e7b4      	b.n	800e2ee <_strtod_l+0x76>
 800e384:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e388:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e38c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e390:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e394:	e7e7      	b.n	800e366 <_strtod_l+0xee>
 800e396:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e510 <_strtod_l+0x298>
 800e39a:	e7e4      	b.n	800e366 <_strtod_l+0xee>
 800e39c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e3a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e3a4:	e7df      	b.n	800e366 <_strtod_l+0xee>
 800e3a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	9215      	str	r2, [sp, #84]	; 0x54
 800e3ac:	785b      	ldrb	r3, [r3, #1]
 800e3ae:	2b30      	cmp	r3, #48	; 0x30
 800e3b0:	d0f9      	beq.n	800e3a6 <_strtod_l+0x12e>
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d09b      	beq.n	800e2ee <_strtod_l+0x76>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f04f 0a00 	mov.w	sl, #0
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e3c6:	46d3      	mov	fp, sl
 800e3c8:	220a      	movs	r2, #10
 800e3ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e3cc:	7806      	ldrb	r6, [r0, #0]
 800e3ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e3d2:	b2d9      	uxtb	r1, r3
 800e3d4:	2909      	cmp	r1, #9
 800e3d6:	d926      	bls.n	800e426 <_strtod_l+0x1ae>
 800e3d8:	494c      	ldr	r1, [pc, #304]	; (800e50c <_strtod_l+0x294>)
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f000 ffe6 	bl	800f3ac <strncmp>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d030      	beq.n	800e446 <_strtod_l+0x1ce>
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	4632      	mov	r2, r6
 800e3e8:	9005      	str	r0, [sp, #20]
 800e3ea:	465e      	mov	r6, fp
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2a65      	cmp	r2, #101	; 0x65
 800e3f0:	d001      	beq.n	800e3f6 <_strtod_l+0x17e>
 800e3f2:	2a45      	cmp	r2, #69	; 0x45
 800e3f4:	d113      	bne.n	800e41e <_strtod_l+0x1a6>
 800e3f6:	b91e      	cbnz	r6, 800e400 <_strtod_l+0x188>
 800e3f8:	9a04      	ldr	r2, [sp, #16]
 800e3fa:	4302      	orrs	r2, r0
 800e3fc:	d094      	beq.n	800e328 <_strtod_l+0xb0>
 800e3fe:	2600      	movs	r6, #0
 800e400:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e402:	1c6a      	adds	r2, r5, #1
 800e404:	9215      	str	r2, [sp, #84]	; 0x54
 800e406:	786a      	ldrb	r2, [r5, #1]
 800e408:	2a2b      	cmp	r2, #43	; 0x2b
 800e40a:	d074      	beq.n	800e4f6 <_strtod_l+0x27e>
 800e40c:	2a2d      	cmp	r2, #45	; 0x2d
 800e40e:	d078      	beq.n	800e502 <_strtod_l+0x28a>
 800e410:	f04f 0c00 	mov.w	ip, #0
 800e414:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e418:	2909      	cmp	r1, #9
 800e41a:	d97f      	bls.n	800e51c <_strtod_l+0x2a4>
 800e41c:	9515      	str	r5, [sp, #84]	; 0x54
 800e41e:	2700      	movs	r7, #0
 800e420:	e09e      	b.n	800e560 <_strtod_l+0x2e8>
 800e422:	2300      	movs	r3, #0
 800e424:	e7c8      	b.n	800e3b8 <_strtod_l+0x140>
 800e426:	f1bb 0f08 	cmp.w	fp, #8
 800e42a:	bfd8      	it	le
 800e42c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e42e:	f100 0001 	add.w	r0, r0, #1
 800e432:	bfda      	itte	le
 800e434:	fb02 3301 	mlale	r3, r2, r1, r3
 800e438:	9309      	strle	r3, [sp, #36]	; 0x24
 800e43a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e43e:	f10b 0b01 	add.w	fp, fp, #1
 800e442:	9015      	str	r0, [sp, #84]	; 0x54
 800e444:	e7c1      	b.n	800e3ca <_strtod_l+0x152>
 800e446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	9215      	str	r2, [sp, #84]	; 0x54
 800e44c:	785a      	ldrb	r2, [r3, #1]
 800e44e:	f1bb 0f00 	cmp.w	fp, #0
 800e452:	d037      	beq.n	800e4c4 <_strtod_l+0x24c>
 800e454:	9005      	str	r0, [sp, #20]
 800e456:	465e      	mov	r6, fp
 800e458:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e45c:	2b09      	cmp	r3, #9
 800e45e:	d912      	bls.n	800e486 <_strtod_l+0x20e>
 800e460:	2301      	movs	r3, #1
 800e462:	e7c4      	b.n	800e3ee <_strtod_l+0x176>
 800e464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e466:	1c5a      	adds	r2, r3, #1
 800e468:	9215      	str	r2, [sp, #84]	; 0x54
 800e46a:	785a      	ldrb	r2, [r3, #1]
 800e46c:	3001      	adds	r0, #1
 800e46e:	2a30      	cmp	r2, #48	; 0x30
 800e470:	d0f8      	beq.n	800e464 <_strtod_l+0x1ec>
 800e472:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e476:	2b08      	cmp	r3, #8
 800e478:	f200 84c1 	bhi.w	800edfe <_strtod_l+0xb86>
 800e47c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e47e:	9005      	str	r0, [sp, #20]
 800e480:	2000      	movs	r0, #0
 800e482:	930b      	str	r3, [sp, #44]	; 0x2c
 800e484:	4606      	mov	r6, r0
 800e486:	3a30      	subs	r2, #48	; 0x30
 800e488:	f100 0301 	add.w	r3, r0, #1
 800e48c:	d014      	beq.n	800e4b8 <_strtod_l+0x240>
 800e48e:	9905      	ldr	r1, [sp, #20]
 800e490:	4419      	add	r1, r3
 800e492:	9105      	str	r1, [sp, #20]
 800e494:	4633      	mov	r3, r6
 800e496:	eb00 0c06 	add.w	ip, r0, r6
 800e49a:	210a      	movs	r1, #10
 800e49c:	4563      	cmp	r3, ip
 800e49e:	d113      	bne.n	800e4c8 <_strtod_l+0x250>
 800e4a0:	1833      	adds	r3, r6, r0
 800e4a2:	2b08      	cmp	r3, #8
 800e4a4:	f106 0601 	add.w	r6, r6, #1
 800e4a8:	4406      	add	r6, r0
 800e4aa:	dc1a      	bgt.n	800e4e2 <_strtod_l+0x26a>
 800e4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4ae:	230a      	movs	r3, #10
 800e4b0:	fb03 2301 	mla	r3, r3, r1, r2
 800e4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4ba:	1c51      	adds	r1, r2, #1
 800e4bc:	9115      	str	r1, [sp, #84]	; 0x54
 800e4be:	7852      	ldrb	r2, [r2, #1]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	e7c9      	b.n	800e458 <_strtod_l+0x1e0>
 800e4c4:	4658      	mov	r0, fp
 800e4c6:	e7d2      	b.n	800e46e <_strtod_l+0x1f6>
 800e4c8:	2b08      	cmp	r3, #8
 800e4ca:	f103 0301 	add.w	r3, r3, #1
 800e4ce:	dc03      	bgt.n	800e4d8 <_strtod_l+0x260>
 800e4d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e4d2:	434f      	muls	r7, r1
 800e4d4:	9709      	str	r7, [sp, #36]	; 0x24
 800e4d6:	e7e1      	b.n	800e49c <_strtod_l+0x224>
 800e4d8:	2b10      	cmp	r3, #16
 800e4da:	bfd8      	it	le
 800e4dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e4e0:	e7dc      	b.n	800e49c <_strtod_l+0x224>
 800e4e2:	2e10      	cmp	r6, #16
 800e4e4:	bfdc      	itt	le
 800e4e6:	230a      	movle	r3, #10
 800e4e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e4ec:	e7e3      	b.n	800e4b6 <_strtod_l+0x23e>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	9305      	str	r3, [sp, #20]
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e780      	b.n	800e3f8 <_strtod_l+0x180>
 800e4f6:	f04f 0c00 	mov.w	ip, #0
 800e4fa:	1caa      	adds	r2, r5, #2
 800e4fc:	9215      	str	r2, [sp, #84]	; 0x54
 800e4fe:	78aa      	ldrb	r2, [r5, #2]
 800e500:	e788      	b.n	800e414 <_strtod_l+0x19c>
 800e502:	f04f 0c01 	mov.w	ip, #1
 800e506:	e7f8      	b.n	800e4fa <_strtod_l+0x282>
 800e508:	08010698 	.word	0x08010698
 800e50c:	08010694 	.word	0x08010694
 800e510:	7ff00000 	.word	0x7ff00000
 800e514:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e516:	1c51      	adds	r1, r2, #1
 800e518:	9115      	str	r1, [sp, #84]	; 0x54
 800e51a:	7852      	ldrb	r2, [r2, #1]
 800e51c:	2a30      	cmp	r2, #48	; 0x30
 800e51e:	d0f9      	beq.n	800e514 <_strtod_l+0x29c>
 800e520:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e524:	2908      	cmp	r1, #8
 800e526:	f63f af7a 	bhi.w	800e41e <_strtod_l+0x1a6>
 800e52a:	3a30      	subs	r2, #48	; 0x30
 800e52c:	9208      	str	r2, [sp, #32]
 800e52e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e530:	920c      	str	r2, [sp, #48]	; 0x30
 800e532:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e534:	1c57      	adds	r7, r2, #1
 800e536:	9715      	str	r7, [sp, #84]	; 0x54
 800e538:	7852      	ldrb	r2, [r2, #1]
 800e53a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e53e:	f1be 0f09 	cmp.w	lr, #9
 800e542:	d938      	bls.n	800e5b6 <_strtod_l+0x33e>
 800e544:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e546:	1a7f      	subs	r7, r7, r1
 800e548:	2f08      	cmp	r7, #8
 800e54a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e54e:	dc03      	bgt.n	800e558 <_strtod_l+0x2e0>
 800e550:	9908      	ldr	r1, [sp, #32]
 800e552:	428f      	cmp	r7, r1
 800e554:	bfa8      	it	ge
 800e556:	460f      	movge	r7, r1
 800e558:	f1bc 0f00 	cmp.w	ip, #0
 800e55c:	d000      	beq.n	800e560 <_strtod_l+0x2e8>
 800e55e:	427f      	negs	r7, r7
 800e560:	2e00      	cmp	r6, #0
 800e562:	d14f      	bne.n	800e604 <_strtod_l+0x38c>
 800e564:	9904      	ldr	r1, [sp, #16]
 800e566:	4301      	orrs	r1, r0
 800e568:	f47f aec1 	bne.w	800e2ee <_strtod_l+0x76>
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f47f aedb 	bne.w	800e328 <_strtod_l+0xb0>
 800e572:	2a69      	cmp	r2, #105	; 0x69
 800e574:	d029      	beq.n	800e5ca <_strtod_l+0x352>
 800e576:	dc26      	bgt.n	800e5c6 <_strtod_l+0x34e>
 800e578:	2a49      	cmp	r2, #73	; 0x49
 800e57a:	d026      	beq.n	800e5ca <_strtod_l+0x352>
 800e57c:	2a4e      	cmp	r2, #78	; 0x4e
 800e57e:	f47f aed3 	bne.w	800e328 <_strtod_l+0xb0>
 800e582:	499b      	ldr	r1, [pc, #620]	; (800e7f0 <_strtod_l+0x578>)
 800e584:	a815      	add	r0, sp, #84	; 0x54
 800e586:	f001 fa07 	bl	800f998 <__match>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	f43f aecc 	beq.w	800e328 <_strtod_l+0xb0>
 800e590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b28      	cmp	r3, #40	; 0x28
 800e596:	d12f      	bne.n	800e5f8 <_strtod_l+0x380>
 800e598:	4996      	ldr	r1, [pc, #600]	; (800e7f4 <_strtod_l+0x57c>)
 800e59a:	aa18      	add	r2, sp, #96	; 0x60
 800e59c:	a815      	add	r0, sp, #84	; 0x54
 800e59e:	f001 fa0f 	bl	800f9c0 <__hexnan>
 800e5a2:	2805      	cmp	r0, #5
 800e5a4:	d128      	bne.n	800e5f8 <_strtod_l+0x380>
 800e5a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e5ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e5b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e5b4:	e69b      	b.n	800e2ee <_strtod_l+0x76>
 800e5b6:	9f08      	ldr	r7, [sp, #32]
 800e5b8:	210a      	movs	r1, #10
 800e5ba:	fb01 2107 	mla	r1, r1, r7, r2
 800e5be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e5c2:	9208      	str	r2, [sp, #32]
 800e5c4:	e7b5      	b.n	800e532 <_strtod_l+0x2ba>
 800e5c6:	2a6e      	cmp	r2, #110	; 0x6e
 800e5c8:	e7d9      	b.n	800e57e <_strtod_l+0x306>
 800e5ca:	498b      	ldr	r1, [pc, #556]	; (800e7f8 <_strtod_l+0x580>)
 800e5cc:	a815      	add	r0, sp, #84	; 0x54
 800e5ce:	f001 f9e3 	bl	800f998 <__match>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f43f aea8 	beq.w	800e328 <_strtod_l+0xb0>
 800e5d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5da:	4988      	ldr	r1, [pc, #544]	; (800e7fc <_strtod_l+0x584>)
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	a815      	add	r0, sp, #84	; 0x54
 800e5e0:	9315      	str	r3, [sp, #84]	; 0x54
 800e5e2:	f001 f9d9 	bl	800f998 <__match>
 800e5e6:	b910      	cbnz	r0, 800e5ee <_strtod_l+0x376>
 800e5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	9315      	str	r3, [sp, #84]	; 0x54
 800e5ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e80c <_strtod_l+0x594>
 800e5f2:	f04f 0800 	mov.w	r8, #0
 800e5f6:	e67a      	b.n	800e2ee <_strtod_l+0x76>
 800e5f8:	4881      	ldr	r0, [pc, #516]	; (800e800 <_strtod_l+0x588>)
 800e5fa:	f000 fee9 	bl	800f3d0 <nan>
 800e5fe:	ec59 8b10 	vmov	r8, r9, d0
 800e602:	e674      	b.n	800e2ee <_strtod_l+0x76>
 800e604:	9b05      	ldr	r3, [sp, #20]
 800e606:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e608:	1afb      	subs	r3, r7, r3
 800e60a:	f1bb 0f00 	cmp.w	fp, #0
 800e60e:	bf08      	it	eq
 800e610:	46b3      	moveq	fp, r6
 800e612:	2e10      	cmp	r6, #16
 800e614:	9308      	str	r3, [sp, #32]
 800e616:	4635      	mov	r5, r6
 800e618:	bfa8      	it	ge
 800e61a:	2510      	movge	r5, #16
 800e61c:	f7f1 ff72 	bl	8000504 <__aeabi_ui2d>
 800e620:	2e09      	cmp	r6, #9
 800e622:	4680      	mov	r8, r0
 800e624:	4689      	mov	r9, r1
 800e626:	dd13      	ble.n	800e650 <_strtod_l+0x3d8>
 800e628:	4b76      	ldr	r3, [pc, #472]	; (800e804 <_strtod_l+0x58c>)
 800e62a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e62e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e632:	f7f1 ffe1 	bl	80005f8 <__aeabi_dmul>
 800e636:	4680      	mov	r8, r0
 800e638:	4650      	mov	r0, sl
 800e63a:	4689      	mov	r9, r1
 800e63c:	f7f1 ff62 	bl	8000504 <__aeabi_ui2d>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4640      	mov	r0, r8
 800e646:	4649      	mov	r1, r9
 800e648:	f7f1 fe20 	bl	800028c <__adddf3>
 800e64c:	4680      	mov	r8, r0
 800e64e:	4689      	mov	r9, r1
 800e650:	2e0f      	cmp	r6, #15
 800e652:	dc38      	bgt.n	800e6c6 <_strtod_l+0x44e>
 800e654:	9b08      	ldr	r3, [sp, #32]
 800e656:	2b00      	cmp	r3, #0
 800e658:	f43f ae49 	beq.w	800e2ee <_strtod_l+0x76>
 800e65c:	dd24      	ble.n	800e6a8 <_strtod_l+0x430>
 800e65e:	2b16      	cmp	r3, #22
 800e660:	dc0b      	bgt.n	800e67a <_strtod_l+0x402>
 800e662:	4968      	ldr	r1, [pc, #416]	; (800e804 <_strtod_l+0x58c>)
 800e664:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e66c:	4642      	mov	r2, r8
 800e66e:	464b      	mov	r3, r9
 800e670:	f7f1 ffc2 	bl	80005f8 <__aeabi_dmul>
 800e674:	4680      	mov	r8, r0
 800e676:	4689      	mov	r9, r1
 800e678:	e639      	b.n	800e2ee <_strtod_l+0x76>
 800e67a:	9a08      	ldr	r2, [sp, #32]
 800e67c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e680:	4293      	cmp	r3, r2
 800e682:	db20      	blt.n	800e6c6 <_strtod_l+0x44e>
 800e684:	4c5f      	ldr	r4, [pc, #380]	; (800e804 <_strtod_l+0x58c>)
 800e686:	f1c6 060f 	rsb	r6, r6, #15
 800e68a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e68e:	4642      	mov	r2, r8
 800e690:	464b      	mov	r3, r9
 800e692:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e696:	f7f1 ffaf 	bl	80005f8 <__aeabi_dmul>
 800e69a:	9b08      	ldr	r3, [sp, #32]
 800e69c:	1b9e      	subs	r6, r3, r6
 800e69e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e6a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e6a6:	e7e3      	b.n	800e670 <_strtod_l+0x3f8>
 800e6a8:	9b08      	ldr	r3, [sp, #32]
 800e6aa:	3316      	adds	r3, #22
 800e6ac:	db0b      	blt.n	800e6c6 <_strtod_l+0x44e>
 800e6ae:	9b05      	ldr	r3, [sp, #20]
 800e6b0:	1bdf      	subs	r7, r3, r7
 800e6b2:	4b54      	ldr	r3, [pc, #336]	; (800e804 <_strtod_l+0x58c>)
 800e6b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6bc:	4640      	mov	r0, r8
 800e6be:	4649      	mov	r1, r9
 800e6c0:	f7f2 f8c4 	bl	800084c <__aeabi_ddiv>
 800e6c4:	e7d6      	b.n	800e674 <_strtod_l+0x3fc>
 800e6c6:	9b08      	ldr	r3, [sp, #32]
 800e6c8:	1b75      	subs	r5, r6, r5
 800e6ca:	441d      	add	r5, r3
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	dd70      	ble.n	800e7b2 <_strtod_l+0x53a>
 800e6d0:	f015 030f 	ands.w	r3, r5, #15
 800e6d4:	d00a      	beq.n	800e6ec <_strtod_l+0x474>
 800e6d6:	494b      	ldr	r1, [pc, #300]	; (800e804 <_strtod_l+0x58c>)
 800e6d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6dc:	4642      	mov	r2, r8
 800e6de:	464b      	mov	r3, r9
 800e6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6e4:	f7f1 ff88 	bl	80005f8 <__aeabi_dmul>
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	4689      	mov	r9, r1
 800e6ec:	f035 050f 	bics.w	r5, r5, #15
 800e6f0:	d04d      	beq.n	800e78e <_strtod_l+0x516>
 800e6f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e6f6:	dd22      	ble.n	800e73e <_strtod_l+0x4c6>
 800e6f8:	2500      	movs	r5, #0
 800e6fa:	46ab      	mov	fp, r5
 800e6fc:	9509      	str	r5, [sp, #36]	; 0x24
 800e6fe:	9505      	str	r5, [sp, #20]
 800e700:	2322      	movs	r3, #34	; 0x22
 800e702:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e80c <_strtod_l+0x594>
 800e706:	6023      	str	r3, [r4, #0]
 800e708:	f04f 0800 	mov.w	r8, #0
 800e70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f43f aded 	beq.w	800e2ee <_strtod_l+0x76>
 800e714:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e716:	4620      	mov	r0, r4
 800e718:	f7ff f924 	bl	800d964 <_Bfree>
 800e71c:	9905      	ldr	r1, [sp, #20]
 800e71e:	4620      	mov	r0, r4
 800e720:	f7ff f920 	bl	800d964 <_Bfree>
 800e724:	4659      	mov	r1, fp
 800e726:	4620      	mov	r0, r4
 800e728:	f7ff f91c 	bl	800d964 <_Bfree>
 800e72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e72e:	4620      	mov	r0, r4
 800e730:	f7ff f918 	bl	800d964 <_Bfree>
 800e734:	4629      	mov	r1, r5
 800e736:	4620      	mov	r0, r4
 800e738:	f7ff f914 	bl	800d964 <_Bfree>
 800e73c:	e5d7      	b.n	800e2ee <_strtod_l+0x76>
 800e73e:	4b32      	ldr	r3, [pc, #200]	; (800e808 <_strtod_l+0x590>)
 800e740:	9304      	str	r3, [sp, #16]
 800e742:	2300      	movs	r3, #0
 800e744:	112d      	asrs	r5, r5, #4
 800e746:	4640      	mov	r0, r8
 800e748:	4649      	mov	r1, r9
 800e74a:	469a      	mov	sl, r3
 800e74c:	2d01      	cmp	r5, #1
 800e74e:	dc21      	bgt.n	800e794 <_strtod_l+0x51c>
 800e750:	b10b      	cbz	r3, 800e756 <_strtod_l+0x4de>
 800e752:	4680      	mov	r8, r0
 800e754:	4689      	mov	r9, r1
 800e756:	492c      	ldr	r1, [pc, #176]	; (800e808 <_strtod_l+0x590>)
 800e758:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e75c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e760:	4642      	mov	r2, r8
 800e762:	464b      	mov	r3, r9
 800e764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e768:	f7f1 ff46 	bl	80005f8 <__aeabi_dmul>
 800e76c:	4b27      	ldr	r3, [pc, #156]	; (800e80c <_strtod_l+0x594>)
 800e76e:	460a      	mov	r2, r1
 800e770:	400b      	ands	r3, r1
 800e772:	4927      	ldr	r1, [pc, #156]	; (800e810 <_strtod_l+0x598>)
 800e774:	428b      	cmp	r3, r1
 800e776:	4680      	mov	r8, r0
 800e778:	d8be      	bhi.n	800e6f8 <_strtod_l+0x480>
 800e77a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e77e:	428b      	cmp	r3, r1
 800e780:	bf86      	itte	hi
 800e782:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e814 <_strtod_l+0x59c>
 800e786:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800e78a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e78e:	2300      	movs	r3, #0
 800e790:	9304      	str	r3, [sp, #16]
 800e792:	e07b      	b.n	800e88c <_strtod_l+0x614>
 800e794:	07ea      	lsls	r2, r5, #31
 800e796:	d505      	bpl.n	800e7a4 <_strtod_l+0x52c>
 800e798:	9b04      	ldr	r3, [sp, #16]
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	f7f1 ff2b 	bl	80005f8 <__aeabi_dmul>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	9a04      	ldr	r2, [sp, #16]
 800e7a6:	3208      	adds	r2, #8
 800e7a8:	f10a 0a01 	add.w	sl, sl, #1
 800e7ac:	106d      	asrs	r5, r5, #1
 800e7ae:	9204      	str	r2, [sp, #16]
 800e7b0:	e7cc      	b.n	800e74c <_strtod_l+0x4d4>
 800e7b2:	d0ec      	beq.n	800e78e <_strtod_l+0x516>
 800e7b4:	426d      	negs	r5, r5
 800e7b6:	f015 020f 	ands.w	r2, r5, #15
 800e7ba:	d00a      	beq.n	800e7d2 <_strtod_l+0x55a>
 800e7bc:	4b11      	ldr	r3, [pc, #68]	; (800e804 <_strtod_l+0x58c>)
 800e7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ca:	f7f2 f83f 	bl	800084c <__aeabi_ddiv>
 800e7ce:	4680      	mov	r8, r0
 800e7d0:	4689      	mov	r9, r1
 800e7d2:	112d      	asrs	r5, r5, #4
 800e7d4:	d0db      	beq.n	800e78e <_strtod_l+0x516>
 800e7d6:	2d1f      	cmp	r5, #31
 800e7d8:	dd1e      	ble.n	800e818 <_strtod_l+0x5a0>
 800e7da:	2500      	movs	r5, #0
 800e7dc:	46ab      	mov	fp, r5
 800e7de:	9509      	str	r5, [sp, #36]	; 0x24
 800e7e0:	9505      	str	r5, [sp, #20]
 800e7e2:	2322      	movs	r3, #34	; 0x22
 800e7e4:	f04f 0800 	mov.w	r8, #0
 800e7e8:	f04f 0900 	mov.w	r9, #0
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	e78d      	b.n	800e70c <_strtod_l+0x494>
 800e7f0:	08010481 	.word	0x08010481
 800e7f4:	080106ac 	.word	0x080106ac
 800e7f8:	08010479 	.word	0x08010479
 800e7fc:	080104b0 	.word	0x080104b0
 800e800:	0801083d 	.word	0x0801083d
 800e804:	080105c0 	.word	0x080105c0
 800e808:	08010598 	.word	0x08010598
 800e80c:	7ff00000 	.word	0x7ff00000
 800e810:	7ca00000 	.word	0x7ca00000
 800e814:	7fefffff 	.word	0x7fefffff
 800e818:	f015 0310 	ands.w	r3, r5, #16
 800e81c:	bf18      	it	ne
 800e81e:	236a      	movne	r3, #106	; 0x6a
 800e820:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ebc4 <_strtod_l+0x94c>
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	4640      	mov	r0, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	2300      	movs	r3, #0
 800e82c:	07ea      	lsls	r2, r5, #31
 800e82e:	d504      	bpl.n	800e83a <_strtod_l+0x5c2>
 800e830:	e9da 2300 	ldrd	r2, r3, [sl]
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	2301      	movs	r3, #1
 800e83a:	106d      	asrs	r5, r5, #1
 800e83c:	f10a 0a08 	add.w	sl, sl, #8
 800e840:	d1f4      	bne.n	800e82c <_strtod_l+0x5b4>
 800e842:	b10b      	cbz	r3, 800e848 <_strtod_l+0x5d0>
 800e844:	4680      	mov	r8, r0
 800e846:	4689      	mov	r9, r1
 800e848:	9b04      	ldr	r3, [sp, #16]
 800e84a:	b1bb      	cbz	r3, 800e87c <_strtod_l+0x604>
 800e84c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e850:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e854:	2b00      	cmp	r3, #0
 800e856:	4649      	mov	r1, r9
 800e858:	dd10      	ble.n	800e87c <_strtod_l+0x604>
 800e85a:	2b1f      	cmp	r3, #31
 800e85c:	f340 811e 	ble.w	800ea9c <_strtod_l+0x824>
 800e860:	2b34      	cmp	r3, #52	; 0x34
 800e862:	bfde      	ittt	le
 800e864:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800e868:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e86c:	4093      	lslle	r3, r2
 800e86e:	f04f 0800 	mov.w	r8, #0
 800e872:	bfcc      	ite	gt
 800e874:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e878:	ea03 0901 	andle.w	r9, r3, r1
 800e87c:	2200      	movs	r2, #0
 800e87e:	2300      	movs	r3, #0
 800e880:	4640      	mov	r0, r8
 800e882:	4649      	mov	r1, r9
 800e884:	f7f2 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d1a6      	bne.n	800e7da <_strtod_l+0x562>
 800e88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e892:	4633      	mov	r3, r6
 800e894:	465a      	mov	r2, fp
 800e896:	4620      	mov	r0, r4
 800e898:	f7ff f8cc 	bl	800da34 <__s2b>
 800e89c:	9009      	str	r0, [sp, #36]	; 0x24
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f43f af2a 	beq.w	800e6f8 <_strtod_l+0x480>
 800e8a4:	9a08      	ldr	r2, [sp, #32]
 800e8a6:	9b05      	ldr	r3, [sp, #20]
 800e8a8:	2a00      	cmp	r2, #0
 800e8aa:	eba3 0307 	sub.w	r3, r3, r7
 800e8ae:	bfa8      	it	ge
 800e8b0:	2300      	movge	r3, #0
 800e8b2:	930c      	str	r3, [sp, #48]	; 0x30
 800e8b4:	2500      	movs	r5, #0
 800e8b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e8ba:	9312      	str	r3, [sp, #72]	; 0x48
 800e8bc:	46ab      	mov	fp, r5
 800e8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	6859      	ldr	r1, [r3, #4]
 800e8c4:	f7ff f80e 	bl	800d8e4 <_Balloc>
 800e8c8:	9005      	str	r0, [sp, #20]
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f43f af18 	beq.w	800e700 <_strtod_l+0x488>
 800e8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8d2:	691a      	ldr	r2, [r3, #16]
 800e8d4:	3202      	adds	r2, #2
 800e8d6:	f103 010c 	add.w	r1, r3, #12
 800e8da:	0092      	lsls	r2, r2, #2
 800e8dc:	300c      	adds	r0, #12
 800e8de:	f7fe f924 	bl	800cb2a <memcpy>
 800e8e2:	ec49 8b10 	vmov	d0, r8, r9
 800e8e6:	aa18      	add	r2, sp, #96	; 0x60
 800e8e8:	a917      	add	r1, sp, #92	; 0x5c
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f7ff fbd6 	bl	800e09c <__d2b>
 800e8f0:	ec49 8b18 	vmov	d8, r8, r9
 800e8f4:	9016      	str	r0, [sp, #88]	; 0x58
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	f43f af02 	beq.w	800e700 <_strtod_l+0x488>
 800e8fc:	2101      	movs	r1, #1
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff f930 	bl	800db64 <__i2b>
 800e904:	4683      	mov	fp, r0
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f aefa 	beq.w	800e700 <_strtod_l+0x488>
 800e90c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e90e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e910:	2e00      	cmp	r6, #0
 800e912:	bfab      	itete	ge
 800e914:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e916:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e918:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e91a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e91e:	bfac      	ite	ge
 800e920:	eb06 0a03 	addge.w	sl, r6, r3
 800e924:	1b9f      	sublt	r7, r3, r6
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	1af6      	subs	r6, r6, r3
 800e92a:	4416      	add	r6, r2
 800e92c:	4ba0      	ldr	r3, [pc, #640]	; (800ebb0 <_strtod_l+0x938>)
 800e92e:	3e01      	subs	r6, #1
 800e930:	429e      	cmp	r6, r3
 800e932:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e936:	f280 80c4 	bge.w	800eac2 <_strtod_l+0x84a>
 800e93a:	1b9b      	subs	r3, r3, r6
 800e93c:	2b1f      	cmp	r3, #31
 800e93e:	eba2 0203 	sub.w	r2, r2, r3
 800e942:	f04f 0101 	mov.w	r1, #1
 800e946:	f300 80b0 	bgt.w	800eaaa <_strtod_l+0x832>
 800e94a:	fa01 f303 	lsl.w	r3, r1, r3
 800e94e:	930e      	str	r3, [sp, #56]	; 0x38
 800e950:	2300      	movs	r3, #0
 800e952:	930d      	str	r3, [sp, #52]	; 0x34
 800e954:	eb0a 0602 	add.w	r6, sl, r2
 800e958:	9b04      	ldr	r3, [sp, #16]
 800e95a:	45b2      	cmp	sl, r6
 800e95c:	4417      	add	r7, r2
 800e95e:	441f      	add	r7, r3
 800e960:	4653      	mov	r3, sl
 800e962:	bfa8      	it	ge
 800e964:	4633      	movge	r3, r6
 800e966:	42bb      	cmp	r3, r7
 800e968:	bfa8      	it	ge
 800e96a:	463b      	movge	r3, r7
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	bfc2      	ittt	gt
 800e970:	1af6      	subgt	r6, r6, r3
 800e972:	1aff      	subgt	r7, r7, r3
 800e974:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	dd17      	ble.n	800e9ae <_strtod_l+0x736>
 800e97e:	4659      	mov	r1, fp
 800e980:	461a      	mov	r2, r3
 800e982:	4620      	mov	r0, r4
 800e984:	f7ff f9ae 	bl	800dce4 <__pow5mult>
 800e988:	4683      	mov	fp, r0
 800e98a:	2800      	cmp	r0, #0
 800e98c:	f43f aeb8 	beq.w	800e700 <_strtod_l+0x488>
 800e990:	4601      	mov	r1, r0
 800e992:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e994:	4620      	mov	r0, r4
 800e996:	f7ff f8fb 	bl	800db90 <__multiply>
 800e99a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e99c:	2800      	cmp	r0, #0
 800e99e:	f43f aeaf 	beq.w	800e700 <_strtod_l+0x488>
 800e9a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f7fe ffdd 	bl	800d964 <_Bfree>
 800e9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9ac:	9316      	str	r3, [sp, #88]	; 0x58
 800e9ae:	2e00      	cmp	r6, #0
 800e9b0:	f300 808c 	bgt.w	800eacc <_strtod_l+0x854>
 800e9b4:	9b08      	ldr	r3, [sp, #32]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dd08      	ble.n	800e9cc <_strtod_l+0x754>
 800e9ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9bc:	9905      	ldr	r1, [sp, #20]
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f7ff f990 	bl	800dce4 <__pow5mult>
 800e9c4:	9005      	str	r0, [sp, #20]
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f43f ae9a 	beq.w	800e700 <_strtod_l+0x488>
 800e9cc:	2f00      	cmp	r7, #0
 800e9ce:	dd08      	ble.n	800e9e2 <_strtod_l+0x76a>
 800e9d0:	9905      	ldr	r1, [sp, #20]
 800e9d2:	463a      	mov	r2, r7
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7ff f9df 	bl	800dd98 <__lshift>
 800e9da:	9005      	str	r0, [sp, #20]
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	f43f ae8f 	beq.w	800e700 <_strtod_l+0x488>
 800e9e2:	f1ba 0f00 	cmp.w	sl, #0
 800e9e6:	dd08      	ble.n	800e9fa <_strtod_l+0x782>
 800e9e8:	4659      	mov	r1, fp
 800e9ea:	4652      	mov	r2, sl
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7ff f9d3 	bl	800dd98 <__lshift>
 800e9f2:	4683      	mov	fp, r0
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	f43f ae83 	beq.w	800e700 <_strtod_l+0x488>
 800e9fa:	9a05      	ldr	r2, [sp, #20]
 800e9fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7ff fa52 	bl	800dea8 <__mdiff>
 800ea04:	4605      	mov	r5, r0
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f43f ae7a 	beq.w	800e700 <_strtod_l+0x488>
 800ea0c:	68c3      	ldr	r3, [r0, #12]
 800ea0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea10:	2300      	movs	r3, #0
 800ea12:	60c3      	str	r3, [r0, #12]
 800ea14:	4659      	mov	r1, fp
 800ea16:	f7ff fa2b 	bl	800de70 <__mcmp>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	da60      	bge.n	800eae0 <_strtod_l+0x868>
 800ea1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea20:	ea53 0308 	orrs.w	r3, r3, r8
 800ea24:	f040 8084 	bne.w	800eb30 <_strtod_l+0x8b8>
 800ea28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d17f      	bne.n	800eb30 <_strtod_l+0x8b8>
 800ea30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea34:	0d1b      	lsrs	r3, r3, #20
 800ea36:	051b      	lsls	r3, r3, #20
 800ea38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea3c:	d978      	bls.n	800eb30 <_strtod_l+0x8b8>
 800ea3e:	696b      	ldr	r3, [r5, #20]
 800ea40:	b913      	cbnz	r3, 800ea48 <_strtod_l+0x7d0>
 800ea42:	692b      	ldr	r3, [r5, #16]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	dd73      	ble.n	800eb30 <_strtod_l+0x8b8>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f7ff f9a3 	bl	800dd98 <__lshift>
 800ea52:	4659      	mov	r1, fp
 800ea54:	4605      	mov	r5, r0
 800ea56:	f7ff fa0b 	bl	800de70 <__mcmp>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	dd68      	ble.n	800eb30 <_strtod_l+0x8b8>
 800ea5e:	9904      	ldr	r1, [sp, #16]
 800ea60:	4a54      	ldr	r2, [pc, #336]	; (800ebb4 <_strtod_l+0x93c>)
 800ea62:	464b      	mov	r3, r9
 800ea64:	2900      	cmp	r1, #0
 800ea66:	f000 8084 	beq.w	800eb72 <_strtod_l+0x8fa>
 800ea6a:	ea02 0109 	and.w	r1, r2, r9
 800ea6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea72:	dc7e      	bgt.n	800eb72 <_strtod_l+0x8fa>
 800ea74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea78:	f77f aeb3 	ble.w	800e7e2 <_strtod_l+0x56a>
 800ea7c:	4b4e      	ldr	r3, [pc, #312]	; (800ebb8 <_strtod_l+0x940>)
 800ea7e:	4640      	mov	r0, r8
 800ea80:	4649      	mov	r1, r9
 800ea82:	2200      	movs	r2, #0
 800ea84:	f7f1 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ea88:	4b4a      	ldr	r3, [pc, #296]	; (800ebb4 <_strtod_l+0x93c>)
 800ea8a:	400b      	ands	r3, r1
 800ea8c:	4680      	mov	r8, r0
 800ea8e:	4689      	mov	r9, r1
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f47f ae3f 	bne.w	800e714 <_strtod_l+0x49c>
 800ea96:	2322      	movs	r3, #34	; 0x22
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	e63b      	b.n	800e714 <_strtod_l+0x49c>
 800ea9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaa0:	fa02 f303 	lsl.w	r3, r2, r3
 800eaa4:	ea03 0808 	and.w	r8, r3, r8
 800eaa8:	e6e8      	b.n	800e87c <_strtod_l+0x604>
 800eaaa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800eaae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800eab2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800eab6:	36e2      	adds	r6, #226	; 0xe2
 800eab8:	fa01 f306 	lsl.w	r3, r1, r6
 800eabc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800eac0:	e748      	b.n	800e954 <_strtod_l+0x6dc>
 800eac2:	2100      	movs	r1, #0
 800eac4:	2301      	movs	r3, #1
 800eac6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800eaca:	e743      	b.n	800e954 <_strtod_l+0x6dc>
 800eacc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eace:	4632      	mov	r2, r6
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7ff f961 	bl	800dd98 <__lshift>
 800ead6:	9016      	str	r0, [sp, #88]	; 0x58
 800ead8:	2800      	cmp	r0, #0
 800eada:	f47f af6b 	bne.w	800e9b4 <_strtod_l+0x73c>
 800eade:	e60f      	b.n	800e700 <_strtod_l+0x488>
 800eae0:	46ca      	mov	sl, r9
 800eae2:	d171      	bne.n	800ebc8 <_strtod_l+0x950>
 800eae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eae6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eaea:	b352      	cbz	r2, 800eb42 <_strtod_l+0x8ca>
 800eaec:	4a33      	ldr	r2, [pc, #204]	; (800ebbc <_strtod_l+0x944>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d12a      	bne.n	800eb48 <_strtod_l+0x8d0>
 800eaf2:	9b04      	ldr	r3, [sp, #16]
 800eaf4:	4641      	mov	r1, r8
 800eaf6:	b1fb      	cbz	r3, 800eb38 <_strtod_l+0x8c0>
 800eaf8:	4b2e      	ldr	r3, [pc, #184]	; (800ebb4 <_strtod_l+0x93c>)
 800eafa:	ea09 0303 	and.w	r3, r9, r3
 800eafe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb06:	d81a      	bhi.n	800eb3e <_strtod_l+0x8c6>
 800eb08:	0d1b      	lsrs	r3, r3, #20
 800eb0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb12:	4299      	cmp	r1, r3
 800eb14:	d118      	bne.n	800eb48 <_strtod_l+0x8d0>
 800eb16:	4b2a      	ldr	r3, [pc, #168]	; (800ebc0 <_strtod_l+0x948>)
 800eb18:	459a      	cmp	sl, r3
 800eb1a:	d102      	bne.n	800eb22 <_strtod_l+0x8aa>
 800eb1c:	3101      	adds	r1, #1
 800eb1e:	f43f adef 	beq.w	800e700 <_strtod_l+0x488>
 800eb22:	4b24      	ldr	r3, [pc, #144]	; (800ebb4 <_strtod_l+0x93c>)
 800eb24:	ea0a 0303 	and.w	r3, sl, r3
 800eb28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eb2c:	f04f 0800 	mov.w	r8, #0
 800eb30:	9b04      	ldr	r3, [sp, #16]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1a2      	bne.n	800ea7c <_strtod_l+0x804>
 800eb36:	e5ed      	b.n	800e714 <_strtod_l+0x49c>
 800eb38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb3c:	e7e9      	b.n	800eb12 <_strtod_l+0x89a>
 800eb3e:	4613      	mov	r3, r2
 800eb40:	e7e7      	b.n	800eb12 <_strtod_l+0x89a>
 800eb42:	ea53 0308 	orrs.w	r3, r3, r8
 800eb46:	d08a      	beq.n	800ea5e <_strtod_l+0x7e6>
 800eb48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb4a:	b1e3      	cbz	r3, 800eb86 <_strtod_l+0x90e>
 800eb4c:	ea13 0f0a 	tst.w	r3, sl
 800eb50:	d0ee      	beq.n	800eb30 <_strtod_l+0x8b8>
 800eb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb54:	9a04      	ldr	r2, [sp, #16]
 800eb56:	4640      	mov	r0, r8
 800eb58:	4649      	mov	r1, r9
 800eb5a:	b1c3      	cbz	r3, 800eb8e <_strtod_l+0x916>
 800eb5c:	f7ff fb6f 	bl	800e23e <sulp>
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	ec51 0b18 	vmov	r0, r1, d8
 800eb68:	f7f1 fb90 	bl	800028c <__adddf3>
 800eb6c:	4680      	mov	r8, r0
 800eb6e:	4689      	mov	r9, r1
 800eb70:	e7de      	b.n	800eb30 <_strtod_l+0x8b8>
 800eb72:	4013      	ands	r3, r2
 800eb74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eb7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800eb80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800eb84:	e7d4      	b.n	800eb30 <_strtod_l+0x8b8>
 800eb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb88:	ea13 0f08 	tst.w	r3, r8
 800eb8c:	e7e0      	b.n	800eb50 <_strtod_l+0x8d8>
 800eb8e:	f7ff fb56 	bl	800e23e <sulp>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	ec51 0b18 	vmov	r0, r1, d8
 800eb9a:	f7f1 fb75 	bl	8000288 <__aeabi_dsub>
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2300      	movs	r3, #0
 800eba2:	4680      	mov	r8, r0
 800eba4:	4689      	mov	r9, r1
 800eba6:	f7f1 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d0c0      	beq.n	800eb30 <_strtod_l+0x8b8>
 800ebae:	e618      	b.n	800e7e2 <_strtod_l+0x56a>
 800ebb0:	fffffc02 	.word	0xfffffc02
 800ebb4:	7ff00000 	.word	0x7ff00000
 800ebb8:	39500000 	.word	0x39500000
 800ebbc:	000fffff 	.word	0x000fffff
 800ebc0:	7fefffff 	.word	0x7fefffff
 800ebc4:	080106c0 	.word	0x080106c0
 800ebc8:	4659      	mov	r1, fp
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f7ff fac0 	bl	800e150 <__ratio>
 800ebd0:	ec57 6b10 	vmov	r6, r7, d0
 800ebd4:	ee10 0a10 	vmov	r0, s0
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f7f1 ff86 	bl	8000af0 <__aeabi_dcmple>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d071      	beq.n	800eccc <_strtod_l+0xa54>
 800ebe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d17c      	bne.n	800ece8 <_strtod_l+0xa70>
 800ebee:	f1b8 0f00 	cmp.w	r8, #0
 800ebf2:	d15a      	bne.n	800ecaa <_strtod_l+0xa32>
 800ebf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d15d      	bne.n	800ecb8 <_strtod_l+0xa40>
 800ebfc:	4b90      	ldr	r3, [pc, #576]	; (800ee40 <_strtod_l+0xbc8>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4630      	mov	r0, r6
 800ec02:	4639      	mov	r1, r7
 800ec04:	f7f1 ff6a 	bl	8000adc <__aeabi_dcmplt>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d15c      	bne.n	800ecc6 <_strtod_l+0xa4e>
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	4639      	mov	r1, r7
 800ec10:	4b8c      	ldr	r3, [pc, #560]	; (800ee44 <_strtod_l+0xbcc>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	f7f1 fcf0 	bl	80005f8 <__aeabi_dmul>
 800ec18:	4606      	mov	r6, r0
 800ec1a:	460f      	mov	r7, r1
 800ec1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ec20:	9606      	str	r6, [sp, #24]
 800ec22:	9307      	str	r3, [sp, #28]
 800ec24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ec2c:	4b86      	ldr	r3, [pc, #536]	; (800ee48 <_strtod_l+0xbd0>)
 800ec2e:	ea0a 0303 	and.w	r3, sl, r3
 800ec32:	930d      	str	r3, [sp, #52]	; 0x34
 800ec34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec36:	4b85      	ldr	r3, [pc, #532]	; (800ee4c <_strtod_l+0xbd4>)
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	f040 8090 	bne.w	800ed5e <_strtod_l+0xae6>
 800ec3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ec42:	ec49 8b10 	vmov	d0, r8, r9
 800ec46:	f7ff f9b9 	bl	800dfbc <__ulp>
 800ec4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec4e:	ec51 0b10 	vmov	r0, r1, d0
 800ec52:	f7f1 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ec56:	4642      	mov	r2, r8
 800ec58:	464b      	mov	r3, r9
 800ec5a:	f7f1 fb17 	bl	800028c <__adddf3>
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4979      	ldr	r1, [pc, #484]	; (800ee48 <_strtod_l+0xbd0>)
 800ec62:	4a7b      	ldr	r2, [pc, #492]	; (800ee50 <_strtod_l+0xbd8>)
 800ec64:	4019      	ands	r1, r3
 800ec66:	4291      	cmp	r1, r2
 800ec68:	4680      	mov	r8, r0
 800ec6a:	d944      	bls.n	800ecf6 <_strtod_l+0xa7e>
 800ec6c:	ee18 2a90 	vmov	r2, s17
 800ec70:	4b78      	ldr	r3, [pc, #480]	; (800ee54 <_strtod_l+0xbdc>)
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d104      	bne.n	800ec80 <_strtod_l+0xa08>
 800ec76:	ee18 3a10 	vmov	r3, s16
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	f43f ad40 	beq.w	800e700 <_strtod_l+0x488>
 800ec80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ee54 <_strtod_l+0xbdc>
 800ec84:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ec88:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7fe fe6a 	bl	800d964 <_Bfree>
 800ec90:	9905      	ldr	r1, [sp, #20]
 800ec92:	4620      	mov	r0, r4
 800ec94:	f7fe fe66 	bl	800d964 <_Bfree>
 800ec98:	4659      	mov	r1, fp
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7fe fe62 	bl	800d964 <_Bfree>
 800eca0:	4629      	mov	r1, r5
 800eca2:	4620      	mov	r0, r4
 800eca4:	f7fe fe5e 	bl	800d964 <_Bfree>
 800eca8:	e609      	b.n	800e8be <_strtod_l+0x646>
 800ecaa:	f1b8 0f01 	cmp.w	r8, #1
 800ecae:	d103      	bne.n	800ecb8 <_strtod_l+0xa40>
 800ecb0:	f1b9 0f00 	cmp.w	r9, #0
 800ecb4:	f43f ad95 	beq.w	800e7e2 <_strtod_l+0x56a>
 800ecb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ee10 <_strtod_l+0xb98>
 800ecbc:	4f60      	ldr	r7, [pc, #384]	; (800ee40 <_strtod_l+0xbc8>)
 800ecbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ecc2:	2600      	movs	r6, #0
 800ecc4:	e7ae      	b.n	800ec24 <_strtod_l+0x9ac>
 800ecc6:	4f5f      	ldr	r7, [pc, #380]	; (800ee44 <_strtod_l+0xbcc>)
 800ecc8:	2600      	movs	r6, #0
 800ecca:	e7a7      	b.n	800ec1c <_strtod_l+0x9a4>
 800eccc:	4b5d      	ldr	r3, [pc, #372]	; (800ee44 <_strtod_l+0xbcc>)
 800ecce:	4630      	mov	r0, r6
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f7f1 fc90 	bl	80005f8 <__aeabi_dmul>
 800ecd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecda:	4606      	mov	r6, r0
 800ecdc:	460f      	mov	r7, r1
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d09c      	beq.n	800ec1c <_strtod_l+0x9a4>
 800ece2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ece6:	e79d      	b.n	800ec24 <_strtod_l+0x9ac>
 800ece8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ee18 <_strtod_l+0xba0>
 800ecec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ecf0:	ec57 6b17 	vmov	r6, r7, d7
 800ecf4:	e796      	b.n	800ec24 <_strtod_l+0x9ac>
 800ecf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ecfa:	9b04      	ldr	r3, [sp, #16]
 800ecfc:	46ca      	mov	sl, r9
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1c2      	bne.n	800ec88 <_strtod_l+0xa10>
 800ed02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed08:	0d1b      	lsrs	r3, r3, #20
 800ed0a:	051b      	lsls	r3, r3, #20
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d1bb      	bne.n	800ec88 <_strtod_l+0xa10>
 800ed10:	4630      	mov	r0, r6
 800ed12:	4639      	mov	r1, r7
 800ed14:	f7f1 ffd0 	bl	8000cb8 <__aeabi_d2lz>
 800ed18:	f7f1 fc40 	bl	800059c <__aeabi_l2d>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	4630      	mov	r0, r6
 800ed22:	4639      	mov	r1, r7
 800ed24:	f7f1 fab0 	bl	8000288 <__aeabi_dsub>
 800ed28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed2e:	ea43 0308 	orr.w	r3, r3, r8
 800ed32:	4313      	orrs	r3, r2
 800ed34:	4606      	mov	r6, r0
 800ed36:	460f      	mov	r7, r1
 800ed38:	d054      	beq.n	800ede4 <_strtod_l+0xb6c>
 800ed3a:	a339      	add	r3, pc, #228	; (adr r3, 800ee20 <_strtod_l+0xba8>)
 800ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed40:	f7f1 fecc 	bl	8000adc <__aeabi_dcmplt>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	f47f ace5 	bne.w	800e714 <_strtod_l+0x49c>
 800ed4a:	a337      	add	r3, pc, #220	; (adr r3, 800ee28 <_strtod_l+0xbb0>)
 800ed4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed50:	4630      	mov	r0, r6
 800ed52:	4639      	mov	r1, r7
 800ed54:	f7f1 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d095      	beq.n	800ec88 <_strtod_l+0xa10>
 800ed5c:	e4da      	b.n	800e714 <_strtod_l+0x49c>
 800ed5e:	9b04      	ldr	r3, [sp, #16]
 800ed60:	b333      	cbz	r3, 800edb0 <_strtod_l+0xb38>
 800ed62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed68:	d822      	bhi.n	800edb0 <_strtod_l+0xb38>
 800ed6a:	a331      	add	r3, pc, #196	; (adr r3, 800ee30 <_strtod_l+0xbb8>)
 800ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed70:	4630      	mov	r0, r6
 800ed72:	4639      	mov	r1, r7
 800ed74:	f7f1 febc 	bl	8000af0 <__aeabi_dcmple>
 800ed78:	b1a0      	cbz	r0, 800eda4 <_strtod_l+0xb2c>
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7f1 ff13 	bl	8000ba8 <__aeabi_d2uiz>
 800ed82:	2801      	cmp	r0, #1
 800ed84:	bf38      	it	cc
 800ed86:	2001      	movcc	r0, #1
 800ed88:	f7f1 fbbc 	bl	8000504 <__aeabi_ui2d>
 800ed8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	bb23      	cbnz	r3, 800edde <_strtod_l+0xb66>
 800ed94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed98:	9010      	str	r0, [sp, #64]	; 0x40
 800ed9a:	9311      	str	r3, [sp, #68]	; 0x44
 800ed9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eda0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800eda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eda6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eda8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800edac:	1a9b      	subs	r3, r3, r2
 800edae:	930f      	str	r3, [sp, #60]	; 0x3c
 800edb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800edb4:	eeb0 0a48 	vmov.f32	s0, s16
 800edb8:	eef0 0a68 	vmov.f32	s1, s17
 800edbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800edc0:	f7ff f8fc 	bl	800dfbc <__ulp>
 800edc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800edc8:	ec53 2b10 	vmov	r2, r3, d0
 800edcc:	f7f1 fc14 	bl	80005f8 <__aeabi_dmul>
 800edd0:	ec53 2b18 	vmov	r2, r3, d8
 800edd4:	f7f1 fa5a 	bl	800028c <__adddf3>
 800edd8:	4680      	mov	r8, r0
 800edda:	4689      	mov	r9, r1
 800eddc:	e78d      	b.n	800ecfa <_strtod_l+0xa82>
 800edde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ede2:	e7db      	b.n	800ed9c <_strtod_l+0xb24>
 800ede4:	a314      	add	r3, pc, #80	; (adr r3, 800ee38 <_strtod_l+0xbc0>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	f7f1 fe77 	bl	8000adc <__aeabi_dcmplt>
 800edee:	e7b3      	b.n	800ed58 <_strtod_l+0xae0>
 800edf0:	2300      	movs	r3, #0
 800edf2:	930a      	str	r3, [sp, #40]	; 0x28
 800edf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800edf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edf8:	6013      	str	r3, [r2, #0]
 800edfa:	f7ff ba7c 	b.w	800e2f6 <_strtod_l+0x7e>
 800edfe:	2a65      	cmp	r2, #101	; 0x65
 800ee00:	f43f ab75 	beq.w	800e4ee <_strtod_l+0x276>
 800ee04:	2a45      	cmp	r2, #69	; 0x45
 800ee06:	f43f ab72 	beq.w	800e4ee <_strtod_l+0x276>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	f7ff bbaa 	b.w	800e564 <_strtod_l+0x2ec>
 800ee10:	00000000 	.word	0x00000000
 800ee14:	bff00000 	.word	0xbff00000
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	3ff00000 	.word	0x3ff00000
 800ee20:	94a03595 	.word	0x94a03595
 800ee24:	3fdfffff 	.word	0x3fdfffff
 800ee28:	35afe535 	.word	0x35afe535
 800ee2c:	3fe00000 	.word	0x3fe00000
 800ee30:	ffc00000 	.word	0xffc00000
 800ee34:	41dfffff 	.word	0x41dfffff
 800ee38:	94a03595 	.word	0x94a03595
 800ee3c:	3fcfffff 	.word	0x3fcfffff
 800ee40:	3ff00000 	.word	0x3ff00000
 800ee44:	3fe00000 	.word	0x3fe00000
 800ee48:	7ff00000 	.word	0x7ff00000
 800ee4c:	7fe00000 	.word	0x7fe00000
 800ee50:	7c9fffff 	.word	0x7c9fffff
 800ee54:	7fefffff 	.word	0x7fefffff

0800ee58 <_strtod_r>:
 800ee58:	4b01      	ldr	r3, [pc, #4]	; (800ee60 <_strtod_r+0x8>)
 800ee5a:	f7ff ba0d 	b.w	800e278 <_strtod_l>
 800ee5e:	bf00      	nop
 800ee60:	20000070 	.word	0x20000070

0800ee64 <_strtol_l.constprop.0>:
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee6a:	d001      	beq.n	800ee70 <_strtol_l.constprop.0+0xc>
 800ee6c:	2b24      	cmp	r3, #36	; 0x24
 800ee6e:	d906      	bls.n	800ee7e <_strtol_l.constprop.0+0x1a>
 800ee70:	f7fd fe2e 	bl	800cad0 <__errno>
 800ee74:	2316      	movs	r3, #22
 800ee76:	6003      	str	r3, [r0, #0]
 800ee78:	2000      	movs	r0, #0
 800ee7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ef64 <_strtol_l.constprop.0+0x100>
 800ee82:	460d      	mov	r5, r1
 800ee84:	462e      	mov	r6, r5
 800ee86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ee8e:	f017 0708 	ands.w	r7, r7, #8
 800ee92:	d1f7      	bne.n	800ee84 <_strtol_l.constprop.0+0x20>
 800ee94:	2c2d      	cmp	r4, #45	; 0x2d
 800ee96:	d132      	bne.n	800eefe <_strtol_l.constprop.0+0x9a>
 800ee98:	782c      	ldrb	r4, [r5, #0]
 800ee9a:	2701      	movs	r7, #1
 800ee9c:	1cb5      	adds	r5, r6, #2
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d05b      	beq.n	800ef5a <_strtol_l.constprop.0+0xf6>
 800eea2:	2b10      	cmp	r3, #16
 800eea4:	d109      	bne.n	800eeba <_strtol_l.constprop.0+0x56>
 800eea6:	2c30      	cmp	r4, #48	; 0x30
 800eea8:	d107      	bne.n	800eeba <_strtol_l.constprop.0+0x56>
 800eeaa:	782c      	ldrb	r4, [r5, #0]
 800eeac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eeb0:	2c58      	cmp	r4, #88	; 0x58
 800eeb2:	d14d      	bne.n	800ef50 <_strtol_l.constprop.0+0xec>
 800eeb4:	786c      	ldrb	r4, [r5, #1]
 800eeb6:	2310      	movs	r3, #16
 800eeb8:	3502      	adds	r5, #2
 800eeba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eebe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800eec2:	f04f 0e00 	mov.w	lr, #0
 800eec6:	fbb8 f9f3 	udiv	r9, r8, r3
 800eeca:	4676      	mov	r6, lr
 800eecc:	fb03 8a19 	mls	sl, r3, r9, r8
 800eed0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eed4:	f1bc 0f09 	cmp.w	ip, #9
 800eed8:	d816      	bhi.n	800ef08 <_strtol_l.constprop.0+0xa4>
 800eeda:	4664      	mov	r4, ip
 800eedc:	42a3      	cmp	r3, r4
 800eede:	dd24      	ble.n	800ef2a <_strtol_l.constprop.0+0xc6>
 800eee0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800eee4:	d008      	beq.n	800eef8 <_strtol_l.constprop.0+0x94>
 800eee6:	45b1      	cmp	r9, r6
 800eee8:	d31c      	bcc.n	800ef24 <_strtol_l.constprop.0+0xc0>
 800eeea:	d101      	bne.n	800eef0 <_strtol_l.constprop.0+0x8c>
 800eeec:	45a2      	cmp	sl, r4
 800eeee:	db19      	blt.n	800ef24 <_strtol_l.constprop.0+0xc0>
 800eef0:	fb06 4603 	mla	r6, r6, r3, r4
 800eef4:	f04f 0e01 	mov.w	lr, #1
 800eef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eefc:	e7e8      	b.n	800eed0 <_strtol_l.constprop.0+0x6c>
 800eefe:	2c2b      	cmp	r4, #43	; 0x2b
 800ef00:	bf04      	itt	eq
 800ef02:	782c      	ldrbeq	r4, [r5, #0]
 800ef04:	1cb5      	addeq	r5, r6, #2
 800ef06:	e7ca      	b.n	800ee9e <_strtol_l.constprop.0+0x3a>
 800ef08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ef0c:	f1bc 0f19 	cmp.w	ip, #25
 800ef10:	d801      	bhi.n	800ef16 <_strtol_l.constprop.0+0xb2>
 800ef12:	3c37      	subs	r4, #55	; 0x37
 800ef14:	e7e2      	b.n	800eedc <_strtol_l.constprop.0+0x78>
 800ef16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ef1a:	f1bc 0f19 	cmp.w	ip, #25
 800ef1e:	d804      	bhi.n	800ef2a <_strtol_l.constprop.0+0xc6>
 800ef20:	3c57      	subs	r4, #87	; 0x57
 800ef22:	e7db      	b.n	800eedc <_strtol_l.constprop.0+0x78>
 800ef24:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ef28:	e7e6      	b.n	800eef8 <_strtol_l.constprop.0+0x94>
 800ef2a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ef2e:	d105      	bne.n	800ef3c <_strtol_l.constprop.0+0xd8>
 800ef30:	2322      	movs	r3, #34	; 0x22
 800ef32:	6003      	str	r3, [r0, #0]
 800ef34:	4646      	mov	r6, r8
 800ef36:	b942      	cbnz	r2, 800ef4a <_strtol_l.constprop.0+0xe6>
 800ef38:	4630      	mov	r0, r6
 800ef3a:	e79e      	b.n	800ee7a <_strtol_l.constprop.0+0x16>
 800ef3c:	b107      	cbz	r7, 800ef40 <_strtol_l.constprop.0+0xdc>
 800ef3e:	4276      	negs	r6, r6
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	d0f9      	beq.n	800ef38 <_strtol_l.constprop.0+0xd4>
 800ef44:	f1be 0f00 	cmp.w	lr, #0
 800ef48:	d000      	beq.n	800ef4c <_strtol_l.constprop.0+0xe8>
 800ef4a:	1e69      	subs	r1, r5, #1
 800ef4c:	6011      	str	r1, [r2, #0]
 800ef4e:	e7f3      	b.n	800ef38 <_strtol_l.constprop.0+0xd4>
 800ef50:	2430      	movs	r4, #48	; 0x30
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1b1      	bne.n	800eeba <_strtol_l.constprop.0+0x56>
 800ef56:	2308      	movs	r3, #8
 800ef58:	e7af      	b.n	800eeba <_strtol_l.constprop.0+0x56>
 800ef5a:	2c30      	cmp	r4, #48	; 0x30
 800ef5c:	d0a5      	beq.n	800eeaa <_strtol_l.constprop.0+0x46>
 800ef5e:	230a      	movs	r3, #10
 800ef60:	e7ab      	b.n	800eeba <_strtol_l.constprop.0+0x56>
 800ef62:	bf00      	nop
 800ef64:	080106e9 	.word	0x080106e9

0800ef68 <_strtol_r>:
 800ef68:	f7ff bf7c 	b.w	800ee64 <_strtol_l.constprop.0>

0800ef6c <__ssputs_r>:
 800ef6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef70:	688e      	ldr	r6, [r1, #8]
 800ef72:	461f      	mov	r7, r3
 800ef74:	42be      	cmp	r6, r7
 800ef76:	680b      	ldr	r3, [r1, #0]
 800ef78:	4682      	mov	sl, r0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	4690      	mov	r8, r2
 800ef7e:	d82c      	bhi.n	800efda <__ssputs_r+0x6e>
 800ef80:	898a      	ldrh	r2, [r1, #12]
 800ef82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef86:	d026      	beq.n	800efd6 <__ssputs_r+0x6a>
 800ef88:	6965      	ldr	r5, [r4, #20]
 800ef8a:	6909      	ldr	r1, [r1, #16]
 800ef8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef90:	eba3 0901 	sub.w	r9, r3, r1
 800ef94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef98:	1c7b      	adds	r3, r7, #1
 800ef9a:	444b      	add	r3, r9
 800ef9c:	106d      	asrs	r5, r5, #1
 800ef9e:	429d      	cmp	r5, r3
 800efa0:	bf38      	it	cc
 800efa2:	461d      	movcc	r5, r3
 800efa4:	0553      	lsls	r3, r2, #21
 800efa6:	d527      	bpl.n	800eff8 <__ssputs_r+0x8c>
 800efa8:	4629      	mov	r1, r5
 800efaa:	f7fc fc9f 	bl	800b8ec <_malloc_r>
 800efae:	4606      	mov	r6, r0
 800efb0:	b360      	cbz	r0, 800f00c <__ssputs_r+0xa0>
 800efb2:	6921      	ldr	r1, [r4, #16]
 800efb4:	464a      	mov	r2, r9
 800efb6:	f7fd fdb8 	bl	800cb2a <memcpy>
 800efba:	89a3      	ldrh	r3, [r4, #12]
 800efbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efc4:	81a3      	strh	r3, [r4, #12]
 800efc6:	6126      	str	r6, [r4, #16]
 800efc8:	6165      	str	r5, [r4, #20]
 800efca:	444e      	add	r6, r9
 800efcc:	eba5 0509 	sub.w	r5, r5, r9
 800efd0:	6026      	str	r6, [r4, #0]
 800efd2:	60a5      	str	r5, [r4, #8]
 800efd4:	463e      	mov	r6, r7
 800efd6:	42be      	cmp	r6, r7
 800efd8:	d900      	bls.n	800efdc <__ssputs_r+0x70>
 800efda:	463e      	mov	r6, r7
 800efdc:	6820      	ldr	r0, [r4, #0]
 800efde:	4632      	mov	r2, r6
 800efe0:	4641      	mov	r1, r8
 800efe2:	f000 f9c9 	bl	800f378 <memmove>
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	1b9b      	subs	r3, r3, r6
 800efea:	60a3      	str	r3, [r4, #8]
 800efec:	6823      	ldr	r3, [r4, #0]
 800efee:	4433      	add	r3, r6
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	2000      	movs	r0, #0
 800eff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff8:	462a      	mov	r2, r5
 800effa:	f000 fd8e 	bl	800fb1a <_realloc_r>
 800effe:	4606      	mov	r6, r0
 800f000:	2800      	cmp	r0, #0
 800f002:	d1e0      	bne.n	800efc6 <__ssputs_r+0x5a>
 800f004:	6921      	ldr	r1, [r4, #16]
 800f006:	4650      	mov	r0, sl
 800f008:	f7fe fc20 	bl	800d84c <_free_r>
 800f00c:	230c      	movs	r3, #12
 800f00e:	f8ca 3000 	str.w	r3, [sl]
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f01e:	e7e9      	b.n	800eff4 <__ssputs_r+0x88>

0800f020 <_svfiprintf_r>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	4698      	mov	r8, r3
 800f026:	898b      	ldrh	r3, [r1, #12]
 800f028:	061b      	lsls	r3, r3, #24
 800f02a:	b09d      	sub	sp, #116	; 0x74
 800f02c:	4607      	mov	r7, r0
 800f02e:	460d      	mov	r5, r1
 800f030:	4614      	mov	r4, r2
 800f032:	d50e      	bpl.n	800f052 <_svfiprintf_r+0x32>
 800f034:	690b      	ldr	r3, [r1, #16]
 800f036:	b963      	cbnz	r3, 800f052 <_svfiprintf_r+0x32>
 800f038:	2140      	movs	r1, #64	; 0x40
 800f03a:	f7fc fc57 	bl	800b8ec <_malloc_r>
 800f03e:	6028      	str	r0, [r5, #0]
 800f040:	6128      	str	r0, [r5, #16]
 800f042:	b920      	cbnz	r0, 800f04e <_svfiprintf_r+0x2e>
 800f044:	230c      	movs	r3, #12
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f04c:	e0d0      	b.n	800f1f0 <_svfiprintf_r+0x1d0>
 800f04e:	2340      	movs	r3, #64	; 0x40
 800f050:	616b      	str	r3, [r5, #20]
 800f052:	2300      	movs	r3, #0
 800f054:	9309      	str	r3, [sp, #36]	; 0x24
 800f056:	2320      	movs	r3, #32
 800f058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f060:	2330      	movs	r3, #48	; 0x30
 800f062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f208 <_svfiprintf_r+0x1e8>
 800f066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f06a:	f04f 0901 	mov.w	r9, #1
 800f06e:	4623      	mov	r3, r4
 800f070:	469a      	mov	sl, r3
 800f072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f076:	b10a      	cbz	r2, 800f07c <_svfiprintf_r+0x5c>
 800f078:	2a25      	cmp	r2, #37	; 0x25
 800f07a:	d1f9      	bne.n	800f070 <_svfiprintf_r+0x50>
 800f07c:	ebba 0b04 	subs.w	fp, sl, r4
 800f080:	d00b      	beq.n	800f09a <_svfiprintf_r+0x7a>
 800f082:	465b      	mov	r3, fp
 800f084:	4622      	mov	r2, r4
 800f086:	4629      	mov	r1, r5
 800f088:	4638      	mov	r0, r7
 800f08a:	f7ff ff6f 	bl	800ef6c <__ssputs_r>
 800f08e:	3001      	adds	r0, #1
 800f090:	f000 80a9 	beq.w	800f1e6 <_svfiprintf_r+0x1c6>
 800f094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f096:	445a      	add	r2, fp
 800f098:	9209      	str	r2, [sp, #36]	; 0x24
 800f09a:	f89a 3000 	ldrb.w	r3, [sl]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f000 80a1 	beq.w	800f1e6 <_svfiprintf_r+0x1c6>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0ae:	f10a 0a01 	add.w	sl, sl, #1
 800f0b2:	9304      	str	r3, [sp, #16]
 800f0b4:	9307      	str	r3, [sp, #28]
 800f0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800f0bc:	4654      	mov	r4, sl
 800f0be:	2205      	movs	r2, #5
 800f0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0c4:	4850      	ldr	r0, [pc, #320]	; (800f208 <_svfiprintf_r+0x1e8>)
 800f0c6:	f7f1 f883 	bl	80001d0 <memchr>
 800f0ca:	9a04      	ldr	r2, [sp, #16]
 800f0cc:	b9d8      	cbnz	r0, 800f106 <_svfiprintf_r+0xe6>
 800f0ce:	06d0      	lsls	r0, r2, #27
 800f0d0:	bf44      	itt	mi
 800f0d2:	2320      	movmi	r3, #32
 800f0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0d8:	0711      	lsls	r1, r2, #28
 800f0da:	bf44      	itt	mi
 800f0dc:	232b      	movmi	r3, #43	; 0x2b
 800f0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0e8:	d015      	beq.n	800f116 <_svfiprintf_r+0xf6>
 800f0ea:	9a07      	ldr	r2, [sp, #28]
 800f0ec:	4654      	mov	r4, sl
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	f04f 0c0a 	mov.w	ip, #10
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0fa:	3b30      	subs	r3, #48	; 0x30
 800f0fc:	2b09      	cmp	r3, #9
 800f0fe:	d94d      	bls.n	800f19c <_svfiprintf_r+0x17c>
 800f100:	b1b0      	cbz	r0, 800f130 <_svfiprintf_r+0x110>
 800f102:	9207      	str	r2, [sp, #28]
 800f104:	e014      	b.n	800f130 <_svfiprintf_r+0x110>
 800f106:	eba0 0308 	sub.w	r3, r0, r8
 800f10a:	fa09 f303 	lsl.w	r3, r9, r3
 800f10e:	4313      	orrs	r3, r2
 800f110:	9304      	str	r3, [sp, #16]
 800f112:	46a2      	mov	sl, r4
 800f114:	e7d2      	b.n	800f0bc <_svfiprintf_r+0x9c>
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	1d19      	adds	r1, r3, #4
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	9103      	str	r1, [sp, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bfbb      	ittet	lt
 800f122:	425b      	neglt	r3, r3
 800f124:	f042 0202 	orrlt.w	r2, r2, #2
 800f128:	9307      	strge	r3, [sp, #28]
 800f12a:	9307      	strlt	r3, [sp, #28]
 800f12c:	bfb8      	it	lt
 800f12e:	9204      	strlt	r2, [sp, #16]
 800f130:	7823      	ldrb	r3, [r4, #0]
 800f132:	2b2e      	cmp	r3, #46	; 0x2e
 800f134:	d10c      	bne.n	800f150 <_svfiprintf_r+0x130>
 800f136:	7863      	ldrb	r3, [r4, #1]
 800f138:	2b2a      	cmp	r3, #42	; 0x2a
 800f13a:	d134      	bne.n	800f1a6 <_svfiprintf_r+0x186>
 800f13c:	9b03      	ldr	r3, [sp, #12]
 800f13e:	1d1a      	adds	r2, r3, #4
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	9203      	str	r2, [sp, #12]
 800f144:	2b00      	cmp	r3, #0
 800f146:	bfb8      	it	lt
 800f148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f14c:	3402      	adds	r4, #2
 800f14e:	9305      	str	r3, [sp, #20]
 800f150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f218 <_svfiprintf_r+0x1f8>
 800f154:	7821      	ldrb	r1, [r4, #0]
 800f156:	2203      	movs	r2, #3
 800f158:	4650      	mov	r0, sl
 800f15a:	f7f1 f839 	bl	80001d0 <memchr>
 800f15e:	b138      	cbz	r0, 800f170 <_svfiprintf_r+0x150>
 800f160:	9b04      	ldr	r3, [sp, #16]
 800f162:	eba0 000a 	sub.w	r0, r0, sl
 800f166:	2240      	movs	r2, #64	; 0x40
 800f168:	4082      	lsls	r2, r0
 800f16a:	4313      	orrs	r3, r2
 800f16c:	3401      	adds	r4, #1
 800f16e:	9304      	str	r3, [sp, #16]
 800f170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f174:	4825      	ldr	r0, [pc, #148]	; (800f20c <_svfiprintf_r+0x1ec>)
 800f176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f17a:	2206      	movs	r2, #6
 800f17c:	f7f1 f828 	bl	80001d0 <memchr>
 800f180:	2800      	cmp	r0, #0
 800f182:	d038      	beq.n	800f1f6 <_svfiprintf_r+0x1d6>
 800f184:	4b22      	ldr	r3, [pc, #136]	; (800f210 <_svfiprintf_r+0x1f0>)
 800f186:	bb1b      	cbnz	r3, 800f1d0 <_svfiprintf_r+0x1b0>
 800f188:	9b03      	ldr	r3, [sp, #12]
 800f18a:	3307      	adds	r3, #7
 800f18c:	f023 0307 	bic.w	r3, r3, #7
 800f190:	3308      	adds	r3, #8
 800f192:	9303      	str	r3, [sp, #12]
 800f194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f196:	4433      	add	r3, r6
 800f198:	9309      	str	r3, [sp, #36]	; 0x24
 800f19a:	e768      	b.n	800f06e <_svfiprintf_r+0x4e>
 800f19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	2001      	movs	r0, #1
 800f1a4:	e7a6      	b.n	800f0f4 <_svfiprintf_r+0xd4>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	3401      	adds	r4, #1
 800f1aa:	9305      	str	r3, [sp, #20]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	f04f 0c0a 	mov.w	ip, #10
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1b8:	3a30      	subs	r2, #48	; 0x30
 800f1ba:	2a09      	cmp	r2, #9
 800f1bc:	d903      	bls.n	800f1c6 <_svfiprintf_r+0x1a6>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0c6      	beq.n	800f150 <_svfiprintf_r+0x130>
 800f1c2:	9105      	str	r1, [sp, #20]
 800f1c4:	e7c4      	b.n	800f150 <_svfiprintf_r+0x130>
 800f1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e7f0      	b.n	800f1b2 <_svfiprintf_r+0x192>
 800f1d0:	ab03      	add	r3, sp, #12
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	462a      	mov	r2, r5
 800f1d6:	4b0f      	ldr	r3, [pc, #60]	; (800f214 <_svfiprintf_r+0x1f4>)
 800f1d8:	a904      	add	r1, sp, #16
 800f1da:	4638      	mov	r0, r7
 800f1dc:	f7fc fcb2 	bl	800bb44 <_printf_float>
 800f1e0:	1c42      	adds	r2, r0, #1
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	d1d6      	bne.n	800f194 <_svfiprintf_r+0x174>
 800f1e6:	89ab      	ldrh	r3, [r5, #12]
 800f1e8:	065b      	lsls	r3, r3, #25
 800f1ea:	f53f af2d 	bmi.w	800f048 <_svfiprintf_r+0x28>
 800f1ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1f0:	b01d      	add	sp, #116	; 0x74
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	ab03      	add	r3, sp, #12
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	4b05      	ldr	r3, [pc, #20]	; (800f214 <_svfiprintf_r+0x1f4>)
 800f1fe:	a904      	add	r1, sp, #16
 800f200:	4638      	mov	r0, r7
 800f202:	f7fc ff43 	bl	800c08c <_printf_i>
 800f206:	e7eb      	b.n	800f1e0 <_svfiprintf_r+0x1c0>
 800f208:	080107e9 	.word	0x080107e9
 800f20c:	080107f3 	.word	0x080107f3
 800f210:	0800bb45 	.word	0x0800bb45
 800f214:	0800ef6d 	.word	0x0800ef6d
 800f218:	080107ef 	.word	0x080107ef

0800f21c <__sflush_r>:
 800f21c:	898a      	ldrh	r2, [r1, #12]
 800f21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f222:	4605      	mov	r5, r0
 800f224:	0710      	lsls	r0, r2, #28
 800f226:	460c      	mov	r4, r1
 800f228:	d458      	bmi.n	800f2dc <__sflush_r+0xc0>
 800f22a:	684b      	ldr	r3, [r1, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	dc05      	bgt.n	800f23c <__sflush_r+0x20>
 800f230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f232:	2b00      	cmp	r3, #0
 800f234:	dc02      	bgt.n	800f23c <__sflush_r+0x20>
 800f236:	2000      	movs	r0, #0
 800f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f23c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f23e:	2e00      	cmp	r6, #0
 800f240:	d0f9      	beq.n	800f236 <__sflush_r+0x1a>
 800f242:	2300      	movs	r3, #0
 800f244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f248:	682f      	ldr	r7, [r5, #0]
 800f24a:	6a21      	ldr	r1, [r4, #32]
 800f24c:	602b      	str	r3, [r5, #0]
 800f24e:	d032      	beq.n	800f2b6 <__sflush_r+0x9a>
 800f250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f252:	89a3      	ldrh	r3, [r4, #12]
 800f254:	075a      	lsls	r2, r3, #29
 800f256:	d505      	bpl.n	800f264 <__sflush_r+0x48>
 800f258:	6863      	ldr	r3, [r4, #4]
 800f25a:	1ac0      	subs	r0, r0, r3
 800f25c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f25e:	b10b      	cbz	r3, 800f264 <__sflush_r+0x48>
 800f260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f262:	1ac0      	subs	r0, r0, r3
 800f264:	2300      	movs	r3, #0
 800f266:	4602      	mov	r2, r0
 800f268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f26a:	6a21      	ldr	r1, [r4, #32]
 800f26c:	4628      	mov	r0, r5
 800f26e:	47b0      	blx	r6
 800f270:	1c43      	adds	r3, r0, #1
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	d106      	bne.n	800f284 <__sflush_r+0x68>
 800f276:	6829      	ldr	r1, [r5, #0]
 800f278:	291d      	cmp	r1, #29
 800f27a:	d82b      	bhi.n	800f2d4 <__sflush_r+0xb8>
 800f27c:	4a29      	ldr	r2, [pc, #164]	; (800f324 <__sflush_r+0x108>)
 800f27e:	410a      	asrs	r2, r1
 800f280:	07d6      	lsls	r6, r2, #31
 800f282:	d427      	bmi.n	800f2d4 <__sflush_r+0xb8>
 800f284:	2200      	movs	r2, #0
 800f286:	6062      	str	r2, [r4, #4]
 800f288:	04d9      	lsls	r1, r3, #19
 800f28a:	6922      	ldr	r2, [r4, #16]
 800f28c:	6022      	str	r2, [r4, #0]
 800f28e:	d504      	bpl.n	800f29a <__sflush_r+0x7e>
 800f290:	1c42      	adds	r2, r0, #1
 800f292:	d101      	bne.n	800f298 <__sflush_r+0x7c>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b903      	cbnz	r3, 800f29a <__sflush_r+0x7e>
 800f298:	6560      	str	r0, [r4, #84]	; 0x54
 800f29a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f29c:	602f      	str	r7, [r5, #0]
 800f29e:	2900      	cmp	r1, #0
 800f2a0:	d0c9      	beq.n	800f236 <__sflush_r+0x1a>
 800f2a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2a6:	4299      	cmp	r1, r3
 800f2a8:	d002      	beq.n	800f2b0 <__sflush_r+0x94>
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f7fe face 	bl	800d84c <_free_r>
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	6360      	str	r0, [r4, #52]	; 0x34
 800f2b4:	e7c0      	b.n	800f238 <__sflush_r+0x1c>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	47b0      	blx	r6
 800f2bc:	1c41      	adds	r1, r0, #1
 800f2be:	d1c8      	bne.n	800f252 <__sflush_r+0x36>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d0c5      	beq.n	800f252 <__sflush_r+0x36>
 800f2c6:	2b1d      	cmp	r3, #29
 800f2c8:	d001      	beq.n	800f2ce <__sflush_r+0xb2>
 800f2ca:	2b16      	cmp	r3, #22
 800f2cc:	d101      	bne.n	800f2d2 <__sflush_r+0xb6>
 800f2ce:	602f      	str	r7, [r5, #0]
 800f2d0:	e7b1      	b.n	800f236 <__sflush_r+0x1a>
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d8:	81a3      	strh	r3, [r4, #12]
 800f2da:	e7ad      	b.n	800f238 <__sflush_r+0x1c>
 800f2dc:	690f      	ldr	r7, [r1, #16]
 800f2de:	2f00      	cmp	r7, #0
 800f2e0:	d0a9      	beq.n	800f236 <__sflush_r+0x1a>
 800f2e2:	0793      	lsls	r3, r2, #30
 800f2e4:	680e      	ldr	r6, [r1, #0]
 800f2e6:	bf08      	it	eq
 800f2e8:	694b      	ldreq	r3, [r1, #20]
 800f2ea:	600f      	str	r7, [r1, #0]
 800f2ec:	bf18      	it	ne
 800f2ee:	2300      	movne	r3, #0
 800f2f0:	eba6 0807 	sub.w	r8, r6, r7
 800f2f4:	608b      	str	r3, [r1, #8]
 800f2f6:	f1b8 0f00 	cmp.w	r8, #0
 800f2fa:	dd9c      	ble.n	800f236 <__sflush_r+0x1a>
 800f2fc:	6a21      	ldr	r1, [r4, #32]
 800f2fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f300:	4643      	mov	r3, r8
 800f302:	463a      	mov	r2, r7
 800f304:	4628      	mov	r0, r5
 800f306:	47b0      	blx	r6
 800f308:	2800      	cmp	r0, #0
 800f30a:	dc06      	bgt.n	800f31a <__sflush_r+0xfe>
 800f30c:	89a3      	ldrh	r3, [r4, #12]
 800f30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f312:	81a3      	strh	r3, [r4, #12]
 800f314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f318:	e78e      	b.n	800f238 <__sflush_r+0x1c>
 800f31a:	4407      	add	r7, r0
 800f31c:	eba8 0800 	sub.w	r8, r8, r0
 800f320:	e7e9      	b.n	800f2f6 <__sflush_r+0xda>
 800f322:	bf00      	nop
 800f324:	dfbffffe 	.word	0xdfbffffe

0800f328 <_fflush_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	690b      	ldr	r3, [r1, #16]
 800f32c:	4605      	mov	r5, r0
 800f32e:	460c      	mov	r4, r1
 800f330:	b913      	cbnz	r3, 800f338 <_fflush_r+0x10>
 800f332:	2500      	movs	r5, #0
 800f334:	4628      	mov	r0, r5
 800f336:	bd38      	pop	{r3, r4, r5, pc}
 800f338:	b118      	cbz	r0, 800f342 <_fflush_r+0x1a>
 800f33a:	6a03      	ldr	r3, [r0, #32]
 800f33c:	b90b      	cbnz	r3, 800f342 <_fflush_r+0x1a>
 800f33e:	f7fd fa63 	bl	800c808 <__sinit>
 800f342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0f3      	beq.n	800f332 <_fflush_r+0xa>
 800f34a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f34c:	07d0      	lsls	r0, r2, #31
 800f34e:	d404      	bmi.n	800f35a <_fflush_r+0x32>
 800f350:	0599      	lsls	r1, r3, #22
 800f352:	d402      	bmi.n	800f35a <_fflush_r+0x32>
 800f354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f356:	f7fd fbe6 	bl	800cb26 <__retarget_lock_acquire_recursive>
 800f35a:	4628      	mov	r0, r5
 800f35c:	4621      	mov	r1, r4
 800f35e:	f7ff ff5d 	bl	800f21c <__sflush_r>
 800f362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f364:	07da      	lsls	r2, r3, #31
 800f366:	4605      	mov	r5, r0
 800f368:	d4e4      	bmi.n	800f334 <_fflush_r+0xc>
 800f36a:	89a3      	ldrh	r3, [r4, #12]
 800f36c:	059b      	lsls	r3, r3, #22
 800f36e:	d4e1      	bmi.n	800f334 <_fflush_r+0xc>
 800f370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f372:	f7fd fbd9 	bl	800cb28 <__retarget_lock_release_recursive>
 800f376:	e7dd      	b.n	800f334 <_fflush_r+0xc>

0800f378 <memmove>:
 800f378:	4288      	cmp	r0, r1
 800f37a:	b510      	push	{r4, lr}
 800f37c:	eb01 0402 	add.w	r4, r1, r2
 800f380:	d902      	bls.n	800f388 <memmove+0x10>
 800f382:	4284      	cmp	r4, r0
 800f384:	4623      	mov	r3, r4
 800f386:	d807      	bhi.n	800f398 <memmove+0x20>
 800f388:	1e43      	subs	r3, r0, #1
 800f38a:	42a1      	cmp	r1, r4
 800f38c:	d008      	beq.n	800f3a0 <memmove+0x28>
 800f38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f392:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f396:	e7f8      	b.n	800f38a <memmove+0x12>
 800f398:	4402      	add	r2, r0
 800f39a:	4601      	mov	r1, r0
 800f39c:	428a      	cmp	r2, r1
 800f39e:	d100      	bne.n	800f3a2 <memmove+0x2a>
 800f3a0:	bd10      	pop	{r4, pc}
 800f3a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3aa:	e7f7      	b.n	800f39c <memmove+0x24>

0800f3ac <strncmp>:
 800f3ac:	b510      	push	{r4, lr}
 800f3ae:	b16a      	cbz	r2, 800f3cc <strncmp+0x20>
 800f3b0:	3901      	subs	r1, #1
 800f3b2:	1884      	adds	r4, r0, r2
 800f3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d103      	bne.n	800f3c8 <strncmp+0x1c>
 800f3c0:	42a0      	cmp	r0, r4
 800f3c2:	d001      	beq.n	800f3c8 <strncmp+0x1c>
 800f3c4:	2a00      	cmp	r2, #0
 800f3c6:	d1f5      	bne.n	800f3b4 <strncmp+0x8>
 800f3c8:	1ad0      	subs	r0, r2, r3
 800f3ca:	bd10      	pop	{r4, pc}
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	e7fc      	b.n	800f3ca <strncmp+0x1e>

0800f3d0 <nan>:
 800f3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3d8 <nan+0x8>
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	7ff80000 	.word	0x7ff80000

0800f3e0 <__assert_func>:
 800f3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3e2:	4614      	mov	r4, r2
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	4b09      	ldr	r3, [pc, #36]	; (800f40c <__assert_func+0x2c>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4605      	mov	r5, r0
 800f3ec:	68d8      	ldr	r0, [r3, #12]
 800f3ee:	b14c      	cbz	r4, 800f404 <__assert_func+0x24>
 800f3f0:	4b07      	ldr	r3, [pc, #28]	; (800f410 <__assert_func+0x30>)
 800f3f2:	9100      	str	r1, [sp, #0]
 800f3f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3f8:	4906      	ldr	r1, [pc, #24]	; (800f414 <__assert_func+0x34>)
 800f3fa:	462b      	mov	r3, r5
 800f3fc:	f000 fbca 	bl	800fb94 <fiprintf>
 800f400:	f000 fbda 	bl	800fbb8 <abort>
 800f404:	4b04      	ldr	r3, [pc, #16]	; (800f418 <__assert_func+0x38>)
 800f406:	461c      	mov	r4, r3
 800f408:	e7f3      	b.n	800f3f2 <__assert_func+0x12>
 800f40a:	bf00      	nop
 800f40c:	2000006c 	.word	0x2000006c
 800f410:	08010802 	.word	0x08010802
 800f414:	0801080f 	.word	0x0801080f
 800f418:	0801083d 	.word	0x0801083d

0800f41c <_calloc_r>:
 800f41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f41e:	fba1 2402 	umull	r2, r4, r1, r2
 800f422:	b94c      	cbnz	r4, 800f438 <_calloc_r+0x1c>
 800f424:	4611      	mov	r1, r2
 800f426:	9201      	str	r2, [sp, #4]
 800f428:	f7fc fa60 	bl	800b8ec <_malloc_r>
 800f42c:	9a01      	ldr	r2, [sp, #4]
 800f42e:	4605      	mov	r5, r0
 800f430:	b930      	cbnz	r0, 800f440 <_calloc_r+0x24>
 800f432:	4628      	mov	r0, r5
 800f434:	b003      	add	sp, #12
 800f436:	bd30      	pop	{r4, r5, pc}
 800f438:	220c      	movs	r2, #12
 800f43a:	6002      	str	r2, [r0, #0]
 800f43c:	2500      	movs	r5, #0
 800f43e:	e7f8      	b.n	800f432 <_calloc_r+0x16>
 800f440:	4621      	mov	r1, r4
 800f442:	f7fd fa7a 	bl	800c93a <memset>
 800f446:	e7f4      	b.n	800f432 <_calloc_r+0x16>

0800f448 <rshift>:
 800f448:	6903      	ldr	r3, [r0, #16]
 800f44a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f44e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f452:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f456:	f100 0414 	add.w	r4, r0, #20
 800f45a:	dd45      	ble.n	800f4e8 <rshift+0xa0>
 800f45c:	f011 011f 	ands.w	r1, r1, #31
 800f460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f468:	d10c      	bne.n	800f484 <rshift+0x3c>
 800f46a:	f100 0710 	add.w	r7, r0, #16
 800f46e:	4629      	mov	r1, r5
 800f470:	42b1      	cmp	r1, r6
 800f472:	d334      	bcc.n	800f4de <rshift+0x96>
 800f474:	1a9b      	subs	r3, r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	1eea      	subs	r2, r5, #3
 800f47a:	4296      	cmp	r6, r2
 800f47c:	bf38      	it	cc
 800f47e:	2300      	movcc	r3, #0
 800f480:	4423      	add	r3, r4
 800f482:	e015      	b.n	800f4b0 <rshift+0x68>
 800f484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f488:	f1c1 0820 	rsb	r8, r1, #32
 800f48c:	40cf      	lsrs	r7, r1
 800f48e:	f105 0e04 	add.w	lr, r5, #4
 800f492:	46a1      	mov	r9, r4
 800f494:	4576      	cmp	r6, lr
 800f496:	46f4      	mov	ip, lr
 800f498:	d815      	bhi.n	800f4c6 <rshift+0x7e>
 800f49a:	1a9a      	subs	r2, r3, r2
 800f49c:	0092      	lsls	r2, r2, #2
 800f49e:	3a04      	subs	r2, #4
 800f4a0:	3501      	adds	r5, #1
 800f4a2:	42ae      	cmp	r6, r5
 800f4a4:	bf38      	it	cc
 800f4a6:	2200      	movcc	r2, #0
 800f4a8:	18a3      	adds	r3, r4, r2
 800f4aa:	50a7      	str	r7, [r4, r2]
 800f4ac:	b107      	cbz	r7, 800f4b0 <rshift+0x68>
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	1b1a      	subs	r2, r3, r4
 800f4b2:	42a3      	cmp	r3, r4
 800f4b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4b8:	bf08      	it	eq
 800f4ba:	2300      	moveq	r3, #0
 800f4bc:	6102      	str	r2, [r0, #16]
 800f4be:	bf08      	it	eq
 800f4c0:	6143      	streq	r3, [r0, #20]
 800f4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4c6:	f8dc c000 	ldr.w	ip, [ip]
 800f4ca:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4ce:	ea4c 0707 	orr.w	r7, ip, r7
 800f4d2:	f849 7b04 	str.w	r7, [r9], #4
 800f4d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4da:	40cf      	lsrs	r7, r1
 800f4dc:	e7da      	b.n	800f494 <rshift+0x4c>
 800f4de:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4e2:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4e6:	e7c3      	b.n	800f470 <rshift+0x28>
 800f4e8:	4623      	mov	r3, r4
 800f4ea:	e7e1      	b.n	800f4b0 <rshift+0x68>

0800f4ec <__hexdig_fun>:
 800f4ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f4f0:	2b09      	cmp	r3, #9
 800f4f2:	d802      	bhi.n	800f4fa <__hexdig_fun+0xe>
 800f4f4:	3820      	subs	r0, #32
 800f4f6:	b2c0      	uxtb	r0, r0
 800f4f8:	4770      	bx	lr
 800f4fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f4fe:	2b05      	cmp	r3, #5
 800f500:	d801      	bhi.n	800f506 <__hexdig_fun+0x1a>
 800f502:	3847      	subs	r0, #71	; 0x47
 800f504:	e7f7      	b.n	800f4f6 <__hexdig_fun+0xa>
 800f506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f50a:	2b05      	cmp	r3, #5
 800f50c:	d801      	bhi.n	800f512 <__hexdig_fun+0x26>
 800f50e:	3827      	subs	r0, #39	; 0x27
 800f510:	e7f1      	b.n	800f4f6 <__hexdig_fun+0xa>
 800f512:	2000      	movs	r0, #0
 800f514:	4770      	bx	lr
	...

0800f518 <__gethex>:
 800f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f51c:	4617      	mov	r7, r2
 800f51e:	680a      	ldr	r2, [r1, #0]
 800f520:	b085      	sub	sp, #20
 800f522:	f102 0b02 	add.w	fp, r2, #2
 800f526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f52a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f52e:	4681      	mov	r9, r0
 800f530:	468a      	mov	sl, r1
 800f532:	9302      	str	r3, [sp, #8]
 800f534:	32fe      	adds	r2, #254	; 0xfe
 800f536:	eb02 030b 	add.w	r3, r2, fp
 800f53a:	46d8      	mov	r8, fp
 800f53c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f540:	9301      	str	r3, [sp, #4]
 800f542:	2830      	cmp	r0, #48	; 0x30
 800f544:	d0f7      	beq.n	800f536 <__gethex+0x1e>
 800f546:	f7ff ffd1 	bl	800f4ec <__hexdig_fun>
 800f54a:	4604      	mov	r4, r0
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d138      	bne.n	800f5c2 <__gethex+0xaa>
 800f550:	49a7      	ldr	r1, [pc, #668]	; (800f7f0 <__gethex+0x2d8>)
 800f552:	2201      	movs	r2, #1
 800f554:	4640      	mov	r0, r8
 800f556:	f7ff ff29 	bl	800f3ac <strncmp>
 800f55a:	4606      	mov	r6, r0
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d169      	bne.n	800f634 <__gethex+0x11c>
 800f560:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f564:	465d      	mov	r5, fp
 800f566:	f7ff ffc1 	bl	800f4ec <__hexdig_fun>
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d064      	beq.n	800f638 <__gethex+0x120>
 800f56e:	465a      	mov	r2, fp
 800f570:	7810      	ldrb	r0, [r2, #0]
 800f572:	2830      	cmp	r0, #48	; 0x30
 800f574:	4690      	mov	r8, r2
 800f576:	f102 0201 	add.w	r2, r2, #1
 800f57a:	d0f9      	beq.n	800f570 <__gethex+0x58>
 800f57c:	f7ff ffb6 	bl	800f4ec <__hexdig_fun>
 800f580:	2301      	movs	r3, #1
 800f582:	fab0 f480 	clz	r4, r0
 800f586:	0964      	lsrs	r4, r4, #5
 800f588:	465e      	mov	r6, fp
 800f58a:	9301      	str	r3, [sp, #4]
 800f58c:	4642      	mov	r2, r8
 800f58e:	4615      	mov	r5, r2
 800f590:	3201      	adds	r2, #1
 800f592:	7828      	ldrb	r0, [r5, #0]
 800f594:	f7ff ffaa 	bl	800f4ec <__hexdig_fun>
 800f598:	2800      	cmp	r0, #0
 800f59a:	d1f8      	bne.n	800f58e <__gethex+0x76>
 800f59c:	4994      	ldr	r1, [pc, #592]	; (800f7f0 <__gethex+0x2d8>)
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	f7ff ff03 	bl	800f3ac <strncmp>
 800f5a6:	b978      	cbnz	r0, 800f5c8 <__gethex+0xb0>
 800f5a8:	b946      	cbnz	r6, 800f5bc <__gethex+0xa4>
 800f5aa:	1c6e      	adds	r6, r5, #1
 800f5ac:	4632      	mov	r2, r6
 800f5ae:	4615      	mov	r5, r2
 800f5b0:	3201      	adds	r2, #1
 800f5b2:	7828      	ldrb	r0, [r5, #0]
 800f5b4:	f7ff ff9a 	bl	800f4ec <__hexdig_fun>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d1f8      	bne.n	800f5ae <__gethex+0x96>
 800f5bc:	1b73      	subs	r3, r6, r5
 800f5be:	009e      	lsls	r6, r3, #2
 800f5c0:	e004      	b.n	800f5cc <__gethex+0xb4>
 800f5c2:	2400      	movs	r4, #0
 800f5c4:	4626      	mov	r6, r4
 800f5c6:	e7e1      	b.n	800f58c <__gethex+0x74>
 800f5c8:	2e00      	cmp	r6, #0
 800f5ca:	d1f7      	bne.n	800f5bc <__gethex+0xa4>
 800f5cc:	782b      	ldrb	r3, [r5, #0]
 800f5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f5d2:	2b50      	cmp	r3, #80	; 0x50
 800f5d4:	d13d      	bne.n	800f652 <__gethex+0x13a>
 800f5d6:	786b      	ldrb	r3, [r5, #1]
 800f5d8:	2b2b      	cmp	r3, #43	; 0x2b
 800f5da:	d02f      	beq.n	800f63c <__gethex+0x124>
 800f5dc:	2b2d      	cmp	r3, #45	; 0x2d
 800f5de:	d031      	beq.n	800f644 <__gethex+0x12c>
 800f5e0:	1c69      	adds	r1, r5, #1
 800f5e2:	f04f 0b00 	mov.w	fp, #0
 800f5e6:	7808      	ldrb	r0, [r1, #0]
 800f5e8:	f7ff ff80 	bl	800f4ec <__hexdig_fun>
 800f5ec:	1e42      	subs	r2, r0, #1
 800f5ee:	b2d2      	uxtb	r2, r2
 800f5f0:	2a18      	cmp	r2, #24
 800f5f2:	d82e      	bhi.n	800f652 <__gethex+0x13a>
 800f5f4:	f1a0 0210 	sub.w	r2, r0, #16
 800f5f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5fc:	f7ff ff76 	bl	800f4ec <__hexdig_fun>
 800f600:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800f604:	fa5f fc8c 	uxtb.w	ip, ip
 800f608:	f1bc 0f18 	cmp.w	ip, #24
 800f60c:	d91d      	bls.n	800f64a <__gethex+0x132>
 800f60e:	f1bb 0f00 	cmp.w	fp, #0
 800f612:	d000      	beq.n	800f616 <__gethex+0xfe>
 800f614:	4252      	negs	r2, r2
 800f616:	4416      	add	r6, r2
 800f618:	f8ca 1000 	str.w	r1, [sl]
 800f61c:	b1dc      	cbz	r4, 800f656 <__gethex+0x13e>
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	bf14      	ite	ne
 800f624:	f04f 0800 	movne.w	r8, #0
 800f628:	f04f 0806 	moveq.w	r8, #6
 800f62c:	4640      	mov	r0, r8
 800f62e:	b005      	add	sp, #20
 800f630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f634:	4645      	mov	r5, r8
 800f636:	4626      	mov	r6, r4
 800f638:	2401      	movs	r4, #1
 800f63a:	e7c7      	b.n	800f5cc <__gethex+0xb4>
 800f63c:	f04f 0b00 	mov.w	fp, #0
 800f640:	1ca9      	adds	r1, r5, #2
 800f642:	e7d0      	b.n	800f5e6 <__gethex+0xce>
 800f644:	f04f 0b01 	mov.w	fp, #1
 800f648:	e7fa      	b.n	800f640 <__gethex+0x128>
 800f64a:	230a      	movs	r3, #10
 800f64c:	fb03 0002 	mla	r0, r3, r2, r0
 800f650:	e7d0      	b.n	800f5f4 <__gethex+0xdc>
 800f652:	4629      	mov	r1, r5
 800f654:	e7e0      	b.n	800f618 <__gethex+0x100>
 800f656:	eba5 0308 	sub.w	r3, r5, r8
 800f65a:	3b01      	subs	r3, #1
 800f65c:	4621      	mov	r1, r4
 800f65e:	2b07      	cmp	r3, #7
 800f660:	dc0a      	bgt.n	800f678 <__gethex+0x160>
 800f662:	4648      	mov	r0, r9
 800f664:	f7fe f93e 	bl	800d8e4 <_Balloc>
 800f668:	4604      	mov	r4, r0
 800f66a:	b940      	cbnz	r0, 800f67e <__gethex+0x166>
 800f66c:	4b61      	ldr	r3, [pc, #388]	; (800f7f4 <__gethex+0x2dc>)
 800f66e:	4602      	mov	r2, r0
 800f670:	21e4      	movs	r1, #228	; 0xe4
 800f672:	4861      	ldr	r0, [pc, #388]	; (800f7f8 <__gethex+0x2e0>)
 800f674:	f7ff feb4 	bl	800f3e0 <__assert_func>
 800f678:	3101      	adds	r1, #1
 800f67a:	105b      	asrs	r3, r3, #1
 800f67c:	e7ef      	b.n	800f65e <__gethex+0x146>
 800f67e:	f100 0a14 	add.w	sl, r0, #20
 800f682:	2300      	movs	r3, #0
 800f684:	495a      	ldr	r1, [pc, #360]	; (800f7f0 <__gethex+0x2d8>)
 800f686:	f8cd a004 	str.w	sl, [sp, #4]
 800f68a:	469b      	mov	fp, r3
 800f68c:	45a8      	cmp	r8, r5
 800f68e:	d342      	bcc.n	800f716 <__gethex+0x1fe>
 800f690:	9801      	ldr	r0, [sp, #4]
 800f692:	f840 bb04 	str.w	fp, [r0], #4
 800f696:	eba0 000a 	sub.w	r0, r0, sl
 800f69a:	1080      	asrs	r0, r0, #2
 800f69c:	6120      	str	r0, [r4, #16]
 800f69e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f6a2:	4658      	mov	r0, fp
 800f6a4:	f7fe fa10 	bl	800dac8 <__hi0bits>
 800f6a8:	683d      	ldr	r5, [r7, #0]
 800f6aa:	eba8 0000 	sub.w	r0, r8, r0
 800f6ae:	42a8      	cmp	r0, r5
 800f6b0:	dd59      	ble.n	800f766 <__gethex+0x24e>
 800f6b2:	eba0 0805 	sub.w	r8, r0, r5
 800f6b6:	4641      	mov	r1, r8
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f7fe fd9f 	bl	800e1fc <__any_on>
 800f6be:	4683      	mov	fp, r0
 800f6c0:	b1b8      	cbz	r0, 800f6f2 <__gethex+0x1da>
 800f6c2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800f6c6:	1159      	asrs	r1, r3, #5
 800f6c8:	f003 021f 	and.w	r2, r3, #31
 800f6cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f6d0:	f04f 0b01 	mov.w	fp, #1
 800f6d4:	fa0b f202 	lsl.w	r2, fp, r2
 800f6d8:	420a      	tst	r2, r1
 800f6da:	d00a      	beq.n	800f6f2 <__gethex+0x1da>
 800f6dc:	455b      	cmp	r3, fp
 800f6de:	dd06      	ble.n	800f6ee <__gethex+0x1d6>
 800f6e0:	f1a8 0102 	sub.w	r1, r8, #2
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f7fe fd89 	bl	800e1fc <__any_on>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d138      	bne.n	800f760 <__gethex+0x248>
 800f6ee:	f04f 0b02 	mov.w	fp, #2
 800f6f2:	4641      	mov	r1, r8
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f7ff fea7 	bl	800f448 <rshift>
 800f6fa:	4446      	add	r6, r8
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	42b3      	cmp	r3, r6
 800f700:	da41      	bge.n	800f786 <__gethex+0x26e>
 800f702:	4621      	mov	r1, r4
 800f704:	4648      	mov	r0, r9
 800f706:	f7fe f92d 	bl	800d964 <_Bfree>
 800f70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f70c:	2300      	movs	r3, #0
 800f70e:	6013      	str	r3, [r2, #0]
 800f710:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f714:	e78a      	b.n	800f62c <__gethex+0x114>
 800f716:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f71a:	2a2e      	cmp	r2, #46	; 0x2e
 800f71c:	d014      	beq.n	800f748 <__gethex+0x230>
 800f71e:	2b20      	cmp	r3, #32
 800f720:	d106      	bne.n	800f730 <__gethex+0x218>
 800f722:	9b01      	ldr	r3, [sp, #4]
 800f724:	f843 bb04 	str.w	fp, [r3], #4
 800f728:	f04f 0b00 	mov.w	fp, #0
 800f72c:	9301      	str	r3, [sp, #4]
 800f72e:	465b      	mov	r3, fp
 800f730:	7828      	ldrb	r0, [r5, #0]
 800f732:	9303      	str	r3, [sp, #12]
 800f734:	f7ff feda 	bl	800f4ec <__hexdig_fun>
 800f738:	9b03      	ldr	r3, [sp, #12]
 800f73a:	f000 000f 	and.w	r0, r0, #15
 800f73e:	4098      	lsls	r0, r3
 800f740:	ea4b 0b00 	orr.w	fp, fp, r0
 800f744:	3304      	adds	r3, #4
 800f746:	e7a1      	b.n	800f68c <__gethex+0x174>
 800f748:	45a8      	cmp	r8, r5
 800f74a:	d8e8      	bhi.n	800f71e <__gethex+0x206>
 800f74c:	2201      	movs	r2, #1
 800f74e:	4628      	mov	r0, r5
 800f750:	9303      	str	r3, [sp, #12]
 800f752:	f7ff fe2b 	bl	800f3ac <strncmp>
 800f756:	4926      	ldr	r1, [pc, #152]	; (800f7f0 <__gethex+0x2d8>)
 800f758:	9b03      	ldr	r3, [sp, #12]
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d1df      	bne.n	800f71e <__gethex+0x206>
 800f75e:	e795      	b.n	800f68c <__gethex+0x174>
 800f760:	f04f 0b03 	mov.w	fp, #3
 800f764:	e7c5      	b.n	800f6f2 <__gethex+0x1da>
 800f766:	da0b      	bge.n	800f780 <__gethex+0x268>
 800f768:	eba5 0800 	sub.w	r8, r5, r0
 800f76c:	4621      	mov	r1, r4
 800f76e:	4642      	mov	r2, r8
 800f770:	4648      	mov	r0, r9
 800f772:	f7fe fb11 	bl	800dd98 <__lshift>
 800f776:	eba6 0608 	sub.w	r6, r6, r8
 800f77a:	4604      	mov	r4, r0
 800f77c:	f100 0a14 	add.w	sl, r0, #20
 800f780:	f04f 0b00 	mov.w	fp, #0
 800f784:	e7ba      	b.n	800f6fc <__gethex+0x1e4>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	42b3      	cmp	r3, r6
 800f78a:	dd73      	ble.n	800f874 <__gethex+0x35c>
 800f78c:	1b9e      	subs	r6, r3, r6
 800f78e:	42b5      	cmp	r5, r6
 800f790:	dc34      	bgt.n	800f7fc <__gethex+0x2e4>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2b02      	cmp	r3, #2
 800f796:	d023      	beq.n	800f7e0 <__gethex+0x2c8>
 800f798:	2b03      	cmp	r3, #3
 800f79a:	d025      	beq.n	800f7e8 <__gethex+0x2d0>
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d115      	bne.n	800f7cc <__gethex+0x2b4>
 800f7a0:	42b5      	cmp	r5, r6
 800f7a2:	d113      	bne.n	800f7cc <__gethex+0x2b4>
 800f7a4:	2d01      	cmp	r5, #1
 800f7a6:	d10b      	bne.n	800f7c0 <__gethex+0x2a8>
 800f7a8:	9a02      	ldr	r2, [sp, #8]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6013      	str	r3, [r2, #0]
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	f8ca 3000 	str.w	r3, [sl]
 800f7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7b8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f7bc:	601c      	str	r4, [r3, #0]
 800f7be:	e735      	b.n	800f62c <__gethex+0x114>
 800f7c0:	1e69      	subs	r1, r5, #1
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f7fe fd1a 	bl	800e1fc <__any_on>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d1ed      	bne.n	800f7a8 <__gethex+0x290>
 800f7cc:	4621      	mov	r1, r4
 800f7ce:	4648      	mov	r0, r9
 800f7d0:	f7fe f8c8 	bl	800d964 <_Bfree>
 800f7d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	6013      	str	r3, [r2, #0]
 800f7da:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f7de:	e725      	b.n	800f62c <__gethex+0x114>
 800f7e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1f2      	bne.n	800f7cc <__gethex+0x2b4>
 800f7e6:	e7df      	b.n	800f7a8 <__gethex+0x290>
 800f7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1dc      	bne.n	800f7a8 <__gethex+0x290>
 800f7ee:	e7ed      	b.n	800f7cc <__gethex+0x2b4>
 800f7f0:	08010694 	.word	0x08010694
 800f7f4:	08010529 	.word	0x08010529
 800f7f8:	0801083e 	.word	0x0801083e
 800f7fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800f800:	f1bb 0f00 	cmp.w	fp, #0
 800f804:	d133      	bne.n	800f86e <__gethex+0x356>
 800f806:	f1b8 0f00 	cmp.w	r8, #0
 800f80a:	d004      	beq.n	800f816 <__gethex+0x2fe>
 800f80c:	4641      	mov	r1, r8
 800f80e:	4620      	mov	r0, r4
 800f810:	f7fe fcf4 	bl	800e1fc <__any_on>
 800f814:	4683      	mov	fp, r0
 800f816:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f81a:	2301      	movs	r3, #1
 800f81c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f820:	f008 081f 	and.w	r8, r8, #31
 800f824:	fa03 f308 	lsl.w	r3, r3, r8
 800f828:	4213      	tst	r3, r2
 800f82a:	4631      	mov	r1, r6
 800f82c:	4620      	mov	r0, r4
 800f82e:	bf18      	it	ne
 800f830:	f04b 0b02 	orrne.w	fp, fp, #2
 800f834:	1bad      	subs	r5, r5, r6
 800f836:	f7ff fe07 	bl	800f448 <rshift>
 800f83a:	687e      	ldr	r6, [r7, #4]
 800f83c:	f04f 0802 	mov.w	r8, #2
 800f840:	f1bb 0f00 	cmp.w	fp, #0
 800f844:	d04a      	beq.n	800f8dc <__gethex+0x3c4>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d016      	beq.n	800f87a <__gethex+0x362>
 800f84c:	2b03      	cmp	r3, #3
 800f84e:	d018      	beq.n	800f882 <__gethex+0x36a>
 800f850:	2b01      	cmp	r3, #1
 800f852:	d109      	bne.n	800f868 <__gethex+0x350>
 800f854:	f01b 0f02 	tst.w	fp, #2
 800f858:	d006      	beq.n	800f868 <__gethex+0x350>
 800f85a:	f8da 3000 	ldr.w	r3, [sl]
 800f85e:	ea4b 0b03 	orr.w	fp, fp, r3
 800f862:	f01b 0f01 	tst.w	fp, #1
 800f866:	d10f      	bne.n	800f888 <__gethex+0x370>
 800f868:	f048 0810 	orr.w	r8, r8, #16
 800f86c:	e036      	b.n	800f8dc <__gethex+0x3c4>
 800f86e:	f04f 0b01 	mov.w	fp, #1
 800f872:	e7d0      	b.n	800f816 <__gethex+0x2fe>
 800f874:	f04f 0801 	mov.w	r8, #1
 800f878:	e7e2      	b.n	800f840 <__gethex+0x328>
 800f87a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f87c:	f1c3 0301 	rsb	r3, r3, #1
 800f880:	930f      	str	r3, [sp, #60]	; 0x3c
 800f882:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f884:	2b00      	cmp	r3, #0
 800f886:	d0ef      	beq.n	800f868 <__gethex+0x350>
 800f888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f88c:	f104 0214 	add.w	r2, r4, #20
 800f890:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f894:	9301      	str	r3, [sp, #4]
 800f896:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f89a:	2300      	movs	r3, #0
 800f89c:	4694      	mov	ip, r2
 800f89e:	f852 1b04 	ldr.w	r1, [r2], #4
 800f8a2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800f8a6:	d01e      	beq.n	800f8e6 <__gethex+0x3ce>
 800f8a8:	3101      	adds	r1, #1
 800f8aa:	f8cc 1000 	str.w	r1, [ip]
 800f8ae:	f1b8 0f02 	cmp.w	r8, #2
 800f8b2:	f104 0214 	add.w	r2, r4, #20
 800f8b6:	d13d      	bne.n	800f934 <__gethex+0x41c>
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	42ab      	cmp	r3, r5
 800f8be:	d10b      	bne.n	800f8d8 <__gethex+0x3c0>
 800f8c0:	1169      	asrs	r1, r5, #5
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	f005 051f 	and.w	r5, r5, #31
 800f8c8:	fa03 f505 	lsl.w	r5, r3, r5
 800f8cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8d0:	421d      	tst	r5, r3
 800f8d2:	bf18      	it	ne
 800f8d4:	f04f 0801 	movne.w	r8, #1
 800f8d8:	f048 0820 	orr.w	r8, r8, #32
 800f8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8de:	601c      	str	r4, [r3, #0]
 800f8e0:	9b02      	ldr	r3, [sp, #8]
 800f8e2:	601e      	str	r6, [r3, #0]
 800f8e4:	e6a2      	b.n	800f62c <__gethex+0x114>
 800f8e6:	4290      	cmp	r0, r2
 800f8e8:	f842 3c04 	str.w	r3, [r2, #-4]
 800f8ec:	d8d6      	bhi.n	800f89c <__gethex+0x384>
 800f8ee:	68a2      	ldr	r2, [r4, #8]
 800f8f0:	4593      	cmp	fp, r2
 800f8f2:	db17      	blt.n	800f924 <__gethex+0x40c>
 800f8f4:	6861      	ldr	r1, [r4, #4]
 800f8f6:	4648      	mov	r0, r9
 800f8f8:	3101      	adds	r1, #1
 800f8fa:	f7fd fff3 	bl	800d8e4 <_Balloc>
 800f8fe:	4682      	mov	sl, r0
 800f900:	b918      	cbnz	r0, 800f90a <__gethex+0x3f2>
 800f902:	4b1b      	ldr	r3, [pc, #108]	; (800f970 <__gethex+0x458>)
 800f904:	4602      	mov	r2, r0
 800f906:	2184      	movs	r1, #132	; 0x84
 800f908:	e6b3      	b.n	800f672 <__gethex+0x15a>
 800f90a:	6922      	ldr	r2, [r4, #16]
 800f90c:	3202      	adds	r2, #2
 800f90e:	f104 010c 	add.w	r1, r4, #12
 800f912:	0092      	lsls	r2, r2, #2
 800f914:	300c      	adds	r0, #12
 800f916:	f7fd f908 	bl	800cb2a <memcpy>
 800f91a:	4621      	mov	r1, r4
 800f91c:	4648      	mov	r0, r9
 800f91e:	f7fe f821 	bl	800d964 <_Bfree>
 800f922:	4654      	mov	r4, sl
 800f924:	6922      	ldr	r2, [r4, #16]
 800f926:	1c51      	adds	r1, r2, #1
 800f928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f92c:	6121      	str	r1, [r4, #16]
 800f92e:	2101      	movs	r1, #1
 800f930:	6151      	str	r1, [r2, #20]
 800f932:	e7bc      	b.n	800f8ae <__gethex+0x396>
 800f934:	6921      	ldr	r1, [r4, #16]
 800f936:	4559      	cmp	r1, fp
 800f938:	dd0b      	ble.n	800f952 <__gethex+0x43a>
 800f93a:	2101      	movs	r1, #1
 800f93c:	4620      	mov	r0, r4
 800f93e:	f7ff fd83 	bl	800f448 <rshift>
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	3601      	adds	r6, #1
 800f946:	42b3      	cmp	r3, r6
 800f948:	f6ff aedb 	blt.w	800f702 <__gethex+0x1ea>
 800f94c:	f04f 0801 	mov.w	r8, #1
 800f950:	e7c2      	b.n	800f8d8 <__gethex+0x3c0>
 800f952:	f015 051f 	ands.w	r5, r5, #31
 800f956:	d0f9      	beq.n	800f94c <__gethex+0x434>
 800f958:	9b01      	ldr	r3, [sp, #4]
 800f95a:	441a      	add	r2, r3
 800f95c:	f1c5 0520 	rsb	r5, r5, #32
 800f960:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f964:	f7fe f8b0 	bl	800dac8 <__hi0bits>
 800f968:	42a8      	cmp	r0, r5
 800f96a:	dbe6      	blt.n	800f93a <__gethex+0x422>
 800f96c:	e7ee      	b.n	800f94c <__gethex+0x434>
 800f96e:	bf00      	nop
 800f970:	08010529 	.word	0x08010529

0800f974 <L_shift>:
 800f974:	f1c2 0208 	rsb	r2, r2, #8
 800f978:	0092      	lsls	r2, r2, #2
 800f97a:	b570      	push	{r4, r5, r6, lr}
 800f97c:	f1c2 0620 	rsb	r6, r2, #32
 800f980:	6843      	ldr	r3, [r0, #4]
 800f982:	6804      	ldr	r4, [r0, #0]
 800f984:	fa03 f506 	lsl.w	r5, r3, r6
 800f988:	432c      	orrs	r4, r5
 800f98a:	40d3      	lsrs	r3, r2
 800f98c:	6004      	str	r4, [r0, #0]
 800f98e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f992:	4288      	cmp	r0, r1
 800f994:	d3f4      	bcc.n	800f980 <L_shift+0xc>
 800f996:	bd70      	pop	{r4, r5, r6, pc}

0800f998 <__match>:
 800f998:	b530      	push	{r4, r5, lr}
 800f99a:	6803      	ldr	r3, [r0, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a2:	b914      	cbnz	r4, 800f9aa <__match+0x12>
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	bd30      	pop	{r4, r5, pc}
 800f9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f9b2:	2d19      	cmp	r5, #25
 800f9b4:	bf98      	it	ls
 800f9b6:	3220      	addls	r2, #32
 800f9b8:	42a2      	cmp	r2, r4
 800f9ba:	d0f0      	beq.n	800f99e <__match+0x6>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	e7f3      	b.n	800f9a8 <__match+0x10>

0800f9c0 <__hexnan>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	680b      	ldr	r3, [r1, #0]
 800f9c6:	6801      	ldr	r1, [r0, #0]
 800f9c8:	115e      	asrs	r6, r3, #5
 800f9ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f9ce:	f013 031f 	ands.w	r3, r3, #31
 800f9d2:	b087      	sub	sp, #28
 800f9d4:	bf18      	it	ne
 800f9d6:	3604      	addne	r6, #4
 800f9d8:	2500      	movs	r5, #0
 800f9da:	1f37      	subs	r7, r6, #4
 800f9dc:	4682      	mov	sl, r0
 800f9de:	4690      	mov	r8, r2
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9e6:	46b9      	mov	r9, r7
 800f9e8:	463c      	mov	r4, r7
 800f9ea:	9502      	str	r5, [sp, #8]
 800f9ec:	46ab      	mov	fp, r5
 800f9ee:	784a      	ldrb	r2, [r1, #1]
 800f9f0:	1c4b      	adds	r3, r1, #1
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	b342      	cbz	r2, 800fa48 <__hexnan+0x88>
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	9105      	str	r1, [sp, #20]
 800f9fa:	9204      	str	r2, [sp, #16]
 800f9fc:	f7ff fd76 	bl	800f4ec <__hexdig_fun>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d14f      	bne.n	800faa4 <__hexnan+0xe4>
 800fa04:	9a04      	ldr	r2, [sp, #16]
 800fa06:	9905      	ldr	r1, [sp, #20]
 800fa08:	2a20      	cmp	r2, #32
 800fa0a:	d818      	bhi.n	800fa3e <__hexnan+0x7e>
 800fa0c:	9b02      	ldr	r3, [sp, #8]
 800fa0e:	459b      	cmp	fp, r3
 800fa10:	dd13      	ble.n	800fa3a <__hexnan+0x7a>
 800fa12:	454c      	cmp	r4, r9
 800fa14:	d206      	bcs.n	800fa24 <__hexnan+0x64>
 800fa16:	2d07      	cmp	r5, #7
 800fa18:	dc04      	bgt.n	800fa24 <__hexnan+0x64>
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	4649      	mov	r1, r9
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f7ff ffa8 	bl	800f974 <L_shift>
 800fa24:	4544      	cmp	r4, r8
 800fa26:	d950      	bls.n	800faca <__hexnan+0x10a>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f1a4 0904 	sub.w	r9, r4, #4
 800fa2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa32:	f8cd b008 	str.w	fp, [sp, #8]
 800fa36:	464c      	mov	r4, r9
 800fa38:	461d      	mov	r5, r3
 800fa3a:	9903      	ldr	r1, [sp, #12]
 800fa3c:	e7d7      	b.n	800f9ee <__hexnan+0x2e>
 800fa3e:	2a29      	cmp	r2, #41	; 0x29
 800fa40:	d155      	bne.n	800faee <__hexnan+0x12e>
 800fa42:	3102      	adds	r1, #2
 800fa44:	f8ca 1000 	str.w	r1, [sl]
 800fa48:	f1bb 0f00 	cmp.w	fp, #0
 800fa4c:	d04f      	beq.n	800faee <__hexnan+0x12e>
 800fa4e:	454c      	cmp	r4, r9
 800fa50:	d206      	bcs.n	800fa60 <__hexnan+0xa0>
 800fa52:	2d07      	cmp	r5, #7
 800fa54:	dc04      	bgt.n	800fa60 <__hexnan+0xa0>
 800fa56:	462a      	mov	r2, r5
 800fa58:	4649      	mov	r1, r9
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f7ff ff8a 	bl	800f974 <L_shift>
 800fa60:	4544      	cmp	r4, r8
 800fa62:	d934      	bls.n	800face <__hexnan+0x10e>
 800fa64:	f1a8 0204 	sub.w	r2, r8, #4
 800fa68:	4623      	mov	r3, r4
 800fa6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa72:	429f      	cmp	r7, r3
 800fa74:	d2f9      	bcs.n	800fa6a <__hexnan+0xaa>
 800fa76:	1b3b      	subs	r3, r7, r4
 800fa78:	f023 0303 	bic.w	r3, r3, #3
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	3e03      	subs	r6, #3
 800fa80:	3401      	adds	r4, #1
 800fa82:	42a6      	cmp	r6, r4
 800fa84:	bf38      	it	cc
 800fa86:	2304      	movcc	r3, #4
 800fa88:	4443      	add	r3, r8
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f843 2b04 	str.w	r2, [r3], #4
 800fa90:	429f      	cmp	r7, r3
 800fa92:	d2fb      	bcs.n	800fa8c <__hexnan+0xcc>
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	b91b      	cbnz	r3, 800faa0 <__hexnan+0xe0>
 800fa98:	4547      	cmp	r7, r8
 800fa9a:	d126      	bne.n	800faea <__hexnan+0x12a>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	603b      	str	r3, [r7, #0]
 800faa0:	2005      	movs	r0, #5
 800faa2:	e025      	b.n	800faf0 <__hexnan+0x130>
 800faa4:	3501      	adds	r5, #1
 800faa6:	2d08      	cmp	r5, #8
 800faa8:	f10b 0b01 	add.w	fp, fp, #1
 800faac:	dd06      	ble.n	800fabc <__hexnan+0xfc>
 800faae:	4544      	cmp	r4, r8
 800fab0:	d9c3      	bls.n	800fa3a <__hexnan+0x7a>
 800fab2:	2300      	movs	r3, #0
 800fab4:	f844 3c04 	str.w	r3, [r4, #-4]
 800fab8:	2501      	movs	r5, #1
 800faba:	3c04      	subs	r4, #4
 800fabc:	6822      	ldr	r2, [r4, #0]
 800fabe:	f000 000f 	and.w	r0, r0, #15
 800fac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fac6:	6020      	str	r0, [r4, #0]
 800fac8:	e7b7      	b.n	800fa3a <__hexnan+0x7a>
 800faca:	2508      	movs	r5, #8
 800facc:	e7b5      	b.n	800fa3a <__hexnan+0x7a>
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d0df      	beq.n	800fa94 <__hexnan+0xd4>
 800fad4:	f1c3 0320 	rsb	r3, r3, #32
 800fad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fadc:	40da      	lsrs	r2, r3
 800fade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fae2:	4013      	ands	r3, r2
 800fae4:	f846 3c04 	str.w	r3, [r6, #-4]
 800fae8:	e7d4      	b.n	800fa94 <__hexnan+0xd4>
 800faea:	3f04      	subs	r7, #4
 800faec:	e7d2      	b.n	800fa94 <__hexnan+0xd4>
 800faee:	2004      	movs	r0, #4
 800faf0:	b007      	add	sp, #28
 800faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800faf6 <__ascii_mbtowc>:
 800faf6:	b082      	sub	sp, #8
 800faf8:	b901      	cbnz	r1, 800fafc <__ascii_mbtowc+0x6>
 800fafa:	a901      	add	r1, sp, #4
 800fafc:	b142      	cbz	r2, 800fb10 <__ascii_mbtowc+0x1a>
 800fafe:	b14b      	cbz	r3, 800fb14 <__ascii_mbtowc+0x1e>
 800fb00:	7813      	ldrb	r3, [r2, #0]
 800fb02:	600b      	str	r3, [r1, #0]
 800fb04:	7812      	ldrb	r2, [r2, #0]
 800fb06:	1e10      	subs	r0, r2, #0
 800fb08:	bf18      	it	ne
 800fb0a:	2001      	movne	r0, #1
 800fb0c:	b002      	add	sp, #8
 800fb0e:	4770      	bx	lr
 800fb10:	4610      	mov	r0, r2
 800fb12:	e7fb      	b.n	800fb0c <__ascii_mbtowc+0x16>
 800fb14:	f06f 0001 	mvn.w	r0, #1
 800fb18:	e7f8      	b.n	800fb0c <__ascii_mbtowc+0x16>

0800fb1a <_realloc_r>:
 800fb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb1e:	4680      	mov	r8, r0
 800fb20:	4614      	mov	r4, r2
 800fb22:	460e      	mov	r6, r1
 800fb24:	b921      	cbnz	r1, 800fb30 <_realloc_r+0x16>
 800fb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2a:	4611      	mov	r1, r2
 800fb2c:	f7fb bede 	b.w	800b8ec <_malloc_r>
 800fb30:	b92a      	cbnz	r2, 800fb3e <_realloc_r+0x24>
 800fb32:	f7fd fe8b 	bl	800d84c <_free_r>
 800fb36:	4625      	mov	r5, r4
 800fb38:	4628      	mov	r0, r5
 800fb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb3e:	f000 f842 	bl	800fbc6 <_malloc_usable_size_r>
 800fb42:	4284      	cmp	r4, r0
 800fb44:	4607      	mov	r7, r0
 800fb46:	d802      	bhi.n	800fb4e <_realloc_r+0x34>
 800fb48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb4c:	d812      	bhi.n	800fb74 <_realloc_r+0x5a>
 800fb4e:	4621      	mov	r1, r4
 800fb50:	4640      	mov	r0, r8
 800fb52:	f7fb fecb 	bl	800b8ec <_malloc_r>
 800fb56:	4605      	mov	r5, r0
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	d0ed      	beq.n	800fb38 <_realloc_r+0x1e>
 800fb5c:	42bc      	cmp	r4, r7
 800fb5e:	4622      	mov	r2, r4
 800fb60:	4631      	mov	r1, r6
 800fb62:	bf28      	it	cs
 800fb64:	463a      	movcs	r2, r7
 800fb66:	f7fc ffe0 	bl	800cb2a <memcpy>
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	4640      	mov	r0, r8
 800fb6e:	f7fd fe6d 	bl	800d84c <_free_r>
 800fb72:	e7e1      	b.n	800fb38 <_realloc_r+0x1e>
 800fb74:	4635      	mov	r5, r6
 800fb76:	e7df      	b.n	800fb38 <_realloc_r+0x1e>

0800fb78 <__ascii_wctomb>:
 800fb78:	b149      	cbz	r1, 800fb8e <__ascii_wctomb+0x16>
 800fb7a:	2aff      	cmp	r2, #255	; 0xff
 800fb7c:	bf85      	ittet	hi
 800fb7e:	238a      	movhi	r3, #138	; 0x8a
 800fb80:	6003      	strhi	r3, [r0, #0]
 800fb82:	700a      	strbls	r2, [r1, #0]
 800fb84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fb88:	bf98      	it	ls
 800fb8a:	2001      	movls	r0, #1
 800fb8c:	4770      	bx	lr
 800fb8e:	4608      	mov	r0, r1
 800fb90:	4770      	bx	lr
	...

0800fb94 <fiprintf>:
 800fb94:	b40e      	push	{r1, r2, r3}
 800fb96:	b503      	push	{r0, r1, lr}
 800fb98:	4601      	mov	r1, r0
 800fb9a:	ab03      	add	r3, sp, #12
 800fb9c:	4805      	ldr	r0, [pc, #20]	; (800fbb4 <fiprintf+0x20>)
 800fb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fba2:	6800      	ldr	r0, [r0, #0]
 800fba4:	9301      	str	r3, [sp, #4]
 800fba6:	f000 f83f 	bl	800fc28 <_vfiprintf_r>
 800fbaa:	b002      	add	sp, #8
 800fbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbb0:	b003      	add	sp, #12
 800fbb2:	4770      	bx	lr
 800fbb4:	2000006c 	.word	0x2000006c

0800fbb8 <abort>:
 800fbb8:	b508      	push	{r3, lr}
 800fbba:	2006      	movs	r0, #6
 800fbbc:	f000 fa0c 	bl	800ffd8 <raise>
 800fbc0:	2001      	movs	r0, #1
 800fbc2:	f7f2 fd4b 	bl	800265c <_exit>

0800fbc6 <_malloc_usable_size_r>:
 800fbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbca:	1f18      	subs	r0, r3, #4
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	bfbc      	itt	lt
 800fbd0:	580b      	ldrlt	r3, [r1, r0]
 800fbd2:	18c0      	addlt	r0, r0, r3
 800fbd4:	4770      	bx	lr

0800fbd6 <__sfputc_r>:
 800fbd6:	6893      	ldr	r3, [r2, #8]
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	b410      	push	{r4}
 800fbde:	6093      	str	r3, [r2, #8]
 800fbe0:	da08      	bge.n	800fbf4 <__sfputc_r+0x1e>
 800fbe2:	6994      	ldr	r4, [r2, #24]
 800fbe4:	42a3      	cmp	r3, r4
 800fbe6:	db01      	blt.n	800fbec <__sfputc_r+0x16>
 800fbe8:	290a      	cmp	r1, #10
 800fbea:	d103      	bne.n	800fbf4 <__sfputc_r+0x1e>
 800fbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbf0:	f000 b934 	b.w	800fe5c <__swbuf_r>
 800fbf4:	6813      	ldr	r3, [r2, #0]
 800fbf6:	1c58      	adds	r0, r3, #1
 800fbf8:	6010      	str	r0, [r2, #0]
 800fbfa:	7019      	strb	r1, [r3, #0]
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <__sfputs_r>:
 800fc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc06:	4606      	mov	r6, r0
 800fc08:	460f      	mov	r7, r1
 800fc0a:	4614      	mov	r4, r2
 800fc0c:	18d5      	adds	r5, r2, r3
 800fc0e:	42ac      	cmp	r4, r5
 800fc10:	d101      	bne.n	800fc16 <__sfputs_r+0x12>
 800fc12:	2000      	movs	r0, #0
 800fc14:	e007      	b.n	800fc26 <__sfputs_r+0x22>
 800fc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc1a:	463a      	mov	r2, r7
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	f7ff ffda 	bl	800fbd6 <__sfputc_r>
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	d1f3      	bne.n	800fc0e <__sfputs_r+0xa>
 800fc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc28 <_vfiprintf_r>:
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	460d      	mov	r5, r1
 800fc2e:	b09d      	sub	sp, #116	; 0x74
 800fc30:	4614      	mov	r4, r2
 800fc32:	4698      	mov	r8, r3
 800fc34:	4606      	mov	r6, r0
 800fc36:	b118      	cbz	r0, 800fc40 <_vfiprintf_r+0x18>
 800fc38:	6a03      	ldr	r3, [r0, #32]
 800fc3a:	b90b      	cbnz	r3, 800fc40 <_vfiprintf_r+0x18>
 800fc3c:	f7fc fde4 	bl	800c808 <__sinit>
 800fc40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc42:	07d9      	lsls	r1, r3, #31
 800fc44:	d405      	bmi.n	800fc52 <_vfiprintf_r+0x2a>
 800fc46:	89ab      	ldrh	r3, [r5, #12]
 800fc48:	059a      	lsls	r2, r3, #22
 800fc4a:	d402      	bmi.n	800fc52 <_vfiprintf_r+0x2a>
 800fc4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc4e:	f7fc ff6a 	bl	800cb26 <__retarget_lock_acquire_recursive>
 800fc52:	89ab      	ldrh	r3, [r5, #12]
 800fc54:	071b      	lsls	r3, r3, #28
 800fc56:	d501      	bpl.n	800fc5c <_vfiprintf_r+0x34>
 800fc58:	692b      	ldr	r3, [r5, #16]
 800fc5a:	b99b      	cbnz	r3, 800fc84 <_vfiprintf_r+0x5c>
 800fc5c:	4629      	mov	r1, r5
 800fc5e:	4630      	mov	r0, r6
 800fc60:	f000 f93a 	bl	800fed8 <__swsetup_r>
 800fc64:	b170      	cbz	r0, 800fc84 <_vfiprintf_r+0x5c>
 800fc66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc68:	07dc      	lsls	r4, r3, #31
 800fc6a:	d504      	bpl.n	800fc76 <_vfiprintf_r+0x4e>
 800fc6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc70:	b01d      	add	sp, #116	; 0x74
 800fc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc76:	89ab      	ldrh	r3, [r5, #12]
 800fc78:	0598      	lsls	r0, r3, #22
 800fc7a:	d4f7      	bmi.n	800fc6c <_vfiprintf_r+0x44>
 800fc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc7e:	f7fc ff53 	bl	800cb28 <__retarget_lock_release_recursive>
 800fc82:	e7f3      	b.n	800fc6c <_vfiprintf_r+0x44>
 800fc84:	2300      	movs	r3, #0
 800fc86:	9309      	str	r3, [sp, #36]	; 0x24
 800fc88:	2320      	movs	r3, #32
 800fc8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc92:	2330      	movs	r3, #48	; 0x30
 800fc94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fe48 <_vfiprintf_r+0x220>
 800fc98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc9c:	f04f 0901 	mov.w	r9, #1
 800fca0:	4623      	mov	r3, r4
 800fca2:	469a      	mov	sl, r3
 800fca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fca8:	b10a      	cbz	r2, 800fcae <_vfiprintf_r+0x86>
 800fcaa:	2a25      	cmp	r2, #37	; 0x25
 800fcac:	d1f9      	bne.n	800fca2 <_vfiprintf_r+0x7a>
 800fcae:	ebba 0b04 	subs.w	fp, sl, r4
 800fcb2:	d00b      	beq.n	800fccc <_vfiprintf_r+0xa4>
 800fcb4:	465b      	mov	r3, fp
 800fcb6:	4622      	mov	r2, r4
 800fcb8:	4629      	mov	r1, r5
 800fcba:	4630      	mov	r0, r6
 800fcbc:	f7ff ffa2 	bl	800fc04 <__sfputs_r>
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	f000 80a9 	beq.w	800fe18 <_vfiprintf_r+0x1f0>
 800fcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcc8:	445a      	add	r2, fp
 800fcca:	9209      	str	r2, [sp, #36]	; 0x24
 800fccc:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f000 80a1 	beq.w	800fe18 <_vfiprintf_r+0x1f0>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fce0:	f10a 0a01 	add.w	sl, sl, #1
 800fce4:	9304      	str	r3, [sp, #16]
 800fce6:	9307      	str	r3, [sp, #28]
 800fce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcec:	931a      	str	r3, [sp, #104]	; 0x68
 800fcee:	4654      	mov	r4, sl
 800fcf0:	2205      	movs	r2, #5
 800fcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcf6:	4854      	ldr	r0, [pc, #336]	; (800fe48 <_vfiprintf_r+0x220>)
 800fcf8:	f7f0 fa6a 	bl	80001d0 <memchr>
 800fcfc:	9a04      	ldr	r2, [sp, #16]
 800fcfe:	b9d8      	cbnz	r0, 800fd38 <_vfiprintf_r+0x110>
 800fd00:	06d1      	lsls	r1, r2, #27
 800fd02:	bf44      	itt	mi
 800fd04:	2320      	movmi	r3, #32
 800fd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd0a:	0713      	lsls	r3, r2, #28
 800fd0c:	bf44      	itt	mi
 800fd0e:	232b      	movmi	r3, #43	; 0x2b
 800fd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd14:	f89a 3000 	ldrb.w	r3, [sl]
 800fd18:	2b2a      	cmp	r3, #42	; 0x2a
 800fd1a:	d015      	beq.n	800fd48 <_vfiprintf_r+0x120>
 800fd1c:	9a07      	ldr	r2, [sp, #28]
 800fd1e:	4654      	mov	r4, sl
 800fd20:	2000      	movs	r0, #0
 800fd22:	f04f 0c0a 	mov.w	ip, #10
 800fd26:	4621      	mov	r1, r4
 800fd28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd2c:	3b30      	subs	r3, #48	; 0x30
 800fd2e:	2b09      	cmp	r3, #9
 800fd30:	d94d      	bls.n	800fdce <_vfiprintf_r+0x1a6>
 800fd32:	b1b0      	cbz	r0, 800fd62 <_vfiprintf_r+0x13a>
 800fd34:	9207      	str	r2, [sp, #28]
 800fd36:	e014      	b.n	800fd62 <_vfiprintf_r+0x13a>
 800fd38:	eba0 0308 	sub.w	r3, r0, r8
 800fd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800fd40:	4313      	orrs	r3, r2
 800fd42:	9304      	str	r3, [sp, #16]
 800fd44:	46a2      	mov	sl, r4
 800fd46:	e7d2      	b.n	800fcee <_vfiprintf_r+0xc6>
 800fd48:	9b03      	ldr	r3, [sp, #12]
 800fd4a:	1d19      	adds	r1, r3, #4
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	9103      	str	r1, [sp, #12]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	bfbb      	ittet	lt
 800fd54:	425b      	neglt	r3, r3
 800fd56:	f042 0202 	orrlt.w	r2, r2, #2
 800fd5a:	9307      	strge	r3, [sp, #28]
 800fd5c:	9307      	strlt	r3, [sp, #28]
 800fd5e:	bfb8      	it	lt
 800fd60:	9204      	strlt	r2, [sp, #16]
 800fd62:	7823      	ldrb	r3, [r4, #0]
 800fd64:	2b2e      	cmp	r3, #46	; 0x2e
 800fd66:	d10c      	bne.n	800fd82 <_vfiprintf_r+0x15a>
 800fd68:	7863      	ldrb	r3, [r4, #1]
 800fd6a:	2b2a      	cmp	r3, #42	; 0x2a
 800fd6c:	d134      	bne.n	800fdd8 <_vfiprintf_r+0x1b0>
 800fd6e:	9b03      	ldr	r3, [sp, #12]
 800fd70:	1d1a      	adds	r2, r3, #4
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	9203      	str	r2, [sp, #12]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	bfb8      	it	lt
 800fd7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fd7e:	3402      	adds	r4, #2
 800fd80:	9305      	str	r3, [sp, #20]
 800fd82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fe58 <_vfiprintf_r+0x230>
 800fd86:	7821      	ldrb	r1, [r4, #0]
 800fd88:	2203      	movs	r2, #3
 800fd8a:	4650      	mov	r0, sl
 800fd8c:	f7f0 fa20 	bl	80001d0 <memchr>
 800fd90:	b138      	cbz	r0, 800fda2 <_vfiprintf_r+0x17a>
 800fd92:	9b04      	ldr	r3, [sp, #16]
 800fd94:	eba0 000a 	sub.w	r0, r0, sl
 800fd98:	2240      	movs	r2, #64	; 0x40
 800fd9a:	4082      	lsls	r2, r0
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	3401      	adds	r4, #1
 800fda0:	9304      	str	r3, [sp, #16]
 800fda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fda6:	4829      	ldr	r0, [pc, #164]	; (800fe4c <_vfiprintf_r+0x224>)
 800fda8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdac:	2206      	movs	r2, #6
 800fdae:	f7f0 fa0f 	bl	80001d0 <memchr>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d03f      	beq.n	800fe36 <_vfiprintf_r+0x20e>
 800fdb6:	4b26      	ldr	r3, [pc, #152]	; (800fe50 <_vfiprintf_r+0x228>)
 800fdb8:	bb1b      	cbnz	r3, 800fe02 <_vfiprintf_r+0x1da>
 800fdba:	9b03      	ldr	r3, [sp, #12]
 800fdbc:	3307      	adds	r3, #7
 800fdbe:	f023 0307 	bic.w	r3, r3, #7
 800fdc2:	3308      	adds	r3, #8
 800fdc4:	9303      	str	r3, [sp, #12]
 800fdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdc8:	443b      	add	r3, r7
 800fdca:	9309      	str	r3, [sp, #36]	; 0x24
 800fdcc:	e768      	b.n	800fca0 <_vfiprintf_r+0x78>
 800fdce:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	2001      	movs	r0, #1
 800fdd6:	e7a6      	b.n	800fd26 <_vfiprintf_r+0xfe>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	3401      	adds	r4, #1
 800fddc:	9305      	str	r3, [sp, #20]
 800fdde:	4619      	mov	r1, r3
 800fde0:	f04f 0c0a 	mov.w	ip, #10
 800fde4:	4620      	mov	r0, r4
 800fde6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdea:	3a30      	subs	r2, #48	; 0x30
 800fdec:	2a09      	cmp	r2, #9
 800fdee:	d903      	bls.n	800fdf8 <_vfiprintf_r+0x1d0>
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d0c6      	beq.n	800fd82 <_vfiprintf_r+0x15a>
 800fdf4:	9105      	str	r1, [sp, #20]
 800fdf6:	e7c4      	b.n	800fd82 <_vfiprintf_r+0x15a>
 800fdf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e7f0      	b.n	800fde4 <_vfiprintf_r+0x1bc>
 800fe02:	ab03      	add	r3, sp, #12
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	462a      	mov	r2, r5
 800fe08:	4b12      	ldr	r3, [pc, #72]	; (800fe54 <_vfiprintf_r+0x22c>)
 800fe0a:	a904      	add	r1, sp, #16
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	f7fb fe99 	bl	800bb44 <_printf_float>
 800fe12:	4607      	mov	r7, r0
 800fe14:	1c78      	adds	r0, r7, #1
 800fe16:	d1d6      	bne.n	800fdc6 <_vfiprintf_r+0x19e>
 800fe18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe1a:	07d9      	lsls	r1, r3, #31
 800fe1c:	d405      	bmi.n	800fe2a <_vfiprintf_r+0x202>
 800fe1e:	89ab      	ldrh	r3, [r5, #12]
 800fe20:	059a      	lsls	r2, r3, #22
 800fe22:	d402      	bmi.n	800fe2a <_vfiprintf_r+0x202>
 800fe24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe26:	f7fc fe7f 	bl	800cb28 <__retarget_lock_release_recursive>
 800fe2a:	89ab      	ldrh	r3, [r5, #12]
 800fe2c:	065b      	lsls	r3, r3, #25
 800fe2e:	f53f af1d 	bmi.w	800fc6c <_vfiprintf_r+0x44>
 800fe32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe34:	e71c      	b.n	800fc70 <_vfiprintf_r+0x48>
 800fe36:	ab03      	add	r3, sp, #12
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	462a      	mov	r2, r5
 800fe3c:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <_vfiprintf_r+0x22c>)
 800fe3e:	a904      	add	r1, sp, #16
 800fe40:	4630      	mov	r0, r6
 800fe42:	f7fc f923 	bl	800c08c <_printf_i>
 800fe46:	e7e4      	b.n	800fe12 <_vfiprintf_r+0x1ea>
 800fe48:	080107e9 	.word	0x080107e9
 800fe4c:	080107f3 	.word	0x080107f3
 800fe50:	0800bb45 	.word	0x0800bb45
 800fe54:	0800fc05 	.word	0x0800fc05
 800fe58:	080107ef 	.word	0x080107ef

0800fe5c <__swbuf_r>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	460e      	mov	r6, r1
 800fe60:	4614      	mov	r4, r2
 800fe62:	4605      	mov	r5, r0
 800fe64:	b118      	cbz	r0, 800fe6e <__swbuf_r+0x12>
 800fe66:	6a03      	ldr	r3, [r0, #32]
 800fe68:	b90b      	cbnz	r3, 800fe6e <__swbuf_r+0x12>
 800fe6a:	f7fc fccd 	bl	800c808 <__sinit>
 800fe6e:	69a3      	ldr	r3, [r4, #24]
 800fe70:	60a3      	str	r3, [r4, #8]
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	071a      	lsls	r2, r3, #28
 800fe76:	d525      	bpl.n	800fec4 <__swbuf_r+0x68>
 800fe78:	6923      	ldr	r3, [r4, #16]
 800fe7a:	b31b      	cbz	r3, 800fec4 <__swbuf_r+0x68>
 800fe7c:	6823      	ldr	r3, [r4, #0]
 800fe7e:	6922      	ldr	r2, [r4, #16]
 800fe80:	1a98      	subs	r0, r3, r2
 800fe82:	6963      	ldr	r3, [r4, #20]
 800fe84:	b2f6      	uxtb	r6, r6
 800fe86:	4283      	cmp	r3, r0
 800fe88:	4637      	mov	r7, r6
 800fe8a:	dc04      	bgt.n	800fe96 <__swbuf_r+0x3a>
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f7ff fa4a 	bl	800f328 <_fflush_r>
 800fe94:	b9e0      	cbnz	r0, 800fed0 <__swbuf_r+0x74>
 800fe96:	68a3      	ldr	r3, [r4, #8]
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	60a3      	str	r3, [r4, #8]
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	6022      	str	r2, [r4, #0]
 800fea2:	701e      	strb	r6, [r3, #0]
 800fea4:	6962      	ldr	r2, [r4, #20]
 800fea6:	1c43      	adds	r3, r0, #1
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d004      	beq.n	800feb6 <__swbuf_r+0x5a>
 800feac:	89a3      	ldrh	r3, [r4, #12]
 800feae:	07db      	lsls	r3, r3, #31
 800feb0:	d506      	bpl.n	800fec0 <__swbuf_r+0x64>
 800feb2:	2e0a      	cmp	r6, #10
 800feb4:	d104      	bne.n	800fec0 <__swbuf_r+0x64>
 800feb6:	4621      	mov	r1, r4
 800feb8:	4628      	mov	r0, r5
 800feba:	f7ff fa35 	bl	800f328 <_fflush_r>
 800febe:	b938      	cbnz	r0, 800fed0 <__swbuf_r+0x74>
 800fec0:	4638      	mov	r0, r7
 800fec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fec4:	4621      	mov	r1, r4
 800fec6:	4628      	mov	r0, r5
 800fec8:	f000 f806 	bl	800fed8 <__swsetup_r>
 800fecc:	2800      	cmp	r0, #0
 800fece:	d0d5      	beq.n	800fe7c <__swbuf_r+0x20>
 800fed0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fed4:	e7f4      	b.n	800fec0 <__swbuf_r+0x64>
	...

0800fed8 <__swsetup_r>:
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	4b2a      	ldr	r3, [pc, #168]	; (800ff84 <__swsetup_r+0xac>)
 800fedc:	4605      	mov	r5, r0
 800fede:	6818      	ldr	r0, [r3, #0]
 800fee0:	460c      	mov	r4, r1
 800fee2:	b118      	cbz	r0, 800feec <__swsetup_r+0x14>
 800fee4:	6a03      	ldr	r3, [r0, #32]
 800fee6:	b90b      	cbnz	r3, 800feec <__swsetup_r+0x14>
 800fee8:	f7fc fc8e 	bl	800c808 <__sinit>
 800feec:	89a3      	ldrh	r3, [r4, #12]
 800feee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fef2:	0718      	lsls	r0, r3, #28
 800fef4:	d422      	bmi.n	800ff3c <__swsetup_r+0x64>
 800fef6:	06d9      	lsls	r1, r3, #27
 800fef8:	d407      	bmi.n	800ff0a <__swsetup_r+0x32>
 800fefa:	2309      	movs	r3, #9
 800fefc:	602b      	str	r3, [r5, #0]
 800fefe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff08:	e034      	b.n	800ff74 <__swsetup_r+0x9c>
 800ff0a:	0758      	lsls	r0, r3, #29
 800ff0c:	d512      	bpl.n	800ff34 <__swsetup_r+0x5c>
 800ff0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff10:	b141      	cbz	r1, 800ff24 <__swsetup_r+0x4c>
 800ff12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff16:	4299      	cmp	r1, r3
 800ff18:	d002      	beq.n	800ff20 <__swsetup_r+0x48>
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	f7fd fc96 	bl	800d84c <_free_r>
 800ff20:	2300      	movs	r3, #0
 800ff22:	6363      	str	r3, [r4, #52]	; 0x34
 800ff24:	89a3      	ldrh	r3, [r4, #12]
 800ff26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff2a:	81a3      	strh	r3, [r4, #12]
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	6063      	str	r3, [r4, #4]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	6023      	str	r3, [r4, #0]
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	f043 0308 	orr.w	r3, r3, #8
 800ff3a:	81a3      	strh	r3, [r4, #12]
 800ff3c:	6923      	ldr	r3, [r4, #16]
 800ff3e:	b94b      	cbnz	r3, 800ff54 <__swsetup_r+0x7c>
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff4a:	d003      	beq.n	800ff54 <__swsetup_r+0x7c>
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	4628      	mov	r0, r5
 800ff50:	f000 f884 	bl	801005c <__smakebuf_r>
 800ff54:	89a0      	ldrh	r0, [r4, #12]
 800ff56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff5a:	f010 0301 	ands.w	r3, r0, #1
 800ff5e:	d00a      	beq.n	800ff76 <__swsetup_r+0x9e>
 800ff60:	2300      	movs	r3, #0
 800ff62:	60a3      	str	r3, [r4, #8]
 800ff64:	6963      	ldr	r3, [r4, #20]
 800ff66:	425b      	negs	r3, r3
 800ff68:	61a3      	str	r3, [r4, #24]
 800ff6a:	6923      	ldr	r3, [r4, #16]
 800ff6c:	b943      	cbnz	r3, 800ff80 <__swsetup_r+0xa8>
 800ff6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff72:	d1c4      	bne.n	800fefe <__swsetup_r+0x26>
 800ff74:	bd38      	pop	{r3, r4, r5, pc}
 800ff76:	0781      	lsls	r1, r0, #30
 800ff78:	bf58      	it	pl
 800ff7a:	6963      	ldrpl	r3, [r4, #20]
 800ff7c:	60a3      	str	r3, [r4, #8]
 800ff7e:	e7f4      	b.n	800ff6a <__swsetup_r+0x92>
 800ff80:	2000      	movs	r0, #0
 800ff82:	e7f7      	b.n	800ff74 <__swsetup_r+0x9c>
 800ff84:	2000006c 	.word	0x2000006c

0800ff88 <_raise_r>:
 800ff88:	291f      	cmp	r1, #31
 800ff8a:	b538      	push	{r3, r4, r5, lr}
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	460d      	mov	r5, r1
 800ff90:	d904      	bls.n	800ff9c <_raise_r+0x14>
 800ff92:	2316      	movs	r3, #22
 800ff94:	6003      	str	r3, [r0, #0]
 800ff96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ff9e:	b112      	cbz	r2, 800ffa6 <_raise_r+0x1e>
 800ffa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffa4:	b94b      	cbnz	r3, 800ffba <_raise_r+0x32>
 800ffa6:	4620      	mov	r0, r4
 800ffa8:	f000 f830 	bl	801000c <_getpid_r>
 800ffac:	462a      	mov	r2, r5
 800ffae:	4601      	mov	r1, r0
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffb6:	f000 b817 	b.w	800ffe8 <_kill_r>
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d00a      	beq.n	800ffd4 <_raise_r+0x4c>
 800ffbe:	1c59      	adds	r1, r3, #1
 800ffc0:	d103      	bne.n	800ffca <_raise_r+0x42>
 800ffc2:	2316      	movs	r3, #22
 800ffc4:	6003      	str	r3, [r0, #0]
 800ffc6:	2001      	movs	r0, #1
 800ffc8:	e7e7      	b.n	800ff9a <_raise_r+0x12>
 800ffca:	2400      	movs	r4, #0
 800ffcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	4798      	blx	r3
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	e7e0      	b.n	800ff9a <_raise_r+0x12>

0800ffd8 <raise>:
 800ffd8:	4b02      	ldr	r3, [pc, #8]	; (800ffe4 <raise+0xc>)
 800ffda:	4601      	mov	r1, r0
 800ffdc:	6818      	ldr	r0, [r3, #0]
 800ffde:	f7ff bfd3 	b.w	800ff88 <_raise_r>
 800ffe2:	bf00      	nop
 800ffe4:	2000006c 	.word	0x2000006c

0800ffe8 <_kill_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	4d07      	ldr	r5, [pc, #28]	; (8010008 <_kill_r+0x20>)
 800ffec:	2300      	movs	r3, #0
 800ffee:	4604      	mov	r4, r0
 800fff0:	4608      	mov	r0, r1
 800fff2:	4611      	mov	r1, r2
 800fff4:	602b      	str	r3, [r5, #0]
 800fff6:	f7f2 fb21 	bl	800263c <_kill>
 800fffa:	1c43      	adds	r3, r0, #1
 800fffc:	d102      	bne.n	8010004 <_kill_r+0x1c>
 800fffe:	682b      	ldr	r3, [r5, #0]
 8010000:	b103      	cbz	r3, 8010004 <_kill_r+0x1c>
 8010002:	6023      	str	r3, [r4, #0]
 8010004:	bd38      	pop	{r3, r4, r5, pc}
 8010006:	bf00      	nop
 8010008:	20002084 	.word	0x20002084

0801000c <_getpid_r>:
 801000c:	f7f2 bb0e 	b.w	800262c <_getpid>

08010010 <__swhatbuf_r>:
 8010010:	b570      	push	{r4, r5, r6, lr}
 8010012:	460c      	mov	r4, r1
 8010014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010018:	2900      	cmp	r1, #0
 801001a:	b096      	sub	sp, #88	; 0x58
 801001c:	4615      	mov	r5, r2
 801001e:	461e      	mov	r6, r3
 8010020:	da0d      	bge.n	801003e <__swhatbuf_r+0x2e>
 8010022:	89a3      	ldrh	r3, [r4, #12]
 8010024:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010028:	f04f 0100 	mov.w	r1, #0
 801002c:	bf0c      	ite	eq
 801002e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010032:	2340      	movne	r3, #64	; 0x40
 8010034:	2000      	movs	r0, #0
 8010036:	6031      	str	r1, [r6, #0]
 8010038:	602b      	str	r3, [r5, #0]
 801003a:	b016      	add	sp, #88	; 0x58
 801003c:	bd70      	pop	{r4, r5, r6, pc}
 801003e:	466a      	mov	r2, sp
 8010040:	f000 f848 	bl	80100d4 <_fstat_r>
 8010044:	2800      	cmp	r0, #0
 8010046:	dbec      	blt.n	8010022 <__swhatbuf_r+0x12>
 8010048:	9901      	ldr	r1, [sp, #4]
 801004a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801004e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010052:	4259      	negs	r1, r3
 8010054:	4159      	adcs	r1, r3
 8010056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801005a:	e7eb      	b.n	8010034 <__swhatbuf_r+0x24>

0801005c <__smakebuf_r>:
 801005c:	898b      	ldrh	r3, [r1, #12]
 801005e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010060:	079d      	lsls	r5, r3, #30
 8010062:	4606      	mov	r6, r0
 8010064:	460c      	mov	r4, r1
 8010066:	d507      	bpl.n	8010078 <__smakebuf_r+0x1c>
 8010068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	6123      	str	r3, [r4, #16]
 8010070:	2301      	movs	r3, #1
 8010072:	6163      	str	r3, [r4, #20]
 8010074:	b002      	add	sp, #8
 8010076:	bd70      	pop	{r4, r5, r6, pc}
 8010078:	ab01      	add	r3, sp, #4
 801007a:	466a      	mov	r2, sp
 801007c:	f7ff ffc8 	bl	8010010 <__swhatbuf_r>
 8010080:	9900      	ldr	r1, [sp, #0]
 8010082:	4605      	mov	r5, r0
 8010084:	4630      	mov	r0, r6
 8010086:	f7fb fc31 	bl	800b8ec <_malloc_r>
 801008a:	b948      	cbnz	r0, 80100a0 <__smakebuf_r+0x44>
 801008c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010090:	059a      	lsls	r2, r3, #22
 8010092:	d4ef      	bmi.n	8010074 <__smakebuf_r+0x18>
 8010094:	f023 0303 	bic.w	r3, r3, #3
 8010098:	f043 0302 	orr.w	r3, r3, #2
 801009c:	81a3      	strh	r3, [r4, #12]
 801009e:	e7e3      	b.n	8010068 <__smakebuf_r+0xc>
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	6020      	str	r0, [r4, #0]
 80100a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a8:	81a3      	strh	r3, [r4, #12]
 80100aa:	9b00      	ldr	r3, [sp, #0]
 80100ac:	6163      	str	r3, [r4, #20]
 80100ae:	9b01      	ldr	r3, [sp, #4]
 80100b0:	6120      	str	r0, [r4, #16]
 80100b2:	b15b      	cbz	r3, 80100cc <__smakebuf_r+0x70>
 80100b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100b8:	4630      	mov	r0, r6
 80100ba:	f000 f81d 	bl	80100f8 <_isatty_r>
 80100be:	b128      	cbz	r0, 80100cc <__smakebuf_r+0x70>
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	f023 0303 	bic.w	r3, r3, #3
 80100c6:	f043 0301 	orr.w	r3, r3, #1
 80100ca:	81a3      	strh	r3, [r4, #12]
 80100cc:	89a3      	ldrh	r3, [r4, #12]
 80100ce:	431d      	orrs	r5, r3
 80100d0:	81a5      	strh	r5, [r4, #12]
 80100d2:	e7cf      	b.n	8010074 <__smakebuf_r+0x18>

080100d4 <_fstat_r>:
 80100d4:	b538      	push	{r3, r4, r5, lr}
 80100d6:	4d07      	ldr	r5, [pc, #28]	; (80100f4 <_fstat_r+0x20>)
 80100d8:	2300      	movs	r3, #0
 80100da:	4604      	mov	r4, r0
 80100dc:	4608      	mov	r0, r1
 80100de:	4611      	mov	r1, r2
 80100e0:	602b      	str	r3, [r5, #0]
 80100e2:	f7f2 fb0a 	bl	80026fa <_fstat>
 80100e6:	1c43      	adds	r3, r0, #1
 80100e8:	d102      	bne.n	80100f0 <_fstat_r+0x1c>
 80100ea:	682b      	ldr	r3, [r5, #0]
 80100ec:	b103      	cbz	r3, 80100f0 <_fstat_r+0x1c>
 80100ee:	6023      	str	r3, [r4, #0]
 80100f0:	bd38      	pop	{r3, r4, r5, pc}
 80100f2:	bf00      	nop
 80100f4:	20002084 	.word	0x20002084

080100f8 <_isatty_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d06      	ldr	r5, [pc, #24]	; (8010114 <_isatty_r+0x1c>)
 80100fc:	2300      	movs	r3, #0
 80100fe:	4604      	mov	r4, r0
 8010100:	4608      	mov	r0, r1
 8010102:	602b      	str	r3, [r5, #0]
 8010104:	f7f2 fb09 	bl	800271a <_isatty>
 8010108:	1c43      	adds	r3, r0, #1
 801010a:	d102      	bne.n	8010112 <_isatty_r+0x1a>
 801010c:	682b      	ldr	r3, [r5, #0]
 801010e:	b103      	cbz	r3, 8010112 <_isatty_r+0x1a>
 8010110:	6023      	str	r3, [r4, #0]
 8010112:	bd38      	pop	{r3, r4, r5, pc}
 8010114:	20002084 	.word	0x20002084

08010118 <sqrtf>:
 8010118:	b508      	push	{r3, lr}
 801011a:	ed2d 8b02 	vpush	{d8}
 801011e:	eeb0 8a40 	vmov.f32	s16, s0
 8010122:	f000 f817 	bl	8010154 <__ieee754_sqrtf>
 8010126:	eeb4 8a48 	vcmp.f32	s16, s16
 801012a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012e:	d60c      	bvs.n	801014a <sqrtf+0x32>
 8010130:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010150 <sqrtf+0x38>
 8010134:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013c:	d505      	bpl.n	801014a <sqrtf+0x32>
 801013e:	f7fc fcc7 	bl	800cad0 <__errno>
 8010142:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010146:	2321      	movs	r3, #33	; 0x21
 8010148:	6003      	str	r3, [r0, #0]
 801014a:	ecbd 8b02 	vpop	{d8}
 801014e:	bd08      	pop	{r3, pc}
 8010150:	00000000 	.word	0x00000000

08010154 <__ieee754_sqrtf>:
 8010154:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010158:	4770      	bx	lr
	...

0801015c <_init>:
 801015c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801015e:	bf00      	nop
 8010160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010162:	bc08      	pop	{r3}
 8010164:	469e      	mov	lr, r3
 8010166:	4770      	bx	lr

08010168 <_fini>:
 8010168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016a:	bf00      	nop
 801016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016e:	bc08      	pop	{r3}
 8010170:	469e      	mov	lr, r3
 8010172:	4770      	bx	lr
